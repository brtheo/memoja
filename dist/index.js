function toArray(objectOrArray) {
  objectOrArray = objectOrArray || [];
  return Array.isArray(objectOrArray) ? objectOrArray : [objectOrArray];
}

function log(msg) {
  return `[Vaadin.Router] ${msg}`;
}

function logValue(value) {
  if (typeof value !== 'object') {
    return String(value);
  }

  const stringType = Object.prototype.toString.call(value).match(/ (.*)\]$/)[1];
  if (stringType === 'Object' || stringType === 'Array') {
    return `${stringType} ${JSON.stringify(value)}`;
  } else {
    return stringType;
  }
}

const MODULE = 'module';
const NOMODULE = 'nomodule';
const bundleKeys = [MODULE, NOMODULE];

function ensureBundle(src) {
  if (!src.match(/.+\.[m]?js$/)) {
    throw new Error(
      log(`Unsupported type for bundle "${src}": .js or .mjs expected.`)
    );
  }
}

function ensureRoute(route) {
  if (!route || !isString(route.path)) {
    throw new Error(
      log(`Expected route config to be an object with a "path" string property, or an array of such objects`)
    );
  }

  const bundle = route.bundle;

  const stringKeys = ['component', 'redirect', 'bundle'];
  if (
    !isFunction(route.action) &&
    !Array.isArray(route.children) &&
    !isFunction(route.children) &&
    !isObject(bundle) &&
    !stringKeys.some(key => isString(route[key]))
  ) {
    throw new Error(
      log(
        `Expected route config "${route.path}" to include either "${stringKeys.join('", "')}" ` +
        `or "action" function but none found.`
      )
    );
  }

  if (bundle) {
    if (isString(bundle)) {
      ensureBundle(bundle);
    } else if (!bundleKeys.some(key => key in bundle)) {
      throw new Error(
        log('Expected route bundle to include either "' + NOMODULE + '" or "' + MODULE + '" keys, or both')
      );
    } else {
      bundleKeys.forEach(key => key in bundle && ensureBundle(bundle[key]));
    }
  }

  if (route.redirect) {
    ['bundle', 'component'].forEach(overriddenProp => {
      if (overriddenProp in route) {
        console.warn(
          log(
            `Route config "${route.path}" has both "redirect" and "${overriddenProp}" properties, ` +
            `and "redirect" will always override the latter. Did you mean to only use "${overriddenProp}"?`
          )
        );
      }
    });
  }
}

function ensureRoutes(routes) {
  toArray(routes).forEach(route => ensureRoute(route));
}

function loadScript(src, key) {
  let script = document.head.querySelector('script[src="' + src + '"][async]');
  if (!script) {
    script = document.createElement('script');
    script.setAttribute('src', src);
    if (key === MODULE) {
      script.setAttribute('type', MODULE);
    } else if (key === NOMODULE) {
      script.setAttribute(NOMODULE, '');
    }
    script.async = true;
  }
  return new Promise((resolve, reject) => {
    script.onreadystatechange = script.onload = e => {
      script.__dynamicImportLoaded = true;
      resolve(e);
    };
    script.onerror = e => {
      if (script.parentNode) {
        script.parentNode.removeChild(script);
      }
      reject(e);
    };
    if (script.parentNode === null) {
      document.head.appendChild(script);
    } else if (script.__dynamicImportLoaded) {
      resolve();
    }
  });
}

function loadBundle(bundle) {
  if (isString(bundle)) {
    return loadScript(bundle);
  } else {
    return Promise.race(
      bundleKeys
        .filter(key => key in bundle)
        .map(key => loadScript(bundle[key], key))
    );
  }
}

function fireRouterEvent(type, detail) {
  return !window.dispatchEvent(new CustomEvent(
    `vaadin-router-${type}`,
    {cancelable: type === 'go', detail}
  ));
}

function isObject(o) {
  // guard against null passing the typeof check
  return typeof o === 'object' && !!o;
}

function isFunction(f) {
  return typeof f === 'function';
}

function isString(s) {
  return typeof s === 'string';
}

function getNotFoundError(context) {
  const error = new Error(log(`Page not found (${context.pathname})`));
  error.context = context;
  error.code = 404;
  return error;
}

const notFoundResult = new (class NotFoundResult {})();

/* istanbul ignore next: coverage is calculated in Chrome, this code is for IE */
function getAnchorOrigin(anchor) {
  // IE11: on HTTP and HTTPS the default port is not included into
  // window.location.origin, so won't include it here either.
  const port = anchor.port;
  const protocol = anchor.protocol;
  const defaultHttp = protocol === 'http:' && port === '80';
  const defaultHttps = protocol === 'https:' && port === '443';
  const host = (defaultHttp || defaultHttps)
    ? anchor.hostname // does not include the port number (e.g. www.example.org)
    : anchor.host; // does include the port number (e.g. www.example.org:80)
  return `${protocol}//${host}`;
}

// The list of checks is not complete:
//  - SVG support is missing
//  - the 'rel' attribute is not considered
function vaadinRouterGlobalClickHandler(event) {
  // ignore the click if the default action is prevented
  if (event.defaultPrevented) {
    return;
  }

  // ignore the click if not with the primary mouse button
  if (event.button !== 0) {
    return;
  }

  // ignore the click if a modifier key is pressed
  if (event.shiftKey || event.ctrlKey || event.altKey || event.metaKey) {
    return;
  }

  // find the <a> element that the click is at (or within)
  let anchor = event.target;
  const path = event.composedPath
    ? event.composedPath()
    : (event.path || []);

  // FIXME(web-padawan): `Symbol.iterator` used by webcomponentsjs is broken for arrays
  // example to check: `for...of` loop here throws the "Not yet implemented" error
  for (let i = 0; i < path.length; i++) {
    const target = path[i];
    if (target.nodeName && target.nodeName.toLowerCase() === 'a') {
      anchor = target;
      break;
    }
  }

  while (anchor && anchor.nodeName.toLowerCase() !== 'a') {
    anchor = anchor.parentNode;
  }

  // ignore the click if not at an <a> element
  if (!anchor || anchor.nodeName.toLowerCase() !== 'a') {
    return;
  }

  // ignore the click if the <a> element has a non-default target
  if (anchor.target && anchor.target.toLowerCase() !== '_self') {
    return;
  }

  // ignore the click if the <a> element has the 'download' attribute
  if (anchor.hasAttribute('download')) {
    return;
  }

  // ignore the click if the <a> element has the 'router-ignore' attribute
  if (anchor.hasAttribute('router-ignore')) {
    return;
  }

  // ignore the click if the target URL is a fragment on the current page
  if (anchor.pathname === window.location.pathname && anchor.hash !== '') {
    return;
  }

  // ignore the click if the target is external to the app
  // In IE11 HTMLAnchorElement does not have the `origin` property
  const origin = anchor.origin || getAnchorOrigin(anchor);
  if (origin !== window.location.origin) {
    return;
  }

  // if none of the above, convert the click into a navigation event
  const {pathname, search, hash} = anchor;
  if (fireRouterEvent('go', {pathname, search, hash})) {
    event.preventDefault();
  }
}

/**
 * A navigation trigger for Vaadin Router that translated clicks on `<a>` links
 * into Vaadin Router navigation events.
 *
 * Only regular clicks on in-app links are translated (primary mouse button, no
 * modifier keys, the target href is within the app's URL space).
 *
 * @memberOf Router.NavigationTrigger
 * @type {NavigationTrigger}
 */
const CLICK = {
  activate() {
    window.document.addEventListener('click', vaadinRouterGlobalClickHandler);
  },

  inactivate() {
    window.document.removeEventListener('click', vaadinRouterGlobalClickHandler);
  }
};

// PopStateEvent constructor shim
const isIE = /Trident/.test(navigator.userAgent);

/* istanbul ignore next: coverage is calculated in Chrome, this code is for IE */
if (isIE && !isFunction(window.PopStateEvent)) {
  window.PopStateEvent = function(inType, params) {
    params = params || {};
    var e = document.createEvent('Event');
    e.initEvent(inType, Boolean(params.bubbles), Boolean(params.cancelable));
    e.state = params.state || null;
    return e;
  };
  window.PopStateEvent.prototype = window.Event.prototype;
}

function vaadinRouterGlobalPopstateHandler(event) {
  if (event.state === 'vaadin-router-ignore') {
    return;
  }
  const {pathname, search, hash} = window.location;
  fireRouterEvent('go', {pathname, search, hash});
}

/**
 * A navigation trigger for Vaadin Router that translates popstate events into
 * Vaadin Router navigation events.
 *
 * @memberOf Router.NavigationTrigger
 * @type {NavigationTrigger}
 */
const POPSTATE = {
  activate() {
    window.addEventListener('popstate', vaadinRouterGlobalPopstateHandler);
  },

  inactivate() {
    window.removeEventListener('popstate', vaadinRouterGlobalPopstateHandler);
  }
};

/**
 * Expose `pathToRegexp`.
 */
var pathToRegexp_1 = pathToRegexp;
var parse_1 = parse;
var compile_1 = compile;
var tokensToFunction_1 = tokensToFunction;
var tokensToRegExp_1 = tokensToRegExp;

/**
 * Default configs.
 */
var DEFAULT_DELIMITER = '/';
var DEFAULT_DELIMITERS = './';

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */
var PATH_REGEXP = new RegExp([
  // Match escaped characters that would otherwise appear in future matches.
  // This allows the user to escape special characters that won't transform.
  '(\\\\.)',
  // Match Express-style parameters and un-named parameters with a prefix
  // and optional suffixes. Matches appear as:
  //
  // ":test(\\d+)?" => ["test", "\d+", undefined, "?"]
  // "(\\d+)"  => [undefined, undefined, "\d+", undefined]
  '(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?'
].join('|'), 'g');

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */
function parse (str, options) {
  var tokens = [];
  var key = 0;
  var index = 0;
  var path = '';
  var defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER;
  var delimiters = (options && options.delimiters) || DEFAULT_DELIMITERS;
  var pathEscaped = false;
  var res;

  while ((res = PATH_REGEXP.exec(str)) !== null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index, offset);
    index = offset + m.length;

    // Ignore already escaped sequences.
    if (escaped) {
      path += escaped[1];
      pathEscaped = true;
      continue
    }

    var prev = '';
    var next = str[index];
    var name = res[2];
    var capture = res[3];
    var group = res[4];
    var modifier = res[5];

    if (!pathEscaped && path.length) {
      var k = path.length - 1;

      if (delimiters.indexOf(path[k]) > -1) {
        prev = path[k];
        path = path.slice(0, k);
      }
    }

    // Push the current path onto the tokens.
    if (path) {
      tokens.push(path);
      path = '';
      pathEscaped = false;
    }

    var partial = prev !== '' && next !== undefined && next !== prev;
    var repeat = modifier === '+' || modifier === '*';
    var optional = modifier === '?' || modifier === '*';
    var delimiter = prev || defaultDelimiter;
    var pattern = capture || group;

    tokens.push({
      name: name || key++,
      prefix: prev,
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'
    });
  }

  // Push any remaining characters.
  if (path || index < str.length) {
    tokens.push(path + str.substr(index));
  }

  return tokens
}

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */
function compile (str, options) {
  return tokensToFunction(parse(str, options))
}

/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction (tokens) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length);

  // Compile all the patterns before compilation.
  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
    }
  }

  return function (data, options) {
    var path = '';
    var encode = (options && options.encode) || encodeURIComponent;

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        path += token;
        continue
      }

      var value = data ? data[token.name] : undefined;
      var segment;

      if (Array.isArray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but got array')
        }

        if (value.length === 0) {
          if (token.optional) continue

          throw new TypeError('Expected "' + token.name + '" to not be empty')
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j], token);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '"')
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }

        continue
      }

      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {
        segment = encode(String(value), token);

        if (!matches[i].test(segment)) {
          throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but got "' + segment + '"')
        }

        path += token.prefix + segment;
        continue
      }

      if (token.optional) {
        // Prepend partial segment prefixes.
        if (token.partial) path += token.prefix;

        continue
      }

      throw new TypeError('Expected "' + token.name + '" to be ' + (token.repeat ? 'an array' : 'a string'))
    }

    return path
  }
}

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */
function escapeString (str) {
  return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, '\\$1')
}

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */
function escapeGroup (group) {
  return group.replace(/([=!:$/()])/g, '\\$1')
}

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */
function flags (options) {
  return options && options.sensitive ? '' : 'i'
}

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {Array=}  keys
 * @return {!RegExp}
 */
function regexpToRegexp (path, keys) {
  if (!keys) return path

  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g);

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        pattern: null
      });
    }
  }

  return path
}

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array=}  keys
 * @param  {Object=} options
 * @return {!RegExp}
 */
function arrayToRegexp (path, keys, options) {
  var parts = [];

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source);
  }

  return new RegExp('(?:' + parts.join('|') + ')', flags(options))
}

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {Array=}  keys
 * @param  {Object=} options
 * @return {!RegExp}
 */
function stringToRegexp (path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options)
}

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}  tokens
 * @param  {Array=}  keys
 * @param  {Object=} options
 * @return {!RegExp}
 */
function tokensToRegExp (tokens, keys, options) {
  options = options || {};

  var strict = options.strict;
  var start = options.start !== false;
  var end = options.end !== false;
  var delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER);
  var delimiters = options.delimiters || DEFAULT_DELIMITERS;
  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|');
  var route = start ? '^' : '';
  var isEndDelimited = tokens.length === 0;

  // Iterate over the tokens and create our regexp string.
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (typeof token === 'string') {
      route += escapeString(token);
      isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1;
    } else {
      var capture = token.repeat
        ? '(?:' + token.pattern + ')(?:' + escapeString(token.delimiter) + '(?:' + token.pattern + '))*'
        : token.pattern;

      if (keys) keys.push(token);

      if (token.optional) {
        if (token.partial) {
          route += escapeString(token.prefix) + '(' + capture + ')?';
        } else {
          route += '(?:' + escapeString(token.prefix) + '(' + capture + '))?';
        }
      } else {
        route += escapeString(token.prefix) + '(' + capture + ')';
      }
    }
  }

  if (end) {
    if (!strict) route += '(?:' + delimiter + ')?';

    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')';
  } else {
    if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?';
    if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')';
  }

  return new RegExp(route, flags(options))
}

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {Array=}                keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */
function pathToRegexp (path, keys, options) {
  if (path instanceof RegExp) {
    return regexpToRegexp(path, keys)
  }

  if (Array.isArray(path)) {
    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)
  }

  return stringToRegexp(/** @type {string} */ (path), keys, options)
}
pathToRegexp_1.parse = parse_1;
pathToRegexp_1.compile = compile_1;
pathToRegexp_1.tokensToFunction = tokensToFunction_1;
pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;

/**
 * Universal Router (https://www.kriasoft.com/universal-router/)
 *
 * Copyright (c) 2015-present Kriasoft.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */

const {hasOwnProperty} = Object.prototype;
const cache = new Map();
// see https://github.com/pillarjs/path-to-regexp/issues/148
cache.set('|false', {
  keys: [],
  pattern: /(?:)/
});

function decodeParam(val) {
  try {
    return decodeURIComponent(val);
  } catch (err) {
    return val;
  }
}

function matchPath(routepath, path, exact, parentKeys, parentParams) {
  exact = !!exact;
  const cacheKey = `${routepath}|${exact}`;
  let regexp = cache.get(cacheKey);

  if (!regexp) {
    const keys = [];
    regexp = {
      keys,
      pattern: pathToRegexp_1(routepath, keys, {
        end: exact,
        strict: routepath === ''
      }),
    };
    cache.set(cacheKey, regexp);
  }

  const m = regexp.pattern.exec(path);
  if (!m) {
    return null;
  }

  const params = Object.assign({}, parentParams);

  for (let i = 1; i < m.length; i++) {
    const key = regexp.keys[i - 1];
    const prop = key.name;
    const value = m[i];
    if (value !== undefined || !hasOwnProperty.call(params, prop)) {
      if (key.repeat) {
        params[prop] = value ? value.split(key.delimiter).map(decodeParam) : [];
      } else {
        params[prop] = value ? decodeParam(value) : value;
      }
    }
  }

  return {
    path: m[0],
    keys: (parentKeys || []).concat(regexp.keys),
    params,
  };
}

/**
 * Universal Router (https://www.kriasoft.com/universal-router/)
 *
 * Copyright (c) 2015-present Kriasoft.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */

/**
 * Traverses the routes tree and matches its nodes to the given pathname from
 * the root down to the leaves. Each match consumes a part of the pathname and
 * the matching process continues for as long as there is a matching child
 * route for the remaining part of the pathname.
 *
 * The returned value is a lazily evaluated iterator.
 *
 * The leading "/" in a route path matters only for the root of the routes
 * tree (or if all parent routes are ""). In all other cases a leading "/" in
 * a child route path has no significance.
 *
 * The trailing "/" in a _route path_ matters only for the leaves of the
 * routes tree. A leaf route with a trailing "/" matches only a pathname that
 * also has a trailing "/".
 *
 * The trailing "/" in a route path does not affect matching of child routes
 * in any way.
 *
 * The trailing "/" in a _pathname_ generally does not matter (except for
 * the case of leaf nodes described above).
 *
 * The "" and "/" routes have special treatment:
 *  1. as a single route
 *     the "" and "/" routes match only the "" and "/" pathnames respectively
 *  2. as a parent in the routes tree
 *     the "" route matches any pathname without consuming any part of it
 *     the "/" route matches any absolute pathname consuming its leading "/"
 *  3. as a leaf in the routes tree
 *     the "" and "/" routes match only if the entire pathname is consumed by
 *         the parent routes chain. In this case "" and "/" are equivalent.
 *  4. several directly nested "" or "/" routes
 *     - directly nested "" or "/" routes are 'squashed' (i.e. nesting two
 *       "/" routes does not require a double "/" in the pathname to match)
 *     - if there are only "" in the parent routes chain, no part of the
 *       pathname is consumed, and the leading "/" in the child routes' paths
 *       remains significant
 *
 * Side effect:
 *   - the routes tree { path: '' } matches only the '' pathname
 *   - the routes tree { path: '', children: [ { path: '' } ] } matches any
 *     pathname (for the tree root)
 *
 * Prefix matching can be enabled also by `children: true`.
 */
function matchRoute(route, pathname, ignoreLeadingSlash, parentKeys, parentParams) {
  let match;
  let childMatches;
  let childIndex = 0;
  let routepath = route.path || '';
  if (routepath.charAt(0) === '/') {
    if (ignoreLeadingSlash) {
      routepath = routepath.substr(1);
    }
    ignoreLeadingSlash = true;
  }

  return {
    next(routeToSkip) {
      if (route === routeToSkip) {
        return {done: true};
      }

      const children = route.__children = route.__children || route.children;

      if (!match) {
        match = matchPath(routepath, pathname, !children, parentKeys, parentParams);

        if (match) {
          return {
            done: false,
            value: {
              route,
              keys: match.keys,
              params: match.params,
              path: match.path
            },
          };
        }
      }

      if (match && children) {
        while (childIndex < children.length) {
          if (!childMatches) {
            const childRoute = children[childIndex];
            childRoute.parent = route;

            let matchedLength = match.path.length;
            if (matchedLength > 0 && pathname.charAt(matchedLength) === '/') {
              matchedLength += 1;
            }

            childMatches = matchRoute(
              childRoute,
              pathname.substr(matchedLength),
              ignoreLeadingSlash,
              match.keys,
              match.params
            );
          }

          const childMatch = childMatches.next(routeToSkip);
          if (!childMatch.done) {
            return {
              done: false,
              value: childMatch.value,
            };
          }

          childMatches = null;
          childIndex++;
        }
      }

      return {done: true};
    },
  };
}

/**
 * Universal Router (https://www.kriasoft.com/universal-router/)
 *
 * Copyright (c) 2015-present Kriasoft.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */

function resolveRoute(context) {
  if (isFunction(context.route.action)) {
    return context.route.action(context);
  }
  return undefined;
}

/**
 * Universal Router (https://www.kriasoft.com/universal-router/)
 *
 * Copyright (c) 2015-present Kriasoft.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */

function isChildRoute(parentRoute, childRoute) {
  let route = childRoute;
  while (route) {
    route = route.parent;
    if (route === parentRoute) {
      return true;
    }
  }
  return false;
}

function generateErrorMessage(currentContext) {
  let errorMessage = `Path '${currentContext.pathname}' is not properly resolved due to an error.`;
  const routePath = (currentContext.route || {}).path;
  if (routePath) {
    errorMessage += ` Resolution had failed on route: '${routePath}'`;
  }
  return errorMessage;
}

function updateChainForRoute(context, match) {
  const {route, path} = match;

  if (route && !route.__synthetic) {
    const item = {path, route};
    if (!context.chain) {
      context.chain = [];
    } else {
      // Discard old items
      if (route.parent) {
        let i = context.chain.length;
        while (i-- && context.chain[i].route && context.chain[i].route !== route.parent) {
          context.chain.pop();
        }
      }
    }
    context.chain.push(item);
  }
}

/**
 */
class Resolver {
  constructor(routes, options = {}) {
    if (Object(routes) !== routes) {
      throw new TypeError('Invalid routes');
    }

    this.baseUrl = options.baseUrl || '';
    this.errorHandler = options.errorHandler;
    this.resolveRoute = options.resolveRoute || resolveRoute;
    this.context = Object.assign({resolver: this}, options.context);
    this.root = Array.isArray(routes) ? {path: '', __children: routes, parent: null, __synthetic: true} : routes;
    this.root.parent = null;
  }

  /**
   * Returns the current list of routes (as a shallow copy). Adding / removing
   * routes to / from the returned array does not affect the routing config,
   * but modifying the route objects does.
   *
   * @return {!Array<!Router.Route>}
   */
  getRoutes() {
    return [...this.root.__children];
  }

  /**
   * Sets the routing config (replacing the existing one).
   *
   * @param {!Array<!Router.Route>|!Router.Route} routes a single route or an array of those
   *    (the array is shallow copied)
   */
  setRoutes(routes) {
    ensureRoutes(routes);
    const newRoutes = [...toArray(routes)];
    this.root.__children = newRoutes;
  }

  /**
   * Appends one or several routes to the routing config and returns the
   * effective routing config after the operation.
   *
   * @param {!Array<!Router.Route>|!Router.Route} routes a single route or an array of those
   *    (the array is shallow copied)
   * @return {!Array<!Router.Route>}
   * @protected
   */
  addRoutes(routes) {
    ensureRoutes(routes);
    this.root.__children.push(...toArray(routes));
    return this.getRoutes();
  }

  /**
   * Removes all existing routes from the routing config.
   */
  removeRoutes() {
    this.setRoutes([]);
  }

  /**
   * Asynchronously resolves the given pathname, i.e. finds all routes matching
   * the pathname and tries resolving them one after another in the order they
   * are listed in the routes config until the first non-null result.
   *
   * Returns a promise that is fulfilled with the return value of an object that consists of the first
   * route handler result that returns something other than `null` or `undefined` and context used to get this result.
   *
   * If no route handlers return a non-null result, or if no route matches the
   * given pathname the returned promise is rejected with a 'page not found'
   * `Error`.
   *
   * @param {!string|!{pathname: !string}} pathnameOrContext the pathname to
   *    resolve or a context object with a `pathname` property and other
   *    properties to pass to the route resolver functions.
   * @return {!Promise<any>}
   */
  resolve(pathnameOrContext) {
    const context = Object.assign(
      {},
      this.context,
      isString(pathnameOrContext) ? {pathname: pathnameOrContext} : pathnameOrContext
    );
    const match = matchRoute(
      this.root,
      this.__normalizePathname(context.pathname),
      this.baseUrl
    );
    const resolve = this.resolveRoute;
    let matches = null;
    let nextMatches = null;
    let currentContext = context;

    function next(resume, parent = matches.value.route, prevResult) {
      const routeToSkip = prevResult === null && matches.value.route;
      matches = nextMatches || match.next(routeToSkip);
      nextMatches = null;

      if (!resume) {
        if (matches.done || !isChildRoute(parent, matches.value.route)) {
          nextMatches = matches;
          return Promise.resolve(notFoundResult);
        }
      }

      if (matches.done) {
        return Promise.reject(getNotFoundError(context));
      }

      currentContext = Object.assign(
        currentContext
          ? {chain: (currentContext.chain ? currentContext.chain.slice(0) : [])}
          : {},
        context,
        matches.value
      );
      updateChainForRoute(currentContext, matches.value);

      return Promise.resolve(resolve(currentContext)).then(resolution => {
        if (resolution !== null && resolution !== undefined && resolution !== notFoundResult) {
          currentContext.result = resolution.result || resolution;
          return currentContext;
        }
        return next(resume, parent, resolution);
      });
    }

    context.next = next;

    return Promise.resolve()
      .then(() => next(true, this.root))
      .catch((error) => {
        const errorMessage = generateErrorMessage(currentContext);
        if (!error) {
          error = new Error(errorMessage);
        } else {
          console.warn(errorMessage);
        }
        error.context = error.context || currentContext;
        // DOMException has its own code which is read-only
        if (!(error instanceof DOMException)) {
          error.code = error.code || 500;
        }
        if (this.errorHandler) {
          currentContext.result = this.errorHandler(error);
          return currentContext;
        }
        throw error;
      });
  }

  /**
   * URL constructor polyfill hook. Creates and returns an URL instance.
   */
  static __createUrl(url, base) {
    return new URL(url, base);
  }

  /**
   * If the baseUrl property is set, transforms the baseUrl and returns the full
   * actual `base` string for using in the `new URL(path, base);` and for
   * prepernding the paths with. The returned base ends with a trailing slash.
   *
   * Otherwise, returns empty string.
   */
  get __effectiveBaseUrl() {
    return this.baseUrl
      ? this.constructor.__createUrl(
        this.baseUrl,
        document.baseURI || document.URL
      ).href.replace(/[^\/]*$/, '')
      : '';
  }

  /**
   * If the baseUrl is set, matches the pathname with the router’s baseUrl,
   * and returns the local pathname with the baseUrl stripped out.
   *
   * If the pathname does not match the baseUrl, returns undefined.
   *
   * If the `baseUrl` is not set, returns the unmodified pathname argument.
   */
  __normalizePathname(pathname) {
    if (!this.baseUrl) {
      // No base URL, no need to transform the pathname.
      return pathname;
    }

    const base = this.__effectiveBaseUrl;
    const normalizedUrl = this.constructor.__createUrl(pathname, base).href;
    if (normalizedUrl.slice(0, base.length) === base) {
      return normalizedUrl.slice(base.length);
    }
  }
}

Resolver.pathToRegexp = pathToRegexp_1;

/**
 * Universal Router (https://www.kriasoft.com/universal-router/)
 *
 * Copyright (c) 2015-present Kriasoft.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */

const {pathToRegexp: pathToRegexp$1} = Resolver;
const cache$1 = new Map();

function cacheRoutes(routesByName, route, routes) {
  const name = route.name || route.component;
  if (name) {
    if (routesByName.has(name)) {
      routesByName.get(name).push(route);
    } else {
      routesByName.set(name, [route]);
    }
  }

  if (Array.isArray(routes)) {
    for (let i = 0; i < routes.length; i++) {
      const childRoute = routes[i];
      childRoute.parent = route;
      cacheRoutes(routesByName, childRoute, childRoute.__children || childRoute.children);
    }
  }
}

function getRouteByName(routesByName, routeName) {
  const routes = routesByName.get(routeName);
  if (routes && routes.length > 1) {
    throw new Error(
      `Duplicate route with name "${routeName}".`
      + ` Try seting unique 'name' route properties.`
    );
  }
  return routes && routes[0];
}

function getRoutePath(route) {
  let path = route.path;
  path = Array.isArray(path) ? path[0] : path;
  return path !== undefined ? path : '';
}

function generateUrls(router, options = {}) {
  if (!(router instanceof Resolver)) {
    throw new TypeError('An instance of Resolver is expected');
  }

  const routesByName = new Map();

  return (routeName, params) => {
    let route = getRouteByName(routesByName, routeName);
    if (!route) {
      routesByName.clear(); // clear cache
      cacheRoutes(routesByName, router.root, router.root.__children);

      route = getRouteByName(routesByName, routeName);
      if (!route) {
        throw new Error(`Route "${routeName}" not found`);
      }
    }

    let regexp = cache$1.get(route.fullPath);
    if (!regexp) {
      let fullPath = getRoutePath(route);
      let rt = route.parent;
      while (rt) {
        const path = getRoutePath(rt);
        if (path) {
          fullPath = path.replace(/\/$/, '') + '/' + fullPath.replace(/^\//, '');
        }
        rt = rt.parent;
      }
      const tokens = pathToRegexp$1.parse(fullPath);
      const toPath = pathToRegexp$1.tokensToFunction(tokens);
      const keys = Object.create(null);
      for (let i = 0; i < tokens.length; i++) {
        if (!isString(tokens[i])) {
          keys[tokens[i].name] = true;
        }
      }
      regexp = {toPath, keys};
      cache$1.set(fullPath, regexp);
      route.fullPath = fullPath;
    }

    let url = regexp.toPath(params, options) || '/';

    if (options.stringifyQueryParams && params) {
      const queryParams = {};
      const keys = Object.keys(params);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (!regexp.keys[key]) {
          queryParams[key] = params[key];
        }
      }
      const query = options.stringifyQueryParams(queryParams);
      if (query) {
        url += query.charAt(0) === '?' ? query : `?${query}`;
      }
    }

    return url;
  };
}

/**
 * @typedef NavigationTrigger
 * @type {object}
 * @property {function()} activate
 * @property {function()} inactivate
 */

/** @type {Array<NavigationTrigger>} */
let triggers = [];

function setNavigationTriggers(newTriggers) {
  triggers.forEach(trigger => trigger.inactivate());

  newTriggers.forEach(trigger => trigger.activate());

  triggers = newTriggers;
}

const willAnimate = elem => {
  const name = getComputedStyle(elem).getPropertyValue('animation-name');
  return name && name !== 'none';
};

const waitForAnimation = (elem, cb) => {
  const listener = () => {
    elem.removeEventListener('animationend', listener);
    cb();
  };
  elem.addEventListener('animationend', listener);
};

function animate(elem, className) {
  elem.classList.add(className);

  return new Promise(resolve => {
    if (willAnimate(elem)) {
      const rect = elem.getBoundingClientRect();
      const size = `height: ${rect.bottom - rect.top}px; width: ${rect.right - rect.left}px`;
      elem.setAttribute('style', `position: absolute; ${size}`);
      waitForAnimation(elem, () => {
        elem.classList.remove(className);
        elem.removeAttribute('style');
        resolve();
      });
    } else {
      elem.classList.remove(className);
      resolve();
    }
  });
}

const MAX_REDIRECT_COUNT = 256;

function isResultNotEmpty(result) {
  return result !== null && result !== undefined;
}

function copyContextWithoutNext(context) {
  const copy = Object.assign({}, context);
  delete copy.next;
  return copy;
}

function createLocation({pathname = '', search = '', hash = '', chain = [], params = {}, redirectFrom, resolver}, route) {
  const routes = chain.map(item => item.route);
  return {
    baseUrl: resolver && resolver.baseUrl || '',
    pathname,
    search,
    hash,
    routes,
    route: route || routes.length && routes[routes.length - 1] || null,
    params,
    redirectFrom,
    getUrl: (userParams = {}) => getPathnameForRouter(
      Router.pathToRegexp.compile(
        getMatchedPath(routes)
      )(Object.assign({}, params, userParams)),
      resolver
    )
  };
}

function createRedirect(context, pathname) {
  const params = Object.assign({}, context.params);
  return {
    redirect: {
      pathname,
      from: context.pathname,
      params
    }
  };
}

function renderElement(context, element) {
  element.location = createLocation(context);
  const index = context.chain.map(item => item.route).indexOf(context.route);
  context.chain[index].element = element;
  return element;
}

function runCallbackIfPossible(callback, args, thisArg) {
  if (isFunction(callback)) {
    return callback.apply(thisArg, args);
  }
}

function amend(amendmentFunction, args, element) {
  return amendmentResult => {
    if (amendmentResult && (amendmentResult.cancel || amendmentResult.redirect)) {
      return amendmentResult;
    }

    if (element) {
      return runCallbackIfPossible(element[amendmentFunction], args, element);
    }
  };
}

function processNewChildren(newChildren, route) {
  if (!Array.isArray(newChildren) && !isObject(newChildren)) {
    throw new Error(
      log(
        `Incorrect "children" value for the route ${route.path}: expected array or object, but got ${newChildren}`
      )
    );
  }

  route.__children = [];
  const childRoutes = toArray(newChildren);
  for (let i = 0; i < childRoutes.length; i++) {
    ensureRoute(childRoutes[i]);
    route.__children.push(childRoutes[i]);
  }
}

function removeDomNodes(nodes) {
  if (nodes && nodes.length) {
    const parent = nodes[0].parentNode;
    for (let i = 0; i < nodes.length; i++) {
      parent.removeChild(nodes[i]);
    }
  }
}

function getPathnameForRouter(pathname, router) {
  const base = router.__effectiveBaseUrl;
  return base
    ? router.constructor.__createUrl(pathname.replace(/^\//, ''), base).pathname
    : pathname;
}

function getMatchedPath(chain) {
  return chain.map(item => item.path).reduce((a, b) => {
    if (b.length) {
      return a.replace(/\/$/, '') + '/' + b.replace(/^\//, '');
    }
    return a;
  }, '');
}

/**
 * A simple client-side router for single-page applications. It uses
 * express-style middleware and has a first-class support for Web Components and
 * lazy-loading. Works great in Polymer and non-Polymer apps.
 *
 * Use `new Router(outlet, options)` to create a new Router instance.
 *
 * * The `outlet` parameter is a reference to the DOM node to render
 *   the content into.
 *
 * * The `options` parameter is an optional object with options. The following
 *   keys are supported:
 *   * `baseUrl` — the initial value for [
 *     the `baseUrl` property
 *   ](#/classes/Router#property-baseUrl)
 *
 * The Router instance is automatically subscribed to navigation events
 * on `window`.
 *
 * See [Live Examples](#/classes/Router/demos/demo/index.html) for the detailed usage demo and code snippets.
 *
 * See also detailed API docs for the following methods, for the advanced usage:
 *
 * * [setOutlet](#/classes/Router#method-setOutlet) – should be used to configure the outlet.
 * * [setTriggers](#/classes/Router#method-setTriggers) – should be used to configure the navigation events.
 * * [setRoutes](#/classes/Router#method-setRoutes) – should be used to configure the routes.
 *
 * Only `setRoutes` has to be called manually, others are automatically invoked when creating a new instance.
 *
 * @extends Resolver
 * @demo demo/index.html
 * @summary JavaScript class that renders different DOM content depending on
 *    a given path. It can re-render when triggered or automatically on
 *    'popstate' and / or 'click' events.
 */
class Router extends Resolver {

  /**
   * Creates a new Router instance with a given outlet, and
   * automatically subscribes it to navigation events on the `window`.
   * Using a constructor argument or a setter for outlet is equivalent:
   *
   * ```
   * const router = new Router();
   * router.setOutlet(outlet);
   * ```
   * @param {?Node=} outlet
   * @param {?RouterOptions=} options
   */
  constructor(outlet, options) {
    const baseElement = document.head.querySelector('base');
    const baseHref = baseElement && baseElement.getAttribute('href');
    super([], Object.assign({
      // Default options
      baseUrl: baseHref && Resolver.__createUrl(baseHref, document.URL).pathname.replace(/[^\/]*$/, '')
    }, options));

    this.resolveRoute = context => this.__resolveRoute(context);

    const triggers = Router.NavigationTrigger;
    Router.setTriggers.apply(Router, Object.keys(triggers).map(key => triggers[key]));

    /**
     * The base URL for all routes in the router instance. By default,
     * if the base element exists in the `<head>`, vaadin-router
     * takes the `<base href>` attribute value, resolves against current `document.URL`
     * and gets the `pathname` from the result.
     *
     * @public
     * @type {string}
     */
    this.baseUrl;

    /**
     * A promise that is settled after the current render cycle completes. If
     * there is no render cycle in progress the promise is immediately settled
     * with the last render cycle result.
     *
     * @public
     * @type {!Promise<!RouterLocation>}
     */
    this.ready;
    this.ready = Promise.resolve(outlet);

    /**
     * Contains read-only information about the current router location:
     * pathname, active routes, parameters. See the
     * [Location type declaration](#/classes/RouterLocation)
     * for more details.
     *
     * @public
     * @type {!RouterLocation}
     */
    this.location;
    this.location = createLocation({resolver: this});

    this.__lastStartedRenderId = 0;
    this.__navigationEventHandler = this.__onNavigationEvent.bind(this);
    this.setOutlet(outlet);
    this.subscribe();
    // Using WeakMap instead of WeakSet because WeakSet is not supported by IE11
    this.__createdByRouter = new WeakMap();
    this.__addedByRouter = new WeakMap();
  }

  __resolveRoute(context) {
    const route = context.route;

    let callbacks = Promise.resolve();

    if (isFunction(route.children)) {
      callbacks = callbacks
        .then(() => route.children(copyContextWithoutNext(context)))
        .then(children => {
          // The route.children() callback might have re-written the
          // route.children property instead of returning a value
          if (!isResultNotEmpty(children) && !isFunction(route.children)) {
            children = route.children;
          }
          processNewChildren(children, route);
        });
    }

    const commands = {
      redirect: path => createRedirect(context, path),
      component: (component) => {
        const element = document.createElement(component);
        this.__createdByRouter.set(element, true);
        return element;
      }
    };

    return callbacks
      .then(() => {
        if (this.__isLatestRender(context)) {
          return runCallbackIfPossible(route.action, [context, commands], route);
        }
      })
      .then(result => {
        if (isResultNotEmpty(result)) {
          // Actions like `() => import('my-view.js')` are not expected to
          // end the resolution, despite the result is not empty. Checking
          // the result with a whitelist of values that end the resolution.
          if (result instanceof HTMLElement ||
              result.redirect ||
              result === notFoundResult) {
            return result;
          }
        }

        if (isString(route.redirect)) {
          return commands.redirect(route.redirect);
        }

        if (route.bundle) {
          return loadBundle(route.bundle)
            .then(() => {}, () => {
              throw new Error(log(`Bundle not found: ${route.bundle}. Check if the file name is correct`));
            });
        }
      })
      .then(result => {
        if (isResultNotEmpty(result)) {
          return result;
        }
        if (isString(route.component)) {
          return commands.component(route.component);
        }
      });
  }

  /**
   * Sets the router outlet (the DOM node where the content for the current
   * route is inserted). Any content pre-existing in the router outlet is
   * removed at the end of each render pass.
   *
   * NOTE: this method is automatically invoked first time when creating a new Router instance.
   *
   * @param {?Node} outlet the DOM node where the content for the current route
   *     is inserted.
   */
  setOutlet(outlet) {
    if (outlet) {
      this.__ensureOutlet(outlet);
    }
    this.__outlet = outlet;
  }

  /**
   * Returns the current router outlet. The initial value is `undefined`.
   *
   * @return {?Node} the current router outlet (or `undefined`)
   */
  getOutlet() {
    return this.__outlet;
  }

  /**
   * Sets the routing config (replacing the existing one) and triggers a
   * navigation event so that the router outlet is refreshed according to the
   * current `window.location` and the new routing config.
   *
   * Each route object may have the following properties, listed here in the processing order:
   * * `path` – the route path (relative to the parent route if any) in the
   * [express.js syntax](https://expressjs.com/en/guide/routing.html#route-paths").
   *
   * * `children` – an array of nested routes or a function that provides this
   * array at the render time. The function can be synchronous or asynchronous:
   * in the latter case the render is delayed until the returned promise is
   * resolved. The `children` function is executed every time when this route is
   * being rendered. This allows for dynamic route structures (e.g. backend-defined),
   * but it might have a performance impact as well. In order to avoid calling
   * the function on subsequent renders, you can override the `children` property
   * of the route object and save the calculated array there
   * (via `context.route.children = [ route1, route2, ...];`).
   * Parent routes are fully resolved before resolving the children. Children
   * 'path' values are relative to the parent ones.
   *
   * * `action` – the action that is executed before the route is resolved.
   * The value for this property should be a function, accepting `context`
   * and `commands` parameters described below. If present, this function is
   * always invoked first, disregarding of the other properties' presence.
   * The action can return a result directly or within a `Promise`, which
   * resolves to the result. If the action result is an `HTMLElement` instance,
   * a `commands.component(name)` result, a `commands.redirect(path)` result,
   * or a `context.next()` result, the current route resolution is finished,
   * and other route config properties are ignored.
   * See also **Route Actions** section in [Live Examples](#/classes/Router/demos/demo/index.html).
   *
   * * `redirect` – other route's path to redirect to. Passes all route parameters to the redirect target.
   * The target route should also be defined.
   * See also **Redirects** section in [Live Examples](#/classes/Router/demos/demo/index.html).
   *
   * * `bundle` – string containing the path to `.js` or `.mjs` bundle to load before resolving the route,
   * or the object with "module" and "nomodule" keys referring to different bundles.
   * Each bundle is only loaded once. If "module" and "nomodule" are set, only one bundle is loaded,
   * depending on whether the browser supports ES modules or not.
   * The property is ignored when either an `action` returns the result or `redirect` property is present.
   * Any error, e.g. 404 while loading bundle will cause route resolution to throw.
   * See also **Code Splitting** section in [Live Examples](#/classes/Router/demos/demo/index.html).
   *
   * * `component` – the tag name of the Web Component to resolve the route to.
   * The property is ignored when either an `action` returns the result or `redirect` property is present.
   * If route contains the `component` property (or an action that return a component)
   * and its child route also contains the `component` property, child route's component
   * will be rendered as a light dom child of a parent component.
   *
   * * `name` – the string name of the route to use in the
   * [`router.urlForName(name, params)`](#/classes/Router#method-urlForName)
   * navigation helper method.
   *
   * For any route function (`action`, `children`) defined, the corresponding `route` object is available inside the callback
   * through the `this` reference. If you need to access it, make sure you define the callback as a non-arrow function
   * because arrow functions do not have their own `this` reference.
   *
   * `context` object that is passed to `action` function holds the following properties:
   * * `context.pathname` – string with the pathname being resolved
   *
   * * `context.search` – search query string
   *
   * * `context.hash` – hash string
   *
   * * `context.params` – object with route parameters
   *
   * * `context.route` – object that holds the route that is currently being rendered.
   *
   * * `context.next()` – function for asynchronously getting the next route
   * contents from the resolution chain (if any)
   *
   * `commands` object that is passed to `action` function has
   * the following methods:
   *
   * * `commands.redirect(path)` – function that creates a redirect data
   * for the path specified.
   *
   * * `commands.component(component)` – function that creates a new HTMLElement
   * with current context. Note: the component created by this function is reused if visiting the same path twice in row.
   *
   *
   * @param {!Array<!Route>|!Route} routes a single route or an array of those
   * @param {?boolean} skipRender configure the router but skip rendering the
   *     route corresponding to the current `window.location` values
   *
   * @return {!Promise<!Node>}
   */
  setRoutes(routes, skipRender = false) {
    this.__previousContext = undefined;
    this.__urlForName = undefined;
    super.setRoutes(routes);
    if (!skipRender) {
      this.__onNavigationEvent();
    }
    return this.ready;
  }

  /**
   * Asynchronously resolves the given pathname and renders the resolved route
   * component into the router outlet. If no router outlet is set at the time of
   * calling this method, or at the time when the route resolution is completed,
   * a `TypeError` is thrown.
   *
   * Returns a promise that is fulfilled with the router outlet DOM Node after
   * the route component is created and inserted into the router outlet, or
   * rejected if no route matches the given path.
   *
   * If another render pass is started before the previous one is completed, the
   * result of the previous render pass is ignored.
   *
   * @param {!string|!{pathname: !string, search: ?string, hash: ?string}} pathnameOrContext
   *    the pathname to render or a context object with a `pathname` property,
   *    optional `search` and `hash` properties, and other properties
   *    to pass to the resolver.
   * @param {boolean=} shouldUpdateHistory
   *    update browser history with the rendered location
   * @return {!Promise<!Node>}
   */
  render(pathnameOrContext, shouldUpdateHistory) {
    const renderId = ++this.__lastStartedRenderId;
    const context = Object.assign(
      {
        search: '',
        hash: ''
      },
      isString(pathnameOrContext)
        ? {pathname: pathnameOrContext}
        : pathnameOrContext,
      {
        __renderId: renderId
      }
    );

    // Find the first route that resolves to a non-empty result
    this.ready = this.resolve(context)

      // Process the result of this.resolve() and handle all special commands:
      // (redirect / prevent / component). If the result is a 'component',
      // then go deeper and build the entire chain of nested components matching
      // the pathname. Also call all 'on before' callbacks along the way.
      .then(context => this.__fullyResolveChain(context))

      .then(context => {
        if (this.__isLatestRender(context)) {
          const previousContext = this.__previousContext;

          // Check if the render was prevented and make an early return in that case
          if (context === previousContext) {
            // Replace the history with the previous context
            // to make sure the URL stays the same.
            this.__updateBrowserHistory(previousContext, true);
            return this.location;
          }

          this.location = createLocation(context);

          if (shouldUpdateHistory) {
            // Replace only if first render redirects, so that we don’t leave
            // the redirecting record in the history
            this.__updateBrowserHistory(context, renderId === 1);
          }

          fireRouterEvent('location-changed', {router: this, location: this.location});

          // Skip detaching/re-attaching there are no render changes
          if (context.__skipAttach) {
            this.__copyUnchangedElements(context, previousContext);
            this.__previousContext = context;
            return this.location;
          }

          this.__addAppearingContent(context, previousContext);
          const animationDone = this.__animateIfNeeded(context);

          this.__runOnAfterEnterCallbacks(context);
          this.__runOnAfterLeaveCallbacks(context, previousContext);

          return animationDone.then(() => {
            if (this.__isLatestRender(context)) {
              // If there is another render pass started after this one,
              // the 'disappearing content' would be removed when the other
              // render pass calls `this.__addAppearingContent()`
              this.__removeDisappearingContent();

              this.__previousContext = context;
              return this.location;
            }
          });
        }
      })
      .catch(error => {
        if (renderId === this.__lastStartedRenderId) {
          if (shouldUpdateHistory) {
            this.__updateBrowserHistory(context);
          }
          removeDomNodes(this.__outlet && this.__outlet.children);
          this.location = createLocation(Object.assign(context, {resolver: this}));
          fireRouterEvent('error', Object.assign({router: this, error}, context));
          throw error;
        }
      });
    return this.ready;
  }

  // `topOfTheChainContextBeforeRedirects` is a context coming from Resolver.resolve().
  // It would contain a 'redirect' route or the first 'component' route that
  // matched the pathname. There might be more child 'component' routes to be
  // resolved and added into the chain. This method would find and add them.
  // `contextBeforeRedirects` is the context containing such a child component
  // route. It's only necessary when this method is called recursively (otherwise
  // it's the same as the 'top of the chain' context).
  //
  // Apart from building the chain of child components, this method would also
  // handle 'redirect' routes, call 'onBefore' callbacks and handle 'prevent'
  // and 'redirect' callback results.
  __fullyResolveChain(topOfTheChainContextBeforeRedirects,
    contextBeforeRedirects = topOfTheChainContextBeforeRedirects) {
    return this.__findComponentContextAfterAllRedirects(contextBeforeRedirects)
      // `contextAfterRedirects` is always a context with an `HTMLElement` result
      // In other cases the promise gets rejected and .then() is not called
      .then(contextAfterRedirects => {
        const redirectsHappened = contextAfterRedirects !== contextBeforeRedirects;
        const topOfTheChainContextAfterRedirects =
          redirectsHappened ? contextAfterRedirects : topOfTheChainContextBeforeRedirects;

        const matchedPath = getPathnameForRouter(
          getMatchedPath(contextAfterRedirects.chain),
          contextAfterRedirects.resolver
        );
        const isFound = (matchedPath === contextAfterRedirects.pathname);

        // Recursive method to try matching more child and sibling routes
        const findNextContextIfAny = (context, parent = context.route, prevResult) => {
          return context.next(undefined, parent, prevResult).then(nextContext => {
            if (nextContext === null || nextContext === notFoundResult) {
              // Next context is not found in children, ...
              if (isFound) {
                // ...but original context is already fully matching - use it
                return context;
              } else if (parent.parent !== null) {
                // ...and there is no full match yet - step up to check siblings
                return findNextContextIfAny(context, parent.parent, nextContext);
              } else {
                return nextContext;
              }
            }

            return nextContext;
          });
        };

        return findNextContextIfAny(contextAfterRedirects).then(nextContext => {
          if (nextContext === null || nextContext === notFoundResult) {
            throw getNotFoundError(topOfTheChainContextAfterRedirects);
          }

          return nextContext
          && nextContext !== notFoundResult
          && nextContext !== contextAfterRedirects
            ? this.__fullyResolveChain(topOfTheChainContextAfterRedirects, nextContext)
            : this.__amendWithOnBeforeCallbacks(contextAfterRedirects);
        });
      });
  }

  __findComponentContextAfterAllRedirects(context) {
    const result = context.result;
    if (result instanceof HTMLElement) {
      renderElement(context, result);
      return Promise.resolve(context);
    } else if (result.redirect) {
      return this.__redirect(result.redirect, context.__redirectCount, context.__renderId)
        .then(context => this.__findComponentContextAfterAllRedirects(context));
    } else if (result instanceof Error) {
      return Promise.reject(result);
    } else {
      return Promise.reject(
        new Error(
          log(
            `Invalid route resolution result for path "${context.pathname}". ` +
            `Expected redirect object or HTML element, but got: "${logValue(result)}". ` +
            `Double check the action return value for the route.`
          )
        ));
    }
  }

  __amendWithOnBeforeCallbacks(contextWithFullChain) {
    return this.__runOnBeforeCallbacks(contextWithFullChain).then(amendedContext => {
      if (amendedContext === this.__previousContext || amendedContext === contextWithFullChain) {
        return amendedContext;
      }
      return this.__fullyResolveChain(amendedContext);
    });
  }

  __runOnBeforeCallbacks(newContext) {
    const previousContext = this.__previousContext || {};
    const previousChain = previousContext.chain || [];
    const newChain = newContext.chain;

    let callbacks = Promise.resolve();
    const prevent = () => ({cancel: true});
    const redirect = (pathname) => createRedirect(newContext, pathname);

    newContext.__divergedChainIndex = 0;
    newContext.__skipAttach = false;
    if (previousChain.length) {
      for (let i = 0; i < Math.min(previousChain.length, newChain.length); i = ++newContext.__divergedChainIndex) {
        if (previousChain[i].route !== newChain[i].route
          || previousChain[i].path !== newChain[i].path && previousChain[i].element !== newChain[i].element
          || !this.__isReusableElement(previousChain[i].element, newChain[i].element)) {
          break;
        }
      }

      // Skip re-attaching and notifications if element and chain do not change
      newContext.__skipAttach =
        // Same route chain
        newChain.length === previousChain.length && newContext.__divergedChainIndex == newChain.length &&
        // Same element
        this.__isReusableElement(newContext.result, previousContext.result);

      if (newContext.__skipAttach) {
        // execute onBeforeLeave for changed segment element when skipping attach
        for (let i = newChain.length - 1; i >= 0; i--) {
          callbacks = this.__runOnBeforeLeaveCallbacks(callbacks, newContext, {prevent}, previousChain[i]);
        }
        // execute onBeforeEnter for changed segment element when skipping attach
        for (let i = 0; i < newChain.length; i++) {
          callbacks = this.__runOnBeforeEnterCallbacks(callbacks, newContext, {prevent, redirect}, newChain[i]);
          previousChain[i].element.location = createLocation(newContext, previousChain[i].route);
        }

      } else {
        // execute onBeforeLeave when NOT skipping attach
        for (let i = previousChain.length - 1; i >= newContext.__divergedChainIndex; i--) {
          callbacks = this.__runOnBeforeLeaveCallbacks(callbacks, newContext, {prevent}, previousChain[i]);
        }
      }
    }
    // execute onBeforeEnter when NOT skipping attach
    if (!newContext.__skipAttach) {
      for (let i = 0; i < newChain.length; i++) {
        if (i < newContext.__divergedChainIndex) {
          if (i < previousChain.length && previousChain[i].element) {
            previousChain[i].element.location = createLocation(newContext, previousChain[i].route);
          }
        } else {
          callbacks = this.__runOnBeforeEnterCallbacks(callbacks, newContext, {prevent, redirect}, newChain[i]);
          if (newChain[i].element) {
            newChain[i].element.location = createLocation(newContext, newChain[i].route);
          }
        }
      }
    }
    return callbacks.then(amendmentResult => {
      if (amendmentResult) {
        if (amendmentResult.cancel) {
          this.__previousContext.__renderId = newContext.__renderId;
          return this.__previousContext;
        }
        if (amendmentResult.redirect) {
          return this.__redirect(amendmentResult.redirect, newContext.__redirectCount, newContext.__renderId);
        }
      }
      return newContext;
    });
  }

  __runOnBeforeLeaveCallbacks(callbacks, newContext, commands, chainElement) {
    const location = createLocation(newContext);
    return callbacks.then(result => {
      if (this.__isLatestRender(newContext)) {
        const afterLeaveFunction = amend('onBeforeLeave', [location, commands, this], chainElement.element);
        return afterLeaveFunction(result);
      }
    }).then(result => {
      if (!(result || {}).redirect) {
        return result;
      }
    });
  }

  __runOnBeforeEnterCallbacks(callbacks, newContext, commands, chainElement) {
    const location = createLocation(newContext, chainElement.route);
    return callbacks.then(result => {
      if (this.__isLatestRender(newContext)) {
        const beforeEnterFunction = amend('onBeforeEnter', [location, commands, this], chainElement.element);
        return beforeEnterFunction(result);
      }
    });
  }

  __isReusableElement(element, otherElement) {
    if (element && otherElement) {
      return this.__createdByRouter.get(element) && this.__createdByRouter.get(otherElement)
        ? element.localName === otherElement.localName
        : element === otherElement;
    }
    return false;
  }

  __isLatestRender(context) {
    return context.__renderId === this.__lastStartedRenderId;
  }

  __redirect(redirectData, counter, renderId) {
    if (counter > MAX_REDIRECT_COUNT) {
      throw new Error(log(`Too many redirects when rendering ${redirectData.from}`));
    }

    return this.resolve({
      pathname: this.urlForPath(
        redirectData.pathname,
        redirectData.params
      ),
      redirectFrom: redirectData.from,
      __redirectCount: (counter || 0) + 1,
      __renderId: renderId
    });
  }

  __ensureOutlet(outlet = this.__outlet) {
    if (!(outlet instanceof Node)) {
      throw new TypeError(log(`Expected router outlet to be a valid DOM Node (but got ${outlet})`));
    }
  }

  __updateBrowserHistory({pathname, search = '', hash = ''}, replace) {
    if (window.location.pathname !== pathname
        || window.location.search !== search
        || window.location.hash !== hash
    ) {
      const changeState = replace ? 'replaceState' : 'pushState';
      window.history[changeState](null, document.title, pathname + search + hash);
      window.dispatchEvent(new PopStateEvent('popstate', {state: 'vaadin-router-ignore'}));
    }
  }

  __copyUnchangedElements(context, previousContext) {
    // Find the deepest common parent between the last and the new component
    // chains. Update references for the unchanged elements in the new chain
    let deepestCommonParent = this.__outlet;
    for (let i = 0; i < context.__divergedChainIndex; i++) {
      const unchangedElement = previousContext && previousContext.chain[i].element;
      if (unchangedElement) {
        if (unchangedElement.parentNode === deepestCommonParent) {
          context.chain[i].element = unchangedElement;
          deepestCommonParent = unchangedElement;
        } else {
          break;
        }
      }
    }
    return deepestCommonParent;
  }

  __addAppearingContent(context, previousContext) {
    this.__ensureOutlet();

    // If the previous 'entering' animation has not completed yet,
    // stop it and remove that content from the DOM before adding new one.
    this.__removeAppearingContent();

    // Copy reusable elements from the previousContext to current
    const deepestCommonParent = this.__copyUnchangedElements(context, previousContext);

    // Keep two lists of DOM elements:
    //  - those that should be removed once the transition animation is over
    //  - and those that should remain
    this.__appearingContent = [];
    this.__disappearingContent = Array
      .from(deepestCommonParent.children)
      .filter(
        // Only remove layout content that was added by router
        e => this.__addedByRouter.get(e) &&
        // Do not remove the result element to avoid flickering
        e !== context.result);

    // Add new elements (starting after the deepest common parent) to the DOM.
    // That way only the components that are actually different between the two
    // locations are added to the DOM (and those that are common remain in the
    // DOM without first removing and then adding them again).
    let parentElement = deepestCommonParent;
    for (let i = context.__divergedChainIndex; i < context.chain.length; i++) {
      const elementToAdd = context.chain[i].element;
      if (elementToAdd) {
        parentElement.appendChild(elementToAdd);
        this.__addedByRouter.set(elementToAdd, true);
        if (parentElement === deepestCommonParent) {
          this.__appearingContent.push(elementToAdd);
        }
        parentElement = elementToAdd;
      }
    }
  }

  __removeDisappearingContent() {
    if (this.__disappearingContent) {
      removeDomNodes(this.__disappearingContent);
    }
    this.__disappearingContent = null;
    this.__appearingContent = null;
  }

  __removeAppearingContent() {
    if (this.__disappearingContent && this.__appearingContent) {
      removeDomNodes(this.__appearingContent);
      this.__disappearingContent = null;
      this.__appearingContent = null;
    }
  }

  __runOnAfterLeaveCallbacks(currentContext, targetContext) {
    if (!targetContext) {
      return;
    }

    // REVERSE iteration: from Z to A
    for (let i = targetContext.chain.length - 1; i >= currentContext.__divergedChainIndex; i--) {
      if (!this.__isLatestRender(currentContext)) {
        break;
      }
      const currentComponent = targetContext.chain[i].element;
      if (!currentComponent) {
        continue;
      }
      try {
        const location = createLocation(currentContext);
        runCallbackIfPossible(
          currentComponent.onAfterLeave,
          [location, {}, targetContext.resolver],
          currentComponent);
      } finally {
        if (this.__disappearingContent.indexOf(currentComponent) > -1) {
          removeDomNodes(currentComponent.children);
        }
      }
    }
  }

  __runOnAfterEnterCallbacks(currentContext) {
    // forward iteration: from A to Z
    for (let i = currentContext.__divergedChainIndex; i < currentContext.chain.length; i++) {
      if (!this.__isLatestRender(currentContext)) {
        break;
      }
      const currentComponent = currentContext.chain[i].element || {};
      const location = createLocation(currentContext, currentContext.chain[i].route);
      runCallbackIfPossible(
        currentComponent.onAfterEnter,
        [location, {}, currentContext.resolver],
        currentComponent);
    }
  }

  __animateIfNeeded(context) {
    const from = (this.__disappearingContent || [])[0];
    const to = (this.__appearingContent || [])[0];
    const promises = [];

    const chain = context.chain;
    let config;
    for (let i = chain.length; i > 0; i--) {
      if (chain[i - 1].route.animate) {
        config = chain[i - 1].route.animate;
        break;
      }
    }

    if (from && to && config) {
      const leave = isObject(config) && config.leave || 'leaving';
      const enter = isObject(config) && config.enter || 'entering';
      promises.push(animate(from, leave));
      promises.push(animate(to, enter));
    }

    return Promise.all(promises).then(() => context);
  }

  /**
   * Subscribes this instance to navigation events on the `window`.
   *
   * NOTE: beware of resource leaks. For as long as a router instance is
   * subscribed to navigation events, it won't be garbage collected.
   */
  subscribe() {
    window.addEventListener('vaadin-router-go', this.__navigationEventHandler);
  }

  /**
   * Removes the subscription to navigation events created in the `subscribe()`
   * method.
   */
  unsubscribe() {
    window.removeEventListener('vaadin-router-go', this.__navigationEventHandler);
  }

  __onNavigationEvent(event) {
    const {pathname, search, hash} = event ? event.detail : window.location;
    if (isString(this.__normalizePathname(pathname))) {
      if (event && event.preventDefault) {
        event.preventDefault();
      }
      this.render({pathname, search, hash}, true);
    }
  }

  /**
   * Configures what triggers Router navigation events:
   *  - `POPSTATE`: popstate events on the current `window`
   *  - `CLICK`: click events on `<a>` links leading to the current page
   *
   * This method is invoked with the pre-configured values when creating a new Router instance.
   * By default, both `POPSTATE` and `CLICK` are enabled. This setup is expected to cover most of the use cases.
   *
   * See the `router-config.js` for the default navigation triggers config. Based on it, you can
   * create the own one and only import the triggers you need, instead of pulling in all the code,
   * e.g. if you want to handle `click` differently.
   *
   * See also **Navigation Triggers** section in [Live Examples](#/classes/Router/demos/demo/index.html).
   *
   * @param {...NavigationTrigger} triggers
   */
  static setTriggers(...triggers) {
    setNavigationTriggers(triggers);
  }

  /**
   * Generates a URL for the route with the given name, optionally performing
   * substitution of parameters.
   *
   * The route is searched in all the Router instances subscribed to
   * navigation events.
   *
   * **Note:** For child route names, only array children are considered.
   * It is not possible to generate URLs using a name for routes set with
   * a children function.
   *
   * @function urlForName
   * @param {!string} name the route name or the route’s `component` name.
   * @param {Params=} params Optional object with route path parameters.
   * Named parameters are passed by name (`params[name] = value`), unnamed
   * parameters are passed by index (`params[index] = value`).
   *
   * @return {string}
   */
  urlForName(name, params) {
    if (!this.__urlForName) {
      this.__urlForName = generateUrls(this);
    }
    return getPathnameForRouter(
      this.__urlForName(name, params),
      this
    );
  }

  /**
   * Generates a URL for the given route path, optionally performing
   * substitution of parameters.
   *
   * @param {!string} path string route path declared in [express.js syntax](https://expressjs.com/en/guide/routing.html#route-paths").
   * @param {Params=} params Optional object with route path parameters.
   * Named parameters are passed by name (`params[name] = value`), unnamed
   * parameters are passed by index (`params[index] = value`).
   *
   * @return {string}
   */
  urlForPath(path, params) {
    return getPathnameForRouter(
      Router.pathToRegexp.compile(path)(params),
      this
    );
  }

  /**
   * Triggers navigation to a new path. Returns a boolean without waiting until
   * the navigation is complete. Returns `true` if at least one `Router`
   * has handled the navigation (was subscribed and had `baseUrl` matching
   * the `path` argument), otherwise returns `false`.
   *
   * @param {!string|!{pathname: !string, search: (string|undefined), hash: (string|undefined)}} path
   *   a new in-app path string, or an URL-like object with `pathname`
   *   string property, and optional `search` and `hash` string properties.
   * @return {boolean}
   */
  static go(path) {
    const {pathname, search, hash} = isString(path)
      ? this.__createUrl(path, 'http://a') // some base to omit origin
      : path;
    return fireRouterEvent('go', {pathname, search, hash});
  }
}

const DEV_MODE_CODE_REGEXP =
  /\/\*\*\s+vaadin-dev-mode:start([\s\S]*)vaadin-dev-mode:end\s+\*\*\//i;

const FlowClients = window.Vaadin && window.Vaadin.Flow && window.Vaadin.Flow.clients;

function isMinified() {
  function test() {
    /** vaadin-dev-mode:start
    return false;
    vaadin-dev-mode:end **/
    return true;
  }
  return uncommentAndRun(test);
}

function isDevelopmentMode() {
  try {
    if (isForcedDevelopmentMode()) {
      return true;
    }

    if (!isLocalhost()) {
      return false;
    }

    if (FlowClients) {
      return !isFlowProductionMode();
    }

    return !isMinified();
  } catch (e) {
    // Some error in this code, assume production so no further actions will be taken
    return false;
  }
}

function isForcedDevelopmentMode() {
  return localStorage.getItem("vaadin.developmentmode.force");
}

function isLocalhost() {
  return (["localhost","127.0.0.1"].indexOf(window.location.hostname) >= 0);
}

function isFlowProductionMode() {
  if (FlowClients) {
    const productionModeApps = Object.keys(FlowClients)
      .map(key => FlowClients[key])
      .filter(client => client.productionMode);
    if (productionModeApps.length > 0) {
      return true;
    }
  }
  return false;
}

function uncommentAndRun(callback, args) {
  if (typeof callback !== 'function') {
    return;
  }

  const match = DEV_MODE_CODE_REGEXP.exec(callback.toString());
  if (match) {
    try {
      // requires CSP: script-src 'unsafe-eval'
      callback = new Function(match[1]);
    } catch (e) {
      // eat the exception
      console.log('vaadin-development-mode-detector: uncommentAndRun() failed', e);
    }
  }

  return callback(args);
}

// A guard against polymer-modulizer removing the window.Vaadin
// initialization above.
window['Vaadin'] = window['Vaadin'] || {};

/**
 * Inspects the source code of the given `callback` function for
 * specially-marked _commented_ code. If such commented code is found in the
 * callback source, uncomments and runs that code instead of the callback
 * itself. Otherwise runs the callback as is.
 *
 * The optional arguments are passed into the callback / uncommented code,
 * the result is returned.
 *
 * See the `isMinified()` function source code in this file for an example.
 *
 */
const runIfDevelopmentMode = function(callback, args) {
  if (window.Vaadin.developmentMode) {
    return uncommentAndRun(callback, args);
  }
};

if (window.Vaadin.developmentMode === undefined) {
  window.Vaadin.developmentMode = isDevelopmentMode();
}

/* This file is autogenerated from src/vaadin-usage-statistics.tpl.html */

function maybeGatherAndSendStats() {
  /** vaadin-dev-mode:start
  (function () {
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var getPolymerVersion = function getPolymerVersion() {
  return window.Polymer && window.Polymer.version;
};

var StatisticsGatherer = function () {
  function StatisticsGatherer(logger) {
    classCallCheck(this, StatisticsGatherer);

    this.now = new Date().getTime();
    this.logger = logger;
  }

  createClass(StatisticsGatherer, [{
    key: 'frameworkVersionDetectors',
    value: function frameworkVersionDetectors() {
      return {
        'Flow': function Flow() {
          if (window.Vaadin && window.Vaadin.Flow && window.Vaadin.Flow.clients) {
            var flowVersions = Object.keys(window.Vaadin.Flow.clients).map(function (key) {
              return window.Vaadin.Flow.clients[key];
            }).filter(function (client) {
              return client.getVersionInfo;
            }).map(function (client) {
              return client.getVersionInfo().flow;
            });
            if (flowVersions.length > 0) {
              return flowVersions[0];
            }
          }
        },
        'Vaadin Framework': function VaadinFramework() {
          if (window.vaadin && window.vaadin.clients) {
            var frameworkVersions = Object.values(window.vaadin.clients).filter(function (client) {
              return client.getVersionInfo;
            }).map(function (client) {
              return client.getVersionInfo().vaadinVersion;
            });
            if (frameworkVersions.length > 0) {
              return frameworkVersions[0];
            }
          }
        },
        'AngularJs': function AngularJs() {
          if (window.angular && window.angular.version && window.angular.version) {
            return window.angular.version.full;
          }
        },
        'Angular': function Angular() {
          if (window.ng) {
            var tags = document.querySelectorAll("[ng-version]");
            if (tags.length > 0) {
              return tags[0].getAttribute("ng-version");
            }
            return "Unknown";
          }
        },
        'Backbone.js': function BackboneJs() {
          if (window.Backbone) {
            return window.Backbone.VERSION;
          }
        },
        'React': function React() {
          var reactSelector = '[data-reactroot], [data-reactid]';
          if (!!document.querySelector(reactSelector)) {
            // React does not publish the version by default
            return "unknown";
          }
        },
        'Ember': function Ember() {
          if (window.Em && window.Em.VERSION) {
            return window.Em.VERSION;
          } else if (window.Ember && window.Ember.VERSION) {
            return window.Ember.VERSION;
          }
        },
        'jQuery': function (_jQuery) {
          function jQuery() {
            return _jQuery.apply(this, arguments);
          }

          jQuery.toString = function () {
            return _jQuery.toString();
          };

          return jQuery;
        }(function () {
          if (typeof jQuery === 'function' && jQuery.prototype.jquery !== undefined) {
            return jQuery.prototype.jquery;
          }
        }),
        'Polymer': function Polymer() {
          var version = getPolymerVersion();
          if (version) {
            return version;
          }
        },
        'LitElement': function LitElement() {
          var version = window.litElementVersions && window.litElementVersions[0];
          if (version) {
            return version;
          }
        },
        'LitHtml': function LitHtml() {
          var version = window.litHtmlVersions && window.litHtmlVersions[0];
          if (version) {
            return version;
          }
        },
        'Vue.js': function VueJs() {
          if (window.Vue) {
            return window.Vue.version;
          }
        }
      };
    }
  }, {
    key: 'getUsedVaadinElements',
    value: function getUsedVaadinElements(elements) {
      var version = getPolymerVersion();
      var elementClasses = void 0;
      // NOTE: In case you edit the code here, YOU MUST UPDATE any statistics reporting code in Flow.
      // Check all locations calling the method getEntries() in
      // https://github.com/vaadin/flow/blob/master/flow-server/src/main/java/com/vaadin/flow/internal/UsageStatistics.java#L106
      // Currently it is only used by BootstrapHandler.
      if (version && version.indexOf('2') === 0) {
        // Polymer 2: components classes are stored in window.Vaadin
        elementClasses = Object.keys(window.Vaadin).map(function (c) {
          return window.Vaadin[c];
        }).filter(function (c) {
          return c.is;
        });
      } else {
        // Polymer 3: components classes are stored in window.Vaadin.registrations
        elementClasses = window.Vaadin.registrations || [];
      }
      elementClasses.forEach(function (klass) {
        var version = klass.version ? klass.version : "0.0.0";
        elements[klass.is] = { version: version };
      });
    }
  }, {
    key: 'getUsedVaadinThemes',
    value: function getUsedVaadinThemes(themes) {
      ['Lumo', 'Material'].forEach(function (themeName) {
        var theme;
        var version = getPolymerVersion();
        if (version && version.indexOf('2') === 0) {
          // Polymer 2: themes are stored in window.Vaadin
          theme = window.Vaadin[themeName];
        } else {
          // Polymer 3: themes are stored in custom element registry
          theme = customElements.get('vaadin-' + themeName.toLowerCase() + '-styles');
        }
        if (theme && theme.version) {
          themes[themeName] = { version: theme.version };
        }
      });
    }
  }, {
    key: 'getFrameworks',
    value: function getFrameworks(frameworks) {
      var detectors = this.frameworkVersionDetectors();
      Object.keys(detectors).forEach(function (framework) {
        var detector = detectors[framework];
        try {
          var version = detector();
          if (version) {
            frameworks[framework] = { version: version };
          }
        } catch (e) {}
      });
    }
  }, {
    key: 'gather',
    value: function gather(storage) {
      var storedStats = storage.read();
      var gatheredStats = {};
      var types = ["elements", "frameworks", "themes"];

      types.forEach(function (type) {
        gatheredStats[type] = {};
        if (!storedStats[type]) {
          storedStats[type] = {};
        }
      });

      var previousStats = JSON.stringify(storedStats);

      this.getUsedVaadinElements(gatheredStats.elements);
      this.getFrameworks(gatheredStats.frameworks);
      this.getUsedVaadinThemes(gatheredStats.themes);

      var now = this.now;
      types.forEach(function (type) {
        var keys = Object.keys(gatheredStats[type]);
        keys.forEach(function (key) {
          if (!storedStats[type][key] || _typeof(storedStats[type][key]) != _typeof({})) {
            storedStats[type][key] = { firstUsed: now };
          }
          // Discards any previously logged version number
          storedStats[type][key].version = gatheredStats[type][key].version;
          storedStats[type][key].lastUsed = now;
        });
      });

      var newStats = JSON.stringify(storedStats);
      storage.write(newStats);
      if (newStats != previousStats && Object.keys(storedStats).length > 0) {
        this.logger.debug("New stats: " + newStats);
      }
    }
  }]);
  return StatisticsGatherer;
}();

var StatisticsStorage = function () {
  function StatisticsStorage(key) {
    classCallCheck(this, StatisticsStorage);

    this.key = key;
  }

  createClass(StatisticsStorage, [{
    key: 'read',
    value: function read() {
      var localStorageStatsString = localStorage.getItem(this.key);
      try {
        return JSON.parse(localStorageStatsString ? localStorageStatsString : '{}');
      } catch (e) {
        return {};
      }
    }
  }, {
    key: 'write',
    value: function write(data) {
      localStorage.setItem(this.key, data);
    }
  }, {
    key: 'clear',
    value: function clear() {
      localStorage.removeItem(this.key);
    }
  }, {
    key: 'isEmpty',
    value: function isEmpty() {
      var storedStats = this.read();
      var empty = true;
      Object.keys(storedStats).forEach(function (key) {
        if (Object.keys(storedStats[key]).length > 0) {
          empty = false;
        }
      });

      return empty;
    }
  }]);
  return StatisticsStorage;
}();

var StatisticsSender = function () {
  function StatisticsSender(url, logger) {
    classCallCheck(this, StatisticsSender);

    this.url = url;
    this.logger = logger;
  }

  createClass(StatisticsSender, [{
    key: 'send',
    value: function send(data, errorHandler) {
      var logger = this.logger;

      if (navigator.onLine === false) {
        logger.debug("Offline, can't send");
        errorHandler();
        return;
      }
      logger.debug("Sending data to " + this.url);

      var req = new XMLHttpRequest();
      req.withCredentials = true;
      req.addEventListener("load", function () {
        // Stats sent, nothing more to do
        logger.debug("Response: " + req.responseText);
      });
      req.addEventListener("error", function () {
        logger.debug("Send failed");
        errorHandler();
      });
      req.addEventListener("abort", function () {
        logger.debug("Send aborted");
        errorHandler();
      });
      req.open("POST", this.url);
      req.setRequestHeader("Content-Type", "application/json");
      req.send(data);
    }
  }]);
  return StatisticsSender;
}();

var StatisticsLogger = function () {
  function StatisticsLogger(id) {
    classCallCheck(this, StatisticsLogger);

    this.id = id;
  }

  createClass(StatisticsLogger, [{
    key: '_isDebug',
    value: function _isDebug() {
      return localStorage.getItem("vaadin." + this.id + ".debug");
    }
  }, {
    key: 'debug',
    value: function debug(msg) {
      if (this._isDebug()) {
        console.info(this.id + ": " + msg);
      }
    }
  }]);
  return StatisticsLogger;
}();

var UsageStatistics = function () {
  function UsageStatistics() {
    classCallCheck(this, UsageStatistics);

    this.now = new Date();
    this.timeNow = this.now.getTime();
    this.gatherDelay = 10; // Delay between loading this file and gathering stats
    this.initialDelay = 24 * 60 * 60;

    this.logger = new StatisticsLogger("statistics");
    this.storage = new StatisticsStorage("vaadin.statistics.basket");
    this.gatherer = new StatisticsGatherer(this.logger);
    this.sender = new StatisticsSender("https://tools.vaadin.com/usage-stats/submit", this.logger);
  }

  createClass(UsageStatistics, [{
    key: 'maybeGatherAndSend',
    value: function maybeGatherAndSend() {
      var _this = this;

      if (localStorage.getItem(UsageStatistics.optOutKey)) {
        return;
      }
      this.gatherer.gather(this.storage);
      setTimeout(function () {
        _this.maybeSend();
      }, this.gatherDelay * 1000);
    }
  }, {
    key: 'lottery',
    value: function lottery() {
      return true;
    }
  }, {
    key: 'currentMonth',
    value: function currentMonth() {
      return this.now.getYear() * 12 + this.now.getMonth();
    }
  }, {
    key: 'maybeSend',
    value: function maybeSend() {
      var firstUse = Number(localStorage.getItem(UsageStatistics.firstUseKey));
      var monthProcessed = Number(localStorage.getItem(UsageStatistics.monthProcessedKey));

      if (!firstUse) {
        // Use a grace period to avoid interfering with tests, incognito mode etc
        firstUse = this.timeNow;
        localStorage.setItem(UsageStatistics.firstUseKey, firstUse);
      }

      if (this.timeNow < firstUse + this.initialDelay * 1000) {
        this.logger.debug("No statistics will be sent until the initial delay of " + this.initialDelay + "s has passed");
        return;
      }
      if (this.currentMonth() <= monthProcessed) {
        this.logger.debug("This month has already been processed");
        return;
      }
      localStorage.setItem(UsageStatistics.monthProcessedKey, this.currentMonth());
      // Use random sampling
      if (this.lottery()) {
        this.logger.debug("Congratulations, we have a winner!");
      } else {
        this.logger.debug("Sorry, no stats from you this time");
        return;
      }

      this.send();
    }
  }, {
    key: 'send',
    value: function send() {
      // Ensure we have the latest data
      this.gatherer.gather(this.storage);

      // Read, send and clean up
      var data = this.storage.read();
      data["firstUse"] = Number(localStorage.getItem(UsageStatistics.firstUseKey));
      data["usageStatisticsVersion"] = UsageStatistics.version;
      var info = 'This request contains usage statistics gathered from the application running in development mode. \n\nStatistics gathering is automatically disabled and excluded from production builds.\n\nFor details and to opt-out, see https://github.com/vaadin/vaadin-usage-statistics.\n\n\n\n';
      var self = this;
      this.sender.send(info + JSON.stringify(data), function () {
        // Revert the 'month processed' flag
        localStorage.setItem(UsageStatistics.monthProcessedKey, self.currentMonth() - 1);
      });
    }
  }], [{
    key: 'version',
    get: function get$1() {
      return '2.1.0';
    }
  }, {
    key: 'firstUseKey',
    get: function get$1() {
      return 'vaadin.statistics.firstuse';
    }
  }, {
    key: 'monthProcessedKey',
    get: function get$1() {
      return 'vaadin.statistics.monthProcessed';
    }
  }, {
    key: 'optOutKey',
    get: function get$1() {
      return 'vaadin.statistics.optout';
    }
  }]);
  return UsageStatistics;
}();

try {
  window.Vaadin = window.Vaadin || {};
  window.Vaadin.usageStatsChecker = window.Vaadin.usageStatsChecker || new UsageStatistics();
  window.Vaadin.usageStatsChecker.maybeGatherAndSend();
} catch (e) {
  // Intentionally ignored as this is not a problem in the app being developed
}

}());

  vaadin-dev-mode:end **/
}

const usageStatistics = function() {
  if (typeof runIfDevelopmentMode === 'function') {
    return runIfDevelopmentMode(maybeGatherAndSendStats);
  }
};

window.Vaadin = window.Vaadin || {};
window.Vaadin.registrations = window.Vaadin.registrations || [];

window.Vaadin.registrations.push({
  is: '@vaadin/router',
  version: '1.7.2',
});

usageStatistics();

Router.NavigationTrigger = {POPSTATE, CLICK};

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

/** MobX - (c) Michel Weststrate 2015 - 2020 - MIT Licensed */
var OBFUSCATED_ERROR = "An invariant failed, however the error is obfuscated because this is a production build.";
var EMPTY_ARRAY = [];
Object.freeze(EMPTY_ARRAY);
var EMPTY_OBJECT = {};
Object.freeze(EMPTY_OBJECT);
function getNextId() {
    return ++globalState.mobxGuid;
}
function fail(message) {
    invariant(false, message);
    throw "X"; // unreachable
}
function invariant(check, message) {
    if (!check)
        throw new Error("[mobx] " + (message || OBFUSCATED_ERROR));
}
/**
 * Makes sure that the provided function is invoked at most once.
 */
function once(func) {
    var invoked = false;
    return function () {
        if (invoked)
            return;
        invoked = true;
        return func.apply(this, arguments);
    };
}
var noop = function () { };
function unique(list) {
    var res = [];
    list.forEach(function (item) {
        if (res.indexOf(item) === -1)
            res.push(item);
    });
    return res;
}
function isObject$1(value) {
    return value !== null && typeof value === "object";
}
function isPlainObject(value) {
    if (value === null || typeof value !== "object")
        return false;
    var proto = Object.getPrototypeOf(value);
    return proto === Object.prototype || proto === null;
}
function convertToMap(dataStructure) {
    if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {
        return dataStructure;
    }
    else if (Array.isArray(dataStructure)) {
        return new Map(dataStructure);
    }
    else if (isPlainObject(dataStructure)) {
        var map = new Map();
        for (var key in dataStructure) {
            map.set(key, dataStructure[key]);
        }
        return map;
    }
    else {
        return fail("Cannot convert to map from '" + dataStructure + "'");
    }
}
function addHiddenProp(object, propName, value) {
    Object.defineProperty(object, propName, {
        enumerable: false,
        writable: true,
        configurable: true,
        value: value
    });
}
function addHiddenFinalProp(object, propName, value) {
    Object.defineProperty(object, propName, {
        enumerable: false,
        writable: false,
        configurable: true,
        value: value
    });
}
function isPropertyConfigurable(object, prop) {
    var descriptor = Object.getOwnPropertyDescriptor(object, prop);
    return !descriptor || (descriptor.configurable !== false && descriptor.writable !== false);
}
function assertPropertyConfigurable(object, prop) {
    if (process.env.NODE_ENV !== "production" && !isPropertyConfigurable(object, prop))
        fail("Cannot make property '" + prop.toString() + "' observable, it is not configurable and writable in the target object");
}
function createInstanceofPredicate(name, clazz) {
    var propName = "isMobX" + name;
    clazz.prototype[propName] = true;
    return function (x) {
        return isObject$1(x) && x[propName] === true;
    };
}
function isES6Map(thing) {
    return thing instanceof Map;
}
function isES6Set(thing) {
    return thing instanceof Set;
}
/**
 * Returns the following: own keys, prototype keys & own symbol keys, if they are enumerable.
 */
function getPlainObjectKeys(object) {
    var enumerables = new Set();
    for (var key in object)
        enumerables.add(key); // *all* enumerables
    Object.getOwnPropertySymbols(object).forEach(function (k) {
        if (Object.getOwnPropertyDescriptor(object, k).enumerable)
            enumerables.add(k);
    }); // *own* symbols
    // Note: this implementation is missing enumerable, inherited, symbolic property names! That would however pretty expensive to add,
    // as there is no efficient iterator that returns *all* properties
    return Array.from(enumerables);
}
function stringifyKey(key) {
    if (key && key.toString)
        return key.toString();
    else
        return new String(key).toString();
}
function toPrimitive(value) {
    return value === null ? null : typeof value === "object" ? "" + value : value;
}
var ownKeys = typeof Reflect !== "undefined" && Reflect.ownKeys
    ? Reflect.ownKeys
    : Object.getOwnPropertySymbols
        ? function (obj) { return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj)); }
        : /* istanbul ignore next */ Object.getOwnPropertyNames;

var $mobx = Symbol("mobx administration");
var Atom = /** @class */ (function () {
    /**
     * Create a new atom. For debugging purposes it is recommended to give it a name.
     * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.
     */
    function Atom(name) {
        if (name === void 0) { name = "Atom@" + getNextId(); }
        this.name = name;
        this.isPendingUnobservation = false; // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed
        this.isBeingObserved = false;
        this.observers = new Set();
        this.diffValue = 0;
        this.lastAccessedBy = 0;
        this.lowestObserverState = IDerivationState.NOT_TRACKING;
    }
    Atom.prototype.onBecomeObserved = function () {
        if (this.onBecomeObservedListeners) {
            this.onBecomeObservedListeners.forEach(function (listener) { return listener(); });
        }
    };
    Atom.prototype.onBecomeUnobserved = function () {
        if (this.onBecomeUnobservedListeners) {
            this.onBecomeUnobservedListeners.forEach(function (listener) { return listener(); });
        }
    };
    /**
     * Invoke this method to notify mobx that your atom has been used somehow.
     * Returns true if there is currently a reactive context.
     */
    Atom.prototype.reportObserved = function () {
        return reportObserved(this);
    };
    /**
     * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.
     */
    Atom.prototype.reportChanged = function () {
        startBatch();
        propagateChanged(this);
        endBatch();
    };
    Atom.prototype.toString = function () {
        return this.name;
    };
    return Atom;
}());
var isAtom = createInstanceofPredicate("Atom", Atom);
function createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
    if (onBecomeObservedHandler === void 0) { onBecomeObservedHandler = noop; }
    if (onBecomeUnobservedHandler === void 0) { onBecomeUnobservedHandler = noop; }
    var atom = new Atom(name);
    // default `noop` listener will not initialize the hook Set
    if (onBecomeObservedHandler !== noop) {
        onBecomeObserved(atom, onBecomeObservedHandler);
    }
    if (onBecomeUnobservedHandler !== noop) {
        onBecomeUnobserved(atom, onBecomeUnobservedHandler);
    }
    return atom;
}

function identityComparer(a, b) {
    return a === b;
}
function structuralComparer(a, b) {
    return deepEqual(a, b);
}
function shallowComparer(a, b) {
    return deepEqual(a, b, 1);
}
function defaultComparer(a, b) {
    return Object.is(a, b);
}
var comparer = {
    identity: identityComparer,
    structural: structuralComparer,
    default: defaultComparer,
    shallow: shallowComparer
};

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics$1 = function(d, b) {
    extendStatics$1 = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics$1(d, b);
};

function __extends$1(d, b) {
    extendStatics$1(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign$1 = function() {
    __assign$1 = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign$1.apply(this, arguments);
};

function __values$1(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
}

function __read$1(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread$1() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read$1(arguments[i]));
    return ar;
}

var mobxDidRunLazyInitializersSymbol = Symbol("mobx did run lazy initializers");
var mobxPendingDecorators = Symbol("mobx pending decorators");
var enumerableDescriptorCache = {};
var nonEnumerableDescriptorCache = {};
function createPropertyInitializerDescriptor(prop, enumerable) {
    var cache = enumerable ? enumerableDescriptorCache : nonEnumerableDescriptorCache;
    return (cache[prop] ||
        (cache[prop] = {
            configurable: true,
            enumerable: enumerable,
            get: function () {
                initializeInstance(this);
                return this[prop];
            },
            set: function (value) {
                initializeInstance(this);
                this[prop] = value;
            }
        }));
}
function initializeInstance(target) {
    var e_1, _a;
    if (target[mobxDidRunLazyInitializersSymbol] === true)
        return;
    var decorators = target[mobxPendingDecorators];
    if (decorators) {
        addHiddenProp(target, mobxDidRunLazyInitializersSymbol, true);
        // Build property key array from both strings and symbols
        var keys = __spread$1(Object.getOwnPropertySymbols(decorators), Object.keys(decorators));
        try {
            for (var keys_1 = __values$1(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var key = keys_1_1.value;
                var d = decorators[key];
                d.propertyCreator(target, d.prop, d.descriptor, d.decoratorTarget, d.decoratorArguments);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
}
function createPropDecorator(propertyInitiallyEnumerable, propertyCreator) {
    return function decoratorFactory() {
        var decoratorArguments;
        var decorator = function decorate(target, prop, descriptor, applyImmediately
        // This is a special parameter to signal the direct application of a decorator, allow extendObservable to skip the entire type decoration part,
        // as the instance to apply the decorator to equals the target
        ) {
            if (applyImmediately === true) {
                propertyCreator(target, prop, descriptor, target, decoratorArguments);
                return null;
            }
            if (process.env.NODE_ENV !== "production" && !quacksLikeADecorator(arguments))
                fail("This function is a decorator, but it wasn't invoked like a decorator");
            if (!Object.prototype.hasOwnProperty.call(target, mobxPendingDecorators)) {
                var inheritedDecorators = target[mobxPendingDecorators];
                addHiddenProp(target, mobxPendingDecorators, __assign$1({}, inheritedDecorators));
            }
            target[mobxPendingDecorators][prop] = {
                prop: prop,
                propertyCreator: propertyCreator,
                descriptor: descriptor,
                decoratorTarget: target,
                decoratorArguments: decoratorArguments
            };
            return createPropertyInitializerDescriptor(prop, propertyInitiallyEnumerable);
        };
        if (quacksLikeADecorator(arguments)) {
            // @decorator
            decoratorArguments = EMPTY_ARRAY;
            return decorator.apply(null, arguments);
        }
        else {
            // @decorator(args)
            decoratorArguments = Array.prototype.slice.call(arguments);
            return decorator;
        }
    };
}
function quacksLikeADecorator(args) {
    return (((args.length === 2 || args.length === 3) &&
        (typeof args[1] === "string" || typeof args[1] === "symbol")) ||
        (args.length === 4 && args[3] === true));
}

function deepEnhancer(v, _, name) {
    // it is an observable already, done
    if (isObservable(v))
        return v;
    // something that can be converted and mutated?
    if (Array.isArray(v))
        return observable.array(v, { name: name });
    if (isPlainObject(v))
        return observable.object(v, undefined, { name: name });
    if (isES6Map(v))
        return observable.map(v, { name: name });
    if (isES6Set(v))
        return observable.set(v, { name: name });
    return v;
}
function shallowEnhancer(v, _, name) {
    if (v === undefined || v === null)
        return v;
    if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v))
        return v;
    if (Array.isArray(v))
        return observable.array(v, { name: name, deep: false });
    if (isPlainObject(v))
        return observable.object(v, undefined, { name: name, deep: false });
    if (isES6Map(v))
        return observable.map(v, { name: name, deep: false });
    if (isES6Set(v))
        return observable.set(v, { name: name, deep: false });
    return fail(process.env.NODE_ENV !== "production" &&
        "The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets");
}
function referenceEnhancer(newValue) {
    // never turn into an observable
    return newValue;
}
function refStructEnhancer(v, oldValue, name) {
    if (process.env.NODE_ENV !== "production" && isObservable(v))
        throw "observable.struct should not be used with observable values";
    if (deepEqual(v, oldValue))
        return oldValue;
    return v;
}

function createDecoratorForEnhancer(enhancer) {
    invariant(enhancer);
    var decorator = createPropDecorator(true, function (target, propertyName, descriptor, _decoratorTarget, decoratorArgs) {
        if (process.env.NODE_ENV !== "production") {
            invariant(!descriptor || !descriptor.get, "@observable cannot be used on getter (property \"" + stringifyKey(propertyName) + "\"), use @computed instead.");
        }
        var initialValue = descriptor
            ? descriptor.initializer
                ? descriptor.initializer.call(target)
                : descriptor.value
            : undefined;
        asObservableObject(target).addObservableProp(propertyName, initialValue, enhancer);
    });
    var res = 
    // Extra process checks, as this happens during module initialization
    typeof process !== "undefined" && process.env && process.env.NODE_ENV !== "production"
        ? function observableDecorator() {
            // This wrapper function is just to detect illegal decorator invocations, deprecate in a next version
            // and simply return the created prop decorator
            if (arguments.length < 2)
                return fail("Incorrect decorator invocation. @observable decorator doesn't expect any arguments");
            return decorator.apply(null, arguments);
        }
        : decorator;
    res.enhancer = enhancer;
    return res;
}

// Predefined bags of create observable options, to avoid allocating temporarily option objects
// in the majority of cases
var defaultCreateObservableOptions = {
    deep: true,
    name: undefined,
    defaultDecorator: undefined,
    proxy: true
};
Object.freeze(defaultCreateObservableOptions);
function assertValidOption(key) {
    if (!/^(deep|name|equals|defaultDecorator|proxy)$/.test(key))
        fail("invalid option for (extend)observable: " + key);
}
function asCreateObservableOptions(thing) {
    if (thing === null || thing === undefined)
        return defaultCreateObservableOptions;
    if (typeof thing === "string")
        return { name: thing, deep: true, proxy: true };
    if (process.env.NODE_ENV !== "production") {
        if (typeof thing !== "object")
            return fail("expected options object");
        Object.keys(thing).forEach(assertValidOption);
    }
    return thing;
}
var deepDecorator = createDecoratorForEnhancer(deepEnhancer);
var shallowDecorator = createDecoratorForEnhancer(shallowEnhancer);
var refDecorator = createDecoratorForEnhancer(referenceEnhancer);
var refStructDecorator = createDecoratorForEnhancer(refStructEnhancer);
function getEnhancerFromOptions(options) {
    return options.defaultDecorator
        ? options.defaultDecorator.enhancer
        : options.deep === false
            ? referenceEnhancer
            : deepEnhancer;
}
/**
 * Turns an object, array or function into a reactive structure.
 * @param v the value which should become observable.
 */
function createObservable(v, arg2, arg3) {
    // @observable someProp;
    if (typeof arguments[1] === "string" || typeof arguments[1] === "symbol") {
        return deepDecorator.apply(null, arguments);
    }
    // it is an observable already, done
    if (isObservable(v))
        return v;
    // something that can be converted and mutated?
    var res = isPlainObject(v)
        ? observable.object(v, arg2, arg3)
        : Array.isArray(v)
            ? observable.array(v, arg2)
            : isES6Map(v)
                ? observable.map(v, arg2)
                : isES6Set(v)
                    ? observable.set(v, arg2)
                    : v;
    // this value could be converted to a new observable data structure, return it
    if (res !== v)
        return res;
    // otherwise, just box it
    fail(process.env.NODE_ENV !== "production" &&
        "The provided value could not be converted into an observable. If you want just create an observable reference to the object use 'observable.box(value)'");
}
var observableFactories = {
    box: function (value, options) {
        if (arguments.length > 2)
            incorrectlyUsedAsDecorator("box");
        var o = asCreateObservableOptions(options);
        return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);
    },
    array: function (initialValues, options) {
        if (arguments.length > 2)
            incorrectlyUsedAsDecorator("array");
        var o = asCreateObservableOptions(options);
        return createObservableArray(initialValues, getEnhancerFromOptions(o), o.name);
    },
    map: function (initialValues, options) {
        if (arguments.length > 2)
            incorrectlyUsedAsDecorator("map");
        var o = asCreateObservableOptions(options);
        return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);
    },
    set: function (initialValues, options) {
        if (arguments.length > 2)
            incorrectlyUsedAsDecorator("set");
        var o = asCreateObservableOptions(options);
        return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);
    },
    object: function (props, decorators, options) {
        if (typeof arguments[1] === "string")
            incorrectlyUsedAsDecorator("object");
        var o = asCreateObservableOptions(options);
        if (o.proxy === false) {
            return extendObservable({}, props, decorators, o);
        }
        else {
            var defaultDecorator = getDefaultDecoratorFromObjectOptions(o);
            var base = extendObservable({}, undefined, undefined, o);
            var proxy = createDynamicObservableObject(base);
            extendObservableObjectWithProperties(proxy, props, decorators, defaultDecorator);
            return proxy;
        }
    },
    ref: refDecorator,
    shallow: shallowDecorator,
    deep: deepDecorator,
    struct: refStructDecorator
};
var observable = createObservable;
// weird trick to keep our typings nicely with our funcs, and still extend the observable function
Object.keys(observableFactories).forEach(function (name) { return (observable[name] = observableFactories[name]); });
function incorrectlyUsedAsDecorator(methodName) {
    fail(
    // process.env.NODE_ENV !== "production" &&
    "Expected one or two arguments to observable." + methodName + ". Did you accidentally try to use observable." + methodName + " as decorator?");
}

var computedDecorator = createPropDecorator(false, function (instance, propertyName, descriptor, decoratorTarget, decoratorArgs) {
    if (process.env.NODE_ENV !== "production") {
        invariant(descriptor && descriptor.get, "Trying to declare a computed value for unspecified getter '" + stringifyKey(propertyName) + "'");
    }
    var get = descriptor.get, set = descriptor.set; // initialValue is the descriptor for get / set props
    // Optimization: faster on decorator target or instance? Assuming target
    // Optimization: find out if declaring on instance isn't just faster. (also makes the property descriptor simpler). But, more memory usage..
    // Forcing instance now, fixes hot reloadig issues on React Native:
    var options = decoratorArgs[0] || {};
    asObservableObject(instance).addComputedProp(instance, propertyName, __assign$1({ get: get,
        set: set, context: instance }, options));
});
var computedStructDecorator = computedDecorator({ equals: comparer.structural });
/**
 * Decorator for class properties: @computed get value() { return expr; }.
 * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;
 */
var computed = function computed(arg1, arg2, arg3) {
    if (typeof arg2 === "string") {
        // @computed
        return computedDecorator.apply(null, arguments);
    }
    if (arg1 !== null && typeof arg1 === "object" && arguments.length === 1) {
        // @computed({ options })
        return computedDecorator.apply(null, arguments);
    }
    // computed(expr, options?)
    if (process.env.NODE_ENV !== "production") {
        invariant(typeof arg1 === "function", "First argument to `computed` should be an expression.");
        invariant(arguments.length < 3, "Computed takes one or two arguments if used as function");
    }
    var opts = typeof arg2 === "object" ? arg2 : {};
    opts.get = arg1;
    opts.set = typeof arg2 === "function" ? arg2 : opts.set;
    opts.name = opts.name || arg1.name || ""; /* for generated name */
    return new ComputedValue(opts);
};
computed.struct = computedStructDecorator;

var IDerivationState;
(function (IDerivationState) {
    // before being run or (outside batch and not being observed)
    // at this point derivation is not holding any data about dependency tree
    IDerivationState[IDerivationState["NOT_TRACKING"] = -1] = "NOT_TRACKING";
    // no shallow dependency changed since last computation
    // won't recalculate derivation
    // this is what makes mobx fast
    IDerivationState[IDerivationState["UP_TO_DATE"] = 0] = "UP_TO_DATE";
    // some deep dependency changed, but don't know if shallow dependency changed
    // will require to check first if UP_TO_DATE or POSSIBLY_STALE
    // currently only ComputedValue will propagate POSSIBLY_STALE
    //
    // having this state is second big optimization:
    // don't have to recompute on every dependency change, but only when it's needed
    IDerivationState[IDerivationState["POSSIBLY_STALE"] = 1] = "POSSIBLY_STALE";
    // A shallow dependency has changed since last computation and the derivation
    // will need to recompute when it's needed next.
    IDerivationState[IDerivationState["STALE"] = 2] = "STALE";
})(IDerivationState || (IDerivationState = {}));
var TraceMode;
(function (TraceMode) {
    TraceMode[TraceMode["NONE"] = 0] = "NONE";
    TraceMode[TraceMode["LOG"] = 1] = "LOG";
    TraceMode[TraceMode["BREAK"] = 2] = "BREAK";
})(TraceMode || (TraceMode = {}));
var CaughtException = /** @class */ (function () {
    function CaughtException(cause) {
        this.cause = cause;
        // Empty
    }
    return CaughtException;
}());
function isCaughtException(e) {
    return e instanceof CaughtException;
}
/**
 * Finds out whether any dependency of the derivation has actually changed.
 * If dependenciesState is 1 then it will recalculate dependencies,
 * if any dependency changed it will propagate it by changing dependenciesState to 2.
 *
 * By iterating over the dependencies in the same order that they were reported and
 * stopping on the first change, all the recalculations are only called for ComputedValues
 * that will be tracked by derivation. That is because we assume that if the first x
 * dependencies of the derivation doesn't change then the derivation should run the same way
 * up until accessing x-th dependency.
 */
function shouldCompute(derivation) {
    switch (derivation.dependenciesState) {
        case IDerivationState.UP_TO_DATE:
            return false;
        case IDerivationState.NOT_TRACKING:
        case IDerivationState.STALE:
            return true;
        case IDerivationState.POSSIBLY_STALE: {
            // state propagation can occur outside of action/reactive context #2195
            var prevAllowStateReads = allowStateReadsStart(true);
            var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.
            var obs = derivation.observing, l = obs.length;
            for (var i = 0; i < l; i++) {
                var obj = obs[i];
                if (isComputedValue(obj)) {
                    if (globalState.disableErrorBoundaries) {
                        obj.get();
                    }
                    else {
                        try {
                            obj.get();
                        }
                        catch (e) {
                            // we are not interested in the value *or* exception at this moment, but if there is one, notify all
                            untrackedEnd(prevUntracked);
                            allowStateReadsEnd(prevAllowStateReads);
                            return true;
                        }
                    }
                    // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.
                    // and `derivation` is an observer of `obj`
                    // invariantShouldCompute(derivation)
                    if (derivation.dependenciesState === IDerivationState.STALE) {
                        untrackedEnd(prevUntracked);
                        allowStateReadsEnd(prevAllowStateReads);
                        return true;
                    }
                }
            }
            changeDependenciesStateTo0(derivation);
            untrackedEnd(prevUntracked);
            allowStateReadsEnd(prevAllowStateReads);
            return false;
        }
    }
}
function checkIfStateModificationsAreAllowed(atom) {
    var hasObservers = atom.observers.size > 0;
    // Should never be possible to change an observed observable from inside computed, see #798
    if (globalState.computationDepth > 0 && hasObservers)
        fail(process.env.NODE_ENV !== "production" &&
            "Computed values are not allowed to cause side effects by changing observables that are already being observed. Tried to modify: " + atom.name);
    // Should not be possible to change observed state outside strict mode, except during initialization, see #563
    if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === "strict"))
        fail(process.env.NODE_ENV !== "production" &&
            (globalState.enforceActions
                ? "Since strict-mode is enabled, changing observed observable values outside actions is not allowed. Please wrap the code in an `action` if this change is intended. Tried to modify: "
                : "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, the render function of a React component? Tried to modify: ") +
                atom.name);
}
function checkIfStateReadsAreAllowed(observable) {
    if (process.env.NODE_ENV !== "production" &&
        !globalState.allowStateReads &&
        globalState.observableRequiresReaction) {
        console.warn("[mobx] Observable " + observable.name + " being read outside a reactive context");
    }
}
/**
 * Executes the provided function `f` and tracks which observables are being accessed.
 * The tracking information is stored on the `derivation` object and the derivation is registered
 * as observer of any of the accessed observables.
 */
function trackDerivedFunction(derivation, f, context) {
    var prevAllowStateReads = allowStateReadsStart(true);
    // pre allocate array allocation + room for variation in deps
    // array will be trimmed by bindDependencies
    changeDependenciesStateTo0(derivation);
    derivation.newObserving = new Array(derivation.observing.length + 100);
    derivation.unboundDepsCount = 0;
    derivation.runId = ++globalState.runId;
    var prevTracking = globalState.trackingDerivation;
    globalState.trackingDerivation = derivation;
    var result;
    if (globalState.disableErrorBoundaries === true) {
        result = f.call(context);
    }
    else {
        try {
            result = f.call(context);
        }
        catch (e) {
            result = new CaughtException(e);
        }
    }
    globalState.trackingDerivation = prevTracking;
    bindDependencies(derivation);
    warnAboutDerivationWithoutDependencies(derivation);
    allowStateReadsEnd(prevAllowStateReads);
    return result;
}
function warnAboutDerivationWithoutDependencies(derivation) {
    if (process.env.NODE_ENV === "production")
        return;
    if (derivation.observing.length !== 0)
        return;
    if (globalState.reactionRequiresObservable || derivation.requiresObservable) {
        console.warn("[mobx] Derivation " + derivation.name + " is created/updated without reading any observable value");
    }
}
/**
 * diffs newObserving with observing.
 * update observing to be newObserving with unique observables
 * notify observers that become observed/unobserved
 */
function bindDependencies(derivation) {
    // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");
    var prevObserving = derivation.observing;
    var observing = (derivation.observing = derivation.newObserving);
    var lowestNewObservingDerivationState = IDerivationState.UP_TO_DATE;
    // Go through all new observables and check diffValue: (this list can contain duplicates):
    //   0: first occurrence, change to 1 and keep it
    //   1: extra occurrence, drop it
    var i0 = 0, l = derivation.unboundDepsCount;
    for (var i = 0; i < l; i++) {
        var dep = observing[i];
        if (dep.diffValue === 0) {
            dep.diffValue = 1;
            if (i0 !== i)
                observing[i0] = dep;
            i0++;
        }
        // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,
        // not hitting the condition
        if (dep.dependenciesState > lowestNewObservingDerivationState) {
            lowestNewObservingDerivationState = dep.dependenciesState;
        }
    }
    observing.length = i0;
    derivation.newObserving = null; // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)
    // Go through all old observables and check diffValue: (it is unique after last bindDependencies)
    //   0: it's not in new observables, unobserve it
    //   1: it keeps being observed, don't want to notify it. change to 0
    l = prevObserving.length;
    while (l--) {
        var dep = prevObserving[l];
        if (dep.diffValue === 0) {
            removeObserver(dep, derivation);
        }
        dep.diffValue = 0;
    }
    // Go through all new observables and check diffValue: (now it should be unique)
    //   0: it was set to 0 in last loop. don't need to do anything.
    //   1: it wasn't observed, let's observe it. set back to 0
    while (i0--) {
        var dep = observing[i0];
        if (dep.diffValue === 1) {
            dep.diffValue = 0;
            addObserver(dep, derivation);
        }
    }
    // Some new observed derivations may become stale during this derivation computation
    // so they have had no chance to propagate staleness (#916)
    if (lowestNewObservingDerivationState !== IDerivationState.UP_TO_DATE) {
        derivation.dependenciesState = lowestNewObservingDerivationState;
        derivation.onBecomeStale();
    }
}
function clearObserving(derivation) {
    // invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");
    var obs = derivation.observing;
    derivation.observing = [];
    var i = obs.length;
    while (i--)
        removeObserver(obs[i], derivation);
    derivation.dependenciesState = IDerivationState.NOT_TRACKING;
}
function untracked(action) {
    var prev = untrackedStart();
    try {
        return action();
    }
    finally {
        untrackedEnd(prev);
    }
}
function untrackedStart() {
    var prev = globalState.trackingDerivation;
    globalState.trackingDerivation = null;
    return prev;
}
function untrackedEnd(prev) {
    globalState.trackingDerivation = prev;
}
function allowStateReadsStart(allowStateReads) {
    var prev = globalState.allowStateReads;
    globalState.allowStateReads = allowStateReads;
    return prev;
}
function allowStateReadsEnd(prev) {
    globalState.allowStateReads = prev;
}
/**
 * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0
 *
 */
function changeDependenciesStateTo0(derivation) {
    if (derivation.dependenciesState === IDerivationState.UP_TO_DATE)
        return;
    derivation.dependenciesState = IDerivationState.UP_TO_DATE;
    var obs = derivation.observing;
    var i = obs.length;
    while (i--)
        obs[i].lowestObserverState = IDerivationState.UP_TO_DATE;
}

// we don't use globalState for these in order to avoid possible issues with multiple
// mobx versions
var currentActionId = 0;
var nextActionId = 1;
var functionNameDescriptor = Object.getOwnPropertyDescriptor(function () { }, "name");
var isFunctionNameConfigurable = functionNameDescriptor && functionNameDescriptor.configurable;
function createAction(actionName, fn, ref) {
    if (process.env.NODE_ENV !== "production") {
        invariant(typeof fn === "function", "`action` can only be invoked on functions");
        if (typeof actionName !== "string" || !actionName)
            fail("actions should have valid names, got: '" + actionName + "'");
    }
    var res = function () {
        return executeAction(actionName, fn, ref || this, arguments);
    };
    res.isMobxAction = true;
    if (process.env.NODE_ENV !== "production") {
        if (isFunctionNameConfigurable) {
            Object.defineProperty(res, "name", { value: actionName });
        }
    }
    return res;
}
function executeAction(actionName, fn, scope, args) {
    var runInfo = _startAction(actionName, scope, args);
    try {
        return fn.apply(scope, args);
    }
    catch (err) {
        runInfo.error = err;
        throw err;
    }
    finally {
        _endAction(runInfo);
    }
}
function _startAction(actionName, scope, args) {
    var notifySpy = isSpyEnabled() && !!actionName;
    var startTime = 0;
    if (notifySpy && process.env.NODE_ENV !== "production") {
        startTime = Date.now();
        var l = (args && args.length) || 0;
        var flattendArgs = new Array(l);
        if (l > 0)
            for (var i = 0; i < l; i++)
                flattendArgs[i] = args[i];
        spyReportStart({
            type: "action",
            name: actionName,
            object: scope,
            arguments: flattendArgs
        });
    }
    var prevDerivation = untrackedStart();
    startBatch();
    var prevAllowStateChanges = allowStateChangesStart(true);
    var prevAllowStateReads = allowStateReadsStart(true);
    var runInfo = {
        prevDerivation: prevDerivation,
        prevAllowStateChanges: prevAllowStateChanges,
        prevAllowStateReads: prevAllowStateReads,
        notifySpy: notifySpy,
        startTime: startTime,
        actionId: nextActionId++,
        parentActionId: currentActionId
    };
    currentActionId = runInfo.actionId;
    return runInfo;
}
function _endAction(runInfo) {
    if (currentActionId !== runInfo.actionId) {
        fail("invalid action stack. did you forget to finish an action?");
    }
    currentActionId = runInfo.parentActionId;
    if (runInfo.error !== undefined) {
        globalState.suppressReactionErrors = true;
    }
    allowStateChangesEnd(runInfo.prevAllowStateChanges);
    allowStateReadsEnd(runInfo.prevAllowStateReads);
    endBatch();
    untrackedEnd(runInfo.prevDerivation);
    if (runInfo.notifySpy && process.env.NODE_ENV !== "production") {
        spyReportEnd({ time: Date.now() - runInfo.startTime });
    }
    globalState.suppressReactionErrors = false;
}
function allowStateChangesStart(allowStateChanges) {
    var prev = globalState.allowStateChanges;
    globalState.allowStateChanges = allowStateChanges;
    return prev;
}
function allowStateChangesEnd(prev) {
    globalState.allowStateChanges = prev;
}

var ObservableValue = /** @class */ (function (_super) {
    __extends$1(ObservableValue, _super);
    function ObservableValue(value, enhancer, name, notifySpy, equals) {
        if (name === void 0) { name = "ObservableValue@" + getNextId(); }
        if (notifySpy === void 0) { notifySpy = true; }
        if (equals === void 0) { equals = comparer.default; }
        var _this = _super.call(this, name) || this;
        _this.enhancer = enhancer;
        _this.name = name;
        _this.equals = equals;
        _this.hasUnreportedChange = false;
        _this.value = enhancer(value, undefined, name);
        if (notifySpy && isSpyEnabled() && process.env.NODE_ENV !== "production") {
            // only notify spy if this is a stand-alone observable
            spyReport({ type: "create", name: _this.name, newValue: "" + _this.value });
        }
        return _this;
    }
    ObservableValue.prototype.dehanceValue = function (value) {
        if (this.dehancer !== undefined)
            return this.dehancer(value);
        return value;
    };
    ObservableValue.prototype.set = function (newValue) {
        var oldValue = this.value;
        newValue = this.prepareNewValue(newValue);
        if (newValue !== globalState.UNCHANGED) {
            var notifySpy = isSpyEnabled();
            if (notifySpy && process.env.NODE_ENV !== "production") {
                spyReportStart({
                    type: "update",
                    name: this.name,
                    newValue: newValue,
                    oldValue: oldValue
                });
            }
            this.setNewValue(newValue);
            if (notifySpy && process.env.NODE_ENV !== "production")
                spyReportEnd();
        }
    };
    ObservableValue.prototype.prepareNewValue = function (newValue) {
        checkIfStateModificationsAreAllowed(this);
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                object: this,
                type: "update",
                newValue: newValue
            });
            if (!change)
                return globalState.UNCHANGED;
            newValue = change.newValue;
        }
        // apply modifier
        newValue = this.enhancer(newValue, this.value, this.name);
        return this.equals(this.value, newValue) ? globalState.UNCHANGED : newValue;
    };
    ObservableValue.prototype.setNewValue = function (newValue) {
        var oldValue = this.value;
        this.value = newValue;
        this.reportChanged();
        if (hasListeners(this)) {
            notifyListeners(this, {
                type: "update",
                object: this,
                newValue: newValue,
                oldValue: oldValue
            });
        }
    };
    ObservableValue.prototype.get = function () {
        this.reportObserved();
        return this.dehanceValue(this.value);
    };
    ObservableValue.prototype.intercept = function (handler) {
        return registerInterceptor(this, handler);
    };
    ObservableValue.prototype.observe = function (listener, fireImmediately) {
        if (fireImmediately)
            listener({
                object: this,
                type: "update",
                newValue: this.value,
                oldValue: undefined
            });
        return registerListener(this, listener);
    };
    ObservableValue.prototype.toJSON = function () {
        return this.get();
    };
    ObservableValue.prototype.toString = function () {
        return this.name + "[" + this.value + "]";
    };
    ObservableValue.prototype.valueOf = function () {
        return toPrimitive(this.get());
    };
    ObservableValue.prototype[Symbol.toPrimitive] = function () {
        return this.valueOf();
    };
    return ObservableValue;
}(Atom));
var isObservableValue = createInstanceofPredicate("ObservableValue", ObservableValue);

/**
 * A node in the state dependency root that observes other nodes, and can be observed itself.
 *
 * ComputedValue will remember the result of the computation for the duration of the batch, or
 * while being observed.
 *
 * During this time it will recompute only when one of its direct dependencies changed,
 * but only when it is being accessed with `ComputedValue.get()`.
 *
 * Implementation description:
 * 1. First time it's being accessed it will compute and remember result
 *    give back remembered result until 2. happens
 * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.
 * 3. When it's being accessed, recompute if any shallow dependency changed.
 *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.
 *    go to step 2. either way
 *
 * If at any point it's outside batch and it isn't observed: reset everything and go to 1.
 */
var ComputedValue = /** @class */ (function () {
    /**
     * Create a new computed value based on a function expression.
     *
     * The `name` property is for debug purposes only.
     *
     * The `equals` property specifies the comparer function to use to determine if a newly produced
     * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`
     * compares based on identity comparison (===), and `structualComparer` deeply compares the structure.
     * Structural comparison can be convenient if you always produce a new aggregated object and
     * don't want to notify observers if it is structurally the same.
     * This is useful for working with vectors, mouse coordinates etc.
     */
    function ComputedValue(options) {
        this.dependenciesState = IDerivationState.NOT_TRACKING;
        this.observing = []; // nodes we are looking at. Our value depends on these nodes
        this.newObserving = null; // during tracking it's an array with new observed observers
        this.isBeingObserved = false;
        this.isPendingUnobservation = false;
        this.observers = new Set();
        this.diffValue = 0;
        this.runId = 0;
        this.lastAccessedBy = 0;
        this.lowestObserverState = IDerivationState.UP_TO_DATE;
        this.unboundDepsCount = 0;
        this.__mapid = "#" + getNextId();
        this.value = new CaughtException(null);
        this.isComputing = false; // to check for cycles
        this.isRunningSetter = false;
        this.isTracing = TraceMode.NONE;
        invariant(options.get, "missing option for computed: get");
        this.derivation = options.get;
        this.name = options.name || "ComputedValue@" + getNextId();
        if (options.set)
            this.setter = createAction(this.name + "-setter", options.set);
        this.equals =
            options.equals ||
                (options.compareStructural || options.struct
                    ? comparer.structural
                    : comparer.default);
        this.scope = options.context;
        this.requiresReaction = !!options.requiresReaction;
        this.keepAlive = !!options.keepAlive;
    }
    ComputedValue.prototype.onBecomeStale = function () {
        propagateMaybeChanged(this);
    };
    ComputedValue.prototype.onBecomeObserved = function () {
        if (this.onBecomeObservedListeners) {
            this.onBecomeObservedListeners.forEach(function (listener) { return listener(); });
        }
    };
    ComputedValue.prototype.onBecomeUnobserved = function () {
        if (this.onBecomeUnobservedListeners) {
            this.onBecomeUnobservedListeners.forEach(function (listener) { return listener(); });
        }
    };
    /**
     * Returns the current value of this computed value.
     * Will evaluate its computation first if needed.
     */
    ComputedValue.prototype.get = function () {
        if (this.isComputing)
            fail("Cycle detected in computation " + this.name + ": " + this.derivation);
        if (globalState.inBatch === 0 && this.observers.size === 0 && !this.keepAlive) {
            if (shouldCompute(this)) {
                this.warnAboutUntrackedRead();
                startBatch(); // See perf test 'computed memoization'
                this.value = this.computeValue(false);
                endBatch();
            }
        }
        else {
            reportObserved(this);
            if (shouldCompute(this))
                if (this.trackAndCompute())
                    propagateChangeConfirmed(this);
        }
        var result = this.value;
        if (isCaughtException(result))
            throw result.cause;
        return result;
    };
    ComputedValue.prototype.peek = function () {
        var res = this.computeValue(false);
        if (isCaughtException(res))
            throw res.cause;
        return res;
    };
    ComputedValue.prototype.set = function (value) {
        if (this.setter) {
            invariant(!this.isRunningSetter, "The setter of computed value '" + this.name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?");
            this.isRunningSetter = true;
            try {
                this.setter.call(this.scope, value);
            }
            finally {
                this.isRunningSetter = false;
            }
        }
        else
            invariant(false, process.env.NODE_ENV !== "production" &&
                "[ComputedValue '" + this.name + "'] It is not possible to assign a new value to a computed value.");
    };
    ComputedValue.prototype.trackAndCompute = function () {
        if (isSpyEnabled() && process.env.NODE_ENV !== "production") {
            spyReport({
                object: this.scope,
                type: "compute",
                name: this.name
            });
        }
        var oldValue = this.value;
        var wasSuspended = 
        /* see #1208 */ this.dependenciesState === IDerivationState.NOT_TRACKING;
        var newValue = this.computeValue(true);
        var changed = wasSuspended ||
            isCaughtException(oldValue) ||
            isCaughtException(newValue) ||
            !this.equals(oldValue, newValue);
        if (changed) {
            this.value = newValue;
        }
        return changed;
    };
    ComputedValue.prototype.computeValue = function (track) {
        this.isComputing = true;
        globalState.computationDepth++;
        var res;
        if (track) {
            res = trackDerivedFunction(this, this.derivation, this.scope);
        }
        else {
            if (globalState.disableErrorBoundaries === true) {
                res = this.derivation.call(this.scope);
            }
            else {
                try {
                    res = this.derivation.call(this.scope);
                }
                catch (e) {
                    res = new CaughtException(e);
                }
            }
        }
        globalState.computationDepth--;
        this.isComputing = false;
        return res;
    };
    ComputedValue.prototype.suspend = function () {
        if (!this.keepAlive) {
            clearObserving(this);
            this.value = undefined; // don't hold on to computed value!
        }
    };
    ComputedValue.prototype.observe = function (listener, fireImmediately) {
        var _this = this;
        var firstTime = true;
        var prevValue = undefined;
        return autorun(function () {
            var newValue = _this.get();
            if (!firstTime || fireImmediately) {
                var prevU = untrackedStart();
                listener({
                    type: "update",
                    object: _this,
                    newValue: newValue,
                    oldValue: prevValue
                });
                untrackedEnd(prevU);
            }
            firstTime = false;
            prevValue = newValue;
        });
    };
    ComputedValue.prototype.warnAboutUntrackedRead = function () {
        if (process.env.NODE_ENV === "production")
            return;
        if (this.requiresReaction === true) {
            fail("[mobx] Computed value " + this.name + " is read outside a reactive context");
        }
        if (this.isTracing !== TraceMode.NONE) {
            console.log("[mobx.trace] '" + this.name + "' is being read outside a reactive context. Doing a full recompute");
        }
        if (globalState.computedRequiresReaction) {
            console.warn("[mobx] Computed value " + this.name + " is being read outside a reactive context. Doing a full recompute");
        }
    };
    ComputedValue.prototype.toJSON = function () {
        return this.get();
    };
    ComputedValue.prototype.toString = function () {
        return this.name + "[" + this.derivation.toString() + "]";
    };
    ComputedValue.prototype.valueOf = function () {
        return toPrimitive(this.get());
    };
    ComputedValue.prototype[Symbol.toPrimitive] = function () {
        return this.valueOf();
    };
    return ComputedValue;
}());
var isComputedValue = createInstanceofPredicate("ComputedValue", ComputedValue);
var MobXGlobals = /** @class */ (function () {
    function MobXGlobals() {
        /**
         * MobXGlobals version.
         * MobX compatiblity with other versions loaded in memory as long as this version matches.
         * It indicates that the global state still stores similar information
         *
         * N.B: this version is unrelated to the package version of MobX, and is only the version of the
         * internal state storage of MobX, and can be the same across many different package versions
         */
        this.version = 5;
        /**
         * globally unique token to signal unchanged
         */
        this.UNCHANGED = {};
        /**
         * Currently running derivation
         */
        this.trackingDerivation = null;
        /**
         * Are we running a computation currently? (not a reaction)
         */
        this.computationDepth = 0;
        /**
         * Each time a derivation is tracked, it is assigned a unique run-id
         */
        this.runId = 0;
        /**
         * 'guid' for general purpose. Will be persisted amongst resets.
         */
        this.mobxGuid = 0;
        /**
         * Are we in a batch block? (and how many of them)
         */
        this.inBatch = 0;
        /**
         * Observables that don't have observers anymore, and are about to be
         * suspended, unless somebody else accesses it in the same batch
         *
         * @type {IObservable[]}
         */
        this.pendingUnobservations = [];
        /**
         * List of scheduled, not yet executed, reactions.
         */
        this.pendingReactions = [];
        /**
         * Are we currently processing reactions?
         */
        this.isRunningReactions = false;
        /**
         * Is it allowed to change observables at this point?
         * In general, MobX doesn't allow that when running computations and React.render.
         * To ensure that those functions stay pure.
         */
        this.allowStateChanges = true;
        /**
         * Is it allowed to read observables at this point?
         * Used to hold the state needed for `observableRequiresReaction`
         */
        this.allowStateReads = true;
        /**
         * If strict mode is enabled, state changes are by default not allowed
         */
        this.enforceActions = false;
        /**
         * Spy callbacks
         */
        this.spyListeners = [];
        /**
         * Globally attached error handlers that react specifically to errors in reactions
         */
        this.globalReactionErrorHandlers = [];
        /**
         * Warn if computed values are accessed outside a reactive context
         */
        this.computedRequiresReaction = false;
        /**
         * (Experimental)
         * Warn if you try to create to derivation / reactive context without accessing any observable.
         */
        this.reactionRequiresObservable = false;
        /**
         * (Experimental)
         * Warn if observables are accessed outside a reactive context
         */
        this.observableRequiresReaction = false;
        /**
         * Allows overwriting of computed properties, useful in tests but not prod as it can cause
         * memory leaks. See https://github.com/mobxjs/mobx/issues/1867
         */
        this.computedConfigurable = false;
        /*
         * Don't catch and rethrow exceptions. This is useful for inspecting the state of
         * the stack when an exception occurs while debugging.
         */
        this.disableErrorBoundaries = false;
        /*
         * If true, we are already handling an exception in an action. Any errors in reactions should be suppressed, as
         * they are not the cause, see: https://github.com/mobxjs/mobx/issues/1836
         */
        this.suppressReactionErrors = false;
    }
    return MobXGlobals;
}());
var mockGlobal = {};
function getGlobal() {
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    return mockGlobal;
}
var canMergeGlobalState = true;
var globalState = (function () {
    var global = getGlobal();
    if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals)
        canMergeGlobalState = false;
    if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version)
        canMergeGlobalState = false;
    if (!canMergeGlobalState) {
        setTimeout(function () {
            {
                fail("There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`");
            }
        }, 1);
        return new MobXGlobals();
    }
    else if (global.__mobxGlobals) {
        global.__mobxInstanceCount += 1;
        if (!global.__mobxGlobals.UNCHANGED)
            global.__mobxGlobals.UNCHANGED = {}; // make merge backward compatible
        return global.__mobxGlobals;
    }
    else {
        global.__mobxInstanceCount = 1;
        return (global.__mobxGlobals = new MobXGlobals());
    }
})();
// function invariantObservers(observable: IObservable) {
//     const list = observable.observers
//     const map = observable.observersIndexes
//     const l = list.length
//     for (let i = 0; i < l; i++) {
//         const id = list[i].__mapid
//         if (i) {
//             invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list") // for performance
//         } else {
//             invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldn't be held in map.") // for performance
//         }
//     }
//     invariant(
//         list.length === 0 || Object.keys(map).length === list.length - 1,
//         "INTERNAL ERROR there is no junk in map"
//     )
// }
function addObserver(observable, node) {
    // invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");
    // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");
    // invariantObservers(observable);
    observable.observers.add(node);
    if (observable.lowestObserverState > node.dependenciesState)
        observable.lowestObserverState = node.dependenciesState;
    // invariantObservers(observable);
    // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR didn't add node");
}
function removeObserver(observable, node) {
    // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");
    // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");
    // invariantObservers(observable);
    observable.observers.delete(node);
    if (observable.observers.size === 0) {
        // deleting last observer
        queueForUnobservation(observable);
    }
    // invariantObservers(observable);
    // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR remove already removed node2");
}
function queueForUnobservation(observable) {
    if (observable.isPendingUnobservation === false) {
        // invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");
        observable.isPendingUnobservation = true;
        globalState.pendingUnobservations.push(observable);
    }
}
/**
 * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.
 * During a batch `onBecomeUnobserved` will be called at most once per observable.
 * Avoids unnecessary recalculations.
 */
function startBatch() {
    globalState.inBatch++;
}
function endBatch() {
    if (--globalState.inBatch === 0) {
        runReactions();
        // the batch is actually about to finish, all unobserving should happen here.
        var list = globalState.pendingUnobservations;
        for (var i = 0; i < list.length; i++) {
            var observable = list[i];
            observable.isPendingUnobservation = false;
            if (observable.observers.size === 0) {
                if (observable.isBeingObserved) {
                    // if this observable had reactive observers, trigger the hooks
                    observable.isBeingObserved = false;
                    observable.onBecomeUnobserved();
                }
                if (observable instanceof ComputedValue) {
                    // computed values are automatically teared down when the last observer leaves
                    // this process happens recursively, this computed might be the last observable of another, etc..
                    observable.suspend();
                }
            }
        }
        globalState.pendingUnobservations = [];
    }
}
function reportObserved(observable) {
    checkIfStateReadsAreAllowed(observable);
    var derivation = globalState.trackingDerivation;
    if (derivation !== null) {
        /**
         * Simple optimization, give each derivation run an unique id (runId)
         * Check if last time this observable was accessed the same runId is used
         * if this is the case, the relation is already known
         */
        if (derivation.runId !== observable.lastAccessedBy) {
            observable.lastAccessedBy = derivation.runId;
            // Tried storing newObserving, or observing, or both as Set, but performance didn't come close...
            derivation.newObserving[derivation.unboundDepsCount++] = observable;
            if (!observable.isBeingObserved) {
                observable.isBeingObserved = true;
                observable.onBecomeObserved();
            }
        }
        return true;
    }
    else if (observable.observers.size === 0 && globalState.inBatch > 0) {
        queueForUnobservation(observable);
    }
    return false;
}
// function invariantLOS(observable: IObservable, msg: string) {
//     // it's expensive so better not run it in produciton. but temporarily helpful for testing
//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)
//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`
//     throw new Error(
//         "lowestObserverState is wrong for " +
//             msg +
//             " because " +
//             min +
//             " < " +
//             observable.lowestObserverState
//     )
// }
/**
 * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly
 * It will propagate changes to observers from previous run
 * It's hard or maybe impossible (with reasonable perf) to get it right with current approach
 * Hopefully self reruning autoruns aren't a feature people should depend on
 * Also most basic use cases should be ok
 */
// Called by Atom when its value changes
function propagateChanged(observable) {
    // invariantLOS(observable, "changed start");
    if (observable.lowestObserverState === IDerivationState.STALE)
        return;
    observable.lowestObserverState = IDerivationState.STALE;
    // Ideally we use for..of here, but the downcompiled version is really slow...
    observable.observers.forEach(function (d) {
        if (d.dependenciesState === IDerivationState.UP_TO_DATE) {
            if (d.isTracing !== TraceMode.NONE) {
                logTraceInfo(d, observable);
            }
            d.onBecomeStale();
        }
        d.dependenciesState = IDerivationState.STALE;
    });
    // invariantLOS(observable, "changed end");
}
// Called by ComputedValue when it recalculate and its value changed
function propagateChangeConfirmed(observable) {
    // invariantLOS(observable, "confirmed start");
    if (observable.lowestObserverState === IDerivationState.STALE)
        return;
    observable.lowestObserverState = IDerivationState.STALE;
    observable.observers.forEach(function (d) {
        if (d.dependenciesState === IDerivationState.POSSIBLY_STALE)
            d.dependenciesState = IDerivationState.STALE;
        else if (d.dependenciesState === IDerivationState.UP_TO_DATE // this happens during computing of `d`, just keep lowestObserverState up to date.
        )
            observable.lowestObserverState = IDerivationState.UP_TO_DATE;
    });
    // invariantLOS(observable, "confirmed end");
}
// Used by computed when its dependency changed, but we don't wan't to immediately recompute.
function propagateMaybeChanged(observable) {
    // invariantLOS(observable, "maybe start");
    if (observable.lowestObserverState !== IDerivationState.UP_TO_DATE)
        return;
    observable.lowestObserverState = IDerivationState.POSSIBLY_STALE;
    observable.observers.forEach(function (d) {
        if (d.dependenciesState === IDerivationState.UP_TO_DATE) {
            d.dependenciesState = IDerivationState.POSSIBLY_STALE;
            if (d.isTracing !== TraceMode.NONE) {
                logTraceInfo(d, observable);
            }
            d.onBecomeStale();
        }
    });
    // invariantLOS(observable, "maybe end");
}
function logTraceInfo(derivation, observable) {
    console.log("[mobx.trace] '" + derivation.name + "' is invalidated due to a change in: '" + observable.name + "'");
    if (derivation.isTracing === TraceMode.BREAK) {
        var lines = [];
        printDepTree(getDependencyTree(derivation), lines, 1);
        // prettier-ignore
        new Function("debugger;\n/*\nTracing '" + derivation.name + "'\n\nYou are entering this break point because derivation '" + derivation.name + "' is being traced and '" + observable.name + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\//g, "/") : "") + "\n\nThe dependencies for this derivation are:\n\n" + lines.join("\n") + "\n*/\n    ")();
    }
}
function printDepTree(tree, lines, depth) {
    if (lines.length >= 1000) {
        lines.push("(and many more)");
        return;
    }
    lines.push("" + new Array(depth).join("\t") + tree.name); // MWE: not the fastest, but the easiest way :)
    if (tree.dependencies)
        tree.dependencies.forEach(function (child) { return printDepTree(child, lines, depth + 1); });
}

var Reaction = /** @class */ (function () {
    function Reaction(name, onInvalidate, errorHandler, requiresObservable) {
        if (name === void 0) { name = "Reaction@" + getNextId(); }
        if (requiresObservable === void 0) { requiresObservable = false; }
        this.name = name;
        this.onInvalidate = onInvalidate;
        this.errorHandler = errorHandler;
        this.requiresObservable = requiresObservable;
        this.observing = []; // nodes we are looking at. Our value depends on these nodes
        this.newObserving = [];
        this.dependenciesState = IDerivationState.NOT_TRACKING;
        this.diffValue = 0;
        this.runId = 0;
        this.unboundDepsCount = 0;
        this.__mapid = "#" + getNextId();
        this.isDisposed = false;
        this._isScheduled = false;
        this._isTrackPending = false;
        this._isRunning = false;
        this.isTracing = TraceMode.NONE;
    }
    Reaction.prototype.onBecomeStale = function () {
        this.schedule();
    };
    Reaction.prototype.schedule = function () {
        if (!this._isScheduled) {
            this._isScheduled = true;
            globalState.pendingReactions.push(this);
            runReactions();
        }
    };
    Reaction.prototype.isScheduled = function () {
        return this._isScheduled;
    };
    /**
     * internal, use schedule() if you intend to kick off a reaction
     */
    Reaction.prototype.runReaction = function () {
        if (!this.isDisposed) {
            startBatch();
            this._isScheduled = false;
            if (shouldCompute(this)) {
                this._isTrackPending = true;
                try {
                    this.onInvalidate();
                    if (this._isTrackPending &&
                        isSpyEnabled() &&
                        process.env.NODE_ENV !== "production") {
                        // onInvalidate didn't trigger track right away..
                        spyReport({
                            name: this.name,
                            type: "scheduled-reaction"
                        });
                    }
                }
                catch (e) {
                    this.reportExceptionInDerivation(e);
                }
            }
            endBatch();
        }
    };
    Reaction.prototype.track = function (fn) {
        if (this.isDisposed) {
            return;
            // console.warn("Reaction already disposed") // Note: Not a warning / error in mobx 4 either
        }
        startBatch();
        var notify = isSpyEnabled();
        var startTime;
        if (notify && process.env.NODE_ENV !== "production") {
            startTime = Date.now();
            spyReportStart({
                name: this.name,
                type: "reaction"
            });
        }
        this._isRunning = true;
        var result = trackDerivedFunction(this, fn, undefined);
        this._isRunning = false;
        this._isTrackPending = false;
        if (this.isDisposed) {
            // disposed during last run. Clean up everything that was bound after the dispose call.
            clearObserving(this);
        }
        if (isCaughtException(result))
            this.reportExceptionInDerivation(result.cause);
        if (notify && process.env.NODE_ENV !== "production") {
            spyReportEnd({
                time: Date.now() - startTime
            });
        }
        endBatch();
    };
    Reaction.prototype.reportExceptionInDerivation = function (error) {
        var _this = this;
        if (this.errorHandler) {
            this.errorHandler(error, this);
            return;
        }
        if (globalState.disableErrorBoundaries)
            throw error;
        var message = "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this + "'";
        if (globalState.suppressReactionErrors) {
            console.warn("[mobx] (error in reaction '" + this.name + "' suppressed, fix error of causing action below)"); // prettier-ignore
        }
        else {
            console.error(message, error);
            /** If debugging brought you here, please, read the above message :-). Tnx! */
        }
        if (isSpyEnabled()) {
            spyReport({
                type: "error",
                name: this.name,
                message: message,
                error: "" + error
            });
        }
        globalState.globalReactionErrorHandlers.forEach(function (f) { return f(error, _this); });
    };
    Reaction.prototype.dispose = function () {
        if (!this.isDisposed) {
            this.isDisposed = true;
            if (!this._isRunning) {
                // if disposed while running, clean up later. Maybe not optimal, but rare case
                startBatch();
                clearObserving(this);
                endBatch();
            }
        }
    };
    Reaction.prototype.getDisposer = function () {
        var r = this.dispose.bind(this);
        r[$mobx] = this;
        return r;
    };
    Reaction.prototype.toString = function () {
        return "Reaction[" + this.name + "]";
    };
    Reaction.prototype.trace = function (enterBreakPoint) {
        if (enterBreakPoint === void 0) { enterBreakPoint = false; }
        trace(this, enterBreakPoint);
    };
    return Reaction;
}());
/**
 * Magic number alert!
 * Defines within how many times a reaction is allowed to re-trigger itself
 * until it is assumed that this is gonna be a never ending loop...
 */
var MAX_REACTION_ITERATIONS = 100;
var reactionScheduler = function (f) { return f(); };
function runReactions() {
    // Trampolining, if runReactions are already running, new reactions will be picked up
    if (globalState.inBatch > 0 || globalState.isRunningReactions)
        return;
    reactionScheduler(runReactionsHelper);
}
function runReactionsHelper() {
    globalState.isRunningReactions = true;
    var allReactions = globalState.pendingReactions;
    var iterations = 0;
    // While running reactions, new reactions might be triggered.
    // Hence we work with two variables and check whether
    // we converge to no remaining reactions after a while.
    while (allReactions.length > 0) {
        if (++iterations === MAX_REACTION_ITERATIONS) {
            console.error("Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS + " iterations." +
                (" Probably there is a cycle in the reactive function: " + allReactions[0]));
            allReactions.splice(0); // clear reactions
        }
        var remainingReactions = allReactions.splice(0);
        for (var i = 0, l = remainingReactions.length; i < l; i++)
            remainingReactions[i].runReaction();
    }
    globalState.isRunningReactions = false;
}
var isReaction = createInstanceofPredicate("Reaction", Reaction);

function isSpyEnabled() {
    return process.env.NODE_ENV !== "production" && !!globalState.spyListeners.length;
}
function spyReport(event) {
    if (process.env.NODE_ENV === "production")
        return; // dead code elimination can do the rest
    if (!globalState.spyListeners.length)
        return;
    var listeners = globalState.spyListeners;
    for (var i = 0, l = listeners.length; i < l; i++)
        listeners[i](event);
}
function spyReportStart(event) {
    if (process.env.NODE_ENV === "production")
        return;
    var change = __assign$1(__assign$1({}, event), { spyReportStart: true });
    spyReport(change);
}
var END_EVENT = { spyReportEnd: true };
function spyReportEnd(change) {
    if (process.env.NODE_ENV === "production")
        return;
    if (change)
        spyReport(__assign$1(__assign$1({}, change), { spyReportEnd: true }));
    else
        spyReport(END_EVENT);
}
function spy(listener) {
    if (process.env.NODE_ENV === "production") {
        console.warn("[mobx.spy] Is a no-op in production builds");
        return function () { };
    }
    else {
        globalState.spyListeners.push(listener);
        return once(function () {
            globalState.spyListeners = globalState.spyListeners.filter(function (l) { return l !== listener; });
        });
    }
}

function dontReassignFields() {
    fail(process.env.NODE_ENV !== "production" && "@action fields are not reassignable");
}
function namedActionDecorator(name) {
    return function (target, prop, descriptor) {
        if (descriptor) {
            if (process.env.NODE_ENV !== "production" && descriptor.get !== undefined) {
                return fail("@action cannot be used with getters");
            }
            // babel / typescript
            // @action method() { }
            if (descriptor.value) {
                // typescript
                return {
                    value: createAction(name, descriptor.value),
                    enumerable: false,
                    configurable: true,
                    writable: true // for typescript, this must be writable, otherwise it cannot inherit :/ (see inheritable actions test)
                };
            }
            // babel only: @action method = () => {}
            var initializer_1 = descriptor.initializer;
            return {
                enumerable: false,
                configurable: true,
                writable: true,
                initializer: function () {
                    // N.B: we can't immediately invoke initializer; this would be wrong
                    return createAction(name, initializer_1.call(this));
                }
            };
        }
        // bound instance methods
        return actionFieldDecorator(name).apply(this, arguments);
    };
}
function actionFieldDecorator(name) {
    // Simple property that writes on first invocation to the current instance
    return function (target, prop, descriptor) {
        Object.defineProperty(target, prop, {
            configurable: true,
            enumerable: false,
            get: function () {
                return undefined;
            },
            set: function (value) {
                addHiddenProp(this, prop, action(name, value));
            }
        });
    };
}
function boundActionDecorator(target, propertyName, descriptor, applyToInstance) {
    if (applyToInstance === true) {
        defineBoundAction(target, propertyName, descriptor.value);
        return null;
    }
    if (descriptor) {
        // if (descriptor.value)
        // Typescript / Babel: @action.bound method() { }
        // also: babel @action.bound method = () => {}
        return {
            configurable: true,
            enumerable: false,
            get: function () {
                defineBoundAction(this, propertyName, descriptor.value || descriptor.initializer.call(this));
                return this[propertyName];
            },
            set: dontReassignFields
        };
    }
    // field decorator Typescript @action.bound method = () => {}
    return {
        enumerable: false,
        configurable: true,
        set: function (v) {
            defineBoundAction(this, propertyName, v);
        },
        get: function () {
            return undefined;
        }
    };
}

var action = function action(arg1, arg2, arg3, arg4) {
    // action(fn() {})
    if (arguments.length === 1 && typeof arg1 === "function")
        return createAction(arg1.name || "<unnamed action>", arg1);
    // action("name", fn() {})
    if (arguments.length === 2 && typeof arg2 === "function")
        return createAction(arg1, arg2);
    // @action("name") fn() {}
    if (arguments.length === 1 && typeof arg1 === "string")
        return namedActionDecorator(arg1);
    // @action fn() {}
    if (arg4 === true) {
        // apply to instance immediately
        addHiddenProp(arg1, arg2, createAction(arg1.name || arg2, arg3.value, this));
    }
    else {
        return namedActionDecorator(arg2).apply(null, arguments);
    }
};
action.bound = boundActionDecorator;
function isAction(thing) {
    return typeof thing === "function" && thing.isMobxAction === true;
}
function defineBoundAction(target, propertyName, fn) {
    addHiddenProp(target, propertyName, createAction(propertyName, fn.bind(target)));
}

/**
 * Creates a named reactive view and keeps it alive, so that the view is always
 * updated if one of the dependencies changes, even when the view is not further used by something else.
 * @param view The reactive view
 * @returns disposer function, which can be used to stop the view from being updated in the future.
 */
function autorun(view, opts) {
    if (opts === void 0) { opts = EMPTY_OBJECT; }
    if (process.env.NODE_ENV !== "production") {
        invariant(typeof view === "function", "Autorun expects a function as first argument");
        invariant(isAction(view) === false, "Autorun does not accept actions since actions are untrackable");
    }
    var name = (opts && opts.name) || view.name || "Autorun@" + getNextId();
    var runSync = !opts.scheduler && !opts.delay;
    var reaction;
    if (runSync) {
        // normal autorun
        reaction = new Reaction(name, function () {
            this.track(reactionRunner);
        }, opts.onError, opts.requiresObservable);
    }
    else {
        var scheduler_1 = createSchedulerFromOptions(opts);
        // debounced autorun
        var isScheduled_1 = false;
        reaction = new Reaction(name, function () {
            if (!isScheduled_1) {
                isScheduled_1 = true;
                scheduler_1(function () {
                    isScheduled_1 = false;
                    if (!reaction.isDisposed)
                        reaction.track(reactionRunner);
                });
            }
        }, opts.onError, opts.requiresObservable);
    }
    function reactionRunner() {
        view(reaction);
    }
    reaction.schedule();
    return reaction.getDisposer();
}
var run = function (f) { return f(); };
function createSchedulerFromOptions(opts) {
    return opts.scheduler
        ? opts.scheduler
        : opts.delay
            ? function (f) { return setTimeout(f, opts.delay); }
            : run;
}

function onBecomeObserved(thing, arg2, arg3) {
    return interceptHook("onBecomeObserved", thing, arg2, arg3);
}
function onBecomeUnobserved(thing, arg2, arg3) {
    return interceptHook("onBecomeUnobserved", thing, arg2, arg3);
}
function interceptHook(hook, thing, arg2, arg3) {
    var atom = typeof arg3 === "function" ? getAtom(thing, arg2) : getAtom(thing);
    var cb = typeof arg3 === "function" ? arg3 : arg2;
    var listenersKey = hook + "Listeners";
    if (atom[listenersKey]) {
        atom[listenersKey].add(cb);
    }
    else {
        atom[listenersKey] = new Set([cb]);
    }
    var orig = atom[hook];
    if (typeof orig !== "function")
        return fail(process.env.NODE_ENV !== "production" && "Not an atom that can be (un)observed");
    return function () {
        var hookListeners = atom[listenersKey];
        if (hookListeners) {
            hookListeners.delete(cb);
            if (hookListeners.size === 0) {
                delete atom[listenersKey];
            }
        }
    };
}

function extendObservable(target, properties, decorators, options) {
    if (process.env.NODE_ENV !== "production") {
        invariant(arguments.length >= 2 && arguments.length <= 4, "'extendObservable' expected 2-4 arguments");
        invariant(typeof target === "object", "'extendObservable' expects an object as first argument");
        invariant(!isObservableMap(target), "'extendObservable' should not be used on maps, use map.merge instead");
    }
    options = asCreateObservableOptions(options);
    var defaultDecorator = getDefaultDecoratorFromObjectOptions(options);
    initializeInstance(target); // Fixes #1740
    asObservableObject(target, options.name, defaultDecorator.enhancer); // make sure object is observable, even without initial props
    if (properties)
        extendObservableObjectWithProperties(target, properties, decorators, defaultDecorator);
    return target;
}
function getDefaultDecoratorFromObjectOptions(options) {
    return options.defaultDecorator || (options.deep === false ? refDecorator : deepDecorator);
}
function extendObservableObjectWithProperties(target, properties, decorators, defaultDecorator) {
    var e_1, _a, e_2, _b;
    if (process.env.NODE_ENV !== "production") {
        invariant(!isObservable(properties), "Extending an object with another observable (object) is not supported. Please construct an explicit propertymap, using `toJS` if need. See issue #540");
        if (decorators) {
            var keys = getPlainObjectKeys(decorators);
            try {
                for (var keys_1 = __values$1(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                    var key = keys_1_1.value;
                    if (!(key in properties))
                        fail("Trying to declare a decorator for unspecified property '" + stringifyKey(key) + "'");
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    }
    startBatch();
    try {
        var keys = ownKeys(properties);
        try {
            for (var keys_2 = __values$1(keys), keys_2_1 = keys_2.next(); !keys_2_1.done; keys_2_1 = keys_2.next()) {
                var key = keys_2_1.value;
                var descriptor = Object.getOwnPropertyDescriptor(properties, key);
                if (process.env.NODE_ENV !== "production") {
                    if (!isPlainObject(properties))
                        fail("'extendObservable' only accepts plain objects as second argument");
                    if (isComputed(descriptor.value))
                        fail("Passing a 'computed' as initial property value is no longer supported by extendObservable. Use a getter or decorator instead");
                }
                var decorator = decorators && key in decorators
                    ? decorators[key]
                    : descriptor.get
                        ? computedDecorator
                        : defaultDecorator;
                if (process.env.NODE_ENV !== "production" && typeof decorator !== "function")
                    fail("Not a valid decorator for '" + stringifyKey(key) + "', got: " + decorator);
                var resultDescriptor = decorator(target, key, descriptor, true);
                if (resultDescriptor // otherwise, assume already applied, due to `applyToInstance`
                )
                    Object.defineProperty(target, key, resultDescriptor);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (keys_2_1 && !keys_2_1.done && (_b = keys_2.return)) _b.call(keys_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
    finally {
        endBatch();
    }
}

function getDependencyTree(thing, property) {
    return nodeToDependencyTree(getAtom(thing, property));
}
function nodeToDependencyTree(node) {
    var result = {
        name: node.name
    };
    if (node.observing && node.observing.length > 0)
        result.dependencies = unique(node.observing).map(nodeToDependencyTree);
    return result;
}

function _isComputed(value, property) {
    if (value === null || value === undefined)
        return false;
    if (property !== undefined) {
        if (isObservableObject(value) === false)
            return false;
        if (!value[$mobx].values.has(property))
            return false;
        var atom = getAtom(value, property);
        return isComputedValue(atom);
    }
    return isComputedValue(value);
}
function isComputed(value) {
    if (arguments.length > 1)
        return fail(process.env.NODE_ENV !== "production" &&
            "isComputed expects only 1 argument. Use isObservableProp to inspect the observability of a property");
    return _isComputed(value);
}

function _isObservable(value, property) {
    if (value === null || value === undefined)
        return false;
    if (property !== undefined) {
        if (process.env.NODE_ENV !== "production" &&
            (isObservableMap(value) || isObservableArray(value)))
            return fail("isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.");
        if (isObservableObject(value)) {
            return value[$mobx].values.has(property);
        }
        return false;
    }
    // For first check, see #701
    return (isObservableObject(value) ||
        !!value[$mobx] ||
        isAtom(value) ||
        isReaction(value) ||
        isComputedValue(value));
}
function isObservable(value) {
    if (arguments.length !== 1)
        fail(process.env.NODE_ENV !== "production" &&
            "isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property");
    return _isObservable(value);
}
function set(obj, key, value) {
    if (arguments.length === 2 && !isObservableSet(obj)) {
        startBatch();
        var values_1 = key;
        try {
            for (var key_1 in values_1)
                set(obj, key_1, values_1[key_1]);
        }
        finally {
            endBatch();
        }
        return;
    }
    if (isObservableObject(obj)) {
        var adm = obj[$mobx];
        var existingObservable = adm.values.get(key);
        if (existingObservable) {
            adm.write(key, value);
        }
        else {
            adm.addObservableProp(key, value, adm.defaultEnhancer);
        }
    }
    else if (isObservableMap(obj)) {
        obj.set(key, value);
    }
    else if (isObservableSet(obj)) {
        obj.add(key);
    }
    else if (isObservableArray(obj)) {
        if (typeof key !== "number")
            key = parseInt(key, 10);
        invariant(key >= 0, "Not a valid index: '" + key + "'");
        startBatch();
        if (key >= obj.length)
            obj.length = key + 1;
        obj[key] = value;
        endBatch();
    }
    else {
        return fail(process.env.NODE_ENV !== "production" &&
            "'set()' can only be used on observable objects, arrays and maps");
    }
}

function trace() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var enterBreakPoint = false;
    if (typeof args[args.length - 1] === "boolean")
        enterBreakPoint = args.pop();
    var derivation = getAtomFromArgs(args);
    if (!derivation) {
        return fail(process.env.NODE_ENV !== "production" &&
            "'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");
    }
    if (derivation.isTracing === TraceMode.NONE) {
        console.log("[mobx.trace] '" + derivation.name + "' tracing enabled");
    }
    derivation.isTracing = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;
}
function getAtomFromArgs(args) {
    switch (args.length) {
        case 0:
            return globalState.trackingDerivation;
        case 1:
            return getAtom(args[0]);
        case 2:
            return getAtom(args[0], args[1]);
    }
}

/**
 * During a transaction no views are updated until the end of the transaction.
 * The transaction will be run synchronously nonetheless.
 *
 * @param action a function that updates some reactive state
 * @returns any value that was returned by the 'action' parameter.
 */
function transaction(action, thisArg) {
    if (thisArg === void 0) { thisArg = undefined; }
    startBatch();
    try {
        return action.apply(thisArg);
    }
    finally {
        endBatch();
    }
}

function getAdm(target) {
    return target[$mobx];
}
function isPropertyKey(val) {
    return typeof val === "string" || typeof val === "number" || typeof val === "symbol";
}
// Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,
// and skip either the internal values map, or the base object with its property descriptors!
var objectProxyTraps = {
    has: function (target, name) {
        if (name === $mobx || name === "constructor" || name === mobxDidRunLazyInitializersSymbol)
            return true;
        var adm = getAdm(target);
        // MWE: should `in` operator be reactive? If not, below code path will be faster / more memory efficient
        // TODO: check performance stats!
        // if (adm.values.get(name as string)) return true
        if (isPropertyKey(name))
            return adm.has(name);
        return name in target;
    },
    get: function (target, name) {
        if (name === $mobx || name === "constructor" || name === mobxDidRunLazyInitializersSymbol)
            return target[name];
        var adm = getAdm(target);
        var observable = adm.values.get(name);
        if (observable instanceof Atom) {
            var result = observable.get();
            if (result === undefined) {
                // This fixes #1796, because deleting a prop that has an
                // undefined value won't retrigger a observer (no visible effect),
                // the autorun wouldn't subscribe to future key changes (see also next comment)
                adm.has(name);
            }
            return result;
        }
        // make sure we start listening to future keys
        // note that we only do this here for optimization
        if (isPropertyKey(name))
            adm.has(name);
        return target[name];
    },
    set: function (target, name, value) {
        if (!isPropertyKey(name))
            return false;
        set(target, name, value);
        return true;
    },
    deleteProperty: function (target, name) {
        if (!isPropertyKey(name))
            return false;
        var adm = getAdm(target);
        adm.remove(name);
        return true;
    },
    ownKeys: function (target) {
        var adm = getAdm(target);
        adm.keysAtom.reportObserved();
        return Reflect.ownKeys(target);
    },
    preventExtensions: function (target) {
        fail("Dynamic observable objects cannot be frozen");
        return false;
    }
};
function createDynamicObservableObject(base) {
    var proxy = new Proxy(base, objectProxyTraps);
    base[$mobx].proxy = proxy;
    return proxy;
}

function hasInterceptors(interceptable) {
    return interceptable.interceptors !== undefined && interceptable.interceptors.length > 0;
}
function registerInterceptor(interceptable, handler) {
    var interceptors = interceptable.interceptors || (interceptable.interceptors = []);
    interceptors.push(handler);
    return once(function () {
        var idx = interceptors.indexOf(handler);
        if (idx !== -1)
            interceptors.splice(idx, 1);
    });
}
function interceptChange(interceptable, change) {
    var prevU = untrackedStart();
    try {
        // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950
        var interceptors = __spread$1((interceptable.interceptors || []));
        for (var i = 0, l = interceptors.length; i < l; i++) {
            change = interceptors[i](change);
            invariant(!change || change.type, "Intercept handlers should return nothing or a change object");
            if (!change)
                break;
        }
        return change;
    }
    finally {
        untrackedEnd(prevU);
    }
}

function hasListeners(listenable) {
    return listenable.changeListeners !== undefined && listenable.changeListeners.length > 0;
}
function registerListener(listenable, handler) {
    var listeners = listenable.changeListeners || (listenable.changeListeners = []);
    listeners.push(handler);
    return once(function () {
        var idx = listeners.indexOf(handler);
        if (idx !== -1)
            listeners.splice(idx, 1);
    });
}
function notifyListeners(listenable, change) {
    var prevU = untrackedStart();
    var listeners = listenable.changeListeners;
    if (!listeners)
        return;
    listeners = listeners.slice();
    for (var i = 0, l = listeners.length; i < l; i++) {
        listeners[i](change);
    }
    untrackedEnd(prevU);
}

var MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859
var arrayTraps = {
    get: function (target, name) {
        if (name === $mobx)
            return target[$mobx];
        if (name === "length")
            return target[$mobx].getArrayLength();
        if (typeof name === "number") {
            return arrayExtensions.get.call(target, name);
        }
        if (typeof name === "string" && !isNaN(name)) {
            return arrayExtensions.get.call(target, parseInt(name));
        }
        if (arrayExtensions.hasOwnProperty(name)) {
            return arrayExtensions[name];
        }
        return target[name];
    },
    set: function (target, name, value) {
        if (name === "length") {
            target[$mobx].setArrayLength(value);
        }
        if (typeof name === "number") {
            arrayExtensions.set.call(target, name, value);
        }
        if (typeof name === "symbol" || isNaN(name)) {
            target[name] = value;
        }
        else {
            // numeric string
            arrayExtensions.set.call(target, parseInt(name), value);
        }
        return true;
    },
    preventExtensions: function (target) {
        fail("Observable arrays cannot be frozen");
        return false;
    }
};
function createObservableArray(initialValues, enhancer, name, owned) {
    if (name === void 0) { name = "ObservableArray@" + getNextId(); }
    if (owned === void 0) { owned = false; }
    var adm = new ObservableArrayAdministration(name, enhancer, owned);
    addHiddenFinalProp(adm.values, $mobx, adm);
    var proxy = new Proxy(adm.values, arrayTraps);
    adm.proxy = proxy;
    if (initialValues && initialValues.length) {
        var prev = allowStateChangesStart(true);
        adm.spliceWithArray(0, 0, initialValues);
        allowStateChangesEnd(prev);
    }
    return proxy;
}
var ObservableArrayAdministration = /** @class */ (function () {
    function ObservableArrayAdministration(name, enhancer, owned) {
        this.owned = owned;
        this.values = [];
        this.proxy = undefined;
        this.lastKnownLength = 0;
        this.atom = new Atom(name || "ObservableArray@" + getNextId());
        this.enhancer = function (newV, oldV) { return enhancer(newV, oldV, name + "[..]"); };
    }
    ObservableArrayAdministration.prototype.dehanceValue = function (value) {
        if (this.dehancer !== undefined)
            return this.dehancer(value);
        return value;
    };
    ObservableArrayAdministration.prototype.dehanceValues = function (values) {
        if (this.dehancer !== undefined && values.length > 0)
            return values.map(this.dehancer);
        return values;
    };
    ObservableArrayAdministration.prototype.intercept = function (handler) {
        return registerInterceptor(this, handler);
    };
    ObservableArrayAdministration.prototype.observe = function (listener, fireImmediately) {
        if (fireImmediately === void 0) { fireImmediately = false; }
        if (fireImmediately) {
            listener({
                object: this.proxy,
                type: "splice",
                index: 0,
                added: this.values.slice(),
                addedCount: this.values.length,
                removed: [],
                removedCount: 0
            });
        }
        return registerListener(this, listener);
    };
    ObservableArrayAdministration.prototype.getArrayLength = function () {
        this.atom.reportObserved();
        return this.values.length;
    };
    ObservableArrayAdministration.prototype.setArrayLength = function (newLength) {
        if (typeof newLength !== "number" || newLength < 0)
            throw new Error("[mobx.array] Out of range: " + newLength);
        var currentLength = this.values.length;
        if (newLength === currentLength)
            return;
        else if (newLength > currentLength) {
            var newItems = new Array(newLength - currentLength);
            for (var i = 0; i < newLength - currentLength; i++)
                newItems[i] = undefined; // No Array.fill everywhere...
            this.spliceWithArray(currentLength, 0, newItems);
        }
        else
            this.spliceWithArray(newLength, currentLength - newLength);
    };
    ObservableArrayAdministration.prototype.updateArrayLength = function (oldLength, delta) {
        if (oldLength !== this.lastKnownLength)
            throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed.");
        this.lastKnownLength += delta;
    };
    ObservableArrayAdministration.prototype.spliceWithArray = function (index, deleteCount, newItems) {
        var _this = this;
        checkIfStateModificationsAreAllowed(this.atom);
        var length = this.values.length;
        if (index === undefined)
            index = 0;
        else if (index > length)
            index = length;
        else if (index < 0)
            index = Math.max(0, length + index);
        if (arguments.length === 1)
            deleteCount = length - index;
        else if (deleteCount === undefined || deleteCount === null)
            deleteCount = 0;
        else
            deleteCount = Math.max(0, Math.min(deleteCount, length - index));
        if (newItems === undefined)
            newItems = EMPTY_ARRAY;
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                object: this.proxy,
                type: "splice",
                index: index,
                removedCount: deleteCount,
                added: newItems
            });
            if (!change)
                return EMPTY_ARRAY;
            deleteCount = change.removedCount;
            newItems = change.added;
        }
        newItems = newItems.length === 0 ? newItems : newItems.map(function (v) { return _this.enhancer(v, undefined); });
        if (process.env.NODE_ENV !== "production") {
            var lengthDelta = newItems.length - deleteCount;
            this.updateArrayLength(length, lengthDelta); // checks if internal array wasn't modified
        }
        var res = this.spliceItemsIntoValues(index, deleteCount, newItems);
        if (deleteCount !== 0 || newItems.length !== 0)
            this.notifyArraySplice(index, newItems, res);
        return this.dehanceValues(res);
    };
    ObservableArrayAdministration.prototype.spliceItemsIntoValues = function (index, deleteCount, newItems) {
        var _a;
        if (newItems.length < MAX_SPLICE_SIZE) {
            return (_a = this.values).splice.apply(_a, __spread$1([index, deleteCount], newItems));
        }
        else {
            var res = this.values.slice(index, index + deleteCount);
            this.values = this.values
                .slice(0, index)
                .concat(newItems, this.values.slice(index + deleteCount));
            return res;
        }
    };
    ObservableArrayAdministration.prototype.notifyArrayChildUpdate = function (index, newValue, oldValue) {
        var notifySpy = !this.owned && isSpyEnabled();
        var notify = hasListeners(this);
        var change = notify || notifySpy
            ? {
                object: this.proxy,
                type: "update",
                index: index,
                newValue: newValue,
                oldValue: oldValue
            }
            : null;
        // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won't
        // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled
        if (notifySpy && process.env.NODE_ENV !== "production")
            spyReportStart(__assign$1(__assign$1({}, change), { name: this.atom.name }));
        this.atom.reportChanged();
        if (notify)
            notifyListeners(this, change);
        if (notifySpy && process.env.NODE_ENV !== "production")
            spyReportEnd();
    };
    ObservableArrayAdministration.prototype.notifyArraySplice = function (index, added, removed) {
        var notifySpy = !this.owned && isSpyEnabled();
        var notify = hasListeners(this);
        var change = notify || notifySpy
            ? {
                object: this.proxy,
                type: "splice",
                index: index,
                removed: removed,
                added: added,
                removedCount: removed.length,
                addedCount: added.length
            }
            : null;
        if (notifySpy && process.env.NODE_ENV !== "production")
            spyReportStart(__assign$1(__assign$1({}, change), { name: this.atom.name }));
        this.atom.reportChanged();
        // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe
        if (notify)
            notifyListeners(this, change);
        if (notifySpy && process.env.NODE_ENV !== "production")
            spyReportEnd();
    };
    return ObservableArrayAdministration;
}());
var arrayExtensions = {
    intercept: function (handler) {
        return this[$mobx].intercept(handler);
    },
    observe: function (listener, fireImmediately) {
        if (fireImmediately === void 0) { fireImmediately = false; }
        var adm = this[$mobx];
        return adm.observe(listener, fireImmediately);
    },
    clear: function () {
        return this.splice(0);
    },
    replace: function (newItems) {
        var adm = this[$mobx];
        return adm.spliceWithArray(0, adm.values.length, newItems);
    },
    /**
     * Converts this array back to a (shallow) javascript structure.
     * For a deep clone use mobx.toJS
     */
    toJS: function () {
        return this.slice();
    },
    toJSON: function () {
        // Used by JSON.stringify
        return this.toJS();
    },
    /*
     * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)
     * since these functions alter the inner structure of the array, the have side effects.
     * Because the have side effects, they should not be used in computed function,
     * and for that reason the do not call dependencyState.notifyObserved
     */
    splice: function (index, deleteCount) {
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        var adm = this[$mobx];
        switch (arguments.length) {
            case 0:
                return [];
            case 1:
                return adm.spliceWithArray(index);
            case 2:
                return adm.spliceWithArray(index, deleteCount);
        }
        return adm.spliceWithArray(index, deleteCount, newItems);
    },
    spliceWithArray: function (index, deleteCount, newItems) {
        var adm = this[$mobx];
        return adm.spliceWithArray(index, deleteCount, newItems);
    },
    push: function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var adm = this[$mobx];
        adm.spliceWithArray(adm.values.length, 0, items);
        return adm.values.length;
    },
    pop: function () {
        return this.splice(Math.max(this[$mobx].values.length - 1, 0), 1)[0];
    },
    shift: function () {
        return this.splice(0, 1)[0];
    },
    unshift: function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var adm = this[$mobx];
        adm.spliceWithArray(0, 0, items);
        return adm.values.length;
    },
    reverse: function () {
        // reverse by default mutates in place before returning the result
        // which makes it both a 'derivation' and a 'mutation'.
        // so we deviate from the default and just make it an dervitation
        if (process.env.NODE_ENV !== "production") {
            console.warn("[mobx] `observableArray.reverse()` will not update the array in place. Use `observableArray.slice().reverse()` to suppress this warning and perform the operation on a copy, or `observableArray.replace(observableArray.slice().reverse())` to reverse & update in place");
        }
        var clone = this.slice();
        return clone.reverse.apply(clone, arguments);
    },
    sort: function (compareFn) {
        // sort by default mutates in place before returning the result
        // which goes against all good practices. Let's not change the array in place!
        if (process.env.NODE_ENV !== "production") {
            console.warn("[mobx] `observableArray.sort()` will not update the array in place. Use `observableArray.slice().sort()` to suppress this warning and perform the operation on a copy, or `observableArray.replace(observableArray.slice().sort())` to sort & update in place");
        }
        var clone = this.slice();
        return clone.sort.apply(clone, arguments);
    },
    remove: function (value) {
        var adm = this[$mobx];
        var idx = adm.dehanceValues(adm.values).indexOf(value);
        if (idx > -1) {
            this.splice(idx, 1);
            return true;
        }
        return false;
    },
    get: function (index) {
        var adm = this[$mobx];
        if (adm) {
            if (index < adm.values.length) {
                adm.atom.reportObserved();
                return adm.dehanceValue(adm.values[index]);
            }
            console.warn("[mobx.array] Attempt to read an array index (" + index + ") that is out of bounds (" + adm.values.length + "). Please check length first. Out of bound indices will not be tracked by MobX");
        }
        return undefined;
    },
    set: function (index, newValue) {
        var adm = this[$mobx];
        var values = adm.values;
        if (index < values.length) {
            // update at index in range
            checkIfStateModificationsAreAllowed(adm.atom);
            var oldValue = values[index];
            if (hasInterceptors(adm)) {
                var change = interceptChange(adm, {
                    type: "update",
                    object: adm.proxy,
                    index: index,
                    newValue: newValue
                });
                if (!change)
                    return;
                newValue = change.newValue;
            }
            newValue = adm.enhancer(newValue, oldValue);
            var changed = newValue !== oldValue;
            if (changed) {
                values[index] = newValue;
                adm.notifyArrayChildUpdate(index, newValue, oldValue);
            }
        }
        else if (index === values.length) {
            // add a new item
            adm.spliceWithArray(index, 0, [newValue]);
        }
        else {
            // out of bounds
            throw new Error("[mobx.array] Index out of bounds, " + index + " is larger than " + values.length);
        }
    }
};
[
    "concat",
    "flat",
    "includes",
    "indexOf",
    "join",
    "lastIndexOf",
    "slice",
    "toString",
    "toLocaleString"
].forEach(function (funcName) {
    // Feature detection (eg flat may not be available)
    if (typeof Array.prototype[funcName] !== "function") {
        return;
    }
    arrayExtensions[funcName] = function () {
        var adm = this[$mobx];
        adm.atom.reportObserved();
        var res = adm.dehanceValues(adm.values);
        return res[funcName].apply(res, arguments);
    };
});
["every", "filter", "find", "findIndex", "flatMap", "forEach", "map", "some"].forEach(function (funcName) {
    // Feature detection (eg flatMap may not be available)
    if (typeof Array.prototype[funcName] !== "function") {
        return;
    }
    arrayExtensions[funcName] = function (callback, thisArg) {
        var _this = this;
        var adm = this[$mobx];
        adm.atom.reportObserved();
        var dehancedValues = adm.dehanceValues(adm.values);
        return dehancedValues[funcName](function (element, index) {
            return callback.call(thisArg, element, index, _this);
        }, thisArg);
    };
});
["reduce", "reduceRight"].forEach(function (funcName) {
    arrayExtensions[funcName] = function (callback, initialValue) {
        var _this = this;
        var adm = this[$mobx];
        adm.atom.reportObserved();
        return adm.values[funcName](function (accumulator, currentValue, index) {
            currentValue = adm.dehanceValue(currentValue);
            return callback(accumulator, currentValue, index, _this);
        }, initialValue);
    };
});
var isObservableArrayAdministration = createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);
function isObservableArray(thing) {
    return isObject$1(thing) && isObservableArrayAdministration(thing[$mobx]);
}

var _a;
var ObservableMapMarker = {};
// just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54
// But: https://github.com/mobxjs/mobx/issues/1556
var ObservableMap = /** @class */ (function () {
    function ObservableMap(initialData, enhancer, name) {
        if (enhancer === void 0) { enhancer = deepEnhancer; }
        if (name === void 0) { name = "ObservableMap@" + getNextId(); }
        this.enhancer = enhancer;
        this.name = name;
        this[_a] = ObservableMapMarker;
        this._keysAtom = createAtom(this.name + ".keys()");
        this[Symbol.toStringTag] = "Map";
        if (typeof Map !== "function") {
            throw new Error("mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js");
        }
        this._data = new Map();
        this._hasMap = new Map();
        this.merge(initialData);
    }
    ObservableMap.prototype._has = function (key) {
        return this._data.has(key);
    };
    ObservableMap.prototype.has = function (key) {
        var _this = this;
        if (!globalState.trackingDerivation)
            return this._has(key);
        var entry = this._hasMap.get(key);
        if (!entry) {
            // todo: replace with atom (breaking change)
            var newEntry = (entry = new ObservableValue(this._has(key), referenceEnhancer, this.name + "." + stringifyKey(key) + "?", false));
            this._hasMap.set(key, newEntry);
            onBecomeUnobserved(newEntry, function () { return _this._hasMap.delete(key); });
        }
        return entry.get();
    };
    ObservableMap.prototype.set = function (key, value) {
        var hasKey = this._has(key);
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                type: hasKey ? "update" : "add",
                object: this,
                newValue: value,
                name: key
            });
            if (!change)
                return this;
            value = change.newValue;
        }
        if (hasKey) {
            this._updateValue(key, value);
        }
        else {
            this._addValue(key, value);
        }
        return this;
    };
    ObservableMap.prototype.delete = function (key) {
        var _this = this;
        checkIfStateModificationsAreAllowed(this._keysAtom);
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                type: "delete",
                object: this,
                name: key
            });
            if (!change)
                return false;
        }
        if (this._has(key)) {
            var notifySpy = isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy
                ? {
                    type: "delete",
                    object: this,
                    oldValue: this._data.get(key).value,
                    name: key
                }
                : null;
            if (notifySpy && process.env.NODE_ENV !== "production")
                spyReportStart(__assign$1(__assign$1({}, change), { name: this.name, key: key }));
            transaction(function () {
                _this._keysAtom.reportChanged();
                _this._updateHasMapEntry(key, false);
                var observable = _this._data.get(key);
                observable.setNewValue(undefined);
                _this._data.delete(key);
            });
            if (notify)
                notifyListeners(this, change);
            if (notifySpy && process.env.NODE_ENV !== "production")
                spyReportEnd();
            return true;
        }
        return false;
    };
    ObservableMap.prototype._updateHasMapEntry = function (key, value) {
        var entry = this._hasMap.get(key);
        if (entry) {
            entry.setNewValue(value);
        }
    };
    ObservableMap.prototype._updateValue = function (key, newValue) {
        var observable = this._data.get(key);
        newValue = observable.prepareNewValue(newValue);
        if (newValue !== globalState.UNCHANGED) {
            var notifySpy = isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy
                ? {
                    type: "update",
                    object: this,
                    oldValue: observable.value,
                    name: key,
                    newValue: newValue
                }
                : null;
            if (notifySpy && process.env.NODE_ENV !== "production")
                spyReportStart(__assign$1(__assign$1({}, change), { name: this.name, key: key }));
            observable.setNewValue(newValue);
            if (notify)
                notifyListeners(this, change);
            if (notifySpy && process.env.NODE_ENV !== "production")
                spyReportEnd();
        }
    };
    ObservableMap.prototype._addValue = function (key, newValue) {
        var _this = this;
        checkIfStateModificationsAreAllowed(this._keysAtom);
        transaction(function () {
            var observable = new ObservableValue(newValue, _this.enhancer, _this.name + "." + stringifyKey(key), false);
            _this._data.set(key, observable);
            newValue = observable.value; // value might have been changed
            _this._updateHasMapEntry(key, true);
            _this._keysAtom.reportChanged();
        });
        var notifySpy = isSpyEnabled();
        var notify = hasListeners(this);
        var change = notify || notifySpy
            ? {
                type: "add",
                object: this,
                name: key,
                newValue: newValue
            }
            : null;
        if (notifySpy && process.env.NODE_ENV !== "production")
            spyReportStart(__assign$1(__assign$1({}, change), { name: this.name, key: key }));
        if (notify)
            notifyListeners(this, change);
        if (notifySpy && process.env.NODE_ENV !== "production")
            spyReportEnd();
    };
    ObservableMap.prototype.get = function (key) {
        if (this.has(key))
            return this.dehanceValue(this._data.get(key).get());
        return this.dehanceValue(undefined);
    };
    ObservableMap.prototype.dehanceValue = function (value) {
        if (this.dehancer !== undefined) {
            return this.dehancer(value);
        }
        return value;
    };
    ObservableMap.prototype.keys = function () {
        this._keysAtom.reportObserved();
        return this._data.keys();
    };
    ObservableMap.prototype.values = function () {
        var self = this;
        var keys = this.keys();
        return makeIterable({
            next: function () {
                var _b = keys.next(), done = _b.done, value = _b.value;
                return {
                    done: done,
                    value: done ? undefined : self.get(value)
                };
            }
        });
    };
    ObservableMap.prototype.entries = function () {
        var self = this;
        var keys = this.keys();
        return makeIterable({
            next: function () {
                var _b = keys.next(), done = _b.done, value = _b.value;
                return {
                    done: done,
                    value: done ? undefined : [value, self.get(value)]
                };
            }
        });
    };
    ObservableMap.prototype[(_a = $mobx, Symbol.iterator)] = function () {
        return this.entries();
    };
    ObservableMap.prototype.forEach = function (callback, thisArg) {
        var e_1, _b;
        try {
            for (var _c = __values$1(this), _d = _c.next(); !_d.done; _d = _c.next()) {
                var _e = __read$1(_d.value, 2), key = _e[0], value = _e[1];
                callback.call(thisArg, value, key, this);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /** Merge another object into this object, returns this. */
    ObservableMap.prototype.merge = function (other) {
        var _this = this;
        if (isObservableMap(other)) {
            other = other.toJS();
        }
        transaction(function () {
            var prev = allowStateChangesStart(true);
            try {
                if (isPlainObject(other))
                    getPlainObjectKeys(other).forEach(function (key) {
                        return _this.set(key, other[key]);
                    });
                else if (Array.isArray(other))
                    other.forEach(function (_b) {
                        var _c = __read$1(_b, 2), key = _c[0], value = _c[1];
                        return _this.set(key, value);
                    });
                else if (isES6Map(other)) {
                    if (other.constructor !== Map)
                        fail("Cannot initialize from classes that inherit from Map: " + other.constructor.name); // prettier-ignore
                    other.forEach(function (value, key) { return _this.set(key, value); });
                }
                else if (other !== null && other !== undefined)
                    fail("Cannot initialize map from " + other);
            }
            finally {
                allowStateChangesEnd(prev);
            }
        });
        return this;
    };
    ObservableMap.prototype.clear = function () {
        var _this = this;
        transaction(function () {
            untracked(function () {
                var e_2, _b;
                try {
                    for (var _c = __values$1(_this.keys()), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var key = _d.value;
                        _this.delete(key);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            });
        });
    };
    ObservableMap.prototype.replace = function (values) {
        var _this = this;
        // Implementation requirements:
        // - respect ordering of replacement map
        // - allow interceptors to run and potentially prevent individual operations
        // - don't recreate observables that already exist in original map (so we don't destroy existing subscriptions)
        // - don't _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)
        // - note that result map may differ from replacement map due to the interceptors
        transaction(function () {
            var e_3, _b, e_4, _c;
            // Convert to map so we can do quick key lookups
            var replacementMap = convertToMap(values);
            var orderedData = new Map();
            // Used for optimization
            var keysReportChangedCalled = false;
            try {
                // Delete keys that don't exist in replacement map
                // if the key deletion is prevented by interceptor
                // add entry at the beginning of the result map
                for (var _d = __values$1(_this._data.keys()), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var key = _e.value;
                    // Concurrently iterating/deleting keys
                    // iterator should handle this correctly
                    if (!replacementMap.has(key)) {
                        var deleted = _this.delete(key);
                        // Was the key removed?
                        if (deleted) {
                            // _keysAtom.reportChanged() was already called
                            keysReportChangedCalled = true;
                        }
                        else {
                            // Delete prevented by interceptor
                            var value = _this._data.get(key);
                            orderedData.set(key, value);
                        }
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                }
                finally { if (e_3) throw e_3.error; }
            }
            try {
                // Merge entries
                for (var _f = __values$1(replacementMap.entries()), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var _h = __read$1(_g.value, 2), key = _h[0], value = _h[1];
                    // We will want to know whether a new key is added
                    var keyExisted = _this._data.has(key);
                    // Add or update value
                    _this.set(key, value);
                    // The addition could have been prevent by interceptor
                    if (_this._data.has(key)) {
                        // The update could have been prevented by interceptor
                        // and also we want to preserve existing values
                        // so use value from _data map (instead of replacement map)
                        var value_1 = _this._data.get(key);
                        orderedData.set(key, value_1);
                        // Was a new key added?
                        if (!keyExisted) {
                            // _keysAtom.reportChanged() was already called
                            keysReportChangedCalled = true;
                        }
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_c = _f.return)) _c.call(_f);
                }
                finally { if (e_4) throw e_4.error; }
            }
            // Check for possible key order change
            if (!keysReportChangedCalled) {
                if (_this._data.size !== orderedData.size) {
                    // If size differs, keys are definitely modified
                    _this._keysAtom.reportChanged();
                }
                else {
                    var iter1 = _this._data.keys();
                    var iter2 = orderedData.keys();
                    var next1 = iter1.next();
                    var next2 = iter2.next();
                    while (!next1.done) {
                        if (next1.value !== next2.value) {
                            _this._keysAtom.reportChanged();
                            break;
                        }
                        next1 = iter1.next();
                        next2 = iter2.next();
                    }
                }
            }
            // Use correctly ordered map
            _this._data = orderedData;
        });
        return this;
    };
    Object.defineProperty(ObservableMap.prototype, "size", {
        get: function () {
            this._keysAtom.reportObserved();
            return this._data.size;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a plain object that represents this map.
     * Note that all the keys being stringified.
     * If there are duplicating keys after converting them to strings, behaviour is undetermined.
     */
    ObservableMap.prototype.toPOJO = function () {
        var e_5, _b;
        var res = {};
        try {
            for (var _c = __values$1(this), _d = _c.next(); !_d.done; _d = _c.next()) {
                var _e = __read$1(_d.value, 2), key = _e[0], value = _e[1];
                // We lie about symbol key types due to https://github.com/Microsoft/TypeScript/issues/1863
                res[typeof key === "symbol" ? key : stringifyKey(key)] = value;
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return res;
    };
    /**
     * Returns a shallow non observable object clone of this map.
     * Note that the values migth still be observable. For a deep clone use mobx.toJS.
     */
    ObservableMap.prototype.toJS = function () {
        return new Map(this);
    };
    ObservableMap.prototype.toJSON = function () {
        // Used by JSON.stringify
        return this.toPOJO();
    };
    ObservableMap.prototype.toString = function () {
        var _this = this;
        return (this.name +
            "[{ " +
            Array.from(this.keys())
                .map(function (key) { return stringifyKey(key) + ": " + ("" + _this.get(key)); })
                .join(", ") +
            " }]");
    };
    /**
     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
     * for callback details
     */
    ObservableMap.prototype.observe = function (listener, fireImmediately) {
        process.env.NODE_ENV !== "production" &&
            invariant(fireImmediately !== true, "`observe` doesn't support fireImmediately=true in combination with maps.");
        return registerListener(this, listener);
    };
    ObservableMap.prototype.intercept = function (handler) {
        return registerInterceptor(this, handler);
    };
    return ObservableMap;
}());
/* 'var' fixes small-build issue */
var isObservableMap = createInstanceofPredicate("ObservableMap", ObservableMap);

var _a$1;
var ObservableSetMarker = {};
var ObservableSet = /** @class */ (function () {
    function ObservableSet(initialData, enhancer, name) {
        if (enhancer === void 0) { enhancer = deepEnhancer; }
        if (name === void 0) { name = "ObservableSet@" + getNextId(); }
        this.name = name;
        this[_a$1] = ObservableSetMarker;
        this._data = new Set();
        this._atom = createAtom(this.name);
        this[Symbol.toStringTag] = "Set";
        if (typeof Set !== "function") {
            throw new Error("mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js");
        }
        this.enhancer = function (newV, oldV) { return enhancer(newV, oldV, name); };
        if (initialData) {
            this.replace(initialData);
        }
    }
    ObservableSet.prototype.dehanceValue = function (value) {
        if (this.dehancer !== undefined) {
            return this.dehancer(value);
        }
        return value;
    };
    ObservableSet.prototype.clear = function () {
        var _this = this;
        transaction(function () {
            untracked(function () {
                var e_1, _b;
                try {
                    for (var _c = __values$1(_this._data.values()), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var value = _d.value;
                        _this.delete(value);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            });
        });
    };
    ObservableSet.prototype.forEach = function (callbackFn, thisArg) {
        var e_2, _b;
        try {
            for (var _c = __values$1(this), _d = _c.next(); !_d.done; _d = _c.next()) {
                var value = _d.value;
                callbackFn.call(thisArg, value, value, this);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    Object.defineProperty(ObservableSet.prototype, "size", {
        get: function () {
            this._atom.reportObserved();
            return this._data.size;
        },
        enumerable: true,
        configurable: true
    });
    ObservableSet.prototype.add = function (value) {
        var _this = this;
        checkIfStateModificationsAreAllowed(this._atom);
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                type: "add",
                object: this,
                newValue: value
            });
            if (!change)
                return this;
            // TODO: ideally, value = change.value would be done here, so that values can be
            // changed by interceptor. Same applies for other Set and Map api's.
        }
        if (!this.has(value)) {
            transaction(function () {
                _this._data.add(_this.enhancer(value, undefined));
                _this._atom.reportChanged();
            });
            var notifySpy = isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy
                ? {
                    type: "add",
                    object: this,
                    newValue: value
                }
                : null;
            if (notifySpy && process.env.NODE_ENV !== "production")
                spyReportStart(change);
            if (notify)
                notifyListeners(this, change);
            if (notifySpy && process.env.NODE_ENV !== "production")
                spyReportEnd();
        }
        return this;
    };
    ObservableSet.prototype.delete = function (value) {
        var _this = this;
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                type: "delete",
                object: this,
                oldValue: value
            });
            if (!change)
                return false;
        }
        if (this.has(value)) {
            var notifySpy = isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy
                ? {
                    type: "delete",
                    object: this,
                    oldValue: value
                }
                : null;
            if (notifySpy && process.env.NODE_ENV !== "production")
                spyReportStart(__assign$1(__assign$1({}, change), { name: this.name }));
            transaction(function () {
                _this._atom.reportChanged();
                _this._data.delete(value);
            });
            if (notify)
                notifyListeners(this, change);
            if (notifySpy && process.env.NODE_ENV !== "production")
                spyReportEnd();
            return true;
        }
        return false;
    };
    ObservableSet.prototype.has = function (value) {
        this._atom.reportObserved();
        return this._data.has(this.dehanceValue(value));
    };
    ObservableSet.prototype.entries = function () {
        var nextIndex = 0;
        var keys = Array.from(this.keys());
        var values = Array.from(this.values());
        return makeIterable({
            next: function () {
                var index = nextIndex;
                nextIndex += 1;
                return index < values.length
                    ? { value: [keys[index], values[index]], done: false }
                    : { done: true };
            }
        });
    };
    ObservableSet.prototype.keys = function () {
        return this.values();
    };
    ObservableSet.prototype.values = function () {
        this._atom.reportObserved();
        var self = this;
        var nextIndex = 0;
        var observableValues = Array.from(this._data.values());
        return makeIterable({
            next: function () {
                return nextIndex < observableValues.length
                    ? { value: self.dehanceValue(observableValues[nextIndex++]), done: false }
                    : { done: true };
            }
        });
    };
    ObservableSet.prototype.replace = function (other) {
        var _this = this;
        if (isObservableSet(other)) {
            other = other.toJS();
        }
        transaction(function () {
            var prev = allowStateChangesStart(true);
            try {
                if (Array.isArray(other)) {
                    _this.clear();
                    other.forEach(function (value) { return _this.add(value); });
                }
                else if (isES6Set(other)) {
                    _this.clear();
                    other.forEach(function (value) { return _this.add(value); });
                }
                else if (other !== null && other !== undefined) {
                    fail("Cannot initialize set from " + other);
                }
            }
            finally {
                allowStateChangesEnd(prev);
            }
        });
        return this;
    };
    ObservableSet.prototype.observe = function (listener, fireImmediately) {
        // TODO 'fireImmediately' can be true?
        process.env.NODE_ENV !== "production" &&
            invariant(fireImmediately !== true, "`observe` doesn't support fireImmediately=true in combination with sets.");
        return registerListener(this, listener);
    };
    ObservableSet.prototype.intercept = function (handler) {
        return registerInterceptor(this, handler);
    };
    ObservableSet.prototype.toJS = function () {
        return new Set(this);
    };
    ObservableSet.prototype.toString = function () {
        return this.name + "[ " + Array.from(this).join(", ") + " ]";
    };
    ObservableSet.prototype[(_a$1 = $mobx, Symbol.iterator)] = function () {
        return this.values();
    };
    return ObservableSet;
}());
var isObservableSet = createInstanceofPredicate("ObservableSet", ObservableSet);

var ObservableObjectAdministration = /** @class */ (function () {
    function ObservableObjectAdministration(target, values, name, defaultEnhancer) {
        if (values === void 0) { values = new Map(); }
        this.target = target;
        this.values = values;
        this.name = name;
        this.defaultEnhancer = defaultEnhancer;
        this.keysAtom = new Atom(name + ".keys");
    }
    ObservableObjectAdministration.prototype.read = function (key) {
        return this.values.get(key).get();
    };
    ObservableObjectAdministration.prototype.write = function (key, newValue) {
        var instance = this.target;
        var observable = this.values.get(key);
        if (observable instanceof ComputedValue) {
            observable.set(newValue);
            return;
        }
        // intercept
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                type: "update",
                object: this.proxy || instance,
                name: key,
                newValue: newValue
            });
            if (!change)
                return;
            newValue = change.newValue;
        }
        newValue = observable.prepareNewValue(newValue);
        // notify spy & observers
        if (newValue !== globalState.UNCHANGED) {
            var notify = hasListeners(this);
            var notifySpy = isSpyEnabled();
            var change = notify || notifySpy
                ? {
                    type: "update",
                    object: this.proxy || instance,
                    oldValue: observable.value,
                    name: key,
                    newValue: newValue
                }
                : null;
            if (notifySpy && process.env.NODE_ENV !== "production")
                spyReportStart(__assign$1(__assign$1({}, change), { name: this.name, key: key }));
            observable.setNewValue(newValue);
            if (notify)
                notifyListeners(this, change);
            if (notifySpy && process.env.NODE_ENV !== "production")
                spyReportEnd();
        }
    };
    ObservableObjectAdministration.prototype.has = function (key) {
        var map = this.pendingKeys || (this.pendingKeys = new Map());
        var entry = map.get(key);
        if (entry)
            return entry.get();
        else {
            var exists = !!this.values.get(key);
            // Possible optimization: Don't have a separate map for non existing keys,
            // but store them in the values map instead, using a special symbol to denote "not existing"
            entry = new ObservableValue(exists, referenceEnhancer, this.name + "." + stringifyKey(key) + "?", false);
            map.set(key, entry);
            return entry.get(); // read to subscribe
        }
    };
    ObservableObjectAdministration.prototype.addObservableProp = function (propName, newValue, enhancer) {
        if (enhancer === void 0) { enhancer = this.defaultEnhancer; }
        var target = this.target;
        assertPropertyConfigurable(target, propName);
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                object: this.proxy || target,
                name: propName,
                type: "add",
                newValue: newValue
            });
            if (!change)
                return;
            newValue = change.newValue;
        }
        var observable = new ObservableValue(newValue, enhancer, this.name + "." + stringifyKey(propName), false);
        this.values.set(propName, observable);
        newValue = observable.value; // observableValue might have changed it
        Object.defineProperty(target, propName, generateObservablePropConfig(propName));
        this.notifyPropertyAddition(propName, newValue);
    };
    ObservableObjectAdministration.prototype.addComputedProp = function (propertyOwner, // where is the property declared?
    propName, options) {
        var target = this.target;
        options.name = options.name || this.name + "." + stringifyKey(propName);
        this.values.set(propName, new ComputedValue(options));
        if (propertyOwner === target || isPropertyConfigurable(propertyOwner, propName))
            Object.defineProperty(propertyOwner, propName, generateComputedPropConfig(propName));
    };
    ObservableObjectAdministration.prototype.remove = function (key) {
        if (!this.values.has(key))
            return;
        var target = this.target;
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                object: this.proxy || target,
                name: key,
                type: "remove"
            });
            if (!change)
                return;
        }
        try {
            startBatch();
            var notify = hasListeners(this);
            var notifySpy = isSpyEnabled();
            var oldObservable = this.values.get(key);
            var oldValue = oldObservable && oldObservable.get();
            oldObservable && oldObservable.set(undefined);
            // notify key and keyset listeners
            this.keysAtom.reportChanged();
            this.values.delete(key);
            if (this.pendingKeys) {
                var entry = this.pendingKeys.get(key);
                if (entry)
                    entry.set(false);
            }
            // delete the prop
            delete this.target[key];
            var change = notify || notifySpy
                ? {
                    type: "remove",
                    object: this.proxy || target,
                    oldValue: oldValue,
                    name: key
                }
                : null;
            if (notifySpy && process.env.NODE_ENV !== "production")
                spyReportStart(__assign$1(__assign$1({}, change), { name: this.name, key: key }));
            if (notify)
                notifyListeners(this, change);
            if (notifySpy && process.env.NODE_ENV !== "production")
                spyReportEnd();
        }
        finally {
            endBatch();
        }
    };
    ObservableObjectAdministration.prototype.illegalAccess = function (owner, propName) {
        /**
         * This happens if a property is accessed through the prototype chain, but the property was
         * declared directly as own property on the prototype.
         *
         * E.g.:
         * class A {
         * }
         * extendObservable(A.prototype, { x: 1 })
         *
         * classB extens A {
         * }
         * console.log(new B().x)
         *
         * It is unclear whether the property should be considered 'static' or inherited.
         * Either use `console.log(A.x)`
         * or: decorate(A, { x: observable })
         *
         * When using decorate, the property will always be redeclared as own property on the actual instance
         */
        console.warn("Property '" + propName + "' of '" + owner + "' was accessed through the prototype chain. Use 'decorate' instead to declare the prop or access it statically through it's owner");
    };
    /**
     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
     * for callback details
     */
    ObservableObjectAdministration.prototype.observe = function (callback, fireImmediately) {
        process.env.NODE_ENV !== "production" &&
            invariant(fireImmediately !== true, "`observe` doesn't support the fire immediately property for observable objects.");
        return registerListener(this, callback);
    };
    ObservableObjectAdministration.prototype.intercept = function (handler) {
        return registerInterceptor(this, handler);
    };
    ObservableObjectAdministration.prototype.notifyPropertyAddition = function (key, newValue) {
        var notify = hasListeners(this);
        var notifySpy = isSpyEnabled();
        var change = notify || notifySpy
            ? {
                type: "add",
                object: this.proxy || this.target,
                name: key,
                newValue: newValue
            }
            : null;
        if (notifySpy && process.env.NODE_ENV !== "production")
            spyReportStart(__assign$1(__assign$1({}, change), { name: this.name, key: key }));
        if (notify)
            notifyListeners(this, change);
        if (notifySpy && process.env.NODE_ENV !== "production")
            spyReportEnd();
        if (this.pendingKeys) {
            var entry = this.pendingKeys.get(key);
            if (entry)
                entry.set(true);
        }
        this.keysAtom.reportChanged();
    };
    ObservableObjectAdministration.prototype.getKeys = function () {
        var e_1, _a;
        this.keysAtom.reportObserved();
        // return Reflect.ownKeys(this.values) as any
        var res = [];
        try {
            for (var _b = __values$1(this.values), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read$1(_c.value, 2), key = _d[0], value = _d[1];
                if (value instanceof ObservableValue)
                    res.push(key);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return res;
    };
    return ObservableObjectAdministration;
}());
function asObservableObject(target, name, defaultEnhancer) {
    if (name === void 0) { name = ""; }
    if (defaultEnhancer === void 0) { defaultEnhancer = deepEnhancer; }
    if (Object.prototype.hasOwnProperty.call(target, $mobx))
        return target[$mobx];
    process.env.NODE_ENV !== "production" &&
        invariant(Object.isExtensible(target), "Cannot make the designated object observable; it is not extensible");
    if (!isPlainObject(target))
        name = (target.constructor.name || "ObservableObject") + "@" + getNextId();
    if (!name)
        name = "ObservableObject@" + getNextId();
    var adm = new ObservableObjectAdministration(target, new Map(), stringifyKey(name), defaultEnhancer);
    addHiddenProp(target, $mobx, adm);
    return adm;
}
var observablePropertyConfigs = Object.create(null);
var computedPropertyConfigs = Object.create(null);
function generateObservablePropConfig(propName) {
    return (observablePropertyConfigs[propName] ||
        (observablePropertyConfigs[propName] = {
            configurable: true,
            enumerable: true,
            get: function () {
                return this[$mobx].read(propName);
            },
            set: function (v) {
                this[$mobx].write(propName, v);
            }
        }));
}
function getAdministrationForComputedPropOwner(owner) {
    var adm = owner[$mobx];
    if (!adm) {
        // because computed props are declared on proty,
        // the current instance might not have been initialized yet
        initializeInstance(owner);
        return owner[$mobx];
    }
    return adm;
}
function generateComputedPropConfig(propName) {
    return (computedPropertyConfigs[propName] ||
        (computedPropertyConfigs[propName] = {
            configurable: globalState.computedConfigurable,
            enumerable: false,
            get: function () {
                return getAdministrationForComputedPropOwner(this).read(propName);
            },
            set: function (v) {
                getAdministrationForComputedPropOwner(this).write(propName, v);
            }
        }));
}
var isObservableObjectAdministration = createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);
function isObservableObject(thing) {
    if (isObject$1(thing)) {
        // Initializers run lazily when transpiling to babel, so make sure they are run...
        initializeInstance(thing);
        return isObservableObjectAdministration(thing[$mobx]);
    }
    return false;
}

function getAtom(thing, property) {
    if (typeof thing === "object" && thing !== null) {
        if (isObservableArray(thing)) {
            if (property !== undefined)
                fail(process.env.NODE_ENV !== "production" &&
                    "It is not possible to get index atoms from arrays");
            return thing[$mobx].atom;
        }
        if (isObservableSet(thing)) {
            return thing[$mobx];
        }
        if (isObservableMap(thing)) {
            var anyThing = thing;
            if (property === undefined)
                return anyThing._keysAtom;
            var observable = anyThing._data.get(property) || anyThing._hasMap.get(property);
            if (!observable)
                fail(process.env.NODE_ENV !== "production" &&
                    "the entry '" + property + "' does not exist in the observable map '" + getDebugName(thing) + "'");
            return observable;
        }
        // Initializers run lazily when transpiling to babel, so make sure they are run...
        initializeInstance(thing);
        if (property && !thing[$mobx])
            thing[property]; // See #1072
        if (isObservableObject(thing)) {
            if (!property)
                return fail(process.env.NODE_ENV !== "production" && "please specify a property");
            var observable = thing[$mobx].values.get(property);
            if (!observable)
                fail(process.env.NODE_ENV !== "production" &&
                    "no observable property '" + property + "' found on the observable object '" + getDebugName(thing) + "'");
            return observable;
        }
        if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
            return thing;
        }
    }
    else if (typeof thing === "function") {
        if (isReaction(thing[$mobx])) {
            // disposer function
            return thing[$mobx];
        }
    }
    return fail(process.env.NODE_ENV !== "production" && "Cannot obtain atom from " + thing);
}
function getAdministration(thing, property) {
    if (!thing)
        fail("Expecting some object");
    if (property !== undefined)
        return getAdministration(getAtom(thing, property));
    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing))
        return thing;
    if (isObservableMap(thing) || isObservableSet(thing))
        return thing;
    // Initializers run lazily when transpiling to babel, so make sure they are run...
    initializeInstance(thing);
    if (thing[$mobx])
        return thing[$mobx];
    fail(process.env.NODE_ENV !== "production" && "Cannot obtain administration from " + thing);
}
function getDebugName(thing, property) {
    var named;
    if (property !== undefined)
        named = getAtom(thing, property);
    else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing))
        named = getAdministration(thing);
    else
        named = getAtom(thing); // valid for arrays as well
    return named.name;
}

var toString = Object.prototype.toString;
function deepEqual(a, b, depth) {
    if (depth === void 0) { depth = -1; }
    return eq(a, b, depth);
}
// Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289
// Internal recursive comparison function for `isEqual`.
function eq(a, b, depth, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b)
        return a !== 0 || 1 / a === 1 / b;
    // `null` or `undefined` only equal to itself (strict comparison).
    if (a == null || b == null)
        return false;
    // `NaN`s are equivalent, but non-reflexive.
    if (a !== a)
        return b !== b;
    // Exhaust primitive checks
    var type = typeof a;
    if (type !== "function" && type !== "object" && typeof b != "object")
        return false;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b))
        return false;
    switch (className) {
        // Strings, numbers, regular expressions, dates, and booleans are compared by value.
        case "[object RegExp]":
        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
        case "[object String]":
            // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
            // equivalent to `new String("5")`.
            return "" + a === "" + b;
        case "[object Number]":
            // `NaN`s are equivalent, but non-reflexive.
            // Object(NaN) is equivalent to NaN.
            if (+a !== +a)
                return +b !== +b;
            // An `egal` comparison is performed for other numeric values.
            return +a === 0 ? 1 / +a === 1 / b : +a === +b;
        case "[object Date]":
        case "[object Boolean]":
            // Coerce dates and booleans to numeric primitive values. Dates are compared by their
            // millisecond representations. Note that invalid dates with millisecond representations
            // of `NaN` are not equivalent.
            return +a === +b;
        case "[object Symbol]":
            return (typeof Symbol !== "undefined" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b));
        case "[object Map]":
        case "[object Set]":
            // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.
            // Hide this extra level by increasing the depth.
            if (depth >= 0) {
                depth++;
            }
            break;
    }
    // Unwrap any wrapped objects.
    a = unwrap(a);
    b = unwrap(b);
    var areArrays = className === "[object Array]";
    if (!areArrays) {
        if (typeof a != "object" || typeof b != "object")
            return false;
        // Objects with different constructors are not equivalent, but `Object`s or `Array`s
        // from different frames are.
        var aCtor = a.constructor, bCtor = b.constructor;
        if (aCtor !== bCtor &&
            !(typeof aCtor === "function" &&
                aCtor instanceof aCtor &&
                typeof bCtor === "function" &&
                bCtor instanceof bCtor) &&
            ("constructor" in a && "constructor" in b)) {
            return false;
        }
    }
    if (depth === 0) {
        return false;
    }
    else if (depth < 0) {
        depth = -1;
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
        // Linear search. Performance is inversely proportional to the number of
        // unique nested structures.
        if (aStack[length] === a)
            return bStack[length] === b;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    // Recursively compare objects and arrays.
    if (areArrays) {
        // Compare array lengths to determine if a deep comparison is necessary.
        length = a.length;
        if (length !== b.length)
            return false;
        // Deep compare the contents, ignoring non-numeric properties.
        while (length--) {
            if (!eq(a[length], b[length], depth - 1, aStack, bStack))
                return false;
        }
    }
    else {
        // Deep compare objects.
        var keys = Object.keys(a);
        var key = void 0;
        length = keys.length;
        // Ensure that both objects contain the same number of properties before comparing deep equality.
        if (Object.keys(b).length !== length)
            return false;
        while (length--) {
            // Deep compare each member
            key = keys[length];
            if (!(has$1(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack)))
                return false;
        }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
}
function unwrap(a) {
    if (isObservableArray(a))
        return a.slice();
    if (isES6Map(a) || isObservableMap(a))
        return Array.from(a.entries());
    if (isES6Set(a) || isObservableSet(a))
        return Array.from(a.entries());
    return a;
}
function has$1(a, key) {
    return Object.prototype.hasOwnProperty.call(a, key);
}

function makeIterable(iterator) {
    iterator[Symbol.iterator] = getSelf;
    return iterator;
}
function getSelf() {
    return this;
}

/**
 * (c) Michel Weststrate 2015 - 2018
 * MIT Licensed
 *
 * Welcome to the mobx sources! To get an global overview of how MobX internally works,
 * this is a good place to start:
 * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74
 *
 * Source folders:
 * ===============
 *
 * - api/     Most of the public static methods exposed by the module can be found here.
 * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.
 * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.
 * - utils/   Utility stuff.
 *
 */
if (typeof Proxy === "undefined" || typeof Symbol === "undefined") {
    throw new Error("[mobx] MobX 5+ requires Proxy and Symbol objects. If your environment doesn't support Symbol or Proxy objects, please downgrade to MobX 4. For React Native Android, consider upgrading JSCore.");
}
try {
    // define process.env if needed
    // if this is not a production build in the first place
    // (in which case the expression below would be substituted with 'production')
    process.env.NODE_ENV;
}
catch (e) {
    var g = getGlobal();
    if (typeof process === "undefined")
        g.process = {};
    g.process.env = {};
}
(function () {
    function testCodeMinification() { }
    if (testCodeMinification.name !== "testCodeMinification" &&
        process.env.NODE_ENV !== "production" &&
        typeof process !== 'undefined' && process.env.IGNORE_MOBX_MINIFY_WARNING !== "true") {
        // trick so it doesn't get replaced
        var varName = ["process", "env", "NODE_ENV"].join(".");
        console.warn("[mobx] you are running a minified build, but '" + varName + "' was not set to 'production' in your bundler. This results in an unnecessarily large and slow bundle");
    }
})();
if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {
    // See: https://github.com/andykog/mobx-devtools/
    __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
        spy: spy,
        extras: {
            getDebugName: getDebugName
        },
        $mobx: $mobx
    });
}

function Helmet(constructor) {
    return class extends constructor {
        connectedCallback() {
            super.connectedCallback();
            const [title] = this.constructor.name.split('Page');
            dispatchEvent(new CustomEvent('helmet', { detail: title }));
        }
    };
}
const formattedLocalCode = (lang) => lang.includes('-')
    ? lang.split('-')[0]
    : lang;
const checkQueryShape = (query) => {
    const [char] = query.split(''); // first character of the query eg: hello각하 = en
    const routines = [
        { shape: 'ko', reg: new RegExp(/[ᄀ-\u11fe\u3130-ㆎ\ua960-\ua97e가-\ud7ae\ud7b0-\ud7fe]/) },
        { shape: 'en', reg: new RegExp(/[\u0000-~]/) },
        { shape: 'cn', reg: new RegExp(/[㐀-\u4dbe一-\u9ffe豈-\ufafe]|\ud87e[\udc00-\ude1e]/) },
        { shape: 'radical', reg: new RegExp(/[⼀-\u2fde]/) }
    ];
    const res = routines.find(routine => routine.reg.test(char));
    return res === undefined ? false : res.shape;
};
const paramsId = () => globalThis.location.href.split('/').reverse()[0];
const adaptiveFontSize = (word) => {
    switch (word.length) {
        case 1:
            return '4.5em';
        case 2:
            return '3.5em';
        case 3:
            return '2.5em';
        case 4:
            return '1.5em';
        default:
            return '1em';
    }
};
const deleteDash = (word) => word[word.length - 1] === '-' ? word.split('-').join('') : word;
const getLang = globalThis.localStorage.getItem('lang');
const setLang = (v) => globalThis.localStorage.setItem('lang', v);
const toDataURL = url => fetch(url)
    .then(response => response.blob())
    .then(blob => new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onloadend = () => resolve(reader.result);
    reader.onerror = reject;
    reader.readAsDataURL(blob);
}));

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Do a deep-copy of basic JavaScript Objects or Arrays.
 */
function deepCopy(value) {
    return deepExtend(undefined, value);
}
/**
 * Copy properties from source to target (recursively allows extension
 * of Objects and Arrays).  Scalar values in the target are over-written.
 * If target is undefined, an object of the appropriate type will be created
 * (and returned).
 *
 * We recursively copy all child properties of plain Objects in the source- so
 * that namespace- like dictionaries are merged.
 *
 * Note that the target can be a function, in which case the properties in
 * the source Object are copied onto it as static properties of the Function.
 *
 * Note: we don't merge __proto__ to prevent prototype pollution
 */
function deepExtend(target, source) {
    if (!(source instanceof Object)) {
        return source;
    }
    switch (source.constructor) {
        case Date:
            // Treat Dates like scalars; if the target date object had any child
            // properties - they will be lost!
            var dateValue = source;
            return new Date(dateValue.getTime());
        case Object:
            if (target === undefined) {
                target = {};
            }
            break;
        case Array:
            // Always copy the array source and overwrite the target.
            target = [];
            break;
        default:
            // Not a plain Object - treat it as a scalar.
            return source;
    }
    for (var prop in source) {
        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202
        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {
            continue;
        }
        target[prop] = deepExtend(target[prop], source[prop]);
    }
    return target;
}
function isValidKey(key) {
    return key !== '__proto__';
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Deferred = /** @class */ (function () {
    function Deferred() {
        var _this = this;
        this.reject = function () { };
        this.resolve = function () { };
        this.promise = new Promise(function (resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        });
    }
    /**
     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
     * and returns a node-style callback which will resolve or reject the Deferred's promise.
     */
    Deferred.prototype.wrapCallback = function (callback) {
        var _this = this;
        return function (error, value) {
            if (error) {
                _this.reject(error);
            }
            else {
                _this.resolve(value);
            }
            if (typeof callback === 'function') {
                // Attaching noop handler just in case developer wasn't expecting
                // promises
                _this.promise.catch(function () { });
                // Some of our callbacks don't expect a value and our own tests
                // assert that the parameter length is 1
                if (callback.length === 1) {
                    callback(error);
                }
                else {
                    callback(error, value);
                }
            }
        };
    };
    return Deferred;
}());

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns navigator.userAgent string or '' if it's not defined.
 * @return user agent string
 */
function getUA() {
    if (typeof navigator !== 'undefined' &&
        typeof navigator['userAgent'] === 'string') {
        return navigator['userAgent'];
    }
    else {
        return '';
    }
}
/**
 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
 *
 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
 * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
 * wait for a callback.
 */
function isMobileCordova() {
    return (typeof window !== 'undefined' &&
        // @ts-ignore Setting up an broadly applicable index signature for Window
        // just to deal with this case would probably be a bad idea.
        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
}
/**
 * Detect Node.js.
 *
 * @return true if Node.js environment is detected.
 */
// Node detection logic from: https://github.com/iliakan/detect-node/
function isNode() {
    try {
        return (Object.prototype.toString.call(global.process) === '[object process]');
    }
    catch (e) {
        return false;
    }
}
/**
 * Detect Browser Environment
 */
function isBrowser() {
    return typeof self === 'object' && self.self === self;
}
function isBrowserExtension() {
    var runtime = typeof chrome === 'object'
        ? chrome.runtime
        : typeof browser === 'object'
            ? browser.runtime
            : undefined;
    return typeof runtime === 'object' && runtime.id !== undefined;
}
/**
 * Detect React Native.
 *
 * @return true if ReactNative environment is detected.
 */
function isReactNative() {
    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
}
/** Detects Electron apps. */
function isElectron() {
    return getUA().indexOf('Electron/') >= 0;
}
/** Detects Internet Explorer. */
function isIE$1() {
    var ua = getUA();
    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
}
/** Detects Universal Windows Platform apps. */
function isUWP() {
    return getUA().indexOf('MSAppHost/') >= 0;
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ERROR_NAME = 'FirebaseError';
// Based on code from:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
var FirebaseError = /** @class */ (function (_super) {
    __extends(FirebaseError, _super);
    function FirebaseError(code, message, customData) {
        var _this = _super.call(this, message) || this;
        _this.code = code;
        _this.customData = customData;
        _this.name = ERROR_NAME;
        // Fix For ES5
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(_this, FirebaseError.prototype);
        // Maintains proper stack trace for where our error was thrown.
        // Only available on V8.
        if (Error.captureStackTrace) {
            Error.captureStackTrace(_this, ErrorFactory.prototype.create);
        }
        return _this;
    }
    return FirebaseError;
}(Error));
var ErrorFactory = /** @class */ (function () {
    function ErrorFactory(service, serviceName, errors) {
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
    }
    ErrorFactory.prototype.create = function (code) {
        var data = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            data[_i - 1] = arguments[_i];
        }
        var customData = data[0] || {};
        var fullCode = this.service + "/" + code;
        var template = this.errors[code];
        var message = template ? replaceTemplate(template, customData) : 'Error';
        // Service Name: Error message (service/code).
        var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
        var error = new FirebaseError(fullCode, fullMessage, customData);
        return error;
    };
    return ErrorFactory;
}());
function replaceTemplate(template, data) {
    return template.replace(PATTERN, function (_, key) {
        var value = data[key];
        return value != null ? String(value) : "<" + key + "?>";
    });
}
var PATTERN = /\{\$([^}]+)}/g;

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function contains(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}

/**
 * Helper to make a Subscribe function (just like Promise helps make a
 * Thenable).
 *
 * @param executor Function which can make calls to a single Observer
 *     as a proxy.
 * @param onNoObservers Callback when count of Observers goes to zero.
 */
function createSubscribe(executor, onNoObservers) {
    var proxy = new ObserverProxy(executor, onNoObservers);
    return proxy.subscribe.bind(proxy);
}
/**
 * Implement fan-out for any number of Observers attached via a subscribe
 * function.
 */
var ObserverProxy = /** @class */ (function () {
    /**
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */
    function ObserverProxy(executor, onNoObservers) {
        var _this = this;
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        // Micro-task scheduling by calling task.then().
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        // Call the executor asynchronously so subscribers that are called
        // synchronously after the creation of the subscribe function
        // can still receive the very first value generated in the executor.
        this.task
            .then(function () {
            executor(_this);
        })
            .catch(function (e) {
            _this.error(e);
        });
    }
    ObserverProxy.prototype.next = function (value) {
        this.forEachObserver(function (observer) {
            observer.next(value);
        });
    };
    ObserverProxy.prototype.error = function (error) {
        this.forEachObserver(function (observer) {
            observer.error(error);
        });
        this.close(error);
    };
    ObserverProxy.prototype.complete = function () {
        this.forEachObserver(function (observer) {
            observer.complete();
        });
        this.close();
    };
    /**
     * Subscribe function that can be used to add an Observer to the fan-out list.
     *
     * - We require that no event is sent to a subscriber sychronously to their
     *   call to subscribe().
     */
    ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
        var _this = this;
        var observer;
        if (nextOrObserver === undefined &&
            error === undefined &&
            complete === undefined) {
            throw new Error('Missing Observer.');
        }
        // Assemble an Observer object when passed as callback functions.
        if (implementsAnyMethods(nextOrObserver, [
            'next',
            'error',
            'complete'
        ])) {
            observer = nextOrObserver;
        }
        else {
            observer = {
                next: nextOrObserver,
                error: error,
                complete: complete
            };
        }
        if (observer.next === undefined) {
            observer.next = noop$1;
        }
        if (observer.error === undefined) {
            observer.error = noop$1;
        }
        if (observer.complete === undefined) {
            observer.complete = noop$1;
        }
        var unsub = this.unsubscribeOne.bind(this, this.observers.length);
        // Attempt to subscribe to a terminated Observable - we
        // just respond to the Observer with the final error or complete
        // event.
        if (this.finalized) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(function () {
                try {
                    if (_this.finalError) {
                        observer.error(_this.finalError);
                    }
                    else {
                        observer.complete();
                    }
                }
                catch (e) {
                    // nothing
                }
                return;
            });
        }
        this.observers.push(observer);
        return unsub;
    };
    // Unsubscribe is synchronous - we guarantee that no events are sent to
    // any unsubscribed Observer.
    ObserverProxy.prototype.unsubscribeOne = function (i) {
        if (this.observers === undefined || this.observers[i] === undefined) {
            return;
        }
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== undefined) {
            this.onNoObservers(this);
        }
    };
    ObserverProxy.prototype.forEachObserver = function (fn) {
        if (this.finalized) {
            // Already closed by previous event....just eat the additional values.
            return;
        }
        // Since sendOne calls asynchronously - there is no chance that
        // this.observers will become undefined.
        for (var i = 0; i < this.observers.length; i++) {
            this.sendOne(i, fn);
        }
    };
    // Call the Observer via one of it's callback function. We are careful to
    // confirm that the observe has not been unsubscribed since this asynchronous
    // function had been queued.
    ObserverProxy.prototype.sendOne = function (i, fn) {
        var _this = this;
        // Execute the callback asynchronously
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(function () {
            if (_this.observers !== undefined && _this.observers[i] !== undefined) {
                try {
                    fn(_this.observers[i]);
                }
                catch (e) {
                    // Ignore exceptions raised in Observers or missing methods of an
                    // Observer.
                    // Log error to console. b/31404806
                    if (typeof console !== 'undefined' && console.error) {
                        console.error(e);
                    }
                }
            }
        });
    };
    ObserverProxy.prototype.close = function (err) {
        var _this = this;
        if (this.finalized) {
            return;
        }
        this.finalized = true;
        if (err !== undefined) {
            this.finalError = err;
        }
        // Proxy is no longer needed - garbage collect references
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(function () {
            _this.observers = undefined;
            _this.onNoObservers = undefined;
        });
    };
    return ObserverProxy;
}());
/**
 * Return true if the object passed in implements any of the named methods.
 */
function implementsAnyMethods(obj, methods) {
    if (typeof obj !== 'object' || obj === null) {
        return false;
    }
    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
        var method = methods_1[_i];
        if (method in obj && typeof obj[method] === 'function') {
            return true;
        }
    }
    return false;
}
function noop$1() {
    // do nothing
}

/**
 * Component for service name T, e.g. `auth`, `auth-internal`
 */
var Component = /** @class */ (function () {
    /**
     *
     * @param name The public service name, e.g. app, auth, firestore, database
     * @param instanceFactory Service factory responsible for creating the public interface
     * @param type whether the service provided by the component is public or private
     */
    function Component(name, instanceFactory, type) {
        this.name = name;
        this.instanceFactory = instanceFactory;
        this.type = type;
        this.multipleInstances = false;
        /**
         * Properties to be added to the service namespace
         */
        this.serviceProps = {};
        this.instantiationMode = "LAZY" /* LAZY */;
    }
    Component.prototype.setInstantiationMode = function (mode) {
        this.instantiationMode = mode;
        return this;
    };
    Component.prototype.setMultipleInstances = function (multipleInstances) {
        this.multipleInstances = multipleInstances;
        return this;
    };
    Component.prototype.setServiceProps = function (props) {
        this.serviceProps = props;
        return this;
    };
    return Component;
}());

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var DEFAULT_ENTRY_NAME = '[DEFAULT]';

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
 * NameServiceMapping[T] is an alias for the type of the instance
 */
var Provider = /** @class */ (function () {
    function Provider(name, container) {
        this.name = name;
        this.container = container;
        this.component = null;
        this.instances = new Map();
        this.instancesDeferred = new Map();
    }
    /**
     * @param identifier A provider can provide mulitple instances of a service
     * if this.component.multipleInstances is true.
     */
    Provider.prototype.get = function (identifier) {
        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }
        // if multipleInstances is not supported, use the default name
        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        if (!this.instancesDeferred.has(normalizedIdentifier)) {
            var deferred = new Deferred();
            this.instancesDeferred.set(normalizedIdentifier, deferred);
            // If the service instance is available, resolve the promise with it immediately
            try {
                var instance = this.getOrInitializeService(normalizedIdentifier);
                if (instance) {
                    deferred.resolve(instance);
                }
            }
            catch (e) {
                // when the instance factory throws an exception during get(), it should not cause
                // a fatal error. We just return the unresolved promise in this case.
            }
        }
        return this.instancesDeferred.get(normalizedIdentifier).promise;
    };
    Provider.prototype.getImmediate = function (options) {
        var _a = __assign({ identifier: DEFAULT_ENTRY_NAME, optional: false }, options), identifier = _a.identifier, optional = _a.optional;
        // if multipleInstances is not supported, use the default name
        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        try {
            var instance = this.getOrInitializeService(normalizedIdentifier);
            if (!instance) {
                if (optional) {
                    return null;
                }
                throw Error("Service " + this.name + " is not available");
            }
            return instance;
        }
        catch (e) {
            if (optional) {
                return null;
            }
            else {
                throw e;
            }
        }
    };
    Provider.prototype.getComponent = function () {
        return this.component;
    };
    Provider.prototype.setComponent = function (component) {
        var e_1, _a;
        if (component.name !== this.name) {
            throw Error("Mismatching Component " + component.name + " for Provider " + this.name + ".");
        }
        if (this.component) {
            throw Error("Component for " + this.name + " has already been provided");
        }
        this.component = component;
        // if the service is eager, initialize the default instance
        if (isComponentEager(component)) {
            try {
                this.getOrInitializeService(DEFAULT_ENTRY_NAME);
            }
            catch (e) {
                // when the instance factory for an eager Component throws an exception during the eager
                // initialization, it should not cause a fatal error.
                // TODO: Investigate if we need to make it configurable, because some component may want to cause
                // a fatal error in this case?
            }
        }
        try {
            // Create service instances for the pending promises and resolve them
            // NOTE: if this.multipleInstances is false, only the default instance will be created
            // and all promises with resolve with it regardless of the identifier.
            for (var _b = __values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];
                var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
                try {
                    // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                    var instance = this.getOrInitializeService(normalizedIdentifier);
                    instanceDeferred.resolve(instance);
                }
                catch (e) {
                    // when the instance factory throws an exception, it should not cause
                    // a fatal error. We just leave the promise unresolved.
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    Provider.prototype.clearInstance = function (identifier) {
        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }
        this.instancesDeferred.delete(identifier);
        this.instances.delete(identifier);
    };
    // app.delete() will call this method on every provider to delete the services
    // TODO: should we mark the provider as deleted?
    Provider.prototype.delete = function () {
        return __awaiter(this, void 0, void 0, function () {
            var services;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        services = Array.from(this.instances.values());
                        return [4 /*yield*/, Promise.all(__spread(services
                                .filter(function (service) { return 'INTERNAL' in service; }) // legacy services
                                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                .map(function (service) { return service.INTERNAL.delete(); }), services
                                .filter(function (service) { return '_delete' in service; }) // modularized services
                                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                .map(function (service) { return service._delete(); })))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Provider.prototype.isComponentSet = function () {
        return this.component != null;
    };
    Provider.prototype.getOrInitializeService = function (identifier) {
        var instance = this.instances.get(identifier);
        if (!instance && this.component) {
            instance = this.component.instanceFactory(this.container, normalizeIdentifierForFactory(identifier));
            this.instances.set(identifier, instance);
        }
        return instance || null;
    };
    Provider.prototype.normalizeInstanceIdentifier = function (identifier) {
        if (this.component) {
            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
        }
        else {
            return identifier; // assume multiple instances are supported before the component is provided.
        }
    };
    return Provider;
}());
// undefined should be passed to the service factory for the default instance
function normalizeIdentifierForFactory(identifier) {
    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;
}
function isComponentEager(component) {
    return component.instantiationMode === "EAGER" /* EAGER */;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
 */
var ComponentContainer = /** @class */ (function () {
    function ComponentContainer(name) {
        this.name = name;
        this.providers = new Map();
    }
    /**
     *
     * @param component Component being added
     * @param overwrite When a component with the same name has already been registered,
     * if overwrite is true: overwrite the existing component with the new component and create a new
     * provider with the new component. It can be useful in tests where you want to use different mocks
     * for different tests.
     * if overwrite is false: throw an exception
     */
    ComponentContainer.prototype.addComponent = function (component) {
        var provider = this.getProvider(component.name);
        if (provider.isComponentSet()) {
            throw new Error("Component " + component.name + " has already been registered with " + this.name);
        }
        provider.setComponent(component);
    };
    ComponentContainer.prototype.addOrOverwriteComponent = function (component) {
        var provider = this.getProvider(component.name);
        if (provider.isComponentSet()) {
            // delete the existing provider from the container, so we can register the new component
            this.providers.delete(component.name);
        }
        this.addComponent(component);
    };
    /**
     * getProvider provides a type safe interface where it can only be called with a field name
     * present in NameServiceMapping interface.
     *
     * Firebase SDKs providing services should extend NameServiceMapping interface to register
     * themselves.
     */
    ComponentContainer.prototype.getProvider = function (name) {
        if (this.providers.has(name)) {
            return this.providers.get(name);
        }
        // create a Provider for a service that hasn't registered with Firebase
        var provider = new Provider(name, this);
        this.providers.set(name, provider);
        return provider;
    };
    ComponentContainer.prototype.getProviders = function () {
        return Array.from(this.providers.values());
    };
    return ComponentContainer;
}());

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __spreadArrays$1() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _a$2;
/**
 * A container for all of the Logger instances
 */
var instances = [];
/**
 * The JS SDK supports 5 log levels and also allows a user the ability to
 * silence the logs altogether.
 *
 * The order is a follows:
 * DEBUG < VERBOSE < INFO < WARN < ERROR
 *
 * All of the log types above the current log level will be captured (i.e. if
 * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
 * `VERBOSE` logs will not)
 */
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["WARN"] = 3] = "WARN";
    LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
    LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
})(LogLevel || (LogLevel = {}));
var levelStringToEnum = {
    'debug': LogLevel.DEBUG,
    'verbose': LogLevel.VERBOSE,
    'info': LogLevel.INFO,
    'warn': LogLevel.WARN,
    'error': LogLevel.ERROR,
    'silent': LogLevel.SILENT
};
/**
 * The default log level
 */
var defaultLogLevel = LogLevel.INFO;
/**
 * By default, `console.debug` is not displayed in the developer console (in
 * chrome). To avoid forcing users to have to opt-in to these logs twice
 * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
 * logs to the `console.log` function.
 */
var ConsoleMethod = (_a$2 = {},
    _a$2[LogLevel.DEBUG] = 'log',
    _a$2[LogLevel.VERBOSE] = 'log',
    _a$2[LogLevel.INFO] = 'info',
    _a$2[LogLevel.WARN] = 'warn',
    _a$2[LogLevel.ERROR] = 'error',
    _a$2);
/**
 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
 * messages on to their corresponding console counterparts (if the log method
 * is supported by the current log level)
 */
var defaultLogHandler = function (instance, logType) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    if (logType < instance.logLevel) {
        return;
    }
    var now = new Date().toISOString();
    var method = ConsoleMethod[logType];
    if (method) {
        console[method].apply(console, __spreadArrays$1(["[" + now + "]  " + instance.name + ":"], args));
    }
    else {
        throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
    }
};
var Logger = /** @class */ (function () {
    /**
     * Gives you an instance of a Logger to capture messages according to
     * Firebase's logging scheme.
     *
     * @param name The name that the logs will be associated with
     */
    function Logger(name) {
        this.name = name;
        /**
         * The log level of the given Logger instance.
         */
        this._logLevel = defaultLogLevel;
        /**
         * The main (internal) log handler for the Logger instance.
         * Can be set to a new function in internal package code but not by user.
         */
        this._logHandler = defaultLogHandler;
        /**
         * The optional, additional, user-defined log handler for the Logger instance.
         */
        this._userLogHandler = null;
        /**
         * Capture the current instance for later use
         */
        instances.push(this);
    }
    Object.defineProperty(Logger.prototype, "logLevel", {
        get: function () {
            return this._logLevel;
        },
        set: function (val) {
            if (!(val in LogLevel)) {
                throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
            }
            this._logLevel = val;
        },
        enumerable: false,
        configurable: true
    });
    // Workaround for setter/getter having to be the same type.
    Logger.prototype.setLogLevel = function (val) {
        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
    };
    Object.defineProperty(Logger.prototype, "logHandler", {
        get: function () {
            return this._logHandler;
        },
        set: function (val) {
            if (typeof val !== 'function') {
                throw new TypeError('Value assigned to `logHandler` must be a function');
            }
            this._logHandler = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "userLogHandler", {
        get: function () {
            return this._userLogHandler;
        },
        set: function (val) {
            this._userLogHandler = val;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * The functions below are all based on the `console` interface
     */
    Logger.prototype.debug = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.DEBUG], args));
        this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.DEBUG], args));
    };
    Logger.prototype.log = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.VERBOSE], args));
        this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.VERBOSE], args));
    };
    Logger.prototype.info = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.INFO], args));
        this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.INFO], args));
    };
    Logger.prototype.warn = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.WARN], args));
        this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.WARN], args));
    };
    Logger.prototype.error = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.ERROR], args));
        this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.ERROR], args));
    };
    return Logger;
}());
function setLogLevel(level) {
    instances.forEach(function (inst) {
        inst.setLogLevel(level);
    });
}
function setUserLogHandler(logCallback, options) {
    var _loop_1 = function (instance) {
        var customLogLevel = null;
        if (options && options.level) {
            customLogLevel = levelStringToEnum[options.level];
        }
        if (logCallback === null) {
            instance.userLogHandler = null;
        }
        else {
            instance.userLogHandler = function (instance, level) {
                var args = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    args[_i - 2] = arguments[_i];
                }
                var message = args
                    .map(function (arg) {
                    if (arg == null) {
                        return null;
                    }
                    else if (typeof arg === 'string') {
                        return arg;
                    }
                    else if (typeof arg === 'number' || typeof arg === 'boolean') {
                        return arg.toString();
                    }
                    else if (arg instanceof Error) {
                        return arg.message;
                    }
                    else {
                        try {
                            return JSON.stringify(arg);
                        }
                        catch (ignored) {
                            return null;
                        }
                    }
                })
                    .filter(function (arg) { return arg; })
                    .join(' ');
                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {
                    logCallback({
                        level: LogLevel[level].toLowerCase(),
                        message: message,
                        args: args,
                        type: instance.name
                    });
                }
            };
        }
    };
    for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {
        var instance = instances_1[_i];
        _loop_1(instance);
    }
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _a$3;
var ERRORS = (_a$3 = {},
    _a$3["no-app" /* NO_APP */] = "No Firebase App '{$appName}' has been created - " +
        'call Firebase App.initializeApp()',
    _a$3["bad-app-name" /* BAD_APP_NAME */] = "Illegal App name: '{$appName}",
    _a$3["duplicate-app" /* DUPLICATE_APP */] = "Firebase App named '{$appName}' already exists",
    _a$3["app-deleted" /* APP_DELETED */] = "Firebase App named '{$appName}' already deleted",
    _a$3["invalid-app-argument" /* INVALID_APP_ARGUMENT */] = 'firebase.{$appName}() takes either no argument or a ' +
        'Firebase App instance.',
    _a$3["invalid-log-argument" /* INVALID_LOG_ARGUMENT */] = 'First argument to `onLog` must be null or a function.',
    _a$3);
var ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);

var name$1 = "@firebase/app";
var version = "0.6.13";

var name$2 = "@firebase/analytics";

var name$3 = "@firebase/auth";

var name$4 = "@firebase/database";

var name$5 = "@firebase/functions";

var name$6 = "@firebase/installations";

var name$7 = "@firebase/messaging";

var name$8 = "@firebase/performance";

var name$9 = "@firebase/remote-config";

var name$a = "@firebase/storage";

var name$b = "@firebase/firestore";

var name$c = "firebase-wrapper";

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _a$1$1;
var DEFAULT_ENTRY_NAME$1 = '[DEFAULT]';
var PLATFORM_LOG_STRING = (_a$1$1 = {},
    _a$1$1[name$1] = 'fire-core',
    _a$1$1[name$2] = 'fire-analytics',
    _a$1$1[name$3] = 'fire-auth',
    _a$1$1[name$4] = 'fire-rtdb',
    _a$1$1[name$5] = 'fire-fn',
    _a$1$1[name$6] = 'fire-iid',
    _a$1$1[name$7] = 'fire-fcm',
    _a$1$1[name$8] = 'fire-perf',
    _a$1$1[name$9] = 'fire-rc',
    _a$1$1[name$a] = 'fire-gcs',
    _a$1$1[name$b] = 'fire-fst',
    _a$1$1['fire-js'] = 'fire-js',
    _a$1$1[name$c] = 'fire-js-all',
    _a$1$1);

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var logger = new Logger('@firebase/app');

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Global context object for a collection of services using
 * a shared authentication state.
 */
var FirebaseAppImpl = /** @class */ (function () {
    function FirebaseAppImpl(options, config, firebase_) {
        var e_1, _a;
        var _this = this;
        this.firebase_ = firebase_;
        this.isDeleted_ = false;
        this.name_ = config.name;
        this.automaticDataCollectionEnabled_ =
            config.automaticDataCollectionEnabled || false;
        this.options_ = deepCopy(options);
        this.container = new ComponentContainer(config.name);
        // add itself to container
        this._addComponent(new Component('app', function () { return _this; }, "PUBLIC" /* PUBLIC */));
        try {
            // populate ComponentContainer with existing components
            for (var _b = __values(this.firebase_.INTERNAL.components.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var component = _c.value;
                this._addComponent(component);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    Object.defineProperty(FirebaseAppImpl.prototype, "automaticDataCollectionEnabled", {
        get: function () {
            this.checkDestroyed_();
            return this.automaticDataCollectionEnabled_;
        },
        set: function (val) {
            this.checkDestroyed_();
            this.automaticDataCollectionEnabled_ = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FirebaseAppImpl.prototype, "name", {
        get: function () {
            this.checkDestroyed_();
            return this.name_;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FirebaseAppImpl.prototype, "options", {
        get: function () {
            this.checkDestroyed_();
            return this.options_;
        },
        enumerable: false,
        configurable: true
    });
    FirebaseAppImpl.prototype.delete = function () {
        var _this = this;
        return new Promise(function (resolve) {
            _this.checkDestroyed_();
            resolve();
        })
            .then(function () {
            _this.firebase_.INTERNAL.removeApp(_this.name_);
            return Promise.all(_this.container.getProviders().map(function (provider) { return provider.delete(); }));
        })
            .then(function () {
            _this.isDeleted_ = true;
        });
    };
    /**
     * Return a service instance associated with this app (creating it
     * on demand), identified by the passed instanceIdentifier.
     *
     * NOTE: Currently storage and functions are the only ones that are leveraging this
     * functionality. They invoke it by calling:
     *
     * ```javascript
     * firebase.app().storage('STORAGE BUCKET ID')
     * ```
     *
     * The service name is passed to this already
     * @internal
     */
    FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {
        if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME$1; }
        this.checkDestroyed_();
        // getImmediate will always succeed because _getService is only called for registered components.
        return this.container.getProvider(name).getImmediate({
            identifier: instanceIdentifier
        });
    };
    /**
     * Remove a service instance from the cache, so we will create a new instance for this service
     * when people try to get this service again.
     *
     * NOTE: currently only firestore is using this functionality to support firestore shutdown.
     *
     * @param name The service name
     * @param instanceIdentifier instance identifier in case multiple instances are allowed
     * @internal
     */
    FirebaseAppImpl.prototype._removeServiceInstance = function (name, instanceIdentifier) {
        if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME$1; }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.container.getProvider(name).clearInstance(instanceIdentifier);
    };
    /**
     * @param component the component being added to this app's container
     */
    FirebaseAppImpl.prototype._addComponent = function (component) {
        try {
            this.container.addComponent(component);
        }
        catch (e) {
            logger.debug("Component " + component.name + " failed to register with FirebaseApp " + this.name, e);
        }
    };
    FirebaseAppImpl.prototype._addOrOverwriteComponent = function (component) {
        this.container.addOrOverwriteComponent(component);
    };
    /**
     * This function will throw an Error if the App has already been deleted -
     * use before performing API actions on the App.
     */
    FirebaseAppImpl.prototype.checkDestroyed_ = function () {
        if (this.isDeleted_) {
            throw ERROR_FACTORY.create("app-deleted" /* APP_DELETED */, { appName: this.name_ });
        }
    };
    return FirebaseAppImpl;
}());
// Prevent dead-code elimination of these methods w/o invalid property
// copying.
(FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||
    FirebaseAppImpl.prototype.delete ||
    console.log('dc');

var version$1 = "8.0.1";

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Because auth can't share code with other components, we attach the utility functions
 * in an internal namespace to share code.
 * This function return a firebase namespace object without
 * any utility functions, so it can be shared between the regular firebaseNamespace and
 * the lite version.
 */
function createFirebaseNamespaceCore(firebaseAppImpl) {
    var apps = {};
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var components = new Map();
    // A namespace is a plain JavaScript Object.
    var namespace = {
        // Hack to prevent Babel from modifying the object returned
        // as the firebase namespace.
        // @ts-ignore
        __esModule: true,
        initializeApp: initializeApp,
        // @ts-ignore
        app: app,
        registerVersion: registerVersion,
        setLogLevel: setLogLevel,
        onLog: onLog,
        // @ts-ignore
        apps: null,
        SDK_VERSION: version$1,
        INTERNAL: {
            registerComponent: registerComponent,
            removeApp: removeApp,
            components: components,
            useAsService: useAsService
        }
    };
    // Inject a circular default export to allow Babel users who were previously
    // using:
    //
    //   import firebase from 'firebase';
    //   which becomes: var firebase = require('firebase').default;
    //
    // instead of
    //
    //   import * as firebase from 'firebase';
    //   which becomes: var firebase = require('firebase');
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    namespace['default'] = namespace;
    // firebase.apps is a read-only getter.
    Object.defineProperty(namespace, 'apps', {
        get: getApps
    });
    /**
     * Called by App.delete() - but before any services associated with the App
     * are deleted.
     */
    function removeApp(name) {
        delete apps[name];
    }
    /**
     * Get the App object for a given name (or DEFAULT).
     */
    function app(name) {
        name = name || DEFAULT_ENTRY_NAME$1;
        if (!contains(apps, name)) {
            throw ERROR_FACTORY.create("no-app" /* NO_APP */, { appName: name });
        }
        return apps[name];
    }
    // @ts-ignore
    app['App'] = firebaseAppImpl;
    function initializeApp(options, rawConfig) {
        if (rawConfig === void 0) { rawConfig = {}; }
        if (typeof rawConfig !== 'object' || rawConfig === null) {
            var name_1 = rawConfig;
            rawConfig = { name: name_1 };
        }
        var config = rawConfig;
        if (config.name === undefined) {
            config.name = DEFAULT_ENTRY_NAME$1;
        }
        var name = config.name;
        if (typeof name !== 'string' || !name) {
            throw ERROR_FACTORY.create("bad-app-name" /* BAD_APP_NAME */, {
                appName: String(name)
            });
        }
        if (contains(apps, name)) {
            throw ERROR_FACTORY.create("duplicate-app" /* DUPLICATE_APP */, { appName: name });
        }
        var app = new firebaseAppImpl(options, config, namespace);
        apps[name] = app;
        return app;
    }
    /*
     * Return an array of all the non-deleted FirebaseApps.
     */
    function getApps() {
        // Make a copy so caller cannot mutate the apps list.
        return Object.keys(apps).map(function (name) { return apps[name]; });
    }
    function registerComponent(component) {
        var e_1, _a;
        var componentName = component.name;
        if (components.has(componentName)) {
            logger.debug("There were multiple attempts to register component " + componentName + ".");
            return component.type === "PUBLIC" /* PUBLIC */
                ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    namespace[componentName]
                : null;
        }
        components.set(componentName, component);
        // create service namespace for public components
        if (component.type === "PUBLIC" /* PUBLIC */) {
            // The Service namespace is an accessor function ...
            var serviceNamespace = function (appArg) {
                if (appArg === void 0) { appArg = app(); }
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                if (typeof appArg[componentName] !== 'function') {
                    // Invalid argument.
                    // This happens in the following case: firebase.storage('gs:/')
                    throw ERROR_FACTORY.create("invalid-app-argument" /* INVALID_APP_ARGUMENT */, {
                        appName: componentName
                    });
                }
                // Forward service instance lookup to the FirebaseApp.
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                return appArg[componentName]();
            };
            // ... and a container for service-level properties.
            if (component.serviceProps !== undefined) {
                deepExtend(serviceNamespace, component.serviceProps);
            }
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            namespace[componentName] = serviceNamespace;
            // Patch the FirebaseAppImpl prototype
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            firebaseAppImpl.prototype[componentName] =
                // TODO: The eslint disable can be removed and the 'ignoreRestArgs'
                // option added to the no-explicit-any rule when ESlint releases it.
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    var serviceFxn = this._getService.bind(this, componentName);
                    return serviceFxn.apply(this, component.multipleInstances ? args : []);
                };
        }
        try {
            // add the component to existing app instances
            for (var _b = __values(Object.keys(apps)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var appName = _c.value;
                apps[appName]._addComponent(component);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return component.type === "PUBLIC" /* PUBLIC */
            ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
                namespace[componentName]
            : null;
    }
    function registerVersion(libraryKeyOrName, version, variant) {
        var _a;
        // TODO: We can use this check to whitelist strings when/if we set up
        // a good whitelist system.
        var library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
        if (variant) {
            library += "-" + variant;
        }
        var libraryMismatch = library.match(/\s|\//);
        var versionMismatch = version.match(/\s|\//);
        if (libraryMismatch || versionMismatch) {
            var warning = [
                "Unable to register library \"" + library + "\" with version \"" + version + "\":"
            ];
            if (libraryMismatch) {
                warning.push("library name \"" + library + "\" contains illegal characters (whitespace or \"/\")");
            }
            if (libraryMismatch && versionMismatch) {
                warning.push('and');
            }
            if (versionMismatch) {
                warning.push("version name \"" + version + "\" contains illegal characters (whitespace or \"/\")");
            }
            logger.warn(warning.join(' '));
            return;
        }
        registerComponent(new Component(library + "-version", function () { return ({ library: library, version: version }); }, "VERSION" /* VERSION */));
    }
    function onLog(logCallback, options) {
        if (logCallback !== null && typeof logCallback !== 'function') {
            throw ERROR_FACTORY.create("invalid-log-argument" /* INVALID_LOG_ARGUMENT */, {
                appName: name
            });
        }
        setUserLogHandler(logCallback, options);
    }
    // Map the requested service to a registered service name
    // (used to map auth to serverAuth service when needed).
    function useAsService(app, name) {
        if (name === 'serverAuth') {
            return null;
        }
        var useService = name;
        return useService;
    }
    return namespace;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Return a firebase namespace object.
 *
 * In production, this will be called exactly once and the result
 * assigned to the 'firebase' global.  It may be called multiple times
 * in unit tests.
 */
function createFirebaseNamespace() {
    var namespace = createFirebaseNamespaceCore(FirebaseAppImpl);
    namespace.INTERNAL = __assign(__assign({}, namespace.INTERNAL), { createFirebaseNamespace: createFirebaseNamespace,
        extendNamespace: extendNamespace,
        createSubscribe: createSubscribe,
        ErrorFactory: ErrorFactory,
        deepExtend: deepExtend });
    /**
     * Patch the top-level firebase namespace with additional properties.
     *
     * firebase.INTERNAL.extendNamespace()
     */
    function extendNamespace(props) {
        deepExtend(namespace, props);
    }
    return namespace;
}
var firebase = createFirebaseNamespace();

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var PlatformLoggerService = /** @class */ (function () {
    function PlatformLoggerService(container) {
        this.container = container;
    }
    // In initial implementation, this will be called by installations on
    // auth token refresh, and installations will send this string.
    PlatformLoggerService.prototype.getPlatformInfoString = function () {
        var providers = this.container.getProviders();
        // Loop through providers and get library/version pairs from any that are
        // version components.
        return providers
            .map(function (provider) {
            if (isVersionServiceProvider(provider)) {
                var service = provider.getImmediate();
                return service.library + "/" + service.version;
            }
            else {
                return null;
            }
        })
            .filter(function (logString) { return logString; })
            .join(' ');
    };
    return PlatformLoggerService;
}());
/**
 *
 * @param provider check if this provider provides a VersionService
 *
 * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
 * provides VersionService. The provider is not necessarily a 'app-version'
 * provider.
 */
function isVersionServiceProvider(provider) {
    var component = provider.getComponent();
    return (component === null || component === void 0 ? void 0 : component.type) === "VERSION" /* VERSION */;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function registerCoreComponents(firebase, variant) {
    firebase.INTERNAL.registerComponent(new Component('platform-logger', function (container) { return new PlatformLoggerService(container); }, "PRIVATE" /* PRIVATE */));
    // Register `app` package.
    firebase.registerVersion(name$1, version, variant);
    // Register platform SDK identifier (no version).
    firebase.registerVersion('fire-js', '');
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Firebase Lite detection test
// eslint-disable-next-line @typescript-eslint/no-explicit-any
if (isBrowser() && self.firebase !== undefined) {
    logger.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");
    // eslint-disable-next-line
    var sdkVersion = self.firebase.SDK_VERSION;
    if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {
        logger.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ");
    }
}
var initializeApp = firebase.initializeApp;
// TODO: This disable can be removed and the 'ignoreRestArgs' option added to
// the no-explicit-any rule when ESlint releases it.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
firebase.initializeApp = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    // Environment check before initializing app
    // Do the check in initializeApp, so people have a chance to disable it by setting logLevel
    // in @firebase/logger
    if (isNode()) {
        logger.warn("\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the \"main\" field in package.json.\n      \n      If you are using Webpack, you can specify \"main\" as the first item in\n      \"resolve.mainFields\":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the @rollup/plugin-node-resolve plugin and specify \"main\"\n      as the first item in \"mainFields\", e.g. ['main', 'module'].\n      https://github.com/rollup/@rollup/plugin-node-resolve\n      ");
    }
    return initializeApp.apply(undefined, args);
};
var firebase$1 = firebase;
registerCoreComponents(firebase$1);

(function() {/*

 Copyright The Closure Library Authors.
 SPDX-License-Identifier: Apache-2.0
*/
var k,aa="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value);};function ba(a){a=["object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof global&&global,a];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}return globalThis}var ca=ba(this);
function da(a,b){if(b){var c=ca;a=a.split(".");for(var d=0;d<a.length-1;d++){var e=a[d];e in c||(c[e]={});c=c[e];}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&aa(c,a,{configurable:!0,writable:!0,value:b});}}function ea(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}function fa(a){var b="undefined"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:ea(a)}}
da("Promise",function(a){function b(g){this.b=0;this.c=void 0;this.a=[];var h=this.f();try{g(h.resolve,h.reject);}catch(n){h.reject(n);}}function c(){this.a=null;}function d(g){return g instanceof b?g:new b(function(h){h(g);})}if(a)return a;c.prototype.b=function(g){if(null==this.a){this.a=[];var h=this;this.c(function(){h.g();});}this.a.push(g);};var e=ca.setTimeout;c.prototype.c=function(g){e(g,0);};c.prototype.g=function(){for(;this.a&&this.a.length;){var g=this.a;this.a=[];for(var h=0;h<g.length;++h){var n=
g[h];g[h]=null;try{n();}catch(p){this.f(p);}}}this.a=null;};c.prototype.f=function(g){this.c(function(){throw g;});};b.prototype.f=function(){function g(p){return function(v){n||(n=!0,p.call(h,v));}}var h=this,n=!1;return {resolve:g(this.v),reject:g(this.g)}};b.prototype.v=function(g){if(g===this)this.g(new TypeError("A Promise cannot resolve to itself"));else if(g instanceof b)this.o(g);else {a:switch(typeof g){case "object":var h=null!=g;break a;case "function":h=!0;break a;default:h=!1;}h?this.m(g):this.h(g);}};
b.prototype.m=function(g){var h=void 0;try{h=g.then;}catch(n){this.g(n);return}"function"==typeof h?this.u(h,g):this.h(g);};b.prototype.g=function(g){this.i(2,g);};b.prototype.h=function(g){this.i(1,g);};b.prototype.i=function(g,h){if(0!=this.b)throw Error("Cannot settle("+g+", "+h+"): Promise already settled in state"+this.b);this.b=g;this.c=h;this.l();};b.prototype.l=function(){if(null!=this.a){for(var g=0;g<this.a.length;++g)f.b(this.a[g]);this.a=null;}};var f=new c;b.prototype.o=function(g){var h=this.f();
g.Pa(h.resolve,h.reject);};b.prototype.u=function(g,h){var n=this.f();try{g.call(h,n.resolve,n.reject);}catch(p){n.reject(p);}};b.prototype.then=function(g,h){function n(A,Q){return "function"==typeof A?function(xa){try{p(A(xa));}catch(Ad){v(Ad);}}:Q}var p,v,B=new b(function(A,Q){p=A;v=Q;});this.Pa(n(g,p),n(h,v));return B};b.prototype.catch=function(g){return this.then(void 0,g)};b.prototype.Pa=function(g,h){function n(){switch(p.b){case 1:g(p.c);break;case 2:h(p.c);break;default:throw Error("Unexpected state: "+
p.b);}}var p=this;null==this.a?f.b(n):this.a.push(n);};b.resolve=d;b.reject=function(g){return new b(function(h,n){n(g);})};b.race=function(g){return new b(function(h,n){for(var p=fa(g),v=p.next();!v.done;v=p.next())d(v.value).Pa(h,n);})};b.all=function(g){var h=fa(g),n=h.next();return n.done?d([]):new b(function(p,v){function B(xa){return function(Ad){A[xa]=Ad;Q--;0==Q&&p(A);}}var A=[],Q=0;do A.push(void 0),Q++,d(n.value).Pa(B(A.length-1),v),n=h.next();while(!n.done)})};return b});
var ha=ha||{},l=this||self,ia=/^[\w+/_-]+[=]{0,2}$/,ja=null;function ka(a){return (a=a.querySelector&&a.querySelector("script[nonce]"))&&(a=a.nonce||a.getAttribute("nonce"))&&ia.test(a)?a:""}function la(){}function ma(a){var b=typeof a;return "object"!=b?b:a?Array.isArray(a)?"array":b:"null"}function na(a){var b=ma(a);return "array"==b||"object"==b&&"number"==typeof a.length}function oa(a){return "function"==ma(a)}function m(a){var b=typeof a;return "object"==b&&null!=a||"function"==b}
function pa(a){return Object.prototype.hasOwnProperty.call(a,qa)&&a[qa]||(a[qa]=++ra)}var qa="closure_uid_"+(1E9*Math.random()>>>0),ra=0;function sa(a,b,c){return a.call.apply(a.bind,arguments)}function ta(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var e=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(e,d);return a.apply(b,e)}}return function(){return a.apply(b,arguments)}}
function q(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?q=sa:q=ta;return q.apply(null,arguments)}function ua(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var d=c.slice();d.push.apply(d,arguments);return a.apply(this,d)}}var va=Date.now;function r(a,b){function c(){}c.prototype=b.prototype;a.$a=b.prototype;a.prototype=new c;a.prototype.constructor=a;}function wa(a){return a}function t(a,b,c){this.code=ya+a;this.message=b||za[a]||"";this.a=c||null;}r(t,Error);t.prototype.w=function(){var a={code:this.code,message:this.message};this.a&&(a.serverResponse=this.a);return a};t.prototype.toJSON=function(){return this.w()};function Aa(a){var b=a&&a.code;return b?new t(b.substring(ya.length),a.message,a.serverResponse):null}
var ya="auth/",za={"admin-restricted-operation":"This operation is restricted to administrators only.","argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.",
"captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.",
"requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-change-needs-verification":"Multi-factor users must always have a verified email.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.",
"internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.",
"invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.",
"invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-dynamic-link-domain":"The provided dynamic link domain is not configured or authorized for the current project.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.",
"invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-multi-factor-session":"The request does not contain a valid proof of first factor successful sign-in.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.",
"unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",
"invalid-provider-id":"The specified provider ID is invalid.","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","invalid-tenant-id":"The Auth instance's tenant ID is invalid.",
"multi-factor-info-not-found":"The user does not have a second factor matching the identifier provided.","multi-factor-auth-required":"Proof of ownership of a second factor is required to complete sign-in.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.",
"missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-multi-factor-info":"No second factor identifier is provided.","missing-multi-factor-session":"The request is missing proof of first factor successful sign-in.","missing-or-invalid-nonce":"The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.",
"missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.",
"no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.",
"rejected-credential":"The request contains malformed or mismatching credentials.","second-factor-already-in-use":"The second factor is already enrolled on this account.","maximum-second-factor-count-exceeded":"The maximum allowed number of second factors on a user has been exceeded.","tenant-id-mismatch":"The provided tenant ID does not match the Auth instance's tenant ID",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.",
"too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-first-factor":"Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","unsupported-tenant-operation":"This operation is not supported in a multi-tenant context.",
"unverified-email":"The operation requires a verified email.","user-cancelled":"The user did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.",
"web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."};/*

 Copyright 2017 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
var Ba={kd:{Sa:"https://staging-identitytoolkit.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",Ya:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Va:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"b"},rd:{Sa:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",Ya:"https://securetoken.googleapis.com/v1/token",Va:"https://identitytoolkit.googleapis.com/v2/",id:"p"},td:{Sa:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",
Ya:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Va:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"s"},ud:{Sa:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",Ya:"https://test-securetoken.sandbox.googleapis.com/v1/token",Va:"https://test-identitytoolkit.sandbox.googleapis.com/v2/",id:"t"}};
function Ca(a){for(var b in Ba)if(Ba[b].id===a)return a=Ba[b],{firebaseEndpoint:a.Sa,secureTokenEndpoint:a.Ya,identityPlatformEndpoint:a.Va};return null}var Da;Da=Ca("__EID__")?"__EID__":void 0;function Ea(a){if(!a)return !1;try{return !!a.$goog_Thenable}catch(b){return !1}}function u(a){if(Error.captureStackTrace)Error.captureStackTrace(this,u);else {var b=Error().stack;b&&(this.stack=b);}a&&(this.message=String(a));}r(u,Error);u.prototype.name="CustomError";function Fa(a,b){a=a.split("%s");for(var c="",d=a.length-1,e=0;e<d;e++)c+=a[e]+(e<b.length?b[e]:"%s");u.call(this,c+a[d]);}r(Fa,u);Fa.prototype.name="AssertionError";function Ga(a,b){throw new Fa("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1));}function Ha(a,b){this.c=a;this.f=b;this.b=0;this.a=null;}Ha.prototype.get=function(){if(0<this.b){this.b--;var a=this.a;this.a=a.next;a.next=null;}else a=this.c();return a};function Ia(a,b){a.f(b);100>a.b&&(a.b++,b.next=a.a,a.a=b);}function Ja(){this.b=this.a=null;}var La=new Ha(function(){return new Ka},function(a){a.reset();});Ja.prototype.add=function(a,b){var c=La.get();c.set(a,b);this.b?this.b.next=c:this.a=c;this.b=c;};function Ma(){var a=Na,b=null;a.a&&(b=a.a,a.a=a.a.next,a.a||(a.b=null),b.next=null);return b}function Ka(){this.next=this.b=this.a=null;}Ka.prototype.set=function(a,b){this.a=a;this.b=b;this.next=null;};Ka.prototype.reset=function(){this.next=this.b=this.a=null;};var Oa=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if("string"===typeof a)return "string"!==typeof b||1!=b.length?-1:a.indexOf(b,0);for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return -1},w=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c);}:function(a,b,c){for(var d=a.length,e="string"===typeof a?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a);};
function Pa(a,b){for(var c="string"===typeof a?a.split(""):a,d=a.length-1;0<=d;--d)d in c&&b.call(void 0,c[d],d,a);}
var Qa=Array.prototype.filter?function(a,b){return Array.prototype.filter.call(a,b,void 0)}:function(a,b){for(var c=a.length,d=[],e=0,f="string"===typeof a?a.split(""):a,g=0;g<c;g++)if(g in f){var h=f[g];b.call(void 0,h,g,a)&&(d[e++]=h);}return d},Ra=Array.prototype.map?function(a,b){return Array.prototype.map.call(a,b,void 0)}:function(a,b){for(var c=a.length,d=Array(c),e="string"===typeof a?a.split(""):a,f=0;f<c;f++)f in e&&(d[f]=b.call(void 0,e[f],f,a));return d},Sa=Array.prototype.some?function(a,
b){return Array.prototype.some.call(a,b,void 0)}:function(a,b){for(var c=a.length,d="string"===typeof a?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a))return !0;return !1};function Ta(a){a:{var b=Ua;for(var c=a.length,d="string"===typeof a?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1;}return 0>b?null:"string"===typeof a?a.charAt(b):a[b]}function Va(a,b){return 0<=Oa(a,b)}
function Wa(a,b){b=Oa(a,b);var c;(c=0<=b)&&Array.prototype.splice.call(a,b,1);return c}function Xa(a,b){var c=0;Pa(a,function(d,e){b.call(void 0,d,e,a)&&1==Array.prototype.splice.call(a,e,1).length&&c++;});}function Ya(a){return Array.prototype.concat.apply([],arguments)}function Za(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return []}var $a=String.prototype.trim?function(a){return a.trim()}:function(a){return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]},ab=/&/g,bb=/</g,cb=/>/g,db=/"/g,eb=/'/g,fb=/\x00/g,gb=/[\x00&<>"']/;function x(a,b){return -1!=a.indexOf(b)}function hb(a,b){return a<b?-1:a>b?1:0}var ib;a:{var jb=l.navigator;if(jb){var kb=jb.userAgent;if(kb){ib=kb;break a}}ib="";}function y(a){return x(ib,a)}function lb(a,b){for(var c in a)b.call(void 0,a[c],c,a);}function mb(a){for(var b in a)return !1;return !0}function nb(a){var b={},c;for(c in a)b[c]=a[c];return b}var ob="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function z(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<ob.length;f++)c=ob[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c]);}}function pb(a,b){a:{try{var c=a&&a.ownerDocument,d=c&&(c.defaultView||c.parentWindow);d=d||l;if(d.Element&&d.Location){var e=d;break a}}catch(g){}e=null;}if(e&&"undefined"!=typeof e[b]&&(!a||!(a instanceof e[b])&&(a instanceof e.Location||a instanceof e.Element))){if(m(a))try{var f=a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a);}catch(g){f="<object could not be stringified>";}else f=void 0===a?"undefined":null===a?"null":typeof a;Ga("Argument is not a %s (or a non-Element, non-Location mock); got: %s",
b,f);}}function qb(a,b){this.a=a===rb&&b||"";this.b=sb;}qb.prototype.sa=!0;qb.prototype.ra=function(){return this.a};qb.prototype.toString=function(){return "Const{"+this.a+"}"};function tb(a){if(a instanceof qb&&a.constructor===qb&&a.b===sb)return a.a;Ga("expected object of type Const, got '"+a+"'");return "type_error:Const"}var sb={},rb={};var ub;function vb(){if(void 0===ub){var a=null,b=l.trustedTypes;if(b&&b.createPolicy){try{a=b.createPolicy("goog#html",{createHTML:wa,createScript:wa,createScriptURL:wa});}catch(c){l.console&&l.console.error(c.message);}ub=a;}else ub=a;}return ub}function wb(a,b){this.a=b===xb?a:"";}wb.prototype.sa=!0;wb.prototype.ra=function(){return this.a.toString()};wb.prototype.toString=function(){return "TrustedResourceUrl{"+this.a+"}"};function yb(a){if(a instanceof wb&&a.constructor===wb)return a.a;Ga("expected object of type TrustedResourceUrl, got '"+a+"' of type "+ma(a));return "type_error:TrustedResourceUrl"}
function zb(a,b){var c=tb(a);if(!Ab.test(c))throw Error("Invalid TrustedResourceUrl format: "+c);a=c.replace(Bb,function(d,e){if(!Object.prototype.hasOwnProperty.call(b,e))throw Error('Found marker, "'+e+'", in format string, "'+c+'", but no valid label mapping found in args: '+JSON.stringify(b));d=b[e];return d instanceof qb?tb(d):encodeURIComponent(String(d))});return Cb(a)}var Bb=/%{(\w+)}/g,Ab=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,xb={};
function Cb(a){var b=vb();a=b?b.createScriptURL(a):a;return new wb(a,xb)}function C(a,b){this.a=b===Db?a:"";}C.prototype.sa=!0;C.prototype.ra=function(){return this.a.toString()};C.prototype.toString=function(){return "SafeUrl{"+this.a+"}"};function Eb(a){if(a instanceof C&&a.constructor===C)return a.a;Ga("expected object of type SafeUrl, got '"+a+"' of type "+ma(a));return "type_error:SafeUrl"}
var Fb=/^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|font\/\w+|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\w+=(?:\w+|"[\w;,= ]+"))*$/i,Gb=/^data:(.*);base64,[a-z0-9+\/]+=*$/i,Hb=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;
function Ib(a){if(a instanceof C)return a;a="object"==typeof a&&a.sa?a.ra():String(a);if(Hb.test(a))a=new C(a,Db);else {a=String(a);a=a.replace(/(%0A|%0D)/g,"");var b=a.match(Gb);a=b&&Fb.test(b[1])?new C(a,Db):null;}return a}function Jb(a){if(a instanceof C)return a;a="object"==typeof a&&a.sa?a.ra():String(a);Hb.test(a)||(a="about:invalid#zClosurez");return new C(a,Db)}var Db={},Kb=new C("about:invalid#zClosurez",Db);function Lb(a,b,c){this.a=c===Mb?a:"";}Lb.prototype.sa=!0;Lb.prototype.ra=function(){return this.a.toString()};Lb.prototype.toString=function(){return "SafeHtml{"+this.a+"}"};function Nb(a){if(a instanceof Lb&&a.constructor===Lb)return a.a;Ga("expected object of type SafeHtml, got '"+a+"' of type "+ma(a));return "type_error:SafeHtml"}var Mb={};function Ob(a,b){pb(a,"HTMLScriptElement");a.src=yb(b);(b=a.ownerDocument&&a.ownerDocument.defaultView)&&b!=l?b=ka(b.document):(null===ja&&(ja=ka(l.document)),b=ja);b&&a.setAttribute("nonce",b);}function Pb(a,b,c,d){a=a instanceof C?a:Jb(a);b=b||l;c=c instanceof qb?tb(c):c||"";return b.open(Eb(a),c,d,void 0)}function Qb(a,b){for(var c=a.split("%s"),d="",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join("%s")}function Rb(a){gb.test(a)&&(-1!=a.indexOf("&")&&(a=a.replace(ab,"&amp;")),-1!=a.indexOf("<")&&(a=a.replace(bb,"&lt;")),-1!=a.indexOf(">")&&(a=a.replace(cb,"&gt;")),-1!=a.indexOf('"')&&(a=a.replace(db,"&quot;")),-1!=a.indexOf("'")&&(a=a.replace(eb,"&#39;")),-1!=a.indexOf("\x00")&&(a=a.replace(fb,"&#0;")));return a}function Sb(a){Sb[" "](a);return a}Sb[" "]=la;function Tb(a,b){var c=Ub;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)}var Vb=y("Opera"),Wb=y("Trident")||y("MSIE"),Xb=y("Edge"),Yb=Xb||Wb,Zb=y("Gecko")&&!(x(ib.toLowerCase(),"webkit")&&!y("Edge"))&&!(y("Trident")||y("MSIE"))&&!y("Edge"),$b=x(ib.toLowerCase(),"webkit")&&!y("Edge");function ac(){var a=l.document;return a?a.documentMode:void 0}var bc;
a:{var cc="",dc=function(){var a=ib;if(Zb)return /rv:([^\);]+)(\)|;)/.exec(a);if(Xb)return /Edge\/([\d\.]+)/.exec(a);if(Wb)return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if($b)return /WebKit\/(\S+)/.exec(a);if(Vb)return /(?:Version)[ \/]?(\S+)/.exec(a)}();dc&&(cc=dc?dc[1]:"");if(Wb){var ec=ac();if(null!=ec&&ec>parseFloat(cc)){bc=String(ec);break a}}bc=cc;}var Ub={};
function fc(a){return Tb(a,function(){for(var b=0,c=$a(String(bc)).split("."),d=$a(String(a)).split("."),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var g=c[f]||"",h=d[f]||"";do{g=/(\d*)(\D*)(.*)/.exec(g)||["","","",""];h=/(\d*)(\D*)(.*)/.exec(h)||["","","",""];if(0==g[0].length&&0==h[0].length)break;b=hb(0==g[1].length?0:parseInt(g[1],10),0==h[1].length?0:parseInt(h[1],10))||hb(0==g[2].length,0==h[2].length)||hb(g[2],h[2]);g=g[3];h=h[3];}while(0==b)}return 0<=b})}var gc;
if(l.document&&Wb){var hc=ac();gc=hc?hc:parseInt(bc,10)||void 0;}else gc=void 0;var ic=gc;try{(new self.OffscreenCanvas(0,0)).getContext("2d");}catch(a){}var jc=!Wb||9<=Number(ic);function kc(a){var b=document;return "string"===typeof a?b.getElementById(a):a}function lc(a,b){lb(b,function(c,d){c&&"object"==typeof c&&c.sa&&(c=c.ra());"style"==d?a.style.cssText=c:"class"==d?a.className=c:"for"==d?a.htmlFor=c:mc.hasOwnProperty(d)?a.setAttribute(mc[d],c):0==d.lastIndexOf("aria-",0)||0==d.lastIndexOf("data-",0)?a.setAttribute(d,c):a[d]=c;});}
var mc={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};
function nc(a,b,c){var d=arguments,e=document,f=String(d[0]),g=d[1];if(!jc&&g&&(g.name||g.type)){f=["<",f];g.name&&f.push(' name="',Rb(g.name),'"');if(g.type){f.push(' type="',Rb(g.type),'"');var h={};z(h,g);delete h.type;g=h;}f.push(">");f=f.join("");}f=oc(e,f);g&&("string"===typeof g?f.className=g:Array.isArray(g)?f.className=g.join(" "):lc(f,g));2<d.length&&pc(e,f,d);return f}
function pc(a,b,c){function d(h){h&&b.appendChild("string"===typeof h?a.createTextNode(h):h);}for(var e=2;e<c.length;e++){var f=c[e];if(!na(f)||m(f)&&0<f.nodeType)d(f);else {a:{if(f&&"number"==typeof f.length){if(m(f)){var g="function"==typeof f.item||"string"==typeof f.item;break a}if(oa(f)){g="function"==typeof f.item;break a}}g=!1;}w(g?Za(f):f,d);}}}function oc(a,b){b=String(b);"application/xhtml+xml"===a.contentType&&(b=b.toLowerCase());return a.createElement(b)}function qc(a){l.setTimeout(function(){throw a;},0);}var rc;
function sc(){var a=l.MessageChannel;"undefined"===typeof a&&"undefined"!==typeof window&&window.postMessage&&window.addEventListener&&!y("Presto")&&(a=function(){var e=oc(document,"IFRAME");e.style.display="none";document.documentElement.appendChild(e);var f=e.contentWindow;e=f.document;e.open();e.close();var g="callImmediate"+Math.random(),h="file:"==f.location.protocol?"*":f.location.protocol+"//"+f.location.host;e=q(function(n){if(("*"==h||n.origin==h)&&n.data==g)this.port1.onmessage();},this);
f.addEventListener("message",e,!1);this.port1={};this.port2={postMessage:function(){f.postMessage(g,h);}};});if("undefined"!==typeof a&&!y("Trident")&&!y("MSIE")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var e=c.Fb;c.Fb=null;e();}};return function(e){d.next={Fb:e};d=d.next;b.port2.postMessage(0);}}return function(e){l.setTimeout(e,0);}}function tc(a,b){uc||vc();wc||(uc(),wc=!0);Na.add(a,b);}var uc;function vc(){if(l.Promise&&l.Promise.resolve){var a=l.Promise.resolve(void 0);uc=function(){a.then(xc);};}else uc=function(){var b=xc;!oa(l.setImmediate)||l.Window&&l.Window.prototype&&!y("Edge")&&l.Window.prototype.setImmediate==l.setImmediate?(rc||(rc=sc()),rc(b)):l.setImmediate(b);};}var wc=!1,Na=new Ja;function xc(){for(var a;a=Ma();){try{a.a.call(a.b);}catch(b){qc(b);}Ia(La,a);}wc=!1;}function D(a,b){this.a=yc;this.i=void 0;this.f=this.b=this.c=null;this.g=this.h=!1;if(a!=la)try{var c=this;a.call(b,function(d){zc(c,Ac,d);},function(d){if(!(d instanceof Bc))try{if(d instanceof Error)throw d;throw Error("Promise rejected.");}catch(e){}zc(c,Cc,d);});}catch(d){zc(this,Cc,d);}}var yc=0,Ac=2,Cc=3;function Dc(){this.next=this.f=this.b=this.g=this.a=null;this.c=!1;}Dc.prototype.reset=function(){this.f=this.b=this.g=this.a=null;this.c=!1;};var Ec=new Ha(function(){return new Dc},function(a){a.reset();});
function Fc(a,b,c){var d=Ec.get();d.g=a;d.b=b;d.f=c;return d}function E(a){if(a instanceof D)return a;var b=new D(la);zc(b,Ac,a);return b}function F(a){return new D(function(b,c){c(a);})}function Gc(a,b,c){Hc(a,b,c,null)||tc(ua(b,a));}function Ic(a){return new D(function(b,c){var d=a.length,e=[];if(d)for(var f=function(p,v){d--;e[p]=v;0==d&&b(e);},g=function(p){c(p);},h=0,n;h<a.length;h++)n=a[h],Gc(n,ua(f,h),g);else b(e);})}
function Jc(a){return new D(function(b){var c=a.length,d=[];if(c)for(var e=function(h,n,p){c--;d[h]=n?{Ob:!0,value:p}:{Ob:!1,reason:p};0==c&&b(d);},f=0,g;f<a.length;f++)g=a[f],Gc(g,ua(e,f,!0),ua(e,f,!1));else b(d);})}D.prototype.then=function(a,b,c){return Kc(this,oa(a)?a:null,oa(b)?b:null,c)};D.prototype.$goog_Thenable=!0;k=D.prototype;k.na=function(a,b){a=Fc(a,a,b);a.c=!0;Lc(this,a);return this};k.s=function(a,b){return Kc(this,null,a,b)};
k.cancel=function(a){if(this.a==yc){var b=new Bc(a);tc(function(){Mc(this,b);},this);}};function Mc(a,b){if(a.a==yc)if(a.c){var c=a.c;if(c.b){for(var d=0,e=null,f=null,g=c.b;g&&(g.c||(d++,g.a==a&&(e=g),!(e&&1<d)));g=g.next)e||(f=g);e&&(c.a==yc&&1==d?Mc(c,b):(f?(d=f,d.next==c.f&&(c.f=d),d.next=d.next.next):Nc(c),Oc(c,e,Cc,b)));}a.c=null;}else zc(a,Cc,b);}function Lc(a,b){a.b||a.a!=Ac&&a.a!=Cc||Pc(a);a.f?a.f.next=b:a.b=b;a.f=b;}
function Kc(a,b,c,d){var e=Fc(null,null,null);e.a=new D(function(f,g){e.g=b?function(h){try{var n=b.call(d,h);f(n);}catch(p){g(p);}}:f;e.b=c?function(h){try{var n=c.call(d,h);void 0===n&&h instanceof Bc?g(h):f(n);}catch(p){g(p);}}:g;});e.a.c=a;Lc(a,e);return e.a}k.Zc=function(a){this.a=yc;zc(this,Ac,a);};k.$c=function(a){this.a=yc;zc(this,Cc,a);};
function zc(a,b,c){a.a==yc&&(a===c&&(b=Cc,c=new TypeError("Promise cannot resolve to itself")),a.a=1,Hc(c,a.Zc,a.$c,a)||(a.i=c,a.a=b,a.c=null,Pc(a),b!=Cc||c instanceof Bc||Qc(a,c)));}function Hc(a,b,c,d){if(a instanceof D)return Lc(a,Fc(b||la,c||null,d)),!0;if(Ea(a))return a.then(b,c,d),!0;if(m(a))try{var e=a.then;if(oa(e))return Rc(a,e,b,c,d),!0}catch(f){return c.call(d,f),!0}return !1}
function Rc(a,b,c,d,e){function f(n){h||(h=!0,d.call(e,n));}function g(n){h||(h=!0,c.call(e,n));}var h=!1;try{b.call(a,g,f);}catch(n){f(n);}}function Pc(a){a.h||(a.h=!0,tc(a.fc,a));}function Nc(a){var b=null;a.b&&(b=a.b,a.b=b.next,b.next=null);a.b||(a.f=null);return b}k.fc=function(){for(var a;a=Nc(this);)Oc(this,a,this.a,this.i);this.h=!1;};
function Oc(a,b,c,d){if(c==Cc&&b.b&&!b.c)for(;a&&a.g;a=a.c)a.g=!1;if(b.a)b.a.c=null,Sc(b,c,d);else try{b.c?b.g.call(b.f):Sc(b,c,d);}catch(e){Tc.call(null,e);}Ia(Ec,b);}function Sc(a,b,c){b==Ac?a.g.call(a.f,c):a.b&&a.b.call(a.f,c);}function Qc(a,b){a.g=!0;tc(function(){a.g&&Tc.call(null,b);});}var Tc=qc;function Bc(a){u.call(this,a);}r(Bc,u);Bc.prototype.name="cancel";function Uc(){this.xa=this.xa;this.oa=this.oa;}var Vc=0;Uc.prototype.xa=!1;function Xc(a){if(!a.xa&&(a.xa=!0,a.Da(),0!=Vc)){var b=pa(a);}}Uc.prototype.Da=function(){if(this.oa)for(;this.oa.length;)this.oa.shift()();};var Yc=Object.freeze||function(a){return a};var Zc=!Wb||9<=Number(ic),$c=Wb&&!fc("9"),ad=function(){if(!l.addEventListener||!Object.defineProperty)return !1;var a=!1,b=Object.defineProperty({},"passive",{get:function(){a=!0;}});try{l.addEventListener("test",la,b),l.removeEventListener("test",la,b);}catch(c){}return a}();function G(a,b){this.type=a;this.b=this.target=b;this.defaultPrevented=!1;}G.prototype.preventDefault=function(){this.defaultPrevented=!0;};function bd(a,b){G.call(this,a?a.type:"");this.relatedTarget=this.b=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key="";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType="";this.a=null;if(a){var c=this.type=a.type,d=a.changedTouches&&a.changedTouches.length?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.b=b;if(b=a.relatedTarget){if(Zb){a:{try{Sb(b.nodeName);var e=!0;break a}catch(f){}e=!1;}e||(b=null);}}else "mouseover"==
c?b=a.fromElement:"mouseout"==c&&(b=a.toElement);this.relatedTarget=b;d?(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0):(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0);this.button=a.button;this.key=a.key||"";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=
a.metaKey;this.pointerId=a.pointerId||0;this.pointerType="string"===typeof a.pointerType?a.pointerType:cd[a.pointerType]||"";this.a=a;a.defaultPrevented&&this.preventDefault();}}r(bd,G);var cd=Yc({2:"touch",3:"pen",4:"mouse"});bd.prototype.preventDefault=function(){bd.$a.preventDefault.call(this);var a=this.a;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,$c)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1;}catch(b){}};bd.prototype.g=function(){return this.a};var dd="closure_listenable_"+(1E6*Math.random()|0),ed=0;function fd(a,b,c,d,e){this.listener=a;this.proxy=null;this.src=b;this.type=c;this.capture=!!d;this.Ua=e;this.key=++ed;this.va=this.Oa=!1;}function gd(a){a.va=!0;a.listener=null;a.proxy=null;a.src=null;a.Ua=null;}function hd(a){this.src=a;this.a={};this.b=0;}hd.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.a[f];a||(a=this.a[f]=[],this.b++);var g=id(a,b,d,e);-1<g?(b=a[g],c||(b.Oa=!1)):(b=new fd(b,this.src,f,!!d,e),b.Oa=c,a.push(b));return b};function jd(a,b){var c=b.type;c in a.a&&Wa(a.a[c],b)&&(gd(b),0==a.a[c].length&&(delete a.a[c],a.b--));}function id(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.va&&f.listener==b&&f.capture==!!c&&f.Ua==d)return e}return -1}var kd="closure_lm_"+(1E6*Math.random()|0),ld={};function nd(a,b,c,d,e){if(d&&d.once)od(a,b,c,d,e);else if(Array.isArray(b))for(var f=0;f<b.length;f++)nd(a,b[f],c,d,e);else c=pd(c),a&&a[dd]?qd(a,b,c,m(d)?!!d.capture:!!d,e):rd(a,b,c,!1,d,e);}
function rd(a,b,c,d,e,f){if(!b)throw Error("Invalid event type");var g=m(e)?!!e.capture:!!e,h=sd(a);h||(a[kd]=h=new hd(a));c=h.add(b,c,d,g,f);if(!c.proxy){d=td();c.proxy=d;d.src=a;d.listener=c;if(a.addEventListener)ad||(e=g),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(ud(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");}}
function td(){var a=vd,b=Zc?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function od(a,b,c,d,e){if(Array.isArray(b))for(var f=0;f<b.length;f++)od(a,b[f],c,d,e);else c=pd(c),a&&a[dd]?wd(a,b,c,m(d)?!!d.capture:!!d,e):rd(a,b,c,!0,d,e);}
function H(a,b,c,d,e){if(Array.isArray(b))for(var f=0;f<b.length;f++)H(a,b[f],c,d,e);else (d=m(d)?!!d.capture:!!d,c=pd(c),a&&a[dd])?(a=a.v,b=String(b).toString(),b in a.a&&(f=a.a[b],c=id(f,c,d,e),-1<c&&(gd(f[c]),Array.prototype.splice.call(f,c,1),0==f.length&&(delete a.a[b],a.b--)))):a&&(a=sd(a))&&(b=a.a[b.toString()],a=-1,b&&(a=id(b,c,d,e)),(c=-1<a?b[a]:null)&&xd(c));}
function xd(a){if("number"!==typeof a&&a&&!a.va){var b=a.src;if(b&&b[dd])jd(b.v,a);else {var c=a.type,d=a.proxy;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(ud(c),d):b.addListener&&b.removeListener&&b.removeListener(d);(c=sd(b))?(jd(c,a),0==c.b&&(c.src=null,b[kd]=null)):gd(a);}}}function ud(a){return a in ld?ld[a]:ld[a]="on"+a}
function yd(a,b,c,d){var e=!0;if(a=sd(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.va&&(f=zd(f,d),e=e&&!1!==f);}return e}function zd(a,b){var c=a.listener,d=a.Ua||a.src;a.Oa&&xd(a);return c.call(d,b)}
function vd(a,b){if(a.va)return !0;if(!Zc){if(!b)a:{b=["window","event"];for(var c=l,d=0;d<b.length;d++)if(c=c[b[d]],null==c){b=null;break a}b=c;}d=b;b=new bd(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(g){e=!0;}if(e||void 0==d.returnValue)d.returnValue=!0;}d=[];for(e=b.b;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;0<=e;e--){b.b=d[e];var f=yd(d[e],a,!0,b);c=c&&f;}for(e=0;e<d.length;e++)b.b=d[e],f=yd(d[e],a,!1,b),c=c&&f;}return c}return zd(a,
new bd(b,this))}function sd(a){a=a[kd];return a instanceof hd?a:null}var Bd="__closure_events_fn_"+(1E9*Math.random()>>>0);function pd(a){if(oa(a))return a;a[Bd]||(a[Bd]=function(b){return a.handleEvent(b)});return a[Bd]}function I(){Uc.call(this);this.v=new hd(this);this.$b=this;this.fb=null;}r(I,Uc);I.prototype[dd]=!0;I.prototype.addEventListener=function(a,b,c,d){nd(this,a,b,c,d);};I.prototype.removeEventListener=function(a,b,c,d){H(this,a,b,c,d);};
I.prototype.dispatchEvent=function(a){var b,c=this.fb;if(c)for(b=[];c;c=c.fb)b.push(c);c=this.$b;var d=a.type||a;if("string"===typeof a)a=new G(a,c);else if(a instanceof G)a.target=a.target||c;else {var e=a;a=new G(d,c);z(a,e);}e=!0;if(b)for(var f=b.length-1;0<=f;f--){var g=a.b=b[f];e=Cd(g,d,!0,a)&&e;}g=a.b=c;e=Cd(g,d,!0,a)&&e;e=Cd(g,d,!1,a)&&e;if(b)for(f=0;f<b.length;f++)g=a.b=b[f],e=Cd(g,d,!1,a)&&e;return e};
I.prototype.Da=function(){I.$a.Da.call(this);if(this.v){var a=this.v,c;for(c in a.a){for(var d=a.a[c],e=0;e<d.length;e++)gd(d[e]);delete a.a[c];a.b--;}}this.fb=null;};function qd(a,b,c,d,e){a.v.add(String(b),c,!1,d,e);}function wd(a,b,c,d,e){a.v.add(String(b),c,!0,d,e);}
function Cd(a,b,c,d){b=a.v.a[String(b)];if(!b)return !0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var g=b[f];if(g&&!g.va&&g.capture==c){var h=g.listener,n=g.Ua||g.src;g.Oa&&jd(a.v,g);e=!1!==h.call(n,d)&&e;}}return e&&!d.defaultPrevented}function Dd(a,b,c){if(oa(a))c&&(a=q(a,c));else if(a&&"function"==typeof a.handleEvent)a=q(a.handleEvent,a);else throw Error("Invalid listener argument");return 2147483647<Number(b)?-1:l.setTimeout(a,b||0)}function Ed(a){var b=null;return (new D(function(c,d){b=Dd(function(){c(void 0);},a);-1==b&&d(Error("Failed to schedule timer."));})).s(function(c){l.clearTimeout(b);throw c;})}function Fd(a){if(a.V&&"function"==typeof a.V)return a.V();if("string"===typeof a)return a.split("");if(na(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}b=[];c=0;for(d in a)b[c++]=a[d];return b}function Gd(a){if(a.Y&&"function"==typeof a.Y)return a.Y();if(!a.V||"function"!=typeof a.V){if(na(a)||"string"===typeof a){var b=[];a=a.length;for(var c=0;c<a;c++)b.push(c);return b}b=[];c=0;for(var d in a)b[c++]=d;return b}}
function Hd(a,b){if(a.forEach&&"function"==typeof a.forEach)a.forEach(b,void 0);else if(na(a)||"string"===typeof a)w(a,b,void 0);else for(var c=Gd(a),d=Fd(a),e=d.length,f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a);}function Id(a,b){this.b={};this.a=[];this.c=0;var c=arguments.length;if(1<c){if(c%2)throw Error("Uneven number of arguments");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1]);}else if(a)if(a instanceof Id)for(c=a.Y(),d=0;d<c.length;d++)this.set(c[d],a.get(c[d]));else for(d in a)this.set(d,a[d]);}k=Id.prototype;k.V=function(){Jd(this);for(var a=[],b=0;b<this.a.length;b++)a.push(this.b[this.a[b]]);return a};k.Y=function(){Jd(this);return this.a.concat()};
k.clear=function(){this.b={};this.c=this.a.length=0;};function Jd(a){if(a.c!=a.a.length){for(var b=0,c=0;b<a.a.length;){var d=a.a[b];Kd(a.b,d)&&(a.a[c++]=d);b++;}a.a.length=c;}if(a.c!=a.a.length){var e={};for(c=b=0;b<a.a.length;)d=a.a[b],Kd(e,d)||(a.a[c++]=d,e[d]=1),b++;a.a.length=c;}}k.get=function(a,b){return Kd(this.b,a)?this.b[a]:b};k.set=function(a,b){Kd(this.b,a)||(this.c++,this.a.push(a));this.b[a]=b;};
k.forEach=function(a,b){for(var c=this.Y(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this);}};function Kd(a,b){return Object.prototype.hasOwnProperty.call(a,b)}var Ld=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Md(a,b){if(a){a=a.split("&");for(var c=0;c<a.length;c++){var d=a[c].indexOf("="),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1);}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\+/g," ")):"");}}}function Nd(a,b){this.a=this.l=this.f="";this.g=null;this.h=this.c="";this.i=!1;var c;a instanceof Nd?(this.i=void 0!==b?b:a.i,Od(this,a.f),this.l=a.l,this.a=a.a,Pd(this,a.g),this.c=a.c,Qd(this,Rd(a.b)),this.h=a.h):a&&(c=String(a).match(Ld))?(this.i=!!b,Od(this,c[1]||"",!0),this.l=Sd(c[2]||""),this.a=Sd(c[3]||"",!0),Pd(this,c[4]),this.c=Sd(c[5]||"",!0),Qd(this,c[6]||"",!0),this.h=Sd(c[7]||"")):(this.i=!!b,this.b=new Td(null,this.i));}
Nd.prototype.toString=function(){var a=[],b=this.f;b&&a.push(Ud(b,Vd,!0),":");var c=this.a;if(c||"file"==b)a.push("//"),(b=this.l)&&a.push(Ud(b,Vd,!0),"@"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),c=this.g,null!=c&&a.push(":",String(c));if(c=this.c)this.a&&"/"!=c.charAt(0)&&a.push("/"),a.push(Ud(c,"/"==c.charAt(0)?Wd:Xd,!0));(c=this.b.toString())&&a.push("?",c);(c=this.h)&&a.push("#",Ud(c,Yd));return a.join("")};
Nd.prototype.resolve=function(a){var b=new Nd(this),c=!!a.f;c?Od(b,a.f):c=!!a.l;c?b.l=a.l:c=!!a.a;c?b.a=a.a:c=null!=a.g;var d=a.c;if(c)Pd(b,a.g);else if(c=!!a.c){if("/"!=d.charAt(0))if(this.a&&!this.c)d="/"+d;else {var e=b.c.lastIndexOf("/");-1!=e&&(d=b.c.substr(0,e+1)+d);}e=d;if(".."==e||"."==e)d="";else if(x(e,"./")||x(e,"/.")){d=0==e.lastIndexOf("/",0);e=e.split("/");for(var f=[],g=0;g<e.length;){var h=e[g++];"."==h?d&&g==e.length&&f.push(""):".."==h?((1<f.length||1==f.length&&""!=f[0])&&f.pop(),
d&&g==e.length&&f.push("")):(f.push(h),d=!0);}d=f.join("/");}else d=e;}c?b.c=d:c=""!==a.b.toString();c?Qd(b,Rd(a.b)):c=!!a.h;c&&(b.h=a.h);return b};function Od(a,b,c){a.f=c?Sd(b,!0):b;a.f&&(a.f=a.f.replace(/:$/,""));}function Pd(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error("Bad port number "+b);a.g=b;}else a.g=null;}function Qd(a,b,c){b instanceof Td?(a.b=b,Zd(a.b,a.i)):(c||(b=Ud(b,$d)),a.b=new Td(b,a.i));}function J(a,b,c){a.b.set(b,c);}function ae(a,b){return a.b.get(b)}
function be(a){return a instanceof Nd?new Nd(a):new Nd(a,void 0)}function ce(a,b,c,d){var e=new Nd(null,void 0);a&&Od(e,a);b&&(e.a=b);c&&Pd(e,c);d&&(e.c=d);return e}function Sd(a,b){return a?b?decodeURI(a.replace(/%25/g,"%2525")):decodeURIComponent(a):""}function Ud(a,b,c){return "string"===typeof a?(a=encodeURI(a).replace(b,de),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),a):null}function de(a){a=a.charCodeAt(0);return "%"+(a>>4&15).toString(16)+(a&15).toString(16)}
var Vd=/[#\/\?@]/g,Xd=/[#\?:]/g,Wd=/[#\?]/g,$d=/[#\?@]/g,Yd=/#/g;function Td(a,b){this.b=this.a=null;this.c=a||null;this.f=!!b;}function ee(a){a.a||(a.a=new Id,a.b=0,a.c&&Md(a.c,function(b,c){a.add(decodeURIComponent(b.replace(/\+/g," ")),c);}));}function fe(a){var b=Gd(a);if("undefined"==typeof b)throw Error("Keys are undefined");var c=new Td(null,void 0);a=Fd(a);for(var d=0;d<b.length;d++){var e=b[d],f=a[d];Array.isArray(f)?ge(c,e,f):c.add(e,f);}return c}k=Td.prototype;
k.add=function(a,b){ee(this);this.c=null;a=he(this,a);var c=this.a.get(a);c||this.a.set(a,c=[]);c.push(b);this.b+=1;return this};function ie(a,b){ee(a);b=he(a,b);Kd(a.a.b,b)&&(a.c=null,a.b-=a.a.get(b).length,a=a.a,Kd(a.b,b)&&(delete a.b[b],a.c--,a.a.length>2*a.c&&Jd(a)));}k.clear=function(){this.a=this.c=null;this.b=0;};function je(a,b){ee(a);b=he(a,b);return Kd(a.a.b,b)}k.forEach=function(a,b){ee(this);this.a.forEach(function(c,d){w(c,function(e){a.call(b,e,d,this);},this);},this);};
k.Y=function(){ee(this);for(var a=this.a.V(),b=this.a.Y(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};k.V=function(a){ee(this);var b=[];if("string"===typeof a)je(this,a)&&(b=Ya(b,this.a.get(he(this,a))));else {a=this.a.V();for(var c=0;c<a.length;c++)b=Ya(b,a[c]);}return b};k.set=function(a,b){ee(this);this.c=null;a=he(this,a);je(this,a)&&(this.b-=this.a.get(a).length);this.a.set(a,[b]);this.b+=1;return this};
k.get=function(a,b){if(!a)return b;a=this.V(a);return 0<a.length?String(a[0]):b};function ge(a,b,c){ie(a,b);0<c.length&&(a.c=null,a.a.set(he(a,b),Za(c)),a.b+=c.length);}k.toString=function(){if(this.c)return this.c;if(!this.a)return "";for(var a=[],b=this.a.Y(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(String(d));d=this.V(d);for(var f=0;f<d.length;f++){var g=e;""!==d[f]&&(g+="="+encodeURIComponent(String(d[f])));a.push(g);}}return this.c=a.join("&")};
function Rd(a){var b=new Td;b.c=a.c;a.a&&(b.a=new Id(a.a),b.b=a.b);return b}function he(a,b){b=String(b);a.f&&(b=b.toLowerCase());return b}function Zd(a,b){b&&!a.f&&(ee(a),a.c=null,a.a.forEach(function(c,d){var e=d.toLowerCase();d!=e&&(ie(this,d),ge(this,e,c));},a));a.f=b;}function ke(a){var b=[];le(new me,a,b);return b.join("")}function me(){}
function le(a,b,c){if(null==b)c.push("null");else {if("object"==typeof b){if(Array.isArray(b)){var d=b;b=d.length;c.push("[");for(var e="",f=0;f<b;f++)c.push(e),le(a,d[f],c),e=",";c.push("]");return}if(b instanceof String||b instanceof Number||b instanceof Boolean)b=b.valueOf();else {c.push("{");e="";for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(f=b[d],"function"!=typeof f&&(c.push(e),ne(d,c),c.push(":"),le(a,f,c),e=","));c.push("}");return}}switch(typeof b){case "string":ne(b,c);break;case "number":c.push(isFinite(b)&&
!isNaN(b)?String(b):"null");break;case "boolean":c.push(String(b));break;case "function":c.push("null");break;default:throw Error("Unknown type: "+typeof b);}}}var oe={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\u000b"},pe=/\uffff/.test("\uffff")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;
function ne(a,b){b.push('"',a.replace(pe,function(c){var d=oe[c];d||(d="\\u"+(c.charCodeAt(0)|65536).toString(16).substr(1),oe[c]=d);return d}),'"');}function qe(){var a=K();return Wb&&!!ic&&11==ic||/Edge\/\d+/.test(a)}function re(){return l.window&&l.window.location.href||self&&self.location&&self.location.href||""}function se(a,b){b=b||l.window;var c="about:blank";a&&(c=Eb(Ib(a)||Kb));b.location.href=c;}function te(a,b){var c=[],d;for(d in a)d in b?typeof a[d]!=typeof b[d]?c.push(d):"object"==typeof a[d]&&null!=a[d]&&null!=b[d]?0<te(a[d],b[d]).length&&c.push(d):a[d]!==b[d]&&c.push(d):c.push(d);for(d in b)d in a||c.push(d);return c}
function ue(){var a=K();a=ve(a)!=we?null:(a=a.match(/\sChrome\/(\d+)/i))&&2==a.length?parseInt(a[1],10):null;return a&&30>a?!1:!Wb||!ic||9<ic}function xe(a){a=(a||K()).toLowerCase();return a.match(/android/)||a.match(/webos/)||a.match(/iphone|ipad|ipod/)||a.match(/blackberry/)||a.match(/windows phone/)||a.match(/iemobile/)?!0:!1}function ye(a){a=a||l.window;try{a.close();}catch(b){}}
function ze(a,b,c){var d=Math.floor(1E9*Math.random()).toString();b=b||500;c=c||600;var e=(window.screen.availHeight-c)/2,f=(window.screen.availWidth-b)/2;b={width:b,height:c,top:0<e?e:0,left:0<f?f:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1};c=K().toLowerCase();d&&(b.target=d,x(c,"crios/")&&(b.target="_blank"));ve(K())==Ae&&(a=a||"http://localhost",b.scrollbars=!0);c=a||"";(a=b)||(a={});d=window;b=c instanceof C?c:Ib("undefined"!=typeof c.href?c.href:String(c))||Kb;c=a.target||c.target;e=
[];for(g in a)switch(g){case "width":case "height":case "top":case "left":e.push(g+"="+a[g]);break;case "target":case "noopener":case "noreferrer":break;default:e.push(g+"="+(a[g]?1:0));}var g=e.join(",");if((y("iPhone")&&!y("iPod")&&!y("iPad")||y("iPad")||y("iPod"))&&d.navigator&&d.navigator.standalone&&c&&"_self"!=c)g=oc(document,"A"),pb(g,"HTMLAnchorElement"),b=b instanceof C?b:Jb(b),g.href=Eb(b),g.setAttribute("target",c),a.noreferrer&&g.setAttribute("rel","noreferrer"),a=document.createEvent("MouseEvent"),
a.initMouseEvent("click",!0,!0,d,1),g.dispatchEvent(a),g={};else if(a.noreferrer){if(g=Pb("",d,c,g),a=Eb(b),g&&(Yb&&x(a,";")&&(a="'"+a.replace(/'/g,"%27")+"'"),g.opener=null,a='<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+Rb(a)+'">',a=(d=vb())?d.createHTML(a):a,a=new Lb(a,null,Mb),d=g.document))d.write(Nb(a)),d.close();}else (g=Pb(b,d,c,g))&&a.noopener&&(g.opener=null);if(g)try{g.focus();}catch(h){}return g}
function Be(a){return new D(function(b){function c(){Ed(2E3).then(function(){if(!a||a.closed)b();else return c()});}return c()})}var Ce=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,De=/^[^@]+@[^@]+$/;function Ee(){var a=null;return (new D(function(b){"complete"==l.document.readyState?b():(a=function(){b();},od(window,"load",a));})).s(function(b){H(window,"load",a);throw b;})}
function Fe(){return Ge(void 0)?Ee().then(function(){return new D(function(a,b){var c=l.document,d=setTimeout(function(){b(Error("Cordova framework is not ready."));},1E3);c.addEventListener("deviceready",function(){clearTimeout(d);a();},!1);})}):F(Error("Cordova must run in an Android or iOS file scheme."))}function Ge(a){a=a||K();return !("file:"!==He()&&"ionic:"!==He()||!a.toLowerCase().match(/iphone|ipad|ipod|android/))}function Ie(){var a=l.window;try{return !(!a||a==a.top)}catch(b){return !1}}
function Je(){return "undefined"!==typeof l.WorkerGlobalScope&&"function"===typeof l.importScripts}function Ke(){return firebase$1.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":firebase$1.INTERNAL.hasOwnProperty("node")?"Node":Je()?"Worker":"Browser"}function Le(){var a=Ke();return "ReactNative"===a||"Node"===a}function Me(){for(var a=50,b=[];0<a;)b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),a--;return b.join("")}
var Ae="Firefox",we="Chrome";
function ve(a){var b=a.toLowerCase();if(x(b,"opera/")||x(b,"opr/")||x(b,"opios/"))return "Opera";if(x(b,"iemobile"))return "IEMobile";if(x(b,"msie")||x(b,"trident/"))return "IE";if(x(b,"edge/"))return "Edge";if(x(b,"firefox/"))return Ae;if(x(b,"silk/"))return "Silk";if(x(b,"blackberry"))return "Blackberry";if(x(b,"webos"))return "Webos";if(!x(b,"safari/")||x(b,"chrome/")||x(b,"crios/")||x(b,"android"))if(!x(b,"chrome/")&&!x(b,"crios/")||x(b,"edge/")){if(x(b,"android"))return "Android";if((a=a.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&
2==a.length)return a[1]}else return we;else return "Safari";return "Other"}var Ne={ld:"FirebaseCore-web",nd:"FirebaseUI-web"};function Oe(a,b){b=b||[];var c=[],d={},e;for(e in Ne)d[Ne[e]]=!0;for(e=0;e<b.length;e++)"undefined"!==typeof d[b[e]]&&(delete d[b[e]],c.push(b[e]));c.sort();b=c;b.length||(b=["FirebaseCore-web"]);c=Ke();"Browser"===c?(d=K(),c=ve(d)):"Worker"===c&&(d=K(),c=ve(d)+"-"+c);return c+"/JsCore/"+a+"/"+b.join(",")}function K(){return l.navigator&&l.navigator.userAgent||""}
function L(a,b){a=a.split(".");b=b||l;for(var c=0;c<a.length&&"object"==typeof b&&null!=b;c++)b=b[a[c]];c!=a.length&&(b=void 0);return b}function Pe(){try{var a=l.localStorage,b=Qe();if(a)return a.setItem(b,"1"),a.removeItem(b),qe()?!!l.indexedDB:!0}catch(c){return Je()&&!!l.indexedDB}return !1}function Re(){return (Se()||"chrome-extension:"===He()||Ge())&&!Le()&&Pe()&&!Je()}function Se(){return "http:"===He()||"https:"===He()}function He(){return l.location&&l.location.protocol||null}
function Te(a){a=a||K();return xe(a)||ve(a)==Ae?!1:!0}function Ue(a){return "undefined"===typeof a?null:ke(a)}function Ve(a){var b={},c;for(c in a)a.hasOwnProperty(c)&&null!==a[c]&&void 0!==a[c]&&(b[c]=a[c]);return b}function We(a){if(null!==a)return JSON.parse(a)}function Qe(a){return a?a:Math.floor(1E9*Math.random()).toString()}function Xe(a){a=a||K();return "Safari"==ve(a)||a.toLowerCase().match(/iphone|ipad|ipod/)?!1:!0}
function Ye(){var a=l.___jsl;if(a&&a.H)for(var b in a.H)if(a.H[b].r=a.H[b].r||[],a.H[b].L=a.H[b].L||[],a.H[b].r=a.H[b].L.concat(),a.CP)for(var c=0;c<a.CP.length;c++)a.CP[c]=null;}function Ze(a,b){if(a>b)throw Error("Short delay should be less than long delay!");this.a=a;this.c=b;a=K();b=Ke();this.b=xe(a)||"ReactNative"===b;}
Ze.prototype.get=function(){var a=l.navigator;return (a&&"boolean"===typeof a.onLine&&(Se()||"chrome-extension:"===He()||"undefined"!==typeof a.connection)?a.onLine:1)?this.b?this.c:this.a:Math.min(5E3,this.a)};function $e(){var a=l.document;return a&&"undefined"!==typeof a.visibilityState?"visible"==a.visibilityState:!0}
function af(){var a=l.document,b=null;return $e()||!a?E():(new D(function(c){b=function(){$e()&&(a.removeEventListener("visibilitychange",b,!1),c());};a.addEventListener("visibilitychange",b,!1);})).s(function(c){a.removeEventListener("visibilitychange",b,!1);throw c;})}function bf(a){"undefined"!==typeof console&&"function"===typeof console.warn&&console.warn(a);}
function cf(a){try{var b=new Date(parseInt(a,10));if(!isNaN(b.getTime())&&!/[^0-9]/.test(a))return b.toUTCString()}catch(c){}return null}function df(){return !(!L("fireauth.oauthhelper",l)&&!L("fireauth.iframe",l))}function ef(){var a=l.navigator;return a&&a.serviceWorker&&a.serviceWorker.controller||null}function ff(){var a=l.navigator;return a&&a.serviceWorker?E().then(function(){return a.serviceWorker.ready}).then(function(b){return b.active||null}).s(function(){return null}):E(null)}var gf={};function hf(a){gf[a]||(gf[a]=!0,bf(a));}var jf;try{var kf={};Object.defineProperty(kf,"abcd",{configurable:!0,enumerable:!0,value:1});Object.defineProperty(kf,"abcd",{configurable:!0,enumerable:!0,value:2});jf=2==kf.abcd;}catch(a){jf=!1;}function M(a,b,c){jf?Object.defineProperty(a,b,{configurable:!0,enumerable:!0,value:c}):a[b]=c;}function N(a,b){if(b)for(var c in b)b.hasOwnProperty(c)&&M(a,c,b[c]);}function lf(a){var b={};N(b,a);return b}function mf(a){var b={},c;for(c in a)a.hasOwnProperty(c)&&(b[c]=a[c]);return b}
function nf(a,b){if(!b||!b.length)return !0;if(!a)return !1;for(var c=0;c<b.length;c++){var d=a[b[c]];if(void 0===d||null===d||""===d)return !1}return !0}function of(a){var b=a;if("object"==typeof a&&null!=a){b="length"in a?[]:{};for(var c in a)M(b,c,of(a[c]));}return b}function pf(a){var b=a&&(a[qf]?"phone":null);if(b&&a&&a[rf]){M(this,"uid",a[rf]);M(this,"displayName",a[sf]||null);var c=null;a[tf]&&(c=(new Date(a[tf])).toUTCString());M(this,"enrollmentTime",c);M(this,"factorId",b);}else throw new t("internal-error","Internal assert: invalid MultiFactorInfo object");}pf.prototype.w=function(){return {uid:this.uid,displayName:this.displayName,factorId:this.factorId,enrollmentTime:this.enrollmentTime}};function uf(a){try{var b=new vf(a);}catch(c){b=null;}return b}
var sf="displayName",tf="enrolledAt",rf="mfaEnrollmentId",qf="phoneInfo";function vf(a){pf.call(this,a);M(this,"phoneNumber",a[qf]);}r(vf,pf);vf.prototype.w=function(){var a=vf.$a.w.call(this);a.phoneNumber=this.phoneNumber;return a};function wf(a){var b={},c=a[xf],d=a[yf],e=a[zf];a=uf(a[Af]);if(!e||e!=Bf&&e!=Cf&&!c||e==Cf&&!d||e==Df&&!a)throw Error("Invalid checkActionCode response!");e==Cf?(b[Ef]=c||null,b[Ff]=c||null,b[Gf]=d):(b[Ef]=d||null,b[Ff]=d||null,b[Gf]=c||null);b[Hf]=a||null;M(this,If,e);M(this,Jf,of(b));}
var Df="REVERT_SECOND_FACTOR_ADDITION",Bf="EMAIL_SIGNIN",Cf="VERIFY_AND_CHANGE_EMAIL",xf="email",Af="mfaInfo",yf="newEmail",zf="requestType",Gf="email",Ef="fromEmail",Hf="multiFactorInfo",Ff="previousEmail",Jf="data",If="operation";function Kf(a){a=be(a);var b=ae(a,Lf)||null,c=ae(a,Mf)||null,d=ae(a,Nf)||null;d=d?Of[d]||null:null;if(!b||!c||!d)throw new t("argument-error",Lf+", "+Mf+"and "+Nf+" are required in a valid action code URL.");N(this,{apiKey:b,operation:d,code:c,continueUrl:ae(a,Pf)||null,languageCode:ae(a,Qf)||null,tenantId:ae(a,Rf)||null});}
var Lf="apiKey",Mf="oobCode",Pf="continueUrl",Qf="languageCode",Nf="mode",Rf="tenantId",Of={recoverEmail:"RECOVER_EMAIL",resetPassword:"PASSWORD_RESET",revertSecondFactorAddition:Df,signIn:Bf,verifyAndChangeEmail:Cf,verifyEmail:"VERIFY_EMAIL"};function Sf(a){try{return new Kf(a)}catch(b){return null}}function Tf(a){var b=a[Uf];if("undefined"===typeof b)throw new t("missing-continue-uri");if("string"!==typeof b||"string"===typeof b&&!b.length)throw new t("invalid-continue-uri");this.h=b;this.b=this.a=null;this.g=!1;var c=a[Vf];if(c&&"object"===typeof c){b=c[Wf];var d=c[Xf];c=c[Yf];if("string"===typeof b&&b.length){this.a=b;if("undefined"!==typeof d&&"boolean"!==typeof d)throw new t("argument-error",Xf+" property must be a boolean when specified.");this.g=!!d;if("undefined"!==typeof c&&("string"!==
typeof c||"string"===typeof c&&!c.length))throw new t("argument-error",Yf+" property must be a non empty string when specified.");this.b=c||null;}else {if("undefined"!==typeof b)throw new t("argument-error",Wf+" property must be a non empty string when specified.");if("undefined"!==typeof d||"undefined"!==typeof c)throw new t("missing-android-pkg-name");}}else if("undefined"!==typeof c)throw new t("argument-error",Vf+" property must be a non null object when specified.");this.f=null;if((b=a[Zf])&&"object"===
typeof b)if(b=b[$f],"string"===typeof b&&b.length)this.f=b;else {if("undefined"!==typeof b)throw new t("argument-error",$f+" property must be a non empty string when specified.");}else if("undefined"!==typeof b)throw new t("argument-error",Zf+" property must be a non null object when specified.");b=a[ag];if("undefined"!==typeof b&&"boolean"!==typeof b)throw new t("argument-error",ag+" property must be a boolean when specified.");this.c=!!b;a=a[bg];if("undefined"!==typeof a&&("string"!==typeof a||"string"===
typeof a&&!a.length))throw new t("argument-error",bg+" property must be a non empty string when specified.");this.i=a||null;}var Vf="android",bg="dynamicLinkDomain",ag="handleCodeInApp",Zf="iOS",Uf="url",Xf="installApp",Yf="minimumVersion",Wf="packageName",$f="bundleId";
function cg(a){var b={};b.continueUrl=a.h;b.canHandleCodeInApp=a.c;if(b.androidPackageName=a.a)b.androidMinimumVersion=a.b,b.androidInstallApp=a.g;b.iOSBundleId=a.f;b.dynamicLinkDomain=a.i;for(var c in b)null===b[c]&&delete b[c];return b}function dg(a){return Ra(a,function(b){b=b.toString(16);return 1<b.length?b:"0"+b}).join("")}var eg=null;function fg(a){var b="";gg(a,function(c){b+=String.fromCharCode(c);});return b}function gg(a,b){function c(n){for(;d<a.length;){var p=a.charAt(d++),v=eg[p];if(null!=v)return v;if(!/^[\s\xa0]*$/.test(p))throw Error("Unknown base64 encoding at char: "+p);}return n}hg();for(var d=0;;){var e=c(-1),f=c(0),g=c(64),h=c(64);if(64===h&&-1===e)break;b(e<<2|f>>4);64!=g&&(b(f<<4&240|g>>2),64!=h&&b(g<<6&192|h));}}
function hg(){if(!eg){eg={};for(var a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),b=["+/=","+/","-_=","-_.","-_"],c=0;5>c;c++)for(var d=a.concat(b[c].split("")),e=0;e<d.length;e++){var f=d[e];void 0===eg[f]&&(eg[f]=e);}}}function ig(a){var b=jg(a);if(!(b&&b.sub&&b.iss&&b.aud&&b.exp))throw Error("Invalid JWT");this.g=a;this.c=b.exp;this.h=b.sub;this.a=b.provider_id||b.firebase&&b.firebase.sign_in_provider||null;this.f=b.firebase&&b.firebase.tenant||null;this.b=!!b.is_anonymous||"anonymous"==this.a;}ig.prototype.S=function(){return this.f};ig.prototype.i=function(){return this.b};ig.prototype.toString=function(){return this.g};function kg(a){try{return new ig(a)}catch(b){return null}}
function jg(a){if(!a)return null;a=a.split(".");if(3!=a.length)return null;a=a[1];for(var b=(4-a.length%4)%4,c=0;c<b;c++)a+=".";try{return JSON.parse(fg(a))}catch(d){}return null}var lg="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),mg=["client_id","response_type","scope","redirect_uri","state"],ng={md:{Ja:"locale",ua:700,ta:600,fa:"facebook.com",Wa:mg},od:{Ja:null,ua:500,ta:750,fa:"github.com",Wa:mg},pd:{Ja:"hl",ua:515,ta:680,fa:"google.com",Wa:mg},vd:{Ja:"lang",ua:485,ta:705,fa:"twitter.com",Wa:lg},jd:{Ja:"locale",ua:640,ta:600,fa:"apple.com",Wa:[]}};
function og(a){for(var b in ng)if(ng[b].fa==a)return ng[b];return null}function pg(a){var b={};b["facebook.com"]=qg;b["google.com"]=rg;b["github.com"]=sg;b["twitter.com"]=tg;var c=a&&a[ug];try{if(c)return b[c]?new b[c](a):new vg(a);if("undefined"!==typeof a[wg])return new xg(a)}catch(d){}return null}var wg="idToken",ug="providerId";
function xg(a){var b=a[ug];if(!b&&a[wg]){var c=kg(a[wg]);c&&c.a&&(b=c.a);}if(!b)throw Error("Invalid additional user info!");if("anonymous"==b||"custom"==b)b=null;c=!1;"undefined"!==typeof a.isNewUser?c=!!a.isNewUser:"identitytoolkit#SignupNewUserResponse"===a.kind&&(c=!0);M(this,"providerId",b);M(this,"isNewUser",c);}function vg(a){xg.call(this,a);a=We(a.rawUserInfo||"{}");M(this,"profile",of(a||{}));}r(vg,xg);
function qg(a){vg.call(this,a);if("facebook.com"!=this.providerId)throw Error("Invalid provider ID!");}r(qg,vg);function sg(a){vg.call(this,a);if("github.com"!=this.providerId)throw Error("Invalid provider ID!");M(this,"username",this.profile&&this.profile.login||null);}r(sg,vg);function rg(a){vg.call(this,a);if("google.com"!=this.providerId)throw Error("Invalid provider ID!");}r(rg,vg);
function tg(a){vg.call(this,a);if("twitter.com"!=this.providerId)throw Error("Invalid provider ID!");M(this,"username",a.screenName||null);}r(tg,vg);function yg(a){var b=be(a),c=ae(b,"link"),d=ae(be(c),"link");b=ae(b,"deep_link_id");return ae(be(b),"link")||b||d||c||a}function zg(a,b){if(!a&&!b)throw new t("internal-error","Internal assert: no raw session string available");if(a&&b)throw new t("internal-error","Internal assert: unable to determine the session type");this.a=a||null;this.b=b||null;this.type=this.a?Ag:Bg;}var Ag="enroll",Bg="signin";zg.prototype.Ha=function(){return this.a?E(this.a):E(this.b)};zg.prototype.w=function(){return this.type==Ag?{multiFactorSession:{idToken:this.a}}:{multiFactorSession:{pendingCredential:this.b}}};function Cg(){}Cg.prototype.ja=function(){};Cg.prototype.b=function(){};Cg.prototype.c=function(){};Cg.prototype.w=function(){};function Dg(a,b){return a.then(function(c){if(c[Eg]){var d=kg(c[Eg]);if(!d||b!=d.h)throw new t("user-mismatch");return c}throw new t("user-mismatch");}).s(function(c){throw c&&c.code&&c.code==ya+"user-not-found"?new t("user-mismatch"):c;})}
function Fg(a,b){if(b)this.a=b;else throw new t("internal-error","failed to construct a credential");M(this,"providerId",a);M(this,"signInMethod",a);}Fg.prototype.ja=function(a){return Gg(a,Hg(this))};Fg.prototype.b=function(a,b){var c=Hg(this);c.idToken=b;return Ig(a,c)};Fg.prototype.c=function(a,b){return Dg(Jg(a,Hg(this)),b)};function Hg(a){return {pendingToken:a.a,requestUri:"http://localhost"}}Fg.prototype.w=function(){return {providerId:this.providerId,signInMethod:this.signInMethod,pendingToken:this.a}};
function Kg(a){if(a&&a.providerId&&a.signInMethod&&0==a.providerId.indexOf("saml.")&&a.pendingToken)try{return new Fg(a.providerId,a.pendingToken)}catch(b){}return null}
function Lg(a,b,c){this.a=null;if(b.idToken||b.accessToken)b.idToken&&M(this,"idToken",b.idToken),b.accessToken&&M(this,"accessToken",b.accessToken),b.nonce&&!b.pendingToken&&M(this,"nonce",b.nonce),b.pendingToken&&(this.a=b.pendingToken);else if(b.oauthToken&&b.oauthTokenSecret)M(this,"accessToken",b.oauthToken),M(this,"secret",b.oauthTokenSecret);else throw new t("internal-error","failed to construct a credential");M(this,"providerId",a);M(this,"signInMethod",c);}
Lg.prototype.ja=function(a){return Gg(a,Mg(this))};Lg.prototype.b=function(a,b){var c=Mg(this);c.idToken=b;return Ig(a,c)};Lg.prototype.c=function(a,b){var c=Mg(this);return Dg(Jg(a,c),b)};
function Mg(a){var b={};a.idToken&&(b.id_token=a.idToken);a.accessToken&&(b.access_token=a.accessToken);a.secret&&(b.oauth_token_secret=a.secret);b.providerId=a.providerId;a.nonce&&!a.a&&(b.nonce=a.nonce);b={postBody:fe(b).toString(),requestUri:"http://localhost"};a.a&&(delete b.postBody,b.pendingToken=a.a);return b}
Lg.prototype.w=function(){var a={providerId:this.providerId,signInMethod:this.signInMethod};this.idToken&&(a.oauthIdToken=this.idToken);this.accessToken&&(a.oauthAccessToken=this.accessToken);this.secret&&(a.oauthTokenSecret=this.secret);this.nonce&&(a.nonce=this.nonce);this.a&&(a.pendingToken=this.a);return a};
function Ng(a){if(a&&a.providerId&&a.signInMethod){var b={idToken:a.oauthIdToken,accessToken:a.oauthTokenSecret?null:a.oauthAccessToken,oauthTokenSecret:a.oauthTokenSecret,oauthToken:a.oauthTokenSecret&&a.oauthAccessToken,nonce:a.nonce,pendingToken:a.pendingToken};try{return new Lg(a.providerId,b,a.signInMethod)}catch(c){}}return null}function Og(a,b){this.Pc=b||[];N(this,{providerId:a,isOAuthProvider:!0});this.Hb={};this.ob=(og(a)||{}).Ja||null;this.nb=null;}
Og.prototype.Ka=function(a){this.Hb=nb(a);return this};function Pg(a){if("string"!==typeof a||0!=a.indexOf("saml."))throw new t("argument-error",'SAML provider IDs must be prefixed with "saml."');Og.call(this,a,[]);}r(Pg,Og);function Qg(a){Og.call(this,a,mg);this.a=[];}r(Qg,Og);Qg.prototype.Ca=function(a){Va(this.a,a)||this.a.push(a);return this};Qg.prototype.Pb=function(){return Za(this.a)};
Qg.prototype.credential=function(a,b){var c;m(a)?c={idToken:a.idToken||null,accessToken:a.accessToken||null,nonce:a.rawNonce||null}:c={idToken:a||null,accessToken:b||null};if(!c.idToken&&!c.accessToken)throw new t("argument-error","credential failed: must provide the ID token and/or the access token.");return new Lg(this.providerId,c,this.providerId)};function Rg(){Qg.call(this,"facebook.com");}r(Rg,Qg);M(Rg,"PROVIDER_ID","facebook.com");M(Rg,"FACEBOOK_SIGN_IN_METHOD","facebook.com");
function Sg(a){if(!a)throw new t("argument-error","credential failed: expected 1 argument (the OAuth access token).");var b=a;m(a)&&(b=a.accessToken);return (new Rg).credential({accessToken:b})}function Tg(){Qg.call(this,"github.com");}r(Tg,Qg);M(Tg,"PROVIDER_ID","github.com");M(Tg,"GITHUB_SIGN_IN_METHOD","github.com");
function Ug(a){if(!a)throw new t("argument-error","credential failed: expected 1 argument (the OAuth access token).");var b=a;m(a)&&(b=a.accessToken);return (new Tg).credential({accessToken:b})}function Vg(){Qg.call(this,"google.com");this.Ca("profile");}r(Vg,Qg);M(Vg,"PROVIDER_ID","google.com");M(Vg,"GOOGLE_SIGN_IN_METHOD","google.com");function Wg(a,b){var c=a;m(a)&&(c=a.idToken,b=a.accessToken);return (new Vg).credential({idToken:c,accessToken:b})}function Xg(){Og.call(this,"twitter.com",lg);}
r(Xg,Og);M(Xg,"PROVIDER_ID","twitter.com");M(Xg,"TWITTER_SIGN_IN_METHOD","twitter.com");function Yg(a,b){var c=a;m(c)||(c={oauthToken:a,oauthTokenSecret:b});if(!c.oauthToken||!c.oauthTokenSecret)throw new t("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new Lg("twitter.com",c,"twitter.com")}
function Zg(a,b,c){this.a=a;this.f=b;M(this,"providerId","password");M(this,"signInMethod",c===$g.EMAIL_LINK_SIGN_IN_METHOD?$g.EMAIL_LINK_SIGN_IN_METHOD:$g.EMAIL_PASSWORD_SIGN_IN_METHOD);}Zg.prototype.ja=function(a){return this.signInMethod==$g.EMAIL_LINK_SIGN_IN_METHOD?O(a,ah,{email:this.a,oobCode:this.f}):O(a,bh,{email:this.a,password:this.f})};
Zg.prototype.b=function(a,b){return this.signInMethod==$g.EMAIL_LINK_SIGN_IN_METHOD?O(a,ch,{idToken:b,email:this.a,oobCode:this.f}):O(a,dh,{idToken:b,email:this.a,password:this.f})};Zg.prototype.c=function(a,b){return Dg(this.ja(a),b)};Zg.prototype.w=function(){return {email:this.a,password:this.f,signInMethod:this.signInMethod}};function eh(a){return a&&a.email&&a.password?new Zg(a.email,a.password,a.signInMethod):null}function $g(){N(this,{providerId:"password",isOAuthProvider:!1});}
function fh(a,b){b=gh(b);if(!b)throw new t("argument-error","Invalid email link!");return new Zg(a,b.code,$g.EMAIL_LINK_SIGN_IN_METHOD)}function gh(a){a=yg(a);return (a=Sf(a))&&a.operation===Bf?a:null}N($g,{PROVIDER_ID:"password"});N($g,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"});N($g,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"});function hh(a){if(!(a.cb&&a.bb||a.La&&a.ea))throw new t("internal-error");this.a=a;M(this,"providerId","phone");this.fa="phone";M(this,"signInMethod","phone");}
hh.prototype.ja=function(a){return a.eb(ih(this))};hh.prototype.b=function(a,b){var c=ih(this);c.idToken=b;return O(a,jh,c)};hh.prototype.c=function(a,b){var c=ih(this);c.operation="REAUTH";a=O(a,kh,c);return Dg(a,b)};hh.prototype.w=function(){var a={providerId:"phone"};this.a.cb&&(a.verificationId=this.a.cb);this.a.bb&&(a.verificationCode=this.a.bb);this.a.La&&(a.temporaryProof=this.a.La);this.a.ea&&(a.phoneNumber=this.a.ea);return a};
function lh(a){if(a&&"phone"===a.providerId&&(a.verificationId&&a.verificationCode||a.temporaryProof&&a.phoneNumber)){var b={};w(["verificationId","verificationCode","temporaryProof","phoneNumber"],function(c){a[c]&&(b[c]=a[c]);});return new hh(b)}return null}function ih(a){return a.a.La&&a.a.ea?{temporaryProof:a.a.La,phoneNumber:a.a.ea}:{sessionInfo:a.a.cb,code:a.a.bb}}
function mh(a){try{this.a=a||firebase$1.auth();}catch(b){throw new t("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().");}N(this,{providerId:"phone",isOAuthProvider:!1});}
mh.prototype.eb=function(a,b){var c=this.a.a;return E(b.verify()).then(function(d){if("string"!==typeof d)throw new t("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(b.type){case "recaptcha":var e=m(a)?a.session:null,f=m(a)?a.phoneNumber:a,g;e&&e.type==Ag?g=e.Ha().then(function(h){return nh(c,{idToken:h,phoneEnrollmentInfo:{phoneNumber:f,recaptchaToken:d}})}):e&&e.type==Bg?g=e.Ha().then(function(h){return oh(c,
{mfaPendingCredential:h,mfaEnrollmentId:a.multiFactorHint&&a.multiFactorHint.uid||a.multiFactorUid,phoneSignInInfo:{recaptchaToken:d}})}):g=ph(c,{phoneNumber:f,recaptchaToken:d});return g.then(function(h){"function"===typeof b.reset&&b.reset();return h},function(h){"function"===typeof b.reset&&b.reset();throw h;});default:throw new t("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.');}})};
function qh(a,b){if(!a)throw new t("missing-verification-id");if(!b)throw new t("missing-verification-code");return new hh({cb:a,bb:b})}N(mh,{PROVIDER_ID:"phone"});N(mh,{PHONE_SIGN_IN_METHOD:"phone"});
function rh(a){if(a.temporaryProof&&a.phoneNumber)return new hh({La:a.temporaryProof,ea:a.phoneNumber});var b=a&&a.providerId;if(!b||"password"===b)return null;var c=a&&a.oauthAccessToken,d=a&&a.oauthTokenSecret,e=a&&a.nonce,f=a&&a.oauthIdToken,g=a&&a.pendingToken;try{switch(b){case "google.com":return Wg(f,c);case "facebook.com":return Sg(c);case "github.com":return Ug(c);case "twitter.com":return Yg(c,d);default:return c||d||f||g?g?0==b.indexOf("saml.")?new Fg(b,g):new Lg(b,{pendingToken:g,idToken:a.oauthIdToken,
accessToken:a.oauthAccessToken},b):(new Qg(b)).credential({idToken:f,accessToken:c,rawNonce:e}):null}}catch(h){return null}}function sh(a){if(!a.isOAuthProvider)throw new t("invalid-oauth-provider");}function th(a,b,c,d,e,f,g){this.c=a;this.b=b||null;this.g=c||null;this.f=d||null;this.i=f||null;this.h=g||null;this.a=e||null;if(this.g||this.a){if(this.g&&this.a)throw new t("invalid-auth-event");if(this.g&&!this.f)throw new t("invalid-auth-event");}else throw new t("invalid-auth-event");}th.prototype.getUid=function(){var a=[];a.push(this.c);this.b&&a.push(this.b);this.f&&a.push(this.f);this.h&&a.push(this.h);return a.join("-")};th.prototype.S=function(){return this.h};
th.prototype.w=function(){return {type:this.c,eventId:this.b,urlResponse:this.g,sessionId:this.f,postBody:this.i,tenantId:this.h,error:this.a&&this.a.w()}};function uh(a){a=a||{};return a.type?new th(a.type,a.eventId,a.urlResponse,a.sessionId,a.error&&Aa(a.error),a.postBody,a.tenantId):null}function vh(){this.b=null;this.a=[];}var wh=null;function xh(a){var b=wh;b.a.push(a);b.b||(b.b=function(c){for(var d=0;d<b.a.length;d++)b.a[d](c);},a=L("universalLinks.subscribe",l),"function"===typeof a&&a(null,b.b));}function yh(a){var b="unauthorized-domain",c=void 0,d=be(a);a=d.a;d=d.f;"chrome-extension"==d?c=Qb("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",a):"http"==d||"https"==d?c=Qb("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",a):b="operation-not-supported-in-this-environment";
t.call(this,b,c);}r(yh,t);function zh(a,b,c){t.call(this,a,c);a=b||{};a.Ib&&M(this,"email",a.Ib);a.ea&&M(this,"phoneNumber",a.ea);a.credential&&M(this,"credential",a.credential);a.Yb&&M(this,"tenantId",a.Yb);}r(zh,t);zh.prototype.w=function(){var a={code:this.code,message:this.message};this.email&&(a.email=this.email);this.phoneNumber&&(a.phoneNumber=this.phoneNumber);this.tenantId&&(a.tenantId=this.tenantId);var b=this.credential&&this.credential.w();b&&z(a,b);return a};zh.prototype.toJSON=function(){return this.w()};
function Ah(a){if(a.code){var b=a.code||"";0==b.indexOf(ya)&&(b=b.substring(ya.length));var c={credential:rh(a),Yb:a.tenantId};if(a.email)c.Ib=a.email;else if(a.phoneNumber)c.ea=a.phoneNumber;else if(!c.credential)return new t(b,a.message||void 0);return new zh(b,c,a.message)}return null}function Bh(){}Bh.prototype.c=null;function Ch(a){return a.c||(a.c=a.b())}var Dh;function Eh(){}r(Eh,Bh);Eh.prototype.a=function(){var a=Fh(this);return a?new ActiveXObject(a):new XMLHttpRequest};Eh.prototype.b=function(){var a={};Fh(this)&&(a[0]=!0,a[1]=!0);return a};
function Fh(a){if(!a.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var b=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.f=d}catch(e){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");}return a.f}Dh=new Eh;function Gh(){}r(Gh,Bh);Gh.prototype.a=function(){var a=new XMLHttpRequest;if("withCredentials"in a)return a;if("undefined"!=typeof XDomainRequest)return new Hh;throw Error("Unsupported browser");};Gh.prototype.b=function(){return {}};
function Hh(){this.a=new XDomainRequest;this.readyState=0;this.onreadystatechange=null;this.responseType=this.responseText=this.response="";this.status=-1;this.statusText="";this.a.onload=q(this.pc,this);this.a.onerror=q(this.Rb,this);this.a.onprogress=q(this.qc,this);this.a.ontimeout=q(this.uc,this);}k=Hh.prototype;k.open=function(a,b,c){if(null!=c&&!c)throw Error("Only async requests are supported.");this.a.open(a,b);};
k.send=function(a){if(a)if("string"==typeof a)this.a.send(a);else throw Error("Only string data is supported");else this.a.send();};k.abort=function(){this.a.abort();};k.setRequestHeader=function(){};k.getResponseHeader=function(a){return "content-type"==a.toLowerCase()?this.a.contentType:""};k.pc=function(){this.status=200;this.response=this.responseText=this.a.responseText;Ih(this,4);};k.Rb=function(){this.status=500;this.response=this.responseText="";Ih(this,4);};k.uc=function(){this.Rb();};
k.qc=function(){this.status=200;Ih(this,1);};function Ih(a,b){a.readyState=b;if(a.onreadystatechange)a.onreadystatechange();}k.getAllResponseHeaders=function(){return "content-type: "+this.a.contentType};function Jh(a,b,c){this.reset(a,b,c,void 0,void 0);}Jh.prototype.a=null;Jh.prototype.reset=function(a,b,c,d,e){delete this.a;};function Lh(a){this.f=a;this.b=this.c=this.a=null;}function Mh(a,b){this.name=a;this.value=b;}Mh.prototype.toString=function(){return this.name};var Nh=new Mh("SEVERE",1E3),Oh=new Mh("WARNING",900),Ph=new Mh("CONFIG",700),Qh=new Mh("FINE",500);function Rh(a){if(a.c)return a.c;if(a.a)return Rh(a.a);Ga("Root logger has no level set.");return null}Lh.prototype.log=function(a,b,c){if(a.value>=Rh(this).value)for(oa(b)&&(b=b()),a=new Jh(a,String(b),this.f),c&&(a.a=c),c=this;c;)c=c.a;};var Sh={},Th=null;
function Uh(a){Th||(Th=new Lh(""),Sh[""]=Th,Th.c=Ph);var b;if(!(b=Sh[a])){b=new Lh(a);var c=a.lastIndexOf("."),d=a.substr(c+1);c=Uh(a.substr(0,c));c.b||(c.b={});c.b[d]=b;b.a=c;Sh[a]=b;}return b}function Vh(a,b){a&&a.log(Qh,b,void 0);}function Wh(a){this.f=a;}r(Wh,Bh);Wh.prototype.a=function(){return new Xh(this.f)};Wh.prototype.b=function(a){return function(){return a}}({});function Xh(a){I.call(this);this.u=a;this.h=void 0;this.readyState=Yh;this.status=0;this.responseType=this.responseText=this.response=this.statusText="";this.onreadystatechange=null;this.l=new Headers;this.b=null;this.o="GET";this.f="";this.a=!1;this.i=Uh("goog.net.FetchXmlHttp");this.m=this.c=this.g=null;}r(Xh,I);var Yh=0;k=Xh.prototype;
k.open=function(a,b){if(this.readyState!=Yh)throw this.abort(),Error("Error reopening a connection");this.o=a;this.f=b;this.readyState=1;Zh(this);};k.send=function(a){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var b={headers:this.l,method:this.o,credentials:this.h,cache:void 0};a&&(b.body=a);this.u.fetch(new Request(this.f,b)).then(this.tc.bind(this),this.Ta.bind(this));};
k.abort=function(){this.response=this.responseText="";this.l=new Headers;this.status=0;this.c&&this.c.cancel("Request was aborted.");1<=this.readyState&&this.a&&4!=this.readyState&&(this.a=!1,$h(this));this.readyState=Yh;};
k.tc=function(a){this.a&&(this.g=a,this.b||(this.status=this.g.status,this.statusText=this.g.statusText,this.b=a.headers,this.readyState=2,Zh(this)),this.a&&(this.readyState=3,Zh(this),this.a&&("arraybuffer"===this.responseType?a.arrayBuffer().then(this.rc.bind(this),this.Ta.bind(this)):"undefined"!==typeof l.ReadableStream&&"body"in a?(this.response=this.responseText="",this.c=a.body.getReader(),this.m=new TextDecoder,ai(this)):a.text().then(this.sc.bind(this),this.Ta.bind(this)))));};
function ai(a){a.c.read().then(a.oc.bind(a)).catch(a.Ta.bind(a));}k.oc=function(a){if(this.a){var b=this.m.decode(a.value?a.value:new Uint8Array(0),{stream:!a.done});b&&(this.response=this.responseText+=b);a.done?$h(this):Zh(this);3==this.readyState&&ai(this);}};k.sc=function(a){this.a&&(this.response=this.responseText=a,$h(this));};k.rc=function(a){this.a&&(this.response=a,$h(this));};k.Ta=function(a){var b=this.i;b&&b.log(Oh,"Failed to fetch url "+this.f,a instanceof Error?a:Error(a));this.a&&$h(this);};
function $h(a){a.readyState=4;a.g=null;a.c=null;a.m=null;Zh(a);}k.setRequestHeader=function(a,b){this.l.append(a,b);};k.getResponseHeader=function(a){return this.b?this.b.get(a.toLowerCase())||"":((a=this.i)&&a.log(Oh,"Attempting to get response header but no headers have been received for url: "+this.f,void 0),"")};
k.getAllResponseHeaders=function(){if(!this.b){var a=this.i;a&&a.log(Oh,"Attempting to get all response headers but no headers have been received for url: "+this.f,void 0);return ""}a=[];for(var b=this.b.entries(),c=b.next();!c.done;)c=c.value,a.push(c[0]+": "+c[1]),c=b.next();return a.join("\r\n")};function Zh(a){a.onreadystatechange&&a.onreadystatechange.call(a);}Object.defineProperty(Xh.prototype,"withCredentials",{get:function(){return "include"===this.h},set:function(a){this.h=a?"include":"same-origin";}});function bi(a){I.call(this);this.headers=new Id;this.O=a||null;this.c=!1;this.A=this.a=null;this.h=this.P=this.l="";this.f=this.N=this.i=this.G=!1;this.g=0;this.o=null;this.m=ci;this.u=this.R=!1;}r(bi,I);var ci="";bi.prototype.b=Uh("goog.net.XhrIo");var di=/^https?$/i,ei=["POST","PUT"];
function fi(a,b,c,d,e){if(a.a)throw Error("[goog.net.XhrIo] Object is active with another request="+a.l+"; newUri="+b);c=c?c.toUpperCase():"GET";a.l=b;a.h="";a.P=c;a.G=!1;a.c=!0;a.a=a.O?a.O.a():Dh.a();a.A=a.O?Ch(a.O):Ch(Dh);a.a.onreadystatechange=q(a.Ub,a);try{Vh(a.b,gi(a,"Opening Xhr")),a.N=!0,a.a.open(c,String(b),!0),a.N=!1;}catch(g){Vh(a.b,gi(a,"Error opening Xhr: "+g.message));hi(a,g);return}b=d||"";var f=new Id(a.headers);e&&Hd(e,function(g,h){f.set(h,g);});e=Ta(f.Y());d=l.FormData&&b instanceof
l.FormData;!Va(ei,c)||e||d||f.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");f.forEach(function(g,h){this.a.setRequestHeader(h,g);},a);a.m&&(a.a.responseType=a.m);"withCredentials"in a.a&&a.a.withCredentials!==a.R&&(a.a.withCredentials=a.R);try{ii(a),0<a.g&&(a.u=ji(a.a),Vh(a.b,gi(a,"Will abort after "+a.g+"ms if incomplete, xhr2 "+a.u)),a.u?(a.a.timeout=a.g,a.a.ontimeout=q(a.Ma,a)):a.o=Dd(a.Ma,a.g,a)),Vh(a.b,gi(a,"Sending request")),a.i=!0,a.a.send(b),a.i=!1;}catch(g){Vh(a.b,
gi(a,"Send error: "+g.message)),hi(a,g);}}function ji(a){return Wb&&fc(9)&&"number"===typeof a.timeout&&void 0!==a.ontimeout}function Ua(a){return "content-type"==a.toLowerCase()}k=bi.prototype;k.Ma=function(){"undefined"!=typeof ha&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",Vh(this.b,gi(this,this.h)),this.dispatchEvent("timeout"),this.abort(8));};function hi(a,b){a.c=!1;a.a&&(a.f=!0,a.a.abort(),a.f=!1);a.h=b;ki(a);li(a);}
function ki(a){a.G||(a.G=!0,a.dispatchEvent("complete"),a.dispatchEvent("error"));}k.abort=function(){this.a&&this.c&&(Vh(this.b,gi(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),li(this));};k.Da=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),li(this,!0));bi.$a.Da.call(this);};k.Ub=function(){this.xa||(this.N||this.i||this.f?mi(this):this.Ic());};k.Ic=function(){mi(this);};
function mi(a){if(a.c&&"undefined"!=typeof ha)if(a.A[1]&&4==ni(a)&&2==oi(a))Vh(a.b,gi(a,"Local request error detected and ignored"));else if(a.i&&4==ni(a))Dd(a.Ub,0,a);else if(a.dispatchEvent("readystatechange"),4==ni(a)){Vh(a.b,gi(a,"Request complete"));a.c=!1;try{var b=oi(a);a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1;}var d;if(!(d=c)){var e;if(e=0===b){var f=String(a.l).match(Ld)[1]||null;if(!f&&l.self&&l.self.location){var g=l.self.location.protocol;
f=g.substr(0,g.length-1);}e=!di.test(f?f.toLowerCase():"");}d=e;}if(d)a.dispatchEvent("complete"),a.dispatchEvent("success");else {try{var h=2<ni(a)?a.a.statusText:"";}catch(n){Vh(a.b,"Can not get status: "+n.message),h="";}a.h=h+" ["+oi(a)+"]";ki(a);}}finally{li(a);}}}function li(a,b){if(a.a){ii(a);var c=a.a,d=a.A[0]?la:null;a.a=null;a.A=null;b||a.dispatchEvent("ready");try{c.onreadystatechange=d;}catch(e){(a=a.b)&&a.log(Nh,"Problem encountered resetting onreadystatechange: "+e.message,void 0);}}}
function ii(a){a.a&&a.u&&(a.a.ontimeout=null);a.o&&(l.clearTimeout(a.o),a.o=null);}function ni(a){return a.a?a.a.readyState:0}function oi(a){try{return 2<ni(a)?a.a.status:-1}catch(b){return -1}}function pi(a){try{return a.a?a.a.responseText:""}catch(b){return Vh(a.b,"Can not get responseText: "+b.message),""}}
k.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.m){case ci:case "text":return this.a.responseText;case "arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var a=this.b;a&&a.log(Nh,"Response type "+this.m+" is not supported on this browser",void 0);return null}catch(b){return Vh(this.b,"Can not get response: "+b.message),null}};function gi(a,b){return b+" ["+a.P+" "+a.l+" "+oi(a)+"]"}function qi(a){var b=ri;this.g=[];this.u=b;this.o=a||null;this.f=this.a=!1;this.c=void 0;this.m=this.A=this.i=!1;this.h=0;this.b=null;this.l=0;}qi.prototype.cancel=function(a){if(this.a)this.c instanceof qi&&this.c.cancel();else {if(this.b){var b=this.b;delete this.b;a?b.cancel(a):(b.l--,0>=b.l&&b.cancel());}this.u?this.u.call(this.o,this):this.m=!0;this.a||(a=new si(this),ti(this),ui(this,!1,a));}};qi.prototype.v=function(a,b){this.i=!1;ui(this,a,b);};function ui(a,b,c){a.a=!0;a.c=c;a.f=!b;vi(a);}
function ti(a){if(a.a){if(!a.m)throw new wi(a);a.m=!1;}}function xi(a,b){yi(a,null,b,void 0);}function yi(a,b,c,d){a.g.push([b,c,d]);a.a&&vi(a);}qi.prototype.then=function(a,b,c){var d,e,f=new D(function(g,h){d=g;e=h;});yi(this,d,function(g){g instanceof si?f.cancel():e(g);});return f.then(a,b,c)};qi.prototype.$goog_Thenable=!0;function zi(a){return Sa(a.g,function(b){return oa(b[1])})}
function vi(a){if(a.h&&a.a&&zi(a)){var b=a.h,c=Ai[b];c&&(l.clearTimeout(c.a),delete Ai[b]);a.h=0;}a.b&&(a.b.l--,delete a.b);b=a.c;for(var d=c=!1;a.g.length&&!a.i;){var e=a.g.shift(),f=e[0],g=e[1];e=e[2];if(f=a.f?g:f)try{var h=f.call(e||a.o,b);void 0!==h&&(a.f=a.f&&(h==b||h instanceof Error),a.c=b=h);if(Ea(b)||"function"===typeof l.Promise&&b instanceof l.Promise)d=!0,a.i=!0;}catch(n){b=n,a.f=!0,zi(a)||(c=!0);}}a.c=b;d&&(h=q(a.v,a,!0),d=q(a.v,a,!1),b instanceof qi?(yi(b,h,d),b.A=!0):b.then(h,d));c&&(b=
new Bi(b),Ai[b.a]=b,a.h=b.a);}function wi(){u.call(this);}r(wi,u);wi.prototype.message="Deferred has already fired";wi.prototype.name="AlreadyCalledError";function si(){u.call(this);}r(si,u);si.prototype.message="Deferred was canceled";si.prototype.name="CanceledError";function Bi(a){this.a=l.setTimeout(q(this.c,this),0);this.b=a;}Bi.prototype.c=function(){delete Ai[this.a];throw this.b;};var Ai={};function Ci(a){var c=document,d=yb(a).toString(),e=oc(document,"SCRIPT"),f={Vb:e,Ma:void 0},g=new qi(f),h=null,n=5E3;(h=window.setTimeout(function(){Di(e,!0);var p=new Ei(Fi,"Timeout reached for loading script "+d);ti(g);ui(g,!1,p);},n),f.Ma=h);e.onload=e.onreadystatechange=function(){e.readyState&&"loaded"!=e.readyState&&"complete"!=e.readyState||(Di(e,!1,h),ti(g),ui(g,!0,null));};e.onerror=function(){Di(e,!0,h);var p=new Ei(Gi,"Error while loading script "+
d);ti(g);ui(g,!1,p);};f={};z(f,{type:"text/javascript",charset:"UTF-8"});lc(e,f);Ob(e,a);Hi(c).appendChild(e);return g}function Hi(a){var b;return (b=(a||document).getElementsByTagName("HEAD"))&&0!=b.length?b[0]:a.documentElement}function ri(){if(this&&this.Vb){var a=this.Vb;a&&"SCRIPT"==a.tagName&&Di(a,!0,this.Ma);}}
function Di(a,b,c){null!=c&&l.clearTimeout(c);a.onload=la;a.onerror=la;a.onreadystatechange=la;b&&window.setTimeout(function(){a&&a.parentNode&&a.parentNode.removeChild(a);},0);}var Gi=0,Fi=1;function Ei(a,b){var c="Jsloader error (code #"+a+")";b&&(c+=": "+b);u.call(this,c);this.code=a;}r(Ei,u);function Ii(a){this.f=a;}r(Ii,Bh);Ii.prototype.a=function(){return new this.f};Ii.prototype.b=function(){return {}};
function Ji(a,b,c){this.c=a;a=b||{};this.l=a.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token";this.v=a.secureTokenTimeout||Ki;this.g=nb(a.secureTokenHeaders||Li);this.h=a.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/";this.i=a.identityPlatformEndpoint||"https://identitytoolkit.googleapis.com/v2/";this.m=a.firebaseTimeout||Mi;this.a=nb(a.firebaseHeaders||Ni);c&&(this.a["X-Client-Version"]=c,this.g["X-Client-Version"]=c);c="Node"==Ke();c=l.XMLHttpRequest||
c&&firebase$1.INTERNAL.node&&firebase$1.INTERNAL.node.XMLHttpRequest;if(!c&&!Je())throw new t("internal-error","The XMLHttpRequest compatibility library was not found.");this.f=void 0;Je()?this.f=new Wh(self):Le()?this.f=new Ii(c):this.f=new Gh;this.b=null;}var Oi,Eg="idToken",Ki=new Ze(3E4,6E4),Li={"Content-Type":"application/x-www-form-urlencoded"},Mi=new Ze(3E4,6E4),Ni={"Content-Type":"application/json"};function Pi(a,b){b?a.a["X-Firebase-Locale"]=b:delete a.a["X-Firebase-Locale"];}
function Qi(a,b){b&&(a.l=Ri("https://securetoken.googleapis.com/v1/token",b),a.h=Ri("https://www.googleapis.com/identitytoolkit/v3/relyingparty/",b),a.i=Ri("https://identitytoolkit.googleapis.com/v2/",b));}function Ri(a,b){a=be(a);b=be(b.url);a.c=a.a+a.c;Od(a,b.f);a.a=b.a;Pd(a,b.g);return a.toString()}function Si(a,b){b?(a.a["X-Client-Version"]=b,a.g["X-Client-Version"]=b):(delete a.a["X-Client-Version"],delete a.g["X-Client-Version"]);}Ji.prototype.S=function(){return this.b};
function Ti(a,b,c,d,e,f,g){ue()||Je()?a=q(a.u,a):(Oi||(Oi=new D(function(h,n){Ui(h,n);})),a=q(a.o,a));a(b,c,d,e,f,g);}
Ji.prototype.u=function(a,b,c,d,e,f){if(Je()&&("undefined"===typeof l.fetch||"undefined"===typeof l.Headers||"undefined"===typeof l.Request))throw new t("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var g=new bi(this.f);if(f){g.g=Math.max(0,f);var h=setTimeout(function(){g.dispatchEvent("timeout");},f);}qd(g,"complete",function(){h&&clearTimeout(h);var n=null;try{n=
JSON.parse(pi(this))||null;}catch(p){n=null;}b&&b(n);});wd(g,"ready",function(){h&&clearTimeout(h);Xc(this);});wd(g,"timeout",function(){h&&clearTimeout(h);Xc(this);b&&b(null);});fi(g,a,c,d,e);};var Vi=new qb(rb,"https://apis.google.com/js/client.js?onload=%{onload}"),Wi="__fcb"+Math.floor(1E6*Math.random()).toString();
function Ui(a,b){if(((window.gapi||{}).client||{}).request)a();else {l[Wi]=function(){((window.gapi||{}).client||{}).request?a():b(Error("CORS_UNSUPPORTED"));};var c=zb(Vi,{onload:Wi});xi(Ci(c),function(){b(Error("CORS_UNSUPPORTED"));});}}
Ji.prototype.o=function(a,b,c,d,e){var f=this;Oi.then(function(){window.gapi.client.setApiKey(f.c);var g=window.gapi.auth.getToken();window.gapi.auth.setToken(null);window.gapi.client.request({path:a,method:c,body:d,headers:e,authType:"none",callback:function(h){window.gapi.auth.setToken(g);b&&b(h);}});}).s(function(g){b&&b({error:{message:g&&g.message||"CORS_UNSUPPORTED"}});});};
function Xi(a,b){return new D(function(c,d){"refresh_token"==b.grant_type&&b.refresh_token||"authorization_code"==b.grant_type&&b.code?Ti(a,a.l+"?key="+encodeURIComponent(a.c),function(e){e?e.error?d(Yi(e)):e.access_token&&e.refresh_token?c(e):d(new t("internal-error")):d(new t("network-request-failed"));},"POST",fe(b).toString(),a.g,a.v.get()):d(new t("internal-error"));})}
function Zi(a,b,c,d,e,f,g){var h=be(b+c);J(h,"key",a.c);g&&J(h,"cb",va().toString());var n="GET"==d;if(n)for(var p in e)e.hasOwnProperty(p)&&J(h,p,e[p]);return new D(function(v,B){Ti(a,h.toString(),function(A){A?A.error?B(Yi(A,f||{})):v(A):B(new t("network-request-failed"));},d,n?void 0:ke(Ve(e)),a.a,a.m.get());})}function $i(a){a=a.email;if("string"!==typeof a||!De.test(a))throw new t("invalid-email");}function aj(a){"email"in a&&$i(a);}
function bj(a,b){return O(a,cj,{identifier:b,continueUri:Se()?re():"http://localhost"}).then(function(c){return c.signinMethods||[]})}function dj(a){return O(a,ej,{}).then(function(b){return b.authorizedDomains||[]})}function P(a){if(!a[Eg]){if(a.mfaPendingCredential)throw new t("multi-factor-auth-required",null,nb(a));throw new t("internal-error");}}
function fj(a){if(a.phoneNumber||a.temporaryProof){if(!a.phoneNumber||!a.temporaryProof)throw new t("internal-error");}else {if(!a.sessionInfo)throw new t("missing-verification-id");if(!a.code)throw new t("missing-verification-code");}}Ji.prototype.yb=function(){return O(this,gj,{})};Ji.prototype.Ab=function(a,b){return O(this,hj,{idToken:a,email:b})};Ji.prototype.Bb=function(a,b){return O(this,dh,{idToken:a,password:b})};var ij={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};k=Ji.prototype;
k.Cb=function(a,b){var c={idToken:a},d=[];lb(ij,function(e,f){var g=b[f];null===g?d.push(e):f in b&&(c[f]=g);});d.length&&(c.deleteAttribute=d);return O(this,hj,c)};k.ub=function(a,b){a={requestType:"PASSWORD_RESET",email:a};z(a,b);return O(this,jj,a)};k.vb=function(a,b){a={requestType:"EMAIL_SIGNIN",email:a};z(a,b);return O(this,kj,a)};k.tb=function(a,b){a={requestType:"VERIFY_EMAIL",idToken:a};z(a,b);return O(this,lj,a)};
k.Db=function(a,b,c){a={requestType:"VERIFY_AND_CHANGE_EMAIL",idToken:a,newEmail:b};z(a,c);return O(this,mj,a)};function ph(a,b){return O(a,nj,b)}k.eb=function(a){return O(this,oj,a)};function nh(a,b){return O(a,pj,b).then(function(c){return c.phoneSessionInfo.sessionInfo})}
function qj(a){if(!a.phoneVerificationInfo)throw new t("internal-error");if(!a.phoneVerificationInfo.sessionInfo)throw new t("missing-verification-id");if(!a.phoneVerificationInfo.code)throw new t("missing-verification-code");}function oh(a,b){return O(a,rj,b).then(function(c){return c.phoneResponseInfo.sessionInfo})}function sj(a,b,c){return O(a,tj,{idToken:b,deleteProvider:c})}function uj(a){if(!a.requestUri||!a.sessionId&&!a.postBody&&!a.pendingToken)throw new t("internal-error");}
function vj(a,b){b.oauthIdToken&&b.providerId&&0==b.providerId.indexOf("oidc.")&&!b.pendingToken&&(a.sessionId?b.nonce=a.sessionId:a.postBody&&(a=new Td(a.postBody),je(a,"nonce")&&(b.nonce=a.get("nonce"))));return b}
function wj(a){var b=null;a.needConfirmation?(a.code="account-exists-with-different-credential",b=Ah(a)):"FEDERATED_USER_ID_ALREADY_LINKED"==a.errorMessage?(a.code="credential-already-in-use",b=Ah(a)):"EMAIL_EXISTS"==a.errorMessage?(a.code="email-already-in-use",b=Ah(a)):a.errorMessage&&(b=xj(a.errorMessage));if(b)throw b;P(a);}function Gg(a,b){b.returnIdpCredential=!0;return O(a,yj,b)}function Ig(a,b){b.returnIdpCredential=!0;return O(a,zj,b)}
function Jg(a,b){b.returnIdpCredential=!0;b.autoCreate=!1;return O(a,Aj,b)}function Bj(a){if(!a.oobCode)throw new t("invalid-action-code");}k.mb=function(a,b){return O(this,Cj,{oobCode:a,newPassword:b})};k.Qa=function(a){return O(this,Dj,{oobCode:a})};k.ib=function(a){return O(this,Ej,{oobCode:a})};
var Ej={endpoint:"setAccountInfo",B:Bj,Z:"email",C:!0},Dj={endpoint:"resetPassword",B:Bj,F:function(a){var b=a.requestType;if(!b||!a.email&&"EMAIL_SIGNIN"!=b&&"VERIFY_AND_CHANGE_EMAIL"!=b)throw new t("internal-error");},C:!0},Fj={endpoint:"signupNewUser",B:function(a){$i(a);if(!a.password)throw new t("weak-password");},F:P,U:!0,C:!0},cj={endpoint:"createAuthUri",C:!0},Gj={endpoint:"deleteAccount",M:["idToken"]},tj={endpoint:"setAccountInfo",M:["idToken","deleteProvider"],B:function(a){if(!Array.isArray(a.deleteProvider))throw new t("internal-error");
}},ah={endpoint:"emailLinkSignin",M:["email","oobCode"],B:$i,F:P,U:!0,C:!0},ch={endpoint:"emailLinkSignin",M:["idToken","email","oobCode"],B:$i,F:P,U:!0},Hj={endpoint:"accounts/mfaEnrollment:finalize",M:["idToken","phoneVerificationInfo"],B:qj,F:P,C:!0,Na:!0},Ij={endpoint:"accounts/mfaSignIn:finalize",M:["mfaPendingCredential","phoneVerificationInfo"],B:qj,F:P,C:!0,Na:!0},Jj={endpoint:"getAccountInfo"},kj={endpoint:"getOobConfirmationCode",M:["requestType"],B:function(a){if("EMAIL_SIGNIN"!=a.requestType)throw new t("internal-error");
$i(a);},Z:"email",C:!0},lj={endpoint:"getOobConfirmationCode",M:["idToken","requestType"],B:function(a){if("VERIFY_EMAIL"!=a.requestType)throw new t("internal-error");},Z:"email",C:!0},mj={endpoint:"getOobConfirmationCode",M:["idToken","newEmail","requestType"],B:function(a){if("VERIFY_AND_CHANGE_EMAIL"!=a.requestType)throw new t("internal-error");},Z:"email",C:!0},jj={endpoint:"getOobConfirmationCode",M:["requestType"],B:function(a){if("PASSWORD_RESET"!=a.requestType)throw new t("internal-error");
$i(a);},Z:"email",C:!0},ej={kb:!0,endpoint:"getProjectConfig",Tb:"GET"},Kj={kb:!0,endpoint:"getRecaptchaParam",Tb:"GET",F:function(a){if(!a.recaptchaSiteKey)throw new t("internal-error");}},Cj={endpoint:"resetPassword",B:Bj,Z:"email",C:!0},nj={endpoint:"sendVerificationCode",M:["phoneNumber","recaptchaToken"],Z:"sessionInfo",C:!0},hj={endpoint:"setAccountInfo",M:["idToken"],B:aj,U:!0},dh={endpoint:"setAccountInfo",M:["idToken"],B:function(a){aj(a);if(!a.password)throw new t("weak-password");},F:P,
U:!0},gj={endpoint:"signupNewUser",F:P,U:!0,C:!0},pj={endpoint:"accounts/mfaEnrollment:start",M:["idToken","phoneEnrollmentInfo"],B:function(a){if(!a.phoneEnrollmentInfo)throw new t("internal-error");if(!a.phoneEnrollmentInfo.phoneNumber)throw new t("missing-phone-number");if(!a.phoneEnrollmentInfo.recaptchaToken)throw new t("missing-app-credential");},F:function(a){if(!a.phoneSessionInfo||!a.phoneSessionInfo.sessionInfo)throw new t("internal-error");},C:!0,Na:!0},rj={endpoint:"accounts/mfaSignIn:start",
M:["mfaPendingCredential","mfaEnrollmentId","phoneSignInInfo"],B:function(a){if(!a.phoneSignInInfo||!a.phoneSignInInfo.recaptchaToken)throw new t("missing-app-credential");},F:function(a){if(!a.phoneResponseInfo||!a.phoneResponseInfo.sessionInfo)throw new t("internal-error");},C:!0,Na:!0},yj={endpoint:"verifyAssertion",B:uj,Xa:vj,F:wj,U:!0,C:!0},Aj={endpoint:"verifyAssertion",B:uj,Xa:vj,F:function(a){if(a.errorMessage&&"USER_NOT_FOUND"==a.errorMessage)throw new t("user-not-found");if(a.errorMessage)throw xj(a.errorMessage);
P(a);},U:!0,C:!0},zj={endpoint:"verifyAssertion",B:function(a){uj(a);if(!a.idToken)throw new t("internal-error");},Xa:vj,F:wj,U:!0},Lj={endpoint:"verifyCustomToken",B:function(a){if(!a.token)throw new t("invalid-custom-token");},F:P,U:!0,C:!0},bh={endpoint:"verifyPassword",B:function(a){$i(a);if(!a.password)throw new t("wrong-password");},F:P,U:!0,C:!0},oj={endpoint:"verifyPhoneNumber",B:fj,F:P,C:!0},jh={endpoint:"verifyPhoneNumber",B:function(a){if(!a.idToken)throw new t("internal-error");fj(a);},
F:function(a){if(a.temporaryProof)throw a.code="credential-already-in-use",Ah(a);P(a);}},kh={Gb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",B:fj,F:P,C:!0},Mj={endpoint:"accounts/mfaEnrollment:withdraw",M:["idToken","mfaEnrollmentId"],F:function(a){if(!!a[Eg]^!!a.refreshToken)throw new t("internal-error");},C:!0,Na:!0};
function O(a,b,c){if(!nf(c,b.M))return F(new t("internal-error"));var d=!!b.Na,e=b.Tb||"POST",f;return E(c).then(b.B).then(function(){b.U&&(c.returnSecureToken=!0);b.C&&a.b&&"undefined"===typeof c.tenantId&&(c.tenantId=a.b);return d?Zi(a,a.i,b.endpoint,e,c,b.Gb,b.kb||!1):Zi(a,a.h,b.endpoint,e,c,b.Gb,b.kb||!1)}).then(function(g){f=g;return b.Xa?b.Xa(c,f):f}).then(b.F).then(function(){if(!b.Z)return f;if(!(b.Z in f))throw new t("internal-error");return f[b.Z]})}
function xj(a){return Yi({error:{errors:[{message:a}],code:400,message:a}})}
function Yi(a,b){var c=(a.error&&a.error.errors&&a.error.errors[0]||{}).reason||"";var d={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(c=d[c]?new t(d[c]):null)return c;c=a.error&&a.error.message||"";d={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",
MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_OR_INVALID_NONCE:"missing-or-invalid-nonce",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",
EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",INVALID_PROVIDER_ID:"invalid-provider-id",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",
OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",
QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",REJECTED_CREDENTIAL:"rejected-credential",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_DYNAMIC_LINK_DOMAIN:"invalid-dynamic-link-domain",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash",UNSUPPORTED_TENANT_OPERATION:"unsupported-tenant-operation",
INVALID_TENANT_ID:"invalid-tenant-id",TENANT_ID_MISMATCH:"tenant-id-mismatch",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",EMAIL_CHANGE_NEEDS_VERIFICATION:"email-change-needs-verification",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",
UNSUPPORTED_FIRST_FACTOR:"unsupported-first-factor",UNVERIFIED_EMAIL:"unverified-email"};z(d,b||{});b=(b=c.match(/^[^\s]+\s*:\s*([\s\S]*)$/))&&1<b.length?b[1]:void 0;for(var e in d)if(0===c.indexOf(e))return new t(d[e],b);!b&&a&&(b=Ue(a));return new t("internal-error",b)}function Nj(a){this.b=a;this.a=null;this.qb=Oj(this);}
function Oj(a){return Pj().then(function(){return new D(function(b,c){L("gapi.iframes.getContext")().open({where:document.body,url:a.b,messageHandlersFilter:L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},function(d){function e(){clearTimeout(f);b();}a.a=d;a.a.restyle({setHideOnLeave:!1});var f=setTimeout(function(){c(Error("Network Error"));},Qj.get());d.ping(e).then(e,function(){c(Error("Network Error"));});});})})}
function Rj(a,b){return a.qb.then(function(){return new D(function(c){a.a.send(b.type,b,c,L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));})})}function Sj(a,b){a.qb.then(function(){a.a.register("authEvent",b,L("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));});}var Tj=new qb(rb,"https://apis.google.com/js/api.js?onload=%{onload}"),Uj=new Ze(3E4,6E4),Qj=new Ze(5E3,15E3),Vj=null;
function Pj(){return Vj?Vj:Vj=(new D(function(a,b){function c(){Ye();L("gapi.load")("gapi.iframes",{callback:a,ontimeout:function(){Ye();b(Error("Network Error"));},timeout:Uj.get()});}if(L("gapi.iframes.Iframe"))a();else if(L("gapi.load"))c();else {var d="__iframefcb"+Math.floor(1E6*Math.random()).toString();l[d]=function(){L("gapi.load")?c():b(Error("Network Error"));};d=zb(Tj,{onload:d});E(Ci(d)).s(function(){b(Error("Network Error"));});}})).s(function(a){Vj=null;throw a;})}function Wj(a,b,c,d){this.l=a;this.h=b;this.i=c;this.g=d;this.f=null;this.g?(a=be(this.g.url),a=ce(a.f,a.a,a.g,"/emulator/auth/iframe")):a=ce("https",this.l,null,"/__/auth/iframe");this.a=a;J(this.a,"apiKey",this.h);J(this.a,"appName",this.i);this.b=null;this.c=[];}Wj.prototype.toString=function(){this.f?J(this.a,"v",this.f):ie(this.a.b,"v");this.b?J(this.a,"eid",this.b):ie(this.a.b,"eid");this.c.length?J(this.a,"fw",this.c.join(",")):ie(this.a.b,"fw");return this.a.toString()};
function Xj(a,b,c,d,e,f){this.u=a;this.o=b;this.c=c;this.v=d;this.m=f;this.i=this.g=this.l=null;this.a=e;this.h=this.f=null;}Xj.prototype.xb=function(a){this.h=a;return this};
Xj.prototype.toString=function(){if(this.m){var a=be(this.m.url);a=ce(a.f,a.a,a.g,"/emulator/auth/handler");}else a=ce("https",this.u,null,"/__/auth/handler");J(a,"apiKey",this.o);J(a,"appName",this.c);J(a,"authType",this.v);if(this.a.isOAuthProvider){var b=this.a;try{var c=firebase$1.app(this.c).auth().ka();}catch(h){c=null;}b.nb=c;J(a,"providerId",this.a.providerId);c=this.a;b=Ve(c.Hb);for(var d in b)b[d]=b[d].toString();d=c.Pc;b=nb(b);for(var e=0;e<d.length;e++){var f=d[e];f in b&&delete b[f];}c.ob&&
c.nb&&!b[c.ob]&&(b[c.ob]=c.nb);mb(b)||J(a,"customParameters",Ue(b));}"function"===typeof this.a.Pb&&(c=this.a.Pb(),c.length&&J(a,"scopes",c.join(",")));this.l?J(a,"redirectUrl",this.l):ie(a.b,"redirectUrl");this.g?J(a,"eventId",this.g):ie(a.b,"eventId");this.i?J(a,"v",this.i):ie(a.b,"v");if(this.b)for(var g in this.b)this.b.hasOwnProperty(g)&&!ae(a,g)&&J(a,g,this.b[g]);this.h?J(a,"tid",this.h):ie(a.b,"tid");this.f?J(a,"eid",this.f):ie(a.b,"eid");g=Yj(this.c);g.length&&J(a,"fw",g.join(","));return a.toString()};
function Yj(a){try{return firebase$1.app(a).auth().Ga()}catch(b){return []}}function Zj(a,b,c,d,e,f){this.o=a;this.g=b;this.b=c;this.f=f;this.c=d||null;this.i=e||null;this.l=this.u=this.A=null;this.h=[];this.v=this.a=null;}
function ak(a){var b=re();return dj(a).then(function(c){a:{var d=be(b),e=d.f;d=d.a;for(var f=0;f<c.length;f++){var g=c[f];var h=d;var n=e;0==g.indexOf("chrome-extension://")?h=be(g).a==h&&"chrome-extension"==n:"http"!=n&&"https"!=n?h=!1:Ce.test(g)?h=h==g:(g=g.split(".").join("\\."),h=(new RegExp("^(.+\\."+g+"|"+g+")$","i")).test(h));if(h){c=!0;break a}}c=!1;}if(!c)throw new yh(re());})}
function bk(a){if(a.v)return a.v;a.v=Ee().then(function(){if(!a.u){var b=a.c,c=a.i,d=Yj(a.b),e=new Wj(a.o,a.g,a.b,a.f);e.f=b;e.b=c;e.c=Za(d||[]);a.u=e.toString();}a.m=new Nj(a.u);ck(a);});return a.v}k=Zj.prototype;k.Nb=function(a,b,c){var d=new t("popup-closed-by-user"),e=new t("web-storage-unsupported"),f=this,g=!1;return this.la().then(function(){dk(f).then(function(h){h||(a&&ye(a),b(e),g=!0);});}).s(function(){}).then(function(){if(!g)return Be(a)}).then(function(){if(!g)return Ed(c).then(function(){b(d);})})};
k.Wb=function(){var a=K();return !Te(a)&&!Xe(a)};k.Sb=function(){return !1};
k.Lb=function(a,b,c,d,e,f,g,h){if(!a)return F(new t("popup-blocked"));if(g&&!Te())return this.la().s(function(p){ye(a);e(p);}),d(),E();this.a||(this.a=ak(ek(this)));var n=this;return this.a.then(function(){var p=n.la().s(function(v){ye(a);e(v);throw v;});d();return p}).then(function(){sh(c);if(!g){var p=fk(n.o,n.g,n.b,b,c,null,f,n.c,void 0,n.i,h,n.f);se(p,a);}}).s(function(p){"auth/network-request-failed"==p.code&&(n.a=null);throw p;})};
function ek(a){a.l||(a.A=a.c?Oe(a.c,Yj(a.b)):null,a.l=new Ji(a.g,Ca(a.i),a.A),a.f&&Qi(a.l,a.f));return a.l}k.Mb=function(a,b,c,d){this.a||(this.a=ak(ek(this)));var e=this;return this.a.then(function(){sh(b);var f=fk(e.o,e.g,e.b,a,b,re(),c,e.c,void 0,e.i,d,e.f);se(f);}).s(function(f){"auth/network-request-failed"==f.code&&(e.a=null);throw f;})};k.la=function(){var a=this;return bk(this).then(function(){return a.m.qb}).s(function(){a.a=null;throw new t("network-request-failed");})};k.Zb=function(){return !0};
function fk(a,b,c,d,e,f,g,h,n,p,v,B){a=new Xj(a,b,c,d,e,B);a.l=f;a.g=g;a.i=h;a.b=nb(n||null);a.f=p;return a.xb(v).toString()}function ck(a){if(!a.m)throw Error("IfcHandler must be initialized!");Sj(a.m,function(b){var c={};if(b&&b.authEvent){var d=!1;b=uh(b.authEvent);for(c=0;c<a.h.length;c++)d=a.h[c](b)||d;c={};c.status=d?"ACK":"ERROR";return E(c)}c.status="ERROR";return E(c)});}
function dk(a){var b={type:"webStorageSupport"};return bk(a).then(function(){return Rj(a.m,b)}).then(function(c){if(c&&c.length&&"undefined"!==typeof c[0].webStorageSupport)return c[0].webStorageSupport;throw Error();})}k.Ea=function(a){this.h.push(a);};k.Ra=function(a){Xa(this.h,function(b){return b==a});};function gk(a){this.a=a||firebase$1.INTERNAL.reactNative&&firebase$1.INTERNAL.reactNative.AsyncStorage;if(!this.a)throw new t("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage";}k=gk.prototype;k.get=function(a){return E(this.a.getItem(a)).then(function(b){return b&&We(b)})};k.set=function(a,b){return E(this.a.setItem(a,Ue(b)))};k.T=function(a){return E(this.a.removeItem(a))};k.ca=function(){};k.ia=function(){};function hk(a){this.b=a;this.a={};this.f=q(this.c,this);}var ik=[];function jk(){var a=Je()?self:null;w(ik,function(c){c.b==a&&(b=c);});if(!b){var b=new hk(a);ik.push(b);}return b}
hk.prototype.c=function(a){var b=a.data.eventType,c=a.data.eventId,d=this.a[b];if(d&&0<d.length){a.ports[0].postMessage({status:"ack",eventId:c,eventType:b,response:null});var e=[];w(d,function(f){e.push(E().then(function(){return f(a.origin,a.data.data)}));});Jc(e).then(function(f){var g=[];w(f,function(h){g.push({fulfilled:h.Ob,value:h.value,reason:h.reason?h.reason.message:void 0});});w(g,function(h){for(var n in h)"undefined"===typeof h[n]&&delete h[n];});a.ports[0].postMessage({status:"done",eventId:c,
eventType:b,response:g});});}};function kk(a,b,c){mb(a.a)&&a.b.addEventListener("message",a.f);"undefined"===typeof a.a[b]&&(a.a[b]=[]);a.a[b].push(c);}function lk(a){this.a=a;}lk.prototype.postMessage=function(a,b){this.a.postMessage(a,b);};function mk(a){this.c=a;this.b=!1;this.a=[];}
function nk(a,b,c,d){var e,f=c||{},g,h,n,p=null;if(a.b)return F(Error("connection_unavailable"));var v=d?800:50,B="undefined"!==typeof MessageChannel?new MessageChannel:null;return (new D(function(A,Q){B?(e=Math.floor(Math.random()*Math.pow(10,20)).toString(),B.port1.start(),h=setTimeout(function(){Q(Error("unsupported_event"));},v),g=function(xa){xa.data.eventId===e&&("ack"===xa.data.status?(clearTimeout(h),n=setTimeout(function(){Q(Error("timeout"));},3E3)):"done"===xa.data.status?(clearTimeout(n),
"undefined"!==typeof xa.data.response?A(xa.data.response):Q(Error("unknown_error"))):(clearTimeout(h),clearTimeout(n),Q(Error("invalid_response"))));},p={messageChannel:B,onMessage:g},a.a.push(p),B.port1.addEventListener("message",g),a.c.postMessage({eventType:b,eventId:e,data:f},[B.port2])):Q(Error("connection_unavailable"));})).then(function(A){ok(a,p);return A}).s(function(A){ok(a,p);throw A;})}
function ok(a,b){if(b){var c=b.messageChannel,d=b.onMessage;c&&(c.port1.removeEventListener("message",d),c.port1.close());Xa(a.a,function(e){return e==b});}}mk.prototype.close=function(){for(;0<this.a.length;)ok(this,this.a[0]);this.b=!0;};function pk(){if(!qk())throw new t("web-storage-unsupported");this.c={};this.a=[];this.b=0;this.v=l.indexedDB;this.type="indexedDB";this.g=this.m=this.f=this.l=null;this.o=!1;this.h=null;var a=this;Je()&&self?(this.m=jk(),kk(this.m,"keyChanged",function(b,c){return rk(a).then(function(d){0<d.length&&w(a.a,function(e){e(d);});return {keyProcessed:Va(d,c.key)}})}),kk(this.m,"ping",function(){return E(["keyChanged"])})):ff().then(function(b){if(a.h=b)a.g=new mk(new lk(b)),nk(a.g,"ping",null,!0).then(function(c){c[0].fulfilled&&
Va(c[0].value,"keyChanged")&&(a.o=!0);}).s(function(){});});}var sk;function tk(a){return new D(function(b,c){var d=a.v.deleteDatabase("firebaseLocalStorageDb");d.onsuccess=function(){b();};d.onerror=function(e){c(Error(e.target.error));};})}
function uk(a){return new D(function(b,c){var d=a.v.open("firebaseLocalStorageDb",1);d.onerror=function(e){try{e.preventDefault();}catch(f){}c(Error(e.target.error));};d.onupgradeneeded=function(e){e=e.target.result;try{e.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"});}catch(f){c(f);}};d.onsuccess=function(e){e=e.target.result;e.objectStoreNames.contains("firebaseLocalStorage")?b(e):tk(a).then(function(){return uk(a)}).then(function(f){b(f);}).s(function(f){c(f);});};})}
function vk(a){a.i||(a.i=uk(a));return a.i}function wk(a,b){function c(e,f){vk(a).then(b).then(e).s(function(g){if(3<++d)f(g);else return vk(a).then(function(h){h.close();a.i=void 0;return c(e,f)})});}var d=0;return new D(c)}function qk(){try{return !!l.indexedDB}catch(a){return !1}}function xk(a){return a.objectStore("firebaseLocalStorage")}function yk(a,b){return a.transaction(["firebaseLocalStorage"],b?"readwrite":"readonly")}
function zk(a){return new D(function(b,c){a.onsuccess=function(d){d&&d.target?b(d.target.result):b();};a.onerror=function(d){c(d.target.error);};})}k=pk.prototype;k.set=function(a,b){var c=this,d=!1;return wk(this,function(e){e=xk(yk(e,!0));return zk(e.get(a))}).then(function(e){return wk(c,function(f){f=xk(yk(f,!0));if(e)return e.value=b,zk(f.put(e));c.b++;d=!0;var g={};g.fbase_key=a;g.value=b;return zk(f.add(g))})}).then(function(){c.c[a]=b;return Ak(c,a)}).na(function(){d&&c.b--;})};
function Ak(a,b){return a.g&&a.h&&ef()===a.h?nk(a.g,"keyChanged",{key:b},a.o).then(function(){}).s(function(){}):E()}k.get=function(a){return wk(this,function(b){return zk(xk(yk(b,!1)).get(a))}).then(function(b){return b&&b.value})};k.T=function(a){var b=this,c=!1;return wk(this,function(d){c=!0;b.b++;return zk(xk(yk(d,!0))["delete"](a))}).then(function(){delete b.c[a];return Ak(b,a)}).na(function(){c&&b.b--;})};
function rk(a){return vk(a).then(function(b){var c=xk(yk(b,!1));return c.getAll?zk(c.getAll()):new D(function(d,e){var f=[],g=c.openCursor();g.onsuccess=function(h){(h=h.target.result)?(f.push(h.value),h["continue"]()):d(f);};g.onerror=function(h){e(h.target.error);};})}).then(function(b){var c={},d=[];if(0==a.b){for(d=0;d<b.length;d++)c[b[d].fbase_key]=b[d].value;d=te(a.c,c);a.c=c;}return d})}k.ca=function(a){0==this.a.length&&Bk(this);this.a.push(a);};
k.ia=function(a){Xa(this.a,function(b){return b==a});0==this.a.length&&Ck(this);};function Bk(a){function b(){a.f=setTimeout(function(){a.l=rk(a).then(function(c){0<c.length&&w(a.a,function(d){d(c);});}).then(function(){b();}).s(function(c){"STOP_EVENT"!=c.message&&b();});},800);}Ck(a);b();}function Ck(a){a.l&&a.l.cancel("STOP_EVENT");a.f&&(clearTimeout(a.f),a.f=null);}function Dk(a){var b=this,c=null;this.a=[];this.type="indexedDB";this.c=a;this.b=E().then(function(){if(qk()){var d=Qe(),e="__sak"+d;sk||(sk=new pk);c=sk;return c.set(e,d).then(function(){return c.get(e)}).then(function(f){if(f!==d)throw Error("indexedDB not supported!");return c.T(e)}).then(function(){return c}).s(function(){return b.c})}return b.c}).then(function(d){b.type=d.type;d.ca(function(e){w(b.a,function(f){f(e);});});return d});}k=Dk.prototype;k.get=function(a){return this.b.then(function(b){return b.get(a)})};
k.set=function(a,b){return this.b.then(function(c){return c.set(a,b)})};k.T=function(a){return this.b.then(function(b){return b.T(a)})};k.ca=function(a){this.a.push(a);};k.ia=function(a){Xa(this.a,function(b){return b==a});};function Ek(){this.a={};this.type="inMemory";}k=Ek.prototype;k.get=function(a){return E(this.a[a])};k.set=function(a,b){this.a[a]=b;return E()};k.T=function(a){delete this.a[a];return E()};k.ca=function(){};k.ia=function(){};function Fk(){if(!Gk()){if("Node"==Ke())throw new t("internal-error","The LocalStorage compatibility library was not found.");throw new t("web-storage-unsupported");}this.a=Hk()||firebase$1.INTERNAL.node.localStorage;this.type="localStorage";}function Hk(){try{var a=l.localStorage,b=Qe();a&&(a.setItem(b,"1"),a.removeItem(b));return a}catch(c){return null}}
function Gk(){var a="Node"==Ke();a=Hk()||a&&firebase$1.INTERNAL.node&&firebase$1.INTERNAL.node.localStorage;if(!a)return !1;try{return a.setItem("__sak","1"),a.removeItem("__sak"),!0}catch(b){return !1}}k=Fk.prototype;k.get=function(a){var b=this;return E().then(function(){var c=b.a.getItem(a);return We(c)})};k.set=function(a,b){var c=this;return E().then(function(){var d=Ue(b);null===d?c.T(a):c.a.setItem(a,d);})};k.T=function(a){var b=this;return E().then(function(){b.a.removeItem(a);})};
k.ca=function(a){l.window&&nd(l.window,"storage",a);};k.ia=function(a){l.window&&H(l.window,"storage",a);};function Ik(){this.type="nullStorage";}k=Ik.prototype;k.get=function(){return E(null)};k.set=function(){return E()};k.T=function(){return E()};k.ca=function(){};k.ia=function(){};function Jk(){if(!Kk()){if("Node"==Ke())throw new t("internal-error","The SessionStorage compatibility library was not found.");throw new t("web-storage-unsupported");}this.a=Lk()||firebase$1.INTERNAL.node.sessionStorage;this.type="sessionStorage";}function Lk(){try{var a=l.sessionStorage,b=Qe();a&&(a.setItem(b,"1"),a.removeItem(b));return a}catch(c){return null}}
function Kk(){var a="Node"==Ke();a=Lk()||a&&firebase$1.INTERNAL.node&&firebase$1.INTERNAL.node.sessionStorage;if(!a)return !1;try{return a.setItem("__sak","1"),a.removeItem("__sak"),!0}catch(b){return !1}}k=Jk.prototype;k.get=function(a){var b=this;return E().then(function(){var c=b.a.getItem(a);return We(c)})};k.set=function(a,b){var c=this;return E().then(function(){var d=Ue(b);null===d?c.T(a):c.a.setItem(a,d);})};k.T=function(a){var b=this;return E().then(function(){b.a.removeItem(a);})};k.ca=function(){};
k.ia=function(){};function Mk(){var a={};a.Browser=Nk;a.Node=Ok;a.ReactNative=Pk;a.Worker=Qk;this.a=a[Ke()];}var Rk,Nk={D:Fk,ab:Jk},Ok={D:Fk,ab:Jk},Pk={D:gk,ab:Ik},Qk={D:Fk,ab:Ik};var Sk={qd:"local",NONE:"none",sd:"session"};function Tk(a){var b=new t("invalid-persistence-type"),c=new t("unsupported-persistence-type");a:{for(d in Sk)if(Sk[d]==a){var d=!0;break a}d=!1;}if(!d||"string"!==typeof a)throw b;switch(Ke()){case "ReactNative":if("session"===a)throw c;break;case "Node":if("none"!==a)throw c;break;case "Worker":if("session"===a||!qk()&&"none"!==a)throw c;break;default:if(!Pe()&&"none"!==a)throw c;}}
function Uk(){var a=!Xe(K())&&Ie()?!0:!1,b=Te(),c=Pe();this.v=a;this.h=b;this.l=c;this.a={};Rk||(Rk=new Mk);a=Rk;try{this.g=!qe()&&df()||!l.indexedDB?new a.a.D:new Dk(Je()?new Ek:new a.a.D);}catch(d){this.g=new Ek,this.h=!0;}try{this.i=new a.a.ab;}catch(d){this.i=new Ek;}this.m=new Ek;this.f=q(this.Xb,this);this.b={};}var Vk;function Wk(){Vk||(Vk=new Uk);return Vk}function Xk(a,b){switch(b){case "session":return a.i;case "none":return a.m;default:return a.g}}
function Yk(a,b){return "firebase:"+a.name+(b?":"+b:"")}function Zk(a,b,c){var d=Yk(b,c),e=Xk(a,b.D);return a.get(b,c).then(function(f){var g=null;try{g=We(l.localStorage.getItem(d));}catch(h){}if(g&&!f)return l.localStorage.removeItem(d),a.set(b,g,c);g&&f&&"localStorage"!=e.type&&l.localStorage.removeItem(d);})}k=Uk.prototype;k.get=function(a,b){return Xk(this,a.D).get(Yk(a,b))};function $k(a,b,c){c=Yk(b,c);"local"==b.D&&(a.b[c]=null);return Xk(a,b.D).T(c)}
k.set=function(a,b,c){var d=Yk(a,c),e=this,f=Xk(this,a.D);return f.set(d,b).then(function(){return f.get(d)}).then(function(g){"local"==a.D&&(e.b[d]=g);})};k.addListener=function(a,b,c){a=Yk(a,b);this.l&&(this.b[a]=l.localStorage.getItem(a));mb(this.a)&&(Xk(this,"local").ca(this.f),this.h||(qe()||!df())&&l.indexedDB||!this.l||al(this));this.a[a]||(this.a[a]=[]);this.a[a].push(c);};
k.removeListener=function(a,b,c){a=Yk(a,b);this.a[a]&&(Xa(this.a[a],function(d){return d==c}),0==this.a[a].length&&delete this.a[a]);mb(this.a)&&(Xk(this,"local").ia(this.f),bl(this));};function al(a){bl(a);a.c=setInterval(function(){for(var b in a.a){var c=l.localStorage.getItem(b),d=a.b[b];c!=d&&(a.b[b]=c,c=new bd({type:"storage",key:b,target:window,oldValue:d,newValue:c,a:!0}),a.Xb(c));}},1E3);}function bl(a){a.c&&(clearInterval(a.c),a.c=null);}
k.Xb=function(a){if(a&&a.g){var b=a.a.key;if(null==b)for(var c in this.a){var d=this.b[c];"undefined"===typeof d&&(d=null);var e=l.localStorage.getItem(c);e!==d&&(this.b[c]=e,this.lb(c));}else if(0==b.indexOf("firebase:")&&this.a[b]){"undefined"!==typeof a.a.a?Xk(this,"local").ia(this.f):bl(this);if(this.v)if(c=l.localStorage.getItem(b),d=a.a.newValue,d!==c)null!==d?l.localStorage.setItem(b,d):l.localStorage.removeItem(b);else if(this.b[b]===d&&"undefined"===typeof a.a.a)return;var f=this;c=function(){if("undefined"!==
typeof a.a.a||f.b[b]!==l.localStorage.getItem(b))f.b[b]=l.localStorage.getItem(b),f.lb(b);};Wb&&ic&&10==ic&&l.localStorage.getItem(b)!==a.a.newValue&&a.a.newValue!==a.a.oldValue?setTimeout(c,10):c();}}else w(a,q(this.lb,this));};k.lb=function(a){this.a[a]&&w(this.a[a],function(b){b();});};function cl(a){this.a=a;this.b=Wk();}var dl={name:"authEvent",D:"local"};function el(a){return a.b.get(dl,a.a).then(function(b){return uh(b)})}function fl(){this.a=Wk();}function gl(){this.b=-1;}function hl(a,b){this.b=il;this.f=l.Uint8Array?new Uint8Array(this.b):Array(this.b);this.g=this.c=0;this.a=[];this.i=a;this.h=b;this.l=l.Int32Array?new Int32Array(64):Array(64);void 0===jl&&(l.Int32Array?jl=new Int32Array(kl):jl=kl);this.reset();}var jl;r(hl,gl);for(var il=64,ll=il-1,ml=[],nl=0;nl<ll;nl++)ml[nl]=0;var ol=Ya(128,ml);hl.prototype.reset=function(){this.g=this.c=0;this.a=l.Int32Array?new Int32Array(this.h):Za(this.h);};
function pl(a){for(var b=a.f,c=a.l,d=0,e=0;e<b.length;)c[d++]=b[e]<<24|b[e+1]<<16|b[e+2]<<8|b[e+3],e=4*d;for(b=16;64>b;b++){e=c[b-15]|0;d=c[b-2]|0;var f=(c[b-16]|0)+((e>>>7|e<<25)^(e>>>18|e<<14)^e>>>3)|0,g=(c[b-7]|0)+((d>>>17|d<<15)^(d>>>19|d<<13)^d>>>10)|0;c[b]=f+g|0;}d=a.a[0]|0;e=a.a[1]|0;var h=a.a[2]|0,n=a.a[3]|0,p=a.a[4]|0,v=a.a[5]|0,B=a.a[6]|0;f=a.a[7]|0;for(b=0;64>b;b++){var A=((d>>>2|d<<30)^(d>>>13|d<<19)^(d>>>22|d<<10))+(d&e^d&h^e&h)|0;g=p&v^~p&B;f=f+((p>>>6|p<<26)^(p>>>11|p<<21)^(p>>>25|p<<
7))|0;g=g+(jl[b]|0)|0;g=f+(g+(c[b]|0)|0)|0;f=B;B=v;v=p;p=n+g|0;n=h;h=e;e=d;d=g+A|0;}a.a[0]=a.a[0]+d|0;a.a[1]=a.a[1]+e|0;a.a[2]=a.a[2]+h|0;a.a[3]=a.a[3]+n|0;a.a[4]=a.a[4]+p|0;a.a[5]=a.a[5]+v|0;a.a[6]=a.a[6]+B|0;a.a[7]=a.a[7]+f|0;}
function ql(a,b,c){void 0===c&&(c=b.length);var d=0,e=a.c;if("string"===typeof b)for(;d<c;)a.f[e++]=b.charCodeAt(d++),e==a.b&&(pl(a),e=0);else if(na(b))for(;d<c;){var f=b[d++];if(!("number"==typeof f&&0<=f&&255>=f&&f==(f|0)))throw Error("message must be a byte array");a.f[e++]=f;e==a.b&&(pl(a),e=0);}else throw Error("message must be string or array");a.c=e;a.g+=c;}
var kl=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,
4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function rl(){hl.call(this,8,sl);}r(rl,hl);var sl=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function tl(a,b,c,d,e,f){this.m=a;this.i=b;this.l=c;this.v=d||null;this.u=e||null;this.o=f;this.h=b+":"+c;this.A=new fl;this.g=new cl(this.h);this.f=null;this.b=[];this.a=this.c=null;}function ul(a){return new t("invalid-cordova-configuration",a)}k=tl.prototype;
k.la=function(){return this.Ia?this.Ia:this.Ia=Fe().then(function(){if("function"!==typeof L("universalLinks.subscribe",l))throw ul("cordova-universal-links-plugin-fix is not installed");if("undefined"===typeof L("BuildInfo.packageName",l))throw ul("cordova-plugin-buildinfo is not installed");if("function"!==typeof L("cordova.plugins.browsertab.openUrl",l))throw ul("cordova-plugin-browsertab is not installed");if("function"!==typeof L("cordova.InAppBrowser.open",l))throw ul("cordova-plugin-inappbrowser is not installed");
},function(){throw new t("cordova-not-ready");})};function vl(){for(var a=20,b=[];0<a;)b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),a--;return b.join("")}function wl(a){var b=new rl;ql(b,a);a=[];var c=8*b.g;56>b.c?ql(b,ol,56-b.c):ql(b,ol,b.b-(b.c-56));for(var d=63;56<=d;d--)b.f[d]=c&255,c/=256;pl(b);for(d=c=0;d<b.i;d++)for(var e=24;0<=e;e-=8)a[c++]=b.a[d]>>e&255;return dg(a)}
k.Nb=function(a,b){b(new t("operation-not-supported-in-this-environment"));return E()};k.Lb=function(){return F(new t("operation-not-supported-in-this-environment"))};k.Zb=function(){return !1};k.Wb=function(){return !0};k.Sb=function(){return !0};
k.Mb=function(a,b,c,d){if(this.c)return F(new t("redirect-operation-pending"));var e=this,f=l.document,g=null,h=null,n=null,p=null;return this.c=E().then(function(){sh(b);return xl(e)}).then(function(){return yl(e,a,b,c,d)}).then(function(){return (new D(function(v,B){h=function(){var A=L("cordova.plugins.browsertab.close",l);v();"function"===typeof A&&A();e.a&&"function"===typeof e.a.close&&(e.a.close(),e.a=null);return !1};e.Ea(h);n=function(){g||(g=Ed(2E3).then(function(){B(new t("redirect-cancelled-by-user"));}));};
p=function(){$e()&&n();};f.addEventListener("resume",n,!1);K().toLowerCase().match(/android/)||f.addEventListener("visibilitychange",p,!1);})).s(function(v){return zl(e).then(function(){throw v;})})}).na(function(){n&&f.removeEventListener("resume",n,!1);p&&f.removeEventListener("visibilitychange",p,!1);g&&g.cancel();h&&e.Ra(h);e.c=null;})};
function yl(a,b,c,d,e){var f=vl(),g=new th(b,d,null,f,new t("no-auth-event"),null,e),h=L("BuildInfo.packageName",l);if("string"!==typeof h)throw new t("invalid-cordova-configuration");var n=L("BuildInfo.displayName",l),p={};if(K().toLowerCase().match(/iphone|ipad|ipod/))p.ibi=h;else if(K().toLowerCase().match(/android/))p.apn=h;else return F(new t("operation-not-supported-in-this-environment"));n&&(p.appDisplayName=n);f=wl(f);p.sessionId=f;var v=fk(a.m,a.i,a.l,b,c,null,d,a.v,p,a.u,e,a.o);return a.la().then(function(){var B=
a.h;return a.A.a.set(dl,g.w(),B)}).then(function(){var B=L("cordova.plugins.browsertab.isAvailable",l);if("function"!==typeof B)throw new t("invalid-cordova-configuration");var A=null;B(function(Q){if(Q){A=L("cordova.plugins.browsertab.openUrl",l);if("function"!==typeof A)throw new t("invalid-cordova-configuration");A(v);}else {A=L("cordova.InAppBrowser.open",l);if("function"!==typeof A)throw new t("invalid-cordova-configuration");Q=K();a.a=A(v,Q.match(/(iPad|iPhone|iPod).*OS 7_\d/i)||Q.match(/(iPad|iPhone|iPod).*OS 8_\d/i)?
"_blank":"_system","location=yes");}});})}function Al(a,b){for(var c=0;c<a.b.length;c++)try{a.b[c](b);}catch(d){}}function xl(a){a.f||(a.f=a.la().then(function(){return new D(function(b){function c(d){b(d);a.Ra(c);return !1}a.Ea(c);Bl(a);})}));return a.f}function zl(a){var b=null;return el(a.g).then(function(c){b=c;c=a.g;return $k(c.b,dl,c.a)}).then(function(){return b})}
function Bl(a){function b(g){d=!0;e&&e.cancel();zl(a).then(function(h){var n=c;if(h&&g&&g.url){var p=null;n=yg(g.url);-1!=n.indexOf("/__/auth/callback")&&(p=be(n),p=We(ae(p,"firebaseError")||null),p=(p="object"===typeof p?Aa(p):null)?new th(h.c,h.b,null,null,p,null,h.S()):new th(h.c,h.b,n,h.f,null,null,h.S()));n=p||c;}Al(a,n);});}var c=new th("unknown",null,null,null,new t("no-auth-event")),d=!1,e=Ed(500).then(function(){return zl(a).then(function(){d||Al(a,c);})}),f=l.handleOpenURL;l.handleOpenURL=function(g){0==
g.toLowerCase().indexOf(L("BuildInfo.packageName",l).toLowerCase()+"://")&&b({url:g});if("function"===typeof f)try{f(g);}catch(h){console.error(h);}};wh||(wh=new vh);xh(b);}k.Ea=function(a){this.b.push(a);xl(this).s(function(b){"auth/invalid-cordova-configuration"===b.code&&(b=new th("unknown",null,null,null,new t("no-auth-event")),a(b));});};k.Ra=function(a){Xa(this.b,function(b){return b==a});};function Cl(a){this.a=a;this.b=Wk();}var Dl={name:"pendingRedirect",D:"session"};function El(a){return a.b.set(Dl,"pending",a.a)}function Fl(a){return $k(a.b,Dl,a.a)}function Gl(a){return a.b.get(Dl,a.a).then(function(b){return "pending"==b})}function Hl(a,b,c,d){this.i={};this.u=0;this.O=a;this.m=b;this.v=c;this.G=d;this.h=[];this.f=!1;this.l=q(this.o,this);this.b=new Il;this.A=new Jl;this.g=new Cl(Kl(this.m,this.v));this.c={};this.c.unknown=this.b;this.c.signInViaRedirect=this.b;this.c.linkViaRedirect=this.b;this.c.reauthViaRedirect=this.b;this.c.signInViaPopup=this.A;this.c.linkViaPopup=this.A;this.c.reauthViaPopup=this.A;this.a=Ll(this.O,this.m,this.v,Da,this.G);}
function Ll(a,b,c,d,e){var f=firebase$1.SDK_VERSION||null;return Ge()?new tl(a,b,c,f,d,e):new Zj(a,b,c,f,d,e)}Hl.prototype.reset=function(){this.f=!1;this.a.Ra(this.l);this.a=Ll(this.O,this.m,this.v,null,this.G);this.i={};};function Ml(a){a.f||(a.f=!0,a.a.Ea(a.l));var b=a.a;return a.a.la().s(function(c){a.a==b&&a.reset();throw c;})}
function Nl(a){a.a.Wb()&&Ml(a).s(function(b){var c=new th("unknown",null,null,null,new t("operation-not-supported-in-this-environment"));Ol(b)&&a.o(c);});a.a.Sb()||Pl(a.b);}function Ql(a,b){Va(a.h,b)||a.h.push(b);a.f||Gl(a.g).then(function(c){c?Fl(a.g).then(function(){Ml(a).s(function(d){var e=new th("unknown",null,null,null,new t("operation-not-supported-in-this-environment"));Ol(d)&&a.o(e);});}):Nl(a);}).s(function(){Nl(a);});}function Rl(a,b){Xa(a.h,function(c){return c==b});}
Hl.prototype.o=function(a){if(!a)throw new t("invalid-auth-event");6E5<=va()-this.u&&(this.i={},this.u=0);if(a&&a.getUid()&&this.i.hasOwnProperty(a.getUid()))return !1;for(var b=!1,c=0;c<this.h.length;c++){var d=this.h[c];if(d.Eb(a.c,a.b)){if(b=this.c[a.c])b.h(a,d),a&&(a.f||a.b)&&(this.i[a.getUid()]=!0,this.u=va());b=!0;break}}Pl(this.b);return b};var Sl=new Ze(2E3,1E4),Tl=new Ze(3E4,6E4);Hl.prototype.qa=function(){return this.b.qa()};
function Ul(a,b,c,d,e,f,g){return a.a.Lb(b,c,d,function(){a.f||(a.f=!0,a.a.Ea(a.l));},function(){a.reset();},e,f,g)}function Ol(a){return a&&"auth/cordova-not-ready"==a.code?!0:!1}
function Vl(a,b,c,d,e){var f;return El(a.g).then(function(){return a.a.Mb(b,c,d,e).s(function(g){if(Ol(g))throw new t("operation-not-supported-in-this-environment");f=g;return Fl(a.g).then(function(){throw f;})}).then(function(){return a.a.Zb()?new D(function(){}):Fl(a.g).then(function(){return a.qa()}).then(function(){}).s(function(){})})})}function Wl(a,b,c,d,e){return a.a.Nb(d,function(f){b.ma(c,null,f,e);},Sl.get())}var Xl={};function Kl(a,b,c){a=a+":"+b;c&&(a=a+":"+c.url);return a}
function Yl(a,b,c,d){var e=Kl(b,c,d);Xl[e]||(Xl[e]=new Hl(a,b,c,d));return Xl[e]}function Il(){this.b=null;this.f=[];this.c=[];this.a=null;this.i=this.g=!1;}Il.prototype.reset=function(){this.b=null;this.a&&(this.a.cancel(),this.a=null);};
Il.prototype.h=function(a,b){if(a){this.reset();this.g=!0;var c=a.c,d=a.b,e=a.a&&"auth/web-storage-unsupported"==a.a.code,f=a.a&&"auth/operation-not-supported-in-this-environment"==a.a.code;this.i=!(!e&&!f);"unknown"!=c||e||f?a.a?(Zl(this,!0,null,a.a),E()):b.Fa(c,d)?$l(this,a,b):F(new t("invalid-auth-event")):(Zl(this,!1,null,null),E());}else F(new t("invalid-auth-event"));};function Pl(a){a.g||(a.g=!0,Zl(a,!1,null,null));}function am(a){a.g&&!a.i&&Zl(a,!1,null,null);}
function $l(a,b,c){c=c.Fa(b.c,b.b);var d=b.g,e=b.f,f=b.i,g=b.S(),h=!!b.c.match(/Redirect$/);c(d,e,g,f).then(function(n){Zl(a,h,n,null);}).s(function(n){Zl(a,h,null,n);});}function bm(a,b){a.b=function(){return F(b)};if(a.c.length)for(var c=0;c<a.c.length;c++)a.c[c](b);}function cm(a,b){a.b=function(){return E(b)};if(a.f.length)for(var c=0;c<a.f.length;c++)a.f[c](b);}function Zl(a,b,c,d){b?d?bm(a,d):cm(a,c):cm(a,{user:null});a.f=[];a.c=[];}
Il.prototype.qa=function(){var a=this;return new D(function(b,c){a.b?a.b().then(b,c):(a.f.push(b),a.c.push(c),dm(a));})};function dm(a){var b=new t("timeout");a.a&&a.a.cancel();a.a=Ed(Tl.get()).then(function(){a.b||(a.g=!0,Zl(a,!0,null,b));});}function Jl(){}Jl.prototype.h=function(a,b){if(a){var c=a.c,d=a.b;a.a?(b.ma(a.c,null,a.a,a.b),E()):b.Fa(c,d)?em(a,b):F(new t("invalid-auth-event"));}else F(new t("invalid-auth-event"));};
function em(a,b){var c=a.b,d=a.c;b.Fa(d,c)(a.g,a.f,a.S(),a.i).then(function(e){b.ma(d,e,null,c);}).s(function(e){b.ma(d,null,e,c);});}function fm(){this.hb=!1;Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.hb},set:function(a){this.hb=a;},enumerable:!1});}function gm(a,b){this.a=b;M(this,"verificationId",a);}gm.prototype.confirm=function(a){a=qh(this.verificationId,a);return this.a(a)};function hm(a,b,c,d){return (new mh(a)).eb(b,c).then(function(e){return new gm(e,d)})}function im(a){var b=jg(a);if(!(b&&b.exp&&b.auth_time&&b.iat))throw new t("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");N(this,{token:a,expirationTime:cf(1E3*b.exp),authTime:cf(1E3*b.auth_time),issuedAtTime:cf(1E3*b.iat),signInProvider:b.firebase&&b.firebase.sign_in_provider?b.firebase.sign_in_provider:null,signInSecondFactor:b.firebase&&b.firebase.sign_in_second_factor?b.firebase.sign_in_second_factor:null,claims:b});}
function jm(a,b,c){var d=b&&b[km];if(!d)throw new t("argument-error","Internal assert: Invalid MultiFactorResolver");this.a=a;this.f=nb(b);this.g=c;this.c=new zg(null,d);this.b=[];var e=this;w(b[lm]||[],function(f){(f=uf(f))&&e.b.push(f);});M(this,"auth",this.a);M(this,"session",this.c);M(this,"hints",this.b);}var lm="mfaInfo",km="mfaPendingCredential";jm.prototype.Qc=function(a){var b=this;return a.rb(this.a.a,this.c).then(function(c){var d=nb(b.f);delete d[lm];delete d[km];z(d,c);return b.g(d)})};function mm(a,b,c,d){t.call(this,"multi-factor-auth-required",d,b);this.b=new jm(a,b,c);M(this,"resolver",this.b);}r(mm,t);function nm(a,b,c){if(a&&m(a.serverResponse)&&"auth/multi-factor-auth-required"===a.code)try{return new mm(b,a.serverResponse,c,a.message)}catch(d){}return null}function om(){}om.prototype.rb=function(a,b,c){return b.type==Ag?pm(this,a,b,c):qm(this,a,b)};function pm(a,b,c,d){return c.Ha().then(function(e){e={idToken:e};"undefined"!==typeof d&&(e.displayName=d);z(e,{phoneVerificationInfo:ih(a.a)});return O(b,Hj,e)})}function qm(a,b,c){return c.Ha().then(function(d){d={mfaPendingCredential:d};z(d,{phoneVerificationInfo:ih(a.a)});return O(b,Ij,d)})}function rm(a){M(this,"factorId",a.fa);this.a=a;}r(rm,om);
function sm(a){rm.call(this,a);if(this.a.fa!=mh.PROVIDER_ID)throw new t("argument-error","firebase.auth.PhoneMultiFactorAssertion requires a valid firebase.auth.PhoneAuthCredential");}r(sm,rm);function tm(a,b){G.call(this,a);for(var c in b)this[c]=b[c];}r(tm,G);function um(a,b){this.a=a;this.b=[];this.c=q(this.xc,this);nd(this.a,"userReloaded",this.c);var c=[];b&&b.multiFactor&&b.multiFactor.enrolledFactors&&w(b.multiFactor.enrolledFactors,function(d){var e=null,f={};if(d){d.uid&&(f[rf]=d.uid);d.displayName&&(f[sf]=d.displayName);d.enrollmentTime&&(f[tf]=(new Date(d.enrollmentTime)).toISOString());d.phoneNumber&&(f[qf]=d.phoneNumber);try{e=new vf(f);}catch(g){}d=e;}else d=null;d&&c.push(d);});vm(this,c);}
function wm(a){var b=[];w(a.mfaInfo||[],function(c){(c=uf(c))&&b.push(c);});return b}k=um.prototype;k.xc=function(a){vm(this,wm(a.gd));};function vm(a,b){a.b=b;M(a,"enrolledFactors",b);}k.Qb=function(){return this.a.I().then(function(a){return new zg(a,null)})};k.ec=function(a,b){var c=this,d=this.a.a;return this.Qb().then(function(e){return a.rb(d,e,b)}).then(function(e){xm(c.a,e);return c.a.reload()})};
k.ad=function(a){var b=this,c="string"===typeof a?a:a.uid,d=this.a.a;return this.a.I().then(function(e){return O(d,Mj,{idToken:e,mfaEnrollmentId:c})}).then(function(e){var f=Qa(b.b,function(g){return g.uid!=c});vm(b,f);xm(b.a,e);return b.a.reload().s(function(g){if("auth/user-token-expired"!=g.code)throw g;})})};k.w=function(){return {multiFactor:{enrolledFactors:Ra(this.b,function(a){return a.w()})}}};function ym(a,b,c){this.h=a;this.i=b;this.g=c;this.c=3E4;this.f=96E4;this.b=null;this.a=this.c;if(this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!");}ym.prototype.start=function(){this.a=this.c;zm(this,!0);};function Am(a,b){if(b)return a.a=a.c,a.g();b=a.a;a.a*=2;a.a>a.f&&(a.a=a.f);return b}function zm(a,b){a.stop();a.b=Ed(Am(a,b)).then(function(){return af()}).then(function(){return a.h()}).then(function(){zm(a,!0);}).s(function(c){a.i(c)&&zm(a,!1);});}
ym.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null);};function Bm(a){this.c=a;this.b=this.a=null;}Bm.prototype.w=function(){return {apiKey:this.c.c,refreshToken:this.a,accessToken:this.b&&this.b.toString(),expirationTime:Cm(this)}};function Cm(a){return a.b&&1E3*a.b.c||0}function Dm(a,b){var c=b.refreshToken;a.b=kg(b[Eg]||"");a.a=c;}function Em(a,b){a.b=b.b;a.a=b.a;}
function Fm(a,b){return Xi(a.c,b).then(function(c){a.b=kg(c.access_token);a.a=c.refresh_token;return {accessToken:a.b.toString(),refreshToken:a.a}}).s(function(c){"auth/user-token-expired"==c.code&&(a.a=null);throw c;})}Bm.prototype.getToken=function(a){a=!!a;return this.b&&!this.a?F(new t("user-token-expired")):a||!this.b||va()>Cm(this)-3E4?this.a?Fm(this,{grant_type:"refresh_token",refresh_token:this.a}):E(null):E({accessToken:this.b.toString(),refreshToken:this.a})};function Gm(a,b){this.a=a||null;this.b=b||null;N(this,{lastSignInTime:cf(b||null),creationTime:cf(a||null)});}function Hm(a){return new Gm(a.a,a.b)}Gm.prototype.w=function(){return {lastLoginAt:this.b,createdAt:this.a}};function Im(a,b,c,d,e,f){N(this,{uid:a,displayName:d||null,photoURL:e||null,email:c||null,phoneNumber:f||null,providerId:b});}
function Jm(a,b,c){this.G=[];this.l=a.apiKey;this.m=a.appName;this.o=a.authDomain||null;var d=firebase$1.SDK_VERSION?Oe(firebase$1.SDK_VERSION):null;this.a=new Ji(this.l,Ca(Da),d);a.emulatorConfig&&Qi(this.a,a.emulatorConfig);this.b=new Bm(this.a);Km(this,b[Eg]);Dm(this.b,b);M(this,"refreshToken",this.b.a);Lm(this,c||{});I.call(this);this.P=!1;this.o&&Re()&&(this.i=Yl(this.o,this.l,this.m));this.R=[];this.f=null;this.u=Mm(this);this.$=q(this.gb,this);var e=this;this.pa=null;this.Ba=function(f){e.wa(f.h);};
this.ba=null;this.za=function(f){Qi(e.a,f.c);};this.W=null;this.X=[];this.Aa=function(f){Nm(e,f.f);};this.aa=null;this.N=new um(this,c);M(this,"multiFactor",this.N);}r(Jm,I);Jm.prototype.wa=function(a){this.pa=a;Pi(this.a,a);};Jm.prototype.ka=function(){return this.pa};function Om(a,b){a.ba&&H(a.ba,"languageCodeChanged",a.Ba);(a.ba=b)&&nd(b,"languageCodeChanged",a.Ba);}function Pm(a,b){a.W&&H(a.W,"emulatorConfigChanged",a.za);(a.W=b)&&nd(b,"emulatorConfigChanged",a.za);}
function Nm(a,b){a.X=b;Si(a.a,firebase$1.SDK_VERSION?Oe(firebase$1.SDK_VERSION,a.X):null);}Jm.prototype.Ga=function(){return Za(this.X)};function Qm(a,b){a.aa&&H(a.aa,"frameworkChanged",a.Aa);(a.aa=b)&&nd(b,"frameworkChanged",a.Aa);}Jm.prototype.gb=function(){this.u.b&&(this.u.stop(),this.u.start());};function Rm(a){try{return firebase$1.app(a.m).auth()}catch(b){throw new t("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+a.m+"'!");}}
function Mm(a){return new ym(function(){return a.I(!0)},function(b){return b&&"auth/network-request-failed"==b.code?!0:!1},function(){var b=Cm(a.b)-va()-3E5;return 0<b?b:0})}function Sm(a){a.A||a.u.b||(a.u.start(),H(a,"tokenChanged",a.$),nd(a,"tokenChanged",a.$));}function Tm(a){H(a,"tokenChanged",a.$);a.u.stop();}function Km(a,b){a.ya=b;M(a,"_lat",b);}function Um(a,b){Xa(a.R,function(c){return c==b});}
function Vm(a){for(var b=[],c=0;c<a.R.length;c++)b.push(a.R[c](a));return Jc(b).then(function(){return a})}function Wm(a){a.i&&!a.P&&(a.P=!0,Ql(a.i,a));}function Lm(a,b){N(a,{uid:b.uid,displayName:b.displayName||null,photoURL:b.photoURL||null,email:b.email||null,emailVerified:b.emailVerified||!1,phoneNumber:b.phoneNumber||null,isAnonymous:b.isAnonymous||!1,tenantId:b.tenantId||null,metadata:new Gm(b.createdAt,b.lastLoginAt),providerData:[]});a.a.b=a.tenantId;}M(Jm.prototype,"providerId","firebase");
function Xm(){}function Ym(a){return E().then(function(){if(a.A)throw new t("app-deleted");})}function Zm(a){return Ra(a.providerData,function(b){return b.providerId})}function $m(a,b){b&&(an(a,b.providerId),a.providerData.push(b));}function an(a,b){Xa(a.providerData,function(c){return c.providerId==b});}function bn(a,b,c){("uid"!=b||c)&&a.hasOwnProperty(b)&&M(a,b,c);}
function cn(a,b){a!=b&&(N(a,{uid:b.uid,displayName:b.displayName,photoURL:b.photoURL,email:b.email,emailVerified:b.emailVerified,phoneNumber:b.phoneNumber,isAnonymous:b.isAnonymous,tenantId:b.tenantId,providerData:[]}),b.metadata?M(a,"metadata",Hm(b.metadata)):M(a,"metadata",new Gm),w(b.providerData,function(c){$m(a,c);}),Em(a.b,b.b),M(a,"refreshToken",a.b.a),vm(a.N,b.N.b));}k=Jm.prototype;k.reload=function(){var a=this;return R(this,Ym(this).then(function(){return dn(a).then(function(){return Vm(a)}).then(Xm)}))};
function dn(a){return a.I().then(function(b){var c=a.isAnonymous;return en(a,b).then(function(){c||bn(a,"isAnonymous",!1);return b})})}k.nc=function(a){return this.I(a).then(function(b){return new im(b)})};k.I=function(a){var b=this;return R(this,Ym(this).then(function(){return b.b.getToken(a)}).then(function(c){if(!c)throw new t("internal-error");c.accessToken!=b.ya&&(Km(b,c.accessToken),b.dispatchEvent(new tm("tokenChanged")));bn(b,"refreshToken",c.refreshToken);return c.accessToken}))};
function xm(a,b){b[Eg]&&a.ya!=b[Eg]&&(Dm(a.b,b),a.dispatchEvent(new tm("tokenChanged")),Km(a,b[Eg]),bn(a,"refreshToken",a.b.a));}function en(a,b){return O(a.a,Jj,{idToken:b}).then(q(a.Jc,a))}
k.Jc=function(a){a=a.users;if(!a||!a.length)throw new t("internal-error");a=a[0];Lm(this,{uid:a.localId,displayName:a.displayName,photoURL:a.photoUrl,email:a.email,emailVerified:!!a.emailVerified,phoneNumber:a.phoneNumber,lastLoginAt:a.lastLoginAt,createdAt:a.createdAt,tenantId:a.tenantId});for(var b=fn(a),c=0;c<b.length;c++)$m(this,b[c]);bn(this,"isAnonymous",!(this.email&&a.passwordHash)&&!(this.providerData&&this.providerData.length));this.dispatchEvent(new tm("userReloaded",{gd:a}));};
function fn(a){return (a=a.providerUserInfo)&&a.length?Ra(a,function(b){return new Im(b.rawId,b.providerId,b.email,b.displayName,b.photoUrl,b.phoneNumber)}):[]}k.Kc=function(a){hf("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead.");return this.sb(a)};
k.sb=function(a){var b=this,c=null;return R(this,a.c(this.a,this.uid).then(function(d){xm(b,d);c=gn(b,d,"reauthenticate");b.f=null;return b.reload()}).then(function(){return c}),!0)};function hn(a,b){return dn(a).then(function(){if(Va(Zm(a),b))return Vm(a).then(function(){throw new t("provider-already-linked");})})}k.Bc=function(a){hf("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead.");return this.pb(a)};
k.pb=function(a){var b=this,c=null;return R(this,hn(this,a.providerId).then(function(){return b.I()}).then(function(d){return a.b(b.a,d)}).then(function(d){c=gn(b,d,"link");return jn(b,d)}).then(function(){return c}))};k.Cc=function(a,b){var c=this;return R(this,hn(this,"phone").then(function(){return hm(Rm(c),a,b,q(c.pb,c))}))};k.Lc=function(a,b){var c=this;return R(this,E().then(function(){return hm(Rm(c),a,b,q(c.sb,c))}),!0)};
function gn(a,b,c){var d=rh(b);b=pg(b);return lf({user:a,credential:d,additionalUserInfo:b,operationType:c})}function jn(a,b){xm(a,b);return a.reload().then(function(){return a})}k.Ab=function(a){var b=this;return R(this,this.I().then(function(c){return b.a.Ab(c,a)}).then(function(c){xm(b,c);return b.reload()}))};k.dd=function(a){var b=this;return R(this,this.I().then(function(c){return a.b(b.a,c)}).then(function(c){xm(b,c);return b.reload()}))};
k.Bb=function(a){var b=this;return R(this,this.I().then(function(c){return b.a.Bb(c,a)}).then(function(c){xm(b,c);return b.reload()}))};
k.Cb=function(a){if(void 0===a.displayName&&void 0===a.photoURL)return Ym(this);var b=this;return R(this,this.I().then(function(c){return b.a.Cb(c,{displayName:a.displayName,photoUrl:a.photoURL})}).then(function(c){xm(b,c);bn(b,"displayName",c.displayName||null);bn(b,"photoURL",c.photoUrl||null);w(b.providerData,function(d){"password"===d.providerId&&(M(d,"displayName",b.displayName),M(d,"photoURL",b.photoURL));});return Vm(b)}).then(Xm))};
k.bd=function(a){var b=this;return R(this,dn(this).then(function(c){return Va(Zm(b),a)?sj(b.a,c,[a]).then(function(d){var e={};w(d.providerUserInfo||[],function(f){e[f.providerId]=!0;});w(Zm(b),function(f){e[f]||an(b,f);});e[mh.PROVIDER_ID]||M(b,"phoneNumber",null);return Vm(b)}):Vm(b).then(function(){throw new t("no-such-provider");})}))};
k.delete=function(){var a=this;return R(this,this.I().then(function(b){return O(a.a,Gj,{idToken:b})}).then(function(){a.dispatchEvent(new tm("userDeleted"));})).then(function(){for(var b=0;b<a.G.length;b++)a.G[b].cancel("app-deleted");Om(a,null);Pm(a,null);Qm(a,null);a.G=[];a.A=!0;Tm(a);M(a,"refreshToken",null);a.i&&Rl(a.i,a);})};
k.Eb=function(a,b){return "linkViaPopup"==a&&(this.h||null)==b&&this.g||"reauthViaPopup"==a&&(this.h||null)==b&&this.g||"linkViaRedirect"==a&&(this.ga||null)==b||"reauthViaRedirect"==a&&(this.ga||null)==b?!0:!1};k.ma=function(a,b,c,d){"linkViaPopup"!=a&&"reauthViaPopup"!=a||d!=(this.h||null)||(c&&this.O?this.O(c):b&&!c&&this.g&&this.g(b),this.c&&(this.c.cancel(),this.c=null),delete this.g,delete this.O);};
k.Fa=function(a,b){return "linkViaPopup"==a&&b==(this.h||null)?q(this.Jb,this):"reauthViaPopup"==a&&b==(this.h||null)?q(this.Kb,this):"linkViaRedirect"==a&&(this.ga||null)==b?q(this.Jb,this):"reauthViaRedirect"==a&&(this.ga||null)==b?q(this.Kb,this):null};k.Dc=function(a){var b=this;return kn(this,"linkViaPopup",a,function(){return hn(b,a.providerId).then(function(){return Vm(b)})},!1)};k.Mc=function(a){return kn(this,"reauthViaPopup",a,function(){return E()},!0)};
function kn(a,b,c,d,e){if(!Re())return F(new t("operation-not-supported-in-this-environment"));if(a.f&&!e)return F(a.f);var f=og(c.providerId),g=Qe(a.uid+":::"),h=null;(!Te()||Ie())&&a.o&&c.isOAuthProvider&&(h=fk(a.o,a.l,a.m,b,c,null,g,firebase$1.SDK_VERSION||null,null,null,a.tenantId));var n=ze(h,f&&f.ua,f&&f.ta);d=d().then(function(){ln(a);if(!e)return a.I().then(function(){})}).then(function(){return Ul(a.i,n,b,c,g,!!h,a.tenantId)}).then(function(){return new D(function(p,v){a.ma(b,null,new t("cancelled-popup-request"),
a.h||null);a.g=p;a.O=v;a.h=g;a.c=Wl(a.i,a,b,n,g);})}).then(function(p){n&&ye(n);return p?lf(p):null}).s(function(p){n&&ye(n);throw p;});return R(a,d,e)}k.Ec=function(a){var b=this;return mn(this,"linkViaRedirect",a,function(){return hn(b,a.providerId)},!1)};k.Nc=function(a){return mn(this,"reauthViaRedirect",a,function(){return E()},!0)};
function mn(a,b,c,d,e){if(!Re())return F(new t("operation-not-supported-in-this-environment"));if(a.f&&!e)return F(a.f);var f=null,g=Qe(a.uid+":::");d=d().then(function(){ln(a);if(!e)return a.I().then(function(){})}).then(function(){a.ga=g;return Vm(a)}).then(function(h){a.ha&&(h=a.ha,h=h.b.set(nn,a.w(),h.a));return h}).then(function(){return Vl(a.i,b,c,g,a.tenantId)}).s(function(h){f=h;if(a.ha)return on(a.ha);throw f;}).then(function(){if(f)throw f;});return R(a,d,e)}
function ln(a){if(!a.i||!a.P){if(a.i&&!a.P)throw new t("internal-error");throw new t("auth-domain-config-required");}}k.Jb=function(a,b,c,d){var e=this;this.c&&(this.c.cancel(),this.c=null);var f=null;c=this.I().then(function(g){return Ig(e.a,{requestUri:a,postBody:d,sessionId:b,idToken:g})}).then(function(g){f=gn(e,g,"link");return jn(e,g)}).then(function(){return f});return R(this,c)};
k.Kb=function(a,b,c,d){var e=this;this.c&&(this.c.cancel(),this.c=null);var f=null,g=E().then(function(){return Dg(Jg(e.a,{requestUri:a,sessionId:b,postBody:d,tenantId:c}),e.uid)}).then(function(h){f=gn(e,h,"reauthenticate");xm(e,h);e.f=null;return e.reload()}).then(function(){return f});return R(this,g,!0)};
k.tb=function(a){var b=this,c=null;return R(this,this.I().then(function(d){c=d;return "undefined"===typeof a||mb(a)?{}:cg(new Tf(a))}).then(function(d){return b.a.tb(c,d)}).then(function(d){if(b.email!=d)return b.reload()}).then(function(){}))};k.Db=function(a,b){var c=this,d=null;return R(this,this.I().then(function(e){d=e;return "undefined"===typeof b||mb(b)?{}:cg(new Tf(b))}).then(function(e){return c.a.Db(d,a,e)}).then(function(e){if(c.email!=e)return c.reload()}).then(function(){}))};
function R(a,b,c){var d=pn(a,b,c);a.G.push(d);d.na(function(){Wa(a.G,d);});return d.s(function(e){var f=null;e&&"auth/multi-factor-auth-required"===e.code&&(f=nm(e.w(),Rm(a),q(a.ic,a)));throw f||e;})}k.ic=function(a){var b=null,c=this;a=Dg(E(a),c.uid).then(function(d){b=gn(c,d,"reauthenticate");xm(c,d);c.f=null;return c.reload()}).then(function(){return b});return R(this,a,!0)};
function pn(a,b,c){return a.f&&!c?(b.cancel(),F(a.f)):b.s(function(d){!d||"auth/user-disabled"!=d.code&&"auth/user-token-expired"!=d.code||(a.f||a.dispatchEvent(new tm("userInvalidated")),a.f=d);throw d;})}k.toJSON=function(){return this.w()};
k.w=function(){var a={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,tenantId:this.tenantId,providerData:[],apiKey:this.l,appName:this.m,authDomain:this.o,stsTokenManager:this.b.w(),redirectEventId:this.ga||null};this.metadata&&z(a,this.metadata.w());w(this.providerData,function(b){a.providerData.push(mf(b));});z(a,this.N.w());return a};
function qn(a){if(!a.apiKey)return null;var b={apiKey:a.apiKey,authDomain:a.authDomain,appName:a.appName,emulatorConfig:a.emulatorConfig},c={};if(a.stsTokenManager&&a.stsTokenManager.accessToken)c[Eg]=a.stsTokenManager.accessToken,c.refreshToken=a.stsTokenManager.refreshToken||null;else return null;var d=new Jm(b,c,a);a.providerData&&w(a.providerData,function(e){e&&$m(d,lf(e));});a.redirectEventId&&(d.ga=a.redirectEventId);return d}
function rn(a,b,c,d){var e=new Jm(a,b);c&&(e.ha=c);d&&Nm(e,d);return e.reload().then(function(){return e})}function sn(a,b,c,d){var e=a.b,f={};f[Eg]=e.b&&e.b.toString();f.refreshToken=e.a;b=new Jm(b||{apiKey:a.l,authDomain:a.o,appName:a.m},f);c&&(b.ha=c);d&&Nm(b,d);cn(b,a);return b}function tn(a){this.a=a;this.b=Wk();}var nn={name:"redirectUser",D:"session"};function on(a){return $k(a.b,nn,a.a)}function un(a,b){return a.b.get(nn,a.a).then(function(c){c&&b&&(c.authDomain=b);return qn(c||{})})}function vn(a){this.a=a;this.b=Wk();this.c=null;this.f=wn(this);this.b.addListener(xn("local"),this.a,q(this.g,this));}vn.prototype.g=function(){var a=this,b=xn("local");yn(this,function(){return E().then(function(){return a.c&&"local"!=a.c.D?a.b.get(b,a.a):null}).then(function(c){if(c)return zn(a,"local").then(function(){a.c=b;})})});};function zn(a,b){var c=[],d;for(d in Sk)Sk[d]!==b&&c.push($k(a.b,xn(Sk[d]),a.a));c.push($k(a.b,An,a.a));return Ic(c)}
function wn(a){var b=xn("local"),c=xn("session"),d=xn("none");return Zk(a.b,b,a.a).then(function(){return a.b.get(c,a.a)}).then(function(e){return e?c:a.b.get(d,a.a).then(function(f){return f?d:a.b.get(b,a.a).then(function(g){return g?b:a.b.get(An,a.a).then(function(h){return h?xn(h):b})})})}).then(function(e){a.c=e;return zn(a,e.D)}).s(function(){a.c||(a.c=b);})}var An={name:"persistence",D:"session"};function xn(a){return {name:"authUser",D:a}}
vn.prototype.wb=function(a){var b=null,c=this;Tk(a);return yn(this,function(){return a!=c.c.D?c.b.get(c.c,c.a).then(function(d){b=d;return zn(c,a)}).then(function(){c.c=xn(a);if(b)return c.b.set(c.c,b,c.a)}):E()})};function Bn(a){return yn(a,function(){return a.b.set(An,a.c.D,a.a)})}function Cn(a,b){return yn(a,function(){return a.b.set(a.c,b.w(),a.a)})}function Dn(a){return yn(a,function(){return $k(a.b,a.c,a.a)})}
function En(a,b,c){return yn(a,function(){return a.b.get(a.c,a.a).then(function(d){d&&b&&(d.authDomain=b);d&&c&&(d.emulatorConfig=c);return qn(d||{})})})}function yn(a,b){a.f=a.f.then(b,b);return a.f}function Fn(a){this.m=!1;M(this,"settings",new fm);M(this,"app",a);if(S(this).options&&S(this).options.apiKey)a=firebase$1.SDK_VERSION?Oe(firebase$1.SDK_VERSION):null,this.a=new Ji(S(this).options&&S(this).options.apiKey,Ca(Da),a);else throw new t("invalid-api-key");this.R=[];this.u=[];this.P=[];this.ac=firebase$1.INTERNAL.createSubscribe(q(this.yc,this));this.X=void 0;this.bc=firebase$1.INTERNAL.createSubscribe(q(this.zc,this));Gn(this,null);this.l=new vn(S(this).options.apiKey+":"+S(this).name);this.G=
new tn(S(this).options.apiKey+":"+S(this).name);this.$=T(this,Hn(this));this.i=T(this,In(this));this.ba=!1;this.pa=q(this.Yc,this);this.Ba=q(this.da,this);this.ya=q(this.kc,this);this.za=q(this.vc,this);this.Aa=q(this.wc,this);this.b=null;Jn(this);this.INTERNAL={};this.INTERNAL["delete"]=q(this.delete,this);this.INTERNAL.logFramework=q(this.Fc,this);this.A=0;I.call(this);Kn(this);this.N=[];this.f=null;}r(Fn,I);function Ln(a){G.call(this,"languageCodeChanged");this.h=a;}r(Ln,G);
function Mn(a){G.call(this,"emulatorConfigChanged");this.c=a;}r(Mn,G);function Nn(a){G.call(this,"frameworkChanged");this.f=a;}r(Nn,G);k=Fn.prototype;k.wb=function(a){a=this.l.wb(a);return T(this,a)};k.wa=function(a){this.aa===a||this.m||(this.aa=a,Pi(this.a,this.aa),this.dispatchEvent(new Ln(this.ka())));};k.ka=function(){return this.aa};k.ed=function(){var a=l.navigator;this.wa(a?a.languages&&a.languages[0]||a.language||a.userLanguage||null:null);};
k.fd=function(a){if(!this.f){if(!/^https?:\/\//.test(a))throw new t("argument-error","Emulator URL must start with a valid scheme (http:// or https://).");On();this.f={url:a};this.settings.hb=!0;Qi(this.a,this.f);this.dispatchEvent(new Mn(this.f));}};
function On(){bf("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.");l.document&&Ee().then(function(){var a=l.document.createElement("div");a.innerText="Running in emulator mode. Do not use with production credentials.";a.style.position="fixed";a.style.width="100%";a.style.backgroundColor="#ffffff";a.style.border=".1em solid #000000";a.style.color="#ff0000";a.style.bottom="0px";a.style.left="0px";a.style.margin="0px";a.style.zIndex=
1E4;a.style.textAlign="center";a.classList.add("firebase-emulator-warning");l.document.body.appendChild(a);});}k.Fc=function(a){this.N.push(a);Si(this.a,firebase$1.SDK_VERSION?Oe(firebase$1.SDK_VERSION,this.N):null);this.dispatchEvent(new Nn(this.N));};k.Ga=function(){return Za(this.N)};k.xb=function(a){this.W===a||this.m||(this.W=a,this.a.b=this.W);};k.S=function(){return this.W};
function Kn(a){Object.defineProperty(a,"lc",{get:function(){return this.ka()},set:function(b){this.wa(b);},enumerable:!1});a.aa=null;Object.defineProperty(a,"ti",{get:function(){return this.S()},set:function(b){this.xb(b);},enumerable:!1});a.W=null;}k.toJSON=function(){return {apiKey:S(this).options.apiKey,authDomain:S(this).options.authDomain,appName:S(this).name,currentUser:U(this)&&U(this).w()}};function Pn(a){return a.gb||F(new t("auth-domain-config-required"))}
function Jn(a){var b=S(a).options.authDomain,c=S(a).options.apiKey;b&&Re()&&(a.gb=a.$.then(function(){if(!a.m){a.b=Yl(b,c,S(a).name,a.f);Ql(a.b,a);U(a)&&Wm(U(a));if(a.o){Wm(a.o);var d=a.o;d.wa(a.ka());Om(d,a);d=a.o;Nm(d,a.N);Qm(d,a);d=a.o;Qi(d.a,a.f);Pm(d,a);a.o=null;}return a.b}}));}k.Eb=function(a,b){switch(a){case "unknown":case "signInViaRedirect":return !0;case "signInViaPopup":return this.h==b&&!!this.g;default:return !1}};
k.ma=function(a,b,c,d){"signInViaPopup"==a&&this.h==d&&(c&&this.O?this.O(c):b&&!c&&this.g&&this.g(b),this.c&&(this.c.cancel(),this.c=null),delete this.g,delete this.O);};k.Fa=function(a,b){return "signInViaRedirect"==a||"signInViaPopup"==a&&this.h==b&&this.g?q(this.hc,this):null};k.hc=function(a,b,c,d){var e=this,f={requestUri:a,postBody:d,sessionId:b,tenantId:c};this.c&&(this.c.cancel(),this.c=null);return e.$.then(function(){return Qn(e,Gg(e.a,f))})};
k.Wc=function(a){if(!Re())return F(new t("operation-not-supported-in-this-environment"));var b=this,c=og(a.providerId),d=Qe(),e=null;(!Te()||Ie())&&S(this).options.authDomain&&a.isOAuthProvider&&(e=fk(S(this).options.authDomain,S(this).options.apiKey,S(this).name,"signInViaPopup",a,null,d,firebase$1.SDK_VERSION||null,null,null,this.S(),this.f));var f=ze(e,c&&c.ua,c&&c.ta);c=Pn(this).then(function(g){return Ul(g,f,"signInViaPopup",a,d,!!e,b.S())}).then(function(){return new D(function(g,h){b.ma("signInViaPopup",
null,new t("cancelled-popup-request"),b.h);b.g=g;b.O=h;b.h=d;b.c=Wl(b.b,b,"signInViaPopup",f,d);})}).then(function(g){f&&ye(f);return g?lf(g):null}).s(function(g){f&&ye(f);throw g;});return T(this,c)};k.Xc=function(a){if(!Re())return F(new t("operation-not-supported-in-this-environment"));var b=this,c=Pn(this).then(function(){return Bn(b.l)}).then(function(){return Vl(b.b,"signInViaRedirect",a,void 0,b.S())});return T(this,c)};
function Rn(a){if(!Re())return F(new t("operation-not-supported-in-this-environment"));var b=Pn(a).then(function(){return a.b.qa()}).then(function(c){return c?lf(c):null});return T(a,b)}k.qa=function(){var a=this;return Rn(this).then(function(b){a.b&&am(a.b.b);return b}).s(function(b){a.b&&am(a.b.b);throw b;})};
k.cd=function(a){if(!a)return F(new t("null-user"));if(this.W!=a.tenantId)return F(new t("tenant-id-mismatch"));var b=this,c={};c.apiKey=S(this).options.apiKey;c.authDomain=S(this).options.authDomain;c.appName=S(this).name;var d=sn(a,c,b.G,b.Ga());return T(this,this.i.then(function(){if(S(b).options.apiKey!=a.l)return d.reload()}).then(function(){if(U(b)&&a.uid==U(b).uid)return cn(U(b),a),b.da(a);Gn(b,d);Wm(d);return b.da(d)}).then(function(){Sn(b);}))};
function Tn(a,b){var c={};c.apiKey=S(a).options.apiKey;c.authDomain=S(a).options.authDomain;c.appName=S(a).name;a.f&&(c.emulatorConfig=a.f);return a.$.then(function(){return rn(c,b,a.G,a.Ga())}).then(function(d){if(U(a)&&d.uid==U(a).uid)return cn(U(a),d),a.da(d);Gn(a,d);Wm(d);return a.da(d)}).then(function(){Sn(a);})}
function Gn(a,b){U(a)&&(Um(U(a),a.Ba),H(U(a),"tokenChanged",a.ya),H(U(a),"userDeleted",a.za),H(U(a),"userInvalidated",a.Aa),Tm(U(a)));b&&(b.R.push(a.Ba),nd(b,"tokenChanged",a.ya),nd(b,"userDeleted",a.za),nd(b,"userInvalidated",a.Aa),0<a.A&&Sm(b));M(a,"currentUser",b);b&&(b.wa(a.ka()),Om(b,a),Nm(b,a.N),Qm(b,a),Qi(b.a,a.f),Pm(b,a));}k.zb=function(){var a=this,b=this.i.then(function(){a.b&&am(a.b.b);if(!U(a))return E();Gn(a,null);return Dn(a.l).then(function(){Sn(a);})});return T(this,b)};
function Un(a){var b=un(a.G,S(a).options.authDomain).then(function(c){if(a.o=c)c.ha=a.G;return on(a.G)});return T(a,b)}function Hn(a){var b=S(a).options.authDomain,c=Un(a).then(function(){return En(a.l,b,a.f)}).then(function(d){return d?(d.ha=a.G,a.o&&(a.o.ga||null)==(d.ga||null)?d:d.reload().then(function(){return Cn(a.l,d).then(function(){return d})}).s(function(e){return "auth/network-request-failed"==e.code?d:Dn(a.l)})):null}).then(function(d){Gn(a,d||null);});return T(a,c)}
function In(a){return a.$.then(function(){return Rn(a)}).s(function(){}).then(function(){if(!a.m)return a.pa()}).s(function(){}).then(function(){if(!a.m){a.ba=!0;var b=a.l;b.b.addListener(xn("local"),b.a,a.pa);}})}
k.Yc=function(){var a=this;return En(this.l,S(this).options.authDomain).then(function(b){if(!a.m){var c;if(c=U(a)&&b){c=U(a).uid;var d=b.uid;c=void 0===c||null===c||""===c||void 0===d||null===d||""===d?!1:c==d;}if(c)return cn(U(a),b),U(a).I();if(U(a)||b)Gn(a,b),b&&(Wm(b),b.ha=a.G),a.b&&Ql(a.b,a),Sn(a);}})};k.da=function(a){return Cn(this.l,a)};k.kc=function(){Sn(this);this.da(U(this));};k.vc=function(){this.zb();};k.wc=function(){this.zb();};
function Qn(a,b){var c=null,d=null;return T(a,b.then(function(e){c=rh(e);d=pg(e);return Tn(a,e)},function(e){var f=null;e&&"auth/multi-factor-auth-required"===e.code&&(f=nm(e.w(),a,q(a.jc,a)));throw f||e;}).then(function(){return lf({user:U(a),credential:c,additionalUserInfo:d,operationType:"signIn"})}))}k.jc=function(a){var b=this;return this.i.then(function(){return Qn(b,E(a))})};k.yc=function(a){var b=this;this.addAuthTokenListener(function(){a.next(U(b));});};
k.zc=function(a){var b=this;Vn(this,function(){a.next(U(b));});};k.Hc=function(a,b,c){var d=this;this.ba&&Promise.resolve().then(function(){"function"===typeof a?a(U(d)):"function"===typeof a.next&&a.next(U(d));});return this.ac(a,b,c)};k.Gc=function(a,b,c){var d=this;this.ba&&Promise.resolve().then(function(){d.X=d.getUid();"function"===typeof a?a(U(d)):"function"===typeof a.next&&a.next(U(d));});return this.bc(a,b,c)};
k.mc=function(a){var b=this,c=this.i.then(function(){return U(b)?U(b).I(a).then(function(d){return {accessToken:d}}):null});return T(this,c)};k.Sc=function(a){var b=this;return this.i.then(function(){return Qn(b,O(b.a,Lj,{token:a}))}).then(function(c){var d=c.user;bn(d,"isAnonymous",!1);b.da(d);return c})};k.Tc=function(a,b){var c=this;return this.i.then(function(){return Qn(c,O(c.a,bh,{email:a,password:b}))})};
k.dc=function(a,b){var c=this;return this.i.then(function(){return Qn(c,O(c.a,Fj,{email:a,password:b}))})};k.Za=function(a){var b=this;return this.i.then(function(){return Qn(b,a.ja(b.a))})};k.Rc=function(a){hf("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead.");return this.Za(a)};
k.yb=function(){var a=this;return this.i.then(function(){var b=U(a);if(b&&b.isAnonymous){var c=lf({providerId:null,isNewUser:!1});return lf({user:b,credential:null,additionalUserInfo:c,operationType:"signIn"})}return Qn(a,a.a.yb()).then(function(d){var e=d.user;bn(e,"isAnonymous",!0);a.da(e);return d})})};function S(a){return a.app}function U(a){return a.currentUser}k.getUid=function(){return U(this)&&U(this).uid||null};function Wn(a){return U(a)&&U(a)._lat||null}
function Sn(a){if(a.ba){for(var b=0;b<a.u.length;b++)if(a.u[b])a.u[b](Wn(a));if(a.X!==a.getUid()&&a.P.length)for(a.X=a.getUid(),b=0;b<a.P.length;b++)if(a.P[b])a.P[b](Wn(a));}}k.cc=function(a){this.addAuthTokenListener(a);this.A++;0<this.A&&U(this)&&Sm(U(this));};k.Oc=function(a){var b=this;w(this.u,function(c){c==a&&b.A--;});0>this.A&&(this.A=0);0==this.A&&U(this)&&Tm(U(this));this.removeAuthTokenListener(a);};
k.addAuthTokenListener=function(a){var b=this;this.u.push(a);T(this,this.i.then(function(){b.m||Va(b.u,a)&&a(Wn(b));}));};k.removeAuthTokenListener=function(a){Xa(this.u,function(b){return b==a});};function Vn(a,b){a.P.push(b);T(a,a.i.then(function(){!a.m&&Va(a.P,b)&&a.X!==a.getUid()&&(a.X=a.getUid(),b(Wn(a)));}));}
k.delete=function(){this.m=!0;for(var a=0;a<this.R.length;a++)this.R[a].cancel("app-deleted");this.R=[];this.l&&(a=this.l,a.b.removeListener(xn("local"),a.a,this.pa));this.b&&(Rl(this.b,this),am(this.b.b));return Promise.resolve()};function T(a,b){a.R.push(b);b.na(function(){Wa(a.R,b);});return b}k.gc=function(a){return T(this,bj(this.a,a))};k.Ac=function(a){return !!gh(a)};
k.vb=function(a,b){var c=this;return T(this,E().then(function(){var d=new Tf(b);if(!d.c)throw new t("argument-error",ag+" must be true when sending sign in link to email");return cg(d)}).then(function(d){return c.a.vb(a,d)}).then(function(){}))};k.hd=function(a){return this.Qa(a).then(function(b){return b.data.email})};k.mb=function(a,b){return T(this,this.a.mb(a,b).then(function(){}))};k.Qa=function(a){return T(this,this.a.Qa(a).then(function(b){return new wf(b)}))};
k.ib=function(a){return T(this,this.a.ib(a).then(function(){}))};k.ub=function(a,b){var c=this;return T(this,E().then(function(){return "undefined"===typeof b||mb(b)?{}:cg(new Tf(b))}).then(function(d){return c.a.ub(a,d)}).then(function(){}))};k.Vc=function(a,b){return T(this,hm(this,a,b,q(this.Za,this)))};
k.Uc=function(a,b){var c=this;return T(this,E().then(function(){var d=b||re(),e=fh(a,d);d=gh(d);if(!d)throw new t("argument-error","Invalid email link!");if(d.tenantId!==c.S())throw new t("tenant-id-mismatch");return c.Za(e)}))};function Xn(){}Xn.prototype.render=function(){};Xn.prototype.reset=function(){};Xn.prototype.getResponse=function(){};Xn.prototype.execute=function(){};function Yn(){this.a={};this.b=1E12;}var Zn=null;Yn.prototype.render=function(a,b){this.a[this.b.toString()]=new $n(a,b);return this.b++};Yn.prototype.reset=function(a){var b=ao(this,a);a=bo(a);b&&a&&(b.delete(),delete this.a[a]);};Yn.prototype.getResponse=function(a){return (a=ao(this,a))?a.getResponse():null};Yn.prototype.execute=function(a){(a=ao(this,a))&&a.execute();};function ao(a,b){return (b=bo(b))?a.a[b]||null:null}function bo(a){return (a="undefined"===typeof a?1E12:a)?a.toString():null}
function $n(a,b){this.g=!1;this.c=b;this.a=this.b=null;this.h="invisible"!==this.c.size;this.f=kc(a);var c=this;this.i=function(){c.execute();};this.h?this.execute():nd(this.f,"click",this.i);}$n.prototype.getResponse=function(){co(this);return this.b};
$n.prototype.execute=function(){co(this);var a=this;this.a||(this.a=setTimeout(function(){a.b=Me();var b=a.c.callback,c=a.c["expired-callback"];if(b)try{b(a.b);}catch(d){}a.a=setTimeout(function(){a.a=null;a.b=null;if(c)try{c();}catch(d){}a.h&&a.execute();},6E4);},500));};$n.prototype.delete=function(){co(this);this.g=!0;clearTimeout(this.a);this.a=null;H(this.f,"click",this.i);};function co(a){if(a.g)throw Error("reCAPTCHA mock was already deleted!");}function eo(){}M(eo,"FACTOR_ID","phone");function fo(){}fo.prototype.g=function(){Zn||(Zn=new Yn);return E(Zn)};fo.prototype.c=function(){};var go=null;function ho(){this.b=l.grecaptcha?Infinity:0;this.f=null;this.a="__rcb"+Math.floor(1E6*Math.random()).toString();}var io=new qb(rb,"https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),jo=new Ze(3E4,6E4);
ho.prototype.g=function(a){var b=this;return new D(function(c,d){var e=setTimeout(function(){d(new t("network-request-failed"));},jo.get());if(!l.grecaptcha||a!==b.f&&!b.b){l[b.a]=function(){if(l.grecaptcha){b.f=a;var g=l.grecaptcha.render;l.grecaptcha.render=function(h,n){h=g(h,n);b.b++;return h};clearTimeout(e);c(l.grecaptcha);}else clearTimeout(e),d(new t("internal-error"));delete l[b.a];};var f=zb(io,{onload:b.a,hl:a||""});E(Ci(f)).s(function(){clearTimeout(e);d(new t("internal-error","Unable to load external reCAPTCHA dependencies!"));});}else clearTimeout(e),
c(l.grecaptcha);})};ho.prototype.c=function(){this.b--;};var ko=null;function lo(a,b,c,d,e,f,g){M(this,"type","recaptcha");this.c=this.f=null;this.A=!1;this.m=b;this.g=null;g?(go||(go=new fo),g=go):(ko||(ko=new ho),g=ko);this.v=g;this.a=c||{theme:"light",type:"image"};this.h=[];if(this.a[mo])throw new t("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");this.i="invisible"===this.a[no];if(!l.document)throw new t("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");
if(!kc(b)||!this.i&&kc(b).hasChildNodes())throw new t("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.o=new Ji(a,f||null,e||null);this.u=d||function(){return null};var h=this;this.l=[];var n=this.a[oo];this.a[oo]=function(v){po(h,v);if("function"===typeof n)n(v);else if("string"===typeof n){var B=L(n,l);"function"===typeof B&&B(v);}};var p=this.a[qo];this.a[qo]=function(){po(h,null);if("function"===typeof p)p();else if("string"===typeof p){var v=
L(p,l);"function"===typeof v&&v();}};}var oo="callback",qo="expired-callback",mo="sitekey",no="size";function po(a,b){for(var c=0;c<a.l.length;c++)try{a.l[c](b);}catch(d){}}function ro(a,b){Xa(a.l,function(c){return c==b});}function so(a,b){a.h.push(b);b.na(function(){Wa(a.h,b);});return b}k=lo.prototype;
k.Ia=function(){var a=this;return this.f?this.f:this.f=so(this,E().then(function(){if(Se()&&!Je())return Ee();throw new t("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.");}).then(function(){return a.v.g(a.u())}).then(function(b){a.g=b;return O(a.o,Kj,{})}).then(function(b){a.a[mo]=b.recaptchaSiteKey;}).s(function(b){a.f=null;throw b;}))};
k.render=function(){to(this);var a=this;return so(this,this.Ia().then(function(){if(null===a.c){var b=a.m;if(!a.i){var c=kc(b);b=nc("DIV");c.appendChild(b);}a.c=a.g.render(b,a.a);}return a.c}))};k.verify=function(){to(this);var a=this;return so(this,this.render().then(function(b){return new D(function(c){var d=a.g.getResponse(b);if(d)c(d);else {var e=function(f){f&&(ro(a,e),c(f));};a.l.push(e);a.i&&a.g.execute(a.c);}})}))};k.reset=function(){to(this);null!==this.c&&this.g.reset(this.c);};
function to(a){if(a.A)throw new t("internal-error","RecaptchaVerifier instance has been destroyed.");}k.clear=function(){to(this);this.A=!0;this.v.c();for(var a=0;a<this.h.length;a++)this.h[a].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){a=kc(this.m);for(var b;b=a.firstChild;)a.removeChild(b);}};
function uo(a,b,c){var d=!1;try{this.b=c||firebase$1.app();}catch(g){throw new t("argument-error","No firebase.app.App instance is currently initialized.");}if(this.b.options&&this.b.options.apiKey)c=this.b.options.apiKey;else throw new t("invalid-api-key");var e=this,f=null;try{f=this.b.auth().Ga();}catch(g){}try{d=this.b.auth().settings.appVerificationDisabledForTesting;}catch(g){}f=firebase$1.SDK_VERSION?Oe(firebase$1.SDK_VERSION,f):null;lo.call(this,c,a,b,function(){try{var g=e.b.auth().ka();}catch(h){g=
null;}return g},f,Ca(Da),d);}r(uo,lo);function vo(a,b,c,d){a:{c=Array.prototype.slice.call(c);var e=0;for(var f=!1,g=0;g<b.length;g++)if(b[g].optional)f=!0;else {if(f)throw new t("internal-error","Argument validator encountered a required argument after an optional argument.");e++;}f=b.length;if(c.length<e||f<c.length)d="Expected "+(e==f?1==e?"1 argument":e+" arguments":e+"-"+f+" arguments")+" but got "+c.length+".";else {for(e=0;e<c.length;e++)if(f=b[e].optional&&void 0===c[e],!b[e].K(c[e])&&!f){b=b[e];if(0>e||e>=wo.length)throw new t("internal-error",
"Argument validator received an unsupported number of arguments.");c=wo[e];d=(d?"":c+" argument ")+(b.name?'"'+b.name+'" ':"")+"must be "+b.J+".";break a}d=null;}}if(d)throw new t("argument-error",a+" failed: "+d);}var wo="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function V(a,b){return {name:a||"",J:"a valid string",optional:!!b,K:function(c){return "string"===typeof c}}}
function xo(a,b){return {name:a||"",J:"a boolean",optional:!!b,K:function(c){return "boolean"===typeof c}}}function W(a,b){return {name:a||"",J:"a valid object",optional:!!b,K:m}}function yo(a,b){return {name:a||"",J:"a function",optional:!!b,K:function(c){return "function"===typeof c}}}function zo(a,b){return {name:a||"",J:"null",optional:!!b,K:function(c){return null===c}}}function Ao(){return {name:"",J:"an HTML element",optional:!1,K:function(a){return !!(a&&a instanceof Element)}}}
function Bo(){return {name:"auth",J:"an instance of Firebase Auth",optional:!0,K:function(a){return !!(a&&a instanceof Fn)}}}function Co(){return {name:"app",J:"an instance of Firebase App",optional:!0,K:function(a){return !!(a&&a instanceof firebase$1.app.App)}}}function Do(a){return {name:a?a+"Credential":"credential",J:a?"a valid "+a+" credential":"a valid credential",optional:!1,K:function(b){if(!b)return !1;var c=!a||b.providerId===a;return !(!b.ja||!c)}}}
function Eo(){return {name:"multiFactorAssertion",J:"a valid multiFactorAssertion",optional:!1,K:function(a){return a?!!a.rb:!1}}}function Fo(){return {name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(a){return !!(a&&a.providerId&&a.hasOwnProperty&&a.hasOwnProperty("isOAuthProvider"))}}}function Go(a,b){return m(a)&&"string"===typeof a.type&&a.type===b&&"function"===typeof a.Ha}function Ho(a){return m(a)&&"string"===typeof a.uid}
function Io(){return {name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(a){return !(!a||"string"!==typeof a.type||"function"!==typeof a.verify)}}}function X(a,b,c,d){return {name:c||"",J:a.J+" or "+b.J,optional:!!d,K:function(e){return a.K(e)||b.K(e)}}}function Y(a,b){for(var c in b){var d=b[c].name;a[d]=Jo(d,a[c],b[c].j);}}function Ko(a,b){for(var c in b){var d=b[c].name;d!==c&&Object.defineProperty(a,d,{get:ua(function(e){return this[e]},c),set:ua(function(e,f,g,h){vo(e,[g],[h],!0);this[f]=h;},d,c,b[c].jb),enumerable:!0});}}function Z(a,b,c,d){a[b]=Jo(b,c,d);}
function Jo(a,b,c){function d(){var g=Array.prototype.slice.call(arguments);vo(e,c,g);return b.apply(this,g)}if(!c)return b;var e=Lo(a),f;for(f in b)d[f]=b[f];for(f in b.prototype)d.prototype[f]=b.prototype[f];return d}function Lo(a){a=a.split(".");return a[a.length-1]}Y(Fn.prototype,{ib:{name:"applyActionCode",j:[V("code")]},Qa:{name:"checkActionCode",j:[V("code")]},mb:{name:"confirmPasswordReset",j:[V("code"),V("newPassword")]},dc:{name:"createUserWithEmailAndPassword",j:[V("email"),V("password")]},gc:{name:"fetchSignInMethodsForEmail",j:[V("email")]},qa:{name:"getRedirectResult",j:[]},Ac:{name:"isSignInWithEmailLink",j:[V("emailLink")]},Gc:{name:"onAuthStateChanged",j:[X(W(),yo(),"nextOrObserver"),yo("opt_error",!0),yo("opt_completed",!0)]},Hc:{name:"onIdTokenChanged",
j:[X(W(),yo(),"nextOrObserver"),yo("opt_error",!0),yo("opt_completed",!0)]},ub:{name:"sendPasswordResetEmail",j:[V("email"),X(W("opt_actionCodeSettings",!0),zo(null,!0),"opt_actionCodeSettings",!0)]},vb:{name:"sendSignInLinkToEmail",j:[V("email"),W("actionCodeSettings")]},wb:{name:"setPersistence",j:[V("persistence")]},Rc:{name:"signInAndRetrieveDataWithCredential",j:[Do()]},yb:{name:"signInAnonymously",j:[]},Za:{name:"signInWithCredential",j:[Do()]},Sc:{name:"signInWithCustomToken",j:[V("token")]},
Tc:{name:"signInWithEmailAndPassword",j:[V("email"),V("password")]},Uc:{name:"signInWithEmailLink",j:[V("email"),V("emailLink",!0)]},Vc:{name:"signInWithPhoneNumber",j:[V("phoneNumber"),Io()]},Wc:{name:"signInWithPopup",j:[Fo()]},Xc:{name:"signInWithRedirect",j:[Fo()]},cd:{name:"updateCurrentUser",j:[X(function(a){return {name:"user",J:"an instance of Firebase User",optional:!!a,K:function(b){return !!(b&&b instanceof Jm)}}}(),zo(),"user")]},zb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[V(null,
!0)]},ed:{name:"useDeviceLanguage",j:[]},fd:{name:"useEmulator",j:[V("url")]},hd:{name:"verifyPasswordResetCode",j:[V("code")]}});Ko(Fn.prototype,{lc:{name:"languageCode",jb:X(V(),zo(),"languageCode")},ti:{name:"tenantId",jb:X(V(),zo(),"tenantId")}});Fn.Persistence=Sk;Fn.Persistence.LOCAL="local";Fn.Persistence.SESSION="session";Fn.Persistence.NONE="none";
Y(Jm.prototype,{"delete":{name:"delete",j:[]},nc:{name:"getIdTokenResult",j:[xo("opt_forceRefresh",!0)]},I:{name:"getIdToken",j:[xo("opt_forceRefresh",!0)]},Bc:{name:"linkAndRetrieveDataWithCredential",j:[Do()]},pb:{name:"linkWithCredential",j:[Do()]},Cc:{name:"linkWithPhoneNumber",j:[V("phoneNumber"),Io()]},Dc:{name:"linkWithPopup",j:[Fo()]},Ec:{name:"linkWithRedirect",j:[Fo()]},Kc:{name:"reauthenticateAndRetrieveDataWithCredential",j:[Do()]},sb:{name:"reauthenticateWithCredential",j:[Do()]},Lc:{name:"reauthenticateWithPhoneNumber",
j:[V("phoneNumber"),Io()]},Mc:{name:"reauthenticateWithPopup",j:[Fo()]},Nc:{name:"reauthenticateWithRedirect",j:[Fo()]},reload:{name:"reload",j:[]},tb:{name:"sendEmailVerification",j:[X(W("opt_actionCodeSettings",!0),zo(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[V(null,!0)]},bd:{name:"unlink",j:[V("provider")]},Ab:{name:"updateEmail",j:[V("email")]},Bb:{name:"updatePassword",j:[V("password")]},dd:{name:"updatePhoneNumber",j:[Do("phone")]},Cb:{name:"updateProfile",j:[W("profile")]},
Db:{name:"verifyBeforeUpdateEmail",j:[V("email"),X(W("opt_actionCodeSettings",!0),zo(null,!0),"opt_actionCodeSettings",!0)]}});Y(Yn.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}});Y(Xn.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}});Y(D.prototype,{na:{name:"finally"},s:{name:"catch"},then:{name:"then"}});
Ko(fm.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",jb:xo("appVerificationDisabledForTesting")}});Y(gm.prototype,{confirm:{name:"confirm",j:[V("verificationCode")]}});Z(Cg,"fromJSON",function(a){a="string"===typeof a?JSON.parse(a):a;for(var b,c=[Ng,eh,lh,Kg],d=0;d<c.length;d++)if(b=c[d](a))return b;return null},[X(V(),W(),"json")]);Z($g,"credential",function(a,b){return new Zg(a,b)},[V("email"),V("password")]);Y(Zg.prototype,{w:{name:"toJSON",j:[V(null,!0)]}});
Y(Rg.prototype,{Ca:{name:"addScope",j:[V("scope")]},Ka:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Rg,"credential",Sg,[X(V(),W(),"token")]);Z($g,"credentialWithLink",fh,[V("email"),V("emailLink")]);Y(Tg.prototype,{Ca:{name:"addScope",j:[V("scope")]},Ka:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Tg,"credential",Ug,[X(V(),W(),"token")]);Y(Vg.prototype,{Ca:{name:"addScope",j:[V("scope")]},Ka:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});
Z(Vg,"credential",Wg,[X(V(),X(W(),zo()),"idToken"),X(V(),zo(),"accessToken",!0)]);Y(Xg.prototype,{Ka:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Xg,"credential",Yg,[X(V(),W(),"token"),V("secret",!0)]);Y(Qg.prototype,{Ca:{name:"addScope",j:[V("scope")]},credential:{name:"credential",j:[X(V(),X(W(),zo()),"optionsOrIdToken"),X(V(),zo(),"accessToken",!0)]},Ka:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Y(Lg.prototype,{w:{name:"toJSON",j:[V(null,!0)]}});
Y(Fg.prototype,{w:{name:"toJSON",j:[V(null,!0)]}});Z(mh,"credential",qh,[V("verificationId"),V("verificationCode")]);
Y(mh.prototype,{eb:{name:"verifyPhoneNumber",j:[X(V(),function(a,b){return {name:a||"phoneInfoOptions",J:"valid phone info options",optional:!!b,K:function(c){return c?c.session&&c.phoneNumber?Go(c.session,Ag)&&"string"===typeof c.phoneNumber:c.session&&c.multiFactorHint?Go(c.session,Bg)&&Ho(c.multiFactorHint):c.session&&c.multiFactorUid?Go(c.session,Bg)&&"string"===typeof c.multiFactorUid:c.phoneNumber?"string"===typeof c.phoneNumber:!1:!1}}}(),"phoneInfoOptions"),Io()]}});
Y(hh.prototype,{w:{name:"toJSON",j:[V(null,!0)]}});Y(t.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(zh.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(yh.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(mm.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(jm.prototype,{Qc:{name:"resolveSignIn",j:[Eo()]}});
Y(um.prototype,{Qb:{name:"getSession",j:[]},ec:{name:"enroll",j:[Eo(),V("displayName",!0)]},ad:{name:"unenroll",j:[X({name:"multiFactorInfo",J:"a valid multiFactorInfo",optional:!1,K:Ho},V(),"multiFactorInfoIdentifier")]}});Y(uo.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}});Z(Kf,"parseLink",Sf,[V("link")]);Z(eo,"assertion",function(a){return new sm(a)},[Do("phone")]);
(function(){if("undefined"!==typeof firebase$1&&firebase$1.INTERNAL&&firebase$1.INTERNAL.registerComponent){var a={ActionCodeInfo:{Operation:{EMAIL_SIGNIN:Bf,PASSWORD_RESET:"PASSWORD_RESET",RECOVER_EMAIL:"RECOVER_EMAIL",REVERT_SECOND_FACTOR_ADDITION:Df,VERIFY_AND_CHANGE_EMAIL:Cf,VERIFY_EMAIL:"VERIFY_EMAIL"}},Auth:Fn,AuthCredential:Cg,Error:t};Z(a,"EmailAuthProvider",$g,[]);Z(a,"FacebookAuthProvider",Rg,[]);Z(a,"GithubAuthProvider",Tg,[]);Z(a,"GoogleAuthProvider",Vg,[]);Z(a,"TwitterAuthProvider",Xg,[]);
Z(a,"OAuthProvider",Qg,[V("providerId")]);Z(a,"SAMLAuthProvider",Pg,[V("providerId")]);Z(a,"PhoneAuthProvider",mh,[Bo()]);Z(a,"RecaptchaVerifier",uo,[X(V(),Ao(),"recaptchaContainer"),W("recaptchaParameters",!0),Co()]);Z(a,"ActionCodeURL",Kf,[]);Z(a,"PhoneMultiFactorGenerator",eo,[]);firebase$1.INTERNAL.registerComponent({name:"auth",instanceFactory:function(b){b=b.getProvider("app").getImmediate();return new Fn(b)},multipleInstances:!1,serviceProps:a,instantiationMode:"LAZY",type:"PUBLIC"});firebase$1.INTERNAL.registerComponent({name:"auth-internal",
instanceFactory:function(b){b=b.getProvider("auth").getImmediate();return {getUid:q(b.getUid,b),getToken:q(b.mc,b),addAuthTokenListener:q(b.cc,b),removeAuthTokenListener:q(b.Oc,b)}},multipleInstances:!1,instantiationMode:"LAZY",type:"PRIVATE"});firebase$1.registerVersion("@firebase/auth","0.15.2");firebase$1.INTERNAL.extendNamespace({User:Jm});}else throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");})();}).apply(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {});

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics$2 = function(d, b) {
    extendStatics$2 = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics$2(d, b);
};

function __extends$2(d, b) {
    extendStatics$2(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __values$2(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var h, goog = goog || {}, k = commonjsGlobal || self;
function aa() { }
function ba(a) { var b = typeof a; b = "object" != b ? b : a ? Array.isArray(a) ? "array" : b : "null"; return "array" == b || "object" == b && "number" == typeof a.length; }
function n(a) { var b = typeof a; return "object" == b && null != a || "function" == b; }
function ca(a) { return Object.prototype.hasOwnProperty.call(a, da) && a[da] || (a[da] = ++ea); }
var da = "closure_uid_" + (1E9 * Math.random() >>> 0), ea = 0;
function fa(a, b, c) { return a.call.apply(a.bind, arguments); }
function ha(a, b, c) { if (!a)
    throw Error(); if (2 < arguments.length) {
    var d = Array.prototype.slice.call(arguments, 2);
    return function () { var e = Array.prototype.slice.call(arguments); Array.prototype.unshift.apply(e, d); return a.apply(b, e); };
} return function () { return a.apply(b, arguments); }; }
function p(a, b, c) { Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? p = fa : p = ha; return p.apply(null, arguments); }
function ja(a, b) { var c = Array.prototype.slice.call(arguments, 1); return function () { var d = c.slice(); d.push.apply(d, arguments); return a.apply(this, d); }; }
function q() { return Date.now(); }
function r(a, b) { function c() { } c.prototype = b.prototype; a.X = b.prototype; a.prototype = new c; a.prototype.constructor = a; a.Kb = function (d, e, f) { for (var g = Array(arguments.length - 2), m = 2; m < arguments.length; m++)
    g[m - 2] = arguments[m]; return b.prototype[e].apply(d, g); }; }
function t() { this.j = this.j; this.i = this.i; }
var ka = 0;
t.prototype.j = !1;
t.prototype.ja = function () { if (!this.j && (this.j = !0, this.G(), 0 != ka)) {
    var a = ca(this);
} };
t.prototype.G = function () { if (this.i)
    for (; this.i.length;)
        this.i.shift()(); };
var ma = Array.prototype.indexOf ? function (a, b) { return Array.prototype.indexOf.call(a, b, void 0); } : function (a, b) { if ("string" === typeof a)
    return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0); for (var c = 0; c < a.length; c++)
    if (c in a && a[c] === b)
        return c; return -1; }, na = Array.prototype.forEach ? function (a, b, c) { Array.prototype.forEach.call(a, b, c); } : function (a, b, c) { for (var d = a.length, e = "string" === typeof a ? a.split("") : a, f = 0; f < d; f++)
    f in e && b.call(c, e[f], f, a); };
function oa(a) { a: {
    var b = pa;
    for (var c = a.length, d = "string" === typeof a ? a.split("") : a, e = 0; e < c; e++)
        if (e in d && b.call(void 0, d[e], e, a)) {
            b = e;
            break a;
        }
    b = -1;
} return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b]; }
function qa(a) { return Array.prototype.concat.apply([], arguments); }
function ra(a) { var b = a.length; if (0 < b) {
    for (var c = Array(b), d = 0; d < b; d++)
        c[d] = a[d];
    return c;
} return []; }
function sa(a) { return /^[\s\xa0]*$/.test(a); }
var ta = String.prototype.trim ? function (a) { return a.trim(); } : function (a) { return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]; };
function v(a, b) { return -1 != a.indexOf(b); }
function ua(a, b) { return a < b ? -1 : a > b ? 1 : 0; }
var w;
a: {
    var va = k.navigator;
    if (va) {
        var wa = va.userAgent;
        if (wa) {
            w = wa;
            break a;
        }
    }
    w = "";
}
function za(a, b, c) { for (var d in a)
    b.call(c, a[d], d, a); }
function Aa(a) { var b = {}; for (var c in a)
    b[c] = a[c]; return b; }
var Ba = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
function Ca(a, b) { var c, d; for (var e = 1; e < arguments.length; e++) {
    d = arguments[e];
    for (c in d)
        a[c] = d[c];
    for (var f = 0; f < Ba.length; f++)
        c = Ba[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
} }
function Da(a) { Da[" "](a); return a; }
Da[" "] = aa;
function Ea(a, b) { var c = Fa; return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a); }
var Ga = v(w, "Opera"), x = v(w, "Trident") || v(w, "MSIE"), Ha = v(w, "Edge"), Ia = Ha || x, Ja = v(w, "Gecko") && !(v(w.toLowerCase(), "webkit") && !v(w, "Edge")) && !(v(w, "Trident") || v(w, "MSIE")) && !v(w, "Edge"), Ka = v(w.toLowerCase(), "webkit") && !v(w, "Edge");
function La() { var a = k.document; return a ? a.documentMode : void 0; }
var Ma;
a: {
    var Na = "", Oa = function () { var a = w; if (Ja)
        return /rv:([^\);]+)(\)|;)/.exec(a); if (Ha)
        return /Edge\/([\d\.]+)/.exec(a); if (x)
        return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a); if (Ka)
        return /WebKit\/(\S+)/.exec(a); if (Ga)
        return /(?:Version)[ \/]?(\S+)/.exec(a); }();
    Oa && (Na = Oa ? Oa[1] : "");
    if (x) {
        var Pa = La();
        if (null != Pa && Pa > parseFloat(Na)) {
            Ma = String(Pa);
            break a;
        }
    }
    Ma = Na;
}
var Fa = {};
function Qa(a) { return Ea(a, function () { {
    var b = 0;
    var e = ta(String(Ma)).split("."), f = ta(String(a)).split("."), g = Math.max(e.length, f.length);
    for (var m = 0; 0 == b && m < g; m++) {
        var c = e[m] || "", d = f[m] || "";
        do {
            c = /(\d*)(\D*)(.*)/.exec(c) || ["", "", "", ""];
            d = /(\d*)(\D*)(.*)/.exec(d) || ["", "", "", ""];
            if (0 == c[0].length && 0 == d[0].length)
                break;
            b = ua(0 == c[1].length ? 0 : parseInt(c[1], 10), 0 == d[1].length ? 0 : parseInt(d[1], 10)) || ua(0 == c[2].length, 0 == d[2].length) || ua(c[2], d[2]);
            c = c[3];
            d = d[3];
        } while (0 == b);
    }
} return 0 <= b; }); }
var Ra;
if (k.document && x) {
    var Sa = La();
    Ra = Sa ? Sa : parseInt(Ma, 10) || void 0;
}
else
    Ra = void 0;
var Ta = Ra;
var Ua = !x || 9 <= Number(Ta), Va = x && !Qa("9"), Wa = function () { if (!k.addEventListener || !Object.defineProperty)
    return !1; var a = !1, b = Object.defineProperty({}, "passive", { get: function () { a = !0; } }); try {
    k.addEventListener("test", aa, b), k.removeEventListener("test", aa, b);
}
catch (c) { } return a; }();
function y(a, b) { this.type = a; this.a = this.target = b; this.defaultPrevented = !1; }
y.prototype.b = function () { this.defaultPrevented = !0; };
function z(a, b) {
    y.call(this, a ? a.type : "");
    this.relatedTarget = this.a = this.target = null;
    this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
    this.key = "";
    this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
    this.pointerId = 0;
    this.pointerType = "";
    this.c = null;
    if (a) {
        var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
        this.target = a.target || a.srcElement;
        this.a = b;
        if (b = a.relatedTarget) {
            if (Ja) {
                a: {
                    try {
                        Da(b.nodeName);
                        var e = !0;
                        break a;
                    }
                    catch (f) { }
                    e = !1;
                }
                e || (b = null);
            }
        }
        else
            "mouseover" ==
                c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);
        this.relatedTarget = b;
        d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
        this.button = a.button;
        this.key = a.key || "";
        this.ctrlKey = a.ctrlKey;
        this.altKey = a.altKey;
        this.shiftKey = a.shiftKey;
        this.metaKey =
            a.metaKey;
        this.pointerId = a.pointerId || 0;
        this.pointerType = "string" === typeof a.pointerType ? a.pointerType : Xa[a.pointerType] || "";
        this.c = a;
        a.defaultPrevented && this.b();
    }
}
r(z, y);
var Xa = { 2: "touch", 3: "pen", 4: "mouse" };
z.prototype.b = function () { z.X.b.call(this); var a = this.c; if (a.preventDefault)
    a.preventDefault();
else if (a.returnValue = !1, Va)
    try {
        if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode)
            a.keyCode = -1;
    }
    catch (b) { } };
var A = "closure_listenable_" + (1E6 * Math.random() | 0), Ya = 0;
function Za(a, b, c, d, e) { this.listener = a; this.proxy = null; this.src = b; this.type = c; this.capture = !!d; this.ca = e; this.key = ++Ya; this.Y = this.Z = !1; }
function $a(a) { a.Y = !0; a.listener = null; a.proxy = null; a.src = null; a.ca = null; }
function ab(a) { this.src = a; this.a = {}; this.b = 0; }
ab.prototype.add = function (a, b, c, d, e) { var f = a.toString(); a = this.a[f]; a || (a = this.a[f] = [], this.b++); var g = bb(a, b, d, e); -1 < g ? (b = a[g], c || (b.Z = !1)) : (b = new Za(b, this.src, f, !!d, e), b.Z = c, a.push(b)); return b; };
function cb(a, b) { var c = b.type; if (c in a.a) {
    var d = a.a[c], e = ma(d, b), f;
    (f = 0 <= e) && Array.prototype.splice.call(d, e, 1);
    f && ($a(b), 0 == a.a[c].length && (delete a.a[c], a.b--));
} }
function bb(a, b, c, d) { for (var e = 0; e < a.length; ++e) {
    var f = a[e];
    if (!f.Y && f.listener == b && f.capture == !!c && f.ca == d)
        return e;
} return -1; }
var db = "closure_lm_" + (1E6 * Math.random() | 0), eb = {};
function gb(a, b, c, d, e) { if (d && d.once)
    return hb(a, b, c, d, e); if (Array.isArray(b)) {
    for (var f = 0; f < b.length; f++)
        gb(a, b[f], c, d, e);
    return null;
} c = ib(c); return a && a[A] ? a.va(b, c, n(d) ? !!d.capture : !!d, e) : jb(a, b, c, !1, d, e); }
function jb(a, b, c, d, e, f) {
    if (!b)
        throw Error("Invalid event type");
    var g = n(e) ? !!e.capture : !!e;
    if (g && !Ua)
        return null;
    var m = kb(a);
    m || (a[db] = m = new ab(a));
    c = m.add(b, c, d, g, f);
    if (c.proxy)
        return c;
    d = lb();
    c.proxy = d;
    d.src = a;
    d.listener = c;
    if (a.addEventListener)
        Wa || (e = g), void 0 === e && (e = !1), a.addEventListener(b.toString(), d, e);
    else if (a.attachEvent)
        a.attachEvent(mb(b.toString()), d);
    else if (a.addListener && a.removeListener)
        a.addListener(d);
    else
        throw Error("addEventListener and attachEvent are unavailable.");
    return c;
}
function lb() { var a = nb, b = Ua ? function (c) { return a.call(b.src, b.listener, c); } : function (c) { c = a.call(b.src, b.listener, c); if (!c)
    return c; }; return b; }
function hb(a, b, c, d, e) { if (Array.isArray(b)) {
    for (var f = 0; f < b.length; f++)
        hb(a, b[f], c, d, e);
    return null;
} c = ib(c); return a && a[A] ? a.wa(b, c, n(d) ? !!d.capture : !!d, e) : jb(a, b, c, !0, d, e); }
function ob(a, b, c, d, e) { if (Array.isArray(b))
    for (var f = 0; f < b.length; f++)
        ob(a, b[f], c, d, e);
else
    (d = n(d) ? !!d.capture : !!d, c = ib(c), a && a[A]) ? (a = a.c, b = String(b).toString(), b in a.a && (f = a.a[b], c = bb(f, c, d, e), -1 < c && ($a(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.a[b], a.b--)))) : a && (a = kb(a)) && (b = a.a[b.toString()], a = -1, b && (a = bb(b, c, d, e)), (c = -1 < a ? b[a] : null) && pb(c)); }
function pb(a) { if ("number" !== typeof a && a && !a.Y) {
    var b = a.src;
    if (b && b[A])
        cb(b.c, a);
    else {
        var c = a.type, d = a.proxy;
        b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(mb(c), d) : b.addListener && b.removeListener && b.removeListener(d);
        (c = kb(b)) ? (cb(c, a), 0 == c.b && (c.src = null, b[db] = null)) : $a(a);
    }
} }
function mb(a) { return a in eb ? eb[a] : eb[a] = "on" + a; }
function qb(a, b) { var c = a.listener, d = a.ca || a.src; a.Z && pb(a); return c.call(d, b); }
function nb(a, b) { if (a.Y)
    return !0; if (!Ua) {
    if (!b)
        a: {
            b = ["window", "event"];
            for (var c = k, d = 0; d < b.length; d++)
                if (c = c[b[d]], null == c) {
                    b = null;
                    break a;
                }
            b = c;
        }
    b = new z(b, this);
    return qb(a, b);
} return qb(a, new z(b, this)); }
function kb(a) { a = a[db]; return a instanceof ab ? a : null; }
var sb = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);
function ib(a) { if ("function" === typeof a)
    return a; a[sb] || (a[sb] = function (b) { return a.handleEvent(b); }); return a[sb]; }
function D() { t.call(this); this.c = new ab(this); this.J = this; this.C = null; }
r(D, t);
D.prototype[A] = !0;
h = D.prototype;
h.addEventListener = function (a, b, c, d) { gb(this, a, b, c, d); };
h.removeEventListener = function (a, b, c, d) { ob(this, a, b, c, d); };
function E(a, b) { var c, d = a.C; if (d)
    for (c = []; d; d = d.C)
        c.push(d); a = a.J; d = b.type || b; if ("string" === typeof b)
    b = new y(b, a);
else if (b instanceof y)
    b.target = b.target || a;
else {
    var e = b;
    b = new y(d, a);
    Ca(b, e);
} e = !0; if (c)
    for (var f = c.length - 1; 0 <= f; f--) {
        var g = b.a = c[f];
        e = tb(g, d, !0, b) && e;
    } g = b.a = a; e = tb(g, d, !0, b) && e; e = tb(g, d, !1, b) && e; if (c)
    for (f = 0; f < c.length; f++)
        g = b.a = c[f], e = tb(g, d, !1, b) && e; }
h.G = function () { D.X.G.call(this); if (this.c) {
    var a = this.c, c;
    for (c in a.a) {
        for (var d = a.a[c], e = 0; e < d.length; e++)
            $a(d[e]);
        delete a.a[c];
        a.b--;
    }
} this.C = null; };
h.va = function (a, b, c, d) { return this.c.add(String(a), b, !1, c, d); };
h.wa = function (a, b, c, d) { return this.c.add(String(a), b, !0, c, d); };
function tb(a, b, c, d) { b = a.c.a[String(b)]; if (!b)
    return !0; b = b.concat(); for (var e = !0, f = 0; f < b.length; ++f) {
    var g = b[f];
    if (g && !g.Y && g.capture == c) {
        var m = g.listener, l = g.ca || g.src;
        g.Z && cb(a.c, g);
        e = !1 !== m.call(l, d) && e;
    }
} return e && !d.defaultPrevented; }
var ub = k.JSON.stringify;
function vb() { this.b = this.a = null; }
var xb = new /** @class */ (function () {
    function class_1(a, b) {
        this.c = a;
        this.f = b;
        this.b = 0;
        this.a = null;
    }
    class_1.prototype.get = function () { var a; 0 < this.b ? (this.b--, a = this.a, this.a = a.next, a.next = null) : a = this.c(); return a; };
    return class_1;
}())(function () { return new wb; }, function (a) { a.reset(); });
vb.prototype.add = function (a, b) { var c = xb.get(); c.set(a, b); this.b ? this.b.next = c : this.a = c; this.b = c; };
function yb() { var a = zb, b = null; a.a && (b = a.a, a.a = a.a.next, a.a || (a.b = null), b.next = null); return b; }
function wb() { this.next = this.b = this.a = null; }
wb.prototype.set = function (a, b) { this.a = a; this.b = b; this.next = null; };
wb.prototype.reset = function () { this.next = this.b = this.a = null; };
function Ab(a) { k.setTimeout(function () { throw a; }, 0); }
function Bb(a, b) { Cb || Db(); Eb || (Cb(), Eb = !0); zb.add(a, b); }
var Cb;
function Db() { var a = k.Promise.resolve(void 0); Cb = function () { a.then(Fb); }; }
var Eb = !1, zb = new vb;
function Fb() { for (var a; a = yb();) {
    try {
        a.a.call(a.b);
    }
    catch (c) {
        Ab(c);
    }
    var b = xb;
    b.f(a);
    100 > b.b && (b.b++, a.next = b.a, b.a = a);
} Eb = !1; }
function Gb(a, b) { D.call(this); this.b = a || 1; this.a = b || k; this.f = p(this.Za, this); this.g = q(); }
r(Gb, D);
h = Gb.prototype;
h.aa = !1;
h.M = null;
h.Za = function () { if (this.aa) {
    var a = q() - this.g;
    0 < a && a < .8 * this.b ? this.M = this.a.setTimeout(this.f, this.b - a) : (this.M && (this.a.clearTimeout(this.M), this.M = null), E(this, "tick"), this.aa && (Hb(this), this.start()));
} };
h.start = function () { this.aa = !0; this.M || (this.M = this.a.setTimeout(this.f, this.b), this.g = q()); };
function Hb(a) { a.aa = !1; a.M && (a.a.clearTimeout(a.M), a.M = null); }
h.G = function () { Gb.X.G.call(this); Hb(this); delete this.a; };
function Ib(a, b, c) { if ("function" === typeof a)
    c && (a = p(a, c));
else if (a && "function" == typeof a.handleEvent)
    a = p(a.handleEvent, a);
else
    throw Error("Invalid listener argument"); return 2147483647 < Number(b) ? -1 : k.setTimeout(a, b || 0); }
function Jb(a) { a.a = Ib(function () { a.a = null; a.c && (a.c = !1, Jb(a)); }, a.h); var b = a.b; a.b = null; a.g.apply(null, b); }
var Kb = /** @class */ (function (_super) {
    __extends$2(Kb, _super);
    function Kb(a, b) {
        var _this = _super.call(this) || this;
        _this.g = a;
        _this.h = b;
        _this.b = null;
        _this.c = !1;
        _this.a = null;
        return _this;
    }
    Kb.prototype.f = function (a) { this.b = arguments; this.a ? this.c = !0 : Jb(this); };
    Kb.prototype.G = function () { _super.prototype.G.call(this); this.a && (k.clearTimeout(this.a), this.a = null, this.c = !1, this.b = null); };
    return Kb;
}(t));
function F(a) { t.call(this); this.b = a; this.a = {}; }
r(F, t);
var Lb = [];
function Mb(a, b, c, d) { Array.isArray(c) || (c && (Lb[0] = c.toString()), c = Lb); for (var e = 0; e < c.length; e++) {
    var f = gb(b, c[e], d || a.handleEvent, !1, a.b || a);
    if (!f)
        break;
    a.a[f.key] = f;
} }
function Nb(a) { za(a.a, function (b, c) { this.a.hasOwnProperty(c) && pb(b); }, a); a.a = {}; }
F.prototype.G = function () { F.X.G.call(this); Nb(this); };
F.prototype.handleEvent = function () { throw Error("EventHandler.handleEvent not implemented"); };
function Ob() { this.a = !0; }
function Pb(a, b, c, d, e, f) { a.info(function () { if (a.a)
    if (f) {
        var g = "";
        for (var m = f.split("&"), l = 0; l < m.length; l++) {
            var u = m[l].split("=");
            if (1 < u.length) {
                var C = u[0];
                u = u[1];
                var B = C.split("_");
                g = 2 <= B.length && "type" == B[1] ? g + (C + "=" + u + "&") : g + (C + "=redacted&");
            }
        }
    }
    else
        g = null;
else
    g = f; return "XMLHTTP REQ (" + d + ") [attempt " + e + "]: " + b + "\n" + c + "\n" + g; }); }
function Qb(a, b, c, d, e, f, g) { a.info(function () { return "XMLHTTP RESP (" + d + ") [ attempt " + e + "]: " + b + "\n" + c + "\n" + f + " " + g; }); }
function G(a, b, c, d) { a.info(function () { return "XMLHTTP TEXT (" + b + "): " + Rb(a, c) + (d ? " " + d : ""); }); }
function Sb(a, b) { a.info(function () { return "TIMEOUT: " + b; }); }
Ob.prototype.info = function () { };
function Rb(a, b) { if (!a.a)
    return b; if (!b)
    return null; try {
    var c = JSON.parse(b);
    if (c)
        for (a = 0; a < c.length; a++)
            if (Array.isArray(c[a])) {
                var d = c[a];
                if (!(2 > d.length)) {
                    var e = d[1];
                    if (Array.isArray(e) && !(1 > e.length)) {
                        var f = e[0];
                        if ("noop" != f && "stop" != f && "close" != f)
                            for (var g = 1; g < e.length; g++)
                                e[g] = "";
                    }
                }
            }
    return ub(c);
}
catch (m) {
    return b;
} }
var H = {}, Tb = null;
function Ub() { return Tb = Tb || new D; }
H.Fa = "serverreachability";
function Vb(a) { y.call(this, H.Fa, a); }
r(Vb, y);
function I(a) { var b = Ub(); E(b, new Vb(b, a)); }
H.STAT_EVENT = "statevent";
function Wb(a, b) { y.call(this, H.STAT_EVENT, a); this.stat = b; }
r(Wb, y);
function J(a) { var b = Ub(); E(b, new Wb(b, a)); }
H.Ga = "timingevent";
function Xb(a) { y.call(this, H.Ga, a); }
r(Xb, y);
function K(a, b) { if ("function" !== typeof a)
    throw Error("Fn must not be null and must be a function"); return k.setTimeout(function () { a(); }, b); }
var Yb = { NO_ERROR: 0, $a: 1, nb: 2, mb: 3, hb: 4, lb: 5, ob: 6, Da: 7, TIMEOUT: 8, rb: 9 };
var Zb = { fb: "complete", Bb: "success", Ea: "error", Da: "abort", tb: "ready", ub: "readystatechange", TIMEOUT: "timeout", pb: "incrementaldata", sb: "progress", ib: "downloadprogress", Jb: "uploadprogress" };
function $b() { }
$b.prototype.a = null;
function ac(a) { var b; (b = a.a) || (b = a.a = {}); return b; }
function bc() { }
var L = { OPEN: "a", eb: "b", Ea: "c", qb: "d" };
function cc() { y.call(this, "d"); }
r(cc, y);
function dc() { y.call(this, "c"); }
r(dc, y);
var ec;
function fc() { }
r(fc, $b);
ec = new fc;
function M(a, b, c, d) { this.g = a; this.c = b; this.f = c; this.S = d || 1; this.J = new F(this); this.P = gc; a = Ia ? 125 : void 0; this.R = new Gb(a); this.B = null; this.b = !1; this.j = this.l = this.i = this.H = this.u = this.T = this.o = null; this.s = []; this.a = null; this.D = 0; this.h = this.m = null; this.N = -1; this.A = !1; this.O = 0; this.F = null; this.V = this.C = this.U = this.I = !1; }
var gc = 45E3, hc = {}, ic = {};
h = M.prototype;
h.setTimeout = function (a) { this.P = a; };
function jc(a, b, c) { a.H = 1; a.i = kc(N(b)); a.j = c; a.I = !0; lc(a, null); }
function lc(a, b) { a.u = q(); mc(a); a.l = N(a.i); var c = a.l, d = a.S; Array.isArray(d) || (d = [String(d)]); nc(c.b, "t", d); a.D = 0; a.a = oc(a.g, a.g.C ? b : null); 0 < a.O && (a.F = new Kb(p(a.Ca, a, a.a), a.O)); Mb(a.J, a.a, "readystatechange", a.Xa); b = a.B ? Aa(a.B) : {}; a.j ? (a.m || (a.m = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a.a.ba(a.l, a.m, a.j, b)) : (a.m = "GET", a.a.ba(a.l, a.m, null, b)); I(1); Pb(a.c, a.m, a.l, a.f, a.S, a.j); }
h.Xa = function (a) { a = a.target; var b = this.F; b && 3 == O(a) ? b.f() : this.Ca(a); };
h.Ca = function (a) {
    try {
        if (a == this.a)
            a: {
                var b = O(this.a), c = this.a.ua(), d = this.a.W();
                if (!(3 > b || 3 == b && !Ia && !this.a.$())) {
                    this.A || 4 != b || 7 == c || (8 == c || 0 >= d ? I(3) : I(2));
                    pc(this);
                    var e = this.a.W();
                    this.N = e;
                    var f = this.a.$();
                    this.b = 200 == e;
                    Qb(this.c, this.m, this.l, this.f, this.S, b, e);
                    if (this.b) {
                        if (this.U && !this.C) {
                            b: {
                                if (this.a) {
                                    var g, m = this.a;
                                    if ((g = m.a ? m.a.getResponseHeader("X-HTTP-Initial-Response") : null) && !sa(g)) {
                                        var l = g;
                                        break b;
                                    }
                                }
                                l = null;
                            }
                            if (l)
                                G(this.c, this.f, l, "Initial handshake response via X-HTTP-Initial-Response"),
                                    this.C = !0, qc(this, l);
                            else {
                                this.b = !1;
                                this.h = 3;
                                J(12);
                                P(this);
                                rc(this);
                                break a;
                            }
                        }
                        this.I ? (sc(this, b, f), Ia && this.b && 3 == b && (Mb(this.J, this.R, "tick", this.Wa), this.R.start())) : (G(this.c, this.f, f, null), qc(this, f));
                        4 == b && P(this);
                        this.b && !this.A && (4 == b ? uc(this.g, this) : (this.b = !1, mc(this)));
                    }
                    else
                        400 == e && 0 < f.indexOf("Unknown SID") ? (this.h = 3, J(12)) : (this.h = 0, J(13)), P(this), rc(this);
                }
            }
    }
    catch (u) { }
    finally { }
};
function sc(a, b, c) { for (var d = !0; !a.A && a.D < c.length;) {
    var e = vc(a, c);
    if (e == ic) {
        4 == b && (a.h = 4, J(14), d = !1);
        G(a.c, a.f, null, "[Incomplete Response]");
        break;
    }
    else if (e == hc) {
        a.h = 4;
        J(15);
        G(a.c, a.f, c, "[Invalid Chunk]");
        d = !1;
        break;
    }
    else
        G(a.c, a.f, e, null), qc(a, e);
} 4 == b && 0 == c.length && (a.h = 1, J(16), d = !1); a.b = a.b && d; d ? 0 < c.length && !a.V && (a.V = !0, b = a.g, b.a == a && b.U && !b.F && (b.c.info("Great, no buffering proxy detected. Bytes received: " + c.length), wc(b), b.F = !0, J(11))) : (G(a.c, a.f, c, "[Invalid Chunked Response]"), P(a), rc(a)); }
h.Wa = function () { if (this.a) {
    var a = O(this.a), b = this.a.$();
    this.D < b.length && (pc(this), sc(this, a, b), this.b && 4 != a && mc(this));
} };
function vc(a, b) { var c = a.D, d = b.indexOf("\n", c); if (-1 == d)
    return ic; c = Number(b.substring(c, d)); if (isNaN(c))
    return hc; d += 1; if (d + c > b.length)
    return ic; b = b.substr(d, c); a.D = d + c; return b; }
h.cancel = function () { this.A = !0; P(this); };
function mc(a) { a.T = q() + a.P; yc(a, a.P); }
function yc(a, b) { if (null != a.o)
    throw Error("WatchDog timer not null"); a.o = K(p(a.Va, a), b); }
function pc(a) { a.o && (k.clearTimeout(a.o), a.o = null); }
h.Va = function () { this.o = null; var a = q(); 0 <= a - this.T ? (Sb(this.c, this.l), 2 != this.H && (I(3), J(17)), P(this), this.h = 2, rc(this)) : yc(this, this.T - a); };
function rc(a) { 0 == a.g.v || a.A || uc(a.g, a); }
function P(a) { pc(a); var b = a.F; b && "function" == typeof b.ja && b.ja(); a.F = null; Hb(a.R); Nb(a.J); a.a && (b = a.a, a.a = null, b.abort(), b.ja()); }
function qc(a, b) {
    try {
        var c = a.g;
        if (0 != c.v && (c.a == a || zc(c.b, a)))
            if (c.I = a.N, !a.C && zc(c.b, a) && 3 == c.v) {
                try {
                    var d = c.ka.a.parse(b);
                }
                catch (tc) {
                    d = null;
                }
                if (Array.isArray(d) && 3 == d.length) {
                    var e = d;
                    if (0 == e[0])
                        a: {
                            if (!c.j) {
                                if (c.a)
                                    if (c.a.u + 3E3 < a.u)
                                        Ac(c), Bc(c);
                                    else
                                        break a;
                                Cc(c);
                                J(18);
                            }
                        }
                    else
                        c.oa = e[1], 0 < c.oa - c.P && 37500 > e[2] && c.H && 0 == c.o && !c.m && (c.m = K(p(c.Sa, c), 6E3));
                    if (1 >= Dc(c.b) && c.ea) {
                        try {
                            c.ea();
                        }
                        catch (tc) { }
                        c.ea = void 0;
                    }
                }
                else
                    Q(c, 11);
            }
            else if ((a.C || c.a == a) && Ac(c), !sa(b))
                for (b = d = c.ka.a.parse(b), d = 0; d < b.length; d++)
                    if (e =
                        b[d], c.P = e[0], e = e[1], 2 == c.v)
                        if ("c" == e[0]) {
                            c.J = e[1];
                            c.ga = e[2];
                            var f = e[3];
                            null != f && (c.ha = f, c.c.info("VER=" + c.ha));
                            var g = e[4];
                            null != g && (c.pa = g, c.c.info("SVER=" + c.pa));
                            var m = e[5];
                            if (null != m && "number" === typeof m && 0 < m) {
                                var l = 1.5 * m;
                                c.D = l;
                                c.c.info("backChannelRequestTimeoutMs_=" + l);
                            }
                            l = c;
                            var u = a.a;
                            if (u) {
                                var C = u.a ? u.a.getResponseHeader("X-Client-Wire-Protocol") : null;
                                if (C) {
                                    var B = l.b;
                                    !B.a && (v(C, "spdy") || v(C, "quic") || v(C, "h2")) && (B.f = B.g, B.a = new Set, B.b && (Ec(B, B.b), B.b = null));
                                }
                                if (l.A) {
                                    var rb = u.a ? u.a.getResponseHeader("X-HTTP-Session-Id") :
                                        null;
                                    rb && (l.na = rb, R(l.B, l.A, rb));
                                }
                            }
                            c.v = 3;
                            c.f && c.f.ta();
                            c.U && (c.N = q() - a.u, c.c.info("Handshake RTT: " + c.N + "ms"));
                            l = c;
                            var xa = a;
                            l.la = Fc(l, l.C ? l.ga : null, l.fa);
                            if (xa.C) {
                                Gc(l.b, xa);
                                var ya = xa, xc = l.D;
                                xc && ya.setTimeout(xc);
                                ya.o && (pc(ya), mc(ya));
                                l.a = xa;
                            }
                            else
                                Hc(l);
                            0 < c.g.length && Ic(c);
                        }
                        else
                            "stop" != e[0] && "close" != e[0] || Q(c, 7);
                    else
                        3 == c.v && ("stop" == e[0] || "close" == e[0] ? "stop" == e[0] ? Q(c, 7) : Jc(c) : "noop" != e[0] && c.f && c.f.sa(e), c.o = 0);
        I(4);
    }
    catch (tc) { }
}
function Kc(a) { if (a.K && "function" == typeof a.K)
    return a.K(); if ("string" === typeof a)
    return a.split(""); if (ba(a)) {
    for (var b = [], c = a.length, d = 0; d < c; d++)
        b.push(a[d]);
    return b;
} b = []; c = 0; for (d in a)
    b[c++] = a[d]; return a = b; }
function Lc(a, b) { if (a.forEach && "function" == typeof a.forEach)
    a.forEach(b, void 0);
else if (ba(a) || "string" === typeof a)
    na(a, b, void 0);
else {
    if (a.L && "function" == typeof a.L)
        var c = a.L();
    else if (a.K && "function" == typeof a.K)
        c = void 0;
    else if (ba(a) || "string" === typeof a) {
        c = [];
        for (var d = a.length, e = 0; e < d; e++)
            c.push(e);
    }
    else
        for (e in c = [], d = 0, a)
            c[d++] = e;
    d = Kc(a);
    e = d.length;
    for (var f = 0; f < e; f++)
        b.call(void 0, d[f], c && c[f], a);
} }
function S(a, b) { this.b = {}; this.a = []; this.c = 0; var c = arguments.length; if (1 < c) {
    if (c % 2)
        throw Error("Uneven number of arguments");
    for (var d = 0; d < c; d += 2)
        this.set(arguments[d], arguments[d + 1]);
}
else if (a)
    if (a instanceof S)
        for (c = a.L(), d = 0; d < c.length; d++)
            this.set(c[d], a.get(c[d]));
    else
        for (d in a)
            this.set(d, a[d]); }
h = S.prototype;
h.K = function () { Mc(this); for (var a = [], b = 0; b < this.a.length; b++)
    a.push(this.b[this.a[b]]); return a; };
h.L = function () { Mc(this); return this.a.concat(); };
function Mc(a) { if (a.c != a.a.length) {
    for (var b = 0, c = 0; b < a.a.length;) {
        var d = a.a[b];
        T(a.b, d) && (a.a[c++] = d);
        b++;
    }
    a.a.length = c;
} if (a.c != a.a.length) {
    var e = {};
    for (c = b = 0; b < a.a.length;)
        d = a.a[b], T(e, d) || (a.a[c++] = d, e[d] = 1), b++;
    a.a.length = c;
} }
h.get = function (a, b) { return T(this.b, a) ? this.b[a] : b; };
h.set = function (a, b) { T(this.b, a) || (this.c++, this.a.push(a)); this.b[a] = b; };
h.forEach = function (a, b) { for (var c = this.L(), d = 0; d < c.length; d++) {
    var e = c[d], f = this.get(e);
    a.call(b, f, e, this);
} };
function T(a, b) { return Object.prototype.hasOwnProperty.call(a, b); }
var Nc = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
function Oc(a, b) { if (a) {
    a = a.split("&");
    for (var c = 0; c < a.length; c++) {
        var d = a[c].indexOf("="), e = null;
        if (0 <= d) {
            var f = a[c].substring(0, d);
            e = a[c].substring(d + 1);
        }
        else
            f = a[c];
        b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
    }
} }
function U(a, b) { this.c = this.j = this.f = ""; this.h = null; this.i = this.g = ""; this.a = !1; if (a instanceof U) {
    this.a = void 0 !== b ? b : a.a;
    Pc(this, a.f);
    this.j = a.j;
    Qc(this, a.c);
    Rc(this, a.h);
    this.g = a.g;
    b = a.b;
    var c = new Sc;
    c.c = b.c;
    b.a && (c.a = new S(b.a), c.b = b.b);
    Tc(this, c);
    this.i = a.i;
}
else
    a && (c = String(a).match(Nc)) ? (this.a = !!b, Pc(this, c[1] || "", !0), this.j = Uc(c[2] || ""), Qc(this, c[3] || "", !0), Rc(this, c[4]), this.g = Uc(c[5] || "", !0), Tc(this, c[6] || "", !0), this.i = Uc(c[7] || "")) : (this.a = !!b, this.b = new Sc(null, this.a)); }
U.prototype.toString = function () { var a = [], b = this.f; b && a.push(Vc(b, Wc, !0), ":"); var c = this.c; if (c || "file" == b)
    a.push("//"), (b = this.j) && a.push(Vc(b, Wc, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.h, null != c && a.push(":", String(c)); if (c = this.g)
    this.c && "/" != c.charAt(0) && a.push("/"), a.push(Vc(c, "/" == c.charAt(0) ? Xc : Yc, !0)); (c = this.b.toString()) && a.push("?", c); (c = this.i) && a.push("#", Vc(c, Zc)); return a.join(""); };
function N(a) { return new U(a); }
function Pc(a, b, c) { a.f = c ? Uc(b, !0) : b; a.f && (a.f = a.f.replace(/:$/, "")); }
function Qc(a, b, c) { a.c = c ? Uc(b, !0) : b; }
function Rc(a, b) { if (b) {
    b = Number(b);
    if (isNaN(b) || 0 > b)
        throw Error("Bad port number " + b);
    a.h = b;
}
else
    a.h = null; }
function Tc(a, b, c) { b instanceof Sc ? (a.b = b, $c(a.b, a.a)) : (c || (b = Vc(b, ad)), a.b = new Sc(b, a.a)); }
function R(a, b, c) { a.b.set(b, c); }
function kc(a) { R(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ q()).toString(36)); return a; }
function bd(a) { return a instanceof U ? N(a) : new U(a, void 0); }
function cd(a, b, c, d) { var e = new U(null, void 0); a && Pc(e, a); b && Qc(e, b); c && Rc(e, c); d && (e.g = d); return e; }
function Uc(a, b) { return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : ""; }
function Vc(a, b, c) { return "string" === typeof a ? (a = encodeURI(a).replace(b, dd), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null; }
function dd(a) { a = a.charCodeAt(0); return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16); }
var Wc = /[#\/\?@]/g, Yc = /[#\?:]/g, Xc = /[#\?]/g, ad = /[#\?@]/g, Zc = /#/g;
function Sc(a, b) { this.b = this.a = null; this.c = a || null; this.f = !!b; }
function V(a) { a.a || (a.a = new S, a.b = 0, a.c && Oc(a.c, function (b, c) { a.add(decodeURIComponent(b.replace(/\+/g, " ")), c); })); }
h = Sc.prototype;
h.add = function (a, b) { V(this); this.c = null; a = W(this, a); var c = this.a.get(a); c || this.a.set(a, c = []); c.push(b); this.b += 1; return this; };
function ed(a, b) { V(a); b = W(a, b); T(a.a.b, b) && (a.c = null, a.b -= a.a.get(b).length, a = a.a, T(a.b, b) && (delete a.b[b], a.c--, a.a.length > 2 * a.c && Mc(a))); }
function fd(a, b) { V(a); b = W(a, b); return T(a.a.b, b); }
h.forEach = function (a, b) { V(this); this.a.forEach(function (c, d) { na(c, function (e) { a.call(b, e, d, this); }, this); }, this); };
h.L = function () { V(this); for (var a = this.a.K(), b = this.a.L(), c = [], d = 0; d < b.length; d++)
    for (var e = a[d], f = 0; f < e.length; f++)
        c.push(b[d]); return c; };
h.K = function (a) { V(this); var b = []; if ("string" === typeof a)
    fd(this, a) && (b = qa(b, this.a.get(W(this, a))));
else {
    a = this.a.K();
    for (var c = 0; c < a.length; c++)
        b = qa(b, a[c]);
} return b; };
h.set = function (a, b) { V(this); this.c = null; a = W(this, a); fd(this, a) && (this.b -= this.a.get(a).length); this.a.set(a, [b]); this.b += 1; return this; };
h.get = function (a, b) { if (!a)
    return b; a = this.K(a); return 0 < a.length ? String(a[0]) : b; };
function nc(a, b, c) { ed(a, b); 0 < c.length && (a.c = null, a.a.set(W(a, b), ra(c)), a.b += c.length); }
h.toString = function () { if (this.c)
    return this.c; if (!this.a)
    return ""; for (var a = [], b = this.a.L(), c = 0; c < b.length; c++) {
    var d = b[c], e = encodeURIComponent(String(d));
    d = this.K(d);
    for (var f = 0; f < d.length; f++) {
        var g = e;
        "" !== d[f] && (g += "=" + encodeURIComponent(String(d[f])));
        a.push(g);
    }
} return this.c = a.join("&"); };
function W(a, b) { b = String(b); a.f && (b = b.toLowerCase()); return b; }
function $c(a, b) { b && !a.f && (V(a), a.c = null, a.a.forEach(function (c, d) { var e = d.toLowerCase(); d != e && (ed(this, d), nc(this, e, c)); }, a)); a.f = b; }
var gd = /** @class */ (function () {
    function gd(a, b) {
        this.b = a;
        this.a = b;
    }
    return gd;
}());
function hd(a) { this.g = a || id; k.PerformanceNavigationTiming ? (a = k.performance.getEntriesByType("navigation"), a = 0 < a.length && ("hq" == a[0].nextHopProtocol || "h2" == a[0].nextHopProtocol)) : a = !!(k.ia && k.ia.ya && k.ia.ya() && k.ia.ya().Lb); this.f = a ? this.g : 1; this.a = null; 1 < this.f && (this.a = new Set); this.b = null; this.c = []; }
var id = 10;
function jd(a) { return a.b ? !0 : a.a ? a.a.size >= a.f : !1; }
function Dc(a) { return a.b ? 1 : a.a ? a.a.size : 0; }
function zc(a, b) { return a.b ? a.b == b : a.a ? a.a.has(b) : !1; }
function Ec(a, b) { a.a ? a.a.add(b) : a.b = b; }
function Gc(a, b) { a.b && a.b == b ? a.b = null : a.a && a.a.has(b) && a.a.delete(b); }
hd.prototype.cancel = function () {
    var e_1, _a;
    this.c = kd(this);
    if (this.b)
        this.b.cancel(), this.b = null;
    else if (this.a && 0 !== this.a.size) {
        try {
            for (var _b = __values$2(this.a.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var a = _c.value;
                a.cancel();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.a.clear();
    }
};
function kd(a) {
    var e_2, _a;
    if (null != a.b)
        return a.c.concat(a.b.s);
    if (null != a.a && 0 !== a.a.size) {
        var b = a.c;
        try {
            for (var _b = __values$2(a.a.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var c = _c.value;
                b = b.concat(c.s);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return b;
    }
    return ra(a.c);
}
function ld() { }
ld.prototype.stringify = function (a) { return k.JSON.stringify(a, void 0); };
ld.prototype.parse = function (a) { return k.JSON.parse(a, void 0); };
function md() { this.a = new ld; }
function nd(a, b, c) { var d = c || ""; try {
    Lc(a, function (e, f) { var g = e; n(e) && (g = ub(e)); b.push(d + f + "=" + encodeURIComponent(g)); });
}
catch (e) {
    throw b.push(d + "type=" + encodeURIComponent("_badmap")), e;
} }
function od(a, b) { var c = new Ob; if (k.Image) {
    var d = new Image;
    d.onload = ja(pd, c, d, "TestLoadImage: loaded", !0, b);
    d.onerror = ja(pd, c, d, "TestLoadImage: error", !1, b);
    d.onabort = ja(pd, c, d, "TestLoadImage: abort", !1, b);
    d.ontimeout = ja(pd, c, d, "TestLoadImage: timeout", !1, b);
    k.setTimeout(function () { if (d.ontimeout)
        d.ontimeout(); }, 1E4);
    d.src = a;
}
else
    b(!1); }
function pd(a, b, c, d, e) { try {
    b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, e(d);
}
catch (f) { } }
var qd = k.JSON.parse;
function X(a) { D.call(this); this.headers = new S; this.H = a || null; this.b = !1; this.s = this.a = null; this.B = ""; this.h = 0; this.f = ""; this.g = this.A = this.l = this.u = !1; this.o = 0; this.m = null; this.I = rd; this.D = this.F = !1; }
r(X, D);
var rd = "", sd = /^https?$/i, td = ["POST", "PUT"];
h = X.prototype;
h.ba = function (a, b, c, d) {
    if (this.a)
        throw Error("[goog.net.XhrIo] Object is active with another request=" + this.B + "; newUri=" + a);
    b = b ? b.toUpperCase() : "GET";
    this.B = a;
    this.f = "";
    this.h = 0;
    this.u = !1;
    this.b = !0;
    this.a = new XMLHttpRequest;
    this.s = this.H ? ac(this.H) : ac(ec);
    this.a.onreadystatechange = p(this.za, this);
    try {
        this.A = !0, this.a.open(b, String(a), !0), this.A = !1;
    }
    catch (f) {
        ud(this, f);
        return;
    }
    a = c || "";
    var e = new S(this.headers);
    d && Lc(d, function (f, g) { e.set(g, f); });
    d = oa(e.L());
    c = k.FormData && a instanceof k.FormData;
    !(0 <=
        ma(td, b)) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
    e.forEach(function (f, g) { this.a.setRequestHeader(g, f); }, this);
    this.I && (this.a.responseType = this.I);
    "withCredentials" in this.a && this.a.withCredentials !== this.F && (this.a.withCredentials = this.F);
    try {
        vd(this), 0 < this.o && ((this.D = wd(this.a)) ? (this.a.timeout = this.o, this.a.ontimeout = p(this.xa, this)) : this.m = Ib(this.xa, this.o, this)), this.l = !0, this.a.send(a), this.l = !1;
    }
    catch (f) {
        ud(this, f);
    }
};
function wd(a) { return x && Qa(9) && "number" === typeof a.timeout && void 0 !== a.ontimeout; }
function pa(a) { return "content-type" == a.toLowerCase(); }
h.xa = function () { "undefined" != typeof goog && this.a && (this.f = "Timed out after " + this.o + "ms, aborting", this.h = 8, E(this, "timeout"), this.abort(8)); };
function ud(a, b) { a.b = !1; a.a && (a.g = !0, a.a.abort(), a.g = !1); a.f = b; a.h = 5; xd(a); yd(a); }
function xd(a) { a.u || (a.u = !0, E(a, "complete"), E(a, "error")); }
h.abort = function (a) { this.a && this.b && (this.b = !1, this.g = !0, this.a.abort(), this.g = !1, this.h = a || 7, E(this, "complete"), E(this, "abort"), yd(this)); };
h.G = function () { this.a && (this.b && (this.b = !1, this.g = !0, this.a.abort(), this.g = !1), yd(this, !0)); X.X.G.call(this); };
h.za = function () { this.j || (this.A || this.l || this.g ? zd(this) : this.Ua()); };
h.Ua = function () { zd(this); };
function zd(a) {
    if (a.b && "undefined" != typeof goog && (!a.s[1] || 4 != O(a) || 2 != a.W()))
        if (a.l && 4 == O(a))
            Ib(a.za, 0, a);
        else if (E(a, "readystatechange"), 4 == O(a)) {
            a.b = !1;
            try {
                {
                    var l = a.W();
                    a: switch (l) {
                        case 200:
                        case 201:
                        case 202:
                        case 204:
                        case 206:
                        case 304:
                        case 1223:
                            var b = !0;
                            break a;
                        default: b = !1;
                    }
                    var c;
                    if (!(c = b)) {
                        var d;
                        if (d = 0 === l) {
                            var e = String(a.B).match(Nc)[1] || null;
                            if (!e && k.self && k.self.location) {
                                var f = k.self.location.protocol;
                                e = f.substr(0, f.length - 1);
                            }
                            d = !sd.test(e ? e.toLowerCase() : "");
                        }
                        c = d;
                    }
                    var g = c;
                }
                if (g)
                    E(a, "complete"),
                        E(a, "success");
                else {
                    a.h = 6;
                    try {
                        var m = 2 < O(a) ? a.a.statusText : "";
                    }
                    catch (l) {
                        m = "";
                    }
                    a.f = m + " [" + a.W() + "]";
                    xd(a);
                }
            }
            finally {
                yd(a);
            }
        }
}
function yd(a, b) { if (a.a) {
    vd(a);
    var c = a.a, d = a.s[0] ? aa : null;
    a.a = null;
    a.s = null;
    b || E(a, "ready");
    try {
        c.onreadystatechange = d;
    }
    catch (e) { }
} }
function vd(a) { a.a && a.D && (a.a.ontimeout = null); a.m && (k.clearTimeout(a.m), a.m = null); }
function O(a) { return a.a ? a.a.readyState : 0; }
h.W = function () { try {
    return 2 < O(this) ? this.a.status : -1;
}
catch (a) {
    return -1;
} };
h.$ = function () { try {
    return this.a ? this.a.responseText : "";
}
catch (a) {
    return "";
} };
h.Pa = function (a) { if (this.a) {
    var b = this.a.responseText;
    a && 0 == b.indexOf(a) && (b = b.substring(a.length));
    return qd(b);
} };
h.ua = function () { return this.h; };
h.Qa = function () { return "string" === typeof this.f ? this.f : String(this.f); };
function Ad(a) { var b = ""; za(a, function (c, d) { b += d; b += ":"; b += c; b += "\r\n"; }); return b; }
function Bd(a, b, c) { a: {
    for (d in c) {
        var d = !1;
        break a;
    }
    d = !0;
} d || (c = Ad(c), "string" === typeof a ? (null != c && encodeURIComponent(String(c))) : R(a, b, c)); }
function Cd(a, b, c) { return c && c.internalChannelParams ? c.internalChannelParams[a] || b : b; }
function Dd(a) {
    this.pa = 0;
    this.g = [];
    this.c = new Ob;
    this.ga = this.la = this.B = this.fa = this.a = this.na = this.A = this.V = this.i = this.O = this.l = null;
    this.Oa = this.R = 0;
    this.La = Cd("failFast", !1, a);
    this.H = this.m = this.j = this.h = this.f = null;
    this.S = !0;
    this.I = this.oa = this.P = -1;
    this.T = this.o = this.u = 0;
    this.Ha = Cd("baseRetryDelayMs", 5E3, a);
    this.Ra = Cd("retryDelaySeedMs", 1E4, a);
    this.Ma = Cd("forwardChannelMaxRetries", 2, a);
    this.ma = Cd("forwardChannelRequestTimeoutMs", 2E4, a);
    this.Na = a && a.g || void 0;
    this.D = void 0;
    this.C = a && a.supportsCrossDomainXhr ||
        !1;
    this.J = "";
    this.b = new hd(a && a.concurrentRequestLimit);
    this.ka = new md;
    this.da = a && a.fastHandshake || !1;
    this.Ia = a && a.b || !1;
    a && a.f && (this.c.a = !1);
    a && a.forceLongPolling && (this.S = !1);
    this.U = !this.da && this.S && a && a.detectBufferingProxy || !1;
    this.ea = void 0;
    this.N = 0;
    this.F = !1;
    this.s = null;
    (this.Ka = a && a.c || !1) && this.c.info("Opt-in to enable Chrome Origin Trials.");
}
h = Dd.prototype;
h.ha = 8;
h.v = 1;
function Jc(a) { Ed(a); if (3 == a.v) {
    var b = a.R++, c = N(a.B);
    R(c, "SID", a.J);
    R(c, "RID", b);
    R(c, "TYPE", "terminate");
    Fd(a, c);
    b = new M(a, a.c, b, void 0);
    b.H = 2;
    b.i = kc(N(c));
    c = !1;
    k.navigator && k.navigator.sendBeacon && (c = k.navigator.sendBeacon(b.i.toString(), ""));
    !c && k.Image && ((new Image).src = b.i, c = !0);
    c || (b.a = oc(b.g, null), b.a.ba(b.i));
    b.u = q();
    mc(b);
} Gd(a); }
function Bc(a) { a.a && (wc(a), a.a.cancel(), a.a = null); }
function Ed(a) { Bc(a); a.j && (k.clearTimeout(a.j), a.j = null); Ac(a); a.b.cancel(); a.h && ("number" === typeof a.h && k.clearTimeout(a.h), a.h = null); }
function Hd(a, b) { a.g.push(new gd(a.Oa++, b)); 3 == a.v && Ic(a); }
function Ic(a) { jd(a.b) || a.h || (a.h = !0, Bb(a.Ba, a), a.u = 0); }
function Id(a, b) { if (Dc(a.b) >= a.b.f - (a.h ? 1 : 0))
    return !1; if (a.h)
    return a.g = b.s.concat(a.g), !0; if (1 == a.v || 2 == a.v || a.u >= (a.La ? 0 : a.Ma))
    return !1; a.h = K(p(a.Ba, a, b), Jd(a, a.u)); a.u++; return !0; }
h.Ba = function (a) {
    if (this.h)
        if (this.h = null, 1 == this.v) {
            if (!a) {
                this.R = Math.floor(1E5 * Math.random());
                a = this.R++;
                var b = new M(this, this.c, a, void 0), c = this.l;
                this.O && (c ? (c = Aa(c), Ca(c, this.O)) : c = this.O);
                null === this.i && (b.B = c);
                var d;
                if (this.da)
                    a: {
                        for (var e = d = 0; e < this.g.length; e++) {
                            b: {
                                var f = this.g[e];
                                if ("__data__" in f.a && (f = f.a.__data__, "string" === typeof f)) {
                                    f = f.length;
                                    break b;
                                }
                                f = void 0;
                            }
                            if (void 0 === f)
                                break;
                            d += f;
                            if (4096 < d) {
                                d = e;
                                break a;
                            }
                            if (4096 === d || e === this.g.length - 1) {
                                d = e + 1;
                                break a;
                            }
                        }
                        d = 1E3;
                    }
                else
                    d = 1E3;
                d = Kd(this, b, d);
                e = N(this.B);
                R(e, "RID", a);
                R(e, "CVER", 22);
                this.A && R(e, "X-HTTP-Session-Id", this.A);
                Fd(this, e);
                this.i && c && Bd(e, this.i, c);
                Ec(this.b, b);
                this.Ia && R(e, "TYPE", "init");
                this.da ? (R(e, "$req", d), R(e, "SID", "null"), b.U = !0, jc(b, e, null)) : jc(b, e, d);
                this.v = 2;
            }
        }
        else
            3 == this.v && (a ? Ld(this, a) : 0 == this.g.length || jd(this.b) || Ld(this));
};
function Ld(a, b) { var c; b ? c = b.f : c = a.R++; var d = N(a.B); R(d, "SID", a.J); R(d, "RID", c); R(d, "AID", a.P); Fd(a, d); a.i && a.l && Bd(d, a.i, a.l); c = new M(a, a.c, c, a.u + 1); null === a.i && (c.B = a.l); b && (a.g = b.s.concat(a.g)); b = Kd(a, c, 1E3); c.setTimeout(Math.round(.5 * a.ma) + Math.round(.5 * a.ma * Math.random())); Ec(a.b, c); jc(c, d, b); }
function Fd(a, b) { a.f && Lc({}, function (c, d) { R(b, d, c); }); }
function Kd(a, b, c) { c = Math.min(a.g.length, c); var d = a.f ? p(a.f.Ja, a.f, a) : null; a: for (var e = a.g, f = -1;;) {
    var g = ["count=" + c];
    -1 == f ? 0 < c ? (f = e[0].b, g.push("ofs=" + f)) : f = 0 : g.push("ofs=" + f);
    for (var m = !0, l = 0; l < c; l++) {
        var u = e[l].b, C = e[l].a;
        u -= f;
        if (0 > u)
            f = Math.max(0, e[l].b - 100), m = !1;
        else
            try {
                nd(C, g, "req" + u + "_");
            }
            catch (B) {
                d && d(C);
            }
    }
    if (m) {
        d = g.join("&");
        break a;
    }
} a = a.g.splice(0, c); b.s = a; return d; }
function Hc(a) { a.a || a.j || (a.T = 1, Bb(a.Aa, a), a.o = 0); }
function Cc(a) { if (a.a || a.j || 3 <= a.o)
    return !1; a.T++; a.j = K(p(a.Aa, a), Jd(a, a.o)); a.o++; return !0; }
h.Aa = function () { this.j = null; Md(this); if (this.U && !(this.F || null == this.a || 0 >= this.N)) {
    var a = 2 * this.N;
    this.c.info("BP detection timer enabled: " + a);
    this.s = K(p(this.Ta, this), a);
} };
h.Ta = function () { this.s && (this.s = null, this.c.info("BP detection timeout reached."), this.c.info("Buffering proxy detected and switch to long-polling!"), this.H = !1, this.F = !0, J(10), Bc(this), Md(this)); };
function wc(a) { null != a.s && (k.clearTimeout(a.s), a.s = null); }
function Md(a) { a.a = new M(a, a.c, "rpc", a.T); null === a.i && (a.a.B = a.l); a.a.O = 0; var b = N(a.la); R(b, "RID", "rpc"); R(b, "SID", a.J); R(b, "CI", a.H ? "0" : "1"); R(b, "AID", a.P); Fd(a, b); R(b, "TYPE", "xmlhttp"); a.i && a.l && Bd(b, a.i, a.l); a.D && a.a.setTimeout(a.D); var c = a.a; a = a.ga; c.H = 1; c.i = kc(N(b)); c.j = null; c.I = !0; lc(c, a); }
h.Sa = function () { null != this.m && (this.m = null, Bc(this), Cc(this), J(19)); };
function Ac(a) { null != a.m && (k.clearTimeout(a.m), a.m = null); }
function uc(a, b) { var c = null; if (a.a == b) {
    Ac(a);
    wc(a);
    a.a = null;
    var d = 2;
}
else if (zc(a.b, b))
    c = b.s, Gc(a.b, b), d = 1;
else
    return; a.I = b.N; if (0 != a.v)
    if (b.b)
        if (1 == d) {
            c = b.j ? b.j.length : 0;
            b = q() - b.u;
            var e = a.u;
            d = Ub();
            E(d, new Xb(d, c, b, e));
            Ic(a);
        }
        else
            Hc(a);
    else if (e = b.h, 3 == e || 0 == e && 0 < a.I || !(1 == d && Id(a, b) || 2 == d && Cc(a)))
        switch (c && 0 < c.length && (b = a.b, b.c = b.c.concat(c)), e) {
            case 1:
                Q(a, 5);
                break;
            case 4:
                Q(a, 10);
                break;
            case 3:
                Q(a, 6);
                break;
            default: Q(a, 2);
        } }
function Jd(a, b) { var c = a.Ha + Math.floor(Math.random() * a.Ra); a.f || (c *= 2); return c * b; }
function Q(a, b) { a.c.info("Error code " + b); if (2 == b) {
    var c = null;
    a.f && (c = null);
    var d = p(a.Ya, a);
    c || (c = new U("//www.google.com/images/cleardot.gif"), k.location && "http" == k.location.protocol || Pc(c, "https"), kc(c));
    od(c.toString(), d);
}
else
    J(2); a.v = 0; a.f && a.f.ra(b); Gd(a); Ed(a); }
h.Ya = function (a) { a ? (this.c.info("Successfully pinged google.com"), J(2)) : (this.c.info("Failed to ping google.com"), J(1)); };
function Gd(a) { a.v = 0; a.I = -1; if (a.f) {
    if (0 != kd(a.b).length || 0 != a.g.length)
        a.b.c.length = 0, ra(a.g), a.g.length = 0;
    a.f.qa();
} }
function Fc(a, b, c) { var d = bd(c); if ("" != d.c)
    b && Qc(d, b + "." + d.c), Rc(d, d.h);
else {
    var e = k.location;
    d = cd(e.protocol, b ? b + "." + e.hostname : e.hostname, +e.port, c);
} a.V && za(a.V, function (f, g) { R(d, g, f); }); b = a.A; c = a.na; b && c && R(d, b, c); R(d, "VER", a.ha); Fd(a, d); return d; }
function oc(a, b) { if (b && !a.C)
    throw Error("Can't create secondary domain capable XhrIo object."); b = new X(a.Na); b.F = a.C; return b; }
function Nd() { }
h = Nd.prototype;
h.ta = function () { };
h.sa = function () { };
h.ra = function () { };
h.qa = function () { };
h.Ja = function () { };
function Od() { if (x && !(10 <= Number(Ta)))
    throw Error("Environmental error: no available transport."); }
Od.prototype.a = function (a, b) { return new Y(a, b); };
function Y(a, b) {
    D.call(this);
    this.a = new Dd(b);
    this.o = a;
    this.b = b && b.messageUrlParams || null;
    a = b && b.messageHeaders || null;
    b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = { "X-Client-Protocol": "webchannel" });
    this.a.l = a;
    a = b && b.initMessageHeaders || null;
    b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = { "X-WebChannel-Content-Type": b.messageContentType });
    b && b.a && (a ? a["X-WebChannel-Client-Profile"] = b.a : a = { "X-WebChannel-Client-Profile": b.a });
    this.a.O =
        a;
    (a = b && b.httpHeadersOverwriteParam) && !sa(a) && (this.a.i = a);
    this.m = b && b.supportsCrossDomainXhr || !1;
    this.l = b && b.sendRawJson || !1;
    (b = b && b.httpSessionIdParam) && !sa(b) && (this.a.A = b, a = this.b, null !== a && b in a && (a = this.b, b in a && delete a[b]));
    this.f = new Z(this);
}
r(Y, D);
Y.prototype.g = function () { this.a.f = this.f; this.m && (this.a.C = !0); var a = this.a, b = this.o, c = this.b || void 0; J(0); a.fa = b; a.V = c || {}; a.H = a.S; a.B = Fc(a, null, a.fa); Ic(a); };
Y.prototype.close = function () { Jc(this.a); };
Y.prototype.h = function (a) { if ("string" === typeof a) {
    var b = {};
    b.__data__ = a;
    Hd(this.a, b);
}
else
    this.l ? (b = {}, b.__data__ = ub(a), Hd(this.a, b)) : Hd(this.a, a); };
Y.prototype.G = function () { this.a.f = null; delete this.f; Jc(this.a); delete this.a; Y.X.G.call(this); };
function Pd(a) { cc.call(this); var b = a.__sm__; if (b) {
    a: {
        for (var c in b) {
            a = c;
            break a;
        }
        a = void 0;
    }
    (this.c = a) ? (a = this.c, this.data = null !== b && a in b ? b[a] : void 0) : this.data = b;
}
else
    this.data = a; }
r(Pd, cc);
function Qd() { dc.call(this); this.status = 1; }
r(Qd, dc);
function Z(a) { this.a = a; }
r(Z, Nd);
Z.prototype.ta = function () { E(this.a, "a"); };
Z.prototype.sa = function (a) { E(this.a, new Pd(a)); };
Z.prototype.ra = function (a) { E(this.a, new Qd(a)); };
Z.prototype.qa = function () { E(this.a, "b"); }; /*

 Copyright 2017 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
Od.prototype.createWebChannel = Od.prototype.a;
Y.prototype.send = Y.prototype.h;
Y.prototype.open = Y.prototype.g;
Y.prototype.close = Y.prototype.close;
Yb.NO_ERROR = 0;
Yb.TIMEOUT = 8;
Yb.HTTP_ERROR = 6;
Zb.COMPLETE = "complete";
bc.EventType = L;
L.OPEN = "a";
L.CLOSE = "b";
L.ERROR = "c";
L.MESSAGE = "d";
D.prototype.listen = D.prototype.va;
X.prototype.listenOnce = X.prototype.wa;
X.prototype.getLastError = X.prototype.Qa;
X.prototype.getLastErrorCode = X.prototype.ua;
X.prototype.getStatus = X.prototype.W;
X.prototype.getResponseJson = X.prototype.Pa;
X.prototype.getResponseText = X.prototype.$;
X.prototype.send = X.prototype.ba;
var createWebChannelTransport = function () { return new Od; };
var getStatEventTarget = function () { return Ub(); };
var ErrorCode = Yb;
var EventType = Zb;
var Event = H;
var Stat = { gb: 0, jb: 1, kb: 2, Db: 3, Ib: 4, Fb: 5, Gb: 6, Eb: 7, Cb: 8, Hb: 9, PROXY: 10, NOPROXY: 11, Ab: 12, wb: 13, xb: 14, vb: 15, yb: 16, zb: 17, bb: 18, ab: 19, cb: 20 };
var WebChannel = bc;
var XhrIo = X;

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var E$1 = 
/**
     * Constructs a DatabaseInfo using the provided host, databaseId and
     * persistenceKey.
     *
     * @param databaseId The database to use.
     * @param persistenceKey A unique identifier for this Firestore's local
     * storage (used in conjunction with the databaseId).
     * @param host The Firestore backend host to connect to.
     * @param ssl Whether to use SSL when connecting.
     * @param forceLongPolling Whether to use the forceLongPolling option
     * when using WebChannel as the network transport.
     * @param autoDetectLongPolling Whether to use the detectBufferingProxy
     * option when using WebChannel as the network transport.
     */
function(t, e, n, r, i, o) {
    this.t = t, this.persistenceKey = e, this.host = n, this.ssl = r, this.forceLongPolling = i, 
    this.i = o;
}, T$1 = /** @class */ function() {
    function t(t, e) {
        this.projectId = t, this.database = e || "(default)";
    }
    return Object.defineProperty(t.prototype, "o", {
        get: function() {
            return "(default)" === this.database;
        },
        enumerable: !1,
        configurable: !0
    }), t.prototype.isEqual = function(e) {
        return e instanceof t && e.projectId === this.projectId && e.database === this.database;
    }, t;
}(), N$1 = /** @class */ function() {
    function t(t) {
        this.uid = t;
    }
    return t.prototype.u = function() {
        return null != this.uid;
    }, 
    /**
     * Returns a key representing this user, suitable for inclusion in a
     * dictionary.
     */
    t.prototype.h = function() {
        return this.u() ? "uid:" + this.uid : "anonymous-user";
    }, t.prototype.isEqual = function(t) {
        return t.uid === this.uid;
    }, t;
}();

/** The default database name for a project. */
/** Represents the database ID a Firestore client is associated with. */
/** A user with a null UID. */ N$1.UNAUTHENTICATED = new N$1(null), 
// TODO(mikelehen): Look into getting a proper uid-equivalent for
// non-FirebaseAuth providers.
N$1.l = new N$1("google-credentials-uid"), N$1._ = new N$1("first-party-uid");

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var A$1 = new Logger("@firebase/firestore");

// Helper methods are needed because variables can't be exported as read/write
function D$1() {
    return A$1.logLevel;
}

/**
 * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).
 *
 * @param logLevel
 *   The verbosity you set for activity and error logging. Can be any of
 *   the following values:
 *
 *   <ul>
 *     <li>`debug` for the most verbose logging level, primarily for
 *     debugging.</li>
 *     <li>`error` to log errors only.</li>
 *     <li><code>`silent` to turn off logging.</li>
 *   </ul>
 */ function x$1(t) {
    for (var e = [], n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
    if (A$1.logLevel <= LogLevel.DEBUG) {
        var i = e.map(S$1);
        A$1.debug.apply(A$1, __spreadArrays([ "Firestore (8.1.1): " + t ], i));
    }
}

function k$1(t) {
    for (var e = [], n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
    if (A$1.logLevel <= LogLevel.ERROR) {
        var i = e.map(S$1);
        A$1.error.apply(A$1, __spreadArrays([ "Firestore (8.1.1): " + t ], i));
    }
}

function O$1(t) {
    for (var e = [], n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
    if (A$1.logLevel <= LogLevel.WARN) {
        var i = e.map(S$1);
        A$1.warn.apply(A$1, __spreadArrays([ "Firestore (8.1.1): " + t ], i));
    }
}

/**
 * Converts an additional log parameter to a string representation.
 */ function S$1(t) {
    if ("string" == typeof t) return t;
    try {
        return e = t, JSON.stringify(e);
    } catch (e) {
        // Converting to JSON failed, just log the object directly
        return t;
    }
    /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
    /** Formats an object as a JSON string, suitable for logging. */    var e;
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Unconditionally fails, throwing an Error with the given message.
 * Messages are stripped in production builds.
 *
 * Returns `never` and can be used in expressions:
 * @example
 * let futureVar = fail('not implemented yet');
 */ function P$1(t) {
    void 0 === t && (t = "Unexpected state");
    // Log the failure in addition to throw an exception, just in case the
    // exception is swallowed.
        var e = "FIRESTORE (8.1.1) INTERNAL ASSERTION FAILED: " + t;
    // NOTE: We don't use FirestoreError here because these are internal failures
    // that cannot be handled by the user. (Also it would create a circular
    // dependency between the error and assert modules which doesn't work.)
        throw k$1(e), new Error(e)
    /**
 * Fails if the given assertion condition is false, throwing an Error with the
 * given message if it did.
 *
 * Messages are stripped in production builds.
 */;
}

function C(t, e) {
    t || P$1();
}

/**
 * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
 * instance of `T` before casting.
 */ function R$1(t, 
// eslint-disable-next-line @typescript-eslint/no-explicit-any
e) {
    return t;
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var V$1 = {
    // Causes are copied from:
    // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
    /** Not an error; returned on success. */
    OK: "ok",
    /** The operation was cancelled (typically by the caller). */
    CANCELLED: "cancelled",
    /** Unknown error or an error from a different error domain. */
    UNKNOWN: "unknown",
    /**
     * Client specified an invalid argument. Note that this differs from
     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
     * problematic regardless of the state of the system (e.g., a malformed file
     * name).
     */
    INVALID_ARGUMENT: "invalid-argument",
    /**
     * Deadline expired before operation could complete. For operations that
     * change the state of the system, this error may be returned even if the
     * operation has completed successfully. For example, a successful response
     * from a server could have been delayed long enough for the deadline to
     * expire.
     */
    DEADLINE_EXCEEDED: "deadline-exceeded",
    /** Some requested entity (e.g., file or directory) was not found. */
    NOT_FOUND: "not-found",
    /**
     * Some entity that we attempted to create (e.g., file or directory) already
     * exists.
     */
    ALREADY_EXISTS: "already-exists",
    /**
     * The caller does not have permission to execute the specified operation.
     * PERMISSION_DENIED must not be used for rejections caused by exhausting
     * some resource (use RESOURCE_EXHAUSTED instead for those errors).
     * PERMISSION_DENIED must not be used if the caller can not be identified
     * (use UNAUTHENTICATED instead for those errors).
     */
    PERMISSION_DENIED: "permission-denied",
    /**
     * The request does not have valid authentication credentials for the
     * operation.
     */
    UNAUTHENTICATED: "unauthenticated",
    /**
     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
     * entire file system is out of space.
     */
    RESOURCE_EXHAUSTED: "resource-exhausted",
    /**
     * Operation was rejected because the system is not in a state required for
     * the operation's execution. For example, directory to be deleted may be
     * non-empty, an rmdir operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
     *  (a) Use UNAVAILABLE if the client can retry just the failing call.
     *  (b) Use ABORTED if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FAILED_PRECONDITION if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FAILED_PRECONDITION
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FAILED_PRECONDITION if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     */
    FAILED_PRECONDITION: "failed-precondition",
    /**
     * The operation was aborted, typically due to a concurrency issue like
     * sequencer check failures, transaction aborts, etc.
     *
     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
     * and UNAVAILABLE.
     */
    ABORTED: "aborted",
    /**
     * Operation was attempted past the valid range. E.g., seeking or reading
     * past end of file.
     *
     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
     * if the system state changes. For example, a 32-bit file system will
     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
     * an offset past the current file size.
     *
     * There is a fair bit of overlap between FAILED_PRECONDITION and
     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
     * when it applies so that callers who are iterating through a space can
     * easily look for an OUT_OF_RANGE error to detect when they are done.
     */
    OUT_OF_RANGE: "out-of-range",
    /** Operation is not implemented or not supported/enabled in this service. */
    UNIMPLEMENTED: "unimplemented",
    /**
     * Internal errors. Means some invariants expected by underlying System has
     * been broken. If you see one of these errors, Something is very broken.
     */
    INTERNAL: "internal",
    /**
     * The service is currently unavailable. This is a most likely a transient
     * condition and may be corrected by retrying with a backoff.
     *
     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
     * and UNAVAILABLE.
     */
    UNAVAILABLE: "unavailable",
    /** Unrecoverable data loss or corruption. */
    DATA_LOSS: "data-loss"
}, L$1 = /** @class */ function(e) {
    function n(t, n) {
        var r = this;
        return (r = e.call(this, n) || this).code = t, r.message = n, r.name = "FirebaseError", 
        // HACK: We write a toString property directly because Error is not a real
        // class and so inheritance does not work correctly. We could alternatively
        // do the same "back-door inheritance" trick that FirebaseError does.
        r.toString = function() {
            return r.name + ": [code=" + r.code + "]: " + r.message;
        }, r;
    }
    return __extends(n, e), n;
}(Error), U$1 = function(t, e) {
    this.user = e, this.type = "OAuth", this.T = {}, 
    // Set the headers using Object Literal notation to avoid minification
    this.T.Authorization = "Bearer " + t;
}, M$1 = /** @class */ function() {
    function t() {
        /**
         * Stores the listener registered with setChangeListener()
         * This isn't actually necessary since the UID never changes, but we use this
         * to verify the listen contract is adhered to in tests.
         */
        this.I = null;
    }
    return t.prototype.getToken = function() {
        return Promise.resolve(null);
    }, t.prototype.m = function() {}, t.prototype.A = function(t) {
        this.I = t, 
        // Fire with initial user.
        t(N$1.UNAUTHENTICATED);
    }, t.prototype.R = function() {
        this.I = null;
    }, t;
}(), q$1 = /** @class */ function() {
    function t(t) {
        var e = this;
        /**
         * The auth token listener registered with FirebaseApp, retained here so we
         * can unregister it.
         */        this.P = null, 
        /** Tracks the current User. */
        this.currentUser = N$1.UNAUTHENTICATED, this.g = !1, 
        /**
             * Counter used to detect if the token changed while a getToken request was
             * outstanding.
             */
        this.V = 0, 
        /** The listener registered with setChangeListener(). */
        this.I = null, this.forceRefresh = !1, this.P = function() {
            e.V++, e.currentUser = e.p(), e.g = !0, e.I && e.I(e.currentUser);
        }, this.V = 0, this.auth = t.getImmediate({
            optional: !0
        }), this.auth ? this.auth.addAuthTokenListener(this.P) : (
        // if auth is not available, invoke tokenListener once with null token
        this.P(null), t.get().then((function(t) {
            e.auth = t, e.P && 
            // tokenListener can be removed by removeChangeListener()
            e.auth.addAuthTokenListener(e.P);
        }), (function() {})));
    }
    return t.prototype.getToken = function() {
        var t = this, e = this.V, n = this.forceRefresh;
        // Take note of the current value of the tokenCounter so that this method
        // can fail (with an ABORTED error) if there is a token change while the
        // request is outstanding.
                return this.forceRefresh = !1, this.auth ? this.auth.getToken(n).then((function(n) {
            // Cancel the request since the token changed while the request was
            // outstanding so the response is potentially for a previous user (which
            // user, we can't be sure).
            return t.V !== e ? (x$1("FirebaseCredentialsProvider", "getToken aborted due to token change."), 
            t.getToken()) : n ? (C("string" == typeof n.accessToken), new U$1(n.accessToken, t.currentUser)) : null;
        })) : Promise.resolve(null);
    }, t.prototype.m = function() {
        this.forceRefresh = !0;
    }, t.prototype.A = function(t) {
        this.I = t, 
        // Fire the initial event
        this.g && t(this.currentUser);
    }, t.prototype.R = function() {
        this.auth && this.auth.removeAuthTokenListener(this.P), this.P = null, this.I = null;
    }, 
    // Auth.getUid() can return null even with a user logged in. It is because
    // getUid() is synchronous, but the auth code populating Uid is asynchronous.
    // This method should only be called in the AuthTokenListener callback
    // to guarantee to get the actual user.
    t.prototype.p = function() {
        var t = this.auth && this.auth.getUid();
        return C(null === t || "string" == typeof t), new N$1(t);
    }, t;
}(), j = /** @class */ function() {
    function t(t, e) {
        this.v = t, this.S = e, this.type = "FirstParty", this.user = N$1._;
    }
    return Object.defineProperty(t.prototype, "T", {
        get: function() {
            var t = {
                "X-Goog-AuthUser": this.S
            }, e = this.v.auth.getAuthHeaderValueForFirstParty([]);
            // Use array notation to prevent minification
                        return e && (t.Authorization = e), t;
        },
        enumerable: !1,
        configurable: !0
    }), t;
}(), F$1 = /** @class */ function() {
    function t(t, e) {
        this.v = t, this.S = e;
    }
    return t.prototype.getToken = function() {
        return Promise.resolve(new j(this.v, this.S));
    }, t.prototype.A = function(t) {
        // Fire with initial uid.
        t(N$1._);
    }, t.prototype.R = function() {}, t.prototype.m = function() {}, t;
}();

/** An error returned by a Firestore operation. */
/**
 * Builds a CredentialsProvider depending on the type of
 * the credentials passed in.
 */
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Generates `nBytes` of random bytes.
 *
 * If `nBytes < 0` , an error will be thrown.
 */
function z$1(t) {
    // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.
    var e = 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    "undefined" != typeof self && (self.crypto || self.msCrypto), n = new Uint8Array(t);
    if (e && "function" == typeof e.getRandomValues) e.getRandomValues(n); else 
    // Falls back to Math.random
    for (var r = 0; r < t; r++) n[r] = Math.floor(256 * Math.random());
    return n;
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var B = /** @class */ function() {
    function t() {}
    return t.D = function() {
        for (
        // Alphanumeric characters
        var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", e = Math.floor(256 / t.length) * t.length, n = ""
        // The largest byte value that is a multiple of `char.length`.
        ; n.length < 20; ) for (var r = z$1(40), i = 0; i < r.length; ++i) 
        // Only accept values that are [0, maxMultiple), this ensures they can
        // be evenly mapped to indices of `chars` via a modulo operation.
        n.length < 20 && r[i] < e && (n += t.charAt(r[i] % t.length));
        return n;
    }, t;
}();

function G$1(t, e) {
    return t < e ? -1 : t > e ? 1 : 0;
}

/** Helper to compare arrays using isEqual(). */ function K$1(t, e, n) {
    return t.length === e.length && t.every((function(t, r) {
        return n(t, e[r]);
    }));
}

/**
 * Returns the immediate lexicographically-following string. This is useful to
 * construct an inclusive range for indexeddb iterators.
 */ function W$1(t) {
    // Return the input string, with an additional NUL byte appended.
    return t + "\0";
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// The earlist date supported by Firestore timestamps (0001-01-01T00:00:00Z).
/**
 * A `Timestamp` represents a point in time independent of any time zone or
 * calendar, represented as seconds and fractions of seconds at nanosecond
 * resolution in UTC Epoch time.
 *
 * It is encoded using the Proleptic Gregorian Calendar which extends the
 * Gregorian calendar backwards to year one. It is encoded assuming all minutes
 * are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
 * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
 * 9999-12-31T23:59:59.999999999Z.
 *
 * @see https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto
 */ var Q$1 = /** @class */ function() {
    /**
     * Creates a new timestamp.
     *
     * @param seconds The number of seconds of UTC time since Unix epoch
     *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
     *     9999-12-31T23:59:59Z inclusive.
     * @param nanoseconds The non-negative fractions of a second at nanosecond
     *     resolution. Negative second values with fractions must still have
     *     non-negative nanoseconds values that count forward in time. Must be
     *     from 0 to 999,999,999 inclusive.
     */
    function t(t, e) {
        if (this.seconds = t, this.nanoseconds = e, e < 0) throw new L$1(V$1.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
        if (e >= 1e9) throw new L$1(V$1.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
        if (t < -62135596800) throw new L$1(V$1.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
        // This will break in the year 10,000.
                if (t >= 253402300800) throw new L$1(V$1.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
    }
    /**
     * Creates a new timestamp with the current date, with millisecond precision.
     *
     * @return a new timestamp representing the current date.
     */    return t.now = function() {
        return t.fromMillis(Date.now());
    }, 
    /**
     * Creates a new timestamp from the given date.
     *
     * @param date The date to initialize the `Timestamp` from.
     * @return A new `Timestamp` representing the same point in time as the given
     *     date.
     */
    t.fromDate = function(e) {
        return t.fromMillis(e.getTime());
    }, 
    /**
     * Creates a new timestamp from the given number of milliseconds.
     *
     * @param milliseconds Number of milliseconds since Unix epoch
     *     1970-01-01T00:00:00Z.
     * @return A new `Timestamp` representing the same point in time as the given
     *     number of milliseconds.
     */
    t.fromMillis = function(e) {
        var n = Math.floor(e / 1e3);
        return new t(n, 1e6 * (e - 1e3 * n));
    }, 
    /**
     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion causes
     * a loss of precision since `Date` objects only support millisecond precision.
     *
     * @return JavaScript `Date` object representing the same point in time as
     *     this `Timestamp`, with millisecond precision.
     */
    t.prototype.toDate = function() {
        return new Date(this.toMillis());
    }, 
    /**
     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
     * epoch). This operation causes a loss of precision.
     *
     * @return The point in time corresponding to this timestamp, represented as
     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
     */
    t.prototype.toMillis = function() {
        return 1e3 * this.seconds + this.nanoseconds / 1e6;
    }, t.prototype.C = function(t) {
        return this.seconds === t.seconds ? G$1(this.nanoseconds, t.nanoseconds) : G$1(this.seconds, t.seconds);
    }, 
    /**
     * Returns true if this `Timestamp` is equal to the provided one.
     *
     * @param other The `Timestamp` to compare against.
     * @return true if this `Timestamp` is equal to the provided one.
     */
    t.prototype.isEqual = function(t) {
        return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
    }, t.prototype.toString = function() {
        return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
    }, t.prototype.toJSON = function() {
        return {
            seconds: this.seconds,
            nanoseconds: this.nanoseconds
        };
    }, 
    /**
     * Converts this object to a primitive string, which allows Timestamp objects to be compared
     * using the `>`, `<=`, `>=` and `>` operators.
     */
    t.prototype.valueOf = function() {
        // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is
        // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded
        // with zeroes to be a consistent length. Strings with this format then have a lexiographical
        // ordering that matches the expected ordering. The <seconds> translation is done to avoid
        // having a leading negative sign (i.e. a leading '-' character) in its string representation,
        // which would affect its lexiographical ordering.
        var t = this.seconds - -62135596800;
        // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.
                return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
    }, t;
}(), H$1 = /** @class */ function() {
    function t(t) {
        this.timestamp = t;
    }
    return t.N = function(e) {
        return new t(e);
    }, t.min = function() {
        return new t(new Q$1(0, 0));
    }, t.prototype.F = function(t) {
        return this.timestamp.C(t.timestamp);
    }, t.prototype.isEqual = function(t) {
        return this.timestamp.isEqual(t.timestamp);
    }, 
    /** Returns a number representation of the version for use in spec tests. */ t.prototype.O = function() {
        // Convert to microseconds.
        return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
    }, t.prototype.toString = function() {
        return "SnapshotVersion(" + this.timestamp.toString() + ")";
    }, t.prototype.M = function() {
        return this.timestamp;
    }, t;
}(), Y$1 = /** @class */ function() {
    function t(t, e, n) {
        void 0 === e ? e = 0 : e > t.length && P$1(), void 0 === n ? n = t.length - e : n > t.length - e && P$1(), 
        this.segments = t, this.offset = e, this.k = n;
    }
    return Object.defineProperty(t.prototype, "length", {
        get: function() {
            return this.k;
        },
        enumerable: !1,
        configurable: !0
    }), t.prototype.isEqual = function(e) {
        return 0 === t.$(this, e);
    }, t.prototype.child = function(e) {
        var n = this.segments.slice(this.offset, this.limit());
        return e instanceof t ? e.forEach((function(t) {
            n.push(t);
        })) : n.push(e), this.L(n);
    }, 
    /** The index of one past the last segment of the path. */ t.prototype.limit = function() {
        return this.offset + this.length;
    }, t.prototype.B = function(t) {
        return t = void 0 === t ? 1 : t, this.L(this.segments, this.offset + t, this.length - t);
    }, t.prototype.q = function() {
        return this.L(this.segments, this.offset, this.length - 1);
    }, t.prototype.U = function() {
        return this.segments[this.offset];
    }, t.prototype.K = function() {
        return this.get(this.length - 1);
    }, t.prototype.get = function(t) {
        return this.segments[this.offset + t];
    }, t.prototype.W = function() {
        return 0 === this.length;
    }, t.prototype.j = function(t) {
        if (t.length < this.length) return !1;
        for (var e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
        return !0;
    }, t.prototype.G = function(t) {
        if (this.length + 1 !== t.length) return !1;
        for (var e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
        return !0;
    }, t.prototype.forEach = function(t) {
        for (var e = this.offset, n = this.limit(); e < n; e++) t(this.segments[e]);
    }, t.prototype.H = function() {
        return this.segments.slice(this.offset, this.limit());
    }, t.$ = function(t, e) {
        for (var n = Math.min(t.length, e.length), r = 0; r < n; r++) {
            var i = t.get(r), o = e.get(r);
            if (i < o) return -1;
            if (i > o) return 1;
        }
        return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;
    }, t;
}(), $ = /** @class */ function(e) {
    function n() {
        return null !== e && e.apply(this, arguments) || this;
    }
    return __extends(n, e), n.prototype.L = function(t, e, r) {
        return new n(t, e, r);
    }, n.prototype.J = function() {
        // NOTE: The client is ignorant of any path segments containing escape
        // sequences (e.g. __id123__) and just passes them through raw (they exist
        // for legacy reasons and should not be used frequently).
        return this.H().join("/");
    }, n.prototype.toString = function() {
        return this.J();
    }, 
    /**
     * Creates a resource path from the given slash-delimited string. If multiple
     * arguments are provided, all components are combined. Leading and trailing
     * slashes from all components are ignored.
     */
    n.Y = function() {
        for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
        // NOTE: The client is ignorant of any path segments containing escape
        // sequences (e.g. __id123__) and just passes them through raw (they exist
        // for legacy reasons and should not be used frequently).
                for (var r = [], i = 0, o = t; i < o.length; i++) {
            var u = o[i];
            if (u.indexOf("//") >= 0) throw new L$1(V$1.INVALID_ARGUMENT, "Invalid segment (" + u + "). Paths must not contain // in them.");
            // Strip leading and traling slashed.
                        r.push.apply(r, u.split("/").filter((function(t) {
                return t.length > 0;
            })));
        }
        return new n(r);
    }, n.X = function() {
        return new n([]);
    }, n;
}(Y$1), J$1 = /^[_a-zA-Z][_a-zA-Z0-9]*$/, X$1 = /** @class */ function(e) {
    function n() {
        return null !== e && e.apply(this, arguments) || this;
    }
    return __extends(n, e), n.prototype.L = function(t, e, r) {
        return new n(t, e, r);
    }, 
    /**
     * Returns true if the string could be used as a segment in a field path
     * without escaping.
     */
    n.Z = function(t) {
        return J$1.test(t);
    }, n.prototype.J = function() {
        return this.H().map((function(t) {
            return t = t.replace("\\", "\\\\").replace("`", "\\`"), n.Z(t) || (t = "`" + t + "`"), 
            t;
        })).join(".");
    }, n.prototype.toString = function() {
        return this.J();
    }, 
    /**
     * Returns true if this field references the key of a document.
     */
    n.prototype.tt = function() {
        return 1 === this.length && "__name__" === this.get(0);
    }, 
    /**
     * The field designating the key of a document.
     */
    n.et = function() {
        return new n([ "__name__" ]);
    }, 
    /**
     * Parses a field string from the given server-formatted string.
     *
     * - Splitting the empty string is not allowed (for now at least).
     * - Empty segments within the string (e.g. if there are two consecutive
     *   separators) are not allowed.
     *
     * TODO(b/37244157): we should make this more strict. Right now, it allows
     * non-identifier path components, even if they aren't escaped.
     */
    n.nt = function(t) {
        for (var e = [], r = "", i = 0, o = function() {
            if (0 === r.length) throw new L$1(V$1.INVALID_ARGUMENT, "Invalid field path (" + t + "). Paths must not be empty, begin with '.', end with '.', or contain '..'");
            e.push(r), r = "";
        }, u = !1; i < t.length; ) {
            var s = t[i];
            if ("\\" === s) {
                if (i + 1 === t.length) throw new L$1(V$1.INVALID_ARGUMENT, "Path has trailing escape character: " + t);
                var a = t[i + 1];
                if ("\\" !== a && "." !== a && "`" !== a) throw new L$1(V$1.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t);
                r += a, i += 2;
            } else "`" === s ? (u = !u, i++) : "." !== s || u ? (r += s, i++) : (o(), i++);
        }
        if (o(), u) throw new L$1(V$1.INVALID_ARGUMENT, "Unterminated ` in path: " + t);
        return new n(e);
    }, n.X = function() {
        return new n([]);
    }, n;
}(Y$1), Z$1 = /** @class */ function() {
    function t(t) {
        this.path = t;
    }
    return t.st = function(e) {
        return new t($.Y(e));
    }, t.it = function(e) {
        return new t($.Y(e).B(5));
    }, 
    /** Returns true if the document is in the specified collectionId. */ t.prototype.rt = function(t) {
        return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
    }, t.prototype.isEqual = function(t) {
        return null !== t && 0 === $.$(this.path, t.path);
    }, t.prototype.toString = function() {
        return this.path.toString();
    }, t.$ = function(t, e) {
        return $.$(t.path, e.path);
    }, t.ot = function(t) {
        return t.length % 2 == 0;
    }, 
    /**
     * Creates and returns a new document key with the given segments.
     *
     * @param segments The segments of the path to the document
     * @return A new instance of DocumentKey
     */
    t.ct = function(e) {
        return new t(new $(e.slice()));
    }, t;
}();

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * A version of a document in Firestore. This corresponds to the version
 * timestamp, such as update_time or read_time.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns whether a variable is either undefined or null.
 */
function tt(t) {
    return null == t;
}

/** Returns whether the value represents -0. */ function et(t) {
    // Detect if the value is -0.0. Based on polyfill from
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
    return 0 === t && 1 / t == -1 / 0;
}

/**
 * Returns whether a value is an integer and in the safe integer range
 * @param value The value to test for being an integer and in the safe range
 */ function nt(t) {
    return "number" == typeof t && Number.isInteger(t) && !et(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Visible for testing
var rt = function(t, e, n, r, i, o, u) {
    void 0 === e && (e = null), void 0 === n && (n = []), void 0 === r && (r = []), 
    void 0 === i && (i = null), void 0 === o && (o = null), void 0 === u && (u = null), 
    this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = r, this.limit = i, 
    this.startAt = o, this.endAt = u, this.ut = null;
};

/**
 * Initializes a Target with a path and optional additional query constraints.
 * Path must currently be empty if this is a collection group query.
 *
 * NOTE: you should always construct `Target` from `Query.toTarget` instead of
 * using this factory method, because `Query` provides an implicit `orderBy`
 * property.
 */ function it(t, e, n, r, i, o, u) {
    return void 0 === e && (e = null), void 0 === n && (n = []), void 0 === r && (r = []), 
    void 0 === i && (i = null), void 0 === o && (o = null), void 0 === u && (u = null), 
    new rt(t, e, n, r, i, o, u);
}

function ot(t) {
    var e = R$1(t);
    if (null === e.ut) {
        var n = e.path.J();
        null !== e.collectionGroup && (n += "|cg:" + e.collectionGroup), n += "|f:", n += e.filters.map((function(t) {
            return function(t) {
                // TODO(b/29183165): Technically, this won't be unique if two values have
                // the same description, such as the int 3 and the string "3". So we should
                // add the types in here somehow, too.
                return t.field.J() + t.op.toString() + te(t.value);
            }(t);
        })).join(","), n += "|ob:", n += e.orderBy.map((function(t) {
            return function(t) {
                // TODO(b/29183165): Make this collision robust.
                return t.field.J() + t.dir;
            }(t);
        })).join(","), tt(e.limit) || (n += "|l:", n += e.limit), e.startAt && (n += "|lb:", 
        n += rr(e.startAt)), e.endAt && (n += "|ub:", n += rr(e.endAt)), e.ut = n;
    }
    return e.ut;
}

function ut(t, e) {
    if (t.limit !== e.limit) return !1;
    if (t.orderBy.length !== e.orderBy.length) return !1;
    for (var n = 0; n < t.orderBy.length; n++) if (!ar(t.orderBy[n], e.orderBy[n])) return !1;
    if (t.filters.length !== e.filters.length) return !1;
    for (var r = 0; r < t.filters.length; r++) if (i = t.filters[r], o = e.filters[r], 
    i.op !== o.op || !i.field.isEqual(o.field) || !$t(i.value, o.value)) return !1;
    var i, o;
    return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!or(t.startAt, e.startAt) && or(t.endAt, e.endAt);
}

function st(t) {
    return Z$1.ot(t.path) && null === t.collectionGroup && 0 === t.filters.length;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** Converts a Base64 encoded string to a binary string. */
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Immutable class that represents a "proto" byte string.
 *
 * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
 * sent on the wire. This class abstracts away this differentiation by holding
 * the proto byte string in a common class that must be converted into a string
 * before being sent as a proto.
 */ var at = /** @class */ function() {
    function t(t) {
        this.at = t;
    }
    return t.fromBase64String = function(e) {
        return new t(atob(e));
    }, t.fromUint8Array = function(e) {
        return new t(
        /**
 * Helper function to convert an Uint8array to a binary string.
 */
        function(t) {
            for (var e = "", n = 0; n < t.length; ++n) e += String.fromCharCode(t[n]);
            return e;
        }(e));
    }, t.prototype.toBase64 = function() {
        return t = this.at, btoa(t);
        /** Converts a binary string to a Base64 encoded string. */        var t;
        /** True if and only if the Base64 conversion functions are available. */    }, 
    t.prototype.toUint8Array = function() {
        return function(t) {
            for (var e = new Uint8Array(t.length), n = 0; n < t.length; n++) e[n] = t.charCodeAt(n);
            return e;
        }(this.at);
    }, t.prototype.ht = function() {
        return 2 * this.at.length;
    }, t.prototype.F = function(t) {
        return G$1(this.at, t.at);
    }, t.prototype.isEqual = function(t) {
        return this.at === t.at;
    }, t;
}();

at.lt = new at("");

var ct, ht, ft = /** @class */ function() {
    function t(
    /** The target being listened to. */
    t, 
    /**
     * The target ID to which the target corresponds; Assigned by the
     * LocalStore for user listens and by the SyncEngine for limbo watches.
     */
    e, 
    /** The purpose of the target. */
    n, 
    /**
     * The sequence number of the last transaction during which this target data
     * was modified.
     */
    r, 
    /** The latest snapshot version seen for this target. */
    i
    /**
     * The maximum snapshot version at which the associated view
     * contained no limbo documents.
     */ , o
    /**
     * An opaque, server-assigned token that allows watching a target to be
     * resumed after disconnecting without retransmitting all the data that
     * matches the target. The resume token essentially identifies a point in
     * time from which the server should resume sending results.
     */ , u) {
        void 0 === i && (i = H$1.min()), void 0 === o && (o = H$1.min()), void 0 === u && (u = at.lt), 
        this.target = t, this.targetId = e, this._t = n, this.sequenceNumber = r, this.ft = i, 
        this.lastLimboFreeSnapshotVersion = o, this.resumeToken = u;
    }
    /** Creates a new target data instance with an updated sequence number. */    return t.prototype.dt = function(e) {
        return new t(this.target, this.targetId, this._t, e, this.ft, this.lastLimboFreeSnapshotVersion, this.resumeToken);
    }, 
    /**
     * Creates a new target data instance with an updated resume token and
     * snapshot version.
     */
    t.prototype.wt = function(e, n) {
        return new t(this.target, this.targetId, this._t, this.sequenceNumber, n, this.lastLimboFreeSnapshotVersion, e);
    }, 
    /**
     * Creates a new target data instance with an updated last limbo free
     * snapshot version number.
     */
    t.prototype.Et = function(e) {
        return new t(this.target, this.targetId, this._t, this.sequenceNumber, this.ft, e, this.resumeToken);
    }, t;
}(), lt = 
// TODO(b/33078163): just use simplest form of existence filter for now
function(t) {
    this.count = t;
};

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Determines whether an error code represents a permanent error when received
 * in response to a non-write operation.
 *
 * See isPermanentWriteError for classifying write errors.
 */
function pt(t) {
    switch (t) {
      case V$1.OK:
        return P$1();

      case V$1.CANCELLED:
      case V$1.UNKNOWN:
      case V$1.DEADLINE_EXCEEDED:
      case V$1.RESOURCE_EXHAUSTED:
      case V$1.INTERNAL:
      case V$1.UNAVAILABLE:
 // Unauthenticated means something went wrong with our token and we need
        // to retry with new credentials which will happen automatically.
              case V$1.UNAUTHENTICATED:
        return !1;

      case V$1.INVALID_ARGUMENT:
      case V$1.NOT_FOUND:
      case V$1.ALREADY_EXISTS:
      case V$1.PERMISSION_DENIED:
      case V$1.FAILED_PRECONDITION:
 // Aborted might be retried in some scenarios, but that is dependant on
        // the context and should handled individually by the calling code.
        // See https://cloud.google.com/apis/design/errors.
              case V$1.ABORTED:
      case V$1.OUT_OF_RANGE:
      case V$1.UNIMPLEMENTED:
      case V$1.DATA_LOSS:
        return !0;

      default:
        return P$1();
    }
}

/**
 * Determines whether an error code represents a permanent error when received
 * in response to a write operation.
 *
 * Write operations must be handled specially because as of b/119437764, ABORTED
 * errors on the write stream should be retried too (even though ABORTED errors
 * are not generally retryable).
 *
 * Note that during the initial handshake on the write stream an ABORTED error
 * signals that we should discard our stream token (i.e. it is permanent). This
 * means a handshake error should be classified with isPermanentError, above.
 */
/**
 * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
 * are not the same as HTTP status codes.
 *
 * @returns The Code equivalent to the given GRPC status code. Fails if there
 *     is no match.
 */ function dt(t) {
    if (void 0 === t) 
    // This shouldn't normally happen, but in certain error cases (like trying
    // to send invalid proto messages) we may get an error with no GRPC code.
    return k$1("GRPC error has no .code"), V$1.UNKNOWN;
    switch (t) {
      case ct.OK:
        return V$1.OK;

      case ct.CANCELLED:
        return V$1.CANCELLED;

      case ct.UNKNOWN:
        return V$1.UNKNOWN;

      case ct.DEADLINE_EXCEEDED:
        return V$1.DEADLINE_EXCEEDED;

      case ct.RESOURCE_EXHAUSTED:
        return V$1.RESOURCE_EXHAUSTED;

      case ct.INTERNAL:
        return V$1.INTERNAL;

      case ct.UNAVAILABLE:
        return V$1.UNAVAILABLE;

      case ct.UNAUTHENTICATED:
        return V$1.UNAUTHENTICATED;

      case ct.INVALID_ARGUMENT:
        return V$1.INVALID_ARGUMENT;

      case ct.NOT_FOUND:
        return V$1.NOT_FOUND;

      case ct.ALREADY_EXISTS:
        return V$1.ALREADY_EXISTS;

      case ct.PERMISSION_DENIED:
        return V$1.PERMISSION_DENIED;

      case ct.FAILED_PRECONDITION:
        return V$1.FAILED_PRECONDITION;

      case ct.ABORTED:
        return V$1.ABORTED;

      case ct.OUT_OF_RANGE:
        return V$1.OUT_OF_RANGE;

      case ct.UNIMPLEMENTED:
        return V$1.UNIMPLEMENTED;

      case ct.DATA_LOSS:
        return V$1.DATA_LOSS;

      default:
        return P$1();
    }
}

/**
 * Converts an HTTP response's error status to the equivalent error code.
 *
 * @param status An HTTP error response status ("FAILED_PRECONDITION",
 * "UNKNOWN", etc.)
 * @returns The equivalent Code. Non-matching responses are mapped to
 *     Code.UNKNOWN.
 */ (ht = ct || (ct = {}))[ht.OK = 0] = "OK", ht[ht.CANCELLED = 1] = "CANCELLED", 
ht[ht.UNKNOWN = 2] = "UNKNOWN", ht[ht.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", 
ht[ht.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", ht[ht.NOT_FOUND = 5] = "NOT_FOUND", 
ht[ht.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", ht[ht.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", 
ht[ht.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", ht[ht.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", 
ht[ht.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", ht[ht.ABORTED = 10] = "ABORTED", 
ht[ht.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", ht[ht.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", 
ht[ht.INTERNAL = 13] = "INTERNAL", ht[ht.UNAVAILABLE = 14] = "UNAVAILABLE", ht[ht.DATA_LOSS = 15] = "DATA_LOSS";

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// An immutable sorted map implementation, based on a Left-leaning Red-Black
// tree.
var vt = /** @class */ function() {
    function t(t, e) {
        this.$ = t, this.root = e || mt.EMPTY;
    }
    // Returns a copy of the map, with the specified key/value added or replaced.
        return t.prototype.Tt = function(e, n) {
        return new t(this.$, this.root.Tt(e, n, this.$).copy(null, null, mt.It, null, null));
    }, 
    // Returns a copy of the map, with the specified key removed.
    t.prototype.remove = function(e) {
        return new t(this.$, this.root.remove(e, this.$).copy(null, null, mt.It, null, null));
    }, 
    // Returns the value of the node with the given key, or null.
    t.prototype.get = function(t) {
        for (var e = this.root; !e.W(); ) {
            var n = this.$(t, e.key);
            if (0 === n) return e.value;
            n < 0 ? e = e.left : n > 0 && (e = e.right);
        }
        return null;
    }, 
    // Returns the index of the element in this sorted map, or -1 if it doesn't
    // exist.
    t.prototype.indexOf = function(t) {
        for (
        // Number of nodes that were pruned when descending right
        var e = 0, n = this.root; !n.W(); ) {
            var r = this.$(t, n.key);
            if (0 === r) return e + n.left.size;
            r < 0 ? n = n.left : (
            // Count all nodes left of the node plus the node itself
            e += n.left.size + 1, n = n.right);
        }
        // Node not found
                return -1;
    }, t.prototype.W = function() {
        return this.root.W();
    }, Object.defineProperty(t.prototype, "size", {
        // Returns the total number of nodes in the map.
        get: function() {
            return this.root.size;
        },
        enumerable: !1,
        configurable: !0
    }), 
    // Returns the minimum key in the map.
    t.prototype.At = function() {
        return this.root.At();
    }, 
    // Returns the maximum key in the map.
    t.prototype.Rt = function() {
        return this.root.Rt();
    }, 
    // Traverses the map in key order and calls the specified action function
    // for each key/value pair. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    t.prototype.Pt = function(t) {
        return this.root.Pt(t);
    }, t.prototype.forEach = function(t) {
        this.Pt((function(e, n) {
            return t(e, n), !1;
        }));
    }, t.prototype.toString = function() {
        var t = [];
        return this.Pt((function(e, n) {
            return t.push(e + ":" + n), !1;
        })), "{" + t.join(", ") + "}";
    }, 
    // Traverses the map in reverse key order and calls the specified action
    // function for each key/value pair. If action returns true, traversal is
    // aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    t.prototype.gt = function(t) {
        return this.root.gt(t);
    }, 
    // Returns an iterator over the SortedMap.
    t.prototype.yt = function() {
        return new yt(this.root, null, this.$, !1);
    }, t.prototype.Vt = function(t) {
        return new yt(this.root, t, this.$, !1);
    }, t.prototype.vt = function() {
        return new yt(this.root, null, this.$, !0);
    }, t.prototype.bt = function(t) {
        return new yt(this.root, t, this.$, !0);
    }, t;
}(), yt = /** @class */ function() {
    function t(t, e, n, r) {
        this.St = r, this.Dt = [];
        for (var i = 1; !t.W(); ) if (i = e ? n(t.key, e) : 1, 
        // flip the comparison if we're going in reverse
        r && (i *= -1), i < 0) 
        // This node is less than our start key. ignore it
        t = this.St ? t.left : t.right; else {
            if (0 === i) {
                // This node is exactly equal to our start key. Push it on the stack,
                // but stop iterating;
                this.Dt.push(t);
                break;
            }
            // This node is greater than our start key, add it to the stack and move
            // to the next one
                        this.Dt.push(t), t = this.St ? t.right : t.left;
        }
    }
    return t.prototype.Ct = function() {
        var t = this.Dt.pop(), e = {
            key: t.key,
            value: t.value
        };
        if (this.St) for (t = t.left; !t.W(); ) this.Dt.push(t), t = t.right; else for (t = t.right; !t.W(); ) this.Dt.push(t), 
        t = t.left;
        return e;
    }, t.prototype.Nt = function() {
        return this.Dt.length > 0;
    }, t.prototype.xt = function() {
        if (0 === this.Dt.length) return null;
        var t = this.Dt[this.Dt.length - 1];
        return {
            key: t.key,
            value: t.value
        };
    }, t;
}(), mt = /** @class */ function() {
    function t(e, n, r, i, o) {
        this.key = e, this.value = n, this.color = null != r ? r : t.RED, this.left = null != i ? i : t.EMPTY, 
        this.right = null != o ? o : t.EMPTY, this.size = this.left.size + 1 + this.right.size;
    }
    // Returns a copy of the current node, optionally replacing pieces of it.
        return t.prototype.copy = function(e, n, r, i, o) {
        return new t(null != e ? e : this.key, null != n ? n : this.value, null != r ? r : this.color, null != i ? i : this.left, null != o ? o : this.right);
    }, t.prototype.W = function() {
        return !1;
    }, 
    // Traverses the tree in key order and calls the specified action function
    // for each node. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    t.prototype.Pt = function(t) {
        return this.left.Pt(t) || t(this.key, this.value) || this.right.Pt(t);
    }, 
    // Traverses the tree in reverse key order and calls the specified action
    // function for each node. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    t.prototype.gt = function(t) {
        return this.right.gt(t) || t(this.key, this.value) || this.left.gt(t);
    }, 
    // Returns the minimum node in the tree.
    t.prototype.min = function() {
        return this.left.W() ? this : this.left.min();
    }, 
    // Returns the maximum key in the tree.
    t.prototype.At = function() {
        return this.min().key;
    }, 
    // Returns the maximum key in the tree.
    t.prototype.Rt = function() {
        return this.right.W() ? this.key : this.right.Rt();
    }, 
    // Returns new tree, with the key/value added.
    t.prototype.Tt = function(t, e, n) {
        var r = this, i = n(t, r.key);
        return (r = i < 0 ? r.copy(null, null, null, r.left.Tt(t, e, n), null) : 0 === i ? r.copy(null, e, null, null, null) : r.copy(null, null, null, null, r.right.Tt(t, e, n))).Ft();
    }, t.prototype.Ot = function() {
        if (this.left.W()) return t.EMPTY;
        var e = this;
        return e.left.Mt() || e.left.left.Mt() || (e = e.kt()), (e = e.copy(null, null, null, e.left.Ot(), null)).Ft();
    }, 
    // Returns new tree, with the specified item removed.
    t.prototype.remove = function(e, n) {
        var r, i = this;
        if (n(e, i.key) < 0) i.left.W() || i.left.Mt() || i.left.left.Mt() || (i = i.kt()), 
        i = i.copy(null, null, null, i.left.remove(e, n), null); else {
            if (i.left.Mt() && (i = i.$t()), i.right.W() || i.right.Mt() || i.right.left.Mt() || (i = i.Lt()), 
            0 === n(e, i.key)) {
                if (i.right.W()) return t.EMPTY;
                r = i.right.min(), i = i.copy(r.key, r.value, null, null, i.right.Ot());
            }
            i = i.copy(null, null, null, null, i.right.remove(e, n));
        }
        return i.Ft();
    }, t.prototype.Mt = function() {
        return this.color;
    }, 
    // Returns new tree after performing any needed rotations.
    t.prototype.Ft = function() {
        var t = this;
        return t.right.Mt() && !t.left.Mt() && (t = t.Bt()), t.left.Mt() && t.left.left.Mt() && (t = t.$t()), 
        t.left.Mt() && t.right.Mt() && (t = t.qt()), t;
    }, t.prototype.kt = function() {
        var t = this.qt();
        return t.right.left.Mt() && (t = (t = (t = t.copy(null, null, null, null, t.right.$t())).Bt()).qt()), 
        t;
    }, t.prototype.Lt = function() {
        var t = this.qt();
        return t.left.left.Mt() && (t = (t = t.$t()).qt()), t;
    }, t.prototype.Bt = function() {
        var e = this.copy(null, null, t.RED, null, this.right.left);
        return this.right.copy(null, null, this.color, e, null);
    }, t.prototype.$t = function() {
        var e = this.copy(null, null, t.RED, this.left.right, null);
        return this.left.copy(null, null, this.color, null, e);
    }, t.prototype.qt = function() {
        var t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);
        return this.copy(null, null, !this.color, t, e);
    }, 
    // For testing.
    t.prototype.Ut = function() {
        var t = this.Qt();
        return Math.pow(2, t) <= this.size + 1;
    }, 
    // In a balanced RB tree, the black-depth (number of black nodes) from root to
    // leaves is equal on both sides.  This function verifies that or asserts.
    t.prototype.Qt = function() {
        if (this.Mt() && this.left.Mt()) throw P$1();
        if (this.right.Mt()) throw P$1();
        var t = this.left.Qt();
        if (t !== this.right.Qt()) throw P$1();
        return t + (this.Mt() ? 0 : 1);
    }, t;
}();

// end SortedMap
// An iterator over an LLRBNode.
// end LLRBNode
// Empty node is shared between all LLRB trees.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
mt.EMPTY = null, mt.RED = !0, mt.It = !1, 
// end LLRBEmptyNode
mt.EMPTY = new (/** @class */ function() {
    function t() {
        this.size = 0;
    }
    return Object.defineProperty(t.prototype, "key", {
        get: function() {
            throw P$1();
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "value", {
        get: function() {
            throw P$1();
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "color", {
        get: function() {
            throw P$1();
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "left", {
        get: function() {
            throw P$1();
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "right", {
        get: function() {
            throw P$1();
        },
        enumerable: !1,
        configurable: !0
    }), 
    // Returns a copy of the current node.
    t.prototype.copy = function(t, e, n, r, i) {
        return this;
    }, 
    // Returns a copy of the tree, with the specified key/value added.
    t.prototype.Tt = function(t, e, n) {
        return new mt(t, e);
    }, 
    // Returns a copy of the tree, with the specified key removed.
    t.prototype.remove = function(t, e) {
        return this;
    }, t.prototype.W = function() {
        return !0;
    }, t.prototype.Pt = function(t) {
        return !1;
    }, t.prototype.gt = function(t) {
        return !1;
    }, t.prototype.At = function() {
        return null;
    }, t.prototype.Rt = function() {
        return null;
    }, t.prototype.Mt = function() {
        return !1;
    }, 
    // For testing.
    t.prototype.Ut = function() {
        return !0;
    }, t.prototype.Qt = function() {
        return 0;
    }, t;
}());

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * SortedSet is an immutable (copy-on-write) collection that holds elements
 * in order specified by the provided comparator.
 *
 * NOTE: if provided comparator returns 0 for two elements, we consider them to
 * be equal!
 */
var gt = /** @class */ function() {
    function t(t) {
        this.$ = t, this.data = new vt(this.$);
    }
    return t.prototype.has = function(t) {
        return null !== this.data.get(t);
    }, t.prototype.first = function() {
        return this.data.At();
    }, t.prototype.last = function() {
        return this.data.Rt();
    }, Object.defineProperty(t.prototype, "size", {
        get: function() {
            return this.data.size;
        },
        enumerable: !1,
        configurable: !0
    }), t.prototype.indexOf = function(t) {
        return this.data.indexOf(t);
    }, 
    /** Iterates elements in order defined by "comparator" */ t.prototype.forEach = function(t) {
        this.data.Pt((function(e, n) {
            return t(e), !1;
        }));
    }, 
    /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */ t.prototype.Kt = function(t, e) {
        for (var n = this.data.Vt(t[0]); n.Nt(); ) {
            var r = n.Ct();
            if (this.$(r.key, t[1]) >= 0) return;
            e(r.key);
        }
    }, 
    /**
     * Iterates over `elem`s such that: start <= elem until false is returned.
     */
    t.prototype.Wt = function(t, e) {
        var n;
        for (n = void 0 !== e ? this.data.Vt(e) : this.data.yt(); n.Nt(); ) if (!t(n.Ct().key)) return;
    }, 
    /** Finds the least element greater than or equal to `elem`. */ t.prototype.jt = function(t) {
        var e = this.data.Vt(t);
        return e.Nt() ? e.Ct().key : null;
    }, t.prototype.yt = function() {
        return new wt(this.data.yt());
    }, t.prototype.Vt = function(t) {
        return new wt(this.data.Vt(t));
    }, 
    /** Inserts or updates an element */ t.prototype.add = function(t) {
        return this.copy(this.data.remove(t).Tt(t, !0));
    }, 
    /** Deletes an element */ t.prototype.delete = function(t) {
        return this.has(t) ? this.copy(this.data.remove(t)) : this;
    }, t.prototype.W = function() {
        return this.data.W();
    }, t.prototype.Gt = function(t) {
        var e = this;
        // Make sure `result` always refers to the larger one of the two sets.
                return e.size < t.size && (e = t, t = this), t.forEach((function(t) {
            e = e.add(t);
        })), e;
    }, t.prototype.isEqual = function(e) {
        if (!(e instanceof t)) return !1;
        if (this.size !== e.size) return !1;
        for (var n = this.data.yt(), r = e.data.yt(); n.Nt(); ) {
            var i = n.Ct().key, o = r.Ct().key;
            if (0 !== this.$(i, o)) return !1;
        }
        return !0;
    }, t.prototype.H = function() {
        var t = [];
        return this.forEach((function(e) {
            t.push(e);
        })), t;
    }, t.prototype.toString = function() {
        var t = [];
        return this.forEach((function(e) {
            return t.push(e);
        })), "SortedSet(" + t.toString() + ")";
    }, t.prototype.copy = function(e) {
        var n = new t(this.$);
        return n.data = e, n;
    }, t;
}(), wt = /** @class */ function() {
    function t(t) {
        this.zt = t;
    }
    return t.prototype.Ct = function() {
        return this.zt.Ct().key;
    }, t.prototype.Nt = function() {
        return this.zt.Nt();
    }, t;
}(), bt = new vt(Z$1.$);

function _t() {
    return bt;
}

function It() {
    return _t();
}

var Et = new vt(Z$1.$);

function Tt() {
    return Et;
}

var Nt = new vt(Z$1.$), At = new gt(Z$1.$);

function Dt() {
    for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
    for (var n = At, r = 0, i = t; r < i.length; r++) {
        var o = i[r];
        n = n.add(o);
    }
    return n;
}

var xt = new gt(G$1);

function kt() {
    return xt;
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * DocumentSet is an immutable (copy-on-write) collection that holds documents
 * in order specified by the provided comparator. We always add a document key
 * comparator on top of what is provided to guarantee document equality based on
 * the key.
 */ var Ot = /** @class */ function() {
    /** The default ordering is by key if the comparator is omitted */
    function t(t) {
        // We are adding document key comparator to the end as it's the only
        // guaranteed unique property of a document.
        this.$ = t ? function(e, n) {
            return t(e, n) || Z$1.$(e.key, n.key);
        } : function(t, e) {
            return Z$1.$(t.key, e.key);
        }, this.Ht = Tt(), this.Jt = new vt(this.$)
        /**
     * Returns an empty copy of the existing DocumentSet, using the same
     * comparator.
     */;
    }
    return t.Yt = function(e) {
        return new t(e.$);
    }, t.prototype.has = function(t) {
        return null != this.Ht.get(t);
    }, t.prototype.get = function(t) {
        return this.Ht.get(t);
    }, t.prototype.first = function() {
        return this.Jt.At();
    }, t.prototype.last = function() {
        return this.Jt.Rt();
    }, t.prototype.W = function() {
        return this.Jt.W();
    }, 
    /**
     * Returns the index of the provided key in the document set, or -1 if the
     * document key is not present in the set;
     */
    t.prototype.indexOf = function(t) {
        var e = this.Ht.get(t);
        return e ? this.Jt.indexOf(e) : -1;
    }, Object.defineProperty(t.prototype, "size", {
        get: function() {
            return this.Jt.size;
        },
        enumerable: !1,
        configurable: !0
    }), 
    /** Iterates documents in order defined by "comparator" */ t.prototype.forEach = function(t) {
        this.Jt.Pt((function(e, n) {
            return t(e), !1;
        }));
    }, 
    /** Inserts or updates a document with the same key */ t.prototype.add = function(t) {
        // First remove the element if we have it.
        var e = this.delete(t.key);
        return e.copy(e.Ht.Tt(t.key, t), e.Jt.Tt(t, null));
    }, 
    /** Deletes a document with a given key */ t.prototype.delete = function(t) {
        var e = this.get(t);
        return e ? this.copy(this.Ht.remove(t), this.Jt.remove(e)) : this;
    }, t.prototype.isEqual = function(e) {
        if (!(e instanceof t)) return !1;
        if (this.size !== e.size) return !1;
        for (var n = this.Jt.yt(), r = e.Jt.yt(); n.Nt(); ) {
            var i = n.Ct().key, o = r.Ct().key;
            if (!i.isEqual(o)) return !1;
        }
        return !0;
    }, t.prototype.toString = function() {
        var t = [];
        return this.forEach((function(e) {
            t.push(e.toString());
        })), 0 === t.length ? "DocumentSet ()" : "DocumentSet (\n  " + t.join("  \n") + "\n)";
    }, t.prototype.copy = function(e, n) {
        var r = new t;
        return r.$ = this.$, r.Ht = e, r.Jt = n, r;
    }, t;
}(), St = /** @class */ function() {
    function t() {
        this.Xt = new vt(Z$1.$);
    }
    return t.prototype.track = function(t) {
        var e = t.doc.key, n = this.Xt.get(e);
        n ? 
        // Merge the new change with the existing change.
        0 /* Added */ !== t.type && 3 /* Metadata */ === n.type ? this.Xt = this.Xt.Tt(e, t) : 3 /* Metadata */ === t.type && 1 /* Removed */ !== n.type ? this.Xt = this.Xt.Tt(e, {
            type: n.type,
            doc: t.doc
        }) : 2 /* Modified */ === t.type && 2 /* Modified */ === n.type ? this.Xt = this.Xt.Tt(e, {
            type: 2 /* Modified */ ,
            doc: t.doc
        }) : 2 /* Modified */ === t.type && 0 /* Added */ === n.type ? this.Xt = this.Xt.Tt(e, {
            type: 0 /* Added */ ,
            doc: t.doc
        }) : 1 /* Removed */ === t.type && 0 /* Added */ === n.type ? this.Xt = this.Xt.remove(e) : 1 /* Removed */ === t.type && 2 /* Modified */ === n.type ? this.Xt = this.Xt.Tt(e, {
            type: 1 /* Removed */ ,
            doc: n.doc
        }) : 0 /* Added */ === t.type && 1 /* Removed */ === n.type ? this.Xt = this.Xt.Tt(e, {
            type: 2 /* Modified */ ,
            doc: t.doc
        }) : 
        // This includes these cases, which don't make sense:
        // Added->Added
        // Removed->Removed
        // Modified->Added
        // Removed->Modified
        // Metadata->Added
        // Removed->Metadata
        P$1() : this.Xt = this.Xt.Tt(e, t);
    }, t.prototype.Zt = function() {
        var t = [];
        return this.Xt.Pt((function(e, n) {
            t.push(n);
        })), t;
    }, t;
}(), Pt = /** @class */ function() {
    function t(t, e, n, r, i, o, u, s) {
        this.query = t, this.docs = e, this.te = n, this.docChanges = r, this.ee = i, this.fromCache = o, 
        this.ne = u, this.se = s
        /** Returns a view snapshot as if all documents in the snapshot were added. */;
    }
    return t.ie = function(e, n, r, i) {
        var o = [];
        return n.forEach((function(t) {
            o.push({
                type: 0 /* Added */ ,
                doc: t
            });
        })), new t(e, n, Ot.Yt(n), o, r, i, 
        /* syncStateChanged= */ !0, 
        /* excludesMetadataChanges= */ !1);
    }, Object.defineProperty(t.prototype, "hasPendingWrites", {
        get: function() {
            return !this.ee.W();
        },
        enumerable: !1,
        configurable: !0
    }), t.prototype.isEqual = function(t) {
        if (!(this.fromCache === t.fromCache && this.ne === t.ne && this.ee.isEqual(t.ee) && zn(this.query, t.query) && this.docs.isEqual(t.docs) && this.te.isEqual(t.te))) return !1;
        var e = this.docChanges, n = t.docChanges;
        if (e.length !== n.length) return !1;
        for (var r = 0; r < e.length; r++) if (e[r].type !== n[r].type || !e[r].doc.isEqual(n[r].doc)) return !1;
        return !0;
    }, t;
}(), Ct = /** @class */ function() {
    function t(
    /**
     * The snapshot version this event brings us up to, or MIN if not set.
     */
    t, 
    /**
     * A map from target to changes to the target. See TargetChange.
     */
    e, 
    /**
     * A set of targets that is known to be inconsistent. Listens for these
     * targets should be re-established without resume tokens.
     */
    n, 
    /**
     * A set of which documents have changed or been deleted, along with the
     * doc's new values (if not deleted).
     */
    r, 
    /**
     * A set of which document updates are due only to limbo resolution targets.
     */
    i) {
        this.ft = t, this.re = e, this.oe = n, this.ce = r, this.ue = i;
    }
    /**
     * HACK: Views require RemoteEvents in order to determine whether the view is
     * CURRENT, but secondary tabs don't receive remote events. So this method is
     * used to create a synthesized RemoteEvent that can be used to apply a
     * CURRENT status change to a View, for queries executed in a different tab.
     */
    // PORTING NOTE: Multi-tab only
        return t.ae = function(e, n) {
        var r = new Map;
        return r.set(e, Rt.he(e, n)), new t(H$1.min(), r, kt(), _t(), Dt());
    }, t;
}(), Rt = /** @class */ function() {
    function t(
    /**
     * An opaque, server-assigned token that allows watching a query to be resumed
     * after disconnecting without retransmitting all the data that matches the
     * query. The resume token essentially identifies a point in time from which
     * the server should resume sending results.
     */
    t, 
    /**
     * The "current" (synced) status of this target. Note that "current"
     * has special meaning in the RPC protocol that implies that a target is
     * both up-to-date and consistent with the rest of the watch stream.
     */
    e, 
    /**
     * The set of documents that were newly assigned to this target as part of
     * this remote event.
     */
    n, 
    /**
     * The set of documents that were already assigned to this target but received
     * an update during this remote event.
     */
    r, 
    /**
     * The set of documents that were removed from this target as part of this
     * remote event.
     */
    i) {
        this.resumeToken = t, this.le = e, this._e = n, this.fe = r, this.de = i
        /**
     * This method is used to create a synthesized TargetChanges that can be used to
     * apply a CURRENT status change to a View (for queries executed in a different
     * tab) or for new queries (to raise snapshots with correct CURRENT status).
     */;
    }
    return t.he = function(e, n) {
        return new t(at.lt, n, Dt(), Dt(), Dt());
    }, t;
}(), Vt = function(
/** The new document applies to all of these targets. */
t, 
/** The new document is removed from all of these targets. */
e, 
/** The key of the document for this change. */
n, 
/**
     * The new document or NoDocument if it was deleted. Is null if the
     * document went out of view without the server sending a new document.
     */
r) {
    this.we = t, this.removedTargetIds = e, this.key = n, this.Ee = r;
}, Lt = function(t, e) {
    this.targetId = t, this.Te = e;
}, Ut = function(
/** What kind of change occurred to the watch target. */
t, 
/** The target IDs that were added/removed/set. */
e, 
/**
     * An opaque, server-assigned token that allows watching a target to be
     * resumed after disconnecting without retransmitting all the data that
     * matches the target. The resume token essentially identifies a point in
     * time from which the server should resume sending results.
     */
n
/** An RPC error indicating why the watch failed. */ , r) {
    void 0 === n && (n = at.lt), void 0 === r && (r = null), this.state = t, this.targetIds = e, 
    this.resumeToken = n, this.cause = r;
}, Mt = /** @class */ function() {
    function t() {
        /**
         * The number of pending responses (adds or removes) that we are waiting on.
         * We only consider targets active that have no pending responses.
         */
        this.Ie = 0, 
        /**
             * Keeps track of the document changes since the last raised snapshot.
             *
             * These changes are continuously updated as we receive document updates and
             * always reflect the current set of changes against the last issued snapshot.
             */
        this.me = Ft(), 
        /** See public getters for explanations of these fields. */
        this.Ae = at.lt, this.Re = !1, 
        /**
             * Whether this target state should be included in the next snapshot. We
             * initialize to true so that newly-added targets are included in the next
             * RemoteEvent.
             */
        this.Pe = !0;
    }
    return Object.defineProperty(t.prototype, "le", {
        /**
         * Whether this target has been marked 'current'.
         *
         * 'Current' has special meaning in the RPC protocol: It implies that the
         * Watch backend has sent us all changes up to the point at which the target
         * was added and that the target is consistent with the rest of the watch
         * stream.
         */
        get: function() {
            return this.Re;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "resumeToken", {
        /** The last resume token sent to us for this target. */ get: function() {
            return this.Ae;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "ge", {
        /** Whether this target has pending target adds or target removes. */ get: function() {
            return 0 !== this.Ie;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "ye", {
        /** Whether we have modified any state that should trigger a snapshot. */ get: function() {
            return this.Pe;
        },
        enumerable: !1,
        configurable: !0
    }), 
    /**
     * Applies the resume token to the TargetChange, but only when it has a new
     * value. Empty resumeTokens are discarded.
     */
    t.prototype.Ve = function(t) {
        t.ht() > 0 && (this.Pe = !0, this.Ae = t);
    }, 
    /**
     * Creates a target change from the current set of changes.
     *
     * To reset the document changes after raising this snapshot, call
     * `clearPendingChanges()`.
     */
    t.prototype.pe = function() {
        var t = Dt(), e = Dt(), n = Dt();
        return this.me.forEach((function(r, i) {
            switch (i) {
              case 0 /* Added */ :
                t = t.add(r);
                break;

              case 2 /* Modified */ :
                e = e.add(r);
                break;

              case 1 /* Removed */ :
                n = n.add(r);
                break;

              default:
                P$1();
            }
        })), new Rt(this.Ae, this.Re, t, e, n);
    }, 
    /**
     * Resets the document changes and sets `hasPendingChanges` to false.
     */
    t.prototype.ve = function() {
        this.Pe = !1, this.me = Ft();
    }, t.prototype.be = function(t, e) {
        this.Pe = !0, this.me = this.me.Tt(t, e);
    }, t.prototype.Se = function(t) {
        this.Pe = !0, this.me = this.me.remove(t);
    }, t.prototype.De = function() {
        this.Ie += 1;
    }, t.prototype.Ce = function() {
        this.Ie -= 1;
    }, t.prototype.Ne = function() {
        this.Pe = !0, this.Re = !0;
    }, t;
}(), qt = /** @class */ function() {
    function t(t) {
        this.xe = t, 
        /** The internal state of all tracked targets. */
        this.Fe = new Map, 
        /** Keeps track of the documents to update since the last raised snapshot. */
        this.Oe = _t(), 
        /** A mapping of document keys to their set of target IDs. */
        this.Me = jt(), 
        /**
             * A list of targets with existence filter mismatches. These targets are
             * known to be inconsistent and their listens needs to be re-established by
             * RemoteStore.
             */
        this.ke = new gt(G$1)
        /**
     * Processes and adds the DocumentWatchChange to the current set of changes.
     */;
    }
    return t.prototype.$e = function(t) {
        for (var e = 0, n = t.we; e < n.length; e++) {
            var r = n[e];
            t.Ee instanceof xn ? this.Le(r, t.Ee) : t.Ee instanceof kn && this.Be(r, t.key, t.Ee);
        }
        for (var i = 0, o = t.removedTargetIds; i < o.length; i++) {
            var u = o[i];
            this.Be(u, t.key, t.Ee);
        }
    }, 
    /** Processes and adds the WatchTargetChange to the current set of changes. */ t.prototype.qe = function(t) {
        var e = this;
        this.Ue(t, (function(n) {
            var r = e.Qe(n);
            switch (t.state) {
              case 0 /* NoChange */ :
                e.Ke(n) && r.Ve(t.resumeToken);
                break;

              case 1 /* Added */ :
                // We need to decrement the number of pending acks needed from watch
                // for this targetId.
                r.Ce(), r.ge || 
                // We have a freshly added target, so we need to reset any state
                // that we had previously. This can happen e.g. when remove and add
                // back a target for existence filter mismatches.
                r.ve(), r.Ve(t.resumeToken);
                break;

              case 2 /* Removed */ :
                // We need to keep track of removed targets to we can post-filter and
                // remove any target changes.
                // We need to decrement the number of pending acks needed from watch
                // for this targetId.
                r.Ce(), r.ge || e.removeTarget(n);
                break;

              case 3 /* Current */ :
                e.Ke(n) && (r.Ne(), r.Ve(t.resumeToken));
                break;

              case 4 /* Reset */ :
                e.Ke(n) && (
                // Reset the target and synthesizes removes for all existing
                // documents. The backend will re-add any documents that still
                // match the target before it sends the next global snapshot.
                e.We(n), r.Ve(t.resumeToken));
                break;

              default:
                P$1();
            }
        }));
    }, 
    /**
     * Iterates over all targetIds that the watch change applies to: either the
     * targetIds explicitly listed in the change or the targetIds of all currently
     * active targets.
     */
    t.prototype.Ue = function(t, e) {
        var n = this;
        t.targetIds.length > 0 ? t.targetIds.forEach(e) : this.Fe.forEach((function(t, r) {
            n.Ke(r) && e(r);
        }));
    }, 
    /**
     * Handles existence filters and synthesizes deletes for filter mismatches.
     * Targets that are invalidated by filter mismatches are added to
     * `pendingTargetResets`.
     */
    t.prototype.je = function(t) {
        var e = t.targetId, n = t.Te.count, r = this.Ge(e);
        if (r) {
            var i = r.target;
            if (st(i)) if (0 === n) {
                // The existence filter told us the document does not exist. We deduce
                // that this document does not exist and apply a deleted document to
                // our updates. Without applying this deleted document there might be
                // another query that will raise this document as part of a snapshot
                // until it is resolved, essentially exposing inconsistency between
                // queries.
                var o = new Z$1(i.path);
                this.Be(e, o, new kn(o, H$1.min()));
            } else C(1 === n); else this.ze(e) !== n && (
            // Existence filter mismatch: We reset the mapping and raise a new
            // snapshot with `isFromCache:true`.
            this.We(e), this.ke = this.ke.add(e));
        }
    }, 
    /**
     * Converts the currently accumulated state into a remote event at the
     * provided snapshot version. Resets the accumulated changes before returning.
     */
    t.prototype.He = function(t) {
        var e = this, n = new Map;
        this.Fe.forEach((function(r, i) {
            var o = e.Ge(i);
            if (o) {
                if (r.le && st(o.target)) {
                    // Document queries for document that don't exist can produce an empty
                    // result set. To update our local cache, we synthesize a document
                    // delete if we have not previously received the document. This
                    // resolves the limbo state of the document, removing it from
                    // limboDocumentRefs.
                    // TODO(dimond): Ideally we would have an explicit lookup target
                    // instead resulting in an explicit delete message and we could
                    // remove this special logic.
                    var u = new Z$1(o.target.path);
                    null !== e.Oe.get(u) || e.Je(i, u) || e.Be(i, u, new kn(u, t));
                }
                r.ye && (n.set(i, r.pe()), r.ve());
            }
        }));
        var r = Dt();
        // We extract the set of limbo-only document updates as the GC logic
        // special-cases documents that do not appear in the target cache.
        // TODO(gsoltis): Expand on this comment once GC is available in the JS
        // client.
                this.Me.forEach((function(t, n) {
            var i = !0;
            n.Wt((function(t) {
                var n = e.Ge(t);
                return !n || 2 /* LimboResolution */ === n._t || (i = !1, !1);
            })), i && (r = r.add(t));
        }));
        var i = new Ct(t, n, this.ke, this.Oe, r);
        return this.Oe = _t(), this.Me = jt(), this.ke = new gt(G$1), i;
    }, 
    /**
     * Adds the provided document to the internal list of document updates and
     * its document key to the given target's mapping.
     */
    // Visible for testing.
    t.prototype.Le = function(t, e) {
        if (this.Ke(t)) {
            var n = this.Je(t, e.key) ? 2 /* Modified */ : 0 /* Added */;
            this.Qe(t).be(e.key, n), this.Oe = this.Oe.Tt(e.key, e), this.Me = this.Me.Tt(e.key, this.Ye(e.key).add(t));
        }
    }, 
    /**
     * Removes the provided document from the target mapping. If the
     * document no longer matches the target, but the document's state is still
     * known (e.g. we know that the document was deleted or we received the change
     * that caused the filter mismatch), the new document can be provided
     * to update the remote document cache.
     */
    // Visible for testing.
    t.prototype.Be = function(t, e, n) {
        if (this.Ke(t)) {
            var r = this.Qe(t);
            this.Je(t, e) ? r.be(e, 1 /* Removed */) : 
            // The document may have entered and left the target before we raised a
            // snapshot, so we can just ignore the change.
            r.Se(e), this.Me = this.Me.Tt(e, this.Ye(e).delete(t)), n && (this.Oe = this.Oe.Tt(e, n));
        }
    }, t.prototype.removeTarget = function(t) {
        this.Fe.delete(t);
    }, 
    /**
     * Returns the current count of documents in the target. This includes both
     * the number of documents that the LocalStore considers to be part of the
     * target as well as any accumulated changes.
     */
    t.prototype.ze = function(t) {
        var e = this.Qe(t).pe();
        return this.xe.Xe(t).size + e._e.size - e.de.size;
    }, 
    /**
     * Increment the number of acks needed from watch before we can consider the
     * server to be 'in-sync' with the client's active targets.
     */
    t.prototype.De = function(t) {
        this.Qe(t).De();
    }, t.prototype.Qe = function(t) {
        var e = this.Fe.get(t);
        return e || (e = new Mt, this.Fe.set(t, e)), e;
    }, t.prototype.Ye = function(t) {
        var e = this.Me.get(t);
        return e || (e = new gt(G$1), this.Me = this.Me.Tt(t, e)), e;
    }, 
    /**
     * Verifies that the user is still interested in this target (by calling
     * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
     * from watch.
     */
    t.prototype.Ke = function(t) {
        var e = null !== this.Ge(t);
        return e || x$1("WatchChangeAggregator", "Detected inactive target", t), e;
    }, 
    /**
     * Returns the TargetData for an active target (i.e. a target that the user
     * is still interested in that has no outstanding target change requests).
     */
    t.prototype.Ge = function(t) {
        var e = this.Fe.get(t);
        return e && e.ge ? null : this.xe.Ze(t);
    }, 
    /**
     * Resets the state of a Watch target to its initial state (e.g. sets
     * 'current' to false, clears the resume token and removes its target mapping
     * from all documents).
     */
    t.prototype.We = function(t) {
        var e = this;
        this.Fe.set(t, new Mt), this.xe.Xe(t).forEach((function(n) {
            e.Be(t, n, /*updatedDocument=*/ null);
        }));
    }, 
    /**
     * Returns whether the LocalStore considers the document to be part of the
     * specified target.
     */
    t.prototype.Je = function(t, e) {
        return this.xe.Xe(t).has(e);
    }, t;
}();

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
 * duplicate events for the same doc.
 */ function jt() {
    return new vt(Z$1.$);
}

function Ft() {
    return new vt(Z$1.$);
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function zt(t) {
    var e = 0;
    for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && e++;
    return e;
}

function Bt(t, e) {
    for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);
}

function Gt(t) {
    for (var e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;
    return !0;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Represents a locally-applied ServerTimestamp.
 *
 * Server Timestamps are backed by MapValues that contain an internal field
 * `__type__` with a value of `server_timestamp`. The previous value and local
 * write time are stored in its `__previous_value__` and `__local_write_time__`
 * fields respectively.
 *
 * Notes:
 * - ServerTimestampValue instances are created as the result of applying a
 *   TransformMutation (see TransformMutation.applyTo()). They can only exist in
 *   the local view of a document. Therefore they do not need to be parsed or
 *   serialized.
 * - When evaluated locally (e.g. for snapshot.data()), they by default
 *   evaluate to `null`. This behavior can be configured by passing custom
 *   FieldValueOptions to value().
 * - With respect to other ServerTimestampValues, they sort by their
 *   localWriteTime.
 */ function Kt(t) {
    var e, n;
    return "server_timestamp" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);
}

/**
 * Creates a new ServerTimestamp proto value (using the internal format).
 */
/**
 * Returns the value of the field before this ServerTimestamp was set.
 *
 * Preserving the previous values allows the user to display the last resoled
 * value until the backend responds with the timestamp.
 */ function Wt(t) {
    var e = t.mapValue.fields.__previous_value__;
    return Kt(e) ? Wt(e) : e;
}

/**
 * Returns the local time at which this timestamp was first set.
 */ function Qt(t) {
    var e = ne(t.mapValue.fields.__local_write_time__.timestampValue);
    return new Q$1(e.seconds, e.nanos);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// A RegExp matching ISO 8601 UTC timestamps with optional fraction.
var Ht = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);

/** Extracts the backend's type order for the provided value. */ function Yt(t) {
    return "nullValue" in t ? 0 /* NullValue */ : "booleanValue" in t ? 1 /* BooleanValue */ : "integerValue" in t || "doubleValue" in t ? 2 /* NumberValue */ : "timestampValue" in t ? 3 /* TimestampValue */ : "stringValue" in t ? 5 /* StringValue */ : "bytesValue" in t ? 6 /* BlobValue */ : "referenceValue" in t ? 7 /* RefValue */ : "geoPointValue" in t ? 8 /* GeoPointValue */ : "arrayValue" in t ? 9 /* ArrayValue */ : "mapValue" in t ? Kt(t) ? 4 /* ServerTimestampValue */ : 10 /* ObjectValue */ : P$1();
}

/** Tests `left` and `right` for equality based on the backend semantics. */ function $t(t, e) {
    var n = Yt(t);
    if (n !== Yt(e)) return !1;
    switch (n) {
      case 0 /* NullValue */ :
        return !0;

      case 1 /* BooleanValue */ :
        return t.booleanValue === e.booleanValue;

      case 4 /* ServerTimestampValue */ :
        return Qt(t).isEqual(Qt(e));

      case 3 /* TimestampValue */ :
        return function(t, e) {
            if ("string" == typeof t.timestampValue && "string" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) 
            // Use string equality for ISO 8601 timestamps
            return t.timestampValue === e.timestampValue;
            var n = ne(t.timestampValue), r = ne(e.timestampValue);
            return n.seconds === r.seconds && n.nanos === r.nanos;
        }(t, e);

      case 5 /* StringValue */ :
        return t.stringValue === e.stringValue;

      case 6 /* BlobValue */ :
        return function(t, e) {
            return ie(t.bytesValue).isEqual(ie(e.bytesValue));
        }(t, e);

      case 7 /* RefValue */ :
        return t.referenceValue === e.referenceValue;

      case 8 /* GeoPointValue */ :
        return function(t, e) {
            return re(t.geoPointValue.latitude) === re(e.geoPointValue.latitude) && re(t.geoPointValue.longitude) === re(e.geoPointValue.longitude);
        }(t, e);

      case 2 /* NumberValue */ :
        return function(t, e) {
            if ("integerValue" in t && "integerValue" in e) return re(t.integerValue) === re(e.integerValue);
            if ("doubleValue" in t && "doubleValue" in e) {
                var n = re(t.doubleValue), r = re(e.doubleValue);
                return n === r ? et(n) === et(r) : isNaN(n) && isNaN(r);
            }
            return !1;
        }(t, e);

      case 9 /* ArrayValue */ :
        return K$1(t.arrayValue.values || [], e.arrayValue.values || [], $t);

      case 10 /* ObjectValue */ :
        return function(t, e) {
            var n = t.mapValue.fields || {}, r = e.mapValue.fields || {};
            if (zt(n) !== zt(r)) return !1;
            for (var i in n) if (n.hasOwnProperty(i) && (void 0 === r[i] || !$t(n[i], r[i]))) return !1;
            return !0;
        }(t, e);

      default:
        return P$1();
    }
}

function Jt(t, e) {
    return void 0 !== (t.values || []).find((function(t) {
        return $t(t, e);
    }));
}

function Xt(t, e) {
    var n = Yt(t), r = Yt(e);
    if (n !== r) return G$1(n, r);
    switch (n) {
      case 0 /* NullValue */ :
        return 0;

      case 1 /* BooleanValue */ :
        return G$1(t.booleanValue, e.booleanValue);

      case 2 /* NumberValue */ :
        return function(t, e) {
            var n = re(t.integerValue || t.doubleValue), r = re(e.integerValue || e.doubleValue);
            return n < r ? -1 : n > r ? 1 : n === r ? 0 : 
            // one or both are NaN.
            isNaN(n) ? isNaN(r) ? 0 : -1 : 1;
        }(t, e);

      case 3 /* TimestampValue */ :
        return Zt(t.timestampValue, e.timestampValue);

      case 4 /* ServerTimestampValue */ :
        return Zt(Qt(t), Qt(e));

      case 5 /* StringValue */ :
        return G$1(t.stringValue, e.stringValue);

      case 6 /* BlobValue */ :
        return function(t, e) {
            var n = ie(t), r = ie(e);
            return n.F(r);
        }(t.bytesValue, e.bytesValue);

      case 7 /* RefValue */ :
        return function(t, e) {
            for (var n = t.split("/"), r = e.split("/"), i = 0; i < n.length && i < r.length; i++) {
                var o = G$1(n[i], r[i]);
                if (0 !== o) return o;
            }
            return G$1(n.length, r.length);
        }(t.referenceValue, e.referenceValue);

      case 8 /* GeoPointValue */ :
        return function(t, e) {
            var n = G$1(re(t.latitude), re(e.latitude));
            return 0 !== n ? n : G$1(re(t.longitude), re(e.longitude));
        }(t.geoPointValue, e.geoPointValue);

      case 9 /* ArrayValue */ :
        return function(t, e) {
            for (var n = t.values || [], r = e.values || [], i = 0; i < n.length && i < r.length; ++i) {
                var o = Xt(n[i], r[i]);
                if (o) return o;
            }
            return G$1(n.length, r.length);
        }(t.arrayValue, e.arrayValue);

      case 10 /* ObjectValue */ :
        return function(t, e) {
            var n = t.fields || {}, r = Object.keys(n), i = e.fields || {}, o = Object.keys(i);
            // Even though MapValues are likely sorted correctly based on their insertion
            // order (e.g. when received from the backend), local modifications can bring
            // elements out of order. We need to re-sort the elements to ensure that
            // canonical IDs are independent of insertion order.
                        r.sort(), o.sort();
            for (var u = 0; u < r.length && u < o.length; ++u) {
                var s = G$1(r[u], o[u]);
                if (0 !== s) return s;
                var a = Xt(n[r[u]], i[o[u]]);
                if (0 !== a) return a;
            }
            return G$1(r.length, o.length);
        }(t.mapValue, e.mapValue);

      default:
        throw P$1();
    }
}

function Zt(t, e) {
    if ("string" == typeof t && "string" == typeof e && t.length === e.length) return G$1(t, e);
    var n = ne(t), r = ne(e), i = G$1(n.seconds, r.seconds);
    return 0 !== i ? i : G$1(n.nanos, r.nanos);
}

function te(t) {
    return ee(t);
}

function ee(t) {
    return "nullValue" in t ? "null" : "booleanValue" in t ? "" + t.booleanValue : "integerValue" in t ? "" + t.integerValue : "doubleValue" in t ? "" + t.doubleValue : "timestampValue" in t ? function(t) {
        var e = ne(t);
        return "time(" + e.seconds + "," + e.nanos + ")";
    }(t.timestampValue) : "stringValue" in t ? t.stringValue : "bytesValue" in t ? ie(t.bytesValue).toBase64() : "referenceValue" in t ? (n = t.referenceValue, 
    Z$1.it(n).toString()) : "geoPointValue" in t ? "geo(" + (e = t.geoPointValue).latitude + "," + e.longitude + ")" : "arrayValue" in t ? function(t) {
        for (var e = "[", n = !0, r = 0, i = t.values || []; r < i.length; r++) {
            n ? n = !1 : e += ",", e += ee(i[r]);
        }
        return e + "]";
    }(t.arrayValue) : "mapValue" in t ? function(t) {
        for (
        // Iteration order in JavaScript is not guaranteed. To ensure that we generate
        // matching canonical IDs for identical maps, we need to sort the keys.
        var e = "{", n = !0, r = 0, i = Object.keys(t.fields || {}).sort(); r < i.length; r++) {
            var o = i[r];
            n ? n = !1 : e += ",", e += o + ":" + ee(t.fields[o]);
        }
        return e + "}";
    }(t.mapValue) : P$1();
    var e, n;
}

function ne(t) {
    // The json interface (for the browser) will return an iso timestamp string,
    // while the proto js library (for node) will return a
    // google.protobuf.Timestamp instance.
    if (C(!!t), "string" == typeof t) {
        // The date string can have higher precision (nanos) than the Date class
        // (millis), so we do some custom parsing here.
        // Parse the nanos right out of the string.
        var e = 0, n = Ht.exec(t);
        if (C(!!n), n[1]) {
            // Pad the fraction out to 9 digits (nanos).
            var r = n[1];
            r = (r + "000000000").substr(0, 9), e = Number(r);
        }
        // Parse the date to get the seconds.
                var i = new Date(t);
        return {
            seconds: Math.floor(i.getTime() / 1e3),
            nanos: e
        };
    }
    return {
        seconds: re(t.seconds),
        nanos: re(t.nanos)
    };
}

/**
 * Converts the possible Proto types for numbers into a JavaScript number.
 * Returns 0 if the value is not numeric.
 */ function re(t) {
    // TODO(bjornick): Handle int64 greater than 53 bits.
    return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
}

/** Converts the possible Proto types for Blobs into a ByteString. */ function ie(t) {
    return "string" == typeof t ? at.fromBase64String(t) : at.fromUint8Array(t);
}

/** Returns a reference value for the provided database and key. */ function oe(t, e) {
    return {
        referenceValue: "projects/" + t.projectId + "/databases/" + t.database + "/documents/" + e.path.J()
    };
}

/** Returns true if `value` is an IntegerValue . */ function ue(t) {
    return !!t && "integerValue" in t;
}

/** Returns true if `value` is a DoubleValue. */
/** Returns true if `value` is an ArrayValue. */ function se(t) {
    return !!t && "arrayValue" in t;
}

/** Returns true if `value` is a NullValue. */ function ae(t) {
    return !!t && "nullValue" in t;
}

/** Returns true if `value` is NaN. */ function ce(t) {
    return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
}

/** Returns true if `value` is a MapValue. */ function he(t) {
    return !!t && "mapValue" in t;
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var fe = {
    asc: "ASCENDING",
    desc: "DESCENDING"
}, le = {
    "<": "LESS_THAN",
    "<=": "LESS_THAN_OR_EQUAL",
    ">": "GREATER_THAN",
    ">=": "GREATER_THAN_OR_EQUAL",
    "==": "EQUAL",
    "!=": "NOT_EQUAL",
    "array-contains": "ARRAY_CONTAINS",
    in: "IN",
    "not-in": "NOT_IN",
    "array-contains-any": "ARRAY_CONTAINS_ANY"
}, pe = function(t, e) {
    this.t = t, this.tn = e;
};

/**
 * This class generates JsonObject values for the Datastore API suitable for
 * sending to either GRPC stub methods or via the JSON/HTTP REST API.
 *
 * The serializer supports both Protobuf.js and Proto3 JSON formats. By
 * setting `useProto3Json` to true, the serializer will use the Proto3 JSON
 * format.
 *
 * For a description of the Proto3 JSON format check
 * https://developers.google.com/protocol-buffers/docs/proto3#json
 *
 * TODO(klimt): We can remove the databaseId argument if we keep the full
 * resource name in documents.
 */
/**
 * Returns an IntegerValue for `value`.
 */
function de(t) {
    return {
        integerValue: "" + t
    };
}

/**
 * Returns an DoubleValue for `value` that is encoded based the serializer's
 * `useProto3Json` setting.
 */ function ve(t, e) {
    if (t.tn) {
        if (isNaN(e)) return {
            doubleValue: "NaN"
        };
        if (e === 1 / 0) return {
            doubleValue: "Infinity"
        };
        if (e === -1 / 0) return {
            doubleValue: "-Infinity"
        };
    }
    return {
        doubleValue: et(e) ? "-0" : e
    };
}

/**
 * Returns a value for a number that's appropriate to put into a proto.
 * The return value is an IntegerValue if it can safely represent the value,
 * otherwise a DoubleValue is returned.
 */ function ye(t, e) {
    return nt(e) ? de(e) : ve(t, e);
}

/**
 * Returns a value for a Date that's appropriate to put into a proto.
 */ function me(t, e) {
    return t.tn ? new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "") + "." + ("000000000" + e.nanoseconds).slice(-9) + "Z" : {
        seconds: "" + e.seconds,
        nanos: e.nanoseconds
    };
}

/**
 * Returns a value for bytes that's appropriate to put in a proto.
 *
 * Visible for testing.
 */ function ge(t, e) {
    return t.tn ? e.toBase64() : e.toUint8Array();
}

/**
 * Returns a ByteString based on the proto string value.
 */ function we(t, e) {
    return me(t, e.M());
}

function be(t) {
    return C(!!t), H$1.N(function(t) {
        var e = ne(t);
        return new Q$1(e.seconds, e.nanos);
    }(t));
}

function _e(t, e) {
    return function(t) {
        return new $([ "projects", t.projectId, "databases", t.database ]);
    }(t).child("documents").child(e).J();
}

function Ie(t) {
    var e = $.Y(t);
    return C(Ke(e)), e;
}

function Ee(t, e) {
    return _e(t.t, e.path);
}

function Te(t, e) {
    var n = Ie(e);
    if (n.get(1) !== t.t.projectId) throw new L$1(V$1.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n.get(1) + " vs " + t.t.projectId);
    if (n.get(3) !== t.t.database) throw new L$1(V$1.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n.get(3) + " vs " + t.t.database);
    return new Z$1(xe(n));
}

function Ne(t, e) {
    return _e(t.t, e);
}

function Ae(t) {
    var e = Ie(t);
    // In v1beta1 queries for collections at the root did not have a trailing
    // "/documents". In v1 all resource paths contain "/documents". Preserve the
    // ability to read the v1beta1 form for compatibility with queries persisted
    // in the local target cache.
        return 4 === e.length ? $.X() : xe(e);
}

function De(t) {
    return new $([ "projects", t.t.projectId, "databases", t.t.database ]).J();
}

function xe(t) {
    return C(t.length > 4 && "documents" === t.get(4)), t.B(5)
    /** Creates a Document proto from key and fields (but no create/update time) */;
}

function ke(t, e, n) {
    return {
        name: Ee(t, e),
        fields: n.proto.mapValue.fields
    };
}

function Oe(t, e) {
    var n;
    if (e instanceof yn) n = {
        update: ke(t, e.key, e.value)
    }; else if (e instanceof In) n = {
        delete: Ee(t, e.key)
    }; else if (e instanceof mn) n = {
        update: ke(t, e.key, e.data),
        updateMask: Ge(e.en)
    }; else if (e instanceof wn) n = {
        transform: {
            document: Ee(t, e.key),
            fieldTransforms: e.fieldTransforms.map((function(t) {
                return function(t, e) {
                    var n = e.transform;
                    if (n instanceof $e) return {
                        fieldPath: e.field.J(),
                        setToServerValue: "REQUEST_TIME"
                    };
                    if (n instanceof Je) return {
                        fieldPath: e.field.J(),
                        appendMissingElements: {
                            values: n.elements
                        }
                    };
                    if (n instanceof Ze) return {
                        fieldPath: e.field.J(),
                        removeAllFromArray: {
                            values: n.elements
                        }
                    };
                    if (n instanceof en) return {
                        fieldPath: e.field.J(),
                        increment: n.nn
                    };
                    throw P$1();
                }(0, t);
            }))
        }
    }; else {
        if (!(e instanceof En)) return P$1();
        n = {
            verify: Ee(t, e.key)
        };
    }
    return e.rn.sn || (n.currentDocument = function(t, e) {
        return void 0 !== e.updateTime ? {
            updateTime: we(t, e.updateTime)
        } : void 0 !== e.exists ? {
            exists: e.exists
        } : P$1();
    }(t, e.rn)), n;
}

function Se(t, e) {
    var n = e.currentDocument ? function(t) {
        return void 0 !== t.updateTime ? an.updateTime(be(t.updateTime)) : void 0 !== t.exists ? an.exists(t.exists) : an.on();
    }(e.currentDocument) : an.on();
    if (e.update) {
        e.update.name;
        var r = Te(t, e.update.name), i = new Tn({
            mapValue: {
                fields: e.update.fields
            }
        });
        if (e.updateMask) {
            var o = function(t) {
                var e = t.fieldPaths || [];
                return new on(e.map((function(t) {
                    return X$1.nt(t);
                })));
            }(e.updateMask);
            return new mn(r, i, o, n);
        }
        return new yn(r, i, n);
    }
    if (e.delete) {
        var u = Te(t, e.delete);
        return new In(u, n);
    }
    if (e.transform) {
        var s = Te(t, e.transform.document), a = e.transform.fieldTransforms.map((function(e) {
            return function(t, e) {
                var n = null;
                if ("setToServerValue" in e) C("REQUEST_TIME" === e.setToServerValue), n = new $e; else if ("appendMissingElements" in e) {
                    var r = e.appendMissingElements.values || [];
                    n = new Je(r);
                } else if ("removeAllFromArray" in e) {
                    var i = e.removeAllFromArray.values || [];
                    n = new Ze(i);
                } else "increment" in e ? n = new en(t, e.increment) : P$1();
                var o = X$1.nt(e.fieldPath);
                return new un(o, n);
            }(t, e);
        }));
        return C(!0 === n.exists), new wn(s, a);
    }
    if (e.verify) {
        var c = Te(t, e.verify);
        return new En(c, n);
    }
    return P$1();
}

function Pe(t, e) {
    return {
        documents: [ Ne(t, e.path) ]
    };
}

function Ce(t, e) {
    // Dissect the path into parent, collectionId, and optional key filter.
    var n = {
        structuredQuery: {}
    }, r = e.path;
    null !== e.collectionGroup ? (n.parent = Ne(t, r), n.structuredQuery.from = [ {
        collectionId: e.collectionGroup,
        allDescendants: !0
    } ]) : (n.parent = Ne(t, r.q()), n.structuredQuery.from = [ {
        collectionId: r.K()
    } ]);
    var i = function(t) {
        if (0 !== t.length) {
            var e = t.map((function(t) {
                // visible for testing
                return function(t) {
                    if ("==" /* EQUAL */ === t.op) {
                        if (ce(t.value)) return {
                            unaryFilter: {
                                field: je(t.field),
                                op: "IS_NAN"
                            }
                        };
                        if (ae(t.value)) return {
                            unaryFilter: {
                                field: je(t.field),
                                op: "IS_NULL"
                            }
                        };
                    } else if ("!=" /* NOT_EQUAL */ === t.op) {
                        if (ce(t.value)) return {
                            unaryFilter: {
                                field: je(t.field),
                                op: "IS_NOT_NAN"
                            }
                        };
                        if (ae(t.value)) return {
                            unaryFilter: {
                                field: je(t.field),
                                op: "IS_NOT_NULL"
                            }
                        };
                    }
                    return {
                        fieldFilter: {
                            field: je(t.field),
                            op: qe(t.op),
                            value: t.value
                        }
                    };
                }(t);
            }));
            return 1 === e.length ? e[0] : {
                compositeFilter: {
                    op: "AND",
                    filters: e
                }
            };
        }
    }(e.filters);
    i && (n.structuredQuery.where = i);
    var o = function(t) {
        if (0 !== t.length) return t.map((function(t) {
            // visible for testing
            return function(t) {
                return {
                    field: je(t.field),
                    direction: Me(t.dir)
                };
            }(t);
        }));
    }(e.orderBy);
    o && (n.structuredQuery.orderBy = o);
    var u = function(t, e) {
        return t.tn || tt(e) ? e : {
            value: e
        };
    }(t, e.limit);
    return null !== u && (n.structuredQuery.limit = u), e.startAt && (n.structuredQuery.startAt = Le(e.startAt)), 
    e.endAt && (n.structuredQuery.endAt = Le(e.endAt)), n;
}

function Re(t) {
    var e = Ae(t.parent), n = t.structuredQuery, r = n.from ? n.from.length : 0, i = null;
    if (r > 0) {
        C(1 === r);
        var o = n.from[0];
        o.allDescendants ? i = o.collectionId : e = e.child(o.collectionId);
    }
    var u = [];
    n.where && (u = Ve(n.where));
    var s = [];
    n.orderBy && (s = n.orderBy.map((function(t) {
        return function(t) {
            return new ur(Fe(t.field), 
            // visible for testing
            function(t) {
                switch (t) {
                  case "ASCENDING":
                    return "asc" /* ASCENDING */;

                  case "DESCENDING":
                    return "desc" /* DESCENDING */;

                  default:
                    return;
                }
            }(t.direction));
        }(t);
    })));
    var a = null;
    n.limit && (a = function(t) {
        var e;
        return tt(e = "object" == typeof t ? t.value : t) ? null : e;
    }(n.limit));
    var c = null;
    n.startAt && (c = Ue(n.startAt));
    var h = null;
    return n.endAt && (h = Ue(n.endAt)), Pn(e, i, s, u, a, "F" /* First */ , c, h);
}

function Ve(t) {
    return t ? void 0 !== t.unaryFilter ? [ Be(t) ] : void 0 !== t.fieldFilter ? [ ze(t) ] : void 0 !== t.compositeFilter ? t.compositeFilter.filters.map((function(t) {
        return Ve(t);
    })).reduce((function(t, e) {
        return t.concat(e);
    })) : P$1() : [];
}

function Le(t) {
    return {
        before: t.before,
        values: t.position
    };
}

function Ue(t) {
    var e = !!t.before, n = t.values || [];
    return new nr(n, e);
}

// visible for testing
function Me(t) {
    return fe[t];
}

function qe(t) {
    return le[t];
}

function je(t) {
    return {
        fieldPath: t.J()
    };
}

function Fe(t) {
    return X$1.nt(t.fieldPath);
}

function ze(t) {
    return Qn.create(Fe(t.fieldFilter.field), function(t) {
        switch (t) {
          case "EQUAL":
            return "==" /* EQUAL */;

          case "NOT_EQUAL":
            return "!=" /* NOT_EQUAL */;

          case "GREATER_THAN":
            return ">" /* GREATER_THAN */;

          case "GREATER_THAN_OR_EQUAL":
            return ">=" /* GREATER_THAN_OR_EQUAL */;

          case "LESS_THAN":
            return "<" /* LESS_THAN */;

          case "LESS_THAN_OR_EQUAL":
            return "<=" /* LESS_THAN_OR_EQUAL */;

          case "ARRAY_CONTAINS":
            return "array-contains" /* ARRAY_CONTAINS */;

          case "IN":
            return "in" /* IN */;

          case "NOT_IN":
            return "not-in" /* NOT_IN */;

          case "ARRAY_CONTAINS_ANY":
            return "array-contains-any" /* ARRAY_CONTAINS_ANY */;

          case "OPERATOR_UNSPECIFIED":
          default:
            return P$1();
        }
    }(t.fieldFilter.op), t.fieldFilter.value);
}

function Be(t) {
    switch (t.unaryFilter.op) {
      case "IS_NAN":
        var e = Fe(t.unaryFilter.field);
        return Qn.create(e, "==" /* EQUAL */ , {
            doubleValue: NaN
        });

      case "IS_NULL":
        var n = Fe(t.unaryFilter.field);
        return Qn.create(n, "==" /* EQUAL */ , {
            nullValue: "NULL_VALUE"
        });

      case "IS_NOT_NAN":
        var r = Fe(t.unaryFilter.field);
        return Qn.create(r, "!=" /* NOT_EQUAL */ , {
            doubleValue: NaN
        });

      case "IS_NOT_NULL":
        var i = Fe(t.unaryFilter.field);
        return Qn.create(i, "!=" /* NOT_EQUAL */ , {
            nullValue: "NULL_VALUE"
        });

      case "OPERATOR_UNSPECIFIED":
      default:
        return P$1();
    }
}

function Ge(t) {
    var e = [];
    return t.fields.forEach((function(t) {
        return e.push(t.J());
    })), {
        fieldPaths: e
    };
}

function Ke(t) {
    // Resource names have at least 4 components (project ID, database ID)
    return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
}

/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** Represents a transform within a TransformMutation. */ var We = function() {
    // Make sure that the structural type of `TransformOperation` is unique.
    // See https://github.com/microsoft/TypeScript/issues/5451
    this.cn = void 0;
};

/**
 * Computes the local transform result against the provided `previousValue`,
 * optionally using the provided localWriteTime.
 */ function Qe(t, e, n) {
    return t instanceof $e ? function(t, e) {
        var n = {
            fields: {
                __type__: {
                    stringValue: "server_timestamp"
                },
                __local_write_time__: {
                    timestampValue: {
                        seconds: t.seconds,
                        nanos: t.nanoseconds
                    }
                }
            }
        };
        return e && (n.fields.__previous_value__ = e), {
            mapValue: n
        };
    }(n, e) : t instanceof Je ? Xe(t, e) : t instanceof Ze ? tn(t, e) : function(t, e) {
        // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
        // precision and resolves overflows by reducing precision, we do not
        // manually cap overflows at 2^63.
        var n = Ye(t, e), r = nn(n) + nn(t.nn);
        return ue(n) && ue(t.nn) ? de(r) : ve(t.serializer, r);
    }(t, e);
}

/**
 * Computes a final transform result after the transform has been acknowledged
 * by the server, potentially using the server-provided transformResult.
 */ function He(t, e, n) {
    // The server just sends null as the transform result for array operations,
    // so we have to calculate a result the same as we do for local
    // applications.
    return t instanceof Je ? Xe(t, e) : t instanceof Ze ? tn(t, e) : n;
}

/**
 * If this transform operation is not idempotent, returns the base value to
 * persist for this transform. If a base value is returned, the transform
 * operation is always applied to this base value, even if document has
 * already been updated.
 *
 * Base values provide consistent behavior for non-idempotent transforms and
 * allow us to return the same latency-compensated value even if the backend
 * has already applied the transform operation. The base value is null for
 * idempotent transforms, as they can be re-played even if the backend has
 * already applied them.
 *
 * @return a base value to store along with the mutation, or null for
 * idempotent transforms.
 */ function Ye(t, e) {
    return t instanceof en ? ue(n = e) || function(t) {
        return !!t && "doubleValue" in t;
    }(n) ? e : {
        integerValue: 0
    } : null;
    var n;
}

/** Transforms a value into a server-generated timestamp. */ var $e = /** @class */ function(e) {
    function n() {
        return null !== e && e.apply(this, arguments) || this;
    }
    return __extends(n, e), n;
}(We), Je = /** @class */ function(e) {
    function n(t) {
        var n = this;
        return (n = e.call(this) || this).elements = t, n;
    }
    return __extends(n, e), n;
}(We);

/** Transforms an array value via a union operation. */ function Xe(t, e) {
    for (var n = rn(e), r = function(t) {
        n.some((function(e) {
            return $t(e, t);
        })) || n.push(t);
    }, i = 0, o = t.elements; i < o.length; i++) {
        r(o[i]);
    }
    return {
        arrayValue: {
            values: n
        }
    };
}

/** Transforms an array value via a remove operation. */ var Ze = /** @class */ function(e) {
    function n(t) {
        var n = this;
        return (n = e.call(this) || this).elements = t, n;
    }
    return __extends(n, e), n;
}(We);

function tn(t, e) {
    for (var n = rn(e), r = function(t) {
        n = n.filter((function(e) {
            return !$t(e, t);
        }));
    }, i = 0, o = t.elements; i < o.length; i++) {
        r(o[i]);
    }
    return {
        arrayValue: {
            values: n
        }
    };
}

/**
 * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
 * transforms. Converts all field values to integers or doubles, but unlike the
 * backend does not cap integer values at 2^63. Instead, JavaScript number
 * arithmetic is used and precision loss can occur for values greater than 2^53.
 */ var en = /** @class */ function(e) {
    function n(t, n) {
        var r = this;
        return (r = e.call(this) || this).serializer = t, r.nn = n, r;
    }
    return __extends(n, e), n;
}(We);

function nn(t) {
    return re(t.integerValue || t.doubleValue);
}

function rn(t) {
    return se(t) && t.arrayValue.values ? t.arrayValue.values.slice() : [];
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Provides a set of fields that can be used to partially patch a document.
 * FieldMask is used in conjunction with ObjectValue.
 * Examples:
 *   foo - Overwrites foo entirely with the provided value. If foo is not
 *         present in the companion ObjectValue, the field is deleted.
 *   foo.bar - Overwrites only the field bar of the object foo.
 *             If foo is not an object, foo is replaced with an object
 *             containing foo
 */ var on = /** @class */ function() {
    function t(t) {
        this.fields = t, 
        // TODO(dimond): validation of FieldMask
        // Sort the field mask to support `FieldMask.isEqual()` and assert below.
        t.sort(X$1.$)
        /**
     * Verifies that `fieldPath` is included by at least one field in this field
     * mask.
     *
     * This is an O(n) operation, where `n` is the size of the field mask.
     */;
    }
    return t.prototype.un = function(t) {
        for (var e = 0, n = this.fields; e < n.length; e++) {
            if (n[e].j(t)) return !0;
        }
        return !1;
    }, t.prototype.isEqual = function(t) {
        return K$1(this.fields, t.fields, (function(t, e) {
            return t.isEqual(e);
        }));
    }, t;
}(), un = function(t, e) {
    this.field = t, this.transform = e;
};

/** A field path and the TransformOperation to perform upon it. */
/** The result of successfully applying a mutation to the backend. */ var sn = function(
/**
     * The version at which the mutation was committed:
     *
     * - For most operations, this is the updateTime in the WriteResult.
     * - For deletes, the commitTime of the WriteResponse (because deletes are
     *   not stored and have no updateTime).
     *
     * Note that these versions can be different: No-op writes will not change
     * the updateTime even though the commitTime advances.
     */
t, 
/**
     * The resulting fields returned from the backend after a
     * TransformMutation has been committed. Contains one FieldValue for each
     * FieldTransform that was in the mutation.
     *
     * Will be null if the mutation was not a TransformMutation.
     */
e) {
    this.version = t, this.transformResults = e;
}, an = /** @class */ function() {
    function t(t, e) {
        this.updateTime = t, this.exists = e
        /** Creates a new empty Precondition. */;
    }
    return t.on = function() {
        return new t;
    }, 
    /** Creates a new Precondition with an exists flag. */ t.exists = function(e) {
        return new t(void 0, e);
    }, 
    /** Creates a new Precondition based on a version a document exists at. */ t.updateTime = function(e) {
        return new t(e);
    }, Object.defineProperty(t.prototype, "sn", {
        /** Returns whether this Precondition is empty. */ get: function() {
            return void 0 === this.updateTime && void 0 === this.exists;
        },
        enumerable: !1,
        configurable: !0
    }), t.prototype.isEqual = function(t) {
        return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);
    }, t;
}();

/**
 * Encodes a precondition for a mutation. This follows the model that the
 * backend accepts with the special case of an explicit "empty" precondition
 * (meaning no precondition).
 */
/**
 * Returns true if the preconditions is valid for the given document
 * (or null if no document is available).
 */
function cn(t, e) {
    return void 0 !== t.updateTime ? e instanceof xn && e.version.isEqual(t.updateTime) : void 0 === t.exists || t.exists === e instanceof xn;
}

/**
 * A mutation describes a self-contained change to a document. Mutations can
 * create, replace, delete, and update subsets of documents.
 *
 * Mutations not only act on the value of the document but also its version.
 *
 * For local mutations (mutations that haven't been committed yet), we preserve
 * the existing version for Set, Patch, and Transform mutations. For Delete
 * mutations, we reset the version to 0.
 *
 * Here's the expected transition table.
 *
 * MUTATION           APPLIED TO            RESULTS IN
 *
 * SetMutation        Document(v3)          Document(v3)
 * SetMutation        NoDocument(v3)        Document(v0)
 * SetMutation        null                  Document(v0)
 * PatchMutation      Document(v3)          Document(v3)
 * PatchMutation      NoDocument(v3)        NoDocument(v3)
 * PatchMutation      null                  null
 * TransformMutation  Document(v3)          Document(v3)
 * TransformMutation  NoDocument(v3)        NoDocument(v3)
 * TransformMutation  null                  null
 * DeleteMutation     Document(v3)          NoDocument(v0)
 * DeleteMutation     NoDocument(v3)        NoDocument(v0)
 * DeleteMutation     null                  NoDocument(v0)
 *
 * For acknowledged mutations, we use the updateTime of the WriteResponse as
 * the resulting version for Set, Patch, and Transform mutations. As deletes
 * have no explicit update time, we use the commitTime of the WriteResponse for
 * Delete mutations.
 *
 * If a mutation is acknowledged by the backend but fails the precondition check
 * locally, we return an `UnknownDocument` and rely on Watch to send us the
 * updated version.
 *
 * Note that TransformMutations don't create Documents (in the case of being
 * applied to a NoDocument), even though they would on the backend. This is
 * because the client always combines the TransformMutation with a SetMutation
 * or PatchMutation and we only want to apply the transform if the prior
 * mutation resulted in a Document (always true for a SetMutation, but not
 * necessarily for a PatchMutation).
 *
 * ## Subclassing Notes
 *
 * Subclasses of Mutation need to implement applyToRemoteDocument() and
 * applyToLocalView() to implement the actual behavior of applying the mutation
 * to some source document.
 */ var hn = function() {};

/**
 * Applies this mutation to the given MaybeDocument or null for the purposes
 * of computing a new remote document. If the input document doesn't match the
 * expected state (e.g. it is null or outdated), an `UnknownDocument` can be
 * returned.
 *
 * @param mutation The mutation to apply.
 * @param maybeDoc The document to mutate. The input document can be null if
 *     the client has no knowledge of the pre-mutation state of the document.
 * @param mutationResult The result of applying the mutation from the backend.
 * @return The mutated document. The returned document may be an
 *     UnknownDocument if the mutation could not be applied to the locally
 *     cached base document.
 */ function fn(t, e, n) {
    return t instanceof yn ? function(t, e, n) {
        // Unlike applySetMutationToLocalView, if we're applying a mutation to a
        // remote document the server has accepted the mutation so the precondition
        // must have held.
        return new xn(t.key, n.version, t.value, {
            hasCommittedMutations: !0
        });
    }(t, 0, n) : t instanceof mn ? function(t, e, n) {
        if (!cn(t.rn, e)) 
        // Since the mutation was not rejected, we know that the  precondition
        // matched on the backend. We therefore must not have the expected version
        // of the document in our cache and return an UnknownDocument with the
        // known updateTime.
        return new On(t.key, n.version);
        var r = gn(t, e);
        return new xn(t.key, n.version, r, {
            hasCommittedMutations: !0
        });
    }(t, e, n) : t instanceof wn ? function(t, e, n) {
        if (C(null != n.transformResults), !cn(t.rn, e)) 
        // Since the mutation was not rejected, we know that the  precondition
        // matched on the backend. We therefore must not have the expected version
        // of the document in our cache and return an UnknownDocument with the
        // known updateTime.
        return new On(t.key, n.version);
        var r = bn(t, e), i = 
        /**
 * Creates a list of "transform results" (a transform result is a field value
 * representing the result of applying a transform) for use after a
 * TransformMutation has been acknowledged by the server.
 *
 * @param fieldTransforms The field transforms to apply the result to.
 * @param baseDoc The document prior to applying this mutation batch.
 * @param serverTransformResults The transform results received by the server.
 * @return The transform results list.
 */
        function(t, e, n) {
            var r = [];
            C(t.length === n.length);
            for (var i = 0; i < n.length; i++) {
                var o = t[i], u = o.transform, s = null;
                e instanceof xn && (s = e.field(o.field)), r.push(He(u, s, n[i]));
            }
            return r;
        }(t.fieldTransforms, e, n.transformResults), o = n.version, u = _n(t, r.data(), i);
        return new xn(t.key, o, u, {
            hasCommittedMutations: !0
        });
    }(t, e, n) : function(t, e, n) {
        // Unlike applyToLocalView, if we're applying a mutation to a remote
        // document the server has accepted the mutation so the precondition must
        // have held.
        return new kn(t.key, n.version, {
            hasCommittedMutations: !0
        });
    }(t, 0, n);
}

/**
 * Applies this mutation to the given MaybeDocument or null for the purposes
 * of computing the new local view of a document. Both the input and returned
 * documents can be null.
 *
 * @param mutation The mutation to apply.
 * @param maybeDoc The document to mutate. The input document can be null if
 *     the client has no knowledge of the pre-mutation state of the document.
 * @param baseDoc The state of the document prior to this mutation batch. The
 *     input document can be null if the client has no knowledge of the
 *     pre-mutation state of the document.
 * @param localWriteTime A timestamp indicating the local write time of the
 *     batch this mutation is a part of.
 * @return The mutated document. The returned document may be null, but only
 *     if maybeDoc was null and the mutation would not create a new document.
 */ function ln(t, e, n, r) {
    return t instanceof yn ? function(t, e) {
        if (!cn(t.rn, e)) return e;
        var n = vn(e);
        return new xn(t.key, n, t.value, {
            an: !0
        });
    }(t, e) : t instanceof mn ? function(t, e) {
        if (!cn(t.rn, e)) return e;
        var n = vn(e), r = gn(t, e);
        return new xn(t.key, n, r, {
            an: !0
        });
    }(t, e) : t instanceof wn ? function(t, e, n, r) {
        if (!cn(t.rn, e)) return e;
        var i = bn(t, e), o = function(t, e, n, r) {
            for (var i = [], o = 0, u = t; o < u.length; o++) {
                var s = u[o], a = s.transform, c = null;
                n instanceof xn && (c = n.field(s.field)), null === c && r instanceof xn && (
                // If the current document does not contain a value for the mutated
                // field, use the value that existed before applying this mutation
                // batch. This solves an edge case where a PatchMutation clears the
                // values in a nested map before the TransformMutation is applied.
                c = r.field(s.field)), i.push(Qe(a, c, e));
            }
            return i;
        }(t.fieldTransforms, n, e, r), u = _n(t, i.data(), o);
        return new xn(t.key, i.version, u, {
            an: !0
        });
    }(t, e, r, n) : function(t, e) {
        return cn(t.rn, e) ? new kn(t.key, H$1.min()) : e;
    }(t, e);
}

/**
 * If this mutation is not idempotent, returns the base value to persist with
 * this mutation. If a base value is returned, the mutation is always applied
 * to this base value, even if document has already been updated.
 *
 * The base value is a sparse object that consists of only the document
 * fields for which this mutation contains a non-idempotent transformation
 * (e.g. a numeric increment). The provided value guarantees consistent
 * behavior for non-idempotent transforms and allow us to return the same
 * latency-compensated value even if the backend has already applied the
 * mutation. The base value is null for idempotent mutations, as they can be
 * re-played even if the backend has already applied them.
 *
 * @return a base value to store along with the mutation, or null for
 * idempotent mutations.
 */ function pn(t, e) {
    return t instanceof wn ? function(t, e) {
        for (var n = null, r = 0, i = t.fieldTransforms; r < i.length; r++) {
            var o = i[r], u = e instanceof xn ? e.field(o.field) : void 0, s = Ye(o.transform, u || null);
            null != s && (n = null == n ? (new Nn).set(o.field, s) : n.set(o.field, s));
        }
        return n ? n.hn() : null;
    }(t, e) : null;
}

function dn(t, e) {
    return t.type === e.type && !!t.key.isEqual(e.key) && !!t.rn.isEqual(e.rn) && (0 /* Set */ === t.type ? t.value.isEqual(e.value) : 1 /* Patch */ === t.type ? t.data.isEqual(e.data) && t.en.isEqual(e.en) : 2 /* Transform */ !== t.type || K$1(t.fieldTransforms, t.fieldTransforms, (function(t, e) {
        return function(t, e) {
            return t.field.isEqual(e.field) && function(t, e) {
                return t instanceof Je && e instanceof Je || t instanceof Ze && e instanceof Ze ? K$1(t.elements, e.elements, $t) : t instanceof en && e instanceof en ? $t(t.nn, e.nn) : t instanceof $e && e instanceof $e;
            }(t.transform, e.transform);
        }(t, e);
    })));
}

/**
 * Returns the version from the given document for use as the result of a
 * mutation. Mutations are defined to return the version of the base document
 * only if it is an existing document. Deleted and unknown documents have a
 * post-mutation version of SnapshotVersion.min().
 */ function vn(t) {
    return t instanceof xn ? t.version : H$1.min();
}

/**
 * A mutation that creates or replaces the document at the given key with the
 * object value contents.
 */ var yn = /** @class */ function(e) {
    function n(t, n, r) {
        var i = this;
        return (i = e.call(this) || this).key = t, i.value = n, i.rn = r, i.type = 0 /* Set */ , 
        i;
    }
    return __extends(n, e), n;
}(hn), mn = /** @class */ function(e) {
    function n(t, n, r, i) {
        var o = this;
        return (o = e.call(this) || this).key = t, o.data = n, o.en = r, o.rn = i, o.type = 1 /* Patch */ , 
        o;
    }
    return __extends(n, e), n;
}(hn);

function gn(t, e) {
    return function(t, e) {
        var n = new Nn(e);
        return t.en.fields.forEach((function(e) {
            if (!e.W()) {
                var r = t.data.field(e);
                null !== r ? n.set(e, r) : n.delete(e);
            }
        })), n.hn();
    }(t, e instanceof xn ? e.data() : Tn.empty());
}

var wn = /** @class */ function(e) {
    function n(t, n) {
        var r = this;
        return (r = e.call(this) || this).key = t, r.fieldTransforms = n, r.type = 2 /* Transform */ , 
        // NOTE: We set a precondition of exists: true as a safety-check, since we
        // always combine TransformMutations with a SetMutation or PatchMutation which
        // (if successful) should end up with an existing document.
        r.rn = an.exists(!0), r;
    }
    return __extends(n, e), n;
}(hn);

function bn(t, e) {
    return e;
}

function _n(t, e, n) {
    for (var r = new Nn(e), i = 0; i < t.fieldTransforms.length; i++) {
        var o = t.fieldTransforms[i];
        r.set(o.field, n[i]);
    }
    return r.hn();
}

/** A mutation that deletes the document at the given key. */ var In = /** @class */ function(e) {
    function n(t, n) {
        var r = this;
        return (r = e.call(this) || this).key = t, r.rn = n, r.type = 3 /* Delete */ , r;
    }
    return __extends(n, e), n;
}(hn), En = /** @class */ function(e) {
    function n(t, n) {
        var r = this;
        return (r = e.call(this) || this).key = t, r.rn = n, r.type = 4 /* Verify */ , r;
    }
    return __extends(n, e), n;
}(hn), Tn = /** @class */ function() {
    function t(t) {
        this.proto = t;
    }
    return t.empty = function() {
        return new t({
            mapValue: {}
        });
    }, 
    /**
     * Returns the value at the given path or null.
     *
     * @param path the path to search
     * @return The value at the path or if there it doesn't exist.
     */
    t.prototype.field = function(t) {
        if (t.W()) return this.proto;
        for (var e = this.proto, n = 0; n < t.length - 1; ++n) {
            if (!e.mapValue.fields) return null;
            if (!he(e = e.mapValue.fields[t.get(n)])) return null;
        }
        return (e = (e.mapValue.fields || {})[t.K()]) || null;
    }, t.prototype.isEqual = function(t) {
        return $t(this.proto, t.proto);
    }, t;
}(), Nn = /** @class */ function() {
    /**
     * @param baseObject The object to mutate.
     */
    function t(t) {
        void 0 === t && (t = Tn.empty()), this.ln = t, 
        /** A map that contains the accumulated changes in this builder. */
        this._n = new Map;
    }
    /**
     * Sets the field to the provided value.
     *
     * @param path The field path to set.
     * @param value The value to set.
     * @return The current Builder instance.
     */    return t.prototype.set = function(t, e) {
        return this.fn(t, e), this;
    }, 
    /**
     * Removes the field at the specified path. If there is no field at the
     * specified path, nothing is changed.
     *
     * @param path The field path to remove.
     * @return The current Builder instance.
     */
    t.prototype.delete = function(t) {
        return this.fn(t, null), this;
    }, 
    /**
     * Adds `value` to the overlay map at `path`. Creates nested map entries if
     * needed.
     */
    t.prototype.fn = function(t, e) {
        for (var n = this._n, r = 0; r < t.length - 1; ++r) {
            var i = t.get(r), o = n.get(i);
            o instanceof Map ? 
            // Re-use a previously created map
            n = o : o && 10 /* ObjectValue */ === Yt(o) ? (
            // Convert the existing Protobuf MapValue into a map
            o = new Map(Object.entries(o.mapValue.fields || {})), n.set(i, o), n = o) : (
            // Create an empty map to represent the current nesting level
            o = new Map, n.set(i, o), n = o);
        }
        n.set(t.K(), e);
    }, 
    /** Returns an ObjectValue with all mutations applied. */ t.prototype.hn = function() {
        var t = this.dn(X$1.X(), this._n);
        return null != t ? new Tn(t) : this.ln;
    }, 
    /**
     * Applies any overlays from `currentOverlays` that exist at `currentPath`
     * and returns the merged data at `currentPath` (or null if there were no
     * changes).
     *
     * @param currentPath The path at the current nesting level. Can be set to
     * FieldValue.emptyPath() to represent the root.
     * @param currentOverlays The overlays at the current nesting level in the
     * same format as `overlayMap`.
     * @return The merged data at `currentPath` or null if no modifications
     * were applied.
     */
    t.prototype.dn = function(t, e) {
        var n = this, r = !1, i = this.ln.field(t), o = he(i) ? // If there is already data at the current path, base our
        Object.assign({}, i.mapValue.fields) : {};
        return e.forEach((function(e, i) {
            if (e instanceof Map) {
                var u = n.dn(t.child(i), e);
                null != u && (o[i] = u, r = !0);
            } else null !== e ? (o[i] = e, r = !0) : o.hasOwnProperty(i) && (delete o[i], r = !0);
        })), r ? {
            mapValue: {
                fields: o
            }
        } : null;
    }, t;
}();

/**
 * Returns a FieldMask built from all fields in a MapValue.
 */
function An(t) {
    var e = [];
    return Bt(t.fields || {}, (function(t, n) {
        var r = new X$1([ t ]);
        if (he(n)) {
            var i = An(n.mapValue).fields;
            if (0 === i.length) 
            // Preserve the empty map by adding it to the FieldMask.
            e.push(r); else 
            // For nested and non-empty ObjectValues, add the FieldPath of the
            // leaf nodes.
            for (var o = 0, u = i; o < u.length; o++) {
                var s = u[o];
                e.push(r.child(s));
            }
        } else 
        // For nested and non-empty ObjectValues, add the FieldPath of the leaf
        // nodes.
        e.push(r);
    })), new on(e)
    /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
    /**
 * The result of a lookup for a given path may be an existing document or a
 * marker that this document does not exist at a given version.
 */;
}

var Dn = function(t, e) {
    this.key = t, this.version = e;
}, xn = /** @class */ function(e) {
    function n(t, n, r, i) {
        var o = this;
        return (o = e.call(this, t, n) || this).wn = r, o.an = !!i.an, o.hasCommittedMutations = !!i.hasCommittedMutations, 
        o;
    }
    return __extends(n, e), n.prototype.field = function(t) {
        return this.wn.field(t);
    }, n.prototype.data = function() {
        return this.wn;
    }, n.prototype.En = function() {
        return this.wn.proto;
    }, n.prototype.isEqual = function(t) {
        return t instanceof n && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.an === t.an && this.hasCommittedMutations === t.hasCommittedMutations && this.wn.isEqual(t.wn);
    }, n.prototype.toString = function() {
        return "Document(" + this.key + ", " + this.version + ", " + this.wn.toString() + ", {hasLocalMutations: " + this.an + "}), {hasCommittedMutations: " + this.hasCommittedMutations + "})";
    }, Object.defineProperty(n.prototype, "hasPendingWrites", {
        get: function() {
            return this.an || this.hasCommittedMutations;
        },
        enumerable: !1,
        configurable: !0
    }), n;
}(Dn), kn = /** @class */ function(e) {
    function n(t, n, r) {
        var i = this;
        return (i = e.call(this, t, n) || this).hasCommittedMutations = !(!r || !r.hasCommittedMutations), 
        i;
    }
    return __extends(n, e), n.prototype.toString = function() {
        return "NoDocument(" + this.key + ", " + this.version + ")";
    }, Object.defineProperty(n.prototype, "hasPendingWrites", {
        get: function() {
            return this.hasCommittedMutations;
        },
        enumerable: !1,
        configurable: !0
    }), n.prototype.isEqual = function(t) {
        return t instanceof n && t.hasCommittedMutations === this.hasCommittedMutations && t.version.isEqual(this.version) && t.key.isEqual(this.key);
    }, n;
}(Dn), On = /** @class */ function(e) {
    function n() {
        return null !== e && e.apply(this, arguments) || this;
    }
    return __extends(n, e), n.prototype.toString = function() {
        return "UnknownDocument(" + this.key + ", " + this.version + ")";
    }, Object.defineProperty(n.prototype, "hasPendingWrites", {
        get: function() {
            return !0;
        },
        enumerable: !1,
        configurable: !0
    }), n.prototype.isEqual = function(t) {
        return t instanceof n && t.version.isEqual(this.version) && t.key.isEqual(this.key);
    }, n;
}(Dn), Sn = 
/**
     * Initializes a Query with a path and optional additional query constraints.
     * Path must currently be empty if this is a collection group query.
     */
function(t, e, n, r, i, o /* First */ , u, s) {
    void 0 === e && (e = null), void 0 === n && (n = []), void 0 === r && (r = []), 
    void 0 === i && (i = null), void 0 === o && (o = "F"), void 0 === u && (u = null), 
    void 0 === s && (s = null), this.path = t, this.collectionGroup = e, this.Tn = n, 
    this.filters = r, this.limit = i, this.limitType = o, this.startAt = u, this.endAt = s, 
    this.In = null, 
    // The corresponding `Target` of this `Query` instance.
    this.mn = null, this.startAt, this.endAt;
};

/**
 * Represents a document in Firestore with a key, version, data and whether the
 * data has local mutations applied to it.
 */
/** Creates a new Query instance with the options provided. */ function Pn(t, e, n, r, i, o, u, s) {
    return new Sn(t, e, n, r, i, o, u, s);
}

/** Creates a new Query for a query that matches all documents at `path` */ function Cn(t) {
    return new Sn(t);
}

/**
 * Helper to convert a collection group query into a collection query at a
 * specific path. This is used when executing collection group queries, since
 * we have to split the query into a set of collection queries at multiple
 * paths.
 */ function Rn(t) {
    return !tt(t.limit) && "F" /* First */ === t.limitType;
}

function Vn(t) {
    return !tt(t.limit) && "L" /* Last */ === t.limitType;
}

function Ln(t) {
    return t.Tn.length > 0 ? t.Tn[0].field : null;
}

function Un(t) {
    for (var e = 0, n = t.filters; e < n.length; e++) {
        var r = n[e];
        if (r.An()) return r.field;
    }
    return null;
}

/**
 * Checks if any of the provided Operators are included in the query and
 * returns the first one that is, or null if none are.
 */
/**
 * Returns whether the query matches a collection group rather than a specific
 * collection.
 */ function Mn(t) {
    return null !== t.collectionGroup;
}

/**
 * Returns the implicit order by constraint that is used to execute the Query,
 * which can be different from the order by constraints the user provided (e.g.
 * the SDK and backend always orders by `__name__`).
 */ function qn(t) {
    var e = R$1(t);
    if (null === e.In) {
        e.In = [];
        var n = Un(e), r = Ln(e);
        if (null !== n && null === r) 
        // In order to implicitly add key ordering, we must also add the
        // inequality filter field for it to be a valid query.
        // Note that the default inequality field and key ordering is ascending.
        n.tt() || e.In.push(new ur(n)), e.In.push(new ur(X$1.et(), "asc" /* ASCENDING */)); else {
            for (var i = !1, o = 0, u = e.Tn; o < u.length; o++) {
                var s = u[o];
                e.In.push(s), s.field.tt() && (i = !0);
            }
            if (!i) {
                // The order of the implicit key ordering always matches the last
                // explicit order by
                var a = e.Tn.length > 0 ? e.Tn[e.Tn.length - 1].dir : "asc" /* ASCENDING */;
                e.In.push(new ur(X$1.et(), a));
            }
        }
    }
    return e.In;
}

/**
 * Converts this `Query` instance to it's corresponding `Target` representation.
 */ function jn(t) {
    var e = R$1(t);
    if (!e.mn) if ("F" /* First */ === e.limitType) e.mn = it(e.path, e.collectionGroup, qn(e), e.filters, e.limit, e.startAt, e.endAt); else {
        for (
        // Flip the orderBy directions since we want the last results
        var n = [], r = 0, i = qn(e); r < i.length; r++) {
            var o = i[r], u = "desc" /* DESCENDING */ === o.dir ? "asc" /* ASCENDING */ : "desc" /* DESCENDING */;
            n.push(new ur(o.field, u));
        }
        // We need to swap the cursors to match the now-flipped query ordering.
                var s = e.endAt ? new nr(e.endAt.position, !e.endAt.before) : null, a = e.startAt ? new nr(e.startAt.position, !e.startAt.before) : null;
        // Now return as a LimitType.First query.
                e.mn = it(e.path, e.collectionGroup, n, e.filters, e.limit, s, a);
    }
    return e.mn;
}

function Fn(t, e, n) {
    return new Sn(t.path, t.collectionGroup, t.Tn.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);
}

function zn(t, e) {
    return ut(jn(t), jn(e)) && t.limitType === e.limitType;
}

// TODO(b/29183165): This is used to get a unique string from a query to, for
// example, use as a dictionary key, but the implementation is subject to
// collisions. Make it collision-free.
function Bn(t) {
    return ot(jn(t)) + "|lt:" + t.limitType;
}

function Gn(t) {
    return "Query(target=" + function(t) {
        var e = t.path.J();
        return null !== t.collectionGroup && (e += " collectionGroup=" + t.collectionGroup), 
        t.filters.length > 0 && (e += ", filters: [" + t.filters.map((function(t) {
            return (e = t).field.J() + " " + e.op + " " + te(e.value);
            /** Returns a debug description for `filter`. */            var e;
            /** Filter that matches on key fields (i.e. '__name__'). */        })).join(", ") + "]"), 
        tt(t.limit) || (e += ", limit: " + t.limit), t.orderBy.length > 0 && (e += ", orderBy: [" + t.orderBy.map((function(t) {
            return function(t) {
                return t.field.J() + " (" + t.dir + ")";
            }(t);
        })).join(", ") + "]"), t.startAt && (e += ", startAt: " + rr(t.startAt)), t.endAt && (e += ", endAt: " + rr(t.endAt)), 
        "Target(" + e + ")";
    }(jn(t)) + "; limitType=" + t.limitType + ")";
}

/** Returns whether `doc` matches the constraints of `query`. */ function Kn(t, e) {
    return function(t, e) {
        var n = e.key.path;
        return null !== t.collectionGroup ? e.key.rt(t.collectionGroup) && t.path.j(n) : Z$1.ot(t.path) ? t.path.isEqual(n) : t.path.G(n);
    }(t, e) && function(t, e) {
        for (var n = 0, r = t.Tn; n < r.length; n++) {
            var i = r[n];
            // order by key always matches
                        if (!i.field.tt() && null === e.field(i.field)) return !1;
        }
        return !0;
    }(t, e) && function(t, e) {
        for (var n = 0, r = t.filters; n < r.length; n++) {
            if (!r[n].matches(e)) return !1;
        }
        return !0;
    }(t, e) && function(t, e) {
        return !(t.startAt && !ir(t.startAt, qn(t), e)) && (!t.endAt || !ir(t.endAt, qn(t), e));
    }(t, e);
}

function Wn(t) {
    return function(e, n) {
        for (var r = !1, i = 0, o = qn(t); i < o.length; i++) {
            var u = o[i], s = sr(u, e, n);
            if (0 !== s) return s;
            r = r || u.field.tt();
        }
        return 0;
    };
}

var Qn = /** @class */ function(e) {
    function n(t, n, r) {
        var i = this;
        return (i = e.call(this) || this).field = t, i.op = n, i.value = r, i;
    }
    /**
     * Creates a filter based on the provided arguments.
     */    return __extends(n, e), n.create = function(t, e, r) {
        return t.tt() ? "in" /* IN */ === e || "not-in" /* NOT_IN */ === e ? this.Rn(t, e, r) : new Hn(t, e, r) : "array-contains" /* ARRAY_CONTAINS */ === e ? new Xn(t, r) : "in" /* IN */ === e ? new Zn(t, r) : "not-in" /* NOT_IN */ === e ? new tr(t, r) : "array-contains-any" /* ARRAY_CONTAINS_ANY */ === e ? new er(t, r) : new n(t, e, r);
    }, n.Rn = function(t, e, n) {
        return "in" /* IN */ === e ? new Yn(t, n) : new $n(t, n);
    }, n.prototype.matches = function(t) {
        var e = t.field(this.field);
        // Types do not have to match in NOT_EQUAL filters.
                return "!=" /* NOT_EQUAL */ === this.op ? null !== e && this.Pn(Xt(e, this.value)) : null !== e && Yt(this.value) === Yt(e) && this.Pn(Xt(e, this.value));
        // Only compare types with matching backend order (such as double and int).
        }, n.prototype.Pn = function(t) {
        switch (this.op) {
          case "<" /* LESS_THAN */ :
            return t < 0;

          case "<=" /* LESS_THAN_OR_EQUAL */ :
            return t <= 0;

          case "==" /* EQUAL */ :
            return 0 === t;

          case "!=" /* NOT_EQUAL */ :
            return 0 !== t;

          case ">" /* GREATER_THAN */ :
            return t > 0;

          case ">=" /* GREATER_THAN_OR_EQUAL */ :
            return t >= 0;

          default:
            return P$1();
        }
    }, n.prototype.An = function() {
        return [ "<" /* LESS_THAN */ , "<=" /* LESS_THAN_OR_EQUAL */ , ">" /* GREATER_THAN */ , ">=" /* GREATER_THAN_OR_EQUAL */ , "!=" /* NOT_EQUAL */ , "not-in" /* NOT_IN */ ].indexOf(this.op) >= 0;
    }, n;
}((function() {}));

var Hn = /** @class */ function(e) {
    function n(t, n, r) {
        var i = this;
        return (i = e.call(this, t, n, r) || this).key = Z$1.it(r.referenceValue), i;
    }
    return __extends(n, e), n.prototype.matches = function(t) {
        var e = Z$1.$(t.key, this.key);
        return this.Pn(e);
    }, n;
}(Qn), Yn = /** @class */ function(e) {
    function n(t, n) {
        var r = this;
        return (r = e.call(this, t, "in" /* IN */ , n) || this).keys = Jn("in" /* IN */ , n), 
        r;
    }
    return __extends(n, e), n.prototype.matches = function(t) {
        return this.keys.some((function(e) {
            return e.isEqual(t.key);
        }));
    }, n;
}(Qn), $n = /** @class */ function(e) {
    function n(t, n) {
        var r = this;
        return (r = e.call(this, t, "not-in" /* NOT_IN */ , n) || this).keys = Jn("not-in" /* NOT_IN */ , n), 
        r;
    }
    return __extends(n, e), n.prototype.matches = function(t) {
        return !this.keys.some((function(e) {
            return e.isEqual(t.key);
        }));
    }, n;
}(Qn);

/** Filter that matches on key fields within an array. */ function Jn(t, e) {
    var n;
    return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map((function(t) {
        return Z$1.it(t.referenceValue);
    }));
}

/** A Filter that implements the array-contains operator. */ var Xn = /** @class */ function(e) {
    function n(t, n) {
        return e.call(this, t, "array-contains" /* ARRAY_CONTAINS */ , n) || this;
    }
    return __extends(n, e), n.prototype.matches = function(t) {
        var e = t.field(this.field);
        return se(e) && Jt(e.arrayValue, this.value);
    }, n;
}(Qn), Zn = /** @class */ function(e) {
    function n(t, n) {
        return e.call(this, t, "in" /* IN */ , n) || this;
    }
    return __extends(n, e), n.prototype.matches = function(t) {
        var e = t.field(this.field);
        return null !== e && Jt(this.value.arrayValue, e);
    }, n;
}(Qn), tr = /** @class */ function(e) {
    function n(t, n) {
        return e.call(this, t, "not-in" /* NOT_IN */ , n) || this;
    }
    return __extends(n, e), n.prototype.matches = function(t) {
        if (Jt(this.value.arrayValue, {
            nullValue: "NULL_VALUE"
        })) return !1;
        var e = t.field(this.field);
        return null !== e && !Jt(this.value.arrayValue, e);
    }, n;
}(Qn), er = /** @class */ function(e) {
    function n(t, n) {
        return e.call(this, t, "array-contains-any" /* ARRAY_CONTAINS_ANY */ , n) || this;
    }
    return __extends(n, e), n.prototype.matches = function(t) {
        var e = this, n = t.field(this.field);
        return !(!se(n) || !n.arrayValue.values) && n.arrayValue.values.some((function(t) {
            return Jt(e.value.arrayValue, t);
        }));
    }, n;
}(Qn), nr = function(t, e) {
    this.position = t, this.before = e;
};

/** A Filter that implements the IN operator. */ function rr(t) {
    // TODO(b/29183165): Make this collision robust.
    return (t.before ? "b" : "a") + ":" + t.position.map((function(t) {
        return te(t);
    })).join(",");
}

/**
 * Returns true if a document sorts before a bound using the provided sort
 * order.
 */ function ir(t, e, n) {
    for (var r = 0, i = 0; i < t.position.length; i++) {
        var o = e[i], u = t.position[i];
        if (r = o.field.tt() ? Z$1.$(Z$1.it(u.referenceValue), n.key) : Xt(u, n.field(o.field)), 
        "desc" /* DESCENDING */ === o.dir && (r *= -1), 0 !== r) break;
    }
    return t.before ? r <= 0 : r < 0;
}

function or(t, e) {
    if (null === t) return null === e;
    if (null === e) return !1;
    if (t.before !== e.before || t.position.length !== e.position.length) return !1;
    for (var n = 0; n < t.position.length; n++) if (!$t(t.position[n], e.position[n])) return !1;
    return !0;
}

/**
 * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
 */ var ur = function(t, e /* ASCENDING */) {
    void 0 === e && (e = "asc"), this.field = t, this.dir = e;
};

function sr(t, e, n) {
    var r = t.field.tt() ? Z$1.$(e.key, n.key) : function(t, e, n) {
        var r = e.field(t), i = n.field(t);
        return null !== r && null !== i ? Xt(r, i) : P$1();
    }(t.field, e, n);
    switch (t.dir) {
      case "asc" /* ASCENDING */ :
        return r;

      case "desc" /* DESCENDING */ :
        return -1 * r;

      default:
        return P$1();
    }
}

function ar(t, e) {
    return t.dir === e.dir && t.field.isEqual(e.field);
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * A batch of mutations that will be sent as one unit to the backend.
 */ var cr = /** @class */ function() {
    /**
     * @param batchId The unique ID of this mutation batch.
     * @param localWriteTime The original write time of this mutation.
     * @param baseMutations Mutations that are used to populate the base
     * values when this mutation is applied locally. This can be used to locally
     * overwrite values that are persisted in the remote document cache. Base
     * mutations are never sent to the backend.
     * @param mutations The user-provided mutations in this mutation batch.
     * User-provided mutations are applied both locally and remotely on the
     * backend.
     */
    function t(t, e, n, r) {
        this.batchId = t, this.gn = e, this.baseMutations = n, this.mutations = r
        /**
     * Applies all the mutations in this MutationBatch to the specified document
     * to create a new remote document
     *
     * @param docKey The key of the document to apply mutations to.
     * @param maybeDoc The document to apply mutations to.
     * @param batchResult The result of applying the MutationBatch to the
     * backend.
     */;
    }
    return t.prototype.yn = function(t, e, n) {
        for (var r = n.Vn, i = 0; i < this.mutations.length; i++) {
            var o = this.mutations[i];
            o.key.isEqual(t) && (e = fn(o, e, r[i]));
        }
        return e;
    }, 
    /**
     * Computes the local view of a document given all the mutations in this
     * batch.
     *
     * @param docKey The key of the document to apply mutations to.
     * @param maybeDoc The document to apply mutations to.
     */
    t.prototype.pn = function(t, e) {
        // First, apply the base state. This allows us to apply non-idempotent
        // transform against a consistent set of values.
        for (var n = 0, r = this.baseMutations; n < r.length; n++) {
            var i = r[n];
            i.key.isEqual(t) && (e = ln(i, e, e, this.gn));
        }
        // Second, apply all user-provided mutations.
        for (var o = e, u = 0, s = this.mutations; u < s.length; u++) {
            var a = s[u];
            a.key.isEqual(t) && (e = ln(a, e, o, this.gn));
        }
        return e;
    }, 
    /**
     * Computes the local view for all provided documents given the mutations in
     * this batch.
     */
    t.prototype.vn = function(t) {
        var e = this, n = t;
        // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
        // directly (as done in `applyToLocalView()`), we can reduce the complexity
        // to O(n).
                return this.mutations.forEach((function(r) {
            var i = e.pn(r.key, t.get(r.key));
            i && (n = n.Tt(r.key, i));
        })), n;
    }, t.prototype.keys = function() {
        return this.mutations.reduce((function(t, e) {
            return t.add(e.key);
        }), Dt());
    }, t.prototype.isEqual = function(t) {
        return this.batchId === t.batchId && K$1(this.mutations, t.mutations, (function(t, e) {
            return dn(t, e);
        })) && K$1(this.baseMutations, t.baseMutations, (function(t, e) {
            return dn(t, e);
        }));
    }, t;
}(), hr = /** @class */ function() {
    function t(t, e, n, 
    /**
     * A pre-computed mapping from each mutated document to the resulting
     * version.
     */
    r) {
        this.batch = t, this.bn = e, this.Vn = n, this.Sn = r
        /**
     * Creates a new MutationBatchResult for the given batch and results. There
     * must be one result for each mutation in the batch. This static factory
     * caches a document=>version mapping (docVersions).
     */;
    }
    return t.from = function(e, n, r) {
        C(e.mutations.length === r.length);
        for (var i = Nt, o = e.mutations, u = 0; u < o.length; u++) i = i.Tt(o[u].key, r[u].version);
        return new t(e, n, r, i);
    }, t;
}(), fr = /** @class */ function() {
    function t(t, e) {
        this.Dn = t, this.Cn = e, 
        /**
             * The inner map for a key -> value pair. Due to the possibility of
             * collisions we keep a list of entries that we do a linear search through
             * to find an actual match. Note that collisions should be rare, so we still
             * expect near constant time lookups in practice.
             */
        this.Nn = {}
        /** Get a value for this key, or undefined if it does not exist. */;
    }
    return t.prototype.get = function(t) {
        var e = this.Dn(t), n = this.Nn[e];
        if (void 0 !== n) for (var r = 0, i = n; r < i.length; r++) {
            var o = i[r], u = o[0], s = o[1];
            if (this.Cn(u, t)) return s;
        }
    }, t.prototype.has = function(t) {
        return void 0 !== this.get(t);
    }, 
    /** Put this key and value in the map. */ t.prototype.set = function(t, e) {
        var n = this.Dn(t), r = this.Nn[n];
        if (void 0 !== r) {
            for (var i = 0; i < r.length; i++) if (this.Cn(r[i][0], t)) return void (r[i] = [ t, e ]);
            r.push([ t, e ]);
        } else this.Nn[n] = [ [ t, e ] ];
    }, 
    /**
     * Remove this key from the map. Returns a boolean if anything was deleted.
     */
    t.prototype.delete = function(t) {
        var e = this.Dn(t), n = this.Nn[e];
        if (void 0 === n) return !1;
        for (var r = 0; r < n.length; r++) if (this.Cn(n[r][0], t)) return 1 === n.length ? delete this.Nn[e] : n.splice(r, 1), 
        !0;
        return !1;
    }, t.prototype.forEach = function(t) {
        Bt(this.Nn, (function(e, n) {
            for (var r = 0, i = n; r < i.length; r++) {
                var o = i[r], u = o[0], s = o[1];
                t(u, s);
            }
        }));
    }, t.prototype.W = function() {
        return Gt(this.Nn);
    }, t;
}(), lr = /** @class */ function() {
    function t(t) {
        var e = this;
        // NOTE: next/catchCallback will always point to our own wrapper functions,
        // not the user's raw next() or catch() callbacks.
                this.xn = null, this.Fn = null, 
        // When the operation resolves, we'll set result or error and mark isDone.
        this.result = void 0, this.error = void 0, this.On = !1, 
        // Set to true when .then() or .catch() are called and prevents additional
        // chaining.
        this.Mn = !1, t((function(t) {
            e.On = !0, e.result = t, e.xn && 
            // value should be defined unless T is Void, but we can't express
            // that in the type system.
            e.xn(t);
        }), (function(t) {
            e.On = !0, e.error = t, e.Fn && e.Fn(t);
        }));
    }
    return t.prototype.catch = function(t) {
        return this.next(void 0, t);
    }, t.prototype.next = function(e, n) {
        var r = this;
        return this.Mn && P$1(), this.Mn = !0, this.On ? this.error ? this.kn(n, this.error) : this.$n(e, this.result) : new t((function(t, i) {
            r.xn = function(n) {
                r.$n(e, n).next(t, i);
            }, r.Fn = function(e) {
                r.kn(n, e).next(t, i);
            };
        }));
    }, t.prototype.Ln = function() {
        var t = this;
        return new Promise((function(e, n) {
            t.next(e, n);
        }));
    }, t.prototype.Bn = function(e) {
        try {
            var n = e();
            return n instanceof t ? n : t.resolve(n);
        } catch (e) {
            return t.reject(e);
        }
    }, t.prototype.$n = function(e, n) {
        return e ? this.Bn((function() {
            return e(n);
        })) : t.resolve(n);
    }, t.prototype.kn = function(e, n) {
        return e ? this.Bn((function() {
            return e(n);
        })) : t.reject(n);
    }, t.resolve = function(e) {
        return new t((function(t, n) {
            t(e);
        }));
    }, t.reject = function(e) {
        return new t((function(t, n) {
            n(e);
        }));
    }, t.qn = function(
    // Accept all Promise types in waitFor().
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    e) {
        return new t((function(t, n) {
            var r = 0, i = 0, o = !1;
            e.forEach((function(e) {
                ++r, e.next((function() {
                    ++i, o && i === r && t();
                }), (function(t) {
                    return n(t);
                }));
            })), o = !0, i === r && t();
        }));
    }, 
    /**
     * Given an array of predicate functions that asynchronously evaluate to a
     * boolean, implements a short-circuiting `or` between the results. Predicates
     * will be evaluated until one of them returns `true`, then stop. The final
     * result will be whether any of them returned `true`.
     */
    t.Un = function(e) {
        for (var n = t.resolve(!1), r = function(e) {
            n = n.next((function(n) {
                return n ? t.resolve(n) : e();
            }));
        }, i = 0, o = e; i < o.length; i++) {
            r(o[i]);
        }
        return n;
    }, t.forEach = function(t, e) {
        var n = this, r = [];
        return t.forEach((function(t, i) {
            r.push(e.call(n, t, i));
        })), this.qn(r);
    }, t;
}(), pr = /** @class */ function() {
    function t() {
        // A mapping of document key to the new cache entry that should be written (or null if any
        // existing cache entry should be removed).
        this.Qn = new fr((function(t) {
            return t.toString();
        }), (function(t, e) {
            return t.isEqual(e);
        })), this.Kn = !1;
    }
    return t.prototype.Wn = function(t) {
        var e = this.Qn.get(t);
        return e ? e.readTime : H$1.min();
    }, 
    /**
     * Buffers a `RemoteDocumentCache.addEntry()` call.
     *
     * You can only modify documents that have already been retrieved via
     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
     */
    t.prototype.jn = function(t, e) {
        this.Gn(), this.Qn.set(t.key, {
            zn: t,
            readTime: e
        });
    }, 
    /**
     * Buffers a `RemoteDocumentCache.removeEntry()` call.
     *
     * You can only remove documents that have already been retrieved via
     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
     */
    t.prototype.Hn = function(t, e) {
        void 0 === e && (e = null), this.Gn(), this.Qn.set(t, {
            zn: null,
            readTime: e
        });
    }, 
    /**
     * Looks up an entry in the cache. The buffered changes will first be checked,
     * and if no buffered change applies, this will forward to
     * `RemoteDocumentCache.getEntry()`.
     *
     * @param transaction The transaction in which to perform any persistence
     *     operations.
     * @param documentKey The key of the entry to look up.
     * @return The cached Document or NoDocument entry, or null if we have nothing
     * cached.
     */
    t.prototype.Jn = function(t, e) {
        this.Gn();
        var n = this.Qn.get(e);
        return void 0 !== n ? lr.resolve(n.zn) : this.Yn(t, e);
    }, 
    /**
     * Looks up several entries in the cache, forwarding to
     * `RemoteDocumentCache.getEntry()`.
     *
     * @param transaction The transaction in which to perform any persistence
     *     operations.
     * @param documentKeys The keys of the entries to look up.
     * @return A map of cached `Document`s or `NoDocument`s, indexed by key. If an
     *     entry cannot be found, the corresponding key will be mapped to a null
     *     value.
     */
    t.prototype.getEntries = function(t, e) {
        return this.Xn(t, e);
    }, 
    /**
     * Applies buffered changes to the underlying RemoteDocumentCache, using
     * the provided transaction.
     */
    t.prototype.apply = function(t) {
        return this.Gn(), this.Kn = !0, this.Zn(t);
    }, 
    /** Helper to assert this.changes is not null  */ t.prototype.Gn = function() {}, 
    t;
}(), dr = function() {
    var t = this;
    this.promise = new Promise((function(e, n) {
        t.resolve = e, t.reject = n;
    }));
};

/** The result of applying a mutation batch to the backend. */
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function vr(t) {
    return new pe(t, /* useProto3Json= */ !0);
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function yr(t) {
    /**
 * Returns true if obj is an object and contains at least one of the specified
 * methods.
 */
    return function(t, e) {
        if ("object" != typeof t || null === t) return !1;
        for (var n = t, r = 0, i = [ "next", "error", "complete" ]; r < i.length; r++) {
            var o = i[r];
            if (o in n && "function" == typeof n[o]) return !0;
        }
        return !1;
    }(t);
}

var mr = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.", gr = /** @class */ function() {
    function t() {
        this.ts = [];
    }
    return t.prototype.es = function(t) {
        this.ts.push(t);
    }, t.prototype.ns = function() {
        this.ts.forEach((function(t) {
            return t();
        }));
    }, t;
}(), wr = /** @class */ function() {
    function t(t, e, n) {
        this.ss = t, this.rs = e, this.os = n
        /**
     * Get the local view of the document identified by `key`.
     *
     * @return Local view of the document or null if we don't have any cached
     * state for it.
     */;
    }
    return t.prototype.cs = function(t, e) {
        var n = this;
        return this.rs.us(t, e).next((function(r) {
            return n.hs(t, e, r);
        }));
    }, 
    /** Internal version of `getDocument` that allows reusing batches. */ t.prototype.hs = function(t, e, n) {
        return this.ss.Jn(t, e).next((function(t) {
            for (var r = 0, i = n; r < i.length; r++) {
                t = i[r].pn(e, t);
            }
            return t;
        }));
    }, 
    // Returns the view of the given `docs` as they would appear after applying
    // all mutations in the given `batches`.
    t.prototype.ls = function(t, e, n) {
        var r = It();
        return e.forEach((function(t, e) {
            for (var i = 0, o = n; i < o.length; i++) {
                e = o[i].pn(t, e);
            }
            r = r.Tt(t, e);
        })), r;
    }, 
    /**
     * Gets the local view of the documents identified by `keys`.
     *
     * If we don't have cached state for a document in `keys`, a NoDocument will
     * be stored for that key in the resulting set.
     */
    t.prototype._s = function(t, e) {
        var n = this;
        return this.ss.getEntries(t, e).next((function(e) {
            return n.fs(t, e);
        }));
    }, 
    /**
     * Similar to `getDocuments`, but creates the local view from the given
     * `baseDocs` without retrieving documents from the local store.
     */
    t.prototype.fs = function(t, e) {
        var n = this;
        return this.rs.ds(t, e).next((function(r) {
            var i = n.ls(t, e, r), o = _t();
            return i.forEach((function(t, e) {
                // TODO(http://b/32275378): Don't conflate missing / deleted.
                e || (e = new kn(t, H$1.min())), o = o.Tt(t, e);
            })), o;
        }));
    }, 
    /**
     * Performs a query against the local view of all documents.
     *
     * @param transaction The persistence transaction.
     * @param query The query to match documents against.
     * @param sinceReadTime If not set to SnapshotVersion.min(), return only
     *     documents that have been read since this snapshot version (exclusive).
     */
    t.prototype.ws = function(t, e, n) {
        /**
 * Returns whether the query matches a single document by path (rather than a
 * collection).
 */
        return function(t) {
            return Z$1.ot(t.path) && null === t.collectionGroup && 0 === t.filters.length;
        }(e) ? this.Es(t, e.path) : Mn(e) ? this.Ts(t, e, n) : this.Is(t, e, n);
    }, t.prototype.Es = function(t, e) {
        // Just do a simple document lookup.
        return this.cs(t, new Z$1(e)).next((function(t) {
            var e = Tt();
            return t instanceof xn && (e = e.Tt(t.key, t)), e;
        }));
    }, t.prototype.Ts = function(t, e, n) {
        var r = this, i = e.collectionGroup, o = Tt();
        return this.os.As(t, i).next((function(u) {
            return lr.forEach(u, (function(u) {
                var s = function(t, e) {
                    return new Sn(e, 
                    /*collectionGroup=*/ null, t.Tn.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
                }(e, u.child(i));
                return r.Is(t, s, n).next((function(t) {
                    t.forEach((function(t, e) {
                        o = o.Tt(t, e);
                    }));
                }));
            })).next((function() {
                return o;
            }));
        }));
    }, t.prototype.Is = function(t, e, n) {
        var r, i, o = this;
        // Query the remote documents and overlay mutations.
                return this.ss.ws(t, e, n).next((function(n) {
            return r = n, o.rs.Rs(t, e);
        })).next((function(e) {
            return i = e, o.Ps(t, i, r).next((function(t) {
                r = t;
                for (var e = 0, n = i; e < n.length; e++) for (var o = n[e], u = 0, s = o.mutations; u < s.length; u++) {
                    var a = s[u], c = a.key, h = r.get(c), f = ln(a, h, h, o.gn);
                    r = f instanceof xn ? r.Tt(c, f) : r.remove(c);
                }
            }));
        })).next((function() {
            // Finally, filter out any documents that don't actually match
            // the query.
            return r.forEach((function(t, n) {
                Kn(e, n) || (r = r.remove(t));
            })), r;
        }));
    }, t.prototype.Ps = function(t, e, n) {
        for (var r = Dt(), i = 0, o = e; i < o.length; i++) for (var u = 0, s = o[i].mutations; u < s.length; u++) {
            var a = s[u];
            a instanceof mn && null === n.get(a.key) && (r = r.add(a.key));
        }
        var c = n;
        return this.ss.getEntries(t, r).next((function(t) {
            return t.forEach((function(t, e) {
                null !== e && e instanceof xn && (c = c.Tt(t, e));
            })), c;
        }));
    }, t;
}(), br = /** @class */ function() {
    function t(t, e, n, r) {
        this.targetId = t, this.fromCache = e, this.gs = n, this.ys = r;
    }
    return t.Vs = function(e, n) {
        for (var r = Dt(), i = Dt(), o = 0, u = n.docChanges; o < u.length; o++) {
            var s = u[o];
            switch (s.type) {
              case 0 /* Added */ :
                r = r.add(s.doc.key);
                break;

              case 1 /* Removed */ :
                i = i.add(s.doc.key);
                // do nothing
                        }
        }
        return new t(e, n.fromCache, r, i);
    }, t;
}(), _r = /** @class */ function() {
    function t(t, e) {
        var n = this;
        this.previousValue = t, e && (e.ps = function(t) {
            return n.vs(t);
        }, this.bs = function(t) {
            return e.Ss(t);
        });
    }
    return t.prototype.vs = function(t) {
        return this.previousValue = Math.max(t, this.previousValue), this.previousValue;
    }, t.prototype.next = function() {
        var t = ++this.previousValue;
        return this.bs && this.bs(t), t;
    }, t;
}();

/**
 * A base class representing a persistence transaction, encapsulating both the
 * transaction's sequence numbers as well as a list of onCommitted listeners.
 *
 * When you call Persistence.runTransaction(), it will create a transaction and
 * pass it to your callback. You then pass it to any method that operates
 * on persistence.
 */ _r.Ds = -1;

/**
 * A helper for running delayed tasks following an exponential backoff curve
 * between attempts.
 *
 * Each delay is made up of a "base" delay which follows the exponential
 * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
 * base delay. This prevents clients from accidentally synchronizing their
 * delays causing spikes of load to the backend.
 */
var Ir = /** @class */ function() {
    function t(
    /**
     * The AsyncQueue to run backoff operations on.
     */
    t, 
    /**
     * The ID to use when scheduling backoff operations on the AsyncQueue.
     */
    e, 
    /**
     * The initial delay (used as the base delay on the first retry attempt).
     * Note that jitter will still be applied, so the actual delay could be as
     * little as 0.5*initialDelayMs.
     */
    n
    /**
     * The multiplier to use to determine the extended base delay after each
     * attempt.
     */ , r
    /**
     * The maximum base delay after which no further backoff is performed.
     * Note that jitter will still be applied, so the actual delay could be as
     * much as 1.5*maxDelayMs.
     */ , i) {
        void 0 === n && (n = 1e3), void 0 === r && (r = 1.5), void 0 === i && (i = 6e4), 
        this.Cs = t, this.Ns = e, this.xs = n, this.Fs = r, this.Os = i, this.Ms = 0, this.ks = null, 
        /** The last backoff attempt, as epoch milliseconds. */
        this.$s = Date.now(), this.reset();
    }
    /**
     * Resets the backoff delay.
     *
     * The very next backoffAndWait() will have no delay. If it is called again
     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
     * subsequent ones will increase according to the backoffFactor.
     */    return t.prototype.reset = function() {
        this.Ms = 0;
    }, 
    /**
     * Resets the backoff delay to the maximum delay (e.g. for use after a
     * RESOURCE_EXHAUSTED error).
     */
    t.prototype.Ls = function() {
        this.Ms = this.Os;
    }, 
    /**
     * Returns a promise that resolves after currentDelayMs, and increases the
     * delay for any subsequent attempts. If there was a pending backoff operation
     * already, it will be canceled.
     */
    t.prototype.Bs = function(t) {
        var e = this;
        // Cancel any pending backoff operation.
                this.cancel();
        // First schedule using the current base (which may be 0 and should be
        // honored as such).
        var n = Math.floor(this.Ms + this.qs()), r = Math.max(0, Date.now() - this.$s), i = Math.max(0, n - r);
        // Guard against lastAttemptTime being in the future due to a clock change.
                i > 0 && x$1("ExponentialBackoff", "Backing off for " + i + " ms (base delay: " + this.Ms + " ms, delay with jitter: " + n + " ms, last attempt: " + r + " ms ago)"), 
        this.ks = this.Cs.Us(this.Ns, i, (function() {
            return e.$s = Date.now(), t();
        })), 
        // Apply backoff factor to determine next delay and ensure it is within
        // bounds.
        this.Ms *= this.Fs, this.Ms < this.xs && (this.Ms = this.xs), this.Ms > this.Os && (this.Ms = this.Os);
    }, t.prototype.Qs = function() {
        null !== this.ks && (this.ks.Ks(), this.ks = null);
    }, t.prototype.cancel = function() {
        null !== this.ks && (this.ks.cancel(), this.ks = null);
    }, 
    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */ t.prototype.qs = function() {
        return (Math.random() - .5) * this.Ms;
    }, t;
}(), Er = /** @class */ function() {
    /*
     * Creates a new SimpleDb wrapper for IndexedDb database `name`.
     *
     * Note that `version` must not be a downgrade. IndexedDB does not support
     * downgrading the schema version. We currently do not support any way to do
     * versioning outside of IndexedDB's versioning mechanism, as only
     * version-upgrade transactions are allowed to do things like create
     * objectstores.
     */
    function t(e, n, r) {
        this.name = e, this.version = n, this.Ws = r, 
        // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the
        // bug we're checking for should exist in iOS >= 12.2 and < 13, but for
        // whatever reason it's much harder to hit after 12.2 so we only proactively
        // log on 12.2.
        12.2 === t.js(getUA()) && k$1("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
    }
    /** Deletes the specified database. */    return t.delete = function(t) {
        return x$1("SimpleDb", "Removing database:", t), kr(window.indexedDB.deleteDatabase(t)).Ln();
    }, 
    /** Returns true if IndexedDB is available in the current environment. */ t.Gs = function() {
        if ("undefined" == typeof indexedDB) return !1;
        if (t.zs()) return !0;
        // We extensively use indexed array values and compound keys,
        // which IE and Edge do not support. However, they still have indexedDB
        // defined on the window, so we need to check for them here and make sure
        // to return that persistence is not enabled for those browsers.
        // For tracking support of this feature, see here:
        // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/
        // Check the UA string to find out the browser.
                var e = getUA(), n = t.js(e), r = 0 < n && n < 10, i = t.Hs(e), o = 0 < i && i < 4.5;
        // IE 10
        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
        // IE 11
        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
        // Edge
        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,
        // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
        // iOS Safari: Disable for users running iOS version < 10.
                return !(e.indexOf("MSIE ") > 0 || e.indexOf("Trident/") > 0 || e.indexOf("Edge/") > 0 || r || o);
    }, 
    /**
     * Returns true if the backing IndexedDB store is the Node IndexedDBShim
     * (see https://github.com/axemclion/IndexedDBShim).
     */
    t.zs = function() {
        var t;
        return "undefined" != typeof process && "YES" === (null === (t = process.env) || void 0 === t ? void 0 : t.Js);
    }, 
    /** Helper to get a typed SimpleDbStore from a transaction. */ t.Ys = function(t, e) {
        return t.store(e);
    }, 
    // visible for testing
    /** Parse User Agent to determine iOS version. Returns -1 if not found. */
    t.js = function(t) {
        var e = t.match(/i(?:phone|pad|pod) os ([\d_]+)/i), n = e ? e[1].split("_").slice(0, 2).join(".") : "-1";
        return Number(n);
    }, 
    // visible for testing
    /** Parse User Agent to determine Android version. Returns -1 if not found. */
    t.Hs = function(t) {
        var e = t.match(/Android ([\d.]+)/i), n = e ? e[1].split(".").slice(0, 2).join(".") : "-1";
        return Number(n);
    }, 
    /**
     * Opens the specified database, creating or upgrading it if necessary.
     */
    t.prototype.Xs = function(t) {
        return __awaiter(this, void 0, void 0, (function() {
            var e, r = this;
            return __generator(this, (function(n) {
                switch (n.label) {
                  case 0:
                    return this.db ? [ 3 /*break*/ , 2 ] : (x$1("SimpleDb", "Opening database:", this.name), 
                    e = this, [ 4 /*yield*/ , new Promise((function(e, n) {
                        // TODO(mikelehen): Investigate browser compatibility.
                        // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
                        // suggests IE9 and older WebKit browsers handle upgrade
                        // differently. They expect setVersion, as described here:
                        // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
                        var i = indexedDB.open(r.name, r.version);
                        i.onsuccess = function(t) {
                            var n = t.target.result;
                            e(n);
                        }, i.onblocked = function() {
                            n(new Nr(t, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
                        }, i.onerror = function(e) {
                            var r = e.target.error;
                            "VersionError" === r.name ? n(new L$1(V$1.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : n(new Nr(t, r));
                        }, i.onupgradeneeded = function(t) {
                            x$1("SimpleDb", 'Database "' + r.name + '" requires upgrade from version:', t.oldVersion);
                            var e = t.target.result;
                            r.Ws.createOrUpgrade(e, i.transaction, t.oldVersion, r.version).next((function() {
                                x$1("SimpleDb", "Database upgrade to version " + r.version + " complete");
                            }));
                        };
                    })) ]);

                  case 1:
                    e.db = n.sent(), n.label = 2;

                  case 2:
                    return [ 2 /*return*/ , (this.Zs && (this.db.onversionchange = function(t) {
                        return r.Zs(t);
                    }), this.db) ];
                }
            }));
        }));
    }, t.prototype.ti = function(t) {
        this.Zs = t, this.db && (this.db.onversionchange = function(e) {
            return t(e);
        });
    }, t.prototype.runTransaction = function(t, r, i, o) {
        return __awaiter(this, void 0, void 0, (function() {
            var e, u, s, a, c;
            return __generator(this, (function(h) {
                switch (h.label) {
                  case 0:
                    e = "readonly" === r, u = 0, s = function() {
                        var r, s, c, h, f;
                        return __generator(this, (function(n) {
                            switch (n.label) {
                              case 0:
                                ++u, n.label = 1;

                              case 1:
                                return n.trys.push([ 1, 4, , 5 ]), [ 4 /*yield*/ , a.Xs(t) ];

                              case 2:
                                // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                                // fire), but still return the original transactionFnResult back to the
                                // caller.
                                return a.db = n.sent(), r = Dr.open(a.db, t, e ? "readonly" : "readwrite", i), s = o(r).catch((function(t) {
                                    // Abort the transaction if there was an error.
                                    return r.abort(t), lr.reject(t);
                                })).Ln(), c = {}, s.catch((function() {})), [ 4 /*yield*/ , r.ei ];

                              case 3:
                                return [ 2 /*return*/ , (c.value = (
                                // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                                // fire), but still return the original transactionFnResult back to the
                                // caller.
                                n.sent(), s), c) ];

                              case 4:
                                return h = n.sent(), f = "FirebaseError" !== h.name && u < 3, x$1("SimpleDb", "Transaction failed with error:", h.message, "Retrying:", f), 
                                a.close(), f ? [ 3 /*break*/ , 5 ] : [ 2 /*return*/ , {
                                    value: Promise.reject(h)
                                } ];

                              case 5:
                                return [ 2 /*return*/ ];
                            }
                        }));
                    }, a = this, h.label = 1;

                  case 1:
                    return [ 5 /*yield**/ , s() ];

                  case 2:
                    if ("object" == typeof (c = h.sent())) return [ 2 /*return*/ , c.value ];
                    h.label = 3;

                  case 3:
                    return [ 3 /*break*/ , 1 ];

                  case 4:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, t.prototype.close = function() {
        this.db && this.db.close(), this.db = void 0;
    }, t;
}(), Tr = /** @class */ function() {
    function t(t) {
        this.ni = t, this.si = !1, this.ii = null;
    }
    return Object.defineProperty(t.prototype, "On", {
        get: function() {
            return this.si;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "ri", {
        get: function() {
            return this.ii;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "cursor", {
        set: function(t) {
            this.ni = t;
        },
        enumerable: !1,
        configurable: !0
    }), 
    /**
     * This function can be called to stop iteration at any point.
     */
    t.prototype.done = function() {
        this.si = !0;
    }, 
    /**
     * This function can be called to skip to that next key, which could be
     * an index or a primary key.
     */
    t.prototype.oi = function(t) {
        this.ii = t;
    }, 
    /**
     * Delete the current cursor value from the object store.
     *
     * NOTE: You CANNOT do this with a keysOnly query.
     */
    t.prototype.delete = function() {
        return kr(this.ni.delete());
    }, t;
}(), Nr = /** @class */ function(e) {
    function n(t, n) {
        var r = this;
        return (r = e.call(this, V$1.UNAVAILABLE, "IndexedDB transaction '" + t + "' failed: " + n) || this).name = "IndexedDbTransactionError", 
        r;
    }
    return __extends(n, e), n;
}(L$1);

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// References to `window` are guarded by SimpleDb.isAvailable()
/* eslint-disable no-restricted-globals */
/**
 * Provides a wrapper around IndexedDb with a simplified interface that uses
 * Promise-like return values to chain operations. Real promises cannot be used
 * since .then() continuations are executed asynchronously (e.g. via
 * .setImmediate), which would cause IndexedDB to end the transaction.
 * See PersistencePromise for more details.
 */
/** Verifies whether `e` is an IndexedDbTransactionError. */ function Ar(t) {
    // Use name equality, as instanceof checks on errors don't work with errors
    // that wrap other errors.
    return "IndexedDbTransactionError" === t.name;
}

/**
 * Wraps an IDBTransaction and exposes a store() method to get a handle to a
 * specific object store.
 */ var Dr = /** @class */ function() {
    function t(t, e) {
        var n = this;
        this.action = t, this.transaction = e, this.aborted = !1, 
        /**
             * A promise that resolves with the result of the IndexedDb transaction.
             */
        this.ci = new dr, this.transaction.oncomplete = function() {
            n.ci.resolve();
        }, this.transaction.onabort = function() {
            e.error ? n.ci.reject(new Nr(t, e.error)) : n.ci.resolve();
        }, this.transaction.onerror = function(e) {
            var r = Sr(e.target.error);
            n.ci.reject(new Nr(t, r));
        };
    }
    return t.open = function(e, n, r, i) {
        try {
            return new t(n, e.transaction(i, r));
        } catch (e) {
            throw new Nr(n, e);
        }
    }, Object.defineProperty(t.prototype, "ei", {
        get: function() {
            return this.ci.promise;
        },
        enumerable: !1,
        configurable: !0
    }), t.prototype.abort = function(t) {
        t && this.ci.reject(t), this.aborted || (x$1("SimpleDb", "Aborting transaction:", t ? t.message : "Client-initiated abort"), 
        this.aborted = !0, this.transaction.abort());
    }, 
    /**
     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
     * operations performed on the SimpleDbStore happen within the context of this
     * transaction and it cannot be used anymore once the transaction is
     * completed.
     *
     * Note that we can't actually enforce that the KeyType and ValueType are
     * correct, but they allow type safety through the rest of the consuming code.
     */
    t.prototype.store = function(t) {
        var e = this.transaction.objectStore(t);
        return new xr(e);
    }, t;
}(), xr = /** @class */ function() {
    function t(t) {
        this.store = t;
    }
    return t.prototype.put = function(t, e) {
        var n;
        return void 0 !== e ? (x$1("SimpleDb", "PUT", this.store.name, t, e), n = this.store.put(e, t)) : (x$1("SimpleDb", "PUT", this.store.name, "<auto-key>", t), 
        n = this.store.put(t)), kr(n);
    }, 
    /**
     * Adds a new value into an Object Store and returns the new key. Similar to
     * IndexedDb's `add()`, this method will fail on primary key collisions.
     *
     * @param value The object to write.
     * @return The key of the value to add.
     */
    t.prototype.add = function(t) {
        return x$1("SimpleDb", "ADD", this.store.name, t, t), kr(this.store.add(t));
    }, 
    /**
     * Gets the object with the specified key from the specified store, or null
     * if no object exists with the specified key.
     *
     * @key The key of the object to get.
     * @return The object with the specified key or null if no object exists.
     */
    t.prototype.get = function(t) {
        var e = this;
        // We're doing an unsafe cast to ValueType.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                return kr(this.store.get(t)).next((function(n) {
            // Normalize nonexistence to null.
            return void 0 === n && (n = null), x$1("SimpleDb", "GET", e.store.name, t, n), n;
        }));
    }, t.prototype.delete = function(t) {
        return x$1("SimpleDb", "DELETE", this.store.name, t), kr(this.store.delete(t));
    }, 
    /**
     * If we ever need more of the count variants, we can add overloads. For now,
     * all we need is to count everything in a store.
     *
     * Returns the number of rows in the store.
     */
    t.prototype.count = function() {
        return x$1("SimpleDb", "COUNT", this.store.name), kr(this.store.count());
    }, t.prototype.ui = function(t, e) {
        var n = this.cursor(this.options(t, e)), r = [];
        return this.ai(n, (function(t, e) {
            r.push(e);
        })).next((function() {
            return r;
        }));
    }, t.prototype.hi = function(t, e) {
        x$1("SimpleDb", "DELETE ALL", this.store.name);
        var n = this.options(t, e);
        n.li = !1;
        var r = this.cursor(n);
        return this.ai(r, (function(t, e, n) {
            return n.delete();
        }));
    }, t.prototype._i = function(t, e) {
        var n;
        e ? n = t : (n = {}, e = t);
        var r = this.cursor(n);
        return this.ai(r, e);
    }, 
    /**
     * Iterates over a store, but waits for the given callback to complete for
     * each entry before iterating the next entry. This allows the callback to do
     * asynchronous work to determine if this iteration should continue.
     *
     * The provided callback should return `true` to continue iteration, and
     * `false` otherwise.
     */
    t.prototype.fi = function(t) {
        var e = this.cursor({});
        return new lr((function(n, r) {
            e.onerror = function(t) {
                var e = Sr(t.target.error);
                r(e);
            }, e.onsuccess = function(e) {
                var r = e.target.result;
                r ? t(r.primaryKey, r.value).next((function(t) {
                    t ? r.continue() : n();
                })) : n();
            };
        }));
    }, t.prototype.ai = function(t, e) {
        var n = [];
        return new lr((function(r, i) {
            t.onerror = function(t) {
                i(t.target.error);
            }, t.onsuccess = function(t) {
                var i = t.target.result;
                if (i) {
                    var o = new Tr(i), u = e(i.primaryKey, i.value, o);
                    if (u instanceof lr) {
                        var s = u.catch((function(t) {
                            return o.done(), lr.reject(t);
                        }));
                        n.push(s);
                    }
                    o.On ? r() : null === o.ri ? i.continue() : i.continue(o.ri);
                } else r();
            };
        })).next((function() {
            return lr.qn(n);
        }));
    }, t.prototype.options = function(t, e) {
        var n = void 0;
        return void 0 !== t && ("string" == typeof t ? n = t : e = t), {
            index: n,
            range: e
        };
    }, t.prototype.cursor = function(t) {
        var e = "next";
        if (t.reverse && (e = "prev"), t.index) {
            var n = this.store.index(t.index);
            return t.li ? n.openKeyCursor(t.range, e) : n.openCursor(t.range, e);
        }
        return this.store.openCursor(t.range, e);
    }, t;
}();

/**
 * A wrapper around an IDBObjectStore providing an API that:
 *
 * 1) Has generic KeyType / ValueType parameters to provide strongly-typed
 * methods for acting against the object store.
 * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every
 * method return a PersistencePromise instead.
 * 3) Provides a higher-level API to avoid needing to do excessive wrapping of
 * intermediate IndexedDB types (IDBCursorWithValue, etc.)
 */
/**
 * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
 * handlers to resolve / reject the PersistencePromise as appropriate.
 */
function kr(t) {
    return new lr((function(e, n) {
        t.onsuccess = function(t) {
            var n = t.target.result;
            e(n);
        }, t.onerror = function(t) {
            var e = Sr(t.target.error);
            n(e);
        };
    }));
}

// Guard so we only report the error once.
var Or = !1;

function Sr(t) {
    var e = Er.js(getUA());
    if (e >= 12.2 && e < 13) {
        var n = "An internal error was encountered in the Indexed Database server";
        if (t.message.indexOf(n) >= 0) {
            // Wrap error in a more descriptive one.
            var r = new L$1("internal", "IOS_INDEXEDDB_BUG1: IndexedDb has thrown '" + n + "'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
            return Or || (Or = !0, 
            // Throw a global exception outside of this promise chain, for the user to
            // potentially catch.
            setTimeout((function() {
                throw r;
            }), 0)), r;
        }
    }
    return t;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** The Platform's 'window' implementation or null if not available. */ function Pr() {
    // `window` is not always available, e.g. in ReactNative and WebWorkers.
    // eslint-disable-next-line no-restricted-globals
    return "undefined" != typeof window ? window : null;
}

/** The Platform's 'document' implementation or null if not available. */ function Cr() {
    // `document` is not always available, e.g. in ReactNative and WebWorkers.
    // eslint-disable-next-line no-restricted-globals
    return "undefined" != typeof document ? document : null;
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Represents an operation scheduled to be run in the future on an AsyncQueue.
 *
 * It is created via DelayedOperation.createAndSchedule().
 *
 * Supports cancellation (via cancel()) and early execution (via skipDelay()).
 *
 * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type
 * in newer versions of TypeScript defines `finally`, which is not available in
 * IE.
 */ var Rr = /** @class */ function() {
    function t(t, e, n, r, i) {
        this.di = t, this.Ns = e, this.wi = n, this.op = r, this.Ei = i, this.Ti = new dr, 
        this.then = this.Ti.promise.then.bind(this.Ti.promise), 
        // It's normal for the deferred promise to be canceled (due to cancellation)
        // and so we attach a dummy catch callback to avoid
        // 'UnhandledPromiseRejectionWarning' log spam.
        this.Ti.promise.catch((function(t) {}))
        /**
     * Creates and returns a DelayedOperation that has been scheduled to be
     * executed on the provided asyncQueue after the provided delayMs.
     *
     * @param asyncQueue The queue to schedule the operation on.
     * @param id A Timer ID identifying the type of operation this is.
     * @param delayMs The delay (ms) before the operation should be scheduled.
     * @param op The operation to run.
     * @param removalCallback A callback to be called synchronously once the
     *   operation is executed or canceled, notifying the AsyncQueue to remove it
     *   from its delayedOperations list.
     *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
     *   the DelayedOperation class public.
     */;
    }
    return t.Ii = function(e, n, r, i, o) {
        var u = new t(e, n, Date.now() + r, i, o);
        return u.start(r), u;
    }, 
    /**
     * Starts the timer. This is called immediately after construction by
     * createAndSchedule().
     */
    t.prototype.start = function(t) {
        var e = this;
        this.mi = setTimeout((function() {
            return e.Ai();
        }), t);
    }, 
    /**
     * Queues the operation to run immediately (if it hasn't already been run or
     * canceled).
     */
    t.prototype.Ks = function() {
        return this.Ai();
    }, 
    /**
     * Cancels the operation if it hasn't already been executed or canceled. The
     * promise will be rejected.
     *
     * As long as the operation has not yet been run, calling cancel() provides a
     * guarantee that the operation will not be run.
     */
    t.prototype.cancel = function(t) {
        null !== this.mi && (this.clearTimeout(), this.Ti.reject(new L$1(V$1.CANCELLED, "Operation cancelled" + (t ? ": " + t : ""))));
    }, t.prototype.Ai = function() {
        var t = this;
        this.di.Ri((function() {
            return null !== t.mi ? (t.clearTimeout(), t.op().then((function(e) {
                return t.Ti.resolve(e);
            }))) : Promise.resolve();
        }));
    }, t.prototype.clearTimeout = function() {
        null !== this.mi && (this.Ei(this), clearTimeout(this.mi), this.mi = null);
    }, t;
}(), Vr = /** @class */ function() {
    function t() {
        var t = this;
        // The last promise in the queue.
                this.Pi = Promise.resolve(), 
        // A list of retryable operations. Retryable operations are run in order and
        // retried with backoff.
        this.gi = [], 
        // Is this AsyncQueue being shut down? Once it is set to true, it will not
        // be changed again.
        this.yi = !1, 
        // Operations scheduled to be queued in the future. Operations are
        // automatically removed after they are run or canceled.
        this.Vi = [], 
        // visible for testing
        this.pi = null, 
        // Flag set while there's an outstanding AsyncQueue operation, used for
        // assertion sanity-checks.
        this.vi = !1, 
        // List of TimerIds to fast-forward delays for.
        this.bi = [], 
        // Backoff timer used to schedule retries for retryable operations
        this.Si = new Ir(this, "async_queue_retry" /* AsyncQueueRetry */), 
        // Visibility handler that triggers an immediate retry of all retryable
        // operations. Meant to speed up recovery when we regain file system access
        // after page comes into foreground.
        this.Di = function() {
            var e = Cr();
            e && x$1("AsyncQueue", "Visibility state changed to " + e.visibilityState), t.Si.Qs();
        };
        var e = Cr();
        e && "function" == typeof e.addEventListener && e.addEventListener("visibilitychange", this.Di);
    }
    return Object.defineProperty(t.prototype, "Ci", {
        // Is this AsyncQueue being shut down? If true, this instance will not enqueue
        // any new operations, Promises from enqueue requests will not resolve.
        get: function() {
            return this.yi;
        },
        enumerable: !1,
        configurable: !0
    }), 
    /**
     * Adds a new operation to the queue without waiting for it to complete (i.e.
     * we ignore the Promise result).
     */
    t.prototype.Ri = function(t) {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.enqueue(t);
    }, 
    /**
     * Regardless if the queue has initialized shutdown, adds a new operation to the
     * queue without waiting for it to complete (i.e. we ignore the Promise result).
     */
    t.prototype.Ni = function(t) {
        this.xi(), 
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.Fi(t);
    }, 
    /**
     * Initialize the shutdown of this queue. Once this method is called, the
     * only possible way to request running an operation is through
     * `enqueueEvenWhileRestricted()`.
     */
    t.prototype.Oi = function() {
        if (!this.yi) {
            this.yi = !0;
            var t = Cr();
            t && "function" == typeof t.removeEventListener && t.removeEventListener("visibilitychange", this.Di);
        }
    }, 
    /**
     * Adds a new operation to the queue. Returns a promise that will be resolved
     * when the promise returned by the new operation is (with its value).
     */
    t.prototype.enqueue = function(t) {
        return this.xi(), this.yi ? new Promise((function(t) {})) : this.Fi(t);
    }, 
    /**
     * Enqueue a retryable operation.
     *
     * A retryable operation is rescheduled with backoff if it fails with a
     * IndexedDbTransactionError (the error type used by SimpleDb). All
     * retryable operations are executed in order and only run if all prior
     * operations were retried successfully.
     */
    t.prototype.Mi = function(t) {
        var e = this;
        this.Ri((function() {
            return e.gi.push(t), e.ki();
        }));
    }, 
    /**
     * Runs the next operation from the retryable queue. If the operation fails,
     * reschedules with backoff.
     */
    t.prototype.ki = function() {
        return __awaiter(this, void 0, void 0, (function() {
            var t, e = this;
            return __generator(this, (function(n) {
                switch (n.label) {
                  case 0:
                    if (0 === this.gi.length) return [ 3 /*break*/ , 5 ];
                    n.label = 1;

                  case 1:
                    return n.trys.push([ 1, 3, , 4 ]), [ 4 /*yield*/ , this.gi[0]() ];

                  case 2:
                    return n.sent(), this.gi.shift(), this.Si.reset(), [ 3 /*break*/ , 4 ];

                  case 3:
                    if (!Ar(t = n.sent())) throw t;
                    // Failure will be handled by AsyncQueue
                                        return x$1("AsyncQueue", "Operation failed with retryable error: " + t), 
                    [ 3 /*break*/ , 4 ];

                  case 4:
                    this.gi.length > 0 && 
                    // If there are additional operations, we re-schedule `retryNextOp()`.
                    // This is necessary to run retryable operations that failed during
                    // their initial attempt since we don't know whether they are already
                    // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
                    // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
                    // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
                    // call scheduled here.
                    // Since `backoffAndRun()` cancels an existing backoff and schedules a
                    // new backoff on every call, there is only ever a single additional
                    // operation in the queue.
                    this.Si.Bs((function() {
                        return e.ki();
                    })), n.label = 5;

                  case 5:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, t.prototype.Fi = function(t) {
        var e = this, n = this.Pi.then((function() {
            return e.vi = !0, t().catch((function(t) {
                // Re-throw the error so that this.tail becomes a rejected Promise and
                // all further attempts to chain (via .then) will just short-circuit
                // and return the rejected Promise.
                throw e.pi = t, e.vi = !1, k$1("INTERNAL UNHANDLED ERROR: ", 
                /**
 * Chrome includes Error.message in Error.stack. Other browsers do not.
 * This returns expected output of message + stack when available.
 * @param error Error or FirestoreError
 */
                function(t) {
                    var e = t.message || "";
                    return t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + "\n" + t.stack), 
                    e;
                }(t)), t;
            })).then((function(t) {
                return e.vi = !1, t;
            }));
        }));
        return this.Pi = n, n;
    }, 
    /**
     * Schedules an operation to be queued on the AsyncQueue once the specified
     * `delayMs` has elapsed. The returned DelayedOperation can be used to cancel
     * or fast-forward the operation prior to its running.
     */
    t.prototype.Us = function(t, e, n) {
        var r = this;
        this.xi(), 
        // Fast-forward delays for timerIds that have been overriden.
        this.bi.indexOf(t) > -1 && (e = 0);
        var i = Rr.Ii(this, t, e, n, (function(t) {
            return r.$i(t);
        }));
        return this.Vi.push(i), i;
    }, t.prototype.xi = function() {
        this.pi && P$1();
    }, 
    /**
     * Verifies there's an operation currently in-progress on the AsyncQueue.
     * Unfortunately we can't verify that the running code is in the promise chain
     * of that operation, so this isn't a foolproof check, but it should be enough
     * to catch some bugs.
     */
    t.prototype.Li = function() {}, 
    /**
     * Waits until all currently queued tasks are finished executing. Delayed
     * operations are not run.
     */
    t.prototype.Bi = function() {
        return __awaiter(this, void 0, void 0, (function() {
            var t;
            return __generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    return [ 4 /*yield*/ , t = this.Pi ];

                  case 1:
                    e.sent(), e.label = 2;

                  case 2:
                    if (t !== this.Pi) return [ 3 /*break*/ , 0 ];
                    e.label = 3;

                  case 3:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    /**
     * For Tests: Determine if a delayed operation with a particular TimerId
     * exists.
     */
    t.prototype.qi = function(t) {
        for (var e = 0, n = this.Vi; e < n.length; e++) {
            if (n[e].Ns === t) return !0;
        }
        return !1;
    }, 
    /**
     * For Tests: Runs some or all delayed operations early.
     *
     * @param lastTimerId Delayed operations up to and including this TimerId will
     *  be drained. Pass TimerId.All to run all delayed operations.
     * @returns a Promise that resolves once all operations have been run.
     */
    t.prototype.Ui = function(t) {
        var e = this;
        // Note that draining may generate more delayed ops, so we do that first.
                return this.Bi().then((function() {
            // Run ops in the same order they'd run if they ran naturally.
            e.Vi.sort((function(t, e) {
                return t.wi - e.wi;
            }));
            for (var n = 0, r = e.Vi; n < r.length; n++) {
                var i = r[n];
                if (i.Ks(), "all" /* All */ !== t && i.Ns === t) break;
            }
            return e.Bi();
        }));
    }, 
    /**
     * For Tests: Skip all subsequent delays for a timer id.
     */
    t.prototype.Qi = function(t) {
        this.bi.push(t);
    }, 
    /** Called once a DelayedOperation is run or canceled. */ t.prototype.$i = function(t) {
        // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
        var e = this.Vi.indexOf(t);
        this.Vi.splice(e, 1);
    }, t;
}();

/**
 * Returns a FirestoreError that can be surfaced to the user if the provided
 * error is an IndexedDbTransactionError. Re-throws the error otherwise.
 */
function Lr(t, e) {
    if (k$1("AsyncQueue", e + ": " + t), Ar(t)) return new L$1(V$1.UNAVAILABLE, e + ": " + t);
    throw t;
}

function Ur(t, e) {
    var n = t[0], r = t[1], i = e[0], o = e[1], u = G$1(n, i);
    return 0 === u ? G$1(r, o) : u;
}

/**
 * Used to calculate the nth sequence number. Keeps a rolling buffer of the
 * lowest n values passed to `addElement`, and finally reports the largest of
 * them in `maxValue`.
 */ var Mr = /** @class */ function() {
    function t(t) {
        this.Ki = t, this.buffer = new gt(Ur), this.Wi = 0;
    }
    return t.prototype.ji = function() {
        return ++this.Wi;
    }, t.prototype.Gi = function(t) {
        var e = [ t, this.ji() ];
        if (this.buffer.size < this.Ki) this.buffer = this.buffer.add(e); else {
            var n = this.buffer.last();
            Ur(e, n) < 0 && (this.buffer = this.buffer.delete(n).add(e));
        }
    }, Object.defineProperty(t.prototype, "maxValue", {
        get: function() {
            // Guaranteed to be non-empty. If we decide we are not collecting any
            // sequence numbers, nthSequenceNumber below short-circuits. If we have
            // decided that we are collecting n sequence numbers, it's because n is some
            // percentage of the existing sequence numbers. That means we should never
            // be in a situation where we are collecting sequence numbers but don't
            // actually have any.
            return this.buffer.last()[0];
        },
        enumerable: !1,
        configurable: !0
    }), t;
}(), qr = {
    zi: !1,
    Hi: 0,
    Ji: 0,
    Yi: 0
}, jr = /** @class */ function() {
    function t(
    // When we attempt to collect, we will only do so if the cache size is greater than this
    // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.
    t, 
    // The percentage of sequence numbers that we will attempt to collect
    e, 
    // A cap on the total number of sequence numbers that will be collected. This prevents
    // us from collecting a huge number of sequence numbers if the cache has grown very large.
    n) {
        this.Xi = t, this.Zi = e, this.tr = n;
    }
    return t.er = function(e) {
        return new t(e, t.nr, t.sr);
    }, t;
}();

jr.nr = 10, jr.sr = 1e3, jr.ir = new jr(41943040, jr.nr, jr.sr), jr.rr = new jr(-1, 0, 0);

/**
 * This class is responsible for the scheduling of LRU garbage collection. It handles checking
 * whether or not GC is enabled, as well as which delay to use before the next run.
 */
var Fr = /** @class */ function() {
    function t(t, e) {
        this.cr = t, this.di = e, this.ur = !1, this.ar = null;
    }
    return t.prototype.start = function(t) {
        -1 !== this.cr.params.Xi && this.hr(t);
    }, t.prototype.stop = function() {
        this.ar && (this.ar.cancel(), this.ar = null);
    }, Object.defineProperty(t.prototype, "lr", {
        get: function() {
            return null !== this.ar;
        },
        enumerable: !1,
        configurable: !0
    }), t.prototype.hr = function(t) {
        var r = this, i = this.ur ? 3e5 : 6e4;
        x$1("LruGarbageCollector", "Garbage collection scheduled in " + i + "ms"), this.ar = this.di.Us("lru_garbage_collection" /* LruGarbageCollection */ , i, (function() {
            return __awaiter(r, void 0, void 0, (function() {
                var e;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        this.ar = null, this.ur = !0, n.label = 1;

                      case 1:
                        return n.trys.push([ 1, 3, , 7 ]), [ 4 /*yield*/ , t._r(this.cr) ];

                      case 2:
                        return n.sent(), [ 3 /*break*/ , 7 ];

                      case 3:
                        return Ar(e = n.sent()) ? (x$1("LruGarbageCollector", "Ignoring IndexedDB error during garbage collection: ", e), 
                        [ 3 /*break*/ , 6 ]) : [ 3 /*break*/ , 4 ];

                      case 4:
                        return [ 4 /*yield*/ , vo(e) ];

                      case 5:
                        n.sent(), n.label = 6;

                      case 6:
                        return [ 3 /*break*/ , 7 ];

                      case 7:
                        return [ 4 /*yield*/ , this.hr(t) ];

                      case 8:
                        return n.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }));
    }, t;
}(), zr = /** @class */ function() {
    function t(t, e) {
        this.dr = t, this.params = e
        /** Given a percentile of target to collect, returns the number of targets to collect. */;
    }
    return t.prototype.wr = function(t, e) {
        return this.dr.Er(t).next((function(t) {
            return Math.floor(e / 100 * t);
        }));
    }, 
    /** Returns the nth sequence number, counting in order from the smallest. */ t.prototype.Tr = function(t, e) {
        var n = this;
        if (0 === e) return lr.resolve(_r.Ds);
        var r = new Mr(e);
        return this.dr.Ue(t, (function(t) {
            return r.Gi(t.sequenceNumber);
        })).next((function() {
            return n.dr.Ir(t, (function(t) {
                return r.Gi(t);
            }));
        })).next((function() {
            return r.maxValue;
        }));
    }, 
    /**
     * Removes targets with a sequence number equal to or less than the given upper bound, and removes
     * document associations with those targets.
     */
    t.prototype.mr = function(t, e, n) {
        return this.dr.mr(t, e, n);
    }, 
    /**
     * Removes documents that have a sequence number equal to or less than the upper bound and are not
     * otherwise pinned.
     */
    t.prototype.Ar = function(t, e) {
        return this.dr.Ar(t, e);
    }, t.prototype.Rr = function(t, e) {
        var n = this;
        return -1 === this.params.Xi ? (x$1("LruGarbageCollector", "Garbage collection skipped; disabled"), 
        lr.resolve(qr)) : this.Pr(t).next((function(r) {
            return r < n.params.Xi ? (x$1("LruGarbageCollector", "Garbage collection skipped; Cache size " + r + " is lower than threshold " + n.params.Xi), 
            qr) : n.gr(t, e);
        }));
    }, t.prototype.Pr = function(t) {
        return this.dr.Pr(t);
    }, t.prototype.gr = function(t, e) {
        var n, r, i, o, s, a, c, h = this, f = Date.now();
        return this.wr(t, this.params.Zi).next((function(e) {
            // Cap at the configured max
            return e > h.params.tr ? (x$1("LruGarbageCollector", "Capping sequence numbers to collect down to the maximum of " + h.params.tr + " from " + e), 
            r = h.params.tr) : r = e, o = Date.now(), h.Tr(t, r);
        })).next((function(r) {
            return n = r, s = Date.now(), h.mr(t, n, e);
        })).next((function(e) {
            return i = e, a = Date.now(), h.Ar(t, n);
        })).next((function(t) {
            return c = Date.now(), D$1() <= LogLevel.DEBUG && x$1("LruGarbageCollector", "LRU Garbage Collection\n\tCounted targets in " + (o - f) + "ms\n\tDetermined least recently used " + r + " in " + (s - o) + "ms\n\tRemoved " + i + " targets in " + (a - s) + "ms\n\tRemoved " + t + " documents in " + (c - a) + "ms\nTotal Duration: " + (c - f) + "ms"), 
            lr.resolve({
                zi: !0,
                Hi: r,
                Ji: i,
                Yi: t
            });
        }));
    }, t;
}();

/** Implements the steps for LRU garbage collection. */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Encodes a resource path into a IndexedDb-compatible string form.
 */
function Br(t) {
    for (var e = "", n = 0; n < t.length; n++) e.length > 0 && (e = Kr(e)), e = Gr(t.get(n), e);
    return Kr(e);
}

/** Encodes a single segment of a resource path into the given result */ function Gr(t, e) {
    for (var n = e, r = t.length, i = 0; i < r; i++) {
        var o = t.charAt(i);
        switch (o) {
          case "\0":
            n += "";
            break;

          case "":
            n += "";
            break;

          default:
            n += o;
        }
    }
    return n;
}

/** Encodes a path separator into the given result */ function Kr(t) {
    return t + "";
}

/**
 * Decodes the given IndexedDb-compatible string form of a resource path into
 * a ResourcePath instance. Note that this method is not suitable for use with
 * decoding resource names from the server; those are One Platform format
 * strings.
 */ function Wr(t) {
    // Event the empty path must encode as a path of at least length 2. A path
    // with exactly 2 must be the empty path.
    var e = t.length;
    if (C(e >= 2), 2 === e) return C("" === t.charAt(0) && "" === t.charAt(1)), $.X();
    // Escape characters cannot exist past the second-to-last position in the
    // source value.
        for (var n = e - 2, r = [], i = "", o = 0; o < e; ) {
        // The last two characters of a valid encoded path must be a separator, so
        // there must be an end to this segment.
        var u = t.indexOf("", o);
        switch ((u < 0 || u > n) && P$1(), t.charAt(u + 1)) {
          case "":
            var s = t.substring(o, u), a = void 0;
            0 === i.length ? 
            // Avoid copying for the common case of a segment that excludes \0
            // and \001
            a = s : (a = i += s, i = ""), r.push(a);
            break;

          case "":
            i += t.substring(o, u), i += "\0";
            break;

          case "":
            // The escape character can be used in the output to encode itself.
            i += t.substring(o, u + 1);
            break;

          default:
            P$1();
        }
        o = u + 2;
    }
    return new $(r);
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** Serializer for values stored in the LocalStore. */ var Qr = function(t) {
    this.yr = t;
};

/** Decodes a remote document from storage locally to a Document. */ function Hr(t, e) {
    if (e.document) return function(t, e, n) {
        var r = Te(t, e.name), i = be(e.updateTime), o = new Tn({
            mapValue: {
                fields: e.fields
            }
        });
        return new xn(r, i, o, {
            hasCommittedMutations: !!n
        });
    }(t.yr, e.document, !!e.hasCommittedMutations);
    if (e.noDocument) {
        var n = Z$1.ct(e.noDocument.path), r = Zr(e.noDocument.readTime);
        return new kn(n, r, {
            hasCommittedMutations: !!e.hasCommittedMutations
        });
    }
    if (e.unknownDocument) {
        var i = Z$1.ct(e.unknownDocument.path), o = Zr(e.unknownDocument.version);
        return new On(i, o);
    }
    return P$1();
}

/** Encodes a document for storage locally. */ function Yr(t, e, n) {
    var r = $r(n), i = e.key.path.q().H();
    if (e instanceof xn) {
        var o = function(t, e) {
            return {
                name: Ee(t, e.key),
                fields: e.En().mapValue.fields,
                updateTime: me(t, e.version.M())
            };
        }(t.yr, e), u = e.hasCommittedMutations;
        return new Ai(
        /* unknownDocument= */ null, 
        /* noDocument= */ null, o, u, r, i);
    }
    if (e instanceof kn) {
        var s = e.key.path.H(), a = Xr(e.version), c = e.hasCommittedMutations;
        return new Ai(
        /* unknownDocument= */ null, new Ti(s, a), 
        /* document= */ null, c, r, i);
    }
    if (e instanceof On) {
        var h = e.key.path.H(), f = Xr(e.version);
        return new Ai(new Ni(h, f), 
        /* noDocument= */ null, 
        /* document= */ null, 
        /* hasCommittedMutations= */ !0, r, i);
    }
    return P$1();
}

function $r(t) {
    var e = t.M();
    return [ e.seconds, e.nanoseconds ];
}

function Jr(t) {
    var e = new Q$1(t[0], t[1]);
    return H$1.N(e);
}

function Xr(t) {
    var e = t.M();
    return new wi(e.seconds, e.nanoseconds);
}

function Zr(t) {
    var e = new Q$1(t.seconds, t.nanoseconds);
    return H$1.N(e);
}

/** Encodes a batch of mutations into a DbMutationBatch for local storage. */
/** Decodes a DbMutationBatch into a MutationBatch */ function ti(t, e) {
    var n = (e.baseMutations || []).map((function(e) {
        return Se(t.yr, e);
    })), r = e.mutations.map((function(e) {
        return Se(t.yr, e);
    })), i = Q$1.fromMillis(e.localWriteTimeMs);
    return new cr(e.batchId, i, n, r);
}

/** Decodes a DbTarget into TargetData */ function ei(t) {
    var e, n, r = Zr(t.readTime), i = void 0 !== t.lastLimboFreeSnapshotVersion ? Zr(t.lastLimboFreeSnapshotVersion) : H$1.min();
    return void 0 !== t.query.documents ? (C(1 === (n = t.query).documents.length), 
    e = jn(Cn(Ae(n.documents[0])))) : e = function(t) {
        return jn(Re(t));
    }(t.query), new ft(e, t.targetId, 0 /* Listen */ , t.lastListenSequenceNumber, r, i, at.fromBase64String(t.resumeToken))
    /** Encodes TargetData into a DbTarget for storage locally. */;
}

function ni(t, e) {
    var n, r = Xr(e.ft), i = Xr(e.lastLimboFreeSnapshotVersion);
    n = st(e.target) ? Pe(t.yr, e.target) : Ce(t.yr, e.target);
    // We can't store the resumeToken as a ByteString in IndexedDb, so we
    // convert it to a base64 string for storage.
    var o = e.resumeToken.toBase64();
    // lastListenSequenceNumber is always 0 until we do real GC.
        return new xi(e.targetId, ot(e.target), r, o, e.sequenceNumber, i, n);
}

/**
 * A helper function for figuring out what kind of query has been stored.
 */
/**
 * Encodes a `BundledQuery` from bundle proto to a Query object.
 *
 * This reconstructs the original query used to build the bundle being loaded,
 * including features exists only in SDKs (for example: limit-to-last).
 */ function ri(t) {
    var e = Re({
        parent: t.parent,
        structuredQuery: t.structuredQuery
    });
    return "LAST" === t.limitType ? Fn(e, e.limit, "L" /* Last */) : e;
}

/** Encodes a NamedQuery proto object to a NamedQuery model object. */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** A mutation queue for a specific user, backed by IndexedDB. */ var ii = /** @class */ function() {
    function t(
    /**
     * The normalized userId (e.g. null UID => "" userId) used to store /
     * retrieve mutations.
     */
    t, e, n, r) {
        this.userId = t, this.serializer = e, this.os = n, this.Vr = r, 
        /**
             * Caches the document keys for pending mutation batches. If the mutation
             * has been removed from IndexedDb, the cached value may continue to
             * be used to retrieve the batch's document keys. To remove a cached value
             * locally, `removeCachedMutationKeys()` should be invoked either directly
             * or through `removeMutationBatches()`.
             *
             * With multi-tab, when the primary client acknowledges or rejects a mutation,
             * this cache is used by secondary clients to invalidate the local
             * view of the documents that were previously affected by the mutation.
             */
        // PORTING NOTE: Multi-tab only.
        this.pr = {}
        /**
     * Creates a new mutation queue for the given user.
     * @param user The user for which to create a mutation queue.
     * @param serializer The serializer to use when persisting to IndexedDb.
     */;
    }
    return t.vr = function(e, n, r, i) {
        // TODO(mcg): Figure out what constraints there are on userIDs
        // In particular, are there any reserved characters? are empty ids allowed?
        // For the moment store these together in the same mutations table assuming
        // that empty userIDs aren't allowed.
        return C("" !== e.uid), new t(e.u() ? e.uid : "", n, r, i);
    }, t.prototype.br = function(t) {
        var e = !0, n = IDBKeyRange.bound([ this.userId, Number.NEGATIVE_INFINITY ], [ this.userId, Number.POSITIVE_INFINITY ]);
        return si(t)._i({
            index: Ii.userMutationsIndex,
            range: n
        }, (function(t, n, r) {
            e = !1, r.done();
        })).next((function() {
            return e;
        }));
    }, t.prototype.Sr = function(t, e, n, r) {
        var i = this, o = ai(t), u = si(t);
        // The IndexedDb implementation in Chrome (and Firefox) does not handle
        // compound indices that include auto-generated keys correctly. To ensure
        // that the index entry is added correctly in all browsers, we perform two
        // writes: The first write is used to retrieve the next auto-generated Batch
        // ID, and the second write populates the index and stores the actual
        // mutation batch.
        // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972
        // We write an empty object to obtain key
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return u.add({}).next((function(s) {
            C("number" == typeof s);
            for (var a = new cr(s, e, n, r), c = function(t, e, n) {
                var r = n.baseMutations.map((function(e) {
                    return Oe(t.yr, e);
                })), i = n.mutations.map((function(e) {
                    return Oe(t.yr, e);
                }));
                return new Ii(e, n.batchId, n.gn.toMillis(), r, i);
            }(i.serializer, i.userId, a), h = [], f = new gt((function(t, e) {
                return G$1(t.J(), e.J());
            })), l = 0, p = r; l < p.length; l++) {
                var d = p[l], v = Ei.key(i.userId, d.key.path, s);
                f = f.add(d.key.path.q()), h.push(u.put(c)), h.push(o.put(v, Ei.PLACEHOLDER));
            }
            return f.forEach((function(e) {
                h.push(i.os.Dr(t, e));
            })), t.es((function() {
                i.pr[s] = a.keys();
            })), lr.qn(h).next((function() {
                return a;
            }));
        }));
    }, t.prototype.Cr = function(t, e) {
        var n = this;
        return si(t).get(e).next((function(t) {
            return t ? (C(t.userId === n.userId), ti(n.serializer, t)) : null;
        }));
    }, 
    /**
     * Returns the document keys for the mutation batch with the given batchId.
     * For primary clients, this method returns `null` after
     * `removeMutationBatches()` has been called. Secondary clients return a
     * cached result until `removeCachedMutationKeys()` is invoked.
     */
    // PORTING NOTE: Multi-tab only.
    t.prototype.Nr = function(t, e) {
        var n = this;
        return this.pr[e] ? lr.resolve(this.pr[e]) : this.Cr(t, e).next((function(t) {
            if (t) {
                var r = t.keys();
                return n.pr[e] = r, r;
            }
            return null;
        }));
    }, t.prototype.Fr = function(t, e) {
        var n = this, r = e + 1, i = IDBKeyRange.lowerBound([ this.userId, r ]), o = null;
        return si(t)._i({
            index: Ii.userMutationsIndex,
            range: i
        }, (function(t, e, i) {
            e.userId === n.userId && (C(e.batchId >= r), o = ti(n.serializer, e)), i.done();
        })).next((function() {
            return o;
        }));
    }, t.prototype.Or = function(t) {
        var e = IDBKeyRange.upperBound([ this.userId, Number.POSITIVE_INFINITY ]), n = -1;
        return si(t)._i({
            index: Ii.userMutationsIndex,
            range: e,
            reverse: !0
        }, (function(t, e, r) {
            n = e.batchId, r.done();
        })).next((function() {
            return n;
        }));
    }, t.prototype.Mr = function(t) {
        var e = this, n = IDBKeyRange.bound([ this.userId, -1 ], [ this.userId, Number.POSITIVE_INFINITY ]);
        return si(t).ui(Ii.userMutationsIndex, n).next((function(t) {
            return t.map((function(t) {
                return ti(e.serializer, t);
            }));
        }));
    }, t.prototype.us = function(t, e) {
        var n = this, r = Ei.prefixForPath(this.userId, e.path), i = IDBKeyRange.lowerBound(r), o = [];
        // Scan the document-mutation index starting with a prefix starting with
        // the given documentKey.
                return ai(t)._i({
            range: i
        }, (function(r, i, u) {
            var s = r[0], a = r[1], c = r[2], h = Wr(a);
            // Only consider rows matching exactly the specific key of
            // interest. Note that because we order by path first, and we
            // order terminators before path separators, we'll encounter all
            // the index rows for documentKey contiguously. In particular, all
            // the rows for documentKey will occur before any rows for
            // documents nested in a subcollection beneath documentKey so we
            // can stop as soon as we hit any such row.
                        if (s === n.userId && e.path.isEqual(h)) 
            // Look up the mutation batch in the store.
            return si(t).get(c).next((function(t) {
                if (!t) throw P$1();
                C(t.userId === n.userId), o.push(ti(n.serializer, t));
            }));
            u.done();
        })).next((function() {
            return o;
        }));
    }, t.prototype.ds = function(t, e) {
        var n = this, r = new gt(G$1), i = [];
        return e.forEach((function(e) {
            var o = Ei.prefixForPath(n.userId, e.path), u = IDBKeyRange.lowerBound(o), s = ai(t)._i({
                range: u
            }, (function(t, i, o) {
                var u = t[0], s = t[1], a = t[2], c = Wr(s);
                // Only consider rows matching exactly the specific key of
                // interest. Note that because we order by path first, and we
                // order terminators before path separators, we'll encounter all
                // the index rows for documentKey contiguously. In particular, all
                // the rows for documentKey will occur before any rows for
                // documents nested in a subcollection beneath documentKey so we
                // can stop as soon as we hit any such row.
                                u === n.userId && e.path.isEqual(c) ? r = r.add(a) : o.done();
            }));
            i.push(s);
        })), lr.qn(i).next((function() {
            return n.kr(t, r);
        }));
    }, t.prototype.Rs = function(t, e) {
        var n = this, r = e.path, i = r.length + 1, o = Ei.prefixForPath(this.userId, r), u = IDBKeyRange.lowerBound(o), s = new gt(G$1);
        return ai(t)._i({
            range: u
        }, (function(t, e, o) {
            var u = t[0], a = t[1], c = t[2], h = Wr(a);
            u === n.userId && r.j(h) ? 
            // Rows with document keys more than one segment longer than the
            // query path can't be matches. For example, a query on 'rooms'
            // can't match the document /rooms/abc/messages/xyx.
            // TODO(mcg): we'll need a different scanner when we implement
            // ancestor queries.
            h.length === i && (s = s.add(c)) : o.done();
        })).next((function() {
            return n.kr(t, s);
        }));
    }, t.prototype.kr = function(t, e) {
        var n = this, r = [], i = [];
        // TODO(rockwood): Implement this using iterate.
        return e.forEach((function(e) {
            i.push(si(t).get(e).next((function(t) {
                if (null === t) throw P$1();
                C(t.userId === n.userId), r.push(ti(n.serializer, t));
            })));
        })), lr.qn(i).next((function() {
            return r;
        }));
    }, t.prototype.$r = function(t, e) {
        var n = this;
        return ui(t.Lr, this.userId, e).next((function(r) {
            return t.es((function() {
                n.Br(e.batchId);
            })), lr.forEach(r, (function(e) {
                return n.Vr.qr(t, e);
            }));
        }));
    }, 
    /**
     * Clears the cached keys for a mutation batch. This method should be
     * called by secondary clients after they process mutation updates.
     *
     * Note that this method does not have to be called from primary clients as
     * the corresponding cache entries are cleared when an acknowledged or
     * rejected batch is removed from the mutation queue.
     */
    // PORTING NOTE: Multi-tab only
    t.prototype.Br = function(t) {
        delete this.pr[t];
    }, t.prototype.Ur = function(t) {
        var e = this;
        return this.br(t).next((function(n) {
            if (!n) return lr.resolve();
            // Verify that there are no entries in the documentMutations index if
            // the queue is empty.
                        var r = IDBKeyRange.lowerBound(Ei.prefixForUser(e.userId)), i = [];
            return ai(t)._i({
                range: r
            }, (function(t, n, r) {
                if (t[0] === e.userId) {
                    var o = Wr(t[1]);
                    i.push(o);
                } else r.done();
            })).next((function() {
                C(0 === i.length);
            }));
        }));
    }, t.prototype.Qr = function(t, e) {
        return oi(t, this.userId, e);
    }, 
    // PORTING NOTE: Multi-tab only (state is held in memory in other clients).
    /** Returns the mutation queue's metadata from IndexedDb. */
    t.prototype.Kr = function(t) {
        var e = this;
        return ci(t).get(this.userId).next((function(t) {
            return t || new _i(e.userId, -1, 
            /*lastStreamToken=*/ "");
        }));
    }, t;
}();

/**
 * @return true if the mutation queue for the given user contains a pending
 *         mutation for the given key.
 */ function oi(t, e, n) {
    var r = Ei.prefixForPath(e, n.path), i = r[1], o = IDBKeyRange.lowerBound(r), u = !1;
    return ai(t)._i({
        range: o,
        li: !0
    }, (function(t, n, r) {
        var o = t[0], s = t[1];
        t[2];
        o === e && s === i && (u = !0), r.done();
    })).next((function() {
        return u;
    }));
}

/** Returns true if any mutation queue contains the given document. */
/**
 * Delete a mutation batch and the associated document mutations.
 * @return A PersistencePromise of the document mutations that were removed.
 */ function ui(t, e, n) {
    var r = t.store(Ii.store), i = t.store(Ei.store), o = [], u = IDBKeyRange.only(n.batchId), s = 0, a = r._i({
        range: u
    }, (function(t, e, n) {
        return s++, n.delete();
    }));
    o.push(a.next((function() {
        C(1 === s);
    })));
    for (var c = [], h = 0, f = n.mutations; h < f.length; h++) {
        var l = f[h], p = Ei.key(e, l.key.path, n.batchId);
        o.push(i.delete(p)), c.push(l.key);
    }
    return lr.qn(o).next((function() {
        return c;
    }));
}

/**
 * Helper to get a typed SimpleDbStore for the mutations object store.
 */ function si(t) {
    return Yi.Ys(t, Ii.store);
}

/**
 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
 */ function ai(t) {
    return Yi.Ys(t, Ei.store);
}

/**
 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
 */ function ci(t) {
    return Yi.Ys(t, _i.store);
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * The RemoteDocumentCache for IndexedDb. To construct, invoke
 * `newIndexedDbRemoteDocumentCache()`.
 */ var hi = /** @class */ function() {
    /**
     * @param serializer The document serializer.
     * @param indexManager The query indexes that need to be maintained.
     */
    function t(t, e) {
        this.serializer = t, this.os = e
        /**
     * Adds the supplied entries to the cache.
     *
     * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
     */;
    }
    return t.prototype.jn = function(t, e, n) {
        return pi(t).put(di(e), n);
    }, 
    /**
     * Removes a document from the cache.
     *
     * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
     */
    t.prototype.Hn = function(t, e) {
        var n = pi(t), r = di(e);
        return n.delete(r);
    }, 
    /**
     * Updates the current cache size.
     *
     * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the
     * cache's metadata.
     */
    t.prototype.updateMetadata = function(t, e) {
        var n = this;
        return this.getMetadata(t).next((function(r) {
            return r.byteSize += e, n.Wr(t, r);
        }));
    }, t.prototype.Jn = function(t, e) {
        var n = this;
        return pi(t).get(di(e)).next((function(t) {
            return n.jr(t);
        }));
    }, 
    /**
     * Looks up an entry in the cache.
     *
     * @param documentKey The key of the entry to look up.
     * @return The cached MaybeDocument entry and its size, or null if we have nothing cached.
     */
    t.prototype.Gr = function(t, e) {
        var n = this;
        return pi(t).get(di(e)).next((function(t) {
            var e = n.jr(t);
            return e ? {
                zn: e,
                size: vi(t)
            } : null;
        }));
    }, t.prototype.getEntries = function(t, e) {
        var n = this, r = It();
        return this.zr(t, e, (function(t, e) {
            var i = n.jr(e);
            r = r.Tt(t, i);
        })).next((function() {
            return r;
        }));
    }, 
    /**
     * Looks up several entries in the cache.
     *
     * @param documentKeys The set of keys entries to look up.
     * @return A map of MaybeDocuments indexed by key (if a document cannot be
     *     found, the key will be mapped to null) and a map of sizes indexed by
     *     key (zero if the key cannot be found).
     */
    t.prototype.Hr = function(t, e) {
        var n = this, r = It(), i = new vt(Z$1.$);
        return this.zr(t, e, (function(t, e) {
            var o = n.jr(e);
            o ? (r = r.Tt(t, o), i = i.Tt(t, vi(e))) : (r = r.Tt(t, null), i = i.Tt(t, 0));
        })).next((function() {
            return {
                Jr: r,
                Yr: i
            };
        }));
    }, t.prototype.zr = function(t, e, n) {
        if (e.W()) return lr.resolve();
        var r = IDBKeyRange.bound(e.first().path.H(), e.last().path.H()), i = e.yt(), o = i.Ct();
        return pi(t)._i({
            range: r
        }, (function(t, e, r) {
            // Go through keys not found in cache.
            for (var u = Z$1.ct(t); o && Z$1.$(o, u) < 0; ) n(o, null), o = i.Ct();
            o && o.isEqual(u) && (
            // Key found in cache.
            n(o, e), o = i.Nt() ? i.Ct() : null), 
            // Skip to the next key (if there is one).
            o ? r.oi(o.path.H()) : r.done();
        })).next((function() {
            // The rest of the keys are not in the cache. One case where `iterate`
            // above won't go through them is when the cache is empty.
            for (;o; ) n(o, null), o = i.Nt() ? i.Ct() : null;
        }));
    }, t.prototype.ws = function(t, e, n) {
        var r = this, i = Tt(), o = e.path.length + 1, u = {};
        if (n.isEqual(H$1.min())) {
            // Documents are ordered by key, so we can use a prefix scan to narrow
            // down the documents we need to match the query against.
            var s = e.path.H();
            u.range = IDBKeyRange.lowerBound(s);
        } else {
            // Execute an index-free query and filter by read time. This is safe
            // since all document changes to queries that have a
            // lastLimboFreeSnapshotVersion (`sinceReadTime`) have a read time set.
            var a = e.path.H(), c = $r(n);
            u.range = IDBKeyRange.lowerBound([ a, c ], 
            /* open= */ !0), u.index = Ai.collectionReadTimeIndex;
        }
        return pi(t)._i(u, (function(t, n, u) {
            // The query is actually returning any path that starts with the query
            // path prefix which may include documents in subcollections. For
            // example, a query on 'rooms' will return rooms/abc/messages/xyx but we
            // shouldn't match it. Fix this by discarding rows with document keys
            // more than one segment longer than the query path.
            if (t.length === o) {
                var s = Hr(r.serializer, n);
                e.path.j(s.key.path) ? s instanceof xn && Kn(e, s) && (i = i.Tt(s.key, s)) : u.done();
            }
        })).next((function() {
            return i;
        }));
    }, t.prototype.Xr = function(t) {
        return new fi(this, !!t && t.Zr);
    }, t.prototype.eo = function(t) {
        return this.getMetadata(t).next((function(t) {
            return t.byteSize;
        }));
    }, t.prototype.getMetadata = function(t) {
        return li(t).get(Di.key).next((function(t) {
            return C(!!t), t;
        }));
    }, t.prototype.Wr = function(t, e) {
        return li(t).put(Di.key, e);
    }, 
    /**
     * Decodes `remoteDoc` and returns the document (or null, if the document
     * corresponds to the format used for sentinel deletes).
     */
    t.prototype.jr = function(t) {
        if (t) {
            var e = Hr(this.serializer, t);
            return e instanceof kn && e.version.isEqual(H$1.min()) ? null : e;
        }
        return null;
    }, t;
}(), fi = /** @class */ function(e) {
    /**
     * @param documentCache The IndexedDbRemoteDocumentCache to apply the changes to.
     * @param trackRemovals Whether to create sentinel deletes that can be tracked by
     * `getNewDocumentChanges()`.
     */
    function n(t, n) {
        var r = this;
        return (r = e.call(this) || this).no = t, r.Zr = n, 
        // A map of document sizes prior to applying the changes in this buffer.
        r.so = new fr((function(t) {
            return t.toString();
        }), (function(t, e) {
            return t.isEqual(e);
        })), r;
    }
    return __extends(n, e), n.prototype.Zn = function(t) {
        var e = this, n = [], r = 0, i = new gt((function(t, e) {
            return G$1(t.J(), e.J());
        }));
        return this.Qn.forEach((function(o, u) {
            var s = e.so.get(o);
            if (u.zn) {
                var a = Yr(e.no.serializer, u.zn, e.Wn(o));
                i = i.add(o.path.q());
                var c = vi(a);
                r += c - s, n.push(e.no.jn(t, o, a));
            } else if (r -= s, e.Zr) {
                // In order to track removals, we store a "sentinel delete" in the
                // RemoteDocumentCache. This entry is represented by a NoDocument
                // with a version of 0 and ignored by `maybeDecodeDocument()` but
                // preserved in `getNewDocumentChanges()`.
                var h = Yr(e.no.serializer, new kn(o, H$1.min()), e.Wn(o));
                n.push(e.no.jn(t, o, h));
            } else n.push(e.no.Hn(t, o));
        })), i.forEach((function(r) {
            n.push(e.no.os.Dr(t, r));
        })), n.push(this.no.updateMetadata(t, r)), lr.qn(n);
    }, n.prototype.Yn = function(t, e) {
        var n = this;
        // Record the size of everything we load from the cache so we can compute a delta later.
                return this.no.Gr(t, e).next((function(t) {
            return null === t ? (n.so.set(e, 0), null) : (n.so.set(e, t.size), t.zn);
        }));
    }, n.prototype.Xn = function(t, e) {
        var n = this;
        // Record the size of everything we load from the cache so we can compute
        // a delta later.
                return this.no.Hr(t, e).next((function(t) {
            var e = t.Jr;
            // Note: `getAllFromCache` returns two maps instead of a single map from
            // keys to `DocumentSizeEntry`s. This is to allow returning the
            // `NullableMaybeDocumentMap` directly, without a conversion.
            return t.Yr.forEach((function(t, e) {
                n.so.set(t, e);
            })), e;
        }));
    }, n;
}(pr);

/**
 * Creates a new IndexedDbRemoteDocumentCache.
 *
 * @param serializer The document serializer.
 * @param indexManager The query indexes that need to be maintained.
 */
/**
 * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.
 *
 * Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size
 * delta for all submitted changes. This avoids having to re-read all documents from IndexedDb
 * when we apply the changes.
 */ function li(t) {
    return Yi.Ys(t, Di.store);
}

/**
 * Helper to get a typed SimpleDbStore for the remoteDocuments object store.
 */ function pi(t) {
    return Yi.Ys(t, Ai.store);
}

function di(t) {
    return t.path.H();
}

/**
 * Retrusn an approximate size for the given document.
 */ function vi(t) {
    var e;
    if (t.document) e = t.document; else if (t.unknownDocument) e = t.unknownDocument; else {
        if (!t.noDocument) throw P$1();
        e = t.noDocument;
    }
    return JSON.stringify(e).length;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * An in-memory implementation of IndexManager.
 */ var yi = /** @class */ function() {
    function t() {
        this.io = new mi;
    }
    return t.prototype.Dr = function(t, e) {
        return this.io.add(e), lr.resolve();
    }, t.prototype.As = function(t, e) {
        return lr.resolve(this.io.getEntries(e));
    }, t;
}(), mi = /** @class */ function() {
    function t() {
        this.index = {};
    }
    // Returns false if the entry already existed.
        return t.prototype.add = function(t) {
        var e = t.K(), n = t.q(), r = this.index[e] || new gt($.$), i = !r.has(n);
        return this.index[e] = r.add(n), i;
    }, t.prototype.has = function(t) {
        var e = t.K(), n = t.q(), r = this.index[e];
        return r && r.has(n);
    }, t.prototype.getEntries = function(t) {
        return (this.index[t] || new gt($.$)).H();
    }, t;
}(), gi = /** @class */ function() {
    function t(t) {
        this.serializer = t;
    }
    /**
     * Performs database creation and schema upgrades.
     *
     * Note that in production, this method is only ever used to upgrade the schema
     * to SCHEMA_VERSION. Different values of toVersion are only used for testing
     * and local feature development.
     */    return t.prototype.createOrUpgrade = function(t, e, n, r) {
        var i = this;
        C(n < r && n >= 0 && r <= 11);
        var o = new Dr("createOrUpgrade", e);
        n < 1 && r >= 1 && (function(t) {
            t.createObjectStore(bi.store);
        }(t), function(t) {
            t.createObjectStore(_i.store, {
                keyPath: _i.keyPath
            }), t.createObjectStore(Ii.store, {
                keyPath: Ii.keyPath,
                autoIncrement: !0
            }).createIndex(Ii.userMutationsIndex, Ii.userMutationsKeyPath, {
                unique: !0
            }), t.createObjectStore(Ei.store);
        }(t), Pi(t), function(t) {
            t.createObjectStore(Ai.store);
        }(t));
        // Migration 2 to populate the targetGlobal object no longer needed since
        // migration 3 unconditionally clears it.
        var u = lr.resolve();
        return n < 3 && r >= 3 && (
        // Brand new clients don't need to drop and recreate--only clients that
        // potentially have corrupt data.
        0 !== n && (function(t) {
            t.deleteObjectStore(ki.store), t.deleteObjectStore(xi.store), t.deleteObjectStore(Oi.store);
        }(t), Pi(t)), u = u.next((function() {
            /**
     * Creates the target global singleton row.
     *
     * @param {IDBTransaction} txn The version upgrade transaction for indexeddb
     */
            return function(t) {
                var e = t.store(Oi.store), n = new Oi(
                /*highestTargetId=*/ 0, 
                /*lastListenSequenceNumber=*/ 0, H$1.min().M(), 
                /*targetCount=*/ 0);
                return e.put(Oi.key, n);
            }(o);
        }))), n < 4 && r >= 4 && (0 !== n && (
        // Schema version 3 uses auto-generated keys to generate globally unique
        // mutation batch IDs (this was previously ensured internally by the
        // client). To migrate to the new schema, we have to read all mutations
        // and write them back out. We preserve the existing batch IDs to guarantee
        // consistency with other object stores. Any further mutation batch IDs will
        // be auto-generated.
        u = u.next((function() {
            return function(t, e) {
                return e.store(Ii.store).ui().next((function(n) {
                    t.deleteObjectStore(Ii.store), t.createObjectStore(Ii.store, {
                        keyPath: Ii.keyPath,
                        autoIncrement: !0
                    }).createIndex(Ii.userMutationsIndex, Ii.userMutationsKeyPath, {
                        unique: !0
                    });
                    var r = e.store(Ii.store), i = n.map((function(t) {
                        return r.put(t);
                    }));
                    return lr.qn(i);
                }));
            }(t, o);
        }))), u = u.next((function() {
            !function(t) {
                t.createObjectStore(Ci.store, {
                    keyPath: Ci.keyPath
                });
            }(t);
        }))), n < 5 && r >= 5 && (u = u.next((function() {
            return i.removeAcknowledgedMutations(o);
        }))), n < 6 && r >= 6 && (u = u.next((function() {
            return function(t) {
                t.createObjectStore(Di.store);
            }(t), i.addDocumentGlobal(o);
        }))), n < 7 && r >= 7 && (u = u.next((function() {
            return i.ensureSequenceNumbers(o);
        }))), n < 8 && r >= 8 && (u = u.next((function() {
            return i.createCollectionParentIndex(t, o);
        }))), n < 9 && r >= 9 && (u = u.next((function() {
            // Multi-Tab used to manage its own changelog, but this has been moved
            // to the DbRemoteDocument object store itself. Since the previous change
            // log only contained transient data, we can drop its object store.
            !function(t) {
                t.objectStoreNames.contains("remoteDocumentChanges") && t.deleteObjectStore("remoteDocumentChanges");
            }(t), function(t) {
                var e = t.objectStore(Ai.store);
                e.createIndex(Ai.readTimeIndex, Ai.readTimeIndexPath, {
                    unique: !1
                }), e.createIndex(Ai.collectionReadTimeIndex, Ai.collectionReadTimeIndexPath, {
                    unique: !1
                });
            }(e);
        }))), n < 10 && r >= 10 && (u = u.next((function() {
            return i.rewriteCanonicalIds(o);
        }))), n < 11 && r >= 11 && (u = u.next((function() {
            !function(t) {
                t.createObjectStore(Ri.store, {
                    keyPath: Ri.keyPath
                });
            }(t), function(t) {
                t.createObjectStore(Vi.store, {
                    keyPath: Vi.keyPath
                });
            }(t);
        }))), u;
    }, t.prototype.addDocumentGlobal = function(t) {
        var e = 0;
        return t.store(Ai.store)._i((function(t, n) {
            e += vi(n);
        })).next((function() {
            var n = new Di(e);
            return t.store(Di.store).put(Di.key, n);
        }));
    }, t.prototype.removeAcknowledgedMutations = function(t) {
        var e = this, n = t.store(_i.store), r = t.store(Ii.store);
        return n.ui().next((function(n) {
            return lr.forEach(n, (function(n) {
                var i = IDBKeyRange.bound([ n.userId, -1 ], [ n.userId, n.lastAcknowledgedBatchId ]);
                return r.ui(Ii.userMutationsIndex, i).next((function(r) {
                    return lr.forEach(r, (function(r) {
                        C(r.userId === n.userId);
                        var i = ti(e.serializer, r);
                        return ui(t, n.userId, i).next((function() {}));
                    }));
                }));
            }));
        }));
    }, 
    /**
     * Ensures that every document in the remote document cache has a corresponding sentinel row
     * with a sequence number. Missing rows are given the most recently used sequence number.
     */
    t.prototype.ensureSequenceNumbers = function(t) {
        var e = t.store(ki.store), n = t.store(Ai.store);
        return t.store(Oi.store).get(Oi.key).next((function(t) {
            var r = [];
            return n._i((function(n, i) {
                var o = new $(n), u = function(t) {
                    return [ 0, Br(t) ];
                }(o);
                r.push(e.get(u).next((function(n) {
                    return n ? lr.resolve() : function(n) {
                        return e.put(new ki(0, Br(n), t.highestListenSequenceNumber));
                    }(o);
                })));
            })).next((function() {
                return lr.qn(r);
            }));
        }));
    }, t.prototype.createCollectionParentIndex = function(t, e) {
        // Create the index.
        t.createObjectStore(Si.store, {
            keyPath: Si.keyPath
        });
        var n = e.store(Si.store), r = new mi, i = function(t) {
            if (r.add(t)) {
                var e = t.K(), i = t.q();
                return n.put({
                    collectionId: e,
                    parent: Br(i)
                });
            }
        };
        // Helper to add an index entry iff we haven't already written it.
        // Index existing remote documents.
                return e.store(Ai.store)._i({
            li: !0
        }, (function(t, e) {
            var n = new $(t);
            return i(n.q());
        })).next((function() {
            return e.store(Ei.store)._i({
                li: !0
            }, (function(t, e) {
                t[0];
                var n = t[1], r = (t[2], Wr(n));
                return i(r.q());
            }));
        }));
    }, t.prototype.rewriteCanonicalIds = function(t) {
        var e = this, n = t.store(xi.store);
        return n._i((function(t, r) {
            var i = ei(r), o = ni(e.serializer, i);
            return n.put(o);
        }));
    }, t;
}(), wi = function(t, e) {
    this.seconds = t, this.nanoseconds = e;
}, bi = function(t, 
/** Whether to allow shared access from multiple tabs. */
e, n) {
    this.ownerId = t, this.allowTabSynchronization = e, this.leaseTimestampMs = n;
};

/**
 * Internal implementation of the collection-parent index exposed by MemoryIndexManager.
 * Also used for in-memory caching by IndexedDbIndexManager and initial index population
 * in indexeddb_schema.ts
 */
/**
 * Name of the IndexedDb object store.
 *
 * Note that the name 'owner' is chosen to ensure backwards compatibility with
 * older clients that only supported single locked access to the persistence
 * layer.
 */
bi.store = "owner", 
/**
     * The key string used for the single object that exists in the
     * DbPrimaryClient store.
     */
bi.key = "owner";

var _i = function(
/**
     * The normalized user ID to which this queue belongs.
     */
t, 
/**
     * An identifier for the highest numbered batch that has been acknowledged
     * by the server. All MutationBatches in this queue with batchIds less
     * than or equal to this value are considered to have been acknowledged by
     * the server.
     *
     * NOTE: this is deprecated and no longer used by the code.
     */
e, 
/**
     * A stream token that was previously sent by the server.
     *
     * See StreamingWriteRequest in datastore.proto for more details about
     * usage.
     *
     * After sending this token, earlier tokens may not be used anymore so
     * only a single stream token is retained.
     *
     * NOTE: this is deprecated and no longer used by the code.
     */
n) {
    this.userId = t, this.lastAcknowledgedBatchId = e, this.lastStreamToken = n;
};

/** Name of the IndexedDb object store.  */ _i.store = "mutationQueues", 
/** Keys are automatically assigned via the userId property. */
_i.keyPath = "userId";

/**
 * An object to be stored in the 'mutations' store in IndexedDb.
 *
 * Represents a batch of user-level mutations intended to be sent to the server
 * in a single write. Each user-level batch gets a separate DbMutationBatch
 * with a new batchId.
 */
var Ii = function(
/**
     * The normalized user ID to which this batch belongs.
     */
t, 
/**
     * An identifier for this batch, allocated using an auto-generated key.
     */
e, 
/**
     * The local write time of the batch, stored as milliseconds since the
     * epoch.
     */
n, 
/**
     * A list of "mutations" that represent a partial base state from when this
     * write batch was initially created. During local application of the write
     * batch, these baseMutations are applied prior to the real writes in order
     * to override certain document fields from the remote document cache. This
     * is necessary in the case of non-idempotent writes (e.g. `increment()`
     * transforms) to make sure that the local view of the modified documents
     * doesn't flicker if the remote document cache receives the result of the
     * non-idempotent write before the write is removed from the queue.
     *
     * These mutations are never sent to the backend.
     */
r, 
/**
     * A list of mutations to apply. All mutations will be applied atomically.
     *
     * Mutations are serialized via toMutation().
     */
i) {
    this.userId = t, this.batchId = e, this.localWriteTimeMs = n, this.baseMutations = r, 
    this.mutations = i;
};

/** Name of the IndexedDb object store.  */ Ii.store = "mutations", 
/** Keys are automatically assigned via the userId, batchId properties. */
Ii.keyPath = "batchId", 
/** The index name for lookup of mutations by user. */
Ii.userMutationsIndex = "userMutationsIndex", 
/** The user mutations index is keyed by [userId, batchId] pairs. */
Ii.userMutationsKeyPath = [ "userId", "batchId" ];

var Ei = /** @class */ function() {
    function t() {}
    /**
     * Creates a [userId] key for use in the DbDocumentMutations index to iterate
     * over all of a user's document mutations.
     */    return t.prefixForUser = function(t) {
        return [ t ];
    }, 
    /**
     * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
     * index to iterate over all at document mutations for a given path or lower.
     */
    t.prefixForPath = function(t, e) {
        return [ t, Br(e) ];
    }, 
    /**
     * Creates a full index key of [userId, encodedPath, batchId] for inserting
     * and deleting into the DbDocumentMutations index.
     */
    t.key = function(t, e, n) {
        return [ t, Br(e), n ];
    }, t;
}();

Ei.store = "documentMutations", 
/**
     * Because we store all the useful information for this store in the key,
     * there is no useful information to store as the value. The raw (unencoded)
     * path cannot be stored because IndexedDb doesn't store prototype
     * information.
     */
Ei.PLACEHOLDER = new Ei;

var Ti = function(t, e) {
    this.path = t, this.readTime = e;
}, Ni = function(t, e) {
    this.path = t, this.version = e;
}, Ai = 
// TODO: We are currently storing full document keys almost three times
// (once as part of the primary key, once - partly - as `parentPath` and once
// inside the encoded documents). During our next migration, we should
// rewrite the primary key as parentPath + document ID which would allow us
// to drop one value.
function(
/**
     * Set to an instance of DbUnknownDocument if the data for a document is
     * not known, but it is known that a document exists at the specified
     * version (e.g. it had a successful update applied to it)
     */
t, 
/**
     * Set to an instance of a DbNoDocument if it is known that no document
     * exists.
     */
e, 
/**
     * Set to an instance of a Document if there's a cached version of the
     * document.
     */
n, 
/**
     * Documents that were written to the remote document store based on
     * a write acknowledgment are marked with `hasCommittedMutations`. These
     * documents are potentially inconsistent with the backend's copy and use
     * the write's commit version as their document version.
     */
r, 
/**
     * When the document was read from the backend. Undefined for data written
     * prior to schema version 9.
     */
i, 
/**
     * The path of the collection this document is part of. Undefined for data
     * written prior to schema version 9.
     */
o) {
    this.unknownDocument = t, this.noDocument = e, this.document = n, this.hasCommittedMutations = r, 
    this.readTime = i, this.parentPath = o;
};

/**
 * Represents a document that is known to exist but whose data is unknown.
 * Stored in IndexedDb as part of a DbRemoteDocument object.
 */ Ai.store = "remoteDocuments", 
/**
     * An index that provides access to all entries sorted by read time (which
     * corresponds to the last modification time of each row).
     *
     * This index is used to provide a changelog for Multi-Tab.
     */
Ai.readTimeIndex = "readTimeIndex", Ai.readTimeIndexPath = "readTime", 
/**
     * An index that provides access to documents in a collection sorted by read
     * time.
     *
     * This index is used to allow the RemoteDocumentCache to fetch newly changed
     * documents in a collection.
     */
Ai.collectionReadTimeIndex = "collectionReadTimeIndex", Ai.collectionReadTimeIndexPath = [ "parentPath", "readTime" ];

/**
 * Contains a single entry that has metadata about the remote document cache.
 */
var Di = 
/**
     * @param byteSize Approximately the total size in bytes of all the documents in the document
     * cache.
     */
function(t) {
    this.byteSize = t;
};

Di.store = "remoteDocumentGlobal", Di.key = "remoteDocumentGlobalKey";

var xi = function(
/**
     * An auto-generated sequential numeric identifier for the query.
     *
     * Queries are stored using their canonicalId as the key, but these
     * canonicalIds can be quite long so we additionally assign a unique
     * queryId which can be used by referenced data structures (e.g.
     * indexes) to minimize the on-disk cost.
     */
t, 
/**
     * The canonical string representing this query. This is not unique.
     */
e, 
/**
     * The last readTime received from the Watch Service for this query.
     *
     * This is the same value as TargetChange.read_time in the protos.
     */
n, 
/**
     * An opaque, server-assigned token that allows watching a query to be
     * resumed after disconnecting without retransmitting all the data
     * that matches the query. The resume token essentially identifies a
     * point in time from which the server should resume sending results.
     *
     * This is related to the snapshotVersion in that the resumeToken
     * effectively also encodes that value, but the resumeToken is opaque
     * and sometimes encodes additional information.
     *
     * A consequence of this is that the resumeToken should be used when
     * asking the server to reason about where this client is in the watch
     * stream, but the client should use the snapshotVersion for its own
     * purposes.
     *
     * This is the same value as TargetChange.resume_token in the protos.
     */
r, 
/**
     * A sequence number representing the last time this query was
     * listened to, used for garbage collection purposes.
     *
     * Conventionally this would be a timestamp value, but device-local
     * clocks are unreliable and they must be able to create new listens
     * even while disconnected. Instead this should be a monotonically
     * increasing number that's incremented on each listen call.
     *
     * This is different from the queryId since the queryId is an
     * immutable identifier assigned to the Query on first use while
     * lastListenSequenceNumber is updated every time the query is
     * listened to.
     */
i, 
/**
     * Denotes the maximum snapshot version at which the associated query view
     * contained no limbo documents.  Undefined for data written prior to
     * schema version 9.
     */
o, 
/**
     * The query for this target.
     *
     * Because canonical ids are not unique we must store the actual query. We
     * use the proto to have an object we can persist without having to
     * duplicate translation logic to and from a `Query` object.
     */
u) {
    this.targetId = t, this.canonicalId = e, this.readTime = n, this.resumeToken = r, 
    this.lastListenSequenceNumber = i, this.lastLimboFreeSnapshotVersion = o, this.query = u;
};

xi.store = "targets", 
/** Keys are automatically assigned via the targetId property. */
xi.keyPath = "targetId", 
/** The name of the queryTargets index. */
xi.queryTargetsIndexName = "queryTargetsIndex", 
/**
     * The index of all canonicalIds to the targets that they match. This is not
     * a unique mapping because canonicalId does not promise a unique name for all
     * possible queries, so we append the targetId to make the mapping unique.
     */
xi.queryTargetsKeyPath = [ "canonicalId", "targetId" ];

/**
 * An object representing an association between a target and a document, or a
 * sentinel row marking the last sequence number at which a document was used.
 * Each document cached must have a corresponding sentinel row before lru
 * garbage collection is enabled.
 *
 * The target associations and sentinel rows are co-located so that orphaned
 * documents and their sequence numbers can be identified efficiently via a scan
 * of this store.
 */
var ki = function(
/**
     * The targetId identifying a target or 0 for a sentinel row.
     */
t, 
/**
     * The path to the document, as encoded in the key.
     */
e, 
/**
     * If this is a sentinel row, this should be the sequence number of the last
     * time the document specified by `path` was used. Otherwise, it should be
     * `undefined`.
     */
n) {
    this.targetId = t, this.path = e, this.sequenceNumber = n;
};

/** Name of the IndexedDb object store.  */ ki.store = "targetDocuments", 
/** Keys are automatically assigned via the targetId, path properties. */
ki.keyPath = [ "targetId", "path" ], 
/** The index name for the reverse index. */
ki.documentTargetsIndex = "documentTargetsIndex", 
/** We also need to create the reverse index for these properties. */
ki.documentTargetsKeyPath = [ "path", "targetId" ];

/**
 * A record of global state tracked across all Targets, tracked separately
 * to avoid the need for extra indexes.
 *
 * This should be kept in-sync with the proto used in the iOS client.
 */
var Oi = function(
/**
     * The highest numbered target id across all targets.
     *
     * See DbTarget.targetId.
     */
t, 
/**
     * The highest numbered lastListenSequenceNumber across all targets.
     *
     * See DbTarget.lastListenSequenceNumber.
     */
e, 
/**
     * A global snapshot version representing the last consistent snapshot we
     * received from the backend. This is monotonically increasing and any
     * snapshots received from the backend prior to this version (e.g. for
     * targets resumed with a resumeToken) should be suppressed (buffered)
     * until the backend has caught up to this snapshot version again. This
     * prevents our cache from ever going backwards in time.
     */
n, 
/**
     * The number of targets persisted.
     */
r) {
    this.highestTargetId = t, this.highestListenSequenceNumber = e, this.lastRemoteSnapshotVersion = n, 
    this.targetCount = r;
};

/**
 * The key string used for the single object that exists in the
 * DbTargetGlobal store.
 */ Oi.key = "targetGlobalKey", Oi.store = "targetGlobal";

/**
 * An object representing an association between a Collection id (e.g. 'messages')
 * to a parent path (e.g. '/chats/123') that contains it as a (sub)collection.
 * This is used to efficiently find all collections to query when performing
 * a Collection Group query.
 */
var Si = function(
/**
     * The collectionId (e.g. 'messages')
     */
t, 
/**
     * The path to the parent (either a document location or an empty path for
     * a root-level collection).
     */
e) {
    this.collectionId = t, this.parent = e;
};

/** Name of the IndexedDb object store. */ function Pi(t) {
    t.createObjectStore(ki.store, {
        keyPath: ki.keyPath
    }).createIndex(ki.documentTargetsIndex, ki.documentTargetsKeyPath, {
        unique: !0
    }), 
    // NOTE: This is unique only because the TargetId is the suffix.
    t.createObjectStore(xi.store, {
        keyPath: xi.keyPath
    }).createIndex(xi.queryTargetsIndexName, xi.queryTargetsKeyPath, {
        unique: !0
    }), t.createObjectStore(Oi.store);
}

Si.store = "collectionParents", 
/** Keys are automatically assigned via the collectionId, parent properties. */
Si.keyPath = [ "collectionId", "parent" ];

var Ci = function(
// Note: Previous schema versions included a field
// "lastProcessedDocumentChangeId". Don't use anymore.
/** The auto-generated client id assigned at client startup. */
t, 
/** The last time this state was updated. */
e, 
/** Whether the client's network connection is enabled. */
n, 
/** Whether this client is running in a foreground tab. */
r) {
    this.clientId = t, this.updateTimeMs = e, this.networkEnabled = n, this.inForeground = r;
};

/** Name of the IndexedDb object store. */ Ci.store = "clientMetadata", 
/** Keys are automatically assigned via the clientId properties. */
Ci.keyPath = "clientId";

var Ri = function(
/** The ID of the loaded bundle. */
t, 
/** The create time of the loaded bundle. */
e, 
/** The schema version of the loaded bundle. */
n) {
    this.bundleId = t, this.createTime = e, this.version = n;
};

/** Name of the IndexedDb object store. */ Ri.store = "bundles", Ri.keyPath = "bundleId";

var Vi = function(
/** The name of the query. */
t, 
/** The read time of the results saved in the bundle from the named query. */
e, 
/** The query saved in the bundle. */
n) {
    this.name = t, this.readTime = e, this.bundledQuery = n;
};

/** Name of the IndexedDb object store. */ Vi.store = "namedQueries", Vi.keyPath = "name";

var Li = __spreadArrays(__spreadArrays(__spreadArrays(__spreadArrays([ _i.store, Ii.store, Ei.store, Ai.store, xi.store, bi.store, Oi.store, ki.store ], [ Ci.store ]), [ Di.store ]), [ Si.store ]), [ Ri.store, Vi.store ]), Ui = /** @class */ function() {
    function t(t) {
        this.serializer = t;
    }
    return t.prototype.ro = function(t, e) {
        return Mi(t).get(e).next((function(t) {
            if (t) return {
                id: (e = t).bundleId,
                createTime: Zr(e.createTime),
                version: e.version
            };
            /** Encodes a DbBundle to a Bundle. */            var e;
            /** Encodes a BundleMetadata to a DbBundle. */        }));
    }, t.prototype.oo = function(t, e) {
        return Mi(t).put({
            bundleId: (n = e).id,
            createTime: Xr(be(n.createTime)),
            version: n.version
        });
        var n;
        /** Encodes a DbNamedQuery to a NamedQuery. */    }, t.prototype.co = function(t, e) {
        return qi(t).get(e).next((function(t) {
            if (t) return {
                name: (e = t).name,
                query: ri(e.bundledQuery),
                readTime: Zr(e.readTime)
            };
            var e;
            /** Encodes a NamedQuery from a bundle proto to a DbNamedQuery. */        }));
    }, t.prototype.uo = function(t, e) {
        return qi(t).put(function(t) {
            return {
                name: t.name,
                readTime: Xr(be(t.readTime)),
                bundledQuery: t.bundledQuery
            };
        }(e));
    }, t;
}();

// V2 is no longer usable (see comment at top of file)
// Visible for testing
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Helper to get a typed SimpleDbStore for the bundles object store.
 */
function Mi(t) {
    return Yi.Ys(t, Ri.store);
}

/**
 * Helper to get a typed SimpleDbStore for the namedQueries object store.
 */ function qi(t) {
    return Yi.Ys(t, Vi.store);
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * A persisted implementation of IndexManager.
 */ var ji = /** @class */ function() {
    function t() {
        /**
         * An in-memory copy of the index entries we've already written since the SDK
         * launched. Used to avoid re-writing the same entry repeatedly.
         *
         * This is *NOT* a complete cache of what's in persistence and so can never be used to
         * satisfy reads.
         */
        this.ao = new mi;
    }
    /**
     * Adds a new entry to the collection parent index.
     *
     * Repeated calls for the same collectionPath should be avoided within a
     * transaction as IndexedDbIndexManager only caches writes once a transaction
     * has been committed.
     */    return t.prototype.Dr = function(t, e) {
        var n = this;
        if (!this.ao.has(e)) {
            var r = e.K(), i = e.q();
            t.es((function() {
                // Add the collection to the in memory cache only if the transaction was
                // successfully committed.
                n.ao.add(e);
            }));
            var o = {
                collectionId: r,
                parent: Br(i)
            };
            return Fi(t).put(o);
        }
        return lr.resolve();
    }, t.prototype.As = function(t, e) {
        var n = [], r = IDBKeyRange.bound([ e, "" ], [ W$1(e), "" ], 
        /*lowerOpen=*/ !1, 
        /*upperOpen=*/ !0);
        return Fi(t).ui(r).next((function(t) {
            for (var r = 0, i = t; r < i.length; r++) {
                var o = i[r];
                // This collectionId guard shouldn't be necessary (and isn't as long
                // as we're running in a real browser), but there's a bug in
                // indexeddbshim that breaks our range in our tests running in node:
                // https://github.com/axemclion/IndexedDBShim/issues/334
                                if (o.collectionId !== e) break;
                n.push(Wr(o.parent));
            }
            return n;
        }));
    }, t;
}();

/**
 * Helper to get a typed SimpleDbStore for the collectionParents
 * document store.
 */ function Fi(t) {
    return Yi.Ys(t, Si.store);
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** Offset to ensure non-overlapping target ids. */
/**
 * Generates monotonically increasing target IDs for sending targets to the
 * watch stream.
 *
 * The client constructs two generators, one for the target cache, and one for
 * for the sync engine (to generate limbo documents targets). These
 * generators produce non-overlapping IDs (by using even and odd IDs
 * respectively).
 *
 * By separating the target ID space, the query cache can generate target IDs
 * that persist across client restarts, while sync engine can independently
 * generate in-memory target IDs that are transient and can be reused after a
 * restart.
 */ var zi = /** @class */ function() {
    function t(t) {
        this.ho = t;
    }
    return t.prototype.next = function() {
        return this.ho += 2, this.ho;
    }, t.lo = function() {
        // The target cache generator must return '2' in its first call to `next()`
        // as there is no differentiation in the protocol layer between an unset
        // number and the number '0'. If we were to sent a target with target ID
        // '0', the backend would consider it unset and replace it with its own ID.
        return new t(0);
    }, t._o = function() {
        // Sync engine assigns target IDs for limbo document detection.
        return new t(-1);
    }, t;
}(), Bi = /** @class */ function() {
    function t(t, e) {
        this.Vr = t, this.serializer = e;
    }
    // PORTING NOTE: We don't cache global metadata for the target cache, since
    // some of it (in particular `highestTargetId`) can be modified by secondary
    // tabs. We could perhaps be more granular (and e.g. still cache
    // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
    // to IndexedDb whenever we need to read metadata. We can revisit if it turns
    // out to have a meaningful performance impact.
        return t.prototype.fo = function(t) {
        var e = this;
        return this.wo(t).next((function(n) {
            var r = new zi(n.highestTargetId);
            return n.highestTargetId = r.next(), e.Eo(t, n).next((function() {
                return n.highestTargetId;
            }));
        }));
    }, t.prototype.To = function(t) {
        return this.wo(t).next((function(t) {
            return H$1.N(new Q$1(t.lastRemoteSnapshotVersion.seconds, t.lastRemoteSnapshotVersion.nanoseconds));
        }));
    }, t.prototype.Io = function(t) {
        return this.wo(t).next((function(t) {
            return t.highestListenSequenceNumber;
        }));
    }, t.prototype.mo = function(t, e, n) {
        var r = this;
        return this.wo(t).next((function(i) {
            return i.highestListenSequenceNumber = e, n && (i.lastRemoteSnapshotVersion = n.M()), 
            e > i.highestListenSequenceNumber && (i.highestListenSequenceNumber = e), r.Eo(t, i);
        }));
    }, t.prototype.Ao = function(t, e) {
        var n = this;
        return this.Ro(t, e).next((function() {
            return n.wo(t).next((function(r) {
                return r.targetCount += 1, n.Po(e, r), n.Eo(t, r);
            }));
        }));
    }, t.prototype.yo = function(t, e) {
        return this.Ro(t, e);
    }, t.prototype.Vo = function(t, e) {
        var n = this;
        return this.po(t, e.targetId).next((function() {
            return Gi(t).delete(e.targetId);
        })).next((function() {
            return n.wo(t);
        })).next((function(e) {
            return C(e.targetCount > 0), e.targetCount -= 1, n.Eo(t, e);
        }));
    }, 
    /**
     * Drops any targets with sequence number less than or equal to the upper bound, excepting those
     * present in `activeTargetIds`. Document associations for the removed targets are also removed.
     * Returns the number of targets removed.
     */
    t.prototype.mr = function(t, e, n) {
        var r = this, i = 0, o = [];
        return Gi(t)._i((function(u, s) {
            var a = ei(s);
            a.sequenceNumber <= e && null === n.get(a.targetId) && (i++, o.push(r.Vo(t, a)));
        })).next((function() {
            return lr.qn(o);
        })).next((function() {
            return i;
        }));
    }, 
    /**
     * Call provided function with each `TargetData` that we have cached.
     */
    t.prototype.Ue = function(t, e) {
        return Gi(t)._i((function(t, n) {
            var r = ei(n);
            e(r);
        }));
    }, t.prototype.wo = function(t) {
        return Ki(t).get(Oi.key).next((function(t) {
            return C(null !== t), t;
        }));
    }, t.prototype.Eo = function(t, e) {
        return Ki(t).put(Oi.key, e);
    }, t.prototype.Ro = function(t, e) {
        return Gi(t).put(ni(this.serializer, e));
    }, 
    /**
     * In-place updates the provided metadata to account for values in the given
     * TargetData. Saving is done separately. Returns true if there were any
     * changes to the metadata.
     */
    t.prototype.Po = function(t, e) {
        var n = !1;
        return t.targetId > e.highestTargetId && (e.highestTargetId = t.targetId, n = !0), 
        t.sequenceNumber > e.highestListenSequenceNumber && (e.highestListenSequenceNumber = t.sequenceNumber, 
        n = !0), n;
    }, t.prototype.vo = function(t) {
        return this.wo(t).next((function(t) {
            return t.targetCount;
        }));
    }, t.prototype.bo = function(t, e) {
        // Iterating by the canonicalId may yield more than one result because
        // canonicalId values are not required to be unique per target. This query
        // depends on the queryTargets index to be efficient.
        var n = ot(e), r = IDBKeyRange.bound([ n, Number.NEGATIVE_INFINITY ], [ n, Number.POSITIVE_INFINITY ]), i = null;
        return Gi(t)._i({
            range: r,
            index: xi.queryTargetsIndexName
        }, (function(t, n, r) {
            var o = ei(n);
            // After finding a potential match, check that the target is
            // actually equal to the requested target.
                        ut(e, o.target) && (i = o, r.done());
        })).next((function() {
            return i;
        }));
    }, t.prototype.So = function(t, e, n) {
        var r = this, i = [], o = Wi(t);
        // PORTING NOTE: The reverse index (documentsTargets) is maintained by
        // IndexedDb.
                return e.forEach((function(e) {
            var u = Br(e.path);
            i.push(o.put(new ki(n, u))), i.push(r.Vr.Do(t, n, e));
        })), lr.qn(i);
    }, t.prototype.Co = function(t, e, n) {
        var r = this, i = Wi(t);
        // PORTING NOTE: The reverse index (documentsTargets) is maintained by
        // IndexedDb.
                return lr.forEach(e, (function(e) {
            var o = Br(e.path);
            return lr.qn([ i.delete([ n, o ]), r.Vr.No(t, n, e) ]);
        }));
    }, t.prototype.po = function(t, e) {
        var n = Wi(t), r = IDBKeyRange.bound([ e ], [ e + 1 ], 
        /*lowerOpen=*/ !1, 
        /*upperOpen=*/ !0);
        return n.delete(r);
    }, t.prototype.xo = function(t, e) {
        var n = IDBKeyRange.bound([ e ], [ e + 1 ], 
        /*lowerOpen=*/ !1, 
        /*upperOpen=*/ !0), r = Wi(t), i = Dt();
        return r._i({
            range: n,
            li: !0
        }, (function(t, e, n) {
            var r = Wr(t[1]), o = new Z$1(r);
            i = i.add(o);
        })).next((function() {
            return i;
        }));
    }, t.prototype.Qr = function(t, e) {
        var n = Br(e.path), r = IDBKeyRange.bound([ n ], [ W$1(n) ], 
        /*lowerOpen=*/ !1, 
        /*upperOpen=*/ !0), i = 0;
        return Wi(t)._i({
            index: ki.documentTargetsIndex,
            li: !0,
            range: r
        }, (function(t, e, n) {
            var r = t[0];
            // Having a sentinel row for a document does not count as containing that document;
            // For the target cache, containing the document means the document is part of some
            // target.
                        t[1];
            0 !== r && (i++, n.done());
        })).next((function() {
            return i > 0;
        }));
    }, 
    /**
     * Looks up a TargetData entry by target ID.
     *
     * @param targetId The target ID of the TargetData entry to look up.
     * @return The cached TargetData entry, or null if the cache has no entry for
     * the target.
     */
    // PORTING NOTE: Multi-tab only.
    t.prototype.Ze = function(t, e) {
        return Gi(t).get(e).next((function(t) {
            return t ? ei(t) : null;
        }));
    }, t;
}();

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Helper to get a typed SimpleDbStore for the queries object store.
 */
function Gi(t) {
    return Yi.Ys(t, xi.store);
}

/**
 * Helper to get a typed SimpleDbStore for the target globals object store.
 */ function Ki(t) {
    return Yi.Ys(t, Oi.store);
}

/**
 * Helper to get a typed SimpleDbStore for the document target object store.
 */ function Wi(t) {
    return Yi.Ys(t, ki.store);
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var Qi = "Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.", Hi = /** @class */ function(e) {
    function n(t, n) {
        var r = this;
        return (r = e.call(this) || this).Lr = t, r.Fo = n, r;
    }
    return __extends(n, e), n;
}(gr), Yi = /** @class */ function() {
    function t(
    /**
     * Whether to synchronize the in-memory state of multiple tabs and share
     * access to local persistence.
     */
    e, n, r, i, o, u, s, a, c, 
    /**
     * If set to true, forcefully obtains database access. Existing tabs will
     * no longer be able to access IndexedDB.
     */
    h) {
        if (this.allowTabSynchronization = e, this.persistenceKey = n, this.clientId = r, 
        this.Cs = o, this.window = u, this.document = s, this.Oo = c, this.Mo = h, this.ko = null, 
        this.$o = !1, this.isPrimary = !1, this.networkEnabled = !0, 
        /** Our window.unload handler, if registered. */
        this.Lo = null, this.inForeground = !1, 
        /** Our 'visibilitychange' listener if registered. */
        this.Bo = null, 
        /** The client metadata refresh task. */
        this.qo = null, 
        /** The last time we garbage collected the client metadata object store. */
        this.Uo = Number.NEGATIVE_INFINITY, 
        /** A listener to notify on primary state changes. */
        this.Qo = function(t) {
            return Promise.resolve();
        }, !t.Gs()) throw new L$1(V$1.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
        this.Vr = new Xi(this, i), this.Ko = n + "main", this.serializer = new Qr(a), this.Wo = new Er(this.Ko, 11, new gi(this.serializer)), 
        this.jo = new Bi(this.Vr, this.serializer), this.os = new ji, this.ss = function(t, e) {
            return new hi(t, e);
        }(this.serializer, this.os), this.Go = new Ui(this.serializer), this.window && this.window.localStorage ? this.zo = this.window.localStorage : (this.zo = null, 
        !1 === h && k$1("IndexedDbPersistence", "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."));
    }
    return t.Ys = function(t, e) {
        if (t instanceof Hi) return Er.Ys(t.Lr, e);
        throw P$1();
    }, 
    /**
     * Attempt to start IndexedDb persistence.
     *
     * @return {Promise<void>} Whether persistence was enabled.
     */
    t.prototype.start = function() {
        var t = this;
        // NOTE: This is expected to fail sometimes (in the case of another tab
        // already having the persistence lock), so it's the first thing we should
        // do.
                return this.Ho().then((function() {
            if (!t.isPrimary && !t.allowTabSynchronization) 
            // Fail `start()` if `synchronizeTabs` is disabled and we cannot
            // obtain the primary lease.
            throw new L$1(V$1.FAILED_PRECONDITION, Qi);
            return t.Jo(), t.Yo(), t.Xo(), t.runTransaction("getHighestListenSequenceNumber", "readonly", (function(e) {
                return t.jo.Io(e);
            }));
        })).then((function(e) {
            t.ko = new _r(e, t.Oo);
        })).then((function() {
            t.$o = !0;
        })).catch((function(e) {
            return t.Wo && t.Wo.close(), Promise.reject(e);
        }));
    }, 
    /**
     * Registers a listener that gets called when the primary state of the
     * instance changes. Upon registering, this listener is invoked immediately
     * with the current primary state.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */
    t.prototype.Zo = function(t) {
        var r = this;
        return this.Qo = function(i) {
            return __awaiter(r, void 0, void 0, (function() {
                return __generator(this, (function(e) {
                    return this.lr ? [ 2 /*return*/ , t(i) ] : [ 2 /*return*/ ];
                }));
            }));
        }, t(this.isPrimary);
    }, 
    /**
     * Registers a listener that gets called when the database receives a
     * version change event indicating that it has deleted.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */
    t.prototype.tc = function(t) {
        var r = this;
        this.Wo.ti((function(i) {
            return __awaiter(r, void 0, void 0, (function() {
                return __generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        return null === i.newVersion ? [ 4 /*yield*/ , t() ] : [ 3 /*break*/ , 2 ];

                      case 1:
                        e.sent(), e.label = 2;

                      case 2:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }));
    }, 
    /**
     * Adjusts the current network state in the client's metadata, potentially
     * affecting the primary lease.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */
    t.prototype.ec = function(t) {
        var r = this;
        this.networkEnabled !== t && (this.networkEnabled = t, 
        // Schedule a primary lease refresh for immediate execution. The eventual
        // lease update will be propagated via `primaryStateListener`.
        this.Cs.Ri((function() {
            return __awaiter(r, void 0, void 0, (function() {
                return __generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        return this.lr ? [ 4 /*yield*/ , this.Ho() ] : [ 3 /*break*/ , 2 ];

                      case 1:
                        t.sent(), t.label = 2;

                      case 2:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        })));
    }, 
    /**
     * Updates the client metadata in IndexedDb and attempts to either obtain or
     * extend the primary lease for the local client. Asynchronously notifies the
     * primary state listener if the client either newly obtained or released its
     * primary lease.
     */
    t.prototype.Ho = function() {
        var t = this;
        return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", (function(e) {
            return Ji(e).put(new Ci(t.clientId, Date.now(), t.networkEnabled, t.inForeground)).next((function() {
                if (t.isPrimary) return t.nc(e).next((function(e) {
                    e || (t.isPrimary = !1, t.Cs.Mi((function() {
                        return t.Qo(!1);
                    })));
                }));
            })).next((function() {
                return t.sc(e);
            })).next((function(n) {
                return t.isPrimary && !n ? t.ic(e).next((function() {
                    return !1;
                })) : !!n && t.rc(e).next((function() {
                    return !0;
                }));
            }));
        })).catch((function(e) {
            if (Ar(e)) 
            // Proceed with the existing state. Any subsequent access to
            // IndexedDB will verify the lease.
            return x$1("IndexedDbPersistence", "Failed to extend owner lease: ", e), t.isPrimary;
            if (!t.allowTabSynchronization) throw e;
            return x$1("IndexedDbPersistence", "Releasing owner lease after error during lease refresh", e), 
            /* isPrimary= */ !1;
        })).then((function(e) {
            t.isPrimary !== e && t.Cs.Mi((function() {
                return t.Qo(e);
            })), t.isPrimary = e;
        }));
    }, t.prototype.nc = function(t) {
        var e = this;
        return $i(t).get(bi.key).next((function(t) {
            return lr.resolve(e.oc(t));
        }));
    }, t.prototype.cc = function(t) {
        return Ji(t).delete(this.clientId);
    }, 
    /**
     * If the garbage collection threshold has passed, prunes the
     * RemoteDocumentChanges and the ClientMetadata store based on the last update
     * time of all clients.
     */
    t.prototype.uc = function() {
        return __awaiter(this, void 0, void 0, (function() {
            var e, r, i, o, u = this;
            return __generator(this, (function(n) {
                switch (n.label) {
                  case 0:
                    return !this.isPrimary || this.ac(this.Uo, 18e5) ? [ 3 /*break*/ , 2 ] : (this.Uo = Date.now(), 
                    [ 4 /*yield*/ , this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", (function(e) {
                        var n = t.Ys(e, Ci.store);
                        return n.ui().next((function(t) {
                            var e = u.hc(t, 18e5), r = t.filter((function(t) {
                                return -1 === e.indexOf(t);
                            }));
                            // Delete metadata for clients that are no longer considered active.
                                                        return lr.forEach(r, (function(t) {
                                return n.delete(t.clientId);
                            })).next((function() {
                                return r;
                            }));
                        }));
                    })).catch((function() {
                        return [];
                    })) ]);

                  case 1:
                    // Delete potential leftover entries that may continue to mark the
                    // inactive clients as zombied in LocalStorage.
                    // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for
                    // the client atomically, but we can't. So we opt to delete the IndexedDb
                    // entries first to avoid potentially reviving a zombied client.
                    if (e = n.sent(), this.zo) for (r = 0, i = e; r < i.length; r++) o = i[r], this.zo.removeItem(this.lc(o.clientId));
                    n.label = 2;

                  case 2:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    /**
     * Schedules a recurring timer to update the client metadata and to either
     * extend or acquire the primary lease if the client is eligible.
     */
    t.prototype.Xo = function() {
        var t = this;
        this.qo = this.Cs.Us("client_metadata_refresh" /* ClientMetadataRefresh */ , 4e3, (function() {
            return t.Ho().then((function() {
                return t.uc();
            })).then((function() {
                return t.Xo();
            }));
        }));
    }, 
    /** Checks whether `client` is the local client. */ t.prototype.oc = function(t) {
        return !!t && t.ownerId === this.clientId;
    }, 
    /**
     * Evaluate the state of all active clients and determine whether the local
     * client is or can act as the holder of the primary lease. Returns whether
     * the client is eligible for the lease, but does not actually acquire it.
     * May return 'false' even if there is no active leaseholder and another
     * (foreground) client should become leaseholder instead.
     */
    t.prototype.sc = function(t) {
        var e = this;
        return this.Mo ? lr.resolve(!0) : $i(t).get(bi.key).next((function(n) {
            // A client is eligible for the primary lease if:
            // - its network is enabled and the client's tab is in the foreground.
            // - its network is enabled and no other client's tab is in the
            //   foreground.
            // - every clients network is disabled and the client's tab is in the
            //   foreground.
            // - every clients network is disabled and no other client's tab is in
            //   the foreground.
            // - the `forceOwningTab` setting was passed in.
            if (null !== n && e.ac(n.leaseTimestampMs, 5e3) && !e._c(n.ownerId)) {
                if (e.oc(n) && e.networkEnabled) return !0;
                if (!e.oc(n)) {
                    if (!n.allowTabSynchronization) 
                    // Fail the `canActAsPrimary` check if the current leaseholder has
                    // not opted into multi-tab synchronization. If this happens at
                    // client startup, we reject the Promise returned by
                    // `enablePersistence()` and the user can continue to use Firestore
                    // with in-memory persistence.
                    // If this fails during a lease refresh, we will instead block the
                    // AsyncQueue from executing further operations. Note that this is
                    // acceptable since mixing & matching different `synchronizeTabs`
                    // settings is not supported.
                    // TODO(b/114226234): Remove this check when `synchronizeTabs` can
                    // no longer be turned off.
                    throw new L$1(V$1.FAILED_PRECONDITION, Qi);
                    return !1;
                }
            }
            return !(!e.networkEnabled || !e.inForeground) || Ji(t).ui().next((function(t) {
                return void 0 === e.hc(t, 5e3).find((function(t) {
                    if (e.clientId !== t.clientId) {
                        var n = !e.networkEnabled && t.networkEnabled, r = !e.inForeground && t.inForeground, i = e.networkEnabled === t.networkEnabled;
                        if (n || r && i) return !0;
                    }
                    return !1;
                }));
            }));
        })).next((function(t) {
            return e.isPrimary !== t && x$1("IndexedDbPersistence", "Client " + (t ? "is" : "is not") + " eligible for a primary lease."), 
            t;
        }));
    }, t.prototype.fc = function() {
        return __awaiter(this, void 0, void 0, (function() {
            var t = this;
            return __generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    // Use `SimpleDb.runTransaction` directly to avoid failing if another tab
                    // has obtained the primary lease.
                    // The shutdown() operations are idempotent and can be called even when
                    // start() aborted (e.g. because it couldn't acquire the persistence lease).
                    return this.$o = !1, this.dc(), this.qo && (this.qo.cancel(), this.qo = null), this.wc(), 
                    this.Ec(), [ 4 /*yield*/ , this.Wo.runTransaction("shutdown", "readwrite", [ bi.store, Ci.store ], (function(e) {
                        var n = new Hi(e, _r.Ds);
                        return t.ic(n).next((function() {
                            return t.cc(n);
                        }));
                    })) ];

                  case 1:
                    // The shutdown() operations are idempotent and can be called even when
                    // start() aborted (e.g. because it couldn't acquire the persistence lease).
                    // Use `SimpleDb.runTransaction` directly to avoid failing if another tab
                    // has obtained the primary lease.
                    return e.sent(), this.Wo.close(), 
                    // Remove the entry marking the client as zombied from LocalStorage since
                    // we successfully deleted its metadata from IndexedDb.
                    this.Tc(), [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    /**
     * Returns clients that are not zombied and have an updateTime within the
     * provided threshold.
     */
    t.prototype.hc = function(t, e) {
        var n = this;
        return t.filter((function(t) {
            return n.ac(t.updateTimeMs, e) && !n._c(t.clientId);
        }));
    }, 
    /**
     * Returns the IDs of the clients that are currently active. If multi-tab
     * is not supported, returns an array that only contains the local client's
     * ID.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */
    t.prototype.Ic = function() {
        var t = this;
        return this.runTransaction("getActiveClients", "readonly", (function(e) {
            return Ji(e).ui().next((function(e) {
                return t.hc(e, 18e5).map((function(t) {
                    return t.clientId;
                }));
            }));
        }));
    }, Object.defineProperty(t.prototype, "lr", {
        get: function() {
            return this.$o;
        },
        enumerable: !1,
        configurable: !0
    }), t.prototype.mc = function(t) {
        return ii.vr(t, this.serializer, this.os, this.Vr);
    }, t.prototype.Ac = function() {
        return this.jo;
    }, t.prototype.Rc = function() {
        return this.ss;
    }, t.prototype.Pc = function() {
        return this.os;
    }, t.prototype.gc = function() {
        return this.Go;
    }, t.prototype.runTransaction = function(t, e, n) {
        var r = this;
        x$1("IndexedDbPersistence", "Starting transaction:", t);
        var i, o = "readonly" === e ? "readonly" : "readwrite";
        // Do all transactions as readwrite against all object stores, since we
        // are the only reader/writer.
        return this.Wo.runTransaction(t, o, Li, (function(o) {
            return i = new Hi(o, r.ko ? r.ko.next() : _r.Ds), "readwrite-primary" === e ? r.nc(i).next((function(t) {
                return !!t || r.sc(i);
            })).next((function(e) {
                if (!e) throw k$1("Failed to obtain primary lease for action '" + t + "'."), r.isPrimary = !1, 
                r.Cs.Mi((function() {
                    return r.Qo(!1);
                })), new L$1(V$1.FAILED_PRECONDITION, mr);
                return n(i);
            })).next((function(t) {
                return r.rc(i).next((function() {
                    return t;
                }));
            })) : r.yc(i).next((function() {
                return n(i);
            }));
        })).then((function(t) {
            return i.ns(), t;
        }));
    }, 
    /**
     * Verifies that the current tab is the primary leaseholder or alternatively
     * that the leaseholder has opted into multi-tab synchronization.
     */
    // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
    // be turned off.
    t.prototype.yc = function(t) {
        var e = this;
        return $i(t).get(bi.key).next((function(t) {
            if (null !== t && e.ac(t.leaseTimestampMs, 5e3) && !e._c(t.ownerId) && !e.oc(t) && !(e.Mo || e.allowTabSynchronization && t.allowTabSynchronization)) throw new L$1(V$1.FAILED_PRECONDITION, Qi);
        }));
    }, 
    /**
     * Obtains or extends the new primary lease for the local client. This
     * method does not verify that the client is eligible for this lease.
     */
    t.prototype.rc = function(t) {
        var e = new bi(this.clientId, this.allowTabSynchronization, Date.now());
        return $i(t).put(bi.key, e);
    }, t.Gs = function() {
        return Er.Gs();
    }, 
    /** Checks the primary lease and removes it if we are the current primary. */ t.prototype.ic = function(t) {
        var e = this, n = $i(t);
        return n.get(bi.key).next((function(t) {
            return e.oc(t) ? (x$1("IndexedDbPersistence", "Releasing primary lease."), n.delete(bi.key)) : lr.resolve();
        }));
    }, 
    /** Verifies that `updateTimeMs` is within `maxAgeMs`. */ t.prototype.ac = function(t, e) {
        var n = Date.now();
        return !(t < n - e || t > n && (k$1("Detected an update time that is in the future: " + t + " > " + n), 
        1));
    }, t.prototype.Jo = function() {
        var t = this;
        null !== this.document && "function" == typeof this.document.addEventListener && (this.Bo = function() {
            t.Cs.Ri((function() {
                return t.inForeground = "visible" === t.document.visibilityState, t.Ho();
            }));
        }, this.document.addEventListener("visibilitychange", this.Bo), this.inForeground = "visible" === this.document.visibilityState);
    }, t.prototype.wc = function() {
        this.Bo && (this.document.removeEventListener("visibilitychange", this.Bo), this.Bo = null);
    }, 
    /**
     * Attaches a window.unload handler that will synchronously write our
     * clientId to a "zombie client id" location in LocalStorage. This can be used
     * by tabs trying to acquire the primary lease to determine that the lease
     * is no longer valid even if the timestamp is recent. This is particularly
     * important for the refresh case (so the tab correctly re-acquires the
     * primary lease). LocalStorage is used for this rather than IndexedDb because
     * it is a synchronous API and so can be used reliably from  an unload
     * handler.
     */
    t.prototype.Yo = function() {
        var t, e = this;
        "function" == typeof (null === (t = this.window) || void 0 === t ? void 0 : t.addEventListener) && (this.Lo = function() {
            // Note: In theory, this should be scheduled on the AsyncQueue since it
            // accesses internal state. We execute this code directly during shutdown
            // to make sure it gets a chance to run.
            e.dc(), e.Cs.Ri((function() {
                return e.fc();
            }));
        }, this.window.addEventListener("unload", this.Lo));
    }, t.prototype.Ec = function() {
        this.Lo && (this.window.removeEventListener("unload", this.Lo), this.Lo = null);
    }, 
    /**
     * Returns whether a client is "zombied" based on its LocalStorage entry.
     * Clients become zombied when their tab closes without running all of the
     * cleanup logic in `shutdown()`.
     */
    t.prototype._c = function(t) {
        var e;
        try {
            var n = null !== (null === (e = this.zo) || void 0 === e ? void 0 : e.getItem(this.lc(t)));
            return x$1("IndexedDbPersistence", "Client '" + t + "' " + (n ? "is" : "is not") + " zombied in LocalStorage"), 
            n;
        } catch (t) {
            // Gracefully handle if LocalStorage isn't working.
            return k$1("IndexedDbPersistence", "Failed to get zombied client id.", t), !1;
        }
    }, 
    /**
     * Record client as zombied (a client that had its tab closed). Zombied
     * clients are ignored during primary tab selection.
     */
    t.prototype.dc = function() {
        if (this.zo) try {
            this.zo.setItem(this.lc(this.clientId), String(Date.now()));
        } catch (t) {
            // Gracefully handle if LocalStorage isn't available / working.
            k$1("Failed to set zombie client id.", t);
        }
    }, 
    /** Removes the zombied client entry if it exists. */ t.prototype.Tc = function() {
        if (this.zo) try {
            this.zo.removeItem(this.lc(this.clientId));
        } catch (t) {
            // Ignore
        }
    }, t.prototype.lc = function(t) {
        return "firestore_zombie_" + this.persistenceKey + "_" + t;
    }, t;
}();

/**
 * Oldest acceptable age in milliseconds for client metadata before the client
 * is considered inactive and its associated data is garbage collected.
 */
/**
 * Helper to get a typed SimpleDbStore for the primary client object store.
 */
function $i(t) {
    return Yi.Ys(t, bi.store);
}

/**
 * Helper to get a typed SimpleDbStore for the client metadata object store.
 */ function Ji(t) {
    return Yi.Ys(t, Ci.store);
}

/** Provides LRU functionality for IndexedDB persistence. */ var Xi = /** @class */ function() {
    function t(t, e) {
        this.db = t, this.cr = new zr(this, e);
    }
    return t.prototype.Er = function(t) {
        var e = this.Vc(t);
        return this.db.Ac().vo(t).next((function(t) {
            return e.next((function(e) {
                return t + e;
            }));
        }));
    }, t.prototype.Vc = function(t) {
        var e = 0;
        return this.Ir(t, (function(t) {
            e++;
        })).next((function() {
            return e;
        }));
    }, t.prototype.Ue = function(t, e) {
        return this.db.Ac().Ue(t, e);
    }, t.prototype.Ir = function(t, e) {
        return this.vc(t, (function(t, n) {
            return e(n);
        }));
    }, t.prototype.Do = function(t, e, n) {
        return Zi(t, n);
    }, t.prototype.No = function(t, e, n) {
        return Zi(t, n);
    }, t.prototype.mr = function(t, e, n) {
        return this.db.Ac().mr(t, e, n);
    }, t.prototype.qr = function(t, e) {
        return Zi(t, e);
    }, 
    /**
     * Returns true if anything would prevent this document from being garbage
     * collected, given that the document in question is not present in any
     * targets and has a sequence number less than or equal to the upper bound for
     * the collection run.
     */
    t.prototype.bc = function(t, e) {
        return function(t, e) {
            var n = !1;
            return ci(t).fi((function(r) {
                return oi(t, r, e).next((function(t) {
                    return t && (n = !0), lr.resolve(!t);
                }));
            })).next((function() {
                return n;
            }));
        }(t, e);
    }, t.prototype.Ar = function(t, e) {
        var n = this, r = this.db.Rc().Xr(), i = [], o = 0;
        return this.vc(t, (function(u, s) {
            if (s <= e) {
                var a = n.bc(t, u).next((function(e) {
                    if (!e) 
                    // Our size accounting requires us to read all documents before
                    // removing them.
                    return o++, r.Jn(t, u).next((function() {
                        return r.Hn(u), Wi(t).delete([ 0, Br(u.path) ]);
                    }));
                }));
                i.push(a);
            }
        })).next((function() {
            return lr.qn(i);
        })).next((function() {
            return r.apply(t);
        })).next((function() {
            return o;
        }));
    }, t.prototype.removeTarget = function(t, e) {
        var n = e.dt(t.Fo);
        return this.db.Ac().yo(t, n);
    }, t.prototype.Sc = function(t, e) {
        return Zi(t, e);
    }, 
    /**
     * Call provided function for each document in the cache that is 'orphaned'. Orphaned
     * means not a part of any target, so the only entry in the target-document index for
     * that document will be the sentinel row (targetId 0), which will also have the sequence
     * number for the last time the document was accessed.
     */
    t.prototype.vc = function(t, e) {
        var n, r = Wi(t), i = _r.Ds;
        return r._i({
            index: ki.documentTargetsIndex
        }, (function(t, r) {
            var o = t[0], u = (t[1], r.path), s = r.sequenceNumber;
            0 === o ? (
            // if nextToReport is valid, report it, this is a new key so the
            // last one must not be a member of any targets.
            i !== _r.Ds && e(new Z$1(Wr(n)), i), 
            // set nextToReport to be this sequence number. It's the next one we
            // might report, if we don't find any targets for this document.
            // Note that the sequence number must be defined when the targetId
            // is 0.
            i = s, n = u) : 
            // set nextToReport to be invalid, we know we don't need to report
            // this one since we found a target for it.
            i = _r.Ds;
        })).next((function() {
            // Since we report sequence numbers after getting to the next key, we
            // need to check if the last key we iterated over was an orphaned
            // document and report it.
            i !== _r.Ds && e(new Z$1(Wr(n)), i);
        }));
    }, t.prototype.Pr = function(t) {
        return this.db.Rc().eo(t);
    }, t;
}();

function Zi(t, e) {
    return Wi(t).put(
    /**
 * @return A value suitable for writing a sentinel row in the target-document
 * store.
 */
    function(t, e) {
        return new ki(0, Br(t.path), e);
    }(e, t.Fo));
}

/**
 * Generates a string used as a prefix when storing data in IndexedDB and
 * LocalStorage.
 */ function to(t, e) {
    // Use two different prefix formats:
    //   * firestore / persistenceKey / projectID . databaseID / ...
    //   * firestore / persistenceKey / projectID / ...
    // projectIDs are DNS-compatible names and cannot contain dots
    // so there's no danger of collisions.
    var n = t.projectId;
    return t.o || (n += "." + t.database), "firestore/" + e + "/" + n + "/"
    /**
 * Implements `LocalStore` interface.
 *
 * Note: some field defined in this class might have public access level, but
 * the class is not exported so they are only accessible from this module.
 * This is useful to implement optional features (like bundles) in free
 * functions, such that they are tree-shakeable.
 */;
}

var eo = /** @class */ function() {
    function t(
    /** Manages our in-memory or durable persistence. */
    t, e, n, r) {
        this.persistence = t, this.Dc = e, this.serializer = r, 
        /**
             * Maps a targetID to data about its target.
             *
             * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
             * of `applyRemoteEvent()` idempotent.
             */
        this.Cc = new vt(G$1), 
        /** Maps a target to its targetID. */
        // TODO(wuandy): Evaluate if TargetId can be part of Target.
        this.Nc = new fr((function(t) {
            return ot(t);
        }), ut), 
        /**
             * The read time of the last entry processed by `getNewDocumentChanges()`.
             *
             * PORTING NOTE: This is only used for multi-tab synchronization.
             */
        this.xc = H$1.min(), this.rs = t.mc(n), this.Fc = t.Rc(), this.jo = t.Ac(), this.Oc = new wr(this.Fc, this.rs, this.persistence.Pc()), 
        this.Go = t.gc(), this.Dc.Mc(this.Oc);
    }
    return t.prototype._r = function(t) {
        var e = this;
        return this.persistence.runTransaction("Collect garbage", "readwrite-primary", (function(n) {
            return t.Rr(n, e.Cc);
        }));
    }, t;
}();

function no(
/** Manages our in-memory or durable persistence. */
t, e, n, r) {
    return new eo(t, e, n, r);
}

/**
 * Tells the LocalStore that the currently authenticated user has changed.
 *
 * In response the local store switches the mutation queue to the new user and
 * returns any resulting document changes.
 */
// PORTING NOTE: Android and iOS only return the documents affected by the
// change.
function ro(t, r) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, i, o, u;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                return e = R$1(t), i = e.rs, o = e.Oc, [ 4 /*yield*/ , e.persistence.runTransaction("Handle user change", "readonly", (function(t) {
                    // Swap out the mutation queue, grabbing the pending mutation batches
                    // before and after.
                    var n;
                    return e.rs.Mr(t).next((function(u) {
                        return n = u, i = e.persistence.mc(r), 
                        // Recreate our LocalDocumentsView using the new
                        // MutationQueue.
                        o = new wr(e.Fc, i, e.persistence.Pc()), i.Mr(t);
                    })).next((function(e) {
                        for (var r = [], i = [], u = Dt(), s = 0, a = n
                        // Union the old/new changed keys.
                        ; s < a.length; s++) {
                            var c = a[s];
                            r.push(c.batchId);
                            for (var h = 0, f = c.mutations; h < f.length; h++) {
                                var l = f[h];
                                u = u.add(l.key);
                            }
                        }
                        for (var p = 0, d = e; p < d.length; p++) {
                            var v = d[p];
                            i.push(v.batchId);
                            for (var y = 0, m = v.mutations; y < m.length; y++) {
                                var g = m[y];
                                u = u.add(g.key);
                            }
                        }
                        // Return the set of all (potentially) changed documents and the list
                        // of mutation batch IDs that were affected by change.
                                                return o._s(t, u).next((function(t) {
                            return {
                                kc: t,
                                $c: r,
                                Lc: i
                            };
                        }));
                    }));
                })) ];

              case 1:
                return u = n.sent(), [ 2 /*return*/ , (e.rs = i, e.Oc = o, e.Dc.Mc(e.Oc), u) ];
            }
        }));
    }));
}

/* Accepts locally generated Mutations and commit them to storage. */
/**
 * Acknowledges the given batch.
 *
 * On the happy path when a batch is acknowledged, the local store will
 *
 *  + remove the batch from the mutation queue;
 *  + apply the changes to the remote document cache;
 *  + recalculate the latency compensated view implied by those changes (there
 *    may be mutations in the queue that affect the documents but haven't been
 *    acknowledged yet); and
 *  + give the changed documents back the sync engine
 *
 * @returns The resulting (modified) documents.
 */ function io(t, e) {
    var n = R$1(t);
    return n.persistence.runTransaction("Acknowledge batch", "readwrite-primary", (function(t) {
        var r = e.batch.keys(), i = n.Fc.Xr({
            Zr: !0
        });
        return function(t, e, n, r) {
            var i = n.batch, o = i.keys(), u = lr.resolve();
            return o.forEach((function(t) {
                u = u.next((function() {
                    return r.Jn(e, t);
                })).next((function(e) {
                    var o = e, u = n.Sn.get(t);
                    C(null !== u), (!o || o.version.F(u) < 0) && ((o = i.yn(t, o, n)) && 
                    // We use the commitVersion as the readTime rather than the
                    // document's updateTime since the updateTime is not advanced
                    // for updates that do not modify the underlying document.
                    r.jn(o, n.bn));
                }));
            })), u.next((function() {
                return t.rs.$r(e, i);
            }));
        }(n, t, e, i).next((function() {
            return i.apply(t);
        })).next((function() {
            return n.rs.Ur(t);
        })).next((function() {
            return n.Oc._s(t, r);
        }));
    }));
}

/**
 * Removes mutations from the MutationQueue for the specified batch;
 * LocalDocuments will be recalculated.
 *
 * @returns The resulting modified documents.
 */
/**
 * Returns the last consistent snapshot processed (used by the RemoteStore to
 * determine whether to buffer incoming snapshots from the backend).
 */ function oo(t) {
    var e = R$1(t);
    return e.persistence.runTransaction("Get last remote snapshot version", "readonly", (function(t) {
        return e.jo.To(t);
    }));
}

/**
 * Updates the "ground-state" (remote) documents. We assume that the remote
 * event reflects any write batches that have been acknowledged or rejected
 * (i.e. we do not re-apply local mutations to updates from this event).
 *
 * LocalDocuments are re-calculated if there are remaining mutations in the
 * queue.
 */ function uo(t, e) {
    var n = R$1(t), r = e.ft, i = n.Cc;
    return n.persistence.runTransaction("Apply remote event", "readwrite-primary", (function(t) {
        var o = n.Fc.Xr({
            Zr: !0
        });
        // Reset newTargetDataByTargetMap in case this transaction gets re-run.
                i = n.Cc;
        var u = [];
        e.re.forEach((function(e, o) {
            var s = i.get(o);
            if (s) {
                // Only update the remote keys if the target is still active. This
                // ensures that we can persist the updated target data along with
                // the updated assignment.
                u.push(n.jo.Co(t, e.de, o).next((function() {
                    return n.jo.So(t, e._e, o);
                })));
                var a = e.resumeToken;
                // Update the resume token if the change includes one.
                                if (a.ht() > 0) {
                    var c = s.wt(a, r).dt(t.Fo);
                    i = i.Tt(o, c), 
                    // Update the target data if there are target changes (or if
                    // sufficient time has passed since the last update).
                    /**
     * Returns true if the newTargetData should be persisted during an update of
     * an active target. TargetData should always be persisted when a target is
     * being released and should not call this function.
     *
     * While the target is active, TargetData updates can be omitted when nothing
     * about the target has changed except metadata like the resume token or
     * snapshot version. Occasionally it's worth the extra write to prevent these
     * values from getting too stale after a crash, but this doesn't have to be
     * too frequent.
     */
                    function(t, e, n) {
                        // Always persist target data if we don't already have a resume token.
                        return C(e.resumeToken.ht() > 0), 0 === t.resumeToken.ht() || (
                        // Don't allow resume token changes to be buffered indefinitely. This
                        // allows us to be reasonably up-to-date after a crash and avoids needing
                        // to loop over all active queries on shutdown. Especially in the browser
                        // we may not get time to do anything interesting while the current tab is
                        // closing.
                        e.ft.O() - t.ft.O() >= 3e8 || n._e.size + n.fe.size + n.de.size > 0);
                    }(s, c, e) && u.push(n.jo.yo(t, c));
                }
            }
        }));
        var s = _t();
        // HACK: The only reason we allow a null snapshot version is so that we
        // can synthesize remote events when we get permission denied errors while
        // trying to resolve the state of a locally cached document that is in
        // limbo.
                if (e.ce.forEach((function(r, i) {
            e.ue.has(r) && u.push(n.persistence.Vr.Sc(t, r));
        })), 
        // Each loop iteration only affects its "own" doc, so it's safe to get all the remote
        // documents in advance in a single call.
        u.push(
        /**
     * Populates document change buffer with documents from backend or a bundle.
     * Returns the document changes resulting from applying those documents.
     *
     * @param txn Transaction to use to read existing documents from storage.
     * @param documentBuffer Document buffer to collect the resulted changes to be
     *        applied to storage.
     * @param documents Documents to be applied.
     * @param globalVersion A `SnapshotVersion` representing the read time if all
     *        documents have the same read time.
     * @param documentVersions A DocumentKey-to-SnapshotVersion map if documents
     *        have their own read time.
     *
     * Note: this function will use `documentVersions` if it is defined;
     * when it is not defined, resorts to `globalVersion`.
     */
        function(t, e, n, r, 
        // TODO(wuandy): We could add `readTime` to MaybeDocument instead to remove
        // this parameter.
        i) {
            var o = Dt();
            return n.forEach((function(t) {
                return o = o.add(t);
            })), e.getEntries(t, o).next((function(t) {
                var i = _t();
                return n.forEach((function(n, o) {
                    var u = t.get(n), s = r;
                    // Note: The order of the steps below is important, since we want
                    // to ensure that rejected limbo resolutions (which fabricate
                    // NoDocuments with SnapshotVersion.min()) never add documents to
                    // cache.
                                        o instanceof kn && o.version.isEqual(H$1.min()) ? (
                    // NoDocuments with SnapshotVersion.min() are used in manufactured
                    // events. We remove these documents from cache since we lost
                    // access.
                    e.Hn(n, s), i = i.Tt(n, o)) : null == u || o.version.F(u.version) > 0 || 0 === o.version.F(u.version) && u.hasPendingWrites ? (e.jn(o, s), 
                    i = i.Tt(n, o)) : x$1("LocalStore", "Ignoring outdated watch update for ", n, ". Current version:", u.version, " Watch version:", o.version);
                })), i;
            }));
        }(t, o, e.ce, r).next((function(t) {
            s = t;
        }))), !r.isEqual(H$1.min())) {
            var a = n.jo.To(t).next((function(e) {
                return n.jo.mo(t, t.Fo, r);
            }));
            u.push(a);
        }
        return lr.qn(u).next((function() {
            return o.apply(t);
        })).next((function() {
            return n.Oc.fs(t, s);
        }));
    })).then((function(t) {
        return n.Cc = i, t;
    }));
}

/**
 * Gets the mutation batch after the passed in batchId in the mutation queue
 * or null if empty.
 * @param afterBatchId If provided, the batch to search after.
 * @returns The next mutation or null if there wasn't one.
 */ function so(t, e) {
    var n = R$1(t);
    return n.persistence.runTransaction("Get next mutation batch", "readonly", (function(t) {
        return void 0 === e && (e = -1), n.rs.Fr(t, e);
    }));
}

/**
 * Reads the current value of a Document with a given key or null if not
 * found - used for testing.
 */
/**
 * Assigns the given target an internal ID so that its results can be pinned so
 * they don't get GC'd. A target must be allocated in the local store before
 * the store can be used to manage its view.
 *
 * Allocating an already allocated `Target` will return the existing `TargetData`
 * for that `Target`.
 */ function ao(t, e) {
    var n = R$1(t);
    return n.persistence.runTransaction("Allocate target", "readwrite", (function(t) {
        var r;
        return n.jo.bo(t, e).next((function(i) {
            return i ? (
            // This target has been listened to previously, so reuse the
            // previous targetID.
            // TODO(mcg): freshen last accessed date?
            r = i, lr.resolve(r)) : n.jo.fo(t).next((function(i) {
                return r = new ft(e, i, 0 /* Listen */ , t.Fo), n.jo.Ao(t, r).next((function() {
                    return r;
                }));
            }));
        }));
    })).then((function(t) {
        // If Multi-Tab is enabled, the existing target data may be newer than
        // the in-memory data
        var r = n.Cc.get(t.targetId);
        return (null === r || t.ft.F(r.ft) > 0) && (n.Cc = n.Cc.Tt(t.targetId, t), n.Nc.set(e, t.targetId)), 
        t;
    }));
}

/**
 * Returns the TargetData as seen by the LocalStore, including updates that may
 * have not yet been persisted to the TargetCache.
 */
// Visible for testing.
/**
 * Unpins all the documents associated with the given target. If
 * `keepPersistedTargetData` is set to false and Eager GC enabled, the method
 * directly removes the associated target data from the target cache.
 *
 * Releasing a non-existing `Target` is a no-op.
 */
// PORTING NOTE: `keepPersistedTargetData` is multi-tab only.
function co(t, r, i) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, o, u, s;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                e = R$1(t), o = e.Cc.get(r), u = i ? "readwrite" : "readwrite-primary", n.label = 1;

              case 1:
                return n.trys.push([ 1, 4, , 5 ]), i ? [ 3 /*break*/ , 3 ] : [ 4 /*yield*/ , e.persistence.runTransaction("Release target", u, (function(t) {
                    return e.persistence.Vr.removeTarget(t, o);
                })) ];

              case 2:
                n.sent(), n.label = 3;

              case 3:
                return [ 3 /*break*/ , 5 ];

              case 4:
                if (!Ar(s = n.sent())) throw s;
                // All `releaseTarget` does is record the final metadata state for the
                // target, but we've been recording this periodically during target
                // activity. If we lose this write this could cause a very slight
                // difference in the order of target deletion during GC, but we
                // don't define exact LRU semantics so this is acceptable.
                                return x$1("LocalStore", "Failed to update sequence numbers for target " + r + ": " + s), 
                [ 3 /*break*/ , 5 ];

              case 5:
                return e.Cc = e.Cc.remove(r), e.Nc.delete(o.target), [ 2 /*return*/ ];
            }
        }));
    }));
}

/**
 * Runs the specified query against the local store and returns the results,
 * potentially taking advantage of query data from previous executions (such
 * as the set of remote keys).
 *
 * @param usePreviousResults Whether results from previous executions can
 * be used to optimize this query execution.
 */ function ho(t, e, n) {
    var r = R$1(t), i = H$1.min(), o = Dt();
    return r.persistence.runTransaction("Execute query", "readonly", (function(t) {
        return function(t, e, n) {
            var r = R$1(t), i = r.Nc.get(n);
            return void 0 !== i ? lr.resolve(r.Cc.get(i)) : r.jo.bo(e, n);
        }(r, t, jn(e)).next((function(e) {
            if (e) return i = e.lastLimboFreeSnapshotVersion, r.jo.xo(t, e.targetId).next((function(t) {
                o = t;
            }));
        })).next((function() {
            return r.Dc.ws(t, e, n ? i : H$1.min(), n ? o : Dt());
        })).next((function(t) {
            return {
                documents: t,
                Bc: o
            };
        }));
    }));
}

// PORTING NOTE: Multi-Tab only.
function fo(t, e) {
    var n = R$1(t), r = R$1(n.jo), i = n.Cc.get(e);
    return i ? Promise.resolve(i.target) : n.persistence.runTransaction("Get target data", "readonly", (function(t) {
        return r.Ze(t, e).next((function(t) {
            return t ? t.target : null;
        }));
    }));
}

/**
 * Returns the set of documents that have been updated since the last call.
 * If this is the first call, returns the set of changes since client
 * initialization. Further invocations will return document that have changed
 * since the prior call.
 */
// PORTING NOTE: Multi-Tab only.
function lo(t) {
    var e = R$1(t);
    return e.persistence.runTransaction("Get new document changes", "readonly", (function(t) {
        return function(t, e, n) {
            var r = R$1(t), i = _t(), o = $r(n), u = pi(e), s = IDBKeyRange.lowerBound(o, !0);
            return u._i({
                index: Ai.readTimeIndex,
                range: s
            }, (function(t, e) {
                // Unlike `getEntry()` and others, `getNewDocumentChanges()` parses
                // the documents directly since we want to keep sentinel deletes.
                var n = Hr(r.serializer, e);
                i = i.Tt(n.key, n), o = e.readTime;
            })).next((function() {
                return {
                    qc: i,
                    readTime: Jr(o)
                };
            }));
        }(e.Fc, t, e.xc);
    })).then((function(t) {
        var n = t.qc, r = t.readTime;
        return e.xc = r, n;
    }));
}

/**
 * Reads the newest document change from persistence and moves the internal
 * synchronization marker forward so that calls to `getNewDocumentChanges()`
 * only return changes that happened after client initialization.
 */
// PORTING NOTE: Multi-Tab only.
function po(t) {
    return __awaiter(this, void 0, void 0, (function() {
        var e;
        return __generator(this, (function(n) {
            return [ 2 /*return*/ , (e = R$1(t)).persistence.runTransaction("Synchronize last document change read time", "readonly", (function(t) {
                return function(t) {
                    var e = pi(t), n = H$1.min();
                    // If there are no existing entries, we return SnapshotVersion.min().
                                        return e._i({
                        index: Ai.readTimeIndex,
                        reverse: !0
                    }, (function(t, e, r) {
                        e.readTime && (n = Jr(e.readTime)), r.done();
                    })).next((function() {
                        return n;
                    }));
                }(t);
            })).then((function(t) {
                e.xc = t;
            })) ];
        }));
    }));
}

/**
 * Verifies the error thrown by a LocalStore operation. If a LocalStore
 * operation fails because the primary lease has been taken by another client,
 * we ignore the error (the persistence layer will immediately call
 * `applyPrimaryLease` to propagate the primary state change). All other errors
 * are re-thrown.
 *
 * @param err An error returned by a LocalStore operation.
 * @return A Promise that resolves after we recovered, or the original error.
 */ function vo(t) {
    return __awaiter(this, void 0, void 0, (function() {
        return __generator(this, (function(e) {
            if (t.code !== V$1.FAILED_PRECONDITION || t.message !== mr) throw t;
            return x$1("LocalStore", "Unexpectedly lost primary lease"), [ 2 /*return*/ ];
        }));
    }));
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * A PersistentStream is an abstract base class that represents a streaming RPC
 * to the Firestore backend. It's built on top of the connections own support
 * for streaming RPCs, and adds several critical features for our clients:
 *
 *   - Exponential backoff on failure
 *   - Authentication via CredentialsProvider
 *   - Dispatching all callbacks into the shared worker queue
 *   - Closing idle streams after 60 seconds of inactivity
 *
 * Subclasses of PersistentStream implement serialization of models to and
 * from the JSON representation of the protocol buffers for a specific
 * streaming RPC.
 *
 * ## Starting and Stopping
 *
 * Streaming RPCs are stateful and need to be start()ed before messages can
 * be sent and received. The PersistentStream will call the onOpen() function
 * of the listener once the stream is ready to accept requests.
 *
 * Should a start() fail, PersistentStream will call the registered onClose()
 * listener with a FirestoreError indicating what went wrong.
 *
 * A PersistentStream can be started and stopped repeatedly.
 *
 * Generic types:
 *  SendType: The type of the outgoing message of the underlying
 *    connection stream
 *  ReceiveType: The type of the incoming message of the underlying
 *    connection stream
 *  ListenerType: The type of the listener that will be used for callbacks
 */ var yo = /** @class */ function() {
    function t(t, e, n, r, i, o) {
        this.Cs = t, this.Uc = n, this.Qc = r, this.Kc = i, this.listener = o, this.state = 0 /* Initial */ , 
        /**
             * A close count that's incremented every time the stream is closed; used by
             * getCloseGuardedDispatcher() to invalidate callbacks that happen after
             * close.
             */
        this.Wc = 0, this.jc = null, this.stream = null, this.Si = new Ir(t, e)
        /**
     * Returns true if start() has been called and no error has occurred. True
     * indicates the stream is open or in the process of opening (which
     * encompasses respecting backoff, getting auth tokens, and starting the
     * actual RPC). Use isOpen() to determine if the stream is open and ready for
     * outbound requests.
     */;
    }
    return t.prototype.Gc = function() {
        return 1 /* Starting */ === this.state || 2 /* Open */ === this.state || 4 /* Backoff */ === this.state;
    }, 
    /**
     * Returns true if the underlying RPC is open (the onOpen() listener has been
     * called) and the stream is ready for outbound requests.
     */
    t.prototype.zc = function() {
        return 2 /* Open */ === this.state;
    }, 
    /**
     * Starts the RPC. Only allowed if isStarted() returns false. The stream is
     * not immediately ready for use: onOpen() will be invoked when the RPC is
     * ready for outbound requests, at which point isOpen() will return true.
     *
     * When start returns, isStarted() will return true.
     */
    t.prototype.start = function() {
        3 /* Error */ !== this.state ? this.auth() : this.Hc();
    }, 
    /**
     * Stops the RPC. This call is idempotent and allowed regardless of the
     * current isStarted() state.
     *
     * When stop returns, isStarted() and isOpen() will both return false.
     */
    t.prototype.stop = function() {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(t) {
                switch (t.label) {
                  case 0:
                    return this.Gc() ? [ 4 /*yield*/ , this.close(0 /* Initial */) ] : [ 3 /*break*/ , 2 ];

                  case 1:
                    t.sent(), t.label = 2;

                  case 2:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    /**
     * After an error the stream will usually back off on the next attempt to
     * start it. If the error warrants an immediate restart of the stream, the
     * sender can use this to indicate that the receiver should not back off.
     *
     * Each error will call the onClose() listener. That function can decide to
     * inhibit backoff if required.
     */
    t.prototype.Jc = function() {
        this.state = 0 /* Initial */ , this.Si.reset();
    }, 
    /**
     * Marks this stream as idle. If no further actions are performed on the
     * stream for one minute, the stream will automatically close itself and
     * notify the stream's onClose() handler with Status.OK. The stream will then
     * be in a !isStarted() state, requiring the caller to start the stream again
     * before further use.
     *
     * Only streams that are in state 'Open' can be marked idle, as all other
     * states imply pending network operations.
     */
    t.prototype.Yc = function() {
        var t = this;
        // Starts the idle time if we are in state 'Open' and are not yet already
        // running a timer (in which case the previous idle timeout still applies).
                this.zc() && null === this.jc && (this.jc = this.Cs.Us(this.Uc, 6e4, (function() {
            return t.Xc();
        })));
    }, 
    /** Sends a message to the underlying stream. */ t.prototype.Zc = function(t) {
        this.tu(), this.stream.send(t);
    }, 
    /** Called by the idle timer when the stream should close due to inactivity. */ t.prototype.Xc = function() {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(t) {
                return this.zc() ? [ 2 /*return*/ , this.close(0 /* Initial */) ] : [ 2 /*return*/ ];
            }));
        }));
    }, 
    /** Marks the stream as active again. */ t.prototype.tu = function() {
        this.jc && (this.jc.cancel(), this.jc = null);
    }, 
    /**
     * Closes the stream and cleans up as necessary:
     *
     * * closes the underlying GRPC stream;
     * * calls the onClose handler with the given 'error';
     * * sets internal stream state to 'finalState';
     * * adjusts the backoff timer based on the error
     *
     * A new stream can be opened by calling start().
     *
     * @param finalState the intended state of the stream after closing.
     * @param error the error the connection was closed with.
     */
    t.prototype.close = function(t, r) {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    // Notify the listener that the stream closed.
                    // Cancel any outstanding timers (they're guaranteed not to execute).
                    return this.tu(), this.Si.cancel(), 
                    // Invalidates any stream-related callbacks (e.g. from auth or the
                    // underlying stream), guaranteeing they won't execute.
                    this.Wc++, 3 /* Error */ !== t ? 
                    // If this is an intentional close ensure we don't delay our next connection attempt.
                    this.Si.reset() : r && r.code === V$1.RESOURCE_EXHAUSTED ? (
                    // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
                    k$1(r.toString()), k$1("Using maximum backoff delay to prevent overloading the backend."), 
                    this.Si.Ls()) : r && r.code === V$1.UNAUTHENTICATED && 
                    // "unauthenticated" error means the token was rejected. Try force refreshing it in case it
                    // just expired.
                    this.Kc.m(), 
                    // Clean up the underlying stream because we are no longer interested in events.
                    null !== this.stream && (this.eu(), this.stream.close(), this.stream = null), 
                    // This state must be assigned before calling onClose() to allow the callback to
                    // inhibit backoff or otherwise manipulate the state in its non-started state.
                    this.state = t, [ 4 /*yield*/ , this.listener.nu(r) ];

                  case 1:
                    // Cancel any outstanding timers (they're guaranteed not to execute).
                    // Notify the listener that the stream closed.
                    return e.sent(), [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    /**
     * Can be overridden to perform additional cleanup before the stream is closed.
     * Calling super.tearDown() is not required.
     */
    t.prototype.eu = function() {}, t.prototype.auth = function() {
        var t = this;
        this.state = 1 /* Starting */;
        var e = this.su(this.Wc), n = this.Wc;
        // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.
                this.Kc.getToken().then((function(e) {
            // Stream can be stopped while waiting for authentication.
            // TODO(mikelehen): We really should just use dispatchIfNotClosed
            // and let this dispatch onto the queue, but that opened a spec test can
            // of worms that I don't want to deal with in this PR.
            t.Wc === n && 
            // Normally we'd have to schedule the callback on the AsyncQueue.
            // However, the following calls are safe to be called outside the
            // AsyncQueue since they don't chain asynchronous calls
            t.iu(e);
        }), (function(n) {
            e((function() {
                var e = new L$1(V$1.UNKNOWN, "Fetching auth token failed: " + n.message);
                return t.ru(e);
            }));
        }));
    }, t.prototype.iu = function(t) {
        var e = this, n = this.su(this.Wc);
        this.stream = this.ou(t), this.stream.cu((function() {
            n((function() {
                return e.state = 2 /* Open */ , e.listener.cu();
            }));
        })), this.stream.nu((function(t) {
            n((function() {
                return e.ru(t);
            }));
        })), this.stream.onMessage((function(t) {
            n((function() {
                return e.onMessage(t);
            }));
        }));
    }, t.prototype.Hc = function() {
        var t = this;
        this.state = 4 /* Backoff */ , this.Si.Bs((function() {
            return __awaiter(t, void 0, void 0, (function() {
                return __generator(this, (function(t) {
                    return this.state = 0 /* Initial */ , this.start(), [ 2 /*return*/ ];
                }));
            }));
        }));
    }, 
    // Visible for tests
    t.prototype.ru = function(t) {
        // In theory the stream could close cleanly, however, in our current model
        // we never expect this to happen because if we stop a stream ourselves,
        // this callback will never be called. To prevent cases where we retry
        // without a backoff accidentally, we set the stream to error in all cases.
        return x$1("PersistentStream", "close with error: " + t), this.stream = null, this.close(3 /* Error */ , t);
    }, 
    /**
     * Returns a "dispatcher" function that dispatches operations onto the
     * AsyncQueue but only runs them if closeCount remains unchanged. This allows
     * us to turn auth / stream callbacks into no-ops if the stream is closed /
     * re-opened, etc.
     */
    t.prototype.su = function(t) {
        var e = this;
        return function(n) {
            e.Cs.Ri((function() {
                return e.Wc === t ? n() : (x$1("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), 
                Promise.resolve());
            }));
        };
    }, t;
}(), mo = /** @class */ function(e) {
    function n(t, n, r, i, o) {
        var u = this;
        return (u = e.call(this, t, "listen_stream_connection_backoff" /* ListenStreamConnectionBackoff */ , "listen_stream_idle" /* ListenStreamIdle */ , n, r, o) || this).serializer = i, 
        u;
    }
    return __extends(n, e), n.prototype.ou = function(t) {
        return this.Qc.uu("Listen", t);
    }, n.prototype.onMessage = function(t) {
        // A successful response means the stream is healthy
        this.Si.reset();
        var e = function(t, e) {
            var n;
            if ("targetChange" in e) {
                e.targetChange;
                // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
                // if unset
                var r = function(t) {
                    return "NO_CHANGE" === t ? 0 /* NoChange */ : "ADD" === t ? 1 /* Added */ : "REMOVE" === t ? 2 /* Removed */ : "CURRENT" === t ? 3 /* Current */ : "RESET" === t ? 4 /* Reset */ : P$1();
                }(e.targetChange.targetChangeType || "NO_CHANGE"), i = e.targetChange.targetIds || [], o = function(t, e) {
                    return t.tn ? (C(void 0 === e || "string" == typeof e), at.fromBase64String(e || "")) : (C(void 0 === e || e instanceof Uint8Array), 
                    at.fromUint8Array(e || new Uint8Array));
                }(t, e.targetChange.resumeToken), u = e.targetChange.cause, s = u && function(t) {
                    var e = void 0 === t.code ? V$1.UNKNOWN : dt(t.code);
                    return new L$1(e, t.message || "");
                }(u);
                n = new Ut(r, i, o, s || null);
            } else if ("documentChange" in e) {
                e.documentChange;
                var a = e.documentChange;
                a.document, a.document.name, a.document.updateTime;
                var c = Te(t, a.document.name), h = be(a.document.updateTime), f = new Tn({
                    mapValue: {
                        fields: a.document.fields
                    }
                }), l = new xn(c, h, f, {}), p = a.targetIds || [], d = a.removedTargetIds || [];
                n = new Vt(p, d, l.key, l);
            } else if ("documentDelete" in e) {
                e.documentDelete;
                var v = e.documentDelete;
                v.document;
                var y = Te(t, v.document), m = v.readTime ? be(v.readTime) : H$1.min(), g = new kn(y, m), w = v.removedTargetIds || [];
                n = new Vt([], w, g.key, g);
            } else if ("documentRemove" in e) {
                e.documentRemove;
                var b = e.documentRemove;
                b.document;
                var _ = Te(t, b.document), I = b.removedTargetIds || [];
                n = new Vt([], I, _, null);
            } else {
                if (!("filter" in e)) return P$1();
                e.filter;
                var E = e.filter;
                E.targetId;
                var T = E.count || 0, N = new lt(T), A = E.targetId;
                n = new Lt(A, N);
            }
            return n;
        }(this.serializer, t), n = function(t) {
            // We have only reached a consistent snapshot for the entire stream if there
            // is a read_time set and it applies to all targets (i.e. the list of
            // targets is empty). The backend is guaranteed to send such responses.
            if (!("targetChange" in t)) return H$1.min();
            var e = t.targetChange;
            return e.targetIds && e.targetIds.length ? H$1.min() : e.readTime ? be(e.readTime) : H$1.min();
        }(t);
        return this.listener.au(e, n);
    }, 
    /**
     * Registers interest in the results of the given target. If the target
     * includes a resumeToken it will be included in the request. Results that
     * affect the target will be streamed back as WatchChange messages that
     * reference the targetId.
     */
    n.prototype.hu = function(t) {
        var e = {};
        e.database = De(this.serializer), e.addTarget = function(t, e) {
            var n, r = e.target;
            return (n = st(r) ? {
                documents: Pe(t, r)
            } : {
                query: Ce(t, r)
            }).targetId = e.targetId, e.resumeToken.ht() > 0 ? n.resumeToken = ge(t, e.resumeToken) : e.ft.F(H$1.min()) > 0 && (
            // TODO(wuandy): Consider removing above check because it is most likely true.
            // Right now, many tests depend on this behaviour though (leaving min() out
            // of serialization).
            n.readTime = me(t, e.ft.M())), n;
        }(this.serializer, t);
        var n = function(t, e) {
            var n = function(t, e) {
                switch (e) {
                  case 0 /* Listen */ :
                    return null;

                  case 1 /* ExistenceFilterMismatch */ :
                    return "existence-filter-mismatch";

                  case 2 /* LimboResolution */ :
                    return "limbo-document";

                  default:
                    return P$1();
                }
            }(0, e._t);
            return null == n ? null : {
                "goog-listen-tags": n
            };
        }(this.serializer, t);
        n && (e.labels = n), this.Zc(e);
    }, 
    /**
     * Unregisters interest in the results of the target associated with the
     * given targetId.
     */
    n.prototype.lu = function(t) {
        var e = {};
        e.database = De(this.serializer), e.removeTarget = t, this.Zc(e);
    }, n;
}(yo), go = /** @class */ function(e) {
    function n(t, n, r, i, o) {
        var u = this;
        return (u = e.call(this, t, "write_stream_connection_backoff" /* WriteStreamConnectionBackoff */ , "write_stream_idle" /* WriteStreamIdle */ , n, r, o) || this).serializer = i, 
        u._u = !1, u;
    }
    return __extends(n, e), Object.defineProperty(n.prototype, "fu", {
        /**
         * Tracks whether or not a handshake has been successfully exchanged and
         * the stream is ready to accept mutations.
         */
        get: function() {
            return this._u;
        },
        enumerable: !1,
        configurable: !0
    }), 
    // Override of PersistentStream.start
    n.prototype.start = function() {
        this._u = !1, this.lastStreamToken = void 0, e.prototype.start.call(this);
    }, n.prototype.eu = function() {
        this._u && this.du([]);
    }, n.prototype.ou = function(t) {
        return this.Qc.uu("Write", t);
    }, n.prototype.onMessage = function(t) {
        if (
        // Always capture the last stream token.
        C(!!t.streamToken), this.lastStreamToken = t.streamToken, this._u) {
            // A successful first write response means the stream is healthy,
            // Note, that we could consider a successful handshake healthy, however,
            // the write itself might be causing an error we want to back off from.
            this.Si.reset();
            var e = function(t, e) {
                return t && t.length > 0 ? (C(void 0 !== e), t.map((function(t) {
                    return function(t, e) {
                        // NOTE: Deletes don't have an updateTime.
                        var n = t.updateTime ? be(t.updateTime) : be(e);
                        n.isEqual(H$1.min()) && (
                        // The Firestore Emulator currently returns an update time of 0 for
                        // deletes of non-existing documents (rather than null). This breaks the
                        // test "get deleted doc while offline with source=cache" as NoDocuments
                        // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
                        // TODO(#2149): Remove this when Emulator is fixed
                        n = be(e));
                        var r = null;
                        return t.transformResults && t.transformResults.length > 0 && (r = t.transformResults), 
                        new sn(n, r);
                    }(t, e);
                }))) : [];
            }(t.writeResults, t.commitTime), n = be(t.commitTime);
            return this.listener.wu(n, e);
        }
        // The first response is always the handshake response
                return C(!t.writeResults || 0 === t.writeResults.length), this._u = !0, 
        this.listener.Eu();
    }, 
    /**
     * Sends an initial streamToken to the server, performing the handshake
     * required to make the StreamingWrite RPC work. Subsequent
     * calls should wait until onHandshakeComplete was called.
     */
    n.prototype.Tu = function() {
        // TODO(dimond): Support stream resumption. We intentionally do not set the
        // stream token on the handshake, ignoring any stream token we might have.
        var t = {};
        t.database = De(this.serializer), this.Zc(t);
    }, 
    /** Sends a group of mutations to the Firestore backend to apply. */ n.prototype.du = function(t) {
        var e = this, n = {
            streamToken: this.lastStreamToken,
            writes: t.map((function(t) {
                return Oe(e.serializer, t);
            }))
        };
        this.Zc(n);
    }, n;
}(yo), wo = /** @class */ function(e) {
    function n(t, n, r) {
        var i = this;
        return (i = e.call(this) || this).credentials = t, i.Qc = n, i.serializer = r, i.Iu = !1, 
        i;
    }
    return __extends(n, e), n.prototype.mu = function() {
        if (this.Iu) throw new L$1(V$1.FAILED_PRECONDITION, "The client has already been terminated.");
    }, 
    /** Gets an auth token and invokes the provided RPC. */ n.prototype.Au = function(t, e, n) {
        var r = this;
        return this.mu(), this.credentials.getToken().then((function(i) {
            return r.Qc.Au(t, e, n, i);
        })).catch((function(t) {
            throw t.code === V$1.UNAUTHENTICATED && r.credentials.m(), t;
        }));
    }, 
    /** Gets an auth token and invokes the provided RPC with streamed results. */ n.prototype.Ru = function(t, e, n) {
        var r = this;
        return this.mu(), this.credentials.getToken().then((function(i) {
            return r.Qc.Ru(t, e, n, i);
        })).catch((function(t) {
            throw t.code === V$1.UNAUTHENTICATED && r.credentials.m(), t;
        }));
    }, n.prototype.terminate = function() {
        this.Iu = !1;
    }, n;
}((function() {})), bo = /** @class */ function() {
    function t(t, e) {
        this.di = t, this.Pu = e, 
        /** The current OnlineState. */
        this.state = "Unknown" /* Unknown */ , 
        /**
             * A count of consecutive failures to open the stream. If it reaches the
             * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
             * Offline.
             */
        this.gu = 0, 
        /**
             * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
             * transition from OnlineState.Unknown to OnlineState.Offline without waiting
             * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
             */
        this.yu = null, 
        /**
             * Whether the client should log a warning message if it fails to connect to
             * the backend (initially true, cleared after a successful stream, or if we've
             * logged the message already).
             */
        this.Vu = !0
        /**
     * Called by RemoteStore when a watch stream is started (including on each
     * backoff attempt).
     *
     * If this is the first attempt, it sets the OnlineState to Unknown and starts
     * the onlineStateTimer.
     */;
    }
    return t.prototype.pu = function() {
        var t = this;
        0 === this.gu && (this.vu("Unknown" /* Unknown */), this.yu = this.di.Us("online_state_timeout" /* OnlineStateTimeout */ , 1e4, (function() {
            return t.yu = null, t.bu("Backend didn't respond within 10 seconds."), t.vu("Offline" /* Offline */), 
            Promise.resolve();
        })));
    }, 
    /**
     * Updates our OnlineState as appropriate after the watch stream reports a
     * failure. The first failure moves us to the 'Unknown' state. We then may
     * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
     * actually transition to the 'Offline' state.
     */
    t.prototype.Su = function(t) {
        "Online" /* Online */ === this.state ? this.vu("Unknown" /* Unknown */) : (this.gu++, 
        this.gu >= 1 && (this.Du(), this.bu("Connection failed 1 times. Most recent error: " + t.toString()), 
        this.vu("Offline" /* Offline */)));
    }, 
    /**
     * Explicitly sets the OnlineState to the specified state.
     *
     * Note that this resets our timers / failure counters, etc. used by our
     * Offline heuristics, so must not be used in place of
     * handleWatchStreamStart() and handleWatchStreamFailure().
     */
    t.prototype.set = function(t) {
        this.Du(), this.gu = 0, "Online" /* Online */ === t && (
        // We've connected to watch at least once. Don't warn the developer
        // about being offline going forward.
        this.Vu = !1), this.vu(t);
    }, t.prototype.vu = function(t) {
        t !== this.state && (this.state = t, this.Pu(t));
    }, t.prototype.bu = function(t) {
        var e = "Could not reach Cloud Firestore backend. " + t + "\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.";
        this.Vu ? (k$1(e), this.Vu = !1) : x$1("OnlineStateTracker", e);
    }, t.prototype.Du = function() {
        null !== this.yu && (this.yu.cancel(), this.yu = null);
    }, t;
}(), _o = function(
/**
     * The local store, used to fill the write pipeline with outbound mutations.
     */
t, 
/** The client-side proxy for interacting with the backend. */
r, i, o, u) {
    var s = this;
    this.Cu = t, this.Nu = r, this.di = i, this.xu = {}, 
    /**
             * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
             * LocalStore via fillWritePipeline() and have or will send to the write
             * stream.
             *
             * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
             * restart the write stream. When the stream is established the writes in the
             * pipeline will be sent in order.
             *
             * Writes remain in writePipeline until they are acknowledged by the backend
             * and thus will automatically be re-sent if the stream is interrupted /
             * restarted before they're acknowledged.
             *
             * Write responses from the backend are linked to their originating request
             * purely based on order, and so we can just shift() writes from the front of
             * the writePipeline as we receive responses.
             */
    this.Fu = [], 
    /**
             * A mapping of watched targets that the client cares about tracking and the
             * user has explicitly called a 'listen' for this target.
             *
             * These targets may or may not have been sent to or acknowledged by the
             * server. On re-establishing the listen stream, these targets should be sent
             * to the server. The targets removed with unlistens are removed eagerly
             * without waiting for confirmation from the listen stream.
             */
    this.Ou = new Map, 
    /**
             * A set of reasons for why the RemoteStore may be offline. If empty, the
             * RemoteStore may start its network connections.
             */
    this.Mu = new Set, 
    /**
             * Event handlers that get called when the network is disabled or enabled.
             *
             * PORTING NOTE: These functions are used on the Web client to create the
             * underlying streams (to support tree-shakeable streams). On Android and iOS,
             * the streams are created during construction of RemoteStore.
             */
    this.ku = [], this.$u = u, this.$u.Lu((function(t) {
        i.Ri((function() {
            return __awaiter(s, void 0, void 0, (function() {
                return __generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        return Oo(this) ? (x$1("RemoteStore", "Restarting streams for network reachability change."), 
                        [ 4 /*yield*/ , function(t) {
                            return __awaiter(this, void 0, void 0, (function() {
                                var e;
                                return __generator(this, (function(n) {
                                    switch (n.label) {
                                      case 0:
                                        return (e = R$1(t)).Mu.add(4 /* ConnectivityChange */), [ 4 /*yield*/ , Eo(e) ];

                                      case 1:
                                        return n.sent(), e.Bu.set("Unknown" /* Unknown */), e.Mu.delete(4 /* ConnectivityChange */), 
                                        [ 4 /*yield*/ , Io(e) ];

                                      case 2:
                                        return n.sent(), [ 2 /*return*/ ];
                                    }
                                }));
                            }));
                        }(this) ]) : [ 3 /*break*/ , 2 ];

                      case 1:
                        t.sent(), t.label = 2;

                      case 2:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }));
    })), this.Bu = new bo(i, o);
};

/**
 * A PersistentStream that implements the Listen RPC.
 *
 * Once the Listen stream has called the onOpen() listener, any number of
 * listen() and unlisten() calls can be made to control what changes will be
 * sent from the server for ListenResponses.
 */ function Io(t) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, r;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                if (!Oo(t)) return [ 3 /*break*/ , 4 ];
                e = 0, r = t.ku, n.label = 1;

              case 1:
                return e < r.length ? [ 4 /*yield*/ , (0, r[e])(/* enabled= */ !0) ] : [ 3 /*break*/ , 4 ];

              case 2:
                n.sent(), n.label = 3;

              case 3:
                return e++, [ 3 /*break*/ , 1 ];

              case 4:
                return [ 2 /*return*/ ];
            }
        }));
    }));
}

/**
 * Temporarily disables the network. The network can be re-enabled using
 * enableNetwork().
 */ function Eo(t) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, r;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                e = 0, r = t.ku, n.label = 1;

              case 1:
                return e < r.length ? [ 4 /*yield*/ , (0, r[e])(/* enabled= */ !1) ] : [ 3 /*break*/ , 4 ];

              case 2:
                n.sent(), n.label = 3;

              case 3:
                return e++, [ 3 /*break*/ , 1 ];

              case 4:
                return [ 2 /*return*/ ];
            }
        }));
    }));
}

/**
 * Starts new listen for the given target. Uses resume token if provided. It
 * is a no-op if the target of given `TargetData` is already being listened to.
 */ function To(t, e) {
    var n = R$1(t);
    n.Ou.has(e.targetId) || (
    // Mark this as something the client is currently listening for.
    n.Ou.set(e.targetId, e), ko(n) ? 
    // The listen will be sent in onWatchStreamOpen
    xo(n) : Ko(n).zc() && Ao(n, e));
}

/**
 * Removes the listen from server. It is a no-op if the given target id is
 * not being listened to.
 */ function No(t, e) {
    var n = R$1(t), r = Ko(n);
    n.Ou.delete(e), r.zc() && Do(n, e), 0 === n.Ou.size && (r.zc() ? r.Yc() : Oo(n) && 
    // Revert to OnlineState.Unknown if the watch stream is not open and we
    // have no listeners, since without any listens to send we cannot
    // confirm if the stream is healthy and upgrade to OnlineState.Online.
    n.Bu.set("Unknown" /* Unknown */));
}

/**
 * We need to increment the the expected number of pending responses we're due
 * from watch so we wait for the ack to process any messages from this target.
 */ function Ao(t, e) {
    t.qu.De(e.targetId), Ko(t).hu(e)
    /**
 * We need to increment the expected number of pending responses we're due
 * from watch so we wait for the removal on the server before we process any
 * messages from this target.
 */;
}

function Do(t, e) {
    t.qu.De(e), Ko(t).lu(e);
}

function xo(t) {
    t.qu = new qt({
        Xe: function(e) {
            return t.xu.Xe(e);
        },
        Ze: function(e) {
            return t.Ou.get(e) || null;
        }
    }), Ko(t).start(), t.Bu.pu()
    /**
 * Returns whether the watch stream should be started because it's necessary
 * and has not yet been started.
 */;
}

function ko(t) {
    return Oo(t) && !Ko(t).Gc() && t.Ou.size > 0;
}

function Oo(t) {
    return 0 === R$1(t).Mu.size;
}

function So(t) {
    t.qu = void 0;
}

function Po(t) {
    return __awaiter(this, void 0, void 0, (function() {
        return __generator(this, (function(e) {
            return t.Ou.forEach((function(e, n) {
                Ao(t, e);
            })), [ 2 /*return*/ ];
        }));
    }));
}

function Co(t, r) {
    return __awaiter(this, void 0, void 0, (function() {
        return __generator(this, (function(e) {
            return So(t), 
            // If we still need the watch stream, retry the connection.
            ko(t) ? (t.Bu.Su(r), xo(t)) : 
            // No need to restart watch stream because there are no active targets.
            // The online state is set to unknown because there is no active attempt
            // at establishing a connection
            t.Bu.set("Unknown" /* Unknown */), [ 2 /*return*/ ];
        }));
    }));
}

function Ro(t, r, i) {
    return __awaiter(this, void 0, void 0, (function() {
        var o, u, s;
        return __generator(this, (function(a) {
            switch (a.label) {
              case 0:
                if (t.Bu.set("Online" /* Online */), !(r instanceof Ut && 2 /* Removed */ === r.state && r.cause)) 
                // Mark the client as online since we got a message from the server
                return [ 3 /*break*/ , 6 ];
                a.label = 1;

              case 1:
                return a.trys.push([ 1, 3, , 5 ]), [ 4 /*yield*/ , 
                /** Handles an error on a target */
                function(t, r) {
                    return __awaiter(this, void 0, void 0, (function() {
                        var e, i, o, u;
                        return __generator(this, (function(n) {
                            switch (n.label) {
                              case 0:
                                e = r.cause, i = 0, o = r.targetIds, n.label = 1;

                              case 1:
                                return i < o.length ? (u = o[i], t.Ou.has(u) ? [ 4 /*yield*/ , t.xu.Uu(u, e) ] : [ 3 /*break*/ , 3 ]) : [ 3 /*break*/ , 5 ];

                              case 2:
                                n.sent(), t.Ou.delete(u), t.qu.removeTarget(u), n.label = 3;

                              case 3:
                                n.label = 4;

                              case 4:
                                return i++, [ 3 /*break*/ , 1 ];

                              case 5:
                                return [ 2 /*return*/ ];
                            }
                        }));
                    }));
                }(t, r) ];

              case 2:
                return a.sent(), [ 3 /*break*/ , 5 ];

              case 3:
                return o = a.sent(), x$1("RemoteStore", "Failed to remove targets %s: %s ", r.targetIds.join(","), o), 
                [ 4 /*yield*/ , Vo(t, o) ];

              case 4:
                return a.sent(), [ 3 /*break*/ , 5 ];

              case 5:
                return [ 3 /*break*/ , 13 ];

              case 6:
                if (r instanceof Vt ? t.qu.$e(r) : r instanceof Lt ? t.qu.je(r) : t.qu.qe(r), i.isEqual(H$1.min())) return [ 3 /*break*/ , 13 ];
                a.label = 7;

              case 7:
                return a.trys.push([ 7, 11, , 13 ]), [ 4 /*yield*/ , oo(t.Cu) ];

              case 8:
                return u = a.sent(), i.F(u) >= 0 ? [ 4 /*yield*/ , 
                /**
                 * Takes a batch of changes from the Datastore, repackages them as a
                 * RemoteEvent, and passes that on to the listener, which is typically the
                 * SyncEngine.
                 */
                function(t, e) {
                    var n = t.qu.He(e);
                    // Update in-memory resume tokens. LocalStore will update the
                    // persistent view of these when applying the completed RemoteEvent.
                                        return n.re.forEach((function(n, r) {
                        if (n.resumeToken.ht() > 0) {
                            var i = t.Ou.get(r);
                            // A watched target might have been removed already.
                                                        i && t.Ou.set(r, i.wt(n.resumeToken, e));
                        }
                    })), 
                    // Re-establish listens for the targets that have been invalidated by
                    // existence filter mismatches.
                    n.oe.forEach((function(e) {
                        var n = t.Ou.get(e);
                        if (n) {
                            // Clear the resume token for the target, since we're in a known mismatch
                            // state.
                            t.Ou.set(e, n.wt(at.lt, n.ft)), 
                            // Cause a hard reset by unwatching and rewatching immediately, but
                            // deliberately don't send a resume token so that we get a full update.
                            Do(t, e);
                            // Mark the target we send as being on behalf of an existence filter
                            // mismatch, but don't actually retain that in listenTargets. This ensures
                            // that we flag the first re-listen this way without impacting future
                            // listens of this target (that might happen e.g. on reconnect).
                            var r = new ft(n.target, e, 1 /* ExistenceFilterMismatch */ , n.sequenceNumber);
                            Ao(t, r);
                        }
                    })), t.xu.Qu(n);
                }(t, i) ] : [ 3 /*break*/ , 10 ];

                // We have received a target change with a global snapshot if the snapshot
                // version is not equal to SnapshotVersion.min().
                              case 9:
                // We have received a target change with a global snapshot if the snapshot
                // version is not equal to SnapshotVersion.min().
                a.sent(), a.label = 10;

              case 10:
                return [ 3 /*break*/ , 13 ];

              case 11:
                return x$1("RemoteStore", "Failed to raise snapshot:", s = a.sent()), [ 4 /*yield*/ , Vo(t, s) ];

              case 12:
                return a.sent(), [ 3 /*break*/ , 13 ];

              case 13:
                return [ 2 /*return*/ ];
            }
        }));
    }));
}

/**
 * Recovery logic for IndexedDB errors that takes the network offline until
 * `op` succeeds. Retries are scheduled with backoff using
 * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is
 * validated via a generic operation.
 *
 * The returned Promise is resolved once the network is disabled and before
 * any retry attempt.
 */ function Vo(t, r, i) {
    return __awaiter(this, void 0, void 0, (function() {
        var o = this;
        return __generator(this, (function(u) {
            switch (u.label) {
              case 0:
                if (!Ar(r)) throw r;
                // Disable network and raise offline snapshots
                return t.Mu.add(1 /* IndexedDbFailed */), [ 4 /*yield*/ , Eo(t) ];

              case 1:
                // Disable network and raise offline snapshots
                return u.sent(), t.Bu.set("Offline" /* Offline */), i || (
                // Use a simple read operation to determine if IndexedDB recovered.
                // Ideally, we would expose a health check directly on SimpleDb, but
                // RemoteStore only has access to persistence through LocalStore.
                i = function() {
                    return oo(t.Cu);
                }), 
                // Probe IndexedDB periodically and re-enable network
                t.di.Mi((function() {
                    return __awaiter(o, void 0, void 0, (function() {
                        return __generator(this, (function(e) {
                            switch (e.label) {
                              case 0:
                                return x$1("RemoteStore", "Retrying IndexedDB access"), [ 4 /*yield*/ , i() ];

                              case 1:
                                return e.sent(), t.Mu.delete(1 /* IndexedDbFailed */), [ 4 /*yield*/ , Io(t) ];

                              case 2:
                                return e.sent(), [ 2 /*return*/ ];
                            }
                        }));
                    }));
                })), [ 2 /*return*/ ];
            }
        }));
    }));
}

/**
 * Executes `op`. If `op` fails, takes the network offline until `op`
 * succeeds. Returns after the first attempt.
 */ function Lo(t, e) {
    return e().catch((function(n) {
        return Vo(t, n, e);
    }));
}

function Uo(t) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, r, i, o, u;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                e = R$1(t), r = Wo(e), i = e.Fu.length > 0 ? e.Fu[e.Fu.length - 1].batchId : -1, n.label = 1;

              case 1:
                if (!
                /**
 * Returns true if we can add to the write pipeline (i.e. the network is
 * enabled and the write pipeline is not full).
 */
                function(t) {
                    return Oo(t) && t.Fu.length < 10;
                }
                /**
 * Queues additional writes to be sent to the write stream, sending them
 * immediately if the write stream is established.
 */ (e)) return [ 3 /*break*/ , 7 ];
                n.label = 2;

              case 2:
                return n.trys.push([ 2, 4, , 6 ]), [ 4 /*yield*/ , so(e.Cu, i) ];

              case 3:
                return null === (o = n.sent()) ? (0 === e.Fu.length && r.Yc(), [ 3 /*break*/ , 7 ]) : (i = o.batchId, 
                function(t, e) {
                    t.Fu.push(e);
                    var n = Wo(t);
                    n.zc() && n.fu && n.du(e.mutations);
                }(e, o), [ 3 /*break*/ , 6 ]);

              case 4:
                return u = n.sent(), [ 4 /*yield*/ , Vo(e, u) ];

              case 5:
                return n.sent(), [ 3 /*break*/ , 6 ];

              case 6:
                return [ 3 /*break*/ , 1 ];

              case 7:
                return Mo(e) && qo(e), [ 2 /*return*/ ];
            }
        }));
    }));
}

function Mo(t) {
    return Oo(t) && !Wo(t).Gc() && t.Fu.length > 0;
}

function qo(t) {
    Wo(t).start();
}

function jo(t) {
    return __awaiter(this, void 0, void 0, (function() {
        return __generator(this, (function(e) {
            return Wo(t).Tu(), [ 2 /*return*/ ];
        }));
    }));
}

function Fo(t) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, r, i, o;
        return __generator(this, (function(n) {
            // Send the write pipeline now that the stream is established.
            for (e = Wo(t), r = 0, i = t.Fu; r < i.length; r++) o = i[r], e.du(o.mutations);
            return [ 2 /*return*/ ];
        }));
    }));
}

function zo(t, r, i) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, o;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                return e = t.Fu.shift(), o = hr.from(e, r, i), [ 4 /*yield*/ , Lo(t, (function() {
                    return t.xu.Ku(o);
                })) ];

              case 1:
                // It's possible that with the completion of this mutation another
                // slot has freed up.
                return n.sent(), [ 4 /*yield*/ , Uo(t) ];

              case 2:
                // It's possible that with the completion of this mutation another
                // slot has freed up.
                return n.sent(), [ 2 /*return*/ ];
            }
        }));
    }));
}

function Bo(t, r) {
    return __awaiter(this, void 0, void 0, (function() {
        return __generator(this, (function(i) {
            switch (i.label) {
              case 0:
                return r && Wo(t).fu ? [ 4 /*yield*/ , function(t, r) {
                    return __awaiter(this, void 0, void 0, (function() {
                        var e, i;
                        return __generator(this, (function(n) {
                            switch (n.label) {
                              case 0:
                                return pt(i = r.code) && i !== V$1.ABORTED ? (e = t.Fu.shift(), 
                                // In this case it's also unlikely that the server itself is melting
                                // down -- this was just a bad request so inhibit backoff on the next
                                // restart.
                                Wo(t).Jc(), [ 4 /*yield*/ , Lo(t, (function() {
                                    return t.xu.Wu(e.batchId, r);
                                })) ]) : [ 3 /*break*/ , 3 ];

                              case 1:
                                // It's possible that with the completion of this mutation
                                // another slot has freed up.
                                return n.sent(), [ 4 /*yield*/ , Uo(t) ];

                              case 2:
                                // In this case it's also unlikely that the server itself is melting
                                // down -- this was just a bad request so inhibit backoff on the next
                                // restart.
                                // It's possible that with the completion of this mutation
                                // another slot has freed up.
                                n.sent(), n.label = 3;

                              case 3:
                                return [ 2 /*return*/ ];
                            }
                        }));
                    }));
                }(t, r) ] : [ 3 /*break*/ , 2 ];

                // This error affects the actual write.
                              case 1:
                // This error affects the actual write.
                i.sent(), i.label = 2;

              case 2:
                // If the write stream closed after the write handshake completes, a write
                // operation failed and we fail the pending operation.
                // The write stream might have been started by refilling the write
                // pipeline for failed writes
                return Mo(t) && qo(t), [ 2 /*return*/ ];
            }
        }));
    }));
}

/**
 * Toggles the network state when the client gains or loses its primary lease.
 */ function Go(t, r) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, i;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                return e = R$1(t), r ? (e.Mu.delete(2 /* IsSecondary */), [ 4 /*yield*/ , Io(e) ]) : [ 3 /*break*/ , 2 ];

              case 1:
                return n.sent(), [ 3 /*break*/ , 5 ];

              case 2:
                return (i = r) ? [ 3 /*break*/ , 4 ] : (e.Mu.add(2 /* IsSecondary */), [ 4 /*yield*/ , Eo(e) ]);

              case 3:
                n.sent(), i = e.Bu.set("Unknown" /* Unknown */), n.label = 4;

              case 4:
                n.label = 5;

              case 5:
                return [ 2 /*return*/ ];
            }
        }));
    }));
}

/**
 * If not yet initialized, registers the WatchStream and its network state
 * callback with `remoteStoreImpl`. Returns the existing stream if one is
 * already available.
 *
 * PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.
 * This is not done on Web to allow it to be tree-shaken.
 */ function Ko(t) {
    var r = this;
    return t.ju || (
    // Create stream (but note that it is not started yet).
    t.ju = function(t, e, n) {
        var r = R$1(t);
        return r.mu(), new mo(e, r.Qc, r.credentials, r.serializer, n);
    }(t.Nu, t.di, {
        cu: Po.bind(null, t),
        nu: Co.bind(null, t),
        au: Ro.bind(null, t)
    }), t.ku.push((function(i) {
        return __awaiter(r, void 0, void 0, (function() {
            return __generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    return i ? (t.ju.Jc(), ko(t) ? xo(t) : t.Bu.set("Unknown" /* Unknown */), [ 3 /*break*/ , 3 ]) : [ 3 /*break*/ , 1 ];

                  case 1:
                    return [ 4 /*yield*/ , t.ju.stop() ];

                  case 2:
                    e.sent(), So(t), e.label = 3;

                  case 3:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }))), t.ju
    /**
 * If not yet initialized, registers the WriteStream and its network state
 * callback with `remoteStoreImpl`. Returns the existing stream if one is
 * already available.
 *
 * PORTING NOTE: On iOS and Android, the WriteStream gets registered on startup.
 * This is not done on Web to allow it to be tree-shaken.
 */;
}

function Wo(t) {
    var r = this;
    return t.Gu || (
    // Create stream (but note that it is not started yet).
    t.Gu = function(t, e, n) {
        var r = R$1(t);
        return r.mu(), new go(e, r.Qc, r.credentials, r.serializer, n);
    }(t.Nu, t.di, {
        cu: jo.bind(null, t),
        nu: Bo.bind(null, t),
        Eu: Fo.bind(null, t),
        wu: zo.bind(null, t)
    }), t.ku.push((function(i) {
        return __awaiter(r, void 0, void 0, (function() {
            return __generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    return i ? (t.Gu.Jc(), [ 4 /*yield*/ , Uo(t) ]) : [ 3 /*break*/ , 2 ];

                  case 1:
                    // This will start the write stream if necessary.
                    return e.sent(), [ 3 /*break*/ , 4 ];

                  case 2:
                    return [ 4 /*yield*/ , t.Gu.stop() ];

                  case 3:
                    e.sent(), t.Fu.length > 0 && (x$1("RemoteStore", "Stopping write stream with " + t.Fu.length + " pending writes"), 
                    t.Fu = []), e.label = 4;

                  case 4:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }))), t.Gu
    /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
    /**
 * Holds the listeners and the last received ViewSnapshot for a query being
 * tracked by EventManager.
 */;
}

var Qo = function() {
    this.zu = void 0, this.listeners = [];
}, Ho = function() {
    this.queries = new fr((function(t) {
        return Bn(t);
    }), zn), this.onlineState = "Unknown" /* Unknown */ , this.Hu = new Set;
};

function Yo(t, r) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, i, o, u, s, a, c;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                if (e = R$1(t), i = r.query, o = !1, (u = e.queries.get(i)) || (o = !0, u = new Qo), 
                !o) return [ 3 /*break*/ , 4 ];
                n.label = 1;

              case 1:
                return n.trys.push([ 1, 3, , 4 ]), s = u, [ 4 /*yield*/ , e.Ju(i) ];

              case 2:
                return s.zu = n.sent(), [ 3 /*break*/ , 4 ];

              case 3:
                return a = n.sent(), c = Lr(a, "Initialization of query '" + Gn(r.query) + "' failed"), 
                [ 2 /*return*/ , void r.onError(c) ];

              case 4:
                return e.queries.set(i, u), u.listeners.push(r), 
                // Run global snapshot listeners if a consistent snapshot has been emitted.
                r.Yu(e.onlineState), u.zu && r.Xu(u.zu) && Zo(e), [ 2 /*return*/ ];
            }
        }));
    }));
}

function $o(t, r) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, i, o, u, s;
        return __generator(this, (function(n) {
            return e = R$1(t), i = r.query, o = !1, (u = e.queries.get(i)) && (s = u.listeners.indexOf(r)) >= 0 && (u.listeners.splice(s, 1), 
            o = 0 === u.listeners.length), o ? [ 2 /*return*/ , (e.queries.delete(i), e.Zu(i)) ] : [ 2 /*return*/ ];
        }));
    }));
}

function Jo(t, e) {
    for (var n = R$1(t), r = !1, i = 0, o = e; i < o.length; i++) {
        var u = o[i], s = u.query, a = n.queries.get(s);
        if (a) {
            for (var c = 0, h = a.listeners; c < h.length; c++) {
                h[c].Xu(u) && (r = !0);
            }
            a.zu = u;
        }
    }
    r && Zo(n);
}

function Xo(t, e, n) {
    var r = R$1(t), i = r.queries.get(e);
    if (i) for (var o = 0, u = i.listeners; o < u.length; o++) {
        u[o].onError(n);
    }
    // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
    // after an error.
        r.queries.delete(e);
}

// Call all global snapshot listeners that have been set.
function Zo(t) {
    t.Hu.forEach((function(t) {
        t.next();
    }));
}

/**
 * QueryListener takes a series of internal view snapshots and determines
 * when to raise the event.
 *
 * It uses an Observer to dispatch events.
 */ var tu = /** @class */ function() {
    function t(t, e, n) {
        this.query = t, this.ta = e, 
        /**
             * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
             * observer. This flag is set to true once we've actually raised an event.
             */
        this.ea = !1, this.na = null, this.onlineState = "Unknown" /* Unknown */ , this.options = n || {}
        /**
     * Applies the new ViewSnapshot to this listener, raising a user-facing event
     * if applicable (depending on what changed, whether the user has opted into
     * metadata-only changes, etc.). Returns true if a user-facing event was
     * indeed raised.
     */;
    }
    return t.prototype.Xu = function(t) {
        if (!this.options.includeMetadataChanges) {
            for (
            // Remove the metadata only changes.
            var e = [], n = 0, r = t.docChanges; n < r.length; n++) {
                var i = r[n];
                3 /* Metadata */ !== i.type && e.push(i);
            }
            t = new Pt(t.query, t.docs, t.te, e, t.ee, t.fromCache, t.ne, 
            /* excludesMetadataChanges= */ !0);
        }
        var o = !1;
        return this.ea ? this.sa(t) && (this.ta.next(t), o = !0) : this.ia(t, this.onlineState) && (this.ra(t), 
        o = !0), this.na = t, o;
    }, t.prototype.onError = function(t) {
        this.ta.error(t);
    }, 
    /** Returns whether a snapshot was raised. */ t.prototype.Yu = function(t) {
        this.onlineState = t;
        var e = !1;
        return this.na && !this.ea && this.ia(this.na, t) && (this.ra(this.na), e = !0), 
        e;
    }, t.prototype.ia = function(t, e) {
        // Always raise the first event when we're synced
        if (!t.fromCache) return !0;
        // NOTE: We consider OnlineState.Unknown as online (it should become Offline
        // or Online if we wait long enough).
                var n = "Offline" /* Offline */ !== e;
        // Don't raise the event if we're online, aren't synced yet (checked
        // above) and are waiting for a sync.
                return !(this.options.oa && n || t.docs.W() && "Offline" /* Offline */ !== e);
        // Raise data from cache if we have any documents or we are offline
        }, t.prototype.sa = function(t) {
        // We don't need to handle includeDocumentMetadataChanges here because
        // the Metadata only changes have already been stripped out if needed.
        // At this point the only changes we will see are the ones we should
        // propagate.
        if (t.docChanges.length > 0) return !0;
        var e = this.na && this.na.hasPendingWrites !== t.hasPendingWrites;
        return !(!t.ne && !e) && !0 === this.options.includeMetadataChanges;
        // Generally we should have hit one of the cases above, but it's possible
        // to get here if there were only metadata docChanges and they got
        // stripped out.
        }, t.prototype.ra = function(t) {
        t = Pt.ie(t.query, t.docs, t.ee, t.fromCache), this.ea = !0, this.ta.next(t);
    }, t;
}(), eu = /** @class */ function() {
    function t() {
        // A set of outstanding references to a document sorted by key.
        this.ca = new gt(nu.ua), 
        // A set of outstanding references to a document sorted by target id.
        this.aa = new gt(nu.ha)
        /** Returns true if the reference set contains no references. */;
    }
    return t.prototype.W = function() {
        return this.ca.W();
    }, 
    /** Adds a reference to the given document key for the given ID. */ t.prototype.Do = function(t, e) {
        var n = new nu(t, e);
        this.ca = this.ca.add(n), this.aa = this.aa.add(n);
    }, 
    /** Add references to the given document keys for the given ID. */ t.prototype.la = function(t, e) {
        var n = this;
        t.forEach((function(t) {
            return n.Do(t, e);
        }));
    }, 
    /**
     * Removes a reference to the given document key for the given
     * ID.
     */
    t.prototype.No = function(t, e) {
        this._a(new nu(t, e));
    }, t.prototype.fa = function(t, e) {
        var n = this;
        t.forEach((function(t) {
            return n.No(t, e);
        }));
    }, 
    /**
     * Clears all references with a given ID. Calls removeRef() for each key
     * removed.
     */
    t.prototype.da = function(t) {
        var e = this, n = new Z$1(new $([])), r = new nu(n, t), i = new nu(n, t + 1), o = [];
        return this.aa.Kt([ r, i ], (function(t) {
            e._a(t), o.push(t.key);
        })), o;
    }, t.prototype.wa = function() {
        var t = this;
        this.ca.forEach((function(e) {
            return t._a(e);
        }));
    }, t.prototype._a = function(t) {
        this.ca = this.ca.delete(t), this.aa = this.aa.delete(t);
    }, t.prototype.Ea = function(t) {
        var e = new Z$1(new $([])), n = new nu(e, t), r = new nu(e, t + 1), i = Dt();
        return this.aa.Kt([ n, r ], (function(t) {
            i = i.add(t.key);
        })), i;
    }, t.prototype.Qr = function(t) {
        var e = new nu(t, 0), n = this.ca.jt(e);
        return null !== n && t.isEqual(n.key);
    }, t;
}(), nu = /** @class */ function() {
    function t(t, e) {
        this.key = t, this.Ta = e
        /** Compare by key then by ID */;
    }
    return t.ua = function(t, e) {
        return Z$1.$(t.key, e.key) || G$1(t.Ta, e.Ta);
    }, 
    /** Compare by ID then by key */ t.ha = function(t, e) {
        return G$1(t.Ta, e.Ta) || Z$1.$(t.key, e.key);
    }, t;
}();

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * A collection of references to a document from some kind of numbered entity
 * (either a target ID or batch ID). As references are added to or removed from
 * the set corresponding events are emitted to a registered garbage collector.
 *
 * Each reference is represented by a DocumentReference object. Each of them
 * contains enough information to uniquely identify the reference. They are all
 * stored primarily in a set sorted by key. A document is considered garbage if
 * there's no references in that set (this can be efficiently checked thanks to
 * sorting by key).
 *
 * ReferenceSet also keeps a secondary set that contains references sorted by
 * IDs. This one is used to efficiently implement removal of all references by
 * some target ID.
 */
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// The format of the LocalStorage key that stores the client state is:
//     firestore_clients_<persistence_prefix>_<instance_key>
/** Assembles the key for a client state in WebStorage */
function ru(t, e) {
    return "firestore_clients_" + t + "_" + e;
}

// The format of the WebStorage key that stores the mutation state is:
//     firestore_mutations_<persistence_prefix>_<batch_id>
//     (for unauthenticated users)
// or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>
// 'user_uid' is last to avoid needing to escape '_' characters that it might
// contain.
/** Assembles the key for a mutation batch in WebStorage */ function iu(t, e, n) {
    var r = "firestore_mutations_" + t + "_" + n;
    return e.u() && (r += "_" + e.uid), r;
}

// The format of the WebStorage key that stores a query target's metadata is:
//     firestore_targets_<persistence_prefix>_<target_id>
/** Assembles the key for a query state in WebStorage */ function ou(t, e) {
    return "firestore_targets_" + t + "_" + e;
}

// The WebStorage prefix that stores the primary tab's online state. The
// format of the key is:
//     firestore_online_state_<persistence_prefix>
/**
 * Holds the state of a mutation batch, including its user ID, batch ID and
 * whether the batch is 'pending', 'acknowledged' or 'rejected'.
 */
// Visible for testing
var uu = /** @class */ function() {
    function t(t, e, n, r) {
        this.user = t, this.batchId = e, this.state = n, this.error = r
        /**
     * Parses a MutationMetadata from its JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */;
    }
    return t.Ia = function(e, n, r) {
        var i = JSON.parse(r), o = "object" == typeof i && -1 !== [ "pending", "acknowledged", "rejected" ].indexOf(i.state) && (void 0 === i.error || "object" == typeof i.error), u = void 0;
        return o && i.error && ((o = "string" == typeof i.error.message && "string" == typeof i.error.code) && (u = new L$1(i.error.code, i.error.message))), 
        o ? new t(e, n, i.state, u) : (k$1("SharedClientState", "Failed to parse mutation state for ID '" + n + "': " + r), 
        null);
    }, t.prototype.ma = function() {
        var t = {
            state: this.state,
            updateTimeMs: Date.now()
        };
        return this.error && (t.error = {
            code: this.error.code,
            message: this.error.message
        }), JSON.stringify(t);
    }, t;
}(), su = /** @class */ function() {
    function t(t, e, n) {
        this.targetId = t, this.state = e, this.error = n
        /**
     * Parses a QueryTargetMetadata from its JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */;
    }
    return t.Ia = function(e, n) {
        var r = JSON.parse(n), i = "object" == typeof r && -1 !== [ "not-current", "current", "rejected" ].indexOf(r.state) && (void 0 === r.error || "object" == typeof r.error), o = void 0;
        return i && r.error && ((i = "string" == typeof r.error.message && "string" == typeof r.error.code) && (o = new L$1(r.error.code, r.error.message))), 
        i ? new t(e, r.state, o) : (k$1("SharedClientState", "Failed to parse target state for ID '" + e + "': " + n), 
        null);
    }, t.prototype.ma = function() {
        var t = {
            state: this.state,
            updateTimeMs: Date.now()
        };
        return this.error && (t.error = {
            code: this.error.code,
            message: this.error.message
        }), JSON.stringify(t);
    }, t;
}(), au = /** @class */ function() {
    function t(t, e) {
        this.clientId = t, this.activeTargetIds = e
        /**
     * Parses a RemoteClientState from the JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */;
    }
    return t.Ia = function(e, n) {
        for (var r = JSON.parse(n), i = "object" == typeof r && r.activeTargetIds instanceof Array, o = kt(), u = 0; i && u < r.activeTargetIds.length; ++u) i = nt(r.activeTargetIds[u]), 
        o = o.add(r.activeTargetIds[u]);
        return i ? new t(e, o) : (k$1("SharedClientState", "Failed to parse client data for instance '" + e + "': " + n), 
        null);
    }, t;
}(), cu = /** @class */ function() {
    function t(t, e) {
        this.clientId = t, this.onlineState = e
        /**
     * Parses a SharedOnlineState from its JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */;
    }
    return t.Ia = function(e) {
        var n = JSON.parse(e);
        return "object" == typeof n && -1 !== [ "Unknown", "Online", "Offline" ].indexOf(n.onlineState) && "string" == typeof n.clientId ? new t(n.clientId, n.onlineState) : (k$1("SharedClientState", "Failed to parse online state: " + e), 
        null);
    }, t;
}(), hu = /** @class */ function() {
    function t() {
        this.activeTargetIds = kt();
    }
    return t.prototype.Aa = function(t) {
        this.activeTargetIds = this.activeTargetIds.add(t);
    }, t.prototype.Ra = function(t) {
        this.activeTargetIds = this.activeTargetIds.delete(t);
    }, 
    /**
     * Converts this entry into a JSON-encoded format we can use for WebStorage.
     * Does not encode `clientId` as it is part of the key in WebStorage.
     */
    t.prototype.ma = function() {
        var t = {
            activeTargetIds: this.activeTargetIds.H(),
            updateTimeMs: Date.now()
        };
        return JSON.stringify(t);
    }, t;
}(), fu = /** @class */ function() {
    function t(t, e, n, r, i) {
        this.window = t, this.Cs = e, this.persistenceKey = n, this.Pa = r, this.ga = null, 
        this.Pu = null, this.ps = null, this.ya = this.Va.bind(this), this.pa = new vt(G$1), 
        this.lr = !1, 
        /**
             * Captures WebStorage events that occur before `start()` is called. These
             * events are replayed once `WebStorageSharedClientState` is started.
             */
        this.va = [];
        // Escape the special characters mentioned here:
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
        var o = n.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        this.storage = this.window.localStorage, this.currentUser = i, this.ba = ru(this.persistenceKey, this.Pa), 
        this.Sa = 
        /** Assembles the key for the current sequence number. */
        function(t) {
            return "firestore_sequence_number_" + t;
        }(this.persistenceKey), this.pa = this.pa.Tt(this.Pa, new hu), this.Da = new RegExp("^firestore_clients_" + o + "_([^_]*)$"), 
        this.Ca = new RegExp("^firestore_mutations_" + o + "_(\\d+)(?:_(.*))?$"), this.Na = new RegExp("^firestore_targets_" + o + "_(\\d+)$"), 
        this.xa = 
        /** Assembles the key for the online state of the primary tab. */
        function(t) {
            return "firestore_online_state_" + t;
        }(this.persistenceKey), this.Fa = function(t) {
            return "firestore_bundle_loaded_" + t;
        }(this.persistenceKey), 
        // Rather than adding the storage observer during start(), we add the
        // storage observer during initialization. This ensures that we collect
        // events before other components populate their initial state (during their
        // respective start() calls). Otherwise, we might for example miss a
        // mutation that is added after LocalStore's start() processed the existing
        // mutations but before we observe WebStorage events.
        this.window.addEventListener("storage", this.ya);
    }
    /** Returns 'true' if WebStorage is available in the current environment. */    return t.Gs = function(t) {
        return !(!t || !t.localStorage);
    }, t.prototype.start = function() {
        return __awaiter(this, void 0, void 0, (function() {
            var t, e, r, i, o, u, s, a, c, h, f, l = this;
            return __generator(this, (function(n) {
                switch (n.label) {
                  case 0:
                    return [ 4 /*yield*/ , this.ga.Ic() ];

                  case 1:
                    for (t = n.sent(), e = 0, r = t; e < r.length; e++) (i = r[e]) !== this.Pa && (o = this.getItem(ru(this.persistenceKey, i))) && (u = au.Ia(i, o)) && (this.pa = this.pa.Tt(u.clientId, u));
                    for (this.Oa(), (s = this.storage.getItem(this.xa)) && (a = this.Ma(s)) && this.ka(a), 
                    c = 0, h = this.va; c < h.length; c++) f = h[c], this.Va(f);
                    return this.va = [], 
                    // Register a window unload hook to remove the client metadata entry from
                    // WebStorage even if `shutdown()` was not called.
                    this.window.addEventListener("unload", (function() {
                        return l.fc();
                    })), this.lr = !0, [ 2 /*return*/ ];
                }
            }));
        }));
    }, t.prototype.Ss = function(t) {
        this.setItem(this.Sa, JSON.stringify(t));
    }, t.prototype.$a = function() {
        return this.La(this.pa);
    }, t.prototype.Ba = function(t) {
        var e = !1;
        return this.pa.forEach((function(n, r) {
            r.activeTargetIds.has(t) && (e = !0);
        })), e;
    }, t.prototype.qa = function(t) {
        this.Ua(t, "pending");
    }, t.prototype.Qa = function(t, e, n) {
        this.Ua(t, e, n), 
        // Once a final mutation result is observed by other clients, they no longer
        // access the mutation's metadata entry. Since WebStorage replays events
        // in order, it is safe to delete the entry right after updating it.
        this.Ka(t);
    }, t.prototype.Wa = function(t) {
        var e = "not-current";
        // Lookup an existing query state if the target ID was already registered
        // by another tab
                if (this.Ba(t)) {
            var n = this.storage.getItem(ou(this.persistenceKey, t));
            if (n) {
                var r = su.Ia(t, n);
                r && (e = r.state);
            }
        }
        return this.ja.Aa(t), this.Oa(), e;
    }, t.prototype.Ga = function(t) {
        this.ja.Ra(t), this.Oa();
    }, t.prototype.za = function(t) {
        return this.ja.activeTargetIds.has(t);
    }, t.prototype.Ha = function(t) {
        this.removeItem(ou(this.persistenceKey, t));
    }, t.prototype.Ja = function(t, e, n) {
        this.Ya(t, e, n);
    }, t.prototype.Xa = function(t, e, n) {
        var r = this;
        e.forEach((function(t) {
            r.Ka(t);
        })), this.currentUser = t, n.forEach((function(t) {
            r.qa(t);
        }));
    }, t.prototype.Za = function(t) {
        this.th(t);
    }, t.prototype.eh = function() {
        this.nh();
    }, t.prototype.fc = function() {
        this.lr && (this.window.removeEventListener("storage", this.ya), this.removeItem(this.ba), 
        this.lr = !1);
    }, t.prototype.getItem = function(t) {
        var e = this.storage.getItem(t);
        return x$1("SharedClientState", "READ", t, e), e;
    }, t.prototype.setItem = function(t, e) {
        x$1("SharedClientState", "SET", t, e), this.storage.setItem(t, e);
    }, t.prototype.removeItem = function(t) {
        x$1("SharedClientState", "REMOVE", t), this.storage.removeItem(t);
    }, t.prototype.Va = function(t) {
        var r = this, i = t;
        // Note: The function is typed to take Event to be interface-compatible with
        // `Window.addEventListener`.
                if (i.storageArea === this.storage) {
            if (x$1("SharedClientState", "EVENT", i.key, i.newValue), i.key === this.ba) return void k$1("Received WebStorage notification for local change. Another client might have garbage-collected our state");
            this.Cs.Mi((function() {
                return __awaiter(r, void 0, void 0, (function() {
                    var t, e, r, o, u, s;
                    return __generator(this, (function(n) {
                        if (this.lr) {
                            if (null !== i.key) if (this.Da.test(i.key)) {
                                if (null == i.newValue) return t = this.sh(i.key), [ 2 /*return*/ , this.ih(t, null) ];
                                if (e = this.rh(i.key, i.newValue)) return [ 2 /*return*/ , this.ih(e.clientId, e) ];
                            } else if (this.Ca.test(i.key)) {
                                if (null !== i.newValue && (r = this.oh(i.key, i.newValue))) return [ 2 /*return*/ , this.uh(r) ];
                            } else if (this.Na.test(i.key)) {
                                if (null !== i.newValue && (o = this.ah(i.key, i.newValue))) return [ 2 /*return*/ , this.hh(o) ];
                            } else if (i.key === this.xa) {
                                if (null !== i.newValue && (u = this.Ma(i.newValue))) return [ 2 /*return*/ , this.ka(u) ];
                            } else if (i.key === this.Sa) (s = function(t) {
                                var e = _r.Ds;
                                if (null != t) try {
                                    var n = JSON.parse(t);
                                    C("number" == typeof n), e = n;
                                } catch (t) {
                                    k$1("SharedClientState", "Failed to read sequence number from WebStorage", t);
                                }
                                return e;
                            }(i.newValue)) !== _r.Ds && this.ps(s); else if (i.key === this.Fa) return [ 2 /*return*/ , this.ga.lh() ];
                        } else this.va.push(i);
                        return [ 2 /*return*/ ];
                    }));
                }));
            }));
        }
    }, Object.defineProperty(t.prototype, "ja", {
        get: function() {
            return this.pa.get(this.Pa);
        },
        enumerable: !1,
        configurable: !0
    }), t.prototype.Oa = function() {
        this.setItem(this.ba, this.ja.ma());
    }, t.prototype.Ua = function(t, e, n) {
        var r = new uu(this.currentUser, t, e, n), i = iu(this.persistenceKey, this.currentUser, t);
        this.setItem(i, r.ma());
    }, t.prototype.Ka = function(t) {
        var e = iu(this.persistenceKey, this.currentUser, t);
        this.removeItem(e);
    }, t.prototype.th = function(t) {
        var e = {
            clientId: this.Pa,
            onlineState: t
        };
        this.storage.setItem(this.xa, JSON.stringify(e));
    }, t.prototype.Ya = function(t, e, n) {
        var r = ou(this.persistenceKey, t), i = new su(t, e, n);
        this.setItem(r, i.ma());
    }, t.prototype.nh = function() {
        this.setItem(this.Fa, "value-not-used");
    }, 
    /**
     * Parses a client state key in WebStorage. Returns null if the key does not
     * match the expected key format.
     */
    t.prototype.sh = function(t) {
        var e = this.Da.exec(t);
        return e ? e[1] : null;
    }, 
    /**
     * Parses a client state in WebStorage. Returns 'null' if the value could not
     * be parsed.
     */
    t.prototype.rh = function(t, e) {
        var n = this.sh(t);
        return au.Ia(n, e);
    }, 
    /**
     * Parses a mutation batch state in WebStorage. Returns 'null' if the value
     * could not be parsed.
     */
    t.prototype.oh = function(t, e) {
        var n = this.Ca.exec(t), r = Number(n[1]), i = void 0 !== n[2] ? n[2] : null;
        return uu.Ia(new N$1(i), r, e);
    }, 
    /**
     * Parses a query target state from WebStorage. Returns 'null' if the value
     * could not be parsed.
     */
    t.prototype.ah = function(t, e) {
        var n = this.Na.exec(t), r = Number(n[1]);
        return su.Ia(r, e);
    }, 
    /**
     * Parses an online state from WebStorage. Returns 'null' if the value
     * could not be parsed.
     */
    t.prototype.Ma = function(t) {
        return cu.Ia(t);
    }, t.prototype.uh = function(t) {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(e) {
                return t.user.uid === this.currentUser.uid ? [ 2 /*return*/ , this.ga._h(t.batchId, t.state, t.error) ] : (x$1("SharedClientState", "Ignoring mutation for non-active user " + t.user.uid), 
                [ 2 /*return*/ ]);
            }));
        }));
    }, t.prototype.hh = function(t) {
        return this.ga.fh(t.targetId, t.state, t.error);
    }, t.prototype.ih = function(t, e) {
        var n = this, r = e ? this.pa.Tt(t, e) : this.pa.remove(t), i = this.La(this.pa), o = this.La(r), u = [], s = [];
        return o.forEach((function(t) {
            i.has(t) || u.push(t);
        })), i.forEach((function(t) {
            o.has(t) || s.push(t);
        })), this.ga.dh(u, s).then((function() {
            n.pa = r;
        }));
    }, t.prototype.ka = function(t) {
        // We check whether the client that wrote this online state is still active
        // by comparing its client ID to the list of clients kept active in
        // IndexedDb. If a client does not update their IndexedDb client state
        // within 5 seconds, it is considered inactive and we don't emit an online
        // state event.
        this.pa.get(t.clientId) && this.Pu(t.onlineState);
    }, t.prototype.La = function(t) {
        var e = kt();
        return t.forEach((function(t, n) {
            e = e.Gt(n.activeTargetIds);
        })), e;
    }, t;
}(), lu = /** @class */ function() {
    function t() {
        this.wh = new hu, this.Eh = {}, this.Pu = null, this.ps = null;
    }
    return t.prototype.qa = function(t) {
        // No op.
    }, t.prototype.Qa = function(t, e, n) {
        // No op.
    }, t.prototype.Wa = function(t) {
        return this.wh.Aa(t), this.Eh[t] || "not-current";
    }, t.prototype.Ja = function(t, e, n) {
        this.Eh[t] = e;
    }, t.prototype.Ga = function(t) {
        this.wh.Ra(t);
    }, t.prototype.za = function(t) {
        return this.wh.activeTargetIds.has(t);
    }, t.prototype.Ha = function(t) {
        delete this.Eh[t];
    }, t.prototype.$a = function() {
        return this.wh.activeTargetIds;
    }, t.prototype.Ba = function(t) {
        return this.wh.activeTargetIds.has(t);
    }, t.prototype.start = function() {
        return this.wh = new hu, Promise.resolve();
    }, t.prototype.Xa = function(t, e, n) {
        // No op.
    }, t.prototype.Za = function(t) {
        // No op.
    }, t.prototype.fc = function() {}, t.prototype.Ss = function(t) {}, t.prototype.eh = function() {
        // No op.
    }, t;
}(), pu = function(t) {
    this.key = t;
}, du = function(t) {
    this.key = t;
}, vu = /** @class */ function() {
    function t(t, 
    /** Documents included in the remote target */
    e) {
        this.query = t, this.Th = e, this.Ih = null, 
        /**
             * A flag whether the view is current with the backend. A view is considered
             * current after it has seen the current flag from the backend and did not
             * lose consistency within the watch stream (e.g. because of an existence
             * filter mismatch).
             */
        this.le = !1, 
        /** Documents in the view but not in the remote target */
        this.mh = Dt(), 
        /** Document Keys that have local changes */
        this.ee = Dt(), this.Ah = Wn(t), this.Rh = new Ot(this.Ah);
    }
    return Object.defineProperty(t.prototype, "Ph", {
        /**
         * The set of remote documents that the server has told us belongs to the target associated with
         * this view.
         */
        get: function() {
            return this.Th;
        },
        enumerable: !1,
        configurable: !0
    }), 
    /**
     * Iterates over a set of doc changes, applies the query limit, and computes
     * what the new results should be, what the changes were, and whether we may
     * need to go back to the local cache for more results. Does not make any
     * changes to the view.
     * @param docChanges The doc changes to apply to this view.
     * @param previousChanges If this is being called with a refill, then start
     *        with this set of docs and changes instead of the current view.
     * @return a new set of docs, changes, and refill flag.
     */
    t.prototype.gh = function(t, e) {
        var n = this, r = e ? e.yh : new St, i = e ? e.Rh : this.Rh, o = e ? e.ee : this.ee, u = i, s = !1, a = Rn(this.query) && i.size === this.query.limit ? i.last() : null, c = Vn(this.query) && i.size === this.query.limit ? i.first() : null;
        // Drop documents out to meet limit/limitToLast requirement.
        if (t.Pt((function(t, e) {
            var h = i.get(t), f = e instanceof xn ? e : null;
            f && (f = Kn(n.query, f) ? f : null);
            var l = !!h && n.ee.has(h.key), p = !!f && (f.an || 
            // We only consider committed mutations for documents that were
            // mutated during the lifetime of the view.
            n.ee.has(f.key) && f.hasCommittedMutations), d = !1;
            // Calculate change
            h && f ? h.data().isEqual(f.data()) ? l !== p && (r.track({
                type: 3 /* Metadata */ ,
                doc: f
            }), d = !0) : n.Vh(h, f) || (r.track({
                type: 2 /* Modified */ ,
                doc: f
            }), d = !0, (a && n.Ah(f, a) > 0 || c && n.Ah(f, c) < 0) && (
            // This doc moved from inside the limit to outside the limit.
            // That means there may be some other doc in the local cache
            // that should be included instead.
            s = !0)) : !h && f ? (r.track({
                type: 0 /* Added */ ,
                doc: f
            }), d = !0) : h && !f && (r.track({
                type: 1 /* Removed */ ,
                doc: h
            }), d = !0, (a || c) && (
            // A doc was removed from a full limit query. We'll need to
            // requery from the local cache to see if we know about some other
            // doc that should be in the results.
            s = !0)), d && (f ? (u = u.add(f), o = p ? o.add(t) : o.delete(t)) : (u = u.delete(t), 
            o = o.delete(t)));
        })), Rn(this.query) || Vn(this.query)) for (;u.size > this.query.limit; ) {
            var h = Rn(this.query) ? u.last() : u.first();
            u = u.delete(h.key), o = o.delete(h.key), r.track({
                type: 1 /* Removed */ ,
                doc: h
            });
        }
        return {
            Rh: u,
            yh: r,
            ph: s,
            ee: o
        };
    }, t.prototype.Vh = function(t, e) {
        // We suppress the initial change event for documents that were modified as
        // part of a write acknowledgment (e.g. when the value of a server transform
        // is applied) as Watch will send us the same document again.
        // By suppressing the event, we only raise two user visible events (one with
        // `hasPendingWrites` and the final state of the document) instead of three
        // (one with `hasPendingWrites`, the modified document with
        // `hasPendingWrites` and the final state of the document).
        return t.an && e.hasCommittedMutations && !e.an;
    }, 
    /**
     * Updates the view with the given ViewDocumentChanges and optionally updates
     * limbo docs and sync state from the provided target change.
     * @param docChanges The set of changes to make to the view's docs.
     * @param updateLimboDocuments Whether to update limbo documents based on this
     *        change.
     * @param targetChange A target change to apply for computing limbo docs and
     *        sync state.
     * @return A new ViewChange with the given docs, changes, and sync state.
     */
    // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
    t.prototype.Zn = function(t, e, n) {
        var r = this, i = this.Rh;
        this.Rh = t.Rh, this.ee = t.ee;
        // Sort changes based on type and query comparator
        var o = t.yh.Zt();
        o.sort((function(t, e) {
            return function(t, e) {
                var n = function(t) {
                    switch (t) {
                      case 0 /* Added */ :
                        return 1;

                      case 2 /* Modified */ :
                      case 3 /* Metadata */ :
                        // A metadata change is converted to a modified change at the public
                        // api layer.  Since we sort by document key and then change type,
                        // metadata and modified changes must be sorted equivalently.
                        return 2;

                      case 1 /* Removed */ :
                        return 0;

                      default:
                        return P$1();
                    }
                };
                return n(t) - n(e);
            }(t.type, e.type) || r.Ah(t.doc, e.doc);
        })), this.bh(n);
        var u = e ? this.Sh() : [], s = 0 === this.mh.size && this.le ? 1 /* Synced */ : 0 /* Local */ , a = s !== this.Ih;
        return this.Ih = s, 0 !== o.length || a ? {
            snapshot: new Pt(this.query, t.Rh, i, o, t.ee, 0 /* Local */ === s, a, 
            /* excludesMetadataChanges= */ !1),
            Dh: u
        } : {
            Dh: u
        };
        // no changes
        }, 
    /**
     * Applies an OnlineState change to the view, potentially generating a
     * ViewChange if the view's syncState changes as a result.
     */
    t.prototype.Yu = function(t) {
        return this.le && "Offline" /* Offline */ === t ? (
        // If we're offline, set `current` to false and then call applyChanges()
        // to refresh our syncState and generate a ViewChange as appropriate. We
        // are guaranteed to get a new TargetChange that sets `current` back to
        // true once the client is back online.
        this.le = !1, this.Zn({
            Rh: this.Rh,
            yh: new St,
            ee: this.ee,
            ph: !1
        }, 
        /* updateLimboDocuments= */ !1)) : {
            Dh: []
        };
    }, 
    /**
     * Returns whether the doc for the given key should be in limbo.
     */
    t.prototype.Ch = function(t) {
        // If the remote end says it's part of this query, it's not in limbo.
        return !this.Th.has(t) && 
        // The local store doesn't think it's a result, so it shouldn't be in limbo.
        !!this.Rh.has(t) && !this.Rh.get(t).an;
    }, 
    /**
     * Updates syncedDocuments, current, and limbo docs based on the given change.
     * Returns the list of changes to which docs are in limbo.
     */
    t.prototype.bh = function(t) {
        var e = this;
        t && (t._e.forEach((function(t) {
            return e.Th = e.Th.add(t);
        })), t.fe.forEach((function(t) {})), t.de.forEach((function(t) {
            return e.Th = e.Th.delete(t);
        })), this.le = t.le);
    }, t.prototype.Sh = function() {
        var t = this;
        // We can only determine limbo documents when we're in-sync with the server.
                if (!this.le) return [];
        // TODO(klimt): Do this incrementally so that it's not quadratic when
        // updating many documents.
                var e = this.mh;
        this.mh = Dt(), this.Rh.forEach((function(e) {
            t.Ch(e.key) && (t.mh = t.mh.add(e.key));
        }));
        // Diff the new limbo docs with the old limbo docs.
        var n = [];
        return e.forEach((function(e) {
            t.mh.has(e) || n.push(new du(e));
        })), this.mh.forEach((function(t) {
            e.has(t) || n.push(new pu(t));
        })), n;
    }, 
    /**
     * Update the in-memory state of the current view with the state read from
     * persistence.
     *
     * We update the query view whenever a client's primary status changes:
     * - When a client transitions from primary to secondary, it can miss
     *   LocalStorage updates and its query views may temporarily not be
     *   synchronized with the state on disk.
     * - For secondary to primary transitions, the client needs to update the list
     *   of `syncedDocuments` since secondary clients update their query views
     *   based purely on synthesized RemoteEvents.
     *
     * @param queryResult.documents - The documents that match the query according
     * to the LocalStore.
     * @param queryResult.remoteKeys - The keys of the documents that match the
     * query according to the backend.
     *
     * @return The ViewChange that resulted from this synchronization.
     */
    // PORTING NOTE: Multi-tab only.
    t.prototype.Nh = function(t) {
        this.Th = t.Bc, this.mh = Dt();
        var e = this.gh(t.documents);
        return this.Zn(e, /*updateLimboDocuments=*/ !0);
    }, 
    /**
     * Returns a view snapshot as if this query was just listened to. Contains
     * a document add for every existing document and the `fromCache` and
     * `hasPendingWrites` status of the already established view.
     */
    // PORTING NOTE: Multi-tab only.
    t.prototype.xh = function() {
        return Pt.ie(this.query, this.Rh, this.ee, 0 /* Local */ === this.Ih);
    }, t;
}(), yu = function(
/**
     * The query itself.
     */
t, 
/**
     * The target number created by the client that is used in the watch
     * stream to identify this query.
     */
e, 
/**
     * The view is responsible for computing the final merged truth of what
     * docs are in the query. It gets notified of local and remote changes,
     * and applies the query filters and limits to determine the most correct
     * possible results.
     */
n) {
    this.query = t, this.targetId = e, this.view = n;
}, mu = function(t) {
    this.key = t, 
    /**
             * Set to true once we've received a document. This is used in
             * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
             * decide whether it needs to manufacture a delete event for the target once
             * the target is CURRENT.
             */
    this.Fh = !1;
}, gu = /** @class */ function() {
    function t(t, e, n, 
    // PORTING NOTE: Manages state synchronization in multi-tab environments.
    r, i, o) {
        this.Cu = t, this.Oh = e, this.Mh = n, this.kh = r, this.currentUser = i, this.$h = o, 
        this.Lh = {}, this.Bh = new fr((function(t) {
            return Bn(t);
        }), zn), this.qh = new Map, 
        /**
             * The keys of documents that are in limbo for which we haven't yet started a
             * limbo resolution query.
             */
        this.Uh = [], 
        /**
             * Keeps track of the target ID for each document that is in limbo with an
             * active target.
             */
        this.Qh = new vt(Z$1.$), 
        /**
             * Keeps track of the information about an active limbo resolution for each
             * active target ID that was started for the purpose of limbo resolution.
             */
        this.Kh = new Map, this.Wh = new eu, 
        /** Stores user completion handlers, indexed by User and BatchId. */
        this.jh = {}, 
        /** Stores user callbacks waiting for all pending writes to be acknowledged. */
        this.Gh = new Map, this.zh = zi._o(), this.onlineState = "Unknown" /* Unknown */ , 
        // The primary state is set to `true` or `false` immediately after Firestore
        // startup. In the interim, a client should only be considered primary if
        // `isPrimary` is true.
        this.Hh = void 0;
    }
    return Object.defineProperty(t.prototype, "Jh", {
        get: function() {
            return !0 === this.Hh;
        },
        enumerable: !1,
        configurable: !0
    }), t;
}();

/**
 * Holds the state of a query target, including its target ID and whether the
 * target is 'not-current', 'current' or 'rejected'.
 */
// Visible for testing
/**
 * Initiates the new listen, resolves promise when listen enqueued to the
 * server. All the subsequent view snapshots or errors are sent to the
 * subscribed handlers. Returns the initial snapshot.
 */
function wu(t, r) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, i, o, u, s, a;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                return e = Hu(t), (u = e.Bh.get(r)) ? (
                // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
                // already exists when EventManager calls us for the first time. This
                // happens when the primary tab is already listening to this query on
                // behalf of another tab and the user of the primary also starts listening
                // to the query. EventManager will not have an assigned target ID in this
                // case and calls `listen` to obtain this ID.
                i = u.targetId, e.kh.Wa(i), o = u.view.xh(), [ 3 /*break*/ , 4 ]) : [ 3 /*break*/ , 1 ];

              case 1:
                return [ 4 /*yield*/ , ao(e.Cu, jn(r)) ];

              case 2:
                return s = n.sent(), a = e.kh.Wa(s.targetId), i = s.targetId, [ 4 /*yield*/ , bu(e, r, i, "current" === a) ];

              case 3:
                o = n.sent(), e.Jh && To(e.Oh, s), n.label = 4;

              case 4:
                return [ 2 /*return*/ , o ];
            }
        }));
    }));
}

/**
 * Registers a view for a previously unknown query and computes its initial
 * snapshot.
 */ function bu(t, r, i, o) {
    return __awaiter(this, void 0, void 0, (function() {
        var u, s, a, c, h, f;
        return __generator(this, (function(l) {
            switch (l.label) {
              case 0:
                // PORTING NOTE: On Web only, we inject the code that registers new Limbo
                // targets based on view changes. This allows us to only depend on Limbo
                // changes when user code includes queries.
                return t.Yh = function(r, i, o) {
                    return function(t, r, i, o) {
                        return __awaiter(this, void 0, void 0, (function() {
                            var e, u, s;
                            return __generator(this, (function(n) {
                                switch (n.label) {
                                  case 0:
                                    return e = r.view.gh(i), e.ph ? [ 4 /*yield*/ , ho(t.Cu, r.query, 
                                    /* usePreviousResults= */ !1).then((function(t) {
                                        var n = t.documents;
                                        return r.view.gh(n, e);
                                    })) ] : [ 3 /*break*/ , 2 ];

                                  case 1:
                                    // The query has a limit and some docs were removed, so we need
                                    // to re-run the query against the local store to make sure we
                                    // didn't lose any good docs that had been past the limit.
                                    e = n.sent(), n.label = 2;

                                  case 2:
                                    return u = o && o.re.get(r.targetId), s = r.view.Zn(e, 
                                    /* updateLimboDocuments= */ t.Jh, u), [ 2 /*return*/ , (Cu(t, r.targetId, s.Dh), 
                                    s.snapshot) ];
                                }
                            }));
                        }));
                    }(t, r, i, o);
                }, [ 4 /*yield*/ , ho(t.Cu, r, 
                /* usePreviousResults= */ !0) ];

              case 1:
                return u = l.sent(), s = new vu(r, u.Bc), a = s.gh(u.documents), c = Rt.he(i, o && "Offline" /* Offline */ !== t.onlineState), 
                h = s.Zn(a, 
                /* updateLimboDocuments= */ t.Jh, c), Cu(t, i, h.Dh), f = new yu(r, i, s), [ 2 /*return*/ , (t.Bh.set(r, f), 
                t.qh.has(i) ? t.qh.get(i).push(r) : t.qh.set(i, [ r ]), h.snapshot) ];
            }
        }));
    }));
}

/** Stops listening to the query. */ function _u(t, r) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, i, o;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                return e = R$1(t), i = e.Bh.get(r), (o = e.qh.get(i.targetId)).length > 1 ? [ 2 /*return*/ , (e.qh.set(i.targetId, o.filter((function(t) {
                    return !zn(t, r);
                }))), void e.Bh.delete(r)) ] : e.Jh ? (
                // We need to remove the local query target first to allow us to verify
                // whether any other client is still interested in this target.
                e.kh.Ga(i.targetId), e.kh.Ba(i.targetId) ? [ 3 /*break*/ , 2 ] : [ 4 /*yield*/ , co(e.Cu, i.targetId, 
                /*keepPersistedTargetData=*/ !1).then((function() {
                    e.kh.Ha(i.targetId), No(e.Oh, i.targetId), Su(e, i.targetId);
                })).catch(vo) ]) : [ 3 /*break*/ , 3 ];

              case 1:
                n.sent(), n.label = 2;

              case 2:
                return [ 3 /*break*/ , 5 ];

              case 3:
                return Su(e, i.targetId), [ 4 /*yield*/ , co(e.Cu, i.targetId, 
                /*keepPersistedTargetData=*/ !0) ];

              case 4:
                n.sent(), n.label = 5;

              case 5:
                return [ 2 /*return*/ ];
            }
        }));
    }));
}

/**
 * Initiates the write of local mutation batch which involves adding the
 * writes to the mutation queue, notifying the remote store about new
 * mutations and raising events for any changes this write caused.
 *
 * The promise returned by this call is resolved when the above steps
 * have completed, *not* when the write was acked by the backend. The
 * userCallback is resolved once the write was acked/rejected by the
 * backend (or failed locally for any other reason).
 */ function Iu(t, r, i) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, o, u, s;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                e = Yu(t), n.label = 1;

              case 1:
                return n.trys.push([ 1, 5, , 6 ]), [ 4 /*yield*/ , function(t, e) {
                    var n, r = R$1(t), i = Q$1.now(), o = e.reduce((function(t, e) {
                        return t.add(e.key);
                    }), Dt());
                    return r.persistence.runTransaction("Locally write mutations", "readwrite", (function(t) {
                        return r.Oc._s(t, o).next((function(o) {
                            n = o;
                            for (
                            // For non-idempotent mutations (such as `FieldValue.increment()`),
                            // we record the base state in a separate patch mutation. This is
                            // later used to guarantee consistent values and prevents flicker
                            // even if the backend sends us an update that already includes our
                            // transform.
                            var u = [], s = 0, a = e; s < a.length; s++) {
                                var c = a[s], h = pn(c, n.get(c.key));
                                null != h && 
                                // NOTE: The base state should only be applied if there's some
                                // existing document to override, so use a Precondition of
                                // exists=true
                                u.push(new mn(c.key, h, An(h.proto.mapValue), an.exists(!0)));
                            }
                            return r.rs.Sr(t, i, u, e);
                        }));
                    })).then((function(t) {
                        var e = t.vn(n);
                        return {
                            batchId: t.batchId,
                            Qn: e
                        };
                    }));
                }(e.Cu, r) ];

              case 2:
                return o = n.sent(), e.kh.qa(o.batchId), function(t, e, n) {
                    var r = t.jh[t.currentUser.h()];
                    r || (r = new vt(G$1)), r = r.Tt(e, n), t.jh[t.currentUser.h()] = r;
                }(e, o.batchId, i), [ 4 /*yield*/ , Lu(e, o.Qn) ];

              case 3:
                return n.sent(), [ 4 /*yield*/ , Uo(e.Oh) ];

              case 4:
                return n.sent(), [ 3 /*break*/ , 6 ];

              case 5:
                return u = n.sent(), s = Lr(u, "Failed to persist write"), i.reject(s), [ 3 /*break*/ , 6 ];

              case 6:
                return [ 2 /*return*/ ];
            }
        }));
    }));
}

/**
 * Applies one remote event to the sync engine, notifying any views of the
 * changes, and releasing any pending mutation batches that would become
 * visible because of the snapshot version the remote event contains.
 */ function Eu(t, r) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, i;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                e = R$1(t), n.label = 1;

              case 1:
                return n.trys.push([ 1, 4, , 6 ]), [ 4 /*yield*/ , uo(e.Cu, r) ];

              case 2:
                return i = n.sent(), 
                // Update `receivedDocument` as appropriate for any limbo targets.
                r.re.forEach((function(t, n) {
                    var r = e.Kh.get(n);
                    r && (
                    // Since this is a limbo resolution lookup, it's for a single document
                    // and it could be added, modified, or removed, but not a combination.
                    C(t._e.size + t.fe.size + t.de.size <= 1), t._e.size > 0 ? r.Fh = !0 : t.fe.size > 0 ? C(r.Fh) : t.de.size > 0 && (C(r.Fh), 
                    r.Fh = !1));
                })), [ 4 /*yield*/ , Lu(e, i, r) ];

              case 3:
                // Update `receivedDocument` as appropriate for any limbo targets.
                return n.sent(), [ 3 /*break*/ , 6 ];

              case 4:
                return [ 4 /*yield*/ , vo(n.sent()) ];

              case 5:
                return n.sent(), [ 3 /*break*/ , 6 ];

              case 6:
                return [ 2 /*return*/ ];
            }
        }));
    }));
}

/**
 * Applies an OnlineState change to the sync engine and notifies any views of
 * the change.
 */ function Tu(t, e, n) {
    var r = R$1(t);
    // If we are the secondary client, we explicitly ignore the remote store's
    // online state (the local client may go offline, even though the primary
    // tab remains online) and only apply the primary tab's online state from
    // SharedClientState.
        if (r.Jh && 0 /* RemoteStore */ === n || !r.Jh && 1 /* SharedClientState */ === n) {
        var i = [];
        r.Bh.forEach((function(t, n) {
            var r = n.view.Yu(e);
            r.snapshot && i.push(r.snapshot);
        })), function(t, e) {
            var n = R$1(t);
            n.onlineState = e;
            var r = !1;
            n.queries.forEach((function(t, n) {
                for (var i = 0, o = n.listeners; i < o.length; i++) {
                    // Run global snapshot listeners if a consistent snapshot has been emitted.
                    o[i].Yu(e) && (r = !0);
                }
            })), r && Zo(n);
        }(r.Mh, e), i.length && r.Lh.au(i), r.onlineState = e, r.Jh && r.kh.Za(e);
    }
}

/**
 * Rejects the listen for the given targetID. This can be triggered by the
 * backend for any active target.
 *
 * @param syncEngine The sync engine implementation.
 * @param targetId The targetID corresponds to one previously initiated by the
 * user as part of TargetData passed to listen() on RemoteStore.
 * @param err A description of the condition that has forced the rejection.
 * Nearly always this will be an indication that the user is no longer
 * authorized to see the data matching the target.
 */ function Nu(t, r, i) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, o, u, s, a, c;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                // PORTING NOTE: Multi-tab only.
                return (e = R$1(t)).kh.Ja(r, "rejected", i), o = e.Kh.get(r), (u = o && o.key) ? (s = (s = new vt(Z$1.$)).Tt(u, new kn(u, H$1.min())), 
                a = Dt().add(u), c = new Ct(H$1.min(), 
                /* targetChanges= */ new Map, 
                /* targetMismatches= */ new gt(G$1), s, a), [ 4 /*yield*/ , Eu(e, c) ]) : [ 3 /*break*/ , 2 ];

              case 1:
                return n.sent(), 
                // Since this query failed, we won't want to manually unlisten to it.
                // We only remove it from bookkeeping after we successfully applied the
                // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
                // this query when the RemoteStore restarts the Watch stream, which should
                // re-trigger the target failure.
                e.Qh = e.Qh.remove(u), e.Kh.delete(r), Vu(e), [ 3 /*break*/ , 4 ];

              case 2:
                return [ 4 /*yield*/ , co(e.Cu, r, 
                /* keepPersistedTargetData */ !1).then((function() {
                    return Su(e, r, i);
                })).catch(vo) ];

              case 3:
                n.sent(), n.label = 4;

              case 4:
                return [ 2 /*return*/ ];
            }
        }));
    }));
}

function Au(t, r) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, i, o;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                e = R$1(t), i = r.batch.batchId, n.label = 1;

              case 1:
                return n.trys.push([ 1, 4, , 6 ]), [ 4 /*yield*/ , io(e.Cu, r) ];

              case 2:
                return o = n.sent(), 
                // The local store may or may not be able to apply the write result and
                // raise events immediately (depending on whether the watcher is caught
                // up), so we raise user callbacks first so that they consistently happen
                // before listen events.
                Ou(e, i, /*error=*/ null), ku(e, i), e.kh.Qa(i, "acknowledged"), [ 4 /*yield*/ , Lu(e, o) ];

              case 3:
                // The local store may or may not be able to apply the write result and
                // raise events immediately (depending on whether the watcher is caught
                // up), so we raise user callbacks first so that they consistently happen
                // before listen events.
                return n.sent(), [ 3 /*break*/ , 6 ];

              case 4:
                return [ 4 /*yield*/ , vo(n.sent()) ];

              case 5:
                return n.sent(), [ 3 /*break*/ , 6 ];

              case 6:
                return [ 2 /*return*/ ];
            }
        }));
    }));
}

function Du(t, r, i) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, o;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                e = R$1(t), n.label = 1;

              case 1:
                return n.trys.push([ 1, 4, , 6 ]), [ 4 /*yield*/ , function(t, e) {
                    var n = R$1(t);
                    return n.persistence.runTransaction("Reject batch", "readwrite-primary", (function(t) {
                        var r;
                        return n.rs.Cr(t, e).next((function(e) {
                            return C(null !== e), r = e.keys(), n.rs.$r(t, e);
                        })).next((function() {
                            return n.rs.Ur(t);
                        })).next((function() {
                            return n.Oc._s(t, r);
                        }));
                    }));
                }(e.Cu, r) ];

              case 2:
                return o = n.sent(), 
                // The local store may or may not be able to apply the write result and
                // raise events immediately (depending on whether the watcher is caught up),
                // so we raise user callbacks first so that they consistently happen before
                // listen events.
                Ou(e, r, i), ku(e, r), e.kh.Qa(r, "rejected", i), [ 4 /*yield*/ , Lu(e, o) ];

              case 3:
                // The local store may or may not be able to apply the write result and
                // raise events immediately (depending on whether the watcher is caught up),
                // so we raise user callbacks first so that they consistently happen before
                // listen events.
                return n.sent(), [ 3 /*break*/ , 6 ];

              case 4:
                return [ 4 /*yield*/ , vo(n.sent()) ];

              case 5:
                return n.sent(), [ 3 /*break*/ , 6 ];

              case 6:
                return [ 2 /*return*/ ];
            }
        }));
    }));
}

/**
 * Registers a user callback that resolves when all pending mutations at the moment of calling
 * are acknowledged .
 */ function xu(t, r) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, i, o, u, s;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                Oo((e = R$1(t)).Oh) || x$1("SyncEngine", "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled."), 
                n.label = 1;

              case 1:
                return n.trys.push([ 1, 3, , 4 ]), [ 4 /*yield*/ , function(t) {
                    var e = R$1(t);
                    return e.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", (function(t) {
                        return e.rs.Or(t);
                    }));
                }(e.Cu) ];

              case 2:
                return -1 === (i = n.sent()) ? [ 2 /*return*/ , void r.resolve() ] : ((o = e.Gh.get(i) || []).push(r), 
                e.Gh.set(i, o), [ 3 /*break*/ , 4 ]);

              case 3:
                return u = n.sent(), s = Lr(u, "Initialization of waitForPendingWrites() operation failed"), 
                r.reject(s), [ 3 /*break*/ , 4 ];

              case 4:
                return [ 2 /*return*/ ];
            }
        }));
    }));
}

/**
 * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,
 * if there are any.
 */ function ku(t, e) {
    (t.Gh.get(e) || []).forEach((function(t) {
        t.resolve();
    })), t.Gh.delete(e)
    /** Reject all outstanding callbacks waiting for pending writes to complete. */;
}

function Ou(t, e, n) {
    var r = R$1(t), i = r.jh[r.currentUser.h()];
    // NOTE: Mutations restored from persistence won't have callbacks, so it's
    // okay for there to be no callback for this ID.
    if (i) {
        var o = i.get(e);
        o && (n ? o.reject(n) : o.resolve(), i = i.remove(e)), r.jh[r.currentUser.h()] = i;
    }
}

function Su(t, e, n) {
    void 0 === n && (n = null), t.kh.Ga(e);
    for (var r = 0, i = t.qh.get(e); r < i.length; r++) {
        var o = i[r];
        t.Bh.delete(o), n && t.Lh.Xh(o, n);
    }
    t.qh.delete(e), t.Jh && t.Wh.da(e).forEach((function(e) {
        t.Wh.Qr(e) || 
        // We removed the last reference for this key
        Pu(t, e);
    }));
}

function Pu(t, e) {
    // It's possible that the target already got removed because the query failed. In that case,
    // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.
    var n = t.Qh.get(e);
    null !== n && (No(t.Oh, n), t.Qh = t.Qh.remove(e), t.Kh.delete(n), Vu(t));
}

function Cu(t, e, n) {
    for (var r = 0, i = n; r < i.length; r++) {
        var o = i[r];
        o instanceof pu ? (t.Wh.Do(o.key, e), Ru(t, o)) : o instanceof du ? (x$1("SyncEngine", "Document no longer in limbo: " + o.key), 
        t.Wh.No(o.key, e), t.Wh.Qr(o.key) || 
        // We removed the last reference for this key
        Pu(t, o.key)) : P$1();
    }
}

function Ru(t, e) {
    var n = e.key;
    t.Qh.get(n) || (x$1("SyncEngine", "New document in limbo: " + n), t.Uh.push(n), Vu(t));
}

/**
 * Starts listens for documents in limbo that are enqueued for resolution,
 * subject to a maximum number of concurrent resolutions.
 *
 * Without bounding the number of concurrent resolutions, the server can fail
 * with "resource exhausted" errors which can lead to pathological client
 * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.
 */ function Vu(t) {
    for (;t.Uh.length > 0 && t.Qh.size < t.$h; ) {
        var e = t.Uh.shift(), n = t.zh.next();
        t.Kh.set(n, new mu(e)), t.Qh = t.Qh.Tt(e, n), To(t.Oh, new ft(jn(Cn(e.path)), n, 2 /* LimboResolution */ , _r.Ds));
    }
}

function Lu(t, r, i) {
    return __awaiter(this, void 0, void 0, (function() {
        var o, u, s, a;
        return __generator(this, (function(c) {
            switch (c.label) {
              case 0:
                return o = R$1(t), u = [], s = [], a = [], o.Bh.W() ? [ 3 /*break*/ , 3 ] : (o.Bh.forEach((function(t, e) {
                    a.push(o.Yh(e, r, i).then((function(t) {
                        if (t) {
                            o.Jh && o.kh.Ja(e.targetId, t.fromCache ? "not-current" : "current"), u.push(t);
                            var n = br.Vs(e.targetId, t);
                            s.push(n);
                        }
                    })));
                })), [ 4 /*yield*/ , Promise.all(a) ]);

              case 1:
                return c.sent(), o.Lh.au(u), [ 4 /*yield*/ , function(t, r) {
                    return __awaiter(this, void 0, void 0, (function() {
                        var e, i, o, u, s, a, c, h, f;
                        return __generator(this, (function(n) {
                            switch (n.label) {
                              case 0:
                                e = R$1(t), n.label = 1;

                              case 1:
                                return n.trys.push([ 1, 3, , 4 ]), [ 4 /*yield*/ , e.persistence.runTransaction("notifyLocalViewChanges", "readwrite", (function(t) {
                                    return lr.forEach(r, (function(n) {
                                        return lr.forEach(n.gs, (function(r) {
                                            return e.persistence.Vr.Do(t, n.targetId, r);
                                        })).next((function() {
                                            return lr.forEach(n.ys, (function(r) {
                                                return e.persistence.Vr.No(t, n.targetId, r);
                                            }));
                                        }));
                                    }));
                                })) ];

                              case 2:
                                return n.sent(), [ 3 /*break*/ , 4 ];

                              case 3:
                                if (!Ar(i = n.sent())) throw i;
                                // If `notifyLocalViewChanges` fails, we did not advance the sequence
                                // number for the documents that were included in this transaction.
                                // This might trigger them to be deleted earlier than they otherwise
                                // would have, but it should not invalidate the integrity of the data.
                                                                return x$1("LocalStore", "Failed to update sequence numbers: " + i), 
                                [ 3 /*break*/ , 4 ];

                              case 4:
                                for (o = 0, u = r; o < u.length; o++) s = u[o], a = s.targetId, s.fromCache || (c = e.Cc.get(a), 
                                h = c.ft, f = c.Et(h), 
                                // Advance the last limbo free snapshot version
                                e.Cc = e.Cc.Tt(a, f));
                                return [ 2 /*return*/ ];
                            }
                        }));
                    }));
                }(o.Cu, s) ];

              case 2:
                c.sent(), c.label = 3;

              case 3:
                return [ 2 /*return*/ ];
            }
        }));
    }));
}

function Uu(t, r) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, i;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                return (e = R$1(t)).currentUser.isEqual(r) ? [ 3 /*break*/ , 3 ] : (x$1("SyncEngine", "User change. New user:", r.h()), 
                [ 4 /*yield*/ , ro(e.Cu, r) ]);

              case 1:
                return i = n.sent(), e.currentUser = r, 
                // Fails tasks waiting for pending writes requested by previous user.
                function(t, e) {
                    t.Gh.forEach((function(t) {
                        t.forEach((function(t) {
                            t.reject(new L$1(V$1.CANCELLED, "'waitForPendingWrites' promise is rejected due to a user change."));
                        }));
                    })), t.Gh.clear();
                }(e), 
                // TODO(b/114226417): Consider calling this only in the primary tab.
                e.kh.Xa(r, i.$c, i.Lc), [ 4 /*yield*/ , Lu(e, i.kc) ];

              case 2:
                n.sent(), n.label = 3;

              case 3:
                return [ 2 /*return*/ ];
            }
        }));
    }));
}

function Mu(t, e) {
    var n = R$1(t), r = n.Kh.get(e);
    if (r && r.Fh) return Dt().add(r.key);
    var i = Dt(), o = n.qh.get(e);
    if (!o) return i;
    for (var u = 0, s = o; u < s.length; u++) {
        var a = s[u], c = n.Bh.get(a);
        i = i.Gt(c.view.Ph);
    }
    return i;
}

/**
 * Reconcile the list of synced documents in an existing view with those
 * from persistence.
 */ function qu(t, r) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, i, o;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                return [ 4 /*yield*/ , ho((e = R$1(t)).Cu, r.query, 
                /* usePreviousResults= */ !0) ];

              case 1:
                return i = n.sent(), o = r.view.Nh(i), [ 2 /*return*/ , (e.Jh && Cu(e, r.targetId, o.Dh), 
                o) ];
            }
        }));
    }));
}

/**
 * Retrieves newly changed documents from remote document cache and raises
 * snapshots if needed.
 */
// PORTING NOTE: Multi-Tab only.
function ju(t) {
    return __awaiter(this, void 0, void 0, (function() {
        var e;
        return __generator(this, (function(n) {
            return [ 2 /*return*/ , lo((e = R$1(t)).Cu).then((function(t) {
                return Lu(e, t);
            })) ];
        }));
    }));
}

/** Applies a mutation state to an existing batch.  */
// PORTING NOTE: Multi-Tab only.
function Fu(t, r, i, o) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, u;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                return [ 4 /*yield*/ , function(t, e) {
                    var n = R$1(t), r = R$1(n.rs);
                    return n.persistence.runTransaction("Lookup mutation documents", "readonly", (function(t) {
                        return r.Nr(t, e).next((function(e) {
                            return e ? n.Oc._s(t, e) : lr.resolve(null);
                        }));
                    }));
                }((e = R$1(t)).Cu, r) ];

              case 1:
                return null === (u = n.sent()) ? [ 3 /*break*/ , 6 ] : "pending" !== i ? [ 3 /*break*/ , 3 ] : [ 4 /*yield*/ , Uo(e.Oh) ];

              case 2:
                // If we are the primary client, we need to send this write to the
                // backend. Secondary clients will ignore these writes since their remote
                // connection is disabled.
                return n.sent(), [ 3 /*break*/ , 4 ];

              case 3:
                "acknowledged" === i || "rejected" === i ? (
                // NOTE: Both these methods are no-ops for batches that originated from
                // other clients.
                Ou(e, r, o || null), ku(e, r), function(t, e) {
                    R$1(R$1(t).rs).Br(e);
                }(e.Cu, r)) : P$1(), n.label = 4;

              case 4:
                return [ 4 /*yield*/ , Lu(e, u) ];

              case 5:
                return n.sent(), [ 3 /*break*/ , 7 ];

              case 6:
                // A throttled tab may not have seen the mutation before it was completed
                // and removed from the mutation queue, in which case we won't have cached
                // the affected documents. In this case we can safely ignore the update
                // since that means we didn't apply the mutation locally at all (if we
                // had, we would have cached the affected documents), and so we will just
                // see any resulting document changes via normal remote document updates
                // as applicable.
                x$1("SyncEngine", "Cannot apply mutation batch with id: " + r), n.label = 7;

              case 7:
                return [ 2 /*return*/ ];
            }
        }));
    }));
}

/** Applies a query target change from a different tab. */
// PORTING NOTE: Multi-Tab only.
function zu(t, r) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, i, o, u, s, a, c, h;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                return Hu(e = R$1(t)), Yu(e), !0 !== r || !0 === e.Hh ? [ 3 /*break*/ , 3 ] : (i = e.kh.$a(), 
                [ 4 /*yield*/ , Bu(e, i.H()) ]);

              case 1:
                return o = n.sent(), e.Hh = !0, [ 4 /*yield*/ , Go(e.Oh, !0) ];

              case 2:
                for (n.sent(), u = 0, s = o; u < s.length; u++) a = s[u], To(e.Oh, a);
                return [ 3 /*break*/ , 7 ];

              case 3:
                return !1 !== r || !1 === e.Hh ? [ 3 /*break*/ , 7 ] : (c = [], h = Promise.resolve(), 
                e.qh.forEach((function(t, n) {
                    e.kh.za(n) ? c.push(n) : h = h.then((function() {
                        return Su(e, n), co(e.Cu, n, 
                        /*keepPersistedTargetData=*/ !0);
                    })), No(e.Oh, n);
                })), [ 4 /*yield*/ , h ]);

              case 4:
                return n.sent(), [ 4 /*yield*/ , Bu(e, c) ];

              case 5:
                return n.sent(), 
                // PORTING NOTE: Multi-Tab only.
                function(t) {
                    var e = R$1(t);
                    e.Kh.forEach((function(t, n) {
                        No(e.Oh, n);
                    })), e.Wh.wa(), e.Kh = new Map, e.Qh = new vt(Z$1.$);
                }(e), e.Hh = !1, [ 4 /*yield*/ , Go(e.Oh, !1) ];

              case 6:
                n.sent(), n.label = 7;

              case 7:
                return [ 2 /*return*/ ];
            }
        }));
    }));
}

function Bu(t, r, i) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, i, o, u, s, a, c, h, f, l, p, d, v, y;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                e = R$1(t), i = [], o = [], u = 0, s = r, n.label = 1;

              case 1:
                return u < s.length ? (a = s[u], c = void 0, (h = e.qh.get(a)) && 0 !== h.length ? [ 4 /*yield*/ , ao(e.Cu, jn(h[0])) ] : [ 3 /*break*/ , 7 ]) : [ 3 /*break*/ , 13 ];

              case 2:
                // For queries that have a local View, we fetch their current state
                // from LocalStore (as the resume token and the snapshot version
                // might have changed) and reconcile their views with the persisted
                // state (the list of syncedDocuments may have gotten out of sync).
                c = n.sent(), f = 0, l = h, n.label = 3;

              case 3:
                return f < l.length ? (p = l[f], d = e.Bh.get(p), [ 4 /*yield*/ , qu(e, d) ]) : [ 3 /*break*/ , 6 ];

              case 4:
                (v = n.sent()).snapshot && o.push(v.snapshot), n.label = 5;

              case 5:
                return f++, [ 3 /*break*/ , 3 ];

              case 6:
                return [ 3 /*break*/ , 11 ];

              case 7:
                return [ 4 /*yield*/ , fo(e.Cu, a) ];

              case 8:
                return y = n.sent(), [ 4 /*yield*/ , ao(e.Cu, y) ];

              case 9:
                return c = n.sent(), [ 4 /*yield*/ , bu(e, Gu(y), a, 
                /*current=*/ !1) ];

              case 10:
                n.sent(), n.label = 11;

              case 11:
                i.push(c), n.label = 12;

              case 12:
                return u++, [ 3 /*break*/ , 1 ];

              case 13:
                return [ 2 /*return*/ , (e.Lh.au(o), i) ];
            }
        }));
    }));
}

/**
 * Creates a `Query` object from the specified `Target`. There is no way to
 * obtain the original `Query`, so we synthesize a `Query` from the `Target`
 * object.
 *
 * The synthesized result might be different from the original `Query`, but
 * since the synthesized `Query` should return the same results as the
 * original one (only the presentation of results might differ), the potential
 * difference will not cause issues.
 */
// PORTING NOTE: Multi-Tab only.
function Gu(t) {
    return Pn(t.path, t.collectionGroup, t.orderBy, t.filters, t.limit, "F" /* First */ , t.startAt, t.endAt);
}

/** Returns the IDs of the clients that are currently active. */
// PORTING NOTE: Multi-Tab only.
function Ku(t) {
    var e = R$1(t);
    return R$1(R$1(e.Cu).persistence).Ic();
}

/** Applies a query target change from a different tab. */
// PORTING NOTE: Multi-Tab only.
function Wu(t, r, i, o) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, u, s;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                return (e = R$1(t)).Hh ? (
                // If we receive a target state notification via WebStorage, we are
                // either already secondary or another tab has taken the primary lease.
                x$1("SyncEngine", "Ignoring unexpected query state notification."), [ 3 /*break*/ , 8 ]) : [ 3 /*break*/ , 1 ];

              case 1:
                if (!e.qh.has(r)) return [ 3 /*break*/ , 8 ];
                switch (i) {
                  case "current":
                  case "not-current":
                    return [ 3 /*break*/ , 2 ];

                  case "rejected":
                    return [ 3 /*break*/ , 5 ];
                }
                return [ 3 /*break*/ , 7 ];

              case 2:
                return [ 4 /*yield*/ , lo(e.Cu) ];

              case 3:
                return u = n.sent(), s = Ct.ae(r, "current" === i), [ 4 /*yield*/ , Lu(e, u, s) ];

              case 4:
                return n.sent(), [ 3 /*break*/ , 8 ];

              case 5:
                return [ 4 /*yield*/ , co(e.Cu, r, 
                /* keepPersistedTargetData */ !0) ];

              case 6:
                return n.sent(), Su(e, r, o), [ 3 /*break*/ , 8 ];

              case 7:
                P$1(), n.label = 8;

              case 8:
                return [ 2 /*return*/ ];
            }
        }));
    }));
}

/** Adds or removes Watch targets for queries from different tabs. */ function Qu(t, r, i) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, o, u, s, a, c, h, f, l, p;
        return __generator(this, (function(d) {
            switch (d.label) {
              case 0:
                if (!(e = Hu(t)).Hh) return [ 3 /*break*/ , 10 ];
                o = 0, u = r, d.label = 1;

              case 1:
                return o < u.length ? (s = u[o], e.qh.has(s) ? (
                // A target might have been added in a previous attempt
                x$1("SyncEngine", "Adding an already active target " + s), [ 3 /*break*/ , 5 ]) : [ 4 /*yield*/ , fo(e.Cu, s) ]) : [ 3 /*break*/ , 6 ];

              case 2:
                return a = d.sent(), [ 4 /*yield*/ , ao(e.Cu, a) ];

              case 3:
                return c = d.sent(), [ 4 /*yield*/ , bu(e, Gu(a), c.targetId, 
                /*current=*/ !1) ];

              case 4:
                d.sent(), To(e.Oh, c), d.label = 5;

              case 5:
                return o++, [ 3 /*break*/ , 1 ];

              case 6:
                h = function(t) {
                    return __generator(this, (function(n) {
                        switch (n.label) {
                          case 0:
                            return e.qh.has(t) ? [ 4 /*yield*/ , co(e.Cu, t, 
                            /* keepPersistedTargetData */ !1).then((function() {
                                No(e.Oh, t), Su(e, t);
                            })).catch(vo) ] : [ 3 /*break*/ , 2 ];

                            // Release queries that are still active.
                                                      case 1:
                            // Release queries that are still active.
                            n.sent(), n.label = 2;

                          case 2:
                            return [ 2 /*return*/ ];
                        }
                    }));
                }, f = 0, l = i, d.label = 7;

              case 7:
                return f < l.length ? (p = l[f], [ 5 /*yield**/ , h(p) ]) : [ 3 /*break*/ , 10 ];

              case 8:
                d.sent(), d.label = 9;

              case 9:
                return f++, [ 3 /*break*/ , 7 ];

              case 10:
                return [ 2 /*return*/ ];
            }
        }));
    }));
}

function Hu(t) {
    var e = R$1(t);
    return e.Oh.xu.Qu = Eu.bind(null, e), e.Oh.xu.Xe = Mu.bind(null, e), e.Oh.xu.Uu = Nu.bind(null, e), 
    e.Lh.au = Jo.bind(null, e.Mh), e.Lh.Xh = Xo.bind(null, e.Mh), e;
}

function Yu(t) {
    var e = R$1(t);
    return e.Oh.xu.Ku = Au.bind(null, e), e.Oh.xu.Wu = Du.bind(null, e), e;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// TOOD(b/140938512): Drop SimpleQueryEngine and rename IndexFreeQueryEngine.
/**
 * A query engine that takes advantage of the target document mapping in the
 * QueryCache. The IndexFreeQueryEngine optimizes query execution by only
 * reading the documents that previously matched a query plus any documents that were
 * edited after the query was last listened to.
 *
 * There are some cases where Index-Free queries are not guaranteed to produce
 * the same results as full collection scans. In these cases, the
 * IndexFreeQueryEngine falls back to full query processing. These cases are:
 *
 * - Limit queries where a document that matched the query previously no longer
 *   matches the query.
 *
 * - Limit queries where a document edit may cause the document to sort below
 *   another document that is in the local cache.
 *
 * - Queries that have never been CURRENT or free of Limbo documents.
 */ var $u = /** @class */ function() {
    function t() {}
    return t.prototype.Mc = function(t) {
        this.Zh = t;
    }, t.prototype.ws = function(t, e, n, r) {
        var i = this;
        // Queries that match all documents don't benefit from using
        // IndexFreeQueries. It is more efficient to scan all documents in a
        // collection, rather than to perform individual lookups.
                return function(t) {
            return 0 === t.filters.length && null === t.limit && null == t.startAt && null == t.endAt && (0 === t.Tn.length || 1 === t.Tn.length && t.Tn[0].field.tt());
        }(e) || n.isEqual(H$1.min()) ? this.tl(t, e) : this.Zh._s(t, r).next((function(o) {
            var s = i.el(e, o);
            return (Rn(e) || Vn(e)) && i.ph(e.limitType, s, r, n) ? i.tl(t, e) : (D$1() <= LogLevel.DEBUG && x$1("IndexFreeQueryEngine", "Re-using previous result from %s to execute query: %s", n.toString(), Gn(e)), 
            i.Zh.ws(t, e, n).next((function(t) {
                // We merge `previousResults` into `updateResults`, since
                // `updateResults` is already a DocumentMap. If a document is
                // contained in both lists, then its contents are the same.
                return s.forEach((function(e) {
                    t = t.Tt(e.key, e);
                })), t;
            })));
        }));
        // Queries that have never seen a snapshot without limbo free documents
        // should also be run as a full collection scan.
        }, 
    /** Applies the query filter and sorting to the provided documents.  */ t.prototype.el = function(t, e) {
        // Sort the documents and re-apply the query filter since previously
        // matching documents do not necessarily still match the query.
        var n = new gt(Wn(t));
        return e.forEach((function(e, r) {
            r instanceof xn && Kn(t, r) && (n = n.add(r));
        })), n;
    }, 
    /**
     * Determines if a limit query needs to be refilled from cache, making it
     * ineligible for index-free execution.
     *
     * @param sortedPreviousResults The documents that matched the query when it
     * was last synchronized, sorted by the query's comparator.
     * @param remoteKeys The document keys that matched the query at the last
     * snapshot.
     * @param limboFreeSnapshotVersion The version of the snapshot when the query
     * was last synchronized.
     */
    t.prototype.ph = function(t, e, n, r) {
        // The query needs to be refilled if a previously matching document no
        // longer matches.
        if (n.size !== e.size) return !0;
        // Limit queries are not eligible for index-free query execution if there is
        // a potential that an older document from cache now sorts before a document
        // that was previously part of the limit. This, however, can only happen if
        // the document at the edge of the limit goes out of limit.
        // If a document that is not the limit boundary sorts differently,
        // the boundary of the limit itself did not change and documents from cache
        // will continue to be "rejected" by this boundary. Therefore, we can ignore
        // any modifications that don't affect the last document.
                var i = "F" /* First */ === t ? e.last() : e.first();
        return !!i && (i.hasPendingWrites || i.version.F(r) > 0);
    }, t.prototype.tl = function(t, e) {
        return D$1() <= LogLevel.DEBUG && x$1("IndexFreeQueryEngine", "Using full collection scan to execute query:", Gn(e)), 
        this.Zh.ws(t, e, H$1.min());
    }, t;
}(), Ju = /** @class */ function() {
    function t(t, e) {
        this.os = t, this.Vr = e, 
        /**
             * The set of all mutations that have been sent but not yet been applied to
             * the backend.
             */
        this.rs = [], 
        /** Next value to use when assigning sequential IDs to each mutation batch. */
        this.nl = 1, 
        /** An ordered mapping between documents and the mutations batch IDs. */
        this.sl = new gt(nu.ua);
    }
    return t.prototype.br = function(t) {
        return lr.resolve(0 === this.rs.length);
    }, t.prototype.Sr = function(t, e, n, r) {
        var i = this.nl;
        this.nl++, this.rs.length > 0 && this.rs[this.rs.length - 1];
        var o = new cr(i, e, n, r);
        this.rs.push(o);
        // Track references by document key and index collection parents.
        for (var u = 0, s = r; u < s.length; u++) {
            var a = s[u];
            this.sl = this.sl.add(new nu(a.key, i)), this.os.Dr(t, a.key.path.q());
        }
        return lr.resolve(o);
    }, t.prototype.Cr = function(t, e) {
        return lr.resolve(this.il(e));
    }, t.prototype.Fr = function(t, e) {
        var n = e + 1, r = this.rl(n), i = r < 0 ? 0 : r;
        // The requested batchId may still be out of range so normalize it to the
        // start of the queue.
                return lr.resolve(this.rs.length > i ? this.rs[i] : null);
    }, t.prototype.Or = function() {
        return lr.resolve(0 === this.rs.length ? -1 : this.nl - 1);
    }, t.prototype.Mr = function(t) {
        return lr.resolve(this.rs.slice());
    }, t.prototype.us = function(t, e) {
        var n = this, r = new nu(e, 0), i = new nu(e, Number.POSITIVE_INFINITY), o = [];
        return this.sl.Kt([ r, i ], (function(t) {
            var e = n.il(t.Ta);
            o.push(e);
        })), lr.resolve(o);
    }, t.prototype.ds = function(t, e) {
        var n = this, r = new gt(G$1);
        return e.forEach((function(t) {
            var e = new nu(t, 0), i = new nu(t, Number.POSITIVE_INFINITY);
            n.sl.Kt([ e, i ], (function(t) {
                r = r.add(t.Ta);
            }));
        })), lr.resolve(this.ol(r));
    }, t.prototype.Rs = function(t, e) {
        // Use the query path as a prefix for testing if a document matches the
        // query.
        var n = e.path, r = n.length + 1, i = n;
        // Construct a document reference for actually scanning the index. Unlike
        // the prefix the document key in this reference must have an even number of
        // segments. The empty segment can be used a suffix of the query path
        // because it precedes all other segments in an ordered traversal.
                Z$1.ot(i) || (i = i.child(""));
        var o = new nu(new Z$1(i), 0), u = new gt(G$1);
        // Find unique batchIDs referenced by all documents potentially matching the
        // query.
                return this.sl.Wt((function(t) {
            var e = t.key.path;
            return !!n.j(e) && (
            // Rows with document keys more than one segment longer than the query
            // path can't be matches. For example, a query on 'rooms' can't match
            // the document /rooms/abc/messages/xyx.
            // TODO(mcg): we'll need a different scanner when we implement
            // ancestor queries.
            e.length === r && (u = u.add(t.Ta)), !0);
        }), o), lr.resolve(this.ol(u));
    }, t.prototype.ol = function(t) {
        var e = this, n = [];
        // Construct an array of matching batches, sorted by batchID to ensure that
        // multiple mutations affecting the same document key are applied in order.
                return t.forEach((function(t) {
            var r = e.il(t);
            null !== r && n.push(r);
        })), n;
    }, t.prototype.$r = function(t, e) {
        var n = this;
        C(0 === this.cl(e.batchId, "removed")), this.rs.shift();
        var r = this.sl;
        return lr.forEach(e.mutations, (function(i) {
            var o = new nu(i.key, e.batchId);
            return r = r.delete(o), n.Vr.qr(t, i.key);
        })).next((function() {
            n.sl = r;
        }));
    }, t.prototype.Br = function(t) {
        // No-op since the memory mutation queue does not maintain a separate cache.
    }, t.prototype.Qr = function(t, e) {
        var n = new nu(e, 0), r = this.sl.jt(n);
        return lr.resolve(e.isEqual(r && r.key));
    }, t.prototype.Ur = function(t) {
        return this.rs.length, lr.resolve();
    }, 
    /**
     * Finds the index of the given batchId in the mutation queue and asserts that
     * the resulting index is within the bounds of the queue.
     *
     * @param batchId The batchId to search for
     * @param action A description of what the caller is doing, phrased in passive
     * form (e.g. "acknowledged" in a routine that acknowledges batches).
     */
    t.prototype.cl = function(t, e) {
        return this.rl(t);
    }, 
    /**
     * Finds the index of the given batchId in the mutation queue. This operation
     * is O(1).
     *
     * @return The computed index of the batch with the given batchId, based on
     * the state of the queue. Note this index can be negative if the requested
     * batchId has already been remvoed from the queue or past the end of the
     * queue if the batchId is larger than the last added batch.
     */
    t.prototype.rl = function(t) {
        return 0 === this.rs.length ? 0 : t - this.rs[0].batchId;
        // Examine the front of the queue to figure out the difference between the
        // batchId and indexes in the array. Note that since the queue is ordered
        // by batchId, if the first batch has a larger batchId then the requested
        // batchId doesn't exist in the queue.
        }, 
    /**
     * A version of lookupMutationBatch that doesn't return a promise, this makes
     * other functions that uses this code easier to read and more efficent.
     */
    t.prototype.il = function(t) {
        var e = this.rl(t);
        return e < 0 || e >= this.rs.length ? null : this.rs[e];
    }, t;
}(), Xu = /** @class */ function() {
    /**
     * @param sizer Used to assess the size of a document. For eager GC, this is expected to just
     * return 0 to avoid unnecessarily doing the work of calculating the size.
     */
    function t(t, e) {
        this.os = t, this.ul = e, 
        /** Underlying cache of documents and their read times. */
        this.docs = new vt(Z$1.$), 
        /** Size of all cached documents. */
        this.size = 0
        /**
     * Adds the supplied entry to the cache and updates the cache size as appropriate.
     *
     * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()`.
     */;
    }
    return t.prototype.jn = function(t, e, n) {
        var r = e.key, i = this.docs.get(r), o = i ? i.size : 0, u = this.ul(e);
        return this.docs = this.docs.Tt(r, {
            zn: e,
            size: u,
            readTime: n
        }), this.size += u - o, this.os.Dr(t, r.path.q());
    }, 
    /**
     * Removes the specified entry from the cache and updates the cache size as appropriate.
     *
     * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()`.
     */
    t.prototype.Hn = function(t) {
        var e = this.docs.get(t);
        e && (this.docs = this.docs.remove(t), this.size -= e.size);
    }, t.prototype.Jn = function(t, e) {
        var n = this.docs.get(e);
        return lr.resolve(n ? n.zn : null);
    }, t.prototype.getEntries = function(t, e) {
        var n = this, r = It();
        return e.forEach((function(t) {
            var e = n.docs.get(t);
            r = r.Tt(t, e ? e.zn : null);
        })), lr.resolve(r);
    }, t.prototype.ws = function(t, e, n) {
        for (var r = Tt(), i = new Z$1(e.path.child("")), o = this.docs.Vt(i)
        // Documents are ordered by key, so we can use a prefix scan to narrow down
        // the documents we need to match the query against.
        ; o.Nt(); ) {
            var u = o.Ct(), s = u.key, a = u.value, c = a.zn, h = a.readTime;
            if (!e.path.j(s.path)) break;
            h.F(n) <= 0 || c instanceof xn && Kn(e, c) && (r = r.Tt(c.key, c));
        }
        return lr.resolve(r);
    }, t.prototype.al = function(t, e) {
        return lr.forEach(this.docs, (function(t) {
            return e(t);
        }));
    }, t.prototype.Xr = function(t) {
        // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps
        // a separate changelog and does not need special handling for removals.
        return new Zu(this);
    }, t.prototype.eo = function(t) {
        return lr.resolve(this.size);
    }, t;
}(), Zu = /** @class */ function(e) {
    function n(t) {
        var n = this;
        return (n = e.call(this) || this).no = t, n;
    }
    return __extends(n, e), n.prototype.Zn = function(t) {
        var e = this, n = [];
        return this.Qn.forEach((function(r, i) {
            i && i.zn ? n.push(e.no.jn(t, i.zn, e.Wn(r))) : e.no.Hn(r);
        })), lr.qn(n);
    }, n.prototype.Yn = function(t, e) {
        return this.no.Jn(t, e);
    }, n.prototype.Xn = function(t, e) {
        return this.no.getEntries(t, e);
    }, n;
}(pr), ts = /** @class */ function() {
    function t(t) {
        this.persistence = t, 
        /**
             * Maps a target to the data about that target
             */
        this.hl = new fr((function(t) {
            return ot(t);
        }), ut), 
        /** The last received snapshot version. */
        this.lastRemoteSnapshotVersion = H$1.min(), 
        /** The highest numbered target ID encountered. */
        this.highestTargetId = 0, 
        /** The highest sequence number encountered. */
        this.ll = 0, 
        /**
             * A ordered bidirectional mapping between documents and the remote target
             * IDs.
             */
        this._l = new eu, this.targetCount = 0, this.fl = zi.lo();
    }
    return t.prototype.Ue = function(t, e) {
        return this.hl.forEach((function(t, n) {
            return e(n);
        })), lr.resolve();
    }, t.prototype.To = function(t) {
        return lr.resolve(this.lastRemoteSnapshotVersion);
    }, t.prototype.Io = function(t) {
        return lr.resolve(this.ll);
    }, t.prototype.fo = function(t) {
        return this.highestTargetId = this.fl.next(), lr.resolve(this.highestTargetId);
    }, t.prototype.mo = function(t, e, n) {
        return n && (this.lastRemoteSnapshotVersion = n), e > this.ll && (this.ll = e), 
        lr.resolve();
    }, t.prototype.Ro = function(t) {
        this.hl.set(t.target, t);
        var e = t.targetId;
        e > this.highestTargetId && (this.fl = new zi(e), this.highestTargetId = e), t.sequenceNumber > this.ll && (this.ll = t.sequenceNumber);
    }, t.prototype.Ao = function(t, e) {
        return this.Ro(e), this.targetCount += 1, lr.resolve();
    }, t.prototype.yo = function(t, e) {
        return this.Ro(e), lr.resolve();
    }, t.prototype.Vo = function(t, e) {
        return this.hl.delete(e.target), this._l.da(e.targetId), this.targetCount -= 1, 
        lr.resolve();
    }, t.prototype.mr = function(t, e, n) {
        var r = this, i = 0, o = [];
        return this.hl.forEach((function(u, s) {
            s.sequenceNumber <= e && null === n.get(s.targetId) && (r.hl.delete(u), o.push(r.po(t, s.targetId)), 
            i++);
        })), lr.qn(o).next((function() {
            return i;
        }));
    }, t.prototype.vo = function(t) {
        return lr.resolve(this.targetCount);
    }, t.prototype.bo = function(t, e) {
        var n = this.hl.get(e) || null;
        return lr.resolve(n);
    }, t.prototype.So = function(t, e, n) {
        return this._l.la(e, n), lr.resolve();
    }, t.prototype.Co = function(t, e, n) {
        this._l.fa(e, n);
        var r = this.persistence.Vr, i = [];
        return r && e.forEach((function(e) {
            i.push(r.qr(t, e));
        })), lr.qn(i);
    }, t.prototype.po = function(t, e) {
        return this._l.da(e), lr.resolve();
    }, t.prototype.xo = function(t, e) {
        var n = this._l.Ea(e);
        return lr.resolve(n);
    }, t.prototype.Qr = function(t, e) {
        return lr.resolve(this._l.Qr(e));
    }, t;
}(), es = /** @class */ function() {
    function t(t) {
        this.serializer = t, this.dl = new Map, this.wl = new Map;
    }
    return t.prototype.ro = function(t, e) {
        return lr.resolve(this.dl.get(e));
    }, t.prototype.oo = function(t, e) {
        /** Encodes a BundleMetadata proto object to a Bundle model object. */
        var n;
        return this.dl.set(e.id, {
            id: (n = e).id,
            version: n.version,
            createTime: be(n.createTime)
        }), lr.resolve();
    }, t.prototype.co = function(t, e) {
        return lr.resolve(this.wl.get(e));
    }, t.prototype.uo = function(t, e) {
        var n;
        return this.wl.set(e.name, {
            name: (n = e).name,
            query: ri(n.bundledQuery),
            readTime: be(n.readTime)
        }), lr.resolve();
    }, t;
}(), ns = /** @class */ function() {
    /**
     * The constructor accepts a factory for creating a reference delegate. This
     * allows both the delegate and this instance to have strong references to
     * each other without having nullable fields that would then need to be
     * checked or asserted on every access.
     */
    function t(t, e) {
        var n = this;
        this.El = {}, this.ko = new _r(0), this.$o = !1, this.$o = !0, this.Vr = t(this), 
        this.jo = new ts(this), this.os = new yi, this.ss = function(t, e) {
            return new Xu(t, (function(t) {
                return n.Vr.Tl(t);
            }));
        }(this.os), this.serializer = new Qr(e), this.Go = new es(this.serializer);
    }
    return t.prototype.start = function() {
        return Promise.resolve();
    }, t.prototype.fc = function() {
        // No durable state to ensure is closed on shutdown.
        return this.$o = !1, Promise.resolve();
    }, Object.defineProperty(t.prototype, "lr", {
        get: function() {
            return this.$o;
        },
        enumerable: !1,
        configurable: !0
    }), t.prototype.tc = function() {
        // No op.
    }, t.prototype.ec = function() {
        // No op.
    }, t.prototype.Pc = function() {
        return this.os;
    }, t.prototype.mc = function(t) {
        var e = this.El[t.h()];
        return e || (e = new Ju(this.os, this.Vr), this.El[t.h()] = e), e;
    }, t.prototype.Ac = function() {
        return this.jo;
    }, t.prototype.Rc = function() {
        return this.ss;
    }, t.prototype.gc = function() {
        return this.Go;
    }, t.prototype.runTransaction = function(t, e, n) {
        var r = this;
        x$1("MemoryPersistence", "Starting transaction:", t);
        var i = new rs(this.ko.next());
        return this.Vr.Il(), n(i).next((function(t) {
            return r.Vr.ml(i).next((function() {
                return t;
            }));
        })).Ln().then((function(t) {
            return i.ns(), t;
        }));
    }, t.prototype.Al = function(t, e) {
        return lr.Un(Object.values(this.El).map((function(n) {
            return function() {
                return n.Qr(t, e);
            };
        })));
    }, t;
}(), rs = /** @class */ function(e) {
    function n(t) {
        var n = this;
        return (n = e.call(this) || this).Fo = t, n;
    }
    return __extends(n, e), n;
}(gr), is = /** @class */ function() {
    function t(t) {
        this.persistence = t, 
        /** Tracks all documents that are active in Query views. */
        this.Rl = new eu, 
        /** The list of documents that are potentially GCed after each transaction. */
        this.Pl = null;
    }
    return t.gl = function(e) {
        return new t(e);
    }, Object.defineProperty(t.prototype, "yl", {
        get: function() {
            if (this.Pl) return this.Pl;
            throw P$1();
        },
        enumerable: !1,
        configurable: !0
    }), t.prototype.Do = function(t, e, n) {
        return this.Rl.Do(n, e), this.yl.delete(n.toString()), lr.resolve();
    }, t.prototype.No = function(t, e, n) {
        return this.Rl.No(n, e), this.yl.add(n.toString()), lr.resolve();
    }, t.prototype.qr = function(t, e) {
        return this.yl.add(e.toString()), lr.resolve();
    }, t.prototype.removeTarget = function(t, e) {
        var n = this;
        this.Rl.da(e.targetId).forEach((function(t) {
            return n.yl.add(t.toString());
        }));
        var r = this.persistence.Ac();
        return r.xo(t, e.targetId).next((function(t) {
            t.forEach((function(t) {
                return n.yl.add(t.toString());
            }));
        })).next((function() {
            return r.Vo(t, e);
        }));
    }, t.prototype.Il = function() {
        this.Pl = new Set;
    }, t.prototype.ml = function(t) {
        var e = this, n = this.persistence.Rc().Xr();
        // Remove newly orphaned documents.
                return lr.forEach(this.yl, (function(r) {
            var i = Z$1.st(r);
            return e.Vl(t, i).next((function(t) {
                t || n.Hn(i);
            }));
        })).next((function() {
            return e.Pl = null, n.apply(t);
        }));
    }, t.prototype.Sc = function(t, e) {
        var n = this;
        return this.Vl(t, e).next((function(t) {
            t ? n.yl.delete(e.toString()) : n.yl.add(e.toString());
        }));
    }, t.prototype.Tl = function(t) {
        // For eager GC, we don't care about the document size, there are no size thresholds.
        return 0;
    }, t.prototype.Vl = function(t, e) {
        var n = this;
        return lr.Un([ function() {
            return lr.resolve(n.Rl.Qr(e));
        }, function() {
            return n.persistence.Ac().Qr(t, e);
        }, function() {
            return n.persistence.Al(t, e);
        } ]);
    }, t;
}(), os = /** @class */ function() {
    function t(t) {
        this.pl = t.pl, this.vl = t.vl;
    }
    return t.prototype.cu = function(t) {
        this.bl = t;
    }, t.prototype.nu = function(t) {
        this.Sl = t;
    }, t.prototype.onMessage = function(t) {
        this.Dl = t;
    }, t.prototype.close = function() {
        this.vl();
    }, t.prototype.send = function(t) {
        this.pl(t);
    }, t.prototype.Cl = function() {
        this.bl();
    }, t.prototype.Nl = function(t) {
        this.Sl(t);
    }, t.prototype.xl = function(t) {
        this.Dl(t);
    }, t;
}(), us = {
    BatchGetDocuments: "batchGet",
    Commit: "commit",
    RunQuery: "runQuery"
}, ss = /** @class */ function(e) {
    function n(t) {
        var n = this;
        return (n = e.call(this, t) || this).forceLongPolling = t.forceLongPolling, n.i = t.i, 
        n;
    }
    /**
     * Base class for all Rest-based connections to the backend (WebChannel and
     * HTTP).
     */
    return __extends(n, e), n.prototype.Ll = function(t, e, n, r) {
        return new Promise((function(i, o) {
            var u = new XhrIo;
            u.listenOnce(EventType.COMPLETE, (function() {
                try {
                    switch (u.getLastErrorCode()) {
                      case ErrorCode.NO_ERROR:
                        var e = u.getResponseJson();
                        x$1("Connection", "XHR received:", JSON.stringify(e)), i(e);
                        break;

                      case ErrorCode.TIMEOUT:
                        x$1("Connection", 'RPC "' + t + '" timed out'), o(new L$1(V$1.DEADLINE_EXCEEDED, "Request time out"));
                        break;

                      case ErrorCode.HTTP_ERROR:
                        var n = u.getStatus();
                        if (x$1("Connection", 'RPC "' + t + '" failed with status:', n, "response text:", u.getResponseText()), 
                        n > 0) {
                            var r = u.getResponseJson().error;
                            if (r && r.status && r.message) {
                                var s = function(t) {
                                    var e = t.toLowerCase().replace("_", "-");
                                    return Object.values(V$1).indexOf(e) >= 0 ? e : V$1.UNKNOWN;
                                }(r.status);
                                o(new L$1(s, r.message));
                            } else o(new L$1(V$1.UNKNOWN, "Server responded with status " + u.getStatus()));
                        } else 
                        // If we received an HTTP_ERROR but there's no status code,
                        // it's most probably a connection issue
                        o(new L$1(V$1.UNAVAILABLE, "Connection failed."));
                        break;

                      default:
                        P$1();
                    }
                } finally {
                    x$1("Connection", 'RPC "' + t + '" completed.');
                }
            }));
            var s = JSON.stringify(r);
            u.send(e, "POST", s, n, 15);
        }));
    }, n.prototype.uu = function(t, e) {
        var n = [ this.Ol, "/", "google.firestore.v1.Firestore", "/", t, "/channel" ], r = createWebChannelTransport(), i = getStatEventTarget(), o = {
            // Required for backend stickiness, routing behavior is based on this
            // parameter.
            httpSessionIdParam: "gsessionid",
            initMessageHeaders: {},
            messageUrlParams: {
                // This param is used to improve routing and project isolation by the
                // backend and must be included in every request.
                database: "projects/" + this.t.projectId + "/databases/" + this.t.database
            },
            sendRawJson: !0,
            supportsCrossDomainXhr: !0,
            internalChannelParams: {
                // Override the default timeout (randomized between 10-20 seconds) since
                // a large write batch on a slow internet connection may take a long
                // time to send to the backend. Rather than have WebChannel impose a
                // tight timeout which could lead to infinite timeouts and retries, we
                // set it very large (5-10 minutes) and rely on the browser's builtin
                // timeouts to kick in if the request isn't working.
                forwardChannelRequestTimeoutMs: 6e5
            },
            forceLongPolling: this.forceLongPolling,
            detectBufferingProxy: this.i
        };
        this.$l(o.initMessageHeaders, e), 
        // Sending the custom headers we just added to request.initMessageHeaders
        // (Authorization, etc.) will trigger the browser to make a CORS preflight
        // request because the XHR will no longer meet the criteria for a "simple"
        // CORS request:
        // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
        // Therefore to avoid the CORS preflight request (an extra network
        // roundtrip), we use the httpHeadersOverwriteParam option to specify that
        // the headers should instead be encoded into a special "$httpHeaders" query
        // parameter, which is recognized by the webchannel backend. This is
        // formally defined here:
        // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
        // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request
        // doesn't have an Origin header. So we have to exclude a few browser environments that are
        // known to (sometimes) not include an Origin. See
        // https://github.com/firebase/firebase-js-sdk/issues/1491.
        isMobileCordova() || isReactNative() || isElectron() || isIE$1() || isUWP() || isBrowserExtension() || (o.httpHeadersOverwriteParam = "$httpHeaders");
        var u = n.join("");
        x$1("Connection", "Creating WebChannel: " + u, o);
        var s = r.createWebChannel(u, o), d = !1, v = !1, y = new os({
            pl: function(t) {
                v ? x$1("Connection", "Not sending because WebChannel is closed:", t) : (d || (x$1("Connection", "Opening WebChannel transport."), 
                s.open(), d = !0), x$1("Connection", "WebChannel sending:", t), s.send(t));
            },
            vl: function() {
                return s.close();
            }
        }), I = function(t, e, n) {
            // TODO(dimond): closure typing seems broken because WebChannel does
            // not implement goog.events.Listenable
            t.listen(e, (function(t) {
                try {
                    n(t);
                } catch (t) {
                    setTimeout((function() {
                        throw t;
                    }), 0);
                }
            }));
        };
        // WebChannel supports sending the first message with the handshake - saving
        // a network round trip. However, it will have to call send in the same
        // JS event loop as open. In order to enforce this, we delay actually
        // opening the WebChannel until send is called. Whether we have called
        // open is tracked with this variable.
                // Closure events are guarded and exceptions are swallowed, so catch any
        // exception and rethrow using a setTimeout so they become visible again.
        // Note that eventually this function could go away if we are confident
        // enough the code is exception free.
        return I(s, WebChannel.EventType.OPEN, (function() {
            v || x$1("Connection", "WebChannel transport opened.");
        })), I(s, WebChannel.EventType.CLOSE, (function() {
            v || (v = !0, x$1("Connection", "WebChannel transport closed"), y.Nl());
        })), I(s, WebChannel.EventType.ERROR, (function(t) {
            v || (v = !0, O$1("Connection", "WebChannel transport errored:", t), y.Nl(new L$1(V$1.UNAVAILABLE, "The operation could not be completed")));
        })), I(s, WebChannel.EventType.MESSAGE, (function(t) {
            var e;
            if (!v) {
                var n = t.data[0];
                C(!!n);
                // TODO(b/35143891): There is a bug in One Platform that caused errors
                // (and only errors) to be wrapped in an extra array. To be forward
                // compatible with the bug we need to check either condition. The latter
                // can be removed once the fix has been rolled out.
                // Use any because msgData.error is not typed.
                var r = n, i = r.error || (null === (e = r[0]) || void 0 === e ? void 0 : e.error);
                if (i) {
                    x$1("Connection", "WebChannel received error:", i);
                    // error.status will be a string like 'OK' or 'NOT_FOUND'.
                    var o = i.status, u = function(t) {
                        // lookup by string
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        var e = ct[t];
                        if (void 0 !== e) return dt(e);
                    }(o), a = i.message;
                    void 0 === u && (u = V$1.INTERNAL, a = "Unknown error status: " + o + " with message " + i.message), 
                    // Mark closed so no further events are propagated
                    v = !0, y.Nl(new L$1(u, a)), s.close();
                } else x$1("Connection", "WebChannel received:", n), y.xl(n);
            }
        })), I(i, Event.STAT_EVENT, (function(t) {
            t.stat === Stat.PROXY ? x$1("Connection", "Detected buffering proxy") : t.stat === Stat.NOPROXY && x$1("Connection", "Detected no buffering proxy");
        })), setTimeout((function() {
            // Technically we could/should wait for the WebChannel opened event,
            // but because we want to send the first message with the WebChannel
            // handshake we pretend the channel opened here (asynchronously), and
            // then delay the actual open until the first message is sent.
            y.Cl();
        }), 0), y;
    }, n;
}(/** @class */ function() {
    function t(t) {
        this.Fl = t, this.t = t.t;
        var e = t.ssl ? "https" : "http";
        this.Ol = e + "://" + t.host, this.Ml = "projects/" + this.t.projectId + "/databases/" + this.t.database + "/documents";
    }
    return t.prototype.Au = function(t, e, n, r) {
        var i = this.kl(t, e);
        x$1("RestConnection", "Sending: ", i, n);
        var o = {};
        return this.$l(o, r), this.Ll(t, i, o, n).then((function(t) {
            return x$1("RestConnection", "Received: ", t), t;
        }), (function(e) {
            throw O$1("RestConnection", t + " failed with error: ", e, "url: ", i, "request:", n), 
            e;
        }));
    }, t.prototype.Ru = function(t, e, n, r) {
        // The REST API automatically aggregates all of the streamed results, so we
        // can just use the normal invoke() method.
        return this.Au(t, e, n, r);
    }, 
    /**
     * Modifies the headers for a request, adding any authorization token if
     * present and any additional headers for the request.
     */
    t.prototype.$l = function(t, e) {
        if (t["X-Goog-Api-Client"] = "gl-js/ fire/8.1.1", 
        // Content-Type: text/plain will avoid preflight requests which might
        // mess with CORS and redirects by proxies. If we add custom headers
        // we will need to change this code to potentially use the $httpOverwrite
        // parameter supported by ESF to avoid triggering preflight requests.
        t["Content-Type"] = "text/plain", e) for (var n in e.T) e.T.hasOwnProperty(n) && (t[n] = e.T[n]);
    }, t.prototype.kl = function(t, e) {
        var n = us[t];
        return this.Ol + "/v1/" + e + ":" + n;
    }, t;
}()), as = /** @class */ function() {
    function t() {
        var t = this;
        this.Bl = function() {
            return t.ql();
        }, this.Ul = function() {
            return t.Ql();
        }, this.Kl = [], this.Wl();
    }
    return t.prototype.Lu = function(t) {
        this.Kl.push(t);
    }, t.prototype.fc = function() {
        window.removeEventListener("online", this.Bl), window.removeEventListener("offline", this.Ul);
    }, t.prototype.Wl = function() {
        window.addEventListener("online", this.Bl), window.addEventListener("offline", this.Ul);
    }, t.prototype.ql = function() {
        x$1("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
        for (var t = 0, e = this.Kl; t < e.length; t++) {
            (0, e[t])(0 /* AVAILABLE */);
        }
    }, t.prototype.Ql = function() {
        x$1("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
        for (var t = 0, e = this.Kl; t < e.length; t++) {
            (0, e[t])(1 /* UNAVAILABLE */);
        }
    }, 
    // TODO(chenbrian): Consider passing in window either into this component or
    // here for testing via FakeWindow.
    /** Checks that all used attributes of window are available. */
    t.Gs = function() {
        return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
    }, t;
}(), cs = /** @class */ function() {
    function t() {}
    return t.prototype.Lu = function(t) {
        // No-op.
    }, t.prototype.fc = function() {
        // No-op.
    }, t;
}(), hs = /** @class */ function() {
    function t() {
        this.synchronizeTabs = !1;
    }
    return t.prototype.initialize = function(t) {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    return this.serializer = vr(t.Fl.t), this.kh = this.jl(t), this.persistence = this.Gl(t), 
                    [ 4 /*yield*/ , this.persistence.start() ];

                  case 1:
                    return e.sent(), this.zl = this.Hl(t), this.Cu = this.Jl(t), [ 2 /*return*/ ];
                }
            }));
        }));
    }, t.prototype.Hl = function(t) {
        return null;
    }, t.prototype.Jl = function(t) {
        return no(this.persistence, new $u, t.Yl, this.serializer);
    }, t.prototype.Gl = function(t) {
        return new ns(is.gl, this.serializer);
    }, t.prototype.jl = function(t) {
        return new lu;
    }, t.prototype.terminate = function() {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(t) {
                switch (t.label) {
                  case 0:
                    return this.zl && this.zl.stop(), [ 4 /*yield*/ , this.kh.fc() ];

                  case 1:
                    return t.sent(), [ 4 /*yield*/ , this.persistence.fc() ];

                  case 2:
                    return t.sent(), [ 2 /*return*/ ];
                }
            }));
        }));
    }, t;
}(), fs = /** @class */ function(r) {
    function i(t, e, n) {
        var i = this;
        return (i = r.call(this) || this).Xl = t, i.cacheSizeBytes = e, i.forceOwnership = n, 
        i.synchronizeTabs = !1, i;
    }
    return __extends(i, r), i.prototype.initialize = function(t) {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    return [ 4 /*yield*/ , r.prototype.initialize.call(this, t) ];

                  case 1:
                    return e.sent(), [ 4 /*yield*/ , po(this.Cu) ];

                  case 2:
                    return e.sent(), [ 4 /*yield*/ , this.Xl.initialize(this, t) ];

                  case 3:
                    // Enqueue writes from a previous session
                    return e.sent(), [ 4 /*yield*/ , Yu(this.Xl.ga) ];

                  case 4:
                    // Enqueue writes from a previous session
                    return e.sent(), [ 4 /*yield*/ , Uo(this.Xl.Oh) ];

                  case 5:
                    return e.sent(), [ 2 /*return*/ ];
                }
            }));
        }));
    }, i.prototype.Jl = function(t) {
        return no(this.persistence, new $u, t.Yl, this.serializer);
    }, i.prototype.Hl = function(t) {
        var e = this.persistence.Vr.cr;
        return new Fr(e, t.di);
    }, i.prototype.Gl = function(t) {
        var e = to(t.Fl.t, t.Fl.persistenceKey), n = void 0 !== this.cacheSizeBytes ? jr.er(this.cacheSizeBytes) : jr.ir;
        return new Yi(this.synchronizeTabs, e, t.clientId, n, t.di, Pr(), Cr(), this.serializer, this.kh, !!this.forceOwnership);
    }, i.prototype.jl = function(t) {
        return new lu;
    }, i;
}(hs), ls = /** @class */ function(r) {
    function i(t, e) {
        var n = this;
        return (n = r.call(this, t, e, /* forceOwnership= */ !1) || this).Xl = t, n.cacheSizeBytes = e, 
        n.synchronizeTabs = !0, n;
    }
    return __extends(i, r), i.prototype.initialize = function(t) {
        return __awaiter(this, void 0, void 0, (function() {
            var i, o = this;
            return __generator(this, (function(u) {
                switch (u.label) {
                  case 0:
                    return [ 4 /*yield*/ , r.prototype.initialize.call(this, t) ];

                  case 1:
                    return u.sent(), i = this.Xl.ga, this.kh instanceof fu ? (this.kh.ga = {
                        _h: Fu.bind(null, i),
                        fh: Wu.bind(null, i),
                        dh: Qu.bind(null, i),
                        Ic: Ku.bind(null, i),
                        lh: ju.bind(null, i)
                    }, [ 4 /*yield*/ , this.kh.start() ]) : [ 3 /*break*/ , 3 ];

                  case 2:
                    u.sent(), u.label = 3;

                  case 3:
                    // NOTE: This will immediately call the listener, so we make sure to
                    // set it after localStore / remoteStore are started.
                    return [ 4 /*yield*/ , this.persistence.Zo((function(t) {
                        return __awaiter(o, void 0, void 0, (function() {
                            return __generator(this, (function(e) {
                                switch (e.label) {
                                  case 0:
                                    return [ 4 /*yield*/ , zu(this.Xl.ga, t) ];

                                  case 1:
                                    return e.sent(), this.zl && (t && !this.zl.lr ? this.zl.start(this.Cu) : t || this.zl.stop()), 
                                    [ 2 /*return*/ ];
                                }
                            }));
                        }));
                    })) ];

                  case 4:
                    // NOTE: This will immediately call the listener, so we make sure to
                    // set it after localStore / remoteStore are started.
                    return u.sent(), [ 2 /*return*/ ];
                }
            }));
        }));
    }, i.prototype.jl = function(t) {
        var e = Pr();
        if (!fu.Gs(e)) throw new L$1(V$1.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
        var n = to(t.Fl.t, t.Fl.persistenceKey);
        return new fu(e, t.di, n, t.clientId, t.Yl);
    }, i;
}(fs), ps = /** @class */ function() {
    function t() {}
    return t.prototype.initialize = function(t, r) {
        return __awaiter(this, void 0, void 0, (function() {
            var e = this;
            return __generator(this, (function(n) {
                switch (n.label) {
                  case 0:
                    return this.Cu ? [ 3 /*break*/ , 2 ] : (this.Cu = t.Cu, this.kh = t.kh, this.Nu = this.Zl(r), 
                    this.Oh = this.t_(r), this.Mh = this.e_(r), this.ga = this.n_(r, 
                    /* startAsPrimary=*/ !t.synchronizeTabs), this.kh.Pu = function(t) {
                        return Tu(e.ga, t, 1 /* SharedClientState */);
                    }, this.Oh.xu.s_ = Uu.bind(null, this.ga), [ 4 /*yield*/ , Go(this.Oh, this.ga.Jh) ]);

                  case 1:
                    n.sent(), n.label = 2;

                  case 2:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, t.prototype.e_ = function(t) {
        return new Ho;
    }, t.prototype.Zl = function(t) {
        var e, n = vr(t.Fl.t), r = (e = t.Fl, new ss(e));
        /** Return the Platform-specific connectivity monitor. */ return function(t, e, n) {
            return new wo(t, e, n);
        }(t.credentials, r, n);
    }, t.prototype.t_ = function(t) {
        var e, n, r, i, o, u = this;
        return e = this.Cu, n = this.Nu, r = t.di, i = function(t) {
            return Tu(u.ga, t, 0 /* RemoteStore */);
        }, o = as.Gs() ? new as : new cs, new _o(e, n, r, i, o);
    }, t.prototype.n_ = function(t, e) {
        return function(t, e, n, 
        // PORTING NOTE: Manages state synchronization in multi-tab environments.
        r, i, o, u) {
            var s = new gu(t, e, n, r, i, o);
            return u && (s.Hh = !0), s;
        }(this.Cu, this.Oh, this.Mh, this.kh, t.Yl, t.$h, e);
    }, t.prototype.terminate = function() {
        return function(t) {
            return __awaiter(this, void 0, void 0, (function() {
                var e;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return e = R$1(t), x$1("RemoteStore", "RemoteStore shutting down."), e.Mu.add(5 /* Shutdown */), 
                        [ 4 /*yield*/ , Eo(e) ];

                      case 1:
                        return n.sent(), e.$u.fc(), 
                        // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
                        // triggering spurious listener events with cached data, etc.
                        e.Bu.set("Unknown" /* Unknown */), [ 2 /*return*/ ];
                    }
                }));
            }));
        }(this.Oh);
    }, t;
}(), ds = /** @class */ function() {
    function t(t) {
        this.observer = t, 
        /**
             * When set to true, will not raise future events. Necessary to deal with
             * async detachment of listener.
             */
        this.muted = !1;
    }
    return t.prototype.next = function(t) {
        this.observer.next && this.i_(this.observer.next, t);
    }, t.prototype.error = function(t) {
        this.observer.error ? this.i_(this.observer.error, t) : console.error("Uncaught Error in snapshot listener:", t);
    }, t.prototype.r_ = function() {
        this.muted = !0;
    }, t.prototype.i_ = function(t, e) {
        var n = this;
        this.muted || setTimeout((function() {
            n.muted || t(e);
        }), 0);
    }, t;
}(), vs = function(t) {
    this.o_ = t;
};

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function ys(t, e, n) {
    if (!n) throw new L$1(V$1.INVALID_ARGUMENT, "Function " + t + "() cannot be called with an empty " + e + ".");
}

function ms(t, e) {
    if (void 0 === e) return {
        merge: !1
    };
    if (void 0 !== e.mergeFields && void 0 !== e.merge) throw new L$1(V$1.INVALID_ARGUMENT, "Invalid options passed to function " + t + '(): You cannot specify both "merge" and "mergeFields".');
    return e;
}

/**
 * Validates that two boolean options are not set at the same time.
 */ function gs(t, e, n, r) {
    if (!0 === e && !0 === r) throw new L$1(V$1.INVALID_ARGUMENT, t + " and " + n + " cannot be used together.");
}

/**
 * Validates that `path` refers to a document (indicated by the fact it contains
 * an even numbers of segments).
 */ function ws(t) {
    if (!Z$1.ot(t)) throw new L$1(V$1.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + t + " has " + t.length + ".");
}

/**
 * Validates that `path` refers to a collection (indicated by the fact it
 * contains an odd numbers of segments).
 */ function bs(t) {
    if (Z$1.ot(t)) throw new L$1(V$1.INVALID_ARGUMENT, "Invalid collection reference. Collection references must have an odd number of segments, but " + t + " has " + t.length + ".");
}

/**
 * Returns true if it's a non-null object without a custom prototype
 * (i.e. excludes Array, Date, etc.).
 */
/** Returns a string describing the type / value of the provided input. */ function _s(t) {
    if (void 0 === t) return "undefined";
    if (null === t) return "null";
    if ("string" == typeof t) return t.length > 20 && (t = t.substring(0, 20) + "..."), 
    JSON.stringify(t);
    if ("number" == typeof t || "boolean" == typeof t) return "" + t;
    if ("object" == typeof t) {
        if (t instanceof Array) return "an array";
        var e = 
        /** Hacky method to try to get the constructor name for an object. */
        function(t) {
            if (t.constructor) {
                var e = /function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());
                if (e && e.length > 1) return e[1];
            }
            return null;
        }(t);
        return e ? "a custom " + e + " object" : "an object";
    }
    return "function" == typeof t ? "a function" : P$1();
}

function Is(t, 
// eslint-disable-next-line @typescript-eslint/no-explicit-any
e) {
    if (t instanceof vs && (t = t.o_), !(t instanceof e)) {
        if (e.name === t.constructor.name) throw new L$1(V$1.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
        var n = _s(t);
        throw new L$1(V$1.INVALID_ARGUMENT, "Expected type '" + e.name + "', but it was: " + n);
    }
    return t;
}

function Es(t, e) {
    if (e <= 0) throw new L$1(V$1.INVALID_ARGUMENT, "Function " + t + "() requires a positive number, but it was: " + e + ".");
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Sentinel values that can be used when writing document fields with `set()`
 * or `update()`.
 */ var Ts = 
/**
     * @param _methodName The public API endpoint that returns this class.
     */
function(t) {
    this.c_ = t;
}, Ns = /** @class */ function(e) {
    function n() {
        return null !== e && e.apply(this, arguments) || this;
    }
    return __extends(n, e), n.prototype.u_ = function(t) {
        if (2 /* MergeSet */ !== t.a_) throw 1 /* Update */ === t.a_ ? t.h_(this.c_ + "() can only appear at the top level of your update data") : t.h_(this.c_ + "() cannot be used with set() unless you pass {merge:true}");
        // No transform to add for a delete, but we need to add it to our
        // fieldMask so it gets deleted.
                return t.en.push(t.path), null;
    }, n.prototype.isEqual = function(t) {
        return t instanceof n;
    }, n;
}(Ts);

/**
 * Returns a sentinel for use with {@link updateDoc()} or
 * {@link setDoc `setDoc({}, { merge: true })`} to mark a field for deletion.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Creates a child context for parsing SerializableFieldValues.
 *
 * This is different than calling `ParseContext.contextWith` because it keeps
 * the fieldTransforms and fieldMask separate.
 *
 * The created context has its `dataSource` set to `UserDataSource.Argument`.
 * Although these values are used with writes, any elements in these FieldValues
 * are not considered writes since they cannot contain any FieldValue sentinels,
 * etc.
 *
 * @param fieldValue The sentinel FieldValue for which to create a child
 *     context.
 * @param context The parent context.
 * @param arrayElement Whether or not the FieldValue has an array.
 */
function As(t, e, n) {
    return new ka$1({
        a_: 3 /* Argument */ ,
        l_: e.settings.l_,
        methodName: t.c_,
        __: n
    }, e.t, e.serializer, e.ignoreUndefinedProperties);
}

var Ds = /** @class */ function(e) {
    function n() {
        return null !== e && e.apply(this, arguments) || this;
    }
    return __extends(n, e), n.prototype.u_ = function(t) {
        return new un(t.path, new $e);
    }, n.prototype.isEqual = function(t) {
        return t instanceof n;
    }, n;
}(Ts), xs = /** @class */ function(e) {
    function n(t, n) {
        var r = this;
        return (r = e.call(this, t) || this).f_ = n, r;
    }
    return __extends(n, e), n.prototype.u_ = function(t) {
        var e = As(this, t, 
        /*array=*/ !0), n = this.f_.map((function(t) {
            return Va$1(t, e);
        })), r = new Je(n);
        return new un(t.path, r);
    }, n.prototype.isEqual = function(t) {
        // TODO(mrschmidt): Implement isEquals
        return this === t;
    }, n;
}(Ts), ks = /** @class */ function(e) {
    function n(t, n) {
        var r = this;
        return (r = e.call(this, t) || this).f_ = n, r;
    }
    return __extends(n, e), n.prototype.u_ = function(t) {
        var e = As(this, t, 
        /*array=*/ !0), n = this.f_.map((function(t) {
            return Va$1(t, e);
        })), r = new Ze(n);
        return new un(t.path, r);
    }, n.prototype.isEqual = function(t) {
        // TODO(mrschmidt): Implement isEquals
        return this === t;
    }, n;
}(Ts), Os = /** @class */ function(e) {
    function n(t, n) {
        var r = this;
        return (r = e.call(this, t) || this).d_ = n, r;
    }
    return __extends(n, e), n.prototype.u_ = function(t) {
        var e = new en(t.serializer, ye(t.serializer, this.d_));
        return new un(t.path, e);
    }, n.prototype.isEqual = function(t) {
        // TODO(mrschmidt): Implement isEquals
        return this === t;
    }, n;
}(Ts), Ss = /** @class */ function() {
    /**
     * Creates a new immutable `GeoPoint` object with the provided latitude and
     * longitude values.
     * @param latitude The latitude as number between -90 and 90.
     * @param longitude The longitude as number between -180 and 180.
     */
    function t(t, e) {
        if (!isFinite(t) || t < -90 || t > 90) throw new L$1(V$1.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t);
        if (!isFinite(e) || e < -180 || e > 180) throw new L$1(V$1.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + e);
        this.w_ = t, this.E_ = e;
    }
    return Object.defineProperty(t.prototype, "latitude", {
        /**
         * The latitude of this `GeoPoint` instance.
         */
        get: function() {
            return this.w_;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "longitude", {
        /**
         * The longitude of this `GeoPoint` instance.
         */
        get: function() {
            return this.E_;
        },
        enumerable: !1,
        configurable: !0
    }), 
    /**
     * Returns true if this `GeoPoint` is equal to the provided one.
     *
     * @param other The `GeoPoint` to compare against.
     * @return true if this `GeoPoint` is equal to the provided one.
     */
    t.prototype.isEqual = function(t) {
        return this.w_ === t.w_ && this.E_ === t.E_;
    }, t.prototype.toJSON = function() {
        return {
            latitude: this.w_,
            longitude: this.E_
        };
    }, 
    /**
     * Actually private to JS consumers of our API, so this function is prefixed
     * with an underscore.
     */
    t.prototype.C = function(t) {
        return G$1(this.w_, t.w_) || G$1(this.E_, t.E_);
    }, t;
}(), Ps = /** @class */ function() {
    function t(t) {
        this.T_ = t;
    }
    /**
     * Creates a new `Bytes` object from the given Base64 string, converting it to
     * bytes.
     *
     * @param base64 The Base64 string used to create the `Bytes` object.
     */    return t.fromBase64String = function(e) {
        try {
            return new t(at.fromBase64String(e));
        } catch (e) {
            throw new L$1(V$1.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + e);
        }
    }, 
    /**
     * Creates a new `Bytes` object from the given Uint8Array.
     *
     * @param array The Uint8Array used to create the `Bytes` object.
     */
    t.fromUint8Array = function(e) {
        return new t(at.fromUint8Array(e));
    }, 
    /**
     * Returns the underlying bytes as a Base64-encoded string.
     *
     * @return The Base64-encoded string created from the `Bytes` object.
     */
    t.prototype.toBase64 = function() {
        return this.T_.toBase64();
    }, 
    /**
     * Returns the underlying bytes in a new `Uint8Array`.
     *
     * @return The Uint8Array created from the `Bytes` object.
     */
    t.prototype.toUint8Array = function() {
        return this.T_.toUint8Array();
    }, 
    /**
     * Returns a string representation of the `Bytes` object.
     *
     * @return A string representation of the `Bytes` object.
     */
    t.prototype.toString = function() {
        return "Bytes(base64: " + this.toBase64() + ")";
    }, 
    /**
     * Returns true if this `Bytes` object is equal to the provided one.
     *
     * @param other The `Bytes` object to compare against.
     * @return true if this `Bytes` object is equal to the provided one.
     */
    t.prototype.isEqual = function(t) {
        return this.T_.isEqual(t.T_);
    }, t;
}(), Cs = new Map, Rs = /** @class */ function() {
    function t(t) {
        var e;
        if (void 0 === t.host) {
            if (void 0 !== t.ssl) throw new L$1(V$1.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
            this.host = "firestore.googleapis.com", this.ssl = !0;
        } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;
        if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, 
        void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040; else {
            if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new L$1(V$1.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
            this.cacheSizeBytes = t.cacheSizeBytes;
        }
        this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, 
        gs("experimentalForceLongPolling", t.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t.experimentalAutoDetectLongPolling);
    }
    return t.prototype.isEqual = function(t) {
        return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties;
    }, t;
}(), Vs = /** @class */ function() {
    function t(t, e) {
        this.I_ = "(lite)", this.m_ = new Rs({}), this.A_ = !1, t instanceof T$1 ? (this.R_ = t, 
        this.P_ = new M$1) : (this.g_ = t, this.R_ = function(t) {
            if (!Object.prototype.hasOwnProperty.apply(t.options, [ "projectId" ])) throw new L$1(V$1.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
            return new T$1(t.options.projectId);
        }(t), this.P_ = new q$1(e));
    }
    return Object.defineProperty(t.prototype, "app", {
        /**
         * The {@link FirebaseApp app} associated with this `Firestore` service
         * instance.
         */
        get: function() {
            if (!this.g_) throw new L$1(V$1.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
            return this.g_;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "y_", {
        get: function() {
            return this.A_;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "V_", {
        get: function() {
            return void 0 !== this.p_;
        },
        enumerable: !1,
        configurable: !0
    }), t.prototype.v_ = function(t) {
        if (this.A_) throw new L$1(V$1.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
        this.m_ = new Rs(t), void 0 !== t.credentials && (this.P_ = function(t) {
            if (!t) return new M$1;
            switch (t.type) {
              case "gapi":
                var e = t.client;
                // Make sure this really is a Gapi client.
                                return C(!("object" != typeof e || null === e || !e.auth || !e.auth.getAuthHeaderValueForFirstParty)), 
                new F$1(e, t.sessionIndex || "0");

              case "provider":
                return t.client;

              default:
                throw new L$1(V$1.INVALID_ARGUMENT, "makeCredentialsProvider failed due to invalid credential type");
            }
        }(t.credentials));
    }, t.prototype.b_ = function() {
        return this.m_;
    }, t.prototype.S_ = function() {
        return this.A_ = !0, this.m_;
    }, t.prototype._delete = function() {
        return this.p_ || (this.p_ = this.D_()), this.p_;
    }, 
    /**
     * Terminates all components used by this client. Subclasses can override
     * this method to clean up their own dependencies, but must also call this
     * method.
     *
     * Only ever called once.
     */
    t.prototype.D_ = function() {
        /**
 * Removes all components associated with the provided instance. Must be called
 * when the `Firestore` instance is terminated.
 */
        return function(t) {
            var e = Cs.get(t);
            e && (x$1("ComponentProvider", "Removing Datastore"), Cs.delete(t), e.terminate());
        }(this), Promise.resolve();
    }, t;
}();

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** Helper function to assert Uint8Array is available at runtime. */
function Ls() {
    if ("undefined" == typeof Uint8Array) throw new L$1(V$1.UNIMPLEMENTED, "Uint8Arrays are not available in this environment.");
}

/** Helper function to assert Base64 functions are available at runtime. */ function Us() {
    if ("undefined" == typeof atob) throw new L$1(V$1.UNIMPLEMENTED, "Blobs are unavailable in Firestore in this environment.");
}

/** Immutable class holding a blob (binary data) */ var Ms = /** @class */ function(e) {
    function n() {
        return null !== e && e.apply(this, arguments) || this;
    }
    return __extends(n, e), n.fromBase64String = function(t) {
        return Us(), new n(Ps.fromBase64String(t));
    }, n.fromUint8Array = function(t) {
        return Ls(), new n(Ps.fromUint8Array(t));
    }, n.prototype.toBase64 = function() {
        return Us(), this.o_.toBase64();
    }, n.prototype.toUint8Array = function() {
        return Ls(), this.o_.toUint8Array();
    }, n.prototype.isEqual = function(t) {
        return this.o_.isEqual(t.o_);
    }, n.prototype.toString = function() {
        return "Blob(base64: " + this.toBase64() + ")";
    }, n;
}(vs), qs = /** @class */ function() {
    function t() {}
    return t.prototype.C_ = function(t, e) {
        switch (void 0 === e && (e = "none"), Yt(t)) {
          case 0 /* NullValue */ :
            return null;

          case 1 /* BooleanValue */ :
            return t.booleanValue;

          case 2 /* NumberValue */ :
            return re(t.integerValue || t.doubleValue);

          case 3 /* TimestampValue */ :
            return this.N_(t.timestampValue);

          case 4 /* ServerTimestampValue */ :
            return this.x_(t, e);

          case 5 /* StringValue */ :
            return t.stringValue;

          case 6 /* BlobValue */ :
            return this.F_(ie(t.bytesValue));

          case 7 /* RefValue */ :
            return this.O_(t.referenceValue);

          case 8 /* GeoPointValue */ :
            return this.M_(t.geoPointValue);

          case 9 /* ArrayValue */ :
            return this.k_(t.arrayValue, e);

          case 10 /* ObjectValue */ :
            return this.L_(t.mapValue, e);

          default:
            throw P$1();
        }
    }, t.prototype.L_ = function(t, e) {
        var n = this, r = {};
        return Bt(t.fields || {}, (function(t, i) {
            r[t] = n.C_(i, e);
        })), r;
    }, t.prototype.M_ = function(t) {
        return new Ss(re(t.latitude), re(t.longitude));
    }, t.prototype.k_ = function(t, e) {
        var n = this;
        return (t.values || []).map((function(t) {
            return n.C_(t, e);
        }));
    }, t.prototype.x_ = function(t, e) {
        switch (e) {
          case "previous":
            var n = Wt(t);
            return null == n ? null : this.C_(n, e);

          case "estimate":
            return this.N_(Qt(t));

          default:
            return null;
        }
    }, t.prototype.N_ = function(t) {
        var e = ne(t);
        return new Q$1(e.seconds, e.nanos);
    }, t.prototype.B_ = function(t, e) {
        var n = $.Y(t);
        C(Ke(n));
        var r = new T$1(n.get(1), n.get(3)), i = new Z$1(n.B(5));
        return r.isEqual(e) || 
        // TODO(b/64130202): Somehow support foreign references.
        k$1("Document " + i + " contains a document reference within a different database (" + r.projectId + "/" + r.database + ") which is not supported. It will be treated as a reference in the current database (" + e.projectId + "/" + e.database + ") instead."), 
        i;
    }, t;
}(), js = /** @class */ function(e) {
    function n(t) {
        var n = this;
        return (n = e.call(this) || this).firestore = t, n;
    }
    return __extends(n, e), n.prototype.F_ = function(t) {
        return new Ms(new Ps(t));
    }, n.prototype.O_ = function(t) {
        var e = this.B_(t, this.firestore.R_);
        return pc$1.q_(e, this.firestore, /* converter= */ null);
    }, n;
}(qs), Fs = /** @class */ function() {
    // Note: This class is stripped down version of the DocumentSnapshot in
    // the legacy SDK. The changes are:
    // - No support for SnapshotMetadata.
    // - No support for SnapshotOptions.
    function t(t, e, n, r, i) {
        this.U_ = t, this.Q_ = e, this.K_ = n, this.W_ = r, this.j_ = i;
    }
    return Object.defineProperty(t.prototype, "id", {
        /** Property of the `DocumentSnapshot` that provides the document's ID. */ get: function() {
            return this.K_.path.K();
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "ref", {
        /**
         * The `DocumentReference` for the document included in the `DocumentSnapshot`.
         */
        get: function() {
            return new ia(this.U_, this.j_, this.K_);
        },
        enumerable: !1,
        configurable: !0
    }), 
    /**
     * Signals whether or not the document at the snapshot's location exists.
     *
     * @return true if the document exists.
     */
    t.prototype.exists = function() {
        return null !== this.W_;
    }, 
    /**
     * Retrieves all fields in the document as an `Object`. Returns `undefined` if
     * the document doesn't exist.
     *
     * @return An `Object` containing all fields in the document or `undefined`
     * if the document doesn't exist.
     */
    t.prototype.data = function() {
        if (this.W_) {
            if (this.j_) {
                // We only want to use the converter and create a new DocumentSnapshot
                // if a converter has been provided.
                var t = new zs(this.U_, this.Q_, this.K_, this.W_, 
                /* converter= */ null);
                return this.j_.fromFirestore(t);
            }
            return this.Q_.C_(this.W_.En());
        }
    }, 
    /**
     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
     * document or field doesn't exist.
     *
     * @param fieldPath The path (for example 'foo' or 'foo.bar') to a specific
     * field.
     * @return The data at the specified field location or undefined if no such
     * field exists in the document.
     */
    // We are using `any` here to avoid an explicit cast by our users.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    t.prototype.get = function(t) {
        if (this.W_) {
            var e = this.W_.data().field(Bs("DocumentSnapshot.get", t));
            if (null !== e) return this.Q_.C_(e);
        }
    }, t;
}(), zs = /** @class */ function(e) {
    function n() {
        return null !== e && e.apply(this, arguments) || this;
    }
    /**
     * Retrieves all fields in the document as an `Object`.
     *
     * @override
     * @return An `Object` containing all fields in the document.
     */    return __extends(n, e), n.prototype.data = function() {
        return e.prototype.data.call(this);
    }, n;
}(Fs);

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Converts Firestore's internal types to the JavaScript types that we expose
 * to the user.
 */
/**
 * Helper that calls fromDotSeparatedString() but wraps any error thrown.
 */
function Bs(t, e) {
    return "string" == typeof e ? Fa$1(t, e) : e instanceof vs ? e.o_.G_ : e.G_;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * A `FieldPath` refers to a field in a document. The path may consist of a
 * single field name (referring to a top-level field in the document), or a
 * list of field names (referring to a nested field in the document).
 *
 * Create a `FieldPath` by providing field names. If more than one field
 * name is provided, the path will point to a nested field in a document.
 */ var Gs = /** @class */ function() {
    /**
     * Creates a FieldPath from the provided field names. If more than one field
     * name is provided, the path will point to a nested field in a document.
     *
     * @param fieldNames A list of field names.
     */
    function t() {
        for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
        for (var n = 0; n < t.length; ++n) if (0 === t[n].length) throw new L$1(V$1.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
        this.G_ = new X$1(t);
    }
    /**
     * Returns true if this `FieldPath` is equal to the provided one.
     *
     * @param other The `FieldPath` to compare against.
     * @return true if this `FieldPath` is equal to the provided one.
     */    return t.prototype.isEqual = function(t) {
        return this.G_.isEqual(t.G_);
    }, t;
}(), Ks = /** @class */ function(e) {
    function n(t, n) {
        var r = this;
        return (r = e.call(this, t, n) || this).z_ = new Vr, r.I_ = "name" in t ? t.name : "[DEFAULT]", 
        r;
    }
    return __extends(n, e), n.prototype.D_ = function() {
        return this.H_ || 
        // The client must be initialized to ensure that all subsequent API
        // usage throws an exception.
        hc$1(this), this.H_.terminate();
    }, n;
}(Vs);

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** DOMException error code constants. */
/**
 * The Cloud Firestore service interface.
 *
 * Do not call this constructor directly. Instead, use {@link getFirestore()}.
 */
/**
 * Attempts to enable persistent storage, if possible.
 *
 * Must be called before any other functions (other than
 * {@link initializeFirestore()}, {@link getFirestore()} or
 * {@link clearIndexedDbPersistence()}.
 *
 * If this fails, `enableIndexedDbPersistence()` will reject the promise it
 * returns. Note that even after this failure, the `Firestore` instance will
 * remain usable, however offline persistence will be disabled.
 *
 * There are several reasons why this can fail, which can be identified by
 * the `code` on the error.
 *
 *   * failed-precondition: The app is already open in another browser tab.
 *   * unimplemented: The browser is incompatible with the offline
 *     persistence implementation.
 *
 * @param firestore The `Firestore` instance to enable persistence for.
 * @param persistenceSettings Optional settings object to configure persistence.
 * @return A promise that represents successfully enabling persistent storage.
 */
/**
 * Registers both the `OfflineComponentProvider` and `OnlineComponentProvider`.
 * If the operation fails with a recoverable error (see
 * `canRecoverFromIndexedDbError()` below), the returned Promise is rejected
 * but the client remains usable.
 */
function Ws(t, r, i) {
    var o = this, u = new dr;
    return t.di.enqueue((function() {
        return __awaiter(o, void 0, void 0, (function() {
            var e;
            return __generator(this, (function(n) {
                switch (n.label) {
                  case 0:
                    return n.trys.push([ 0, 3, , 4 ]), [ 4 /*yield*/ , Qa$1(t, i) ];

                  case 1:
                    return n.sent(), [ 4 /*yield*/ , Ha$1(t, r) ];

                  case 2:
                    return n.sent(), u.resolve(), [ 3 /*break*/ , 4 ];

                  case 3:
                    if (!
                    /**
         * Decides whether the provided error allows us to gracefully disable
         * persistence (as opposed to crashing the client).
         */
                    function(t) {
                        return "FirebaseError" === t.name ? t.code === V$1.FAILED_PRECONDITION || t.code === V$1.UNIMPLEMENTED : !("undefined" != typeof DOMException && t instanceof DOMException) || (22 === t.code || 20 === t.code || 
                        // Firefox Private Browsing mode disables IndexedDb and returns
                        // INVALID_STATE for any usage.
                        11 === t.code);
                    }(e = n.sent())) throw e;
                    return console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + e), 
                    u.reject(e), [ 3 /*break*/ , 4 ];

                  case 4:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    })).then((function() {
        return u.promise;
    }));
}

function Qs(t) {
    if (t.y_ || t.V_) throw new L$1(V$1.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.");
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * A `DocumentSnapshot` contains data read from a document in your Firestore
 * database. The data can be extracted with `.data()` or `.get(<field>)` to
 * get a specific field.
 *
 * For a `DocumentSnapshot` that points to a non-existing document, any data
 * access will return 'undefined'. You can use the `exists()` method to
 * explicitly verify a document's existence.
 */ var Hs = /** @class */ function(e) {
    function n(t, n, r, i, o, u) {
        var s = this;
        return (s = e.call(this, t, n, r, i, u) || this).U_ = t, s.J_ = t, s.metadata = o, 
        s;
    }
    /**
     * Property of the `DocumentSnapshot` that signals whether or not the data
     * exists. True if the document exists.
     */    return __extends(n, e), n.prototype.exists = function() {
        return e.prototype.exists.call(this);
    }, 
    /**
     * Retrieves all fields in the document as an `Object`. Returns `undefined` if
     * the document doesn't exist.
     *
     * By default, `FieldValue.serverTimestamp()` values that have not yet been
     * set to their final value will be returned as `null`. You can override
     * this by passing an options object.
     *
     * @param options An options object to configure how data is retrieved from
     * the snapshot (for example the desired behavior for server timestamps that
     * have not yet been set to their final value).
     * @return An `Object` containing all fields in the document or `undefined` if
     * the document doesn't exist.
     */
    n.prototype.data = function(t) {
        if (void 0 === t && (t = {}), this.W_) {
            if (this.j_) {
                // We only want to use the converter and create a new DocumentSnapshot
                // if a converter has been provided.
                var e = new Ys(this.U_, this.Q_, this.K_, this.W_, this.metadata, 
                /* converter= */ null);
                return this.j_.fromFirestore(e, t);
            }
            return this.Q_.C_(this.W_.En(), t.serverTimestamps);
        }
    }, 
    /**
     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
     * document or field doesn't exist.
     *
     * By default, a `FieldValue.serverTimestamp()` that has not yet been set to
     * its final value will be returned as `null`. You can override this by
     * passing an options object.
     *
     * @param fieldPath The path (for example 'foo' or 'foo.bar') to a specific
     * field.
     * @param options An options object to configure how the field is retrieved
     * from the snapshot (for example the desired behavior for server timestamps
     * that have not yet been set to their final value).
     * @return The data at the specified field location or undefined if no such
     * field exists in the document.
     */
    // We are using `any` here to avoid an explicit cast by our users.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    n.prototype.get = function(t, e) {
        if (void 0 === e && (e = {}), this.W_) {
            var n = this.W_.data().field(Bs("DocumentSnapshot.get", t));
            if (null !== n) return this.Q_.C_(n, e.serverTimestamps);
        }
    }, n;
}(Fs), Ys = /** @class */ function(e) {
    function n() {
        return null !== e && e.apply(this, arguments) || this;
    }
    /**
     * Retrieves all fields in the document as an `Object`.
     *
     * By default, `FieldValue.serverTimestamp()` values that have not yet been
     * set to their final value will be returned as `null`. You can override
     * this by passing an options object.
     *
     * @override
     * @param options An options object to configure how data is retrieved from
     * the snapshot (for example the desired behavior for server timestamps that
     * have not yet been set to their final value).
     * @return An `Object` containing all fields in the document.
     */    return __extends(n, e), n.prototype.data = function(t) {
        return void 0 === t && (t = {}), e.prototype.data.call(this, t);
    }, n;
}(Hs), $s = /** @class */ function() {
    function t(t, e, n, r) {
        this.U_ = t, this.Q_ = e, this.Y_ = r, this.metadata = new mc$1(r.hasPendingWrites, r.fromCache), 
        this.query = n;
    }
    return Object.defineProperty(t.prototype, "docs", {
        /** An array of all the documents in the `QuerySnapshot`. */ get: function() {
            var t = [];
            return this.forEach((function(e) {
                return t.push(e);
            })), t;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "size", {
        /** The number of documents in the `QuerySnapshot`. */ get: function() {
            return this.Y_.docs.size;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "empty", {
        /** True if there are no documents in the `QuerySnapshot`. */ get: function() {
            return 0 === this.size;
        },
        enumerable: !1,
        configurable: !0
    }), 
    /**
     * Enumerates all of the documents in the `QuerySnapshot`.
     *
     * @param callback A callback to be called with a `QueryDocumentSnapshot` for
     * each document in the snapshot.
     * @param thisArg The `this` binding for the callback.
     */
    t.prototype.forEach = function(t, e) {
        var n = this;
        this.Y_.docs.forEach((function(r) {
            t.call(e, new Ys(n.U_, n.Q_, r.key, r, new mc$1(n.Y_.ee.has(r.key), n.Y_.fromCache), n.query.j_));
        }));
    }, 
    /**
     * Returns an array of the documents changes since the last snapshot. If this
     * is the first snapshot, all documents will be in the list as 'added'
     * changes.
     *
     * @param options `SnapshotListenOptions` that control whether metadata-only
     * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
     * snapshot events.
     */
    t.prototype.docChanges = function(t) {
        void 0 === t && (t = {});
        var e = !!t.includeMetadataChanges;
        if (e && this.Y_.se) throw new L$1(V$1.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
        return this.X_ && this.Z_ === e || (this.X_ = 
        /** Calculates the array of DocumentChanges for a given ViewSnapshot. */
        function(t, e) {
            if (t.Y_.te.W()) {
                // Special case the first snapshot because index calculation is easy and
                // fast
                var n = 0;
                return t.Y_.docChanges.map((function(e) {
                    var r = new Ys(t.U_, t.Q_, e.doc.key, e.doc, new mc$1(t.Y_.ee.has(e.doc.key), t.Y_.fromCache), t.query.j_);
                    return e.doc, {
                        type: "added",
                        doc: r,
                        oldIndex: -1,
                        newIndex: n++
                    };
                }));
            }
            // A DocumentSet that is updated incrementally as changes are applied to use
            // to lookup the index of a document.
            var r = t.Y_.te;
            return t.Y_.docChanges.filter((function(t) {
                return e || 3 /* Metadata */ !== t.type;
            })).map((function(e) {
                var n = new Ys(t.U_, t.Q_, e.doc.key, e.doc, new mc$1(t.Y_.ee.has(e.doc.key), t.Y_.fromCache), t.query.j_), i = -1, o = -1;
                return 0 /* Added */ !== e.type && (i = r.indexOf(e.doc.key), r = r.delete(e.doc.key)), 
                1 /* Removed */ !== e.type && (o = (r = r.add(e.doc)).indexOf(e.doc.key)), {
                    type: Js(e.type),
                    doc: n,
                    oldIndex: i,
                    newIndex: o
                };
            }));
        }(this, e), this.Z_ = e), this.X_;
    }, t;
}();

/**
 * A `QueryDocumentSnapshot` contains data read from a document in your
 * Firestore database as part of a query. The document is guaranteed to exist
 * and its data can be extracted with `.data()` or `.get(<field>)` to get a
 * specific field.
 *
 * A `QueryDocumentSnapshot` offers the same API surface as a
 * `DocumentSnapshot`. Since query results contain only existing documents, the
 * `exists` property will always be true and `data()` will never return
 * 'undefined'.
 */ function Js(t) {
    switch (t) {
      case 0 /* Added */ :
        return "added";

      case 2 /* Modified */ :
      case 3 /* Metadata */ :
        return "modified";

      case 1 /* Removed */ :
        return "removed";

      default:
        return P$1();
    }
}

// TODO(firestoreexp): Add tests for snapshotEqual with different snapshot
// metadata
/**
 * Returns true if the provided snapshots are equal.
 *
 * @param left A snapshot to compare.
 * @param right A snapshot to compare.
 * @return true if the snapshots are equal.
 */ function Xs(t, e) {
    return t instanceof Hs && e instanceof Hs ? t.U_ === e.U_ && t.K_.isEqual(e.K_) && (null === t.W_ ? null === e.W_ : t.W_.isEqual(e.W_)) && t.j_ === e.j_ : t instanceof $s && e instanceof $s && t.U_ === e.U_ && Ea$1(t.query, e.query) && t.metadata.isEqual(e.metadata) && t.Y_.isEqual(e.Y_);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Reads the document referred to by this `DocumentReference`.
 *
 * Note: `getDoc()` attempts to provide up-to-date data when possible by waiting
 * for data from the server, but it may return cached data or fail if you are
 * offline and the server cannot be reached. To specify this behavior, invoke
 * {@link getDocFromCache()} or {@link getDocFromServer()}.
 *
 * @param reference The reference of the document to fetch.
 * @return A Promise resolved with a `DocumentSnapshot` containing the
 * current document contents.
 */ var Zs = /** @class */ function(e) {
    function n(t) {
        var n = this;
        return (n = e.call(this) || this).firestore = t, n;
    }
    return __extends(n, e), n.prototype.F_ = function(t) {
        return new Ps(t);
    }, n.prototype.O_ = function(t) {
        var e = this.B_(t, this.firestore.R_);
        return new ia(this.firestore, /* converter= */ null, e);
    }, n;
}(qs);

/**
 * Reads the document referred to by this `DocumentReference` from cache.
 * Returns an error if the document is not currently cached.
 *
 * @return A Promise resolved with a `DocumentSnapshot` containing the
 * current document contents.
 */
/**
 * Executes the query and returns the results as a `QuerySnapshot` from the
 * server. Returns an error if the network is not available.
 *
 * @return A Promise that will be resolved with the results of the query.
 */
function ta$1(t, e, n) {
    for (var r = [], i = 3; i < arguments.length; i++) r[i - 3] = arguments[i];
    var o = Is(t.firestore, Ks), u = Ta$1(o);
    // For Compat types, we have to "extract" the underlying types before
    // performing validation.
    return e instanceof vs && (e = e.o_), na$1(o, ("string" == typeof e || e instanceof Gs ? Ca$1(u, "updateDoc", t.K_, e, n, r) : Pa$1(u, "updateDoc", t.K_, e)).ef(t.K_, an.exists(!0)));
}

/**
 * Deletes the document referred to by the specified `DocumentReference`.
 *
 * @param reference A reference to the document to delete.
 * @return A Promise resolved once the document has been successfully
 * deleted from the backend (note that it won't resolve while you're offline).
 */ function ea$1(t) {
    for (var r, i, o, u = this, s = [], a = 1; a < arguments.length; a++) s[a - 1] = arguments[a];
    var c = {
        includeMetadataChanges: !1
    }, h = 0;
    "object" != typeof s[h] || yr(s[h]) || (c = s[h], h++);
    var f, l, p, d = {
        includeMetadataChanges: c.includeMetadataChanges
    };
    if (yr(s[h])) {
        var v = s[h];
        s[h] = null === (r = v.next) || void 0 === r ? void 0 : r.bind(v), s[h + 1] = null === (i = v.error) || void 0 === i ? void 0 : i.bind(v), 
        s[h + 2] = null === (o = v.complete) || void 0 === o ? void 0 : o.bind(v);
    }
    if (t instanceof ia) l = Is(t.firestore, Ks), p = Cn(t.K_.path), f = {
        next: function(e) {
            s[h] && s[h](ra$1(l, t, e));
        },
        error: s[h + 1],
        complete: s[h + 2]
    }; else {
        l = Is(t.firestore, Ks), p = t.tf;
        var y = new Zs(l);
        f = {
            next: function(e) {
                s[h] && s[h](new $s(l, y, t, e));
            },
            error: s[h + 1],
            complete: s[h + 2]
        }, ma$1(t.tf);
    }
    var m = cc$1(l), g = new ds(f), w = new tu(p, g, d);
    return l.z_.Ri((function() {
        return __awaiter(u, void 0, void 0, (function() {
            var t;
            return __generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    return t = Yo, [ 4 /*yield*/ , ec$1(m) ];

                  case 1:
                    return [ 2 /*return*/ , t.apply(void 0, [ e.sent(), w ]) ];
                }
            }));
        }));
    })), function() {
        g.r_(), l.z_.Ri((function() {
            return __awaiter(u, void 0, void 0, (function() {
                var t;
                return __generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        return t = $o, [ 4 /*yield*/ , ec$1(m) ];

                      case 1:
                        return [ 2 /*return*/ , t.apply(void 0, [ e.sent(), w ]) ];
                    }
                }));
            }));
        }));
    };
}

/** Locally writes `mutations` on the async queue. */ function na$1(t, r) {
    return function(t, r) {
        var i = this, o = new dr;
        return t.di.Ri((function() {
            return __awaiter(i, void 0, void 0, (function() {
                var e;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return e = Iu, [ 4 /*yield*/ , tc(t) ];

                      case 1:
                        return [ 2 /*return*/ , e.apply(void 0, [ n.sent(), r, o ]) ];
                    }
                }));
            }));
        })), o.promise;
    }(cc$1(t), r);
}

/**
 * Converts a ViewSnapshot that contains the single document specified by `ref`
 * to a DocumentSnapshot.
 */ function ra$1(t, e, n) {
    var r = n.docs.get(e.K_), i = new Zs(t);
    return new Hs(t, i, e.K_, r, new mc$1(n.hasPendingWrites, n.fromCache), e.j_);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * A `DocumentReference` refers to a document location in a Firestore database
 * and can be used to write, read, or listen to the location. The document at
 * the referenced location may or may not exist.
 */ var ia = /** @class */ function() {
    function t(t, e, n) {
        this.j_ = e, this.K_ = n, 
        /** The type of this Firestore reference. */
        this.type = "document", this.firestore = t;
    }
    return Object.defineProperty(t.prototype, "nf", {
        get: function() {
            return this.K_.path;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "id", {
        /**
         * The document's identifier within its collection.
         */
        get: function() {
            return this.K_.path.K();
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "path", {
        /**
         * A string representing the path of the referenced document (relative
         * to the root of the database).
         */
        get: function() {
            return this.K_.path.J();
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "parent", {
        /**
         * The collection this `DocumentReference` belongs to.
         */
        get: function() {
            return new ga(this.firestore, this.j_, this.K_.path.q());
        },
        enumerable: !1,
        configurable: !0
    }), 
    /**
     * Applies a custom data converter to this `DocumentReference`, allowing you
     * to use your own custom model objects with Firestore. When you call {@link
     * setDoc()}, {@link getDoc()}, etc. with the returned `DocumentReference`
     * instance, the provided converter will convert between Firestore data and
     * your custom type `U`.
     *
     * @param converter Converts objects to and from Firestore.
     * @return A `DocumentReference<U>` that uses the provided converter.
     */
    t.prototype.withConverter = function(e) {
        return new t(this.firestore, e, this.K_);
    }, t;
}(), oa$1 = /** @class */ function() {
    // This is the lite version of the Query class in the main SDK.
    function t(t, e, n) {
        this.j_ = e, this.tf = n, 
        /** The type of this Firestore reference. */
        this.type = "query", this.firestore = t
        /**
     * Applies a custom data converter to this query, allowing you to use your own
     * custom model objects with Firestore. When you call {@link getDocs()} with
     * the returned query, the provided converter will convert between Firestore
     * data and your custom type `U`.
     *
     * @param converter Converts objects to and from Firestore.
     * @return A `Query<U>` that uses the provided converter.
     */;
    }
    return t.prototype.withConverter = function(e) {
        return new t(this.firestore, e, this.tf);
    }, t;
}(), ua$1 = function() {};

/**
 * A `Query` refers to a Query which you can read or listen to. You can also
 * construct refined `Query` objects by adding filters and ordering.
 */
/**
 * Creates a new immutable instance of `query` that is extended to also include
 * additional query constraints.
 *
 * @param query The query instance to use as a base for the new constraints.
 * @param queryConstraints The list of `QueryConstraint`s to apply.
 * @throws if any of the provided query constraints cannot be combined with the
 * existing or new constraints.
 */
function sa$1(t) {
    for (var e = [], n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
    for (var r = 0, i = e; r < i.length; r++) {
        var o = i[r];
        t = o.sf(t);
    }
    return t;
}

var aa$1 = /** @class */ function(e) {
    function n(t, n, r) {
        var i = this;
        return (i = e.call(this) || this).rf = t, i.cf = n, i.uf = r, i.type = "where", 
        i;
    }
    return __extends(n, e), n.prototype.sf = function(t) {
        var e = Ta$1(t.firestore), n = function(t, e, n, r, i, o, u) {
            var s;
            if (i.tt()) {
                if ("array-contains" /* ARRAY_CONTAINS */ === o || "array-contains-any" /* ARRAY_CONTAINS_ANY */ === o) throw new L$1(V$1.INVALID_ARGUMENT, "Invalid Query. You can't perform '" + o + "' queries on FieldPath.documentId().");
                if ("in" /* IN */ === o || "not-in" /* NOT_IN */ === o) {
                    va$1(u, o);
                    for (var a = [], c = 0, h = u; c < h.length; c++) {
                        var f = h[c];
                        a.push(da$1(r, t, f));
                    }
                    s = {
                        arrayValue: {
                            values: a
                        }
                    };
                } else s = da$1(r, t, u);
            } else "in" /* IN */ !== o && "not-in" /* NOT_IN */ !== o && "array-contains-any" /* ARRAY_CONTAINS_ANY */ !== o || va$1(u, o), 
            s = Ra$1(n, "where", u, 
            /* allowArrays= */ "in" /* IN */ === o || "not-in" /* NOT_IN */ === o);
            var l = Qn.create(i, o, s);
            return function(t, e) {
                if (e.An()) {
                    var n = Un(t);
                    if (null !== n && !n.isEqual(e.field)) throw new L$1(V$1.INVALID_ARGUMENT, "Invalid query. All where filters with an inequality (<, <=, >, or >=) must be on the same field. But you have inequality filters on '" + n.toString() + "' and '" + e.field.toString() + "'");
                    var r = Ln(t);
                    null !== r && ya(t, e.field, r);
                }
                var i = function(t, e) {
                    for (var n = 0, r = t.filters; n < r.length; n++) {
                        var i = r[n];
                        if (e.indexOf(i.op) >= 0) return i.op;
                    }
                    return null;
                }(t, 
                /**
 * Given an operator, returns the set of operators that cannot be used with it.
 *
 * Operators in a query must adhere to the following set of rules:
 * 1. Only one array operator is allowed.
 * 2. Only one disjunctive operator is allowed.
 * 3. NOT_EQUAL cannot be used with another NOT_EQUAL operator.
 * 4. NOT_IN cannot be used with array, disjunctive, or NOT_EQUAL operators.
 *
 * Array operators: ARRAY_CONTAINS, ARRAY_CONTAINS_ANY
 * Disjunctive operators: IN, ARRAY_CONTAINS_ANY, NOT_IN
 */
                function(t) {
                    switch (t) {
                      case "!=" /* NOT_EQUAL */ :
                        return [ "!=" /* NOT_EQUAL */ , "not-in" /* NOT_IN */ ];

                      case "array-contains" /* ARRAY_CONTAINS */ :
                        return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "not-in" /* NOT_IN */ ];

                      case "in" /* IN */ :
                        return [ "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ ];

                      case "array-contains-any" /* ARRAY_CONTAINS_ANY */ :
                        return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ ];

                      case "not-in" /* NOT_IN */ :
                        return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ , "!=" /* NOT_EQUAL */ ];

                      default:
                        return [];
                    }
                }(e.op));
                if (null !== i) 
                // Special case when it's a duplicate op to give a slightly clearer error message.
                throw i === e.op ? new L$1(V$1.INVALID_ARGUMENT, "Invalid query. You cannot use more than one '" + e.op.toString() + "' filter.") : new L$1(V$1.INVALID_ARGUMENT, "Invalid query. You cannot use '" + e.op.toString() + "' filters with '" + i.toString() + "' filters.");
            }(t, l), l;
        }(t.tf, 0, e, t.firestore.R_, this.rf, this.cf, this.uf);
        return new oa$1(t.firestore, t.j_, function(t, e) {
            var n = t.filters.concat([ e ]);
            return new Sn(t.path, t.collectionGroup, t.Tn.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);
        }(t.tf, n));
    }, n;
}(ua$1), ca$1 = /** @class */ function(e) {
    function n(t, n) {
        var r = this;
        return (r = e.call(this) || this).rf = t, r.af = n, r.type = "orderBy", r;
    }
    return __extends(n, e), n.prototype.sf = function(t) {
        var e = function(t, e, n) {
            if (null !== t.startAt) throw new L$1(V$1.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
            if (null !== t.endAt) throw new L$1(V$1.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
            var r = new ur(e, n);
            return function(t, e) {
                if (null === Ln(t)) {
                    // This is the first order by. It must match any inequality.
                    var n = Un(t);
                    null !== n && ya(t, n, e.field);
                }
            }(t, r), r;
        }(t.tf, this.rf, this.af);
        return new oa$1(t.firestore, t.j_, function(t, e) {
            // TODO(dimond): validate that orderBy does not list the same key twice.
            var n = t.Tn.concat([ e ]);
            return new Sn(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
        }(t.tf, e));
    }, n;
}(ua$1), ha$1 = /** @class */ function(e) {
    function n(t, n, r) {
        var i = this;
        return (i = e.call(this) || this).type = t, i.hf = n, i.lf = r, i;
    }
    return __extends(n, e), n.prototype.sf = function(t) {
        return new oa$1(t.firestore, t.j_, Fn(t.tf, this.hf, this.lf));
    }, n;
}(ua$1), fa$1 = /** @class */ function(e) {
    function n(t, n, r) {
        var i = this;
        return (i = e.call(this) || this).type = t, i._f = n, i.ff = r, i;
    }
    return __extends(n, e), n.prototype.sf = function(t) {
        var e = pa$1(t, this.type, this._f, this.ff);
        return new oa$1(t.firestore, t.j_, function(t, e) {
            return new Sn(t.path, t.collectionGroup, t.Tn.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);
        }(t.tf, e));
    }, n;
}(ua$1), la = /** @class */ function(e) {
    function n(t, n, r) {
        var i = this;
        return (i = e.call(this) || this).type = t, i._f = n, i.ff = r, i;
    }
    return __extends(n, e), n.prototype.sf = function(t) {
        var e = pa$1(t, this.type, this._f, this.ff);
        return new oa$1(t.firestore, t.j_, function(t, e) {
            return new Sn(t.path, t.collectionGroup, t.Tn.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);
        }(t.tf, e));
    }, n;
}(ua$1);

/**
 * Creates a `QueryConstraint` that enforces that documents must contain the
 * specified field and that the value should satisfy the relation constraint
 * provided.
 *
 * @param fieldPath The path to compare
 * @param opStr The operation string (e.g "<", "<=", "==", ">", ">=", "!=").
 * @param value The value for comparison
 * @return The created `Query`.
 */
/** Helper function to create a bound from a document or fields */
function pa$1(t, e, n, r) {
    if (n[0] instanceof vs && (n[0] = n[0].o_), n[0] instanceof Fs) return function(t, e, n, r, i) {
        if (!r) throw new L$1(V$1.NOT_FOUND, "Can't use a DocumentSnapshot that doesn't exist for " + n + "().");
        // Because people expect to continue/end a query at the exact document
        // provided, we need to use the implicit sort order rather than the explicit
        // sort order, because it's guaranteed to contain the document key. That way
        // the position becomes unambiguous and the query continues/ends exactly at
        // the provided document. Without the key (by using the explicit sort
        // orders), multiple documents could match the position, yielding duplicate
        // results.
        for (var o = [], u = 0, s = qn(t); u < s.length; u++) {
            var a = s[u];
            if (a.field.tt()) o.push(oe(e, r.key)); else {
                var c = r.field(a.field);
                if (Kt(c)) throw new L$1(V$1.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + a.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
                if (null === c) {
                    var h = a.field.J();
                    throw new L$1(V$1.INVALID_ARGUMENT, "Invalid query. You are trying to start or end a query using a document for which the field '" + h + "' (used as the orderBy) does not exist.");
                }
                o.push(c);
            }
        }
        return new nr(o, i);
    }(t.tf, t.firestore.R_, e, n[0].W_, r);
    var i = Ta$1(t.firestore);
    return function(t, e, n, r, i, o) {
        // Use explicit order by's because it has to match the query the user made
        var u = t.Tn;
        if (i.length > u.length) throw new L$1(V$1.INVALID_ARGUMENT, "Too many arguments provided to " + r + "(). The number of arguments must be less than or equal to the number of orderBy() clauses");
        for (var s = [], a = 0; a < i.length; a++) {
            var c = i[a];
            if (u[a].field.tt()) {
                if ("string" != typeof c) throw new L$1(V$1.INVALID_ARGUMENT, "Invalid query. Expected a string for document ID in " + r + "(), but got a " + typeof c);
                if (!Mn(t) && -1 !== c.indexOf("/")) throw new L$1(V$1.INVALID_ARGUMENT, "Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to " + r + "() must be a plain document ID, but '" + c + "' contains a slash.");
                var h = t.path.child($.Y(c));
                if (!Z$1.ot(h)) throw new L$1(V$1.INVALID_ARGUMENT, "Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to " + r + "() must result in a valid document path, but '" + h + "' is not because it contains an odd number of segments.");
                var f = new Z$1(h);
                s.push(oe(e, f));
            } else {
                var l = Ra$1(n, r, c);
                s.push(l);
            }
        }
        return new nr(s, o);
    }(t.tf, t.firestore.R_, i, e, n, r);
}

function da$1(t, e, n) {
    if (n instanceof vs && (n = n.o_), "string" == typeof n) {
        if ("" === n) throw new L$1(V$1.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");
        if (!Mn(e) && -1 !== n.indexOf("/")) throw new L$1(V$1.INVALID_ARGUMENT, "Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '" + n + "' contains a '/' character.");
        var r = e.path.child($.Y(n));
        if (!Z$1.ot(r)) throw new L$1(V$1.INVALID_ARGUMENT, "Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '" + r + "' is not because it has an odd number of segments (" + r.length + ").");
        return oe(t, new Z$1(r));
    }
    if (n instanceof ia) return oe(t, n.K_);
    throw new L$1(V$1.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: " + _s(n) + ".");
}

/**
 * Validates that the value passed into a disjunctive filter satisfies all
 * array requirements.
 */ function va$1(t, e) {
    if (!Array.isArray(t) || 0 === t.length) throw new L$1(V$1.INVALID_ARGUMENT, "Invalid Query. A non-empty array is required for '" + e.toString() + "' filters.");
    if (t.length > 10) throw new L$1(V$1.INVALID_ARGUMENT, "Invalid Query. '" + e.toString() + "' filters support a maximum of 10 elements in the value array.");
}

function ya(t, e, n) {
    if (!n.isEqual(e)) throw new L$1(V$1.INVALID_ARGUMENT, "Invalid query. You have a where filter with an inequality (<, <=, >, or >=) on field '" + e.toString() + "' and so you must also use '" + e.toString() + "' as your first argument to orderBy(), but your first orderBy() is on field '" + n.toString() + "' instead.");
}

function ma$1(t) {
    if (Vn(t) && 0 === t.Tn.length) throw new L$1(V$1.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
}

/**
 * A `CollectionReference` object can be used for adding documents, getting
 * document references, and querying for documents (using {@link query()}`).
 */ var ga = /** @class */ function(e) {
    function n(t, n, r) {
        var i = this;
        return (i = e.call(this, t, n, Cn(r)) || this).firestore = t, i.nf = r, i.type = "collection", 
        i;
    }
    return __extends(n, e), Object.defineProperty(n.prototype, "id", {
        /** The collection's identifier. */ get: function() {
            return this.tf.path.K();
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(n.prototype, "path", {
        /**
         * A string representing the path of the referenced collection (relative
         * to the root of the database).
         */
        get: function() {
            return this.tf.path.J();
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(n.prototype, "parent", {
        /**
         * A reference to the containing `DocumentReference` if this is a
         * subcollection. If this isn't a subcollection, the reference is null.
         */
        get: function() {
            var t = this.nf.q();
            return t.W() ? null : new ia(this.firestore, 
            /* converter= */ null, new Z$1(t));
        },
        enumerable: !1,
        configurable: !0
    }), 
    /**
     * Applies a custom data converter to this CollectionReference, allowing you
     * to use your own custom model objects with Firestore. When you call {@link
     * addDoc()} with the returned `CollectionReference` instance, the provided
     * converter will convert between Firestore data and your custom type `U`.
     *
     * @param converter Converts objects to and from Firestore.
     * @return A `CollectionReference<U>` that uses the provided converter.
     */
    n.prototype.withConverter = function(t) {
        return new n(this.firestore, t, this.nf);
    }, n;
}(oa$1);

function wa$1(t, e) {
    for (var n = [], i = 2; i < arguments.length; i++) n[i - 2] = arguments[i];
    if (ys("collection", "path", e), t instanceof Vs) {
        var o = $.Y.apply($, __spreadArrays([ e ], n));
        return bs(o), new ga(t, /* converter= */ null, o);
    }
    if (!(t instanceof ia || t instanceof ga)) throw new L$1(V$1.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
    var u = $.Y.apply($, __spreadArrays([ t.path ], n)).child($.Y(e));
    return bs(u), new ga(t.firestore, 
    /* converter= */ null, u);
}

// TODO(firestorelite): Consider using ErrorFactory -
// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106
/**
 * Creates and returns a new `Query` instance that includes all documents in the
 * database that are contained in a collection or subcollection with the
 * given `collectionId`.
 *
 * @param firestore A reference to the root Firestore instance.
 * @param collectionId Identifies the collections to query over. Every
 * collection or subcollection with this ID as the last segment of its path
 * will be included. Cannot contain a slash.
 * @return The created `Query`.
 */ function ba$1(t, e) {
    for (var n = [], i = 2; i < arguments.length; i++) n[i - 2] = arguments[i];
    if (
    // We allow omission of 'pathString' but explicitly prohibit passing in both
    // 'undefined' and 'null'.
    1 === arguments.length && (e = B.D()), ys("doc", "path", e), t instanceof Vs) {
        var o = $.Y.apply($, __spreadArrays([ e ], n));
        return ws(o), new ia(t, 
        /* converter= */ null, new Z$1(o));
    }
    if (!(t instanceof ia || t instanceof ga)) throw new L$1(V$1.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
    var u = t.nf.child($.Y.apply($, __spreadArrays([ e ], n)));
    return ws(u), new ia(t.firestore, t instanceof ga ? t.j_ : null, new Z$1(u));
}

var _a$4 = /** @class */ function(e) {
    function n(t) {
        var n = this;
        return (n = e.call(this) || this).firestore = t, n;
    }
    return __extends(n, e), n.prototype.F_ = function(t) {
        return new Ps(t);
    }, n.prototype.O_ = function(t) {
        var e = this.B_(t, this.firestore.R_);
        return new ia(this.firestore, /* converter= */ null, e);
    }, n;
}(qs);

/**
 * Returns true if the provided references are equal.
 *
 * @param left A reference to compare.
 * @param right A reference to compare.
 * @return true if the references point to the same location in the same
 * Firestore database.
 */ function Ia$1(t, e) {
    return (t instanceof ia || t instanceof ga) && (e instanceof ia || e instanceof ga) && t.firestore === e.firestore && t.path === e.path && t.j_ === e.j_;
}

/**
 * Returns true if the provided queries point to the same collection and apply
 * the same constraints.
 *
 * @param left A `Query` to compare.
 * @param right A Query` to compare.
 * @return true if the references point to the same location in the same
 * Firestore database.
 */ function Ea$1(t, e) {
    return t instanceof oa$1 && e instanceof oa$1 && t.firestore === e.firestore && zn(t.tf, e.tf) && t.j_ === e.j_;
}

function Ta$1(t) {
    var e = t.S_(), n = vr(t.R_);
    return new Oa$1(t.R_, !!e.ignoreUndefinedProperties, n);
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var Na$1 = /^__.*__$/, Aa$1 = /** @class */ function() {
    function t(t, e, n) {
        this.data = t, this.en = e, this.fieldTransforms = n;
    }
    return t.prototype.ef = function(t, e) {
        var n = [];
        return null !== this.en ? n.push(new mn(t, this.data, this.en, e)) : n.push(new yn(t, this.data, e)), 
        this.fieldTransforms.length > 0 && n.push(new wn(t, this.fieldTransforms)), n;
    }, t;
}(), Da$1 = /** @class */ function() {
    function t(t, e, n) {
        this.data = t, this.en = e, this.fieldTransforms = n;
    }
    return t.prototype.ef = function(t, e) {
        var n = [ new mn(t, this.data, this.en, e) ];
        return this.fieldTransforms.length > 0 && n.push(new wn(t, this.fieldTransforms)), 
        n;
    }, t;
}();

/** The result of parsing document data (e.g. for a setData call). */ function xa(t) {
    switch (t) {
      case 0 /* Set */ :
 // fall through
              case 2 /* MergeSet */ :
 // fall through
              case 1 /* Update */ :
        return !0;

      case 3 /* Argument */ :
      case 4 /* ArrayArgument */ :
        return !1;

      default:
        throw P$1();
    }
}

/** A "context" object passed around while parsing user data. */ var ka$1 = /** @class */ function() {
    /**
     * Initializes a ParseContext with the given source and path.
     *
     * @param settings The settings for the parser.
     * @param databaseId The database ID of the Firestore instance.
     * @param serializer The serializer to use to generate the Value proto.
     * @param ignoreUndefinedProperties Whether to ignore undefined properties
     * rather than throw.
     * @param fieldTransforms A mutable list of field transforms encountered while
     *     parsing the data.
     * @param fieldMask A mutable list of field paths encountered while parsing
     *     the data.
     *
     * TODO(b/34871131): We don't support array paths right now, so path can be
     * null to indicate the context represents any location within an array (in
     * which case certain features will not work and errors will be somewhat
     * compromised).
     */
    function t(t, e, n, r, i, o) {
        this.settings = t, this.t = e, this.serializer = n, this.ignoreUndefinedProperties = r, 
        // Minor hack: If fieldTransforms is undefined, we assume this is an
        // external call and we need to validate the entire path.
        void 0 === i && this.df(), this.fieldTransforms = i || [], this.en = o || [];
    }
    return Object.defineProperty(t.prototype, "path", {
        get: function() {
            return this.settings.path;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "a_", {
        get: function() {
            return this.settings.a_;
        },
        enumerable: !1,
        configurable: !0
    }), 
    /** Returns a new context with the specified settings overwritten. */ t.prototype.wf = function(e) {
        return new t(Object.assign(Object.assign({}, this.settings), e), this.t, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.en);
    }, t.prototype.Ef = function(t) {
        var e, n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), r = this.wf({
            path: n,
            __: !1
        });
        return r.Tf(t), r;
    }, t.prototype.If = function(t) {
        var e, n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), r = this.wf({
            path: n,
            __: !1
        });
        return r.df(), r;
    }, t.prototype.mf = function(t) {
        // TODO(b/34871131): We don't support array paths right now; so make path
        // undefined.
        return this.wf({
            path: void 0,
            __: !0
        });
    }, t.prototype.h_ = function(t) {
        return za$1(t, this.settings.methodName, this.settings.Af || !1, this.path, this.settings.l_);
    }, 
    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */ t.prototype.contains = function(t) {
        return void 0 !== this.en.find((function(e) {
            return t.j(e);
        })) || void 0 !== this.fieldTransforms.find((function(e) {
            return t.j(e.field);
        }));
    }, t.prototype.df = function() {
        // TODO(b/34871131): Remove null check once we have proper paths for fields
        // within arrays.
        if (this.path) for (var t = 0; t < this.path.length; t++) this.Tf(this.path.get(t));
    }, t.prototype.Tf = function(t) {
        if (0 === t.length) throw this.h_("Document fields must not be empty");
        if (xa(this.a_) && Na$1.test(t)) throw this.h_('Document fields cannot begin and end with "__"');
    }, t;
}(), Oa$1 = /** @class */ function() {
    function t(t, e, n) {
        this.t = t, this.ignoreUndefinedProperties = e, this.serializer = n || vr(t)
        /** Creates a new top-level parse context. */;
    }
    return t.prototype.Rf = function(t, e, n, r) {
        return void 0 === r && (r = !1), new ka$1({
            a_: t,
            methodName: e,
            l_: n,
            path: X$1.X(),
            __: !1,
            Af: r
        }, this.t, this.serializer, this.ignoreUndefinedProperties);
    }, t;
}();

/**
 * Helper for parsing raw user input (provided via the API) into internal model
 * classes.
 */
/** Parse document data from a set() call. */ function Sa$1(t, e, n, r, i, o) {
    void 0 === o && (o = {});
    var u = t.Rf(o.merge || o.mergeFields ? 2 /* MergeSet */ : 0 /* Set */ , e, n, i);
    Ma$1("Data must be an object, but it was:", u, r);
    var s, a, c = La$1(r, u);
    if (o.merge) s = new on(u.en), a = u.fieldTransforms; else if (o.mergeFields) {
        for (var h = [], f = 0, l = o.mergeFields; f < l.length; f++) {
            var p = qa$1(e, l[f], n);
            if (!u.contains(p)) throw new L$1(V$1.INVALID_ARGUMENT, "Field '" + p + "' is specified in your field mask but missing from your input data.");
            Ba$1(h, p) || h.push(p);
        }
        s = new on(h), a = u.fieldTransforms.filter((function(t) {
            return s.un(t.field);
        }));
    } else s = null, a = u.fieldTransforms;
    return new Aa$1(new Tn(c), s, a);
}

/** Parse update data from an update() call. */ function Pa$1(t, e, n, r) {
    var i = t.Rf(1 /* Update */ , e, n);
    Ma$1("Data must be an object, but it was:", i, r);
    var o = [], u = new Nn;
    Bt(r, (function(t, r) {
        var s = Fa$1(e, t, n);
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
                r instanceof vs && (r = r.o_);
        var a = i.If(s);
        if (r instanceof Ns) 
        // Add it to the field mask, but don't add anything to updateData.
        o.push(s); else {
            var c = Va$1(r, a);
            null != c && (o.push(s), u.set(s, c));
        }
    }));
    var s = new on(o);
    return new Da$1(u.hn(), s, i.fieldTransforms);
}

/** Parse update data from a list of field/value arguments. */ function Ca$1(t, e, n, r, i, o) {
    var u = t.Rf(1 /* Update */ , e, n), s = [ qa$1(e, r, n) ], a = [ i ];
    if (o.length % 2 != 0) throw new L$1(V$1.INVALID_ARGUMENT, "Function " + e + "() needs to be called with an even number of arguments that alternate between field names and values.");
    for (var c = 0; c < o.length; c += 2) s.push(qa$1(e, o[c])), a.push(o[c + 1]);
    // We iterate in reverse order to pick the last value for a field if the
    // user specified the field multiple times.
    for (var h = [], f = new Nn, l = s.length - 1; l >= 0; --l) if (!Ba$1(h, s[l])) {
        var p = s[l], d = a[l];
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        d instanceof vs && (d = d.o_);
        var v = u.If(p);
        if (d instanceof Ns) 
        // Add it to the field mask, but don't add anything to updateData.
        h.push(p); else {
            var y = Va$1(d, v);
            null != y && (h.push(p), f.set(p, y));
        }
    }
    var m = new on(h);
    return new Da$1(f.hn(), m, u.fieldTransforms);
}

/**
 * Parse a "query value" (e.g. value in a where filter or a value in a cursor
 * bound).
 *
 * @param allowArrays Whether the query value is an array that may directly
 * contain additional arrays (e.g. the operand of an `in` query).
 */ function Ra$1(t, e, n, r) {
    return void 0 === r && (r = !1), Va$1(n, t.Rf(r ? 4 /* ArrayArgument */ : 3 /* Argument */ , e));
}

/**
 * Parses user data to Protobuf Values.
 *
 * @param input Data to be parsed.
 * @param context A context object representing the current path being parsed,
 * the source of the data being parsed, etc.
 * @return The parsed value, or null if the value was a FieldValue sentinel
 * that should not be included in the resulting parsed data.
 */ function Va$1(t, e) {
    if (
    // Unwrap the API type from the Compat SDK. This will return the API type
    // from firestore-exp.
    t instanceof vs && (t = t.o_), Ua$1(t)) return Ma$1("Unsupported field value:", e, t), 
    La$1(t, e);
    if (t instanceof Ts) 
    // FieldValues usually parse into transforms (except FieldValue.delete())
    // in which case we do not want to include this field in our parsed data
    // (as doing so will overwrite the field directly prior to the transform
    // trying to transform it). So we don't add this location to
    // context.fieldMask and we return null as our parsing result.
    /**
     * "Parses" the provided FieldValueImpl, adding any necessary transforms to
     * context.fieldTransforms.
     */
    return function(t, e) {
        // Sentinels are only supported with writes, and not within arrays.
        if (!xa(e.a_)) throw e.h_(t.c_ + "() can only be used with update() and set()");
        if (!e.path) throw e.h_(t.c_ + "() is not currently supported inside arrays");
        var n = t.u_(e);
        n && e.fieldTransforms.push(n);
    }(t, e), null;
    if (
    // If context.path is null we are inside an array and we don't support
    // field mask paths more granular than the top-level array.
    e.path && e.en.push(e.path), t instanceof Array) {
        // TODO(b/34871131): Include the path containing the array in the error
        // message.
        // In the case of IN queries, the parsed data is an array (representing
        // the set of values to be included for the IN query) that may directly
        // contain additional arrays (each representing an individual field
        // value), so we disable this validation.
        if (e.settings.__ && 4 /* ArrayArgument */ !== e.a_) throw e.h_("Nested arrays are not supported");
        return function(t, e) {
            for (var n = [], r = 0, i = 0, o = t; i < o.length; i++) {
                var u = Va$1(o[i], e.mf(r));
                null == u && (
                // Just include nulls in the array for fields being replaced with a
                // sentinel.
                u = {
                    nullValue: "NULL_VALUE"
                }), n.push(u), r++;
            }
            return {
                arrayValue: {
                    values: n
                }
            };
        }(t, e);
    }
    return function(t, e) {
        if (t instanceof vs && (t = t.o_), null === t) return {
            nullValue: "NULL_VALUE"
        };
        if ("number" == typeof t) return ye(e.serializer, t);
        if ("boolean" == typeof t) return {
            booleanValue: t
        };
        if ("string" == typeof t) return {
            stringValue: t
        };
        if (t instanceof Date) {
            var n = Q$1.fromDate(t);
            return {
                timestampValue: me(e.serializer, n)
            };
        }
        if (t instanceof Q$1) {
            // Firestore backend truncates precision down to microseconds. To ensure
            // offline mode works the same with regards to truncation, perform the
            // truncation immediately without waiting for the backend to do that.
            var r = new Q$1(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));
            return {
                timestampValue: me(e.serializer, r)
            };
        }
        if (t instanceof Ss) return {
            geoPointValue: {
                latitude: t.latitude,
                longitude: t.longitude
            }
        };
        if (t instanceof Ps) return {
            bytesValue: ge(e.serializer, t.T_)
        };
        if (t instanceof ia) {
            var i = e.t, o = t.firestore.R_;
            if (!o.isEqual(i)) throw e.h_("Document reference is for database " + o.projectId + "/" + o.database + " but should be for database " + i.projectId + "/" + i.database);
            return {
                referenceValue: _e(t.firestore.R_ || e.t, t.K_.path)
            };
        }
        if (void 0 === t && e.ignoreUndefinedProperties) return null;
        throw e.h_("Unsupported field value: " + _s(t));
    }(t, e);
}

function La$1(t, e) {
    var n = {};
    return Gt(t) ? 
    // If we encounter an empty object, we explicitly add it to the update
    // mask to ensure that the server creates a map entry.
    e.path && e.path.length > 0 && e.en.push(e.path) : Bt(t, (function(t, r) {
        var i = Va$1(r, e.Ef(t));
        null != i && (n[t] = i);
    })), {
        mapValue: {
            fields: n
        }
    };
}

function Ua$1(t) {
    return !("object" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof Q$1 || t instanceof Ss || t instanceof Ps || t instanceof ia || t instanceof Ts);
}

function Ma$1(t, e, n) {
    if (!Ua$1(n) || !function(t) {
        return "object" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));
    }(n)) {
        var r = _s(n);
        throw "an object" === r ? e.h_(t + " a custom object") : e.h_(t + " " + r);
    }
}

/**
 * Helper that calls fromDotSeparatedString() but wraps any error thrown.
 */ function qa$1(t, e, n) {
    if (
    // If required, replace the FieldPath Compat class with with the firestore-exp
    // FieldPath.
    e instanceof vs && (e = e.o_), e instanceof Gs) return e.G_;
    if ("string" == typeof e) return Fa$1(t, e);
    throw za$1("Field path arguments must be of type string or FieldPath.", t, 
    /* hasConverter= */ !1, 
    /* path= */ void 0, n);
}

/**
 * Matches any characters in a field path string that are reserved.
 */ var ja$1 = new RegExp("[~\\*/\\[\\]]");

/**
 * Wraps fromDotSeparatedString with an error message about the method that
 * was thrown.
 * @param methodName The publicly visible method name
 * @param path The dot-separated string form of a field path which will be split
 * on dots.
 * @param targetDoc The document against which the field path will be evaluated.
 */ function Fa$1(t, e, n) {
    if (e.search(ja$1) >= 0) throw za$1("Invalid field path (" + e + "). Paths must not contain '~', '*', '/', '[', or ']'", t, 
    /* hasConverter= */ !1, 
    /* path= */ void 0, n);
    try {
        return (new (Gs.bind.apply(Gs, __spreadArrays([ void 0 ], e.split("."))))).G_;
    } catch (r) {
        throw za$1("Invalid field path (" + e + "). Paths must not be empty, begin with '.', end with '.', or contain '..'", t, 
        /* hasConverter= */ !1, 
        /* path= */ void 0, n);
    }
}

function za$1(t, e, n, r, i) {
    var o = r && !r.W(), u = void 0 !== i, s = "Function " + e + "() called with invalid data";
    n && (s += " (via `toFirestore()`)");
    var a = "";
    return (o || u) && (a += " (found", o && (a += " in field " + r), u && (a += " in document " + i), 
    a += ")"), new L$1(V$1.INVALID_ARGUMENT, (s += ". ") + t + a)
    /** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */;
}

function Ba$1(t, e) {
    return t.some((function(t) {
        return t.isEqual(e);
    }));
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Internal transaction object responsible for accumulating the mutations to
 * perform and the base versions for any documents read.
 */ var Ga$1 = /** @class */ function() {
    function t(t) {
        this.Nu = t, 
        // The version of each document that was read during this transaction.
        this.Pf = new Map, this.mutations = [], this.gf = !1, 
        /**
             * A deferred usage error that occurred previously in this transaction that
             * will cause the transaction to fail once it actually commits.
             */
        this.yf = null, 
        /**
             * Set of documents that have been written in the transaction.
             *
             * When there's more than one write to the same key in a transaction, any
             * writes after the first are handled differently.
             */
        this.Vf = new Set;
    }
    return t.prototype.pf = function(t) {
        return __awaiter(this, void 0, void 0, (function() {
            var r, i = this;
            return __generator(this, (function(o) {
                switch (o.label) {
                  case 0:
                    if (this.vf(), this.mutations.length > 0) throw new L$1(V$1.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");
                    return [ 4 /*yield*/ , function(t, r) {
                        return __awaiter(this, void 0, void 0, (function() {
                            var e, i, o, u, s, a;
                            return __generator(this, (function(n) {
                                switch (n.label) {
                                  case 0:
                                    return e = R$1(t), i = De(e.serializer) + "/documents", o = {
                                        documents: r.map((function(t) {
                                            return Ee(e.serializer, t);
                                        }))
                                    }, [ 4 /*yield*/ , e.Ru("BatchGetDocuments", i, o) ];

                                  case 1:
                                    return u = n.sent(), s = new Map, u.forEach((function(t) {
                                        var n = function(t, e) {
                                            return "found" in e ? function(t, e) {
                                                C(!!e.found), e.found.name, e.found.updateTime;
                                                var n = Te(t, e.found.name), r = be(e.found.updateTime), i = new Tn({
                                                    mapValue: {
                                                        fields: e.found.fields
                                                    }
                                                });
                                                return new xn(n, r, i, {});
                                            }(t, e) : "missing" in e ? function(t, e) {
                                                C(!!e.missing), C(!!e.readTime);
                                                var n = Te(t, e.missing), r = be(e.readTime);
                                                return new kn(n, r);
                                            }(t, e) : P$1();
                                        }(e.serializer, t);
                                        s.set(n.key.toString(), n);
                                    })), a = [], [ 2 /*return*/ , (r.forEach((function(t) {
                                        var e = s.get(t.toString());
                                        C(!!e), a.push(e);
                                    })), a) ];
                                }
                            }));
                        }));
                    }(this.Nu, t) ];

                  case 1:
                    return [ 2 /*return*/ , ((r = o.sent()).forEach((function(t) {
                        t instanceof kn || t instanceof xn ? i.bf(t) : P$1();
                    })), r) ];
                }
            }));
        }));
    }, t.prototype.set = function(t, e) {
        this.write(e.ef(t, this.rn(t))), this.Vf.add(t.toString());
    }, t.prototype.update = function(t, e) {
        try {
            this.write(e.ef(t, this.Sf(t)));
        } catch (t) {
            this.yf = t;
        }
        this.Vf.add(t.toString());
    }, t.prototype.delete = function(t) {
        this.write([ new In(t, this.rn(t)) ]), this.Vf.add(t.toString());
    }, t.prototype.commit = function() {
        return __awaiter(this, void 0, void 0, (function() {
            var t, r = this;
            return __generator(this, (function(i) {
                switch (i.label) {
                  case 0:
                    if (this.vf(), this.yf) throw this.yf;
                    return t = this.Pf, 
                    // For each mutation, note that the doc was written.
                    this.mutations.forEach((function(e) {
                        t.delete(e.key.toString());
                    })), 
                    // For each document that was read but not written to, we want to perform
                    // a `verify` operation.
                    t.forEach((function(t, e) {
                        var n = Z$1.st(e);
                        r.mutations.push(new En(n, r.rn(n)));
                    })), [ 4 /*yield*/ , function(t, r) {
                        return __awaiter(this, void 0, void 0, (function() {
                            var e, i, o;
                            return __generator(this, (function(n) {
                                switch (n.label) {
                                  case 0:
                                    return e = R$1(t), i = De(e.serializer) + "/documents", o = {
                                        writes: r.map((function(t) {
                                            return Oe(e.serializer, t);
                                        }))
                                    }, [ 4 /*yield*/ , e.Au("Commit", i, o) ];

                                  case 1:
                                    return n.sent(), [ 2 /*return*/ ];
                                }
                            }));
                        }));
                    }(this.Nu, this.mutations) ];

                  case 1:
                    // For each mutation, note that the doc was written.
                    return i.sent(), this.gf = !0, [ 2 /*return*/ ];
                }
            }));
        }));
    }, t.prototype.bf = function(t) {
        var e;
        if (t instanceof xn) e = t.version; else {
            if (!(t instanceof kn)) throw P$1();
            // For deleted docs, we must use baseVersion 0 when we overwrite them.
                        e = H$1.min();
        }
        var n = this.Pf.get(t.key.toString());
        if (n) {
            if (!e.isEqual(n)) 
            // This transaction will fail no matter what.
            throw new L$1(V$1.ABORTED, "Document version changed between two reads.");
        } else this.Pf.set(t.key.toString(), e);
    }, 
    /**
     * Returns the version of this document when it was read in this transaction,
     * as a precondition, or no precondition if it was not read.
     */
    t.prototype.rn = function(t) {
        var e = this.Pf.get(t.toString());
        return !this.Vf.has(t.toString()) && e ? an.updateTime(e) : an.on();
    }, 
    /**
     * Returns the precondition for a document if the operation is an update.
     */
    t.prototype.Sf = function(t) {
        var e = this.Pf.get(t.toString());
        // The first time a document is written, we want to take into account the
        // read time and existence
                if (!this.Vf.has(t.toString()) && e) {
            if (e.isEqual(H$1.min())) 
            // The document doesn't exist, so fail the transaction.
            // This has to be validated locally because you can't send a
            // precondition that a document does not exist without changing the
            // semantics of the backend write to be an insert. This is the reverse
            // of what we want, since we want to assert that the document doesn't
            // exist but then send the update and have it fail. Since we can't
            // express that to the backend, we have to validate locally.
            // Note: this can change once we can send separate verify writes in the
            // transaction.
            throw new L$1(V$1.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
            // Document exists, base precondition on document update time.
                        return an.updateTime(e);
        }
        // Document was not read, so we just use the preconditions for a blind
        // update.
                return an.exists(!0);
    }, t.prototype.write = function(t) {
        this.vf(), this.mutations = this.mutations.concat(t);
    }, t.prototype.vf = function() {}, t;
}(), Ka$1 = /** @class */ function() {
    function t(t, e, n, r) {
        this.di = t, this.Nu = e, this.updateFunction = n, this.Ti = r, this.Df = 5, this.Si = new Ir(this.di, "transaction_retry" /* TransactionRetry */)
        /** Runs the transaction and sets the result on deferred. */;
    }
    return t.prototype.run = function() {
        this.Cf();
    }, t.prototype.Cf = function() {
        var t = this;
        this.Si.Bs((function() {
            return __awaiter(t, void 0, void 0, (function() {
                var t, e, r = this;
                return __generator(this, (function(n) {
                    return t = new Ga$1(this.Nu), (e = this.Nf(t)) && e.then((function(e) {
                        r.di.Ri((function() {
                            return t.commit().then((function() {
                                r.Ti.resolve(e);
                            })).catch((function(t) {
                                r.xf(t);
                            }));
                        }));
                    })).catch((function(t) {
                        r.xf(t);
                    })), [ 2 /*return*/ ];
                }));
            }));
        }));
    }, t.prototype.Nf = function(t) {
        try {
            var e = this.updateFunction(t);
            return !tt(e) && e.catch && e.then ? e : (this.Ti.reject(Error("Transaction callback must return a Promise")), 
            null);
        } catch (t) {
            // Do not retry errors thrown by user provided updateFunction.
            return this.Ti.reject(t), null;
        }
    }, t.prototype.xf = function(t) {
        var e = this;
        this.Df > 0 && this.Ff(t) ? (this.Df -= 1, this.di.Ri((function() {
            return e.Cf(), Promise.resolve();
        }))) : this.Ti.reject(t);
    }, t.prototype.Ff = function(t) {
        if ("FirebaseError" === t.name) {
            // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and
            // non-matching document versions with ABORTED. These errors should be retried.
            var e = t.code;
            return "aborted" === e || "failed-precondition" === e || !pt(e);
        }
        return !1;
    }, t;
}(), Wa$1 = /** @class */ function() {
    function t(t, 
    /**
     * Asynchronous queue responsible for all of our internal processing. When
     * we get incoming work from the user (via public API) or the network
     * (incoming GRPC messages), we should always schedule onto this queue.
     * This ensures all of our work is properly serialized (e.g. we don't
     * start processing a new operation while the previous one is waiting for
     * an async I/O to complete).
     */
    e, n) {
        var r = this;
        this.credentials = t, this.di = e, this.Fl = n, this.user = N$1.UNAUTHENTICATED, this.clientId = B.D(), 
        this.Of = function() {}, this.g = new dr, this.credentials.A((function(t) {
            x$1("FirestoreClient", "Received user=", t.uid), r.user.isEqual(t) || (r.user = t, 
            r.Of(t)), r.g.resolve();
        }));
    }
    return t.prototype.getConfiguration = function() {
        return __awaiter(this, void 0, void 0, (function() {
            return __generator(this, (function(t) {
                switch (t.label) {
                  case 0:
                    return [ 4 /*yield*/ , this.g.promise ];

                  case 1:
                    return [ 2 /*return*/ , (t.sent(), {
                        di: this.di,
                        Fl: this.Fl,
                        clientId: this.clientId,
                        credentials: this.credentials,
                        Yl: this.user,
                        $h: 100
                    }) ];
                }
            }));
        }));
    }, t.prototype.Mf = function(t) {
        var e = this;
        this.Of = t, 
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.g.promise.then((function() {
            return e.Of(e.user);
        }));
    }, 
    /**
     * Checks that the client has not been terminated. Ensures that other methods on
     * this class cannot be called after the client is terminated.
     */
    t.prototype.kf = function() {
        if (this.di.Ci) throw new L$1(V$1.FAILED_PRECONDITION, "The client has already been terminated.");
    }, t.prototype.terminate = function() {
        var t = this;
        this.di.Oi();
        var r = new dr;
        return this.di.Ni((function() {
            return __awaiter(t, void 0, void 0, (function() {
                var t, e;
                return __generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return n.trys.push([ 0, 5, , 6 ]), this.$f ? [ 4 /*yield*/ , this.$f.terminate() ] : [ 3 /*break*/ , 2 ];

                      case 1:
                        n.sent(), n.label = 2;

                      case 2:
                        return this.Lf ? [ 4 /*yield*/ , this.Lf.terminate() ] : [ 3 /*break*/ , 4 ];

                      case 3:
                        n.sent(), n.label = 4;

                      case 4:
                        // `removeChangeListener` must be called after shutting down the
                        // RemoteStore as it will prevent the RemoteStore from retrieving
                        // auth tokens.
                        return this.credentials.R(), r.resolve(), [ 3 /*break*/ , 6 ];

                      case 5:
                        return t = n.sent(), e = Lr(t, "Failed to shutdown persistence"), r.reject(e), [ 3 /*break*/ , 6 ];

                      case 6:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        })), r.promise;
    }, t;
}();

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * TransactionRunner encapsulates the logic needed to run and retry transactions
 * with backoff.
 */ function Qa$1(t, r) {
    return __awaiter(this, void 0, void 0, (function() {
        var i, o = this;
        return __generator(this, (function(u) {
            switch (u.label) {
              case 0:
                return t.di.Li(), x$1("FirestoreClient", "Initializing OfflineComponentProvider"), 
                [ 4 /*yield*/ , t.getConfiguration() ];

              case 1:
                return i = u.sent(), [ 4 /*yield*/ , r.initialize(i) ];

              case 2:
                return u.sent(), t.Mf((function(i) {
                    return t.di.Mi((function() {
                        return __awaiter(o, void 0, void 0, (function() {
                            return __generator(this, (function(t) {
                                switch (t.label) {
                                  case 0:
                                    return [ 4 /*yield*/ , ro(r.Cu, i) ];

                                  case 1:
                                    return t.sent(), [ 2 /*return*/ ];
                                }
                            }));
                        }));
                    }));
                })), 
                // When a user calls clearPersistence() in one client, all other clients
                // need to be terminated to allow the delete to succeed.
                r.persistence.tc((function() {
                    return t.terminate();
                })), t.Lf = r, [ 2 /*return*/ ];
            }
        }));
    }));
}

function Ha$1(t, r) {
    return __awaiter(this, void 0, void 0, (function() {
        var i, o;
        return __generator(this, (function(u) {
            switch (u.label) {
              case 0:
                return t.di.Li(), [ 4 /*yield*/ , Ya$1(t) ];

              case 1:
                return i = u.sent(), x$1("FirestoreClient", "Initializing OnlineComponentProvider"), 
                [ 4 /*yield*/ , t.getConfiguration() ];

              case 2:
                return o = u.sent(), [ 4 /*yield*/ , r.initialize(i, o) ];

              case 3:
                return u.sent(), 
                // The CredentialChangeListener of the online component provider takes
                // precedence over the offline component provider.
                t.Mf((function(i) {
                    return t.di.Mi((function() {
                        return function(t, r) {
                            return __awaiter(this, void 0, void 0, (function() {
                                var e, i;
                                return __generator(this, (function(n) {
                                    switch (n.label) {
                                      case 0:
                                        return (e = R$1(t)).di.Li(), x$1("RemoteStore", "RemoteStore received new credentials"), 
                                        i = Oo(e), 
                                        // Tear down and re-create our network streams. This will ensure we get a
                                        // fresh auth token for the new user and re-fill the write pipeline with
                                        // new mutations from the LocalStore (since mutations are per-user).
                                        e.Mu.add(3 /* CredentialChange */), [ 4 /*yield*/ , Eo(e) ];

                                      case 1:
                                        return n.sent(), i && 
                                        // Don't set the network status to Unknown if we are offline.
                                        e.Bu.set("Unknown" /* Unknown */), [ 4 /*yield*/ , e.xu.s_(r) ];

                                      case 2:
                                        return n.sent(), e.Mu.delete(3 /* CredentialChange */), [ 4 /*yield*/ , Io(e) ];

                                      case 3:
                                        // Tear down and re-create our network streams. This will ensure we get a
                                        // fresh auth token for the new user and re-fill the write pipeline with
                                        // new mutations from the LocalStore (since mutations are per-user).
                                        return n.sent(), [ 2 /*return*/ ];
                                    }
                                }));
                            }));
                        }(r.Oh, i);
                    }));
                })), t.$f = r, [ 2 /*return*/ ];
            }
        }));
    }));
}

function Ya$1(t) {
    return __awaiter(this, void 0, void 0, (function() {
        return __generator(this, (function(e) {
            switch (e.label) {
              case 0:
                return t.Lf ? [ 3 /*break*/ , 2 ] : (x$1("FirestoreClient", "Using default OfflineComponentProvider"), 
                [ 4 /*yield*/ , Qa$1(t, new hs) ]);

              case 1:
                e.sent(), e.label = 2;

              case 2:
                return [ 2 /*return*/ , t.Lf ];
            }
        }));
    }));
}

function $a$1(t) {
    return __awaiter(this, void 0, void 0, (function() {
        return __generator(this, (function(e) {
            switch (e.label) {
              case 0:
                return t.$f ? [ 3 /*break*/ , 2 ] : (x$1("FirestoreClient", "Using default OnlineComponentProvider"), 
                [ 4 /*yield*/ , Ha$1(t, new ps) ]);

              case 1:
                e.sent(), e.label = 2;

              case 2:
                return [ 2 /*return*/ , t.$f ];
            }
        }));
    }));
}

function Ja$1(t) {
    return Ya$1(t).then((function(t) {
        return t.persistence;
    }));
}

function Xa$1(t) {
    return Ya$1(t).then((function(t) {
        return t.Cu;
    }));
}

function Za$1(t) {
    return $a$1(t).then((function(t) {
        return t.Oh;
    }));
}

function tc(t) {
    return $a$1(t).then((function(t) {
        return t.ga;
    }));
}

function ec$1(t) {
    return __awaiter(this, void 0, void 0, (function() {
        var e, r;
        return __generator(this, (function(n) {
            switch (n.label) {
              case 0:
                return [ 4 /*yield*/ , $a$1(t) ];

              case 1:
                return e = n.sent(), [ 2 /*return*/ , ((r = e.Mh).Ju = wu.bind(null, e.ga), r.Zu = _u.bind(null, e.ga), 
                r) ];
            }
        }));
    }));
}

function nc$1(t, e, n, r, i) {
    var o = new ds({
        next: function(o) {
            // Remove query first before passing event to user to avoid
            // user actions affecting the now stale query.
            e.Ri((function() {
                return $o(t, u);
            }));
            var s = o.docs.has(n);
            !s && o.fromCache ? 
            // TODO(dimond): If we're online and the document doesn't
            // exist then we resolve with a doc.exists set to false. If
            // we're offline however, we reject the Promise in this
            // case. Two options: 1) Cache the negative response from
            // the server so we can deliver that even when you're
            // offline 2) Actually reject the Promise in the online case
            // if the document doesn't exist.
            i.reject(new L$1(V$1.UNAVAILABLE, "Failed to get document because the client is offline.")) : s && o.fromCache && r && "server" === r.source ? i.reject(new L$1(V$1.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : i.resolve(o);
        },
        error: function(t) {
            return i.reject(t);
        }
    }), u = new tu(Cn(n.path), o, {
        includeMetadataChanges: !0,
        oa: !0
    });
    return Yo(t, u);
}

function rc$1(t, e, n, r, i) {
    var o = new ds({
        next: function(n) {
            // Remove query first before passing event to user to avoid
            // user actions affecting the now stale query.
            e.Ri((function() {
                return $o(t, u);
            })), n.fromCache && "server" === r.source ? i.reject(new L$1(V$1.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : i.resolve(n);
        },
        error: function(t) {
            return i.reject(t);
        }
    }), u = new tu(n, o, {
        includeMetadataChanges: !0,
        oa: !0
    });
    return Yo(t, u);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * A write batch, used to perform multiple writes as a single atomic unit.
 *
 * A `WriteBatch` object can be acquired by calling {@link writeBatch()}. It
 * provides methods for adding writes to the write batch. None of the writes
 * will be committed (or visible locally) until {@link WriteBatch#commit()} is
 * called.
 */ var ic$1 = /** @class */ function() {
    function t(t, e) {
        this.U_ = t, this.Bf = e, this.qf = [], this.Uf = !1, this.Qf = Ta$1(t);
    }
    return t.prototype.set = function(t, e, n) {
        this.Kf();
        var r = oc$1(t, this.U_), i = Nc$1(r.j_, e, n), o = Sa$1(this.Qf, "WriteBatch.set", r.K_, i, null !== r.j_, n);
        return this.qf = this.qf.concat(o.ef(r.K_, an.on())), this;
    }, t.prototype.update = function(t, e, n) {
        for (var r = [], i = 3; i < arguments.length; i++) r[i - 3] = arguments[i];
        this.Kf();
        var o, u = oc$1(t, this.U_);
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
                return e instanceof vs && (e = e.o_), o = "string" == typeof e || e instanceof Gs ? Ca$1(this.Qf, "WriteBatch.update", u.K_, e, n, r) : Pa$1(this.Qf, "WriteBatch.update", u.K_, e), 
        this.qf = this.qf.concat(o.ef(u.K_, an.exists(!0))), this;
    }, 
    /**
     * Deletes the document referred to by the provided {@link DocumentReference}.
     *
     * @param documentRef A reference to the document to be deleted.
     * @return This `WriteBatch` instance. Used for chaining method calls.
     */
    t.prototype.delete = function(t) {
        this.Kf();
        var e = oc$1(t, this.U_);
        return this.qf = this.qf.concat(new In(e.K_, an.on())), this;
    }, 
    /**
     * Commits all of the writes in this write batch as a single atomic unit.
     *
     * The result of these writes will only be reflected in document reads that
     * occur after the returned Promise resolves. If the client is offline, the
     * write fails. If you would like to see local modifications or buffer writes
     * until the client is online, use the full Firestore SDK.
     *
     * @return A Promise resolved once all of the writes in the batch have been
     * successfully written to the backend as an atomic unit (note that it won't
     * resolve while you're offline).
     */
    t.prototype.commit = function() {
        return this.Kf(), this.Uf = !0, this.qf.length > 0 ? this.Bf(this.qf) : Promise.resolve();
    }, t.prototype.Kf = function() {
        if (this.Uf) throw new L$1(V$1.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
    }, t;
}();

function oc$1(t, e) {
    if (t instanceof vs && (t = t.o_), t.firestore !== e) throw new L$1(V$1.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
    return t;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the
// legacy SDK.
/**
 * A reference to a transaction.
 *
 * The `Transaction` object passed to a transaction's `updateFunction` provides
 * the methods to read and write data within the transaction context. See
 * {@link runTransaction()}.
 */
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * A reference to a transaction.
 *
 * The `Transaction` object passed to a transaction's `updateFunction` provides
 * the methods to read and write data within the transaction context. See
 * {@link runTransaction()}.
 */ var uc$1 = /** @class */ function(e) {
    // This class implements the same logic as the Transaction API in the Lite SDK
    // but is subclassed in order to return its own DocumentSnapshot types.
    function n(t, n) {
        var r = this;
        return (r = e.call(this, t, n) || this).U_ = t, r;
    }
    /**
     * Reads the document referenced by the provided {@link DocumentReference}.
     *
     * @param documentRef A reference to the document to be read.
     * @return A `DocumentSnapshot` with the read data.
     */    return __extends(n, e), n.prototype.get = function(t) {
        var n = this, r = oc$1(t, this.U_), i = new Zs(this.U_);
        return e.prototype.get.call(this, t).then((function(t) {
            return new Hs(n.U_, i, r.K_, t.W_, new mc$1(
            /* hasPendingWrites= */ !1, 
            /* fromCache= */ !1), r.j_);
        }));
    }, n;
}(/** @class */ function() {
    function t(t, e) {
        this.U_ = t, this.Wf = e, this.Qf = Ta$1(t)
        /**
     * Reads the document referenced by the provided {@link DocumentReference}.
     *
     * @param documentRef A reference to the document to be read.
     * @return A `DocumentSnapshot` with the read data.
     */;
    }
    return t.prototype.get = function(t) {
        var e = this, n = oc$1(t, this.U_), r = new _a$4(this.U_);
        return this.Wf.pf([ n.K_ ]).then((function(t) {
            if (!t || 1 !== t.length) return P$1();
            var i = t[0];
            if (i instanceof kn) return new Fs(e.U_, r, n.K_, null, n.j_);
            if (i instanceof xn) return new Fs(e.U_, r, i.key, i, n.j_);
            throw P$1();
        }));
    }, t.prototype.set = function(t, e, n) {
        var r = oc$1(t, this.U_), i = Nc$1(r.j_, e, n), o = Sa$1(this.Qf, "Transaction.set", r.K_, i, null !== r.j_, n);
        return this.Wf.set(r.K_, o), this;
    }, t.prototype.update = function(t, e, n) {
        for (var r = [], i = 3; i < arguments.length; i++) r[i - 3] = arguments[i];
        var o, u = oc$1(t, this.U_);
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
                return e instanceof vs && (e = e.o_), o = "string" == typeof e || e instanceof Gs ? Ca$1(this.Qf, "Transaction.update", u.K_, e, n, r) : Pa$1(this.Qf, "Transaction.update", u.K_, e), 
        this.Wf.update(u.K_, o), this;
    }, 
    /**
     * Deletes the document referred to by the provided {@link DocumentReference}.
     *
     * @param documentRef A reference to the document to be deleted.
     * @return This `Transaction` instance. Used for chaining method calls.
     */
    t.prototype.delete = function(t) {
        var e = oc$1(t, this.U_);
        return this.Wf.delete(e.K_), this;
    }, t;
}()), sc$1 = /** @class */ function() {
    function t() {}
    return t.prototype.enableIndexedDbPersistence = function(t, e) {
        return function(t, e) {
            Qs(t);
            var n = cc$1(t), r = t.S_(), i = new ps;
            return Ws(n, i, new fs(i, r.cacheSizeBytes, null == e ? void 0 : e.forceOwnership));
        }(t.o_, {
            forceOwnership: e
        });
    }, t.prototype.enableMultiTabIndexedDbPersistence = function(t) {
        return function(t) {
            Qs(t);
            var e = cc$1(t), n = t.S_(), r = new ps;
            return Ws(e, r, new ls(r, n.cacheSizeBytes));
        }(t.o_);
    }, t.prototype.clearIndexedDbPersistence = function(t) {
        return function(t) {
            var r = this;
            if (t.y_ && !t.V_) throw new L$1(V$1.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
            var i = new dr;
            return t.z_.Ni((function() {
                return __awaiter(r, void 0, void 0, (function() {
                    var r;
                    return __generator(this, (function(o) {
                        switch (o.label) {
                          case 0:
                            return o.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , function(t) {
                                return __awaiter(this, void 0, void 0, (function() {
                                    var e;
                                    return __generator(this, (function(n) {
                                        switch (n.label) {
                                          case 0:
                                            return Er.Gs() ? (e = t + "main", [ 4 /*yield*/ , Er.delete(e) ]) : [ 2 /*return*/ , Promise.resolve() ];

                                          case 1:
                                            return n.sent(), [ 2 /*return*/ ];
                                        }
                                    }));
                                }));
                            }(to(t.R_, t.I_)) ];

                          case 1:
                            return o.sent(), i.resolve(), [ 3 /*break*/ , 3 ];

                          case 2:
                            return r = o.sent(), i.reject(r), [ 3 /*break*/ , 3 ];

                          case 3:
                            return [ 2 /*return*/ ];
                        }
                    }));
                }));
            })), i.promise
            /**
 * Waits until all currently pending writes for the active user have been
 * acknowledged by the backend.
 *
 * The returned Promise resolves immediately if there are no outstanding writes.
 * Otherwise, the Promise waits for all previously issued writes (including
 * those written in a previous app session), but it does not wait for writes
 * that were added after the function is called. If you want to wait for
 * additional writes, call `waitForPendingWrites()` again.
 *
 * Any outstanding `waitForPendingWrites()` Promises are rejected during user
 * changes.
 *
 * @return A Promise which resolves when all currently pending writes have been
 * acknowledged by the backend.
 */;
        }(t.o_);
    }, t;
}(), ac$1 = /** @class */ function(r) {
    function i(t, e, n) {
        var i = this;
        return (i = r.call(this, e) || this).jf = n, i.INTERNAL = {
            delete: function() {
                return i.terminate();
            }
        }, t instanceof T$1 || (i.Gf = t), i;
    }
    return __extends(i, r), Object.defineProperty(i.prototype, "R_", {
        get: function() {
            return this.o_.R_;
        },
        enumerable: !1,
        configurable: !0
    }), i.prototype.settings = function(t) {
        t.merge && 
        // Remove the property from the settings once the merge is completed
        delete (t = Object.assign(Object.assign({}, this.o_.b_()), t)).merge, this.o_.v_(t);
    }, i.prototype.useEmulator = function(t, e) {
        "firestore.googleapis.com" !== this.o_.b_().host && O$1("Host has been set in both settings() and useEmulator(), emulator host will be used"), 
        this.settings({
            host: t + ":" + e,
            ssl: !1,
            merge: !0
        });
    }, i.prototype.enableNetwork = function() {
        /**
 * Re-enables use of the network for this Firestore instance after a prior
 * call to {@link disableNetwork()}.
 *
 * @return A promise that is resolved once the network has been enabled.
 */
        return function(t) {
            /** Enables the network connection and re-enqueues all pending operations. */
            return function(t) {
                var r = this;
                return t.di.enqueue((function() {
                    return __awaiter(r, void 0, void 0, (function() {
                        var e, r;
                        return __generator(this, (function(n) {
                            switch (n.label) {
                              case 0:
                                return [ 4 /*yield*/ , Ja$1(t) ];

                              case 1:
                                return e = n.sent(), [ 4 /*yield*/ , Za$1(t) ];

                              case 2:
                                return r = n.sent(), [ 2 /*return*/ , (e.ec(!0), function(t) {
                                    var e = R$1(t);
                                    return e.Mu.delete(0 /* UserDisabled */), Io(e);
                                }(r)) ];
                            }
                        }));
                    }));
                }));
            }(cc$1(t));
        }
        /**
 * Disables network usage for this instance. It can be re-enabled via {@link
 * enableNetwork()}. While the network is disabled, any snapshot listeners,
 * `getDoc()` or `getDocs()` calls will return results from cache, and any write
 * operations will be queued until the network is restored.
 *
 * @return A promise that is resolved once the network has been disabled.
 */ (this.o_);
    }, i.prototype.disableNetwork = function() {
        return function(t) {
            return function(t) {
                var r = this;
                return t.di.enqueue((function() {
                    return __awaiter(r, void 0, void 0, (function() {
                        var r, i;
                        return __generator(this, (function(o) {
                            switch (o.label) {
                              case 0:
                                return [ 4 /*yield*/ , Ja$1(t) ];

                              case 1:
                                return r = o.sent(), [ 4 /*yield*/ , Za$1(t) ];

                              case 2:
                                return i = o.sent(), [ 2 /*return*/ , (r.ec(!1), function(t) {
                                    return __awaiter(this, void 0, void 0, (function() {
                                        var e;
                                        return __generator(this, (function(n) {
                                            switch (n.label) {
                                              case 0:
                                                return (e = R$1(t)).Mu.add(0 /* UserDisabled */), [ 4 /*yield*/ , Eo(e) ];

                                              case 1:
                                                return n.sent(), 
                                                // Set the OnlineState to Offline so get()s return from cache, etc.
                                                e.Bu.set("Offline" /* Offline */), [ 2 /*return*/ ];
                                            }
                                        }));
                                    }));
                                }(i)) ];
                            }
                        }));
                    }));
                }));
            }(cc$1(t));
        }(this.o_);
    }, i.prototype.enablePersistence = function(t) {
        var e = !1, n = !1;
        return t && gs("synchronizeTabs", e = !!t.synchronizeTabs, "experimentalForceOwningTab", n = !!t.experimentalForceOwningTab), 
        e ? this.jf.enableMultiTabIndexedDbPersistence(this) : this.jf.enableIndexedDbPersistence(this, n);
    }, i.prototype.clearPersistence = function() {
        return this.jf.clearIndexedDbPersistence(this);
    }, i.prototype.terminate = function() {
        return this.app._removeServiceInstance("firestore"), this.app._removeServiceInstance("firestore-exp"), 
        this.o_._delete();
    }, i.prototype.waitForPendingWrites = function() {
        return function(t) {
            /**
 * Returns a Promise that resolves when all writes that were pending at the time
 * this method was called received server acknowledgement. An acknowledgement
 * can be either acceptance or rejection.
 */
            return function(t) {
                var r = this, i = new dr;
                return t.di.Ri((function() {
                    return __awaiter(r, void 0, void 0, (function() {
                        var e;
                        return __generator(this, (function(n) {
                            switch (n.label) {
                              case 0:
                                return e = xu, [ 4 /*yield*/ , tc(t) ];

                              case 1:
                                return [ 2 /*return*/ , e.apply(void 0, [ n.sent(), i ]) ];
                            }
                        }));
                    }));
                })), i.promise;
            }(cc$1(t));
        }(this.o_);
    }, i.prototype.onSnapshotsInSync = function(t) {
        return function(t, r) {
            var i = this, o = cc$1(t), u = yr(r) ? r : {
                next: r
            }, s = new ds(u);
            return t.z_.Ri((function() {
                return __awaiter(i, void 0, void 0, (function() {
                    var t;
                    return __generator(this, (function(e) {
                        switch (e.label) {
                          case 0:
                            return t = function(t, e) {
                                R$1(t).Hu.add(e), 
                                // Immediately fire an initial event, indicating all existing listeners
                                // are in-sync.
                                e.next();
                            }, [ 4 /*yield*/ , ec$1(o) ];

                          case 1:
                            return t.apply(void 0, [ e.sent(), s ]), [ 2 /*return*/ ];
                        }
                    }));
                }));
            })), function() {
                s.r_(), t.z_.Ri((function() {
                    return __awaiter(i, void 0, void 0, (function() {
                        var t;
                        return __generator(this, (function(e) {
                            switch (e.label) {
                              case 0:
                                return t = function(t, e) {
                                    R$1(t).Hu.delete(e);
                                }, [ 4 /*yield*/ , ec$1(o) ];

                              case 1:
                                return t.apply(void 0, [ e.sent(), s ]), [ 2 /*return*/ ];
                            }
                        }));
                    }));
                }));
            };
        }(this.o_, t);
    }, Object.defineProperty(i.prototype, "app", {
        get: function() {
            if (!this.Gf) throw new L$1(V$1.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
            return this.Gf;
        },
        enumerable: !1,
        configurable: !0
    }), i.prototype.collection = function(t) {
        try {
            return new Ec$1(this, wa$1(this.o_, t));
        } catch (t) {
            throw dc$1(t, "collection()", "Firestore.collection()");
        }
    }, i.prototype.doc = function(t) {
        try {
            return new pc$1(this, ba$1(this.o_, t));
        } catch (t) {
            throw dc$1(t, "doc()", "Firestore.doc()");
        }
    }, i.prototype.collectionGroup = function(t) {
        try {
            return new bc$1(this, function(t, e) {
                if (ys("collectionGroup", "collection id", e), e.indexOf("/") >= 0) throw new L$1(V$1.INVALID_ARGUMENT, "Invalid collection ID '" + e + "' passed to function collectionGroup(). Collection IDs must not contain '/'.");
                return new oa$1(t, 
                /* converter= */ null, function(t) {
                    return new Sn($.X(), t);
                }(e));
            }(this.o_, t));
        } catch (t) {
            throw dc$1(t, "collectionGroup()", "Firestore.collectionGroup()");
        }
    }, i.prototype.runTransaction = function(t) {
        var r = this;
        return function(t, r) {
            return function(t, r) {
                var i = this, o = new dr;
                return t.di.Ri((function() {
                    return __awaiter(i, void 0, void 0, (function() {
                        var e;
                        return __generator(this, (function(n) {
                            switch (n.label) {
                              case 0:
                                return [ 4 /*yield*/ , function(t) {
                                    return $a$1(t).then((function(t) {
                                        return t.Nu;
                                    }));
                                }(t) ];

                              case 1:
                                return e = n.sent(), new Ka$1(t.di, e, r, o).run(), [ 2 /*return*/ ];
                            }
                        }));
                    }));
                })), o.promise;
            }(cc$1(t), (function(e) {
                return r(new uc$1(t, e));
            }));
        }(this.o_, (function(e) {
            return t(new fc$1(r, e));
        }));
    }, i.prototype.batch = function() {
        var t = this;
        return cc$1(this.o_), new lc$1(new ic$1(this.o_, (function(e) {
            return na$1(t.o_, e);
        })));
    }, i;
}(vs);

/**
 * Executes the given `updateFunction` and then attempts to commit the changes
 * applied within the transaction. If any document read within the transaction
 * has changed, Cloud Firestore retries the `updateFunction`. If it fails to
 * commit after 5 attempts, the transaction fails.
 *
 * The maximum number of writes allowed in a single transaction is 500.
 *
 * @param firestore A reference to the Firestore database to run this
 * transaction against.
 * @param updateFunction The function to execute within the transaction context.
 * @return If the transaction completed successfully or was explicitly aborted
 * (the `updateFunction` returned a failed promise), the promise returned by the
 * `updateFunction `is returned here. Otherwise, if the transaction failed, a
 * rejected promise with the corresponding failure error is returned.
 */
/**
 * The persistence provider included with the full Firestore SDK.
 */ function cc$1(t) {
    return t.H_ || hc$1(t), t.H_.kf(), t.H_;
}

function hc$1(t) {
    var e = t.S_(), n = function(t, e, n) {
        return new E$1(t, e, n.host, n.ssl, n.experimentalForceLongPolling, n.experimentalAutoDetectLongPolling);
    }(t.R_, t.I_, e);
    t.H_ = new Wa$1(t.P_, t.z_, n);
}

/**
 * A reference to a transaction.
 */ var fc$1 = /** @class */ function(e) {
    function n(t, n) {
        var r = this;
        return (r = e.call(this, n) || this).U_ = t, r;
    }
    return __extends(n, e), n.prototype.get = function(t) {
        var e = this, n = Tc$1(t);
        return this.o_.get(n).then((function(t) {
            return new gc$1(e.U_, t);
        }));
    }, n.prototype.set = function(t, e, n) {
        var r = Tc$1(t);
        return n ? (ms("Transaction.set", n), this.o_.set(r, e, n)) : this.o_.set(r, e), 
        this;
    }, n.prototype.update = function(t, e, n) {
        for (var i, o = [], u = 3; u < arguments.length; u++) o[u - 3] = arguments[u];
        var s = Tc$1(t);
        return 2 === arguments.length ? this.o_.update(s, e) : (i = this.o_).update.apply(i, __spreadArrays([ s, e, n ], o)), 
        this;
    }, n.prototype.delete = function(t) {
        var e = Tc$1(t);
        return this.o_.delete(e), this;
    }, n;
}(vs), lc$1 = /** @class */ function(e) {
    function n() {
        return null !== e && e.apply(this, arguments) || this;
    }
    return __extends(n, e), n.prototype.set = function(t, e, n) {
        var r = Tc$1(t);
        return n ? (ms("WriteBatch.set", n), this.o_.set(r, e, n)) : this.o_.set(r, e), 
        this;
    }, n.prototype.update = function(t, e, n) {
        for (var i, o = [], u = 3; u < arguments.length; u++) o[u - 3] = arguments[u];
        var s = Tc$1(t);
        return 2 === arguments.length ? this.o_.update(s, e) : (i = this.o_).update.apply(i, __spreadArrays([ s, e, n ], o)), 
        this;
    }, n.prototype.delete = function(t) {
        var e = Tc$1(t);
        return this.o_.delete(e), this;
    }, n.prototype.commit = function() {
        return this.o_.commit();
    }, n;
}(vs), pc$1 = /** @class */ function(i) {
    function o(t, e) {
        var n = this;
        return (n = i.call(this, e) || this).firestore = t, n.Q_ = new js(t), n;
    }
    return __extends(o, i), o.zf = function(t, e, n) {
        if (t.length % 2 != 0) throw new L$1(V$1.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + t.J() + " has " + t.length);
        return new o(e, new ia(e.o_, n, new Z$1(t)));
    }, o.q_ = function(t, e, n) {
        return new o(e, new ia(e.o_, n, t));
    }, Object.defineProperty(o.prototype, "id", {
        get: function() {
            return this.o_.id;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(o.prototype, "parent", {
        get: function() {
            return new Ec$1(this.firestore, this.o_.parent);
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(o.prototype, "path", {
        get: function() {
            return this.o_.path;
        },
        enumerable: !1,
        configurable: !0
    }), o.prototype.collection = function(t) {
        try {
            return new Ec$1(this.firestore, wa$1(this.o_, t));
        } catch (t) {
            throw dc$1(t, "collection()", "DocumentReference.collection()");
        }
    }, o.prototype.isEqual = function(t) {
        return t instanceof vs && (t = t.o_), t instanceof ia && Ia$1(this.o_, t);
    }, o.prototype.set = function(t, e) {
        e = ms("DocumentReference.set", e);
        try {
            return function(t, e, n) {
                var r = Is(t.firestore, Ks), i = Nc$1(t.j_, e, n);
                return na$1(r, Sa$1(Ta$1(r), "setDoc", t.K_, i, null !== t.j_, n).ef(t.K_, an.on()));
            }(this.o_, t, e);
        } catch (t) {
            throw dc$1(t, "setDoc()", "DocumentReference.set()");
        }
    }, o.prototype.update = function(t, e) {
        for (var n = [], i = 2; i < arguments.length; i++) n[i - 2] = arguments[i];
        try {
            return 1 === arguments.length ? ta$1(this.o_, t) : ta$1.apply(void 0, __spreadArrays([ this.o_, t, e ], n));
        } catch (t) {
            throw dc$1(t, "updateDoc()", "DocumentReference.update()");
        }
    }, o.prototype.delete = function() {
        return na$1(Is((t = this.o_).firestore, Ks), [ new In(t.K_, an.on()) ]);
        var t;
        /**
 * Add a new document to specified `CollectionReference` with the given data,
 * assigning it a document ID automatically.
 *
 * @param reference A reference to the collection to add this document to.
 * @param data An Object containing the data for the new document.
 * @return A Promise resolved with a `DocumentReference` pointing to the
 * newly created document after it has been written to the backend (Note that it
 * won't resolve while you're offline).
 */    }, o.prototype.onSnapshot = function() {
        for (var t = this, e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
        var r = vc$1(e), i = yc$1(e, (function(e) {
            return new gc$1(t.firestore, new Hs(t.firestore.o_, t.Q_, e.K_, e.W_, e.metadata, t.o_.j_));
        }));
        return ea$1(this.o_, r, i);
    }, o.prototype.get = function(t) {
        var r = this;
        return ("cache" === (null == t ? void 0 : t.source) ? function(t) {
            var r = this, i = Is(t.firestore, Ks), o = cc$1(i), u = new Zs(i), s = new dr;
            return i.z_.Ri((function() {
                return __awaiter(r, void 0, void 0, (function() {
                    return __generator(this, (function(r) {
                        switch (r.label) {
                          case 0:
                            return [ 4 /*yield*/ , Xa$1(o) ];

                          case 1:
                            return [ 4 /*yield*/ , function(t, r, i) {
                                return __awaiter(this, void 0, void 0, (function() {
                                    var e, o, u;
                                    return __generator(this, (function(n) {
                                        switch (n.label) {
                                          case 0:
                                            return n.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , function(t, e) {
                                                var n = R$1(t);
                                                return n.persistence.runTransaction("read document", "readonly", (function(t) {
                                                    return n.Oc.cs(t, e);
                                                }));
                                            }(t, r) ];

                                          case 1:
                                            return (e = n.sent()) instanceof xn ? i.resolve(e) : e instanceof kn ? i.resolve(null) : i.reject(new L$1(V$1.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)")), 
                                            [ 3 /*break*/ , 3 ];

                                          case 2:
                                            return o = n.sent(), u = Lr(o, "Failed to get document '" + r + " from cache"), 
                                            i.reject(u), [ 3 /*break*/ , 3 ];

                                          case 3:
                                            return [ 2 /*return*/ ];
                                        }
                                    }));
                                }));
                            }(r.sent(), t.K_, s) ];

                          case 2:
                            return r.sent(), [ 2 /*return*/ ];
                        }
                    }));
                }));
            })), s.promise.then((function(e) {
                return new Hs(i, u, t.K_, e, new mc$1(e instanceof xn && e.an, 
                /* fromCache= */ !0), t.j_);
            }))
            /**
 * Reads the document referred to by this `DocumentReference` from the server.
 * Returns an error if the network is not available.
 *
 * @return A Promise resolved with a `DocumentSnapshot` containing the
 * current document contents.
 */
            /**
 * Executes the query and returns the results as a `QuerySnapshot` from cache.
 * Returns an error if the document is not currently cached.
 *
 * @return A Promise that will be resolved with the results of the query.
 */;
        }(this.o_) : "server" === (null == t ? void 0 : t.source) ? function(t) {
            var r = this, i = Is(t.firestore, Ks), o = cc$1(i), u = new dr;
            return i.z_.Ri((function() {
                return __awaiter(r, void 0, void 0, (function() {
                    return __generator(this, (function(e) {
                        switch (e.label) {
                          case 0:
                            return [ 4 /*yield*/ , ec$1(o) ];

                          case 1:
                            return [ 4 /*yield*/ , nc$1(e.sent(), i.z_, t.K_, {
                                source: "server"
                            }, u) ];

                          case 2:
                            return e.sent(), [ 2 /*return*/ ];
                        }
                    }));
                }));
            })), u.promise.then((function(e) {
                return ra$1(i, t, e);
            }));
        }(this.o_) : function(t) {
            var r = this, i = Is(t.firestore, Ks), o = cc$1(i), u = new dr;
            return i.z_.Ri((function() {
                return __awaiter(r, void 0, void 0, (function() {
                    return __generator(this, (function(e) {
                        switch (e.label) {
                          case 0:
                            return [ 4 /*yield*/ , ec$1(o) ];

                          case 1:
                            return [ 4 /*yield*/ , nc$1(e.sent(), i.z_, t.K_, {
                                source: "default"
                            }, u) ];

                          case 2:
                            return e.sent(), [ 2 /*return*/ ];
                        }
                    }));
                }));
            })), u.promise.then((function(e) {
                return ra$1(i, t, e);
            }));
        }(this.o_)).then((function(t) {
            return new gc$1(r.firestore, new Hs(r.firestore.o_, r.Q_, t.K_, t.W_, t.metadata, r.o_.j_));
        }));
    }, o.prototype.withConverter = function(t) {
        return new o(this.firestore, this.o_.withConverter(t));
    }, o;
}(vs);

/**
 * Replaces the function name in an error thrown by the firestore-exp API
 * with the function names used in the classic API.
 */
function dc$1(t, e, n) {
    return t.message = t.message.replace(e, n), t
    /**
 * Iterates the list of arguments from an `onSnapshot` call and returns the
 * first argument that may be an `SnapshotListenOptions` object. Returns an
 * empty object if none is found.
 */;
}

function vc$1(t) {
    for (var e = 0, n = t; e < n.length; e++) {
        var r = n[e];
        if ("object" == typeof r && !yr(r)) return r;
    }
    return {};
}

/**
 * Creates an observer that can be passed to the firestore-exp SDK. The
 * observer converts all observed values into the format expected by the classic
 * SDK.
 *
 * @param args The list of arguments from an `onSnapshot` call.
 * @param wrapper The function that converts the firestore-exp type into the
 * type used by this shim.
 */ function yc$1(t, e) {
    var n, r, i;
    return {
        next: function(t) {
            i.next && i.next(e(t));
        },
        error: null === (n = (i = yr(t[0]) ? t[0] : yr(t[1]) ? t[1] : "function" == typeof t[0] ? {
            next: t[0],
            error: t[1],
            complete: t[2]
        } : {
            next: t[1],
            error: t[2],
            complete: t[3]
        }).error) || void 0 === n ? void 0 : n.bind(i),
        complete: null === (r = i.complete) || void 0 === r ? void 0 : r.bind(i)
    };
}

/**
 * Metadata about a snapshot, describing the state of the snapshot.
 */ var mc$1 = /** @class */ function() {
    function t(t, e) {
        this.hasPendingWrites = t, this.fromCache = e
        /**
     * Returns true if this `SnapshotMetadata` is equal to the provided one.
     *
     * @param other The `SnapshotMetadata` to compare against.
     * @return true if this `SnapshotMetadata` is equal to the provided one.
     */;
    }
    return t.prototype.isEqual = function(t) {
        return this.hasPendingWrites === t.hasPendingWrites && this.fromCache === t.fromCache;
    }, t;
}(), gc$1 = /** @class */ function(e) {
    function n(t, n) {
        var r = this;
        return (r = e.call(this, n) || this).U_ = t, r;
    }
    return __extends(n, e), Object.defineProperty(n.prototype, "ref", {
        get: function() {
            return new pc$1(this.U_, this.o_.ref);
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(n.prototype, "id", {
        get: function() {
            return this.o_.id;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(n.prototype, "metadata", {
        get: function() {
            return this.o_.metadata;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(n.prototype, "exists", {
        get: function() {
            return this.o_.exists();
        },
        enumerable: !1,
        configurable: !0
    }), n.prototype.data = function(t) {
        return this.o_.data(t);
    }, n.prototype.get = function(t, e) {
        return this.o_.get(t, e);
    }, n.prototype.isEqual = function(t) {
        return Xs(this.o_, t.o_);
    }, n;
}(vs), wc$1 = /** @class */ function(e) {
    function n() {
        return null !== e && e.apply(this, arguments) || this;
    }
    return __extends(n, e), n.prototype.data = function(t) {
        return this.o_.data(t);
    }, n;
}(gc$1), bc$1 = /** @class */ function(r) {
    function i(t, e) {
        var n = this;
        return (n = r.call(this, e) || this).firestore = t, n;
    }
    return __extends(i, r), i.prototype.where = function(t, e, n) {
        try {
            // The "as string" cast is a little bit of a hack. `where` accepts the
            // FieldPath Compat type as input, but is not typed as such in order to
            // not expose this via our public typings file.
            return new i(this.firestore, sa$1(this.o_, function(t, e, n) {
                var r = e, i = Bs("where", t);
                return new aa$1(i, r, n);
            }(t, e, n)));
        } catch (t) {
            throw dc$1(t, /(orderBy|where)\(\)/, "Query.$1()");
        }
    }, i.prototype.orderBy = function(t, e) {
        try {
            // The "as string" cast is a little bit of a hack. `orderBy` accepts the
            // FieldPath Compat type as input, but is not typed as such in order to
            // not expose this via our public typings file.
            return new i(this.firestore, sa$1(this.o_, function(t, e) {
                void 0 === e && (e = "asc");
                var n = e, r = Bs("orderBy", t);
                return new ca$1(r, n);
            }(t, e)));
        } catch (t) {
            throw dc$1(t, /(orderBy|where)\(\)/, "Query.$1()");
        }
    }, i.prototype.limit = function(t) {
        try {
            return new i(this.firestore, sa$1(this.o_, function(t) {
                return Es("limit", t), new ha$1("limit", t, "F" /* First */);
            }(t)));
        } catch (t) {
            throw dc$1(t, "limit()", "Query.limit()");
        }
    }, i.prototype.limitToLast = function(t) {
        try {
            return new i(this.firestore, sa$1(this.o_, function(t) {
                return Es("limitToLast", t), new ha$1("limitToLast", t, "L" /* Last */);
            }(t)));
        } catch (t) {
            throw dc$1(t, "limitToLast()", "Query.limitToLast()");
        }
    }, i.prototype.startAt = function() {
        for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
        try {
            return new i(this.firestore, sa$1(this.o_, function() {
                for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                return new fa$1("startAt", t, /*before=*/ !0);
            }.apply(void 0, t)));
        } catch (t) {
            throw dc$1(t, "startAt()", "Query.startAt()");
        }
    }, i.prototype.startAfter = function() {
        for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
        try {
            return new i(this.firestore, sa$1(this.o_, function() {
                for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                return new fa$1("startAfter", t, 
                /*before=*/ !1);
            }.apply(void 0, t)));
        } catch (t) {
            throw dc$1(t, "startAfter()", "Query.startAfter()");
        }
    }, i.prototype.endBefore = function() {
        for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
        try {
            return new i(this.firestore, sa$1(this.o_, function() {
                for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                return new la("endBefore", t, /*before=*/ !0);
            }.apply(void 0, t)));
        } catch (t) {
            throw dc$1(t, "endBefore()", "Query.endBefore()");
        }
    }, i.prototype.endAt = function() {
        for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
        try {
            return new i(this.firestore, sa$1(this.o_, function() {
                for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                return new la("endAt", t, /*before=*/ !1);
            }.apply(void 0, t)));
        } catch (t) {
            throw dc$1(t, "endAt()", "Query.endAt()");
        }
    }, i.prototype.isEqual = function(t) {
        return Ea$1(this.o_, t.o_);
    }, i.prototype.get = function(t) {
        var r = this;
        return ("cache" === (null == t ? void 0 : t.source) ? function(t) {
            var r = this, i = Is(t.firestore, Ks), o = cc$1(i), u = new Zs(i), s = new dr;
            return i.z_.Ri((function() {
                return __awaiter(r, void 0, void 0, (function() {
                    return __generator(this, (function(r) {
                        switch (r.label) {
                          case 0:
                            return [ 4 /*yield*/ , Xa$1(o) ];

                          case 1:
                            return [ 4 /*yield*/ , function(t, r, i) {
                                return __awaiter(this, void 0, void 0, (function() {
                                    var e, o, u, s, a, c;
                                    return __generator(this, (function(n) {
                                        switch (n.label) {
                                          case 0:
                                            return n.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , ho(t, r, 
                                            /* usePreviousResults= */ !0) ];

                                          case 1:
                                            return e = n.sent(), o = new vu(r, e.Bc), u = o.gh(e.documents), s = o.Zn(u, 
                                            /* updateLimboDocuments= */ !1), i.resolve(s.snapshot), [ 3 /*break*/ , 3 ];

                                          case 2:
                                            return a = n.sent(), c = Lr(a, "Failed to execute query '" + r + " against cache"), 
                                            i.reject(c), [ 3 /*break*/ , 3 ];

                                          case 3:
                                            return [ 2 /*return*/ ];
                                        }
                                    }));
                                }));
                            }(r.sent(), t.tf, s) ];

                          case 2:
                            return r.sent(), [ 2 /*return*/ ];
                        }
                    }));
                }));
            })), s.promise.then((function(e) {
                return new $s(i, u, t, e);
            }));
        }(this.o_) : "server" === (null == t ? void 0 : t.source) ? function(t) {
            var r = this, i = Is(t.firestore, Ks), o = cc$1(i), u = new Zs(i), s = new dr;
            return i.z_.Ri((function() {
                return __awaiter(r, void 0, void 0, (function() {
                    return __generator(this, (function(e) {
                        switch (e.label) {
                          case 0:
                            return [ 4 /*yield*/ , ec$1(o) ];

                          case 1:
                            return [ 4 /*yield*/ , rc$1(e.sent(), i.z_, t.tf, {
                                source: "server"
                            }, s) ];

                          case 2:
                            return e.sent(), [ 2 /*return*/ ];
                        }
                    }));
                }));
            })), s.promise.then((function(e) {
                return new $s(i, u, t, e);
            }));
        }(this.o_) : function(t) {
            var r = this, i = Is(t.firestore, Ks), o = cc$1(i), u = new Zs(i);
            ma$1(t.tf);
            var s = new dr;
            return i.z_.Ri((function() {
                return __awaiter(r, void 0, void 0, (function() {
                    return __generator(this, (function(e) {
                        switch (e.label) {
                          case 0:
                            return [ 4 /*yield*/ , ec$1(o) ];

                          case 1:
                            return [ 4 /*yield*/ , rc$1(e.sent(), i.z_, t.tf, {
                                source: "default"
                            }, s) ];

                          case 2:
                            return e.sent(), [ 2 /*return*/ ];
                        }
                    }));
                }));
            })), s.promise.then((function(e) {
                return new $s(i, u, t, e);
            }));
        }(this.o_)).then((function(t) {
            return new Ic$1(r.firestore, t);
        }));
    }, i.prototype.onSnapshot = function() {
        for (var t = this, e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
        var r = vc$1(e), i = yc$1(e, (function(e) {
            return new Ic$1(t.firestore, e);
        }));
        return ea$1(this.o_, r, i);
    }, i.prototype.withConverter = function(t) {
        return new i(this.firestore, this.o_.withConverter(t));
    }, i;
}(vs), _c = /** @class */ function(e) {
    function n(t, n) {
        var r = this;
        return (r = e.call(this, n) || this).U_ = t, r;
    }
    return __extends(n, e), Object.defineProperty(n.prototype, "type", {
        get: function() {
            return this.o_.type;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(n.prototype, "doc", {
        get: function() {
            return new wc$1(this.U_, this.o_.doc);
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(n.prototype, "oldIndex", {
        get: function() {
            return this.o_.oldIndex;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(n.prototype, "newIndex", {
        get: function() {
            return this.o_.newIndex;
        },
        enumerable: !1,
        configurable: !0
    }), n;
}(vs), Ic$1 = /** @class */ function(e) {
    function n(t, n) {
        var r = this;
        return (r = e.call(this, n) || this).U_ = t, r;
    }
    return __extends(n, e), Object.defineProperty(n.prototype, "query", {
        get: function() {
            return new bc$1(this.U_, this.o_.query);
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(n.prototype, "metadata", {
        get: function() {
            return this.o_.metadata;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(n.prototype, "size", {
        get: function() {
            return this.o_.size;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(n.prototype, "empty", {
        get: function() {
            return this.o_.empty;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(n.prototype, "docs", {
        get: function() {
            var t = this;
            return this.o_.docs.map((function(e) {
                return new wc$1(t.U_, e);
            }));
        },
        enumerable: !1,
        configurable: !0
    }), n.prototype.docChanges = function(t) {
        var e = this;
        return this.o_.docChanges(t).map((function(t) {
            return new _c(e.U_, t);
        }));
    }, n.prototype.forEach = function(t, e) {
        var n = this;
        this.o_.forEach((function(r) {
            t.call(e, new wc$1(n.U_, r));
        }));
    }, n.prototype.isEqual = function(t) {
        return Xs(this.o_, t.o_);
    }, n;
}(vs), Ec$1 = /** @class */ function(e) {
    function n(t, n) {
        var r = this;
        return (r = e.call(this, t, n) || this).firestore = t, r.o_ = n, r;
    }
    return __extends(n, e), Object.defineProperty(n.prototype, "id", {
        get: function() {
            return this.o_.id;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(n.prototype, "path", {
        get: function() {
            return this.o_.path;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(n.prototype, "parent", {
        get: function() {
            var t = this.o_.parent;
            return t ? new pc$1(this.firestore, t) : null;
        },
        enumerable: !1,
        configurable: !0
    }), n.prototype.doc = function(t) {
        try {
            return new pc$1(this.firestore, void 0 === t ? ba$1(this.o_) : ba$1(this.o_, t));
        } catch (t) {
            throw dc$1(t, "doc()", "CollectionReference.doc()");
        }
    }, n.prototype.add = function(t) {
        var e = this;
        return function(t, e) {
            var n = Is(t.firestore, Ks), r = ba$1(t), i = Nc$1(t.j_, e);
            return na$1(n, Sa$1(Ta$1(t.firestore), "addDoc", r.K_, i, null !== t.j_, {}).ef(r.K_, an.exists(!1))).then((function() {
                return r;
            }));
        }(this.o_, t).then((function(t) {
            return new pc$1(e.firestore, t);
        }));
    }, n.prototype.isEqual = function(t) {
        return Ia$1(this.o_, t.o_);
    }, n.prototype.withConverter = function(t) {
        return new n(this.firestore, this.o_.withConverter(t));
    }, n;
}(bc$1);

function Tc$1(t) {
    return t instanceof vs && (t = t.o_), Is(t, ia)
    /**
 * Converts custom model object of type T into DocumentData by applying the
 * converter if it exists.
 *
 * This function is used when converting user objects to DocumentData
 * because we want to provide the user with a more specific error message if
 * their set() or fails due to invalid data originating from a toFirestore()
 * call.
 */;
}

function Nc$1(t, e, n) {
    // Cast to `any` in order to satisfy the union type constraint on
    // toFirestore().
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e;
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// The objects that are a part of this API are exposed to third-parties as
// compiled javascript so we want to flag our private members with a leading
// underscore to discourage their use.
/**
 * A `FieldPath` refers to a field in a document. The path may consist of a
 * single field name (referring to a top-level field in the document), or a list
 * of field names (referring to a nested field in the document).
 */ var Ac$1 = /** @class */ function(e) {
    /**
     * Creates a FieldPath from the provided field names. If more than one field
     * name is provided, the path will point to a nested field in a document.
     *
     * @param fieldNames A list of field names.
     */
    function n() {
        for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
        return e.call(this, new (Gs.bind.apply(Gs, __spreadArrays([ void 0 ], t)))) || this;
    }
    return __extends(n, e), n.documentId = function() {
        /**
         * Internal Note: The backend doesn't technically support querying by
         * document ID. Instead it queries by the entire document name (full path
         * included), but in the cases we currently support documentId(), the net
         * effect is the same.
         */
        return new n(X$1.et().J());
    }, n.prototype.isEqual = function(t) {
        return t instanceof vs && (t = t.o_), t instanceof Gs && this.o_.G_.isEqual(t.G_);
    }, n;
}(vs), Dc$1 = /** @class */ function(e) {
    function n() {
        return null !== e && e.apply(this, arguments) || this;
    }
    return __extends(n, e), n.serverTimestamp = function() {
        var t = new Ds("serverTimestamp");
        return t.c_ = "FieldValue.serverTimestamp", new n(t);
    }, n.delete = function() {
        var t = new Ns("deleteField");
        return t.c_ = "FieldValue.delete", new n(t);
    }, n.arrayUnion = function() {
        for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
        var r = 
        /**
 * Returns a special value that can be used with {@link setDoc()} or {@link
 * updateDoc()} that tells the server to union the given elements with any array
 * value that already exists on the server. Each specified element that doesn't
 * already exist in the array will be added to the end. If the field being
 * modified is not already an array it will be overwritten with an array
 * containing exactly the specified elements.
 *
 * @param elements The elements to union into the array.
 * @return The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`.
 */
        function() {
            for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
            // NOTE: We don't actually parse the data until it's used in set() or
            // update() since we'd need the Firestore instance to do this.
                        return new xs("arrayUnion", t);
        }.apply(void 0, t);
        return r.c_ = "FieldValue.arrayUnion", new n(r);
    }, n.arrayRemove = function() {
        for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
        var r = function() {
            for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
            // NOTE: We don't actually parse the data until it's used in set() or
            // update() since we'd need the Firestore instance to do this.
                        return new ks("arrayRemove", t);
        }.apply(void 0, t);
        return r.c_ = "FieldValue.arrayRemove", new n(r);
    }, n.increment = function(t) {
        var e = function(t) {
            return new Os("increment", t);
        }(t);
        return e.c_ = "FieldValue.increment", new n(e);
    }, n.prototype.isEqual = function(t) {
        return this.o_.isEqual(t.o_);
    }, n;
}(vs), xc = {
    Firestore: ac$1,
    GeoPoint: Ss,
    Timestamp: Q$1,
    Blob: Ms,
    Transaction: fc$1,
    WriteBatch: lc$1,
    DocumentReference: pc$1,
    DocumentSnapshot: gc$1,
    Query: bc$1,
    QueryDocumentSnapshot: wc$1,
    QuerySnapshot: Ic$1,
    CollectionReference: Ec$1,
    FieldPath: Ac$1,
    FieldValue: Dc$1,
    setLogLevel: function(t) {
        var e;
        e = t, A$1.setLogLevel(e);
    },
    CACHE_SIZE_UNLIMITED: -1
};

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Configures Firestore as part of the Firebase SDK by calling registerService.
 *
 * @param firebase The FirebaseNamespace to register Firestore with
 * @param firestoreFactory A factory function that returns a new Firestore
 *    instance.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Registers the main Firestore build with the components framework.
 * Persistence can be enabled via `firebase.firestore().enablePersistence()`.
 */
function kc$1(t) {
    !function(t, e) {
        t.INTERNAL.registerComponent(new Component("firestore", (function(t) {
            return function(t, e) {
                return new ac$1(t, new Ks(t, e), new sc$1);
            }(t.getProvider("app").getImmediate(), t.getProvider("auth-internal"));
        }), "PUBLIC" /* PUBLIC */).setServiceProps(Object.assign({}, xc)));
    }(t), t.registerVersion("@firebase/firestore", "2.0.4");
}

kc$1(firebase$1);

const firebaseConfig = {
    apiKey: "AIzaSyC_5bt_r7Eo4m0rcVpwg1_8XEKVzVzqqtA",
    authDomain: "memoja-1d38e.firebaseapp.com",
    databaseURL: "https://memoja-1d38e.firebaseio.com",
    projectId: "memoja-1d38e",
    storageBucket: "memoja-1d38e.appspot.com",
    messagingSenderId: "555990287598",
    appId: "1:555990287598:web:b705c0cba72468c7ae9fff",
    measurementId: "G-TLKS50S6EL"
};
firebase$1.initializeApp(firebaseConfig);
const auth = firebase$1.auth();
const db$1 = firebase$1.firestore();

class State {
    constructor() {
        this.query = '';
        this.setQuery = (query) => this.query = query;
        this.setPage = page => this.page = page;
        this.setWord = word => this.word = word;
        this.filter = 'start';
        this.setFilter = filter => this.filter = filter;
        this.setHanjaToFilterOn = hanja => this.hanjaToFilterOn = hanja;
        this.setLang = lang => this.lang = lang;
        this.mode = 'lightmode';
        this.setMode = mode => this.mode = mode;
        this.setUser = (user) => this.user = user;
        this.killUser = () => this.user = undefined;
        this.favourites = new Set();
        this.setFavourite = id => {
            let favouritesRef = db$1.collection('favourites').doc(auth.currentUser.uid);
            if (this.favourites.has(id)) {
                this.unsetFavourite(id);
                favouritesRef.update({
                    wordID: firebase$1.firestore.FieldValue.arrayRemove(id)
                });
            }
            else {
                this.favourites.add(id);
                favouritesRef.set({ wordID: firebase$1.firestore.FieldValue.arrayUnion(id) }, { merge: true });
            }
        };
        this.unsetFavourite = id => this.favourites.delete(id);
        this.history = new Set();
        this.setHistory = word => {
            let historyRef = db$1.collection('history').doc(auth.currentUser.uid);
            this.history.add(word);
            historyRef.set({ words: firebase$1.firestore.FieldValue.arrayUnion(word) }, { merge: true });
        };
        this.unsetHistory = word => {
            let historyRef = db$1.collection('history').doc(auth.currentUser.uid);
            historyRef.update({
                words: firebase$1.firestore.FieldValue.arrayRemove(word)
            });
            this.history.delete(word);
        };
    }
    get queryShape() {
        return checkQueryShape(this.query);
    }
    populateFavourites() {
        return __awaiter(this, void 0, void 0, function* () {
            let favouritesRef = db$1.collection('favourites').doc(auth.currentUser.uid);
            const doc = yield favouritesRef.get();
            this.favourites = doc.exists ? new Set(doc.data().wordID) : new Set([]);
        });
    }
    populateHistory() {
        return __awaiter(this, void 0, void 0, function* () {
            let historyRef = db$1.collection('history').doc(auth.currentUser.uid);
            const doc = yield historyRef.get();
            this.history = doc.exists ? new Set(doc.data().words) : new Set([]);
        });
    }
}
__decorate([
    observable
], State.prototype, "query", void 0);
__decorate([
    action
], State.prototype, "setQuery", void 0);
__decorate([
    computed
], State.prototype, "queryShape", null);
__decorate([
    observable
], State.prototype, "page", void 0);
__decorate([
    action
], State.prototype, "setPage", void 0);
__decorate([
    observable
], State.prototype, "word", void 0);
__decorate([
    action
], State.prototype, "setWord", void 0);
__decorate([
    observable
], State.prototype, "filter", void 0);
__decorate([
    action
], State.prototype, "setFilter", void 0);
__decorate([
    observable
], State.prototype, "hanjaToFilterOn", void 0);
__decorate([
    action
], State.prototype, "setHanjaToFilterOn", void 0);
__decorate([
    observable
], State.prototype, "lang", void 0);
__decorate([
    action
], State.prototype, "setLang", void 0);
__decorate([
    observable
], State.prototype, "mode", void 0);
__decorate([
    action
], State.prototype, "setMode", void 0);
__decorate([
    observable
], State.prototype, "user", void 0);
__decorate([
    action
], State.prototype, "setUser", void 0);
__decorate([
    action
], State.prototype, "killUser", void 0);
__decorate([
    observable
], State.prototype, "favourites", void 0);
__decorate([
    action
], State.prototype, "populateFavourites", null);
__decorate([
    action
], State.prototype, "setFavourite", void 0);
__decorate([
    action
], State.prototype, "unsetFavourite", void 0);
__decorate([
    observable
], State.prototype, "history", void 0);
__decorate([
    action
], State.prototype, "populateHistory", null);
__decorate([
    action
], State.prototype, "setHistory", void 0);
__decorate([
    action
], State.prototype, "unsetHistory", void 0);
const state = new State();

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * True if the custom elements polyfill is in use.
 */
const isCEPolyfill = typeof window !== 'undefined' &&
    window.customElements != null &&
    window.customElements.polyfillWrapFlushCallback !==
        undefined;
/**
 * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),
 * into another container (could be the same container), before `before`. If
 * `before` is null, it appends the nodes to the container.
 */
const reparentNodes = (container, start, end = null, before = null) => {
    while (start !== end) {
        const n = start.nextSibling;
        container.insertBefore(start, before);
        start = n;
    }
};
/**
 * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from
 * `container`.
 */
const removeNodes = (container, start, end = null) => {
    while (start !== end) {
        const n = start.nextSibling;
        container.removeChild(start);
        start = n;
    }
};

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * An expression marker with embedded unique key to avoid collision with
 * possible text in templates.
 */
const marker = `{{lit-${String(Math.random()).slice(2)}}}`;
/**
 * An expression marker used text-positions, multi-binding attributes, and
 * attributes with markup-like text values.
 */
const nodeMarker = `<!--${marker}-->`;
const markerRegex = new RegExp(`${marker}|${nodeMarker}`);
/**
 * Suffix appended to all bound attribute names.
 */
const boundAttributeSuffix = '$lit$';
/**
 * An updatable Template that tracks the location of dynamic parts.
 */
class Template {
    constructor(result, element) {
        this.parts = [];
        this.element = element;
        const nodesToRemove = [];
        const stack = [];
        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null
        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);
        // Keeps track of the last index associated with a part. We try to delete
        // unnecessary nodes, but we never want to associate two different parts
        // to the same index. They must have a constant node between.
        let lastPartIndex = 0;
        let index = -1;
        let partIndex = 0;
        const { strings, values: { length } } = result;
        while (partIndex < length) {
            const node = walker.nextNode();
            if (node === null) {
                // We've exhausted the content inside a nested template element.
                // Because we still have parts (the outer for-loop), we know:
                // - There is a template in the stack
                // - The walker will find a nextNode outside the template
                walker.currentNode = stack.pop();
                continue;
            }
            index++;
            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {
                if (node.hasAttributes()) {
                    const attributes = node.attributes;
                    const { length } = attributes;
                    // Per
                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,
                    // attributes are not guaranteed to be returned in document order.
                    // In particular, Edge/IE can return them out of order, so we cannot
                    // assume a correspondence between part index and attribute index.
                    let count = 0;
                    for (let i = 0; i < length; i++) {
                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {
                            count++;
                        }
                    }
                    while (count-- > 0) {
                        // Get the template literal section leading up to the first
                        // expression in this attribute
                        const stringForPart = strings[partIndex];
                        // Find the attribute name
                        const name = lastAttributeNameRegex.exec(stringForPart)[2];
                        // Find the corresponding attribute
                        // All bound attributes have had a suffix added in
                        // TemplateResult#getHTML to opt out of special attribute
                        // handling. To look up the attribute value we also need to add
                        // the suffix.
                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;
                        const attributeValue = node.getAttribute(attributeLookupName);
                        node.removeAttribute(attributeLookupName);
                        const statics = attributeValue.split(markerRegex);
                        this.parts.push({ type: 'attribute', index, name, strings: statics });
                        partIndex += statics.length - 1;
                    }
                }
                if (node.tagName === 'TEMPLATE') {
                    stack.push(node);
                    walker.currentNode = node.content;
                }
            }
            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {
                const data = node.data;
                if (data.indexOf(marker) >= 0) {
                    const parent = node.parentNode;
                    const strings = data.split(markerRegex);
                    const lastIndex = strings.length - 1;
                    // Generate a new text node for each literal section
                    // These nodes are also used as the markers for node parts
                    for (let i = 0; i < lastIndex; i++) {
                        let insert;
                        let s = strings[i];
                        if (s === '') {
                            insert = createMarker();
                        }
                        else {
                            const match = lastAttributeNameRegex.exec(s);
                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {
                                s = s.slice(0, match.index) + match[1] +
                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];
                            }
                            insert = document.createTextNode(s);
                        }
                        parent.insertBefore(insert, node);
                        this.parts.push({ type: 'node', index: ++index });
                    }
                    // If there's no text, we must insert a comment to mark our place.
                    // Else, we can trust it will stick around after cloning.
                    if (strings[lastIndex] === '') {
                        parent.insertBefore(createMarker(), node);
                        nodesToRemove.push(node);
                    }
                    else {
                        node.data = strings[lastIndex];
                    }
                    // We have a part for each match found
                    partIndex += lastIndex;
                }
            }
            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {
                if (node.data === marker) {
                    const parent = node.parentNode;
                    // Add a new marker node to be the startNode of the Part if any of
                    // the following are true:
                    //  * We don't have a previousSibling
                    //  * The previousSibling is already the start of a previous part
                    if (node.previousSibling === null || index === lastPartIndex) {
                        index++;
                        parent.insertBefore(createMarker(), node);
                    }
                    lastPartIndex = index;
                    this.parts.push({ type: 'node', index });
                    // If we don't have a nextSibling, keep this node so we have an end.
                    // Else, we can remove it to save future costs.
                    if (node.nextSibling === null) {
                        node.data = '';
                    }
                    else {
                        nodesToRemove.push(node);
                        index--;
                    }
                    partIndex++;
                }
                else {
                    let i = -1;
                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {
                        // Comment node has a binding marker inside, make an inactive part
                        // The binding won't work, but subsequent bindings will
                        // TODO (justinfagnani): consider whether it's even worth it to
                        // make bindings in comments work
                        this.parts.push({ type: 'node', index: -1 });
                        partIndex++;
                    }
                }
            }
        }
        // Remove text binding nodes after the walk to not disturb the TreeWalker
        for (const n of nodesToRemove) {
            n.parentNode.removeChild(n);
        }
    }
}
const endsWith = (str, suffix) => {
    const index = str.length - suffix.length;
    return index >= 0 && str.slice(index) === suffix;
};
const isTemplatePartActive = (part) => part.index !== -1;
// Allows `document.createComment('')` to be renamed for a
// small manual size-savings.
const createMarker = () => document.createComment('');
/**
 * This regex extracts the attribute name preceding an attribute-position
 * expression. It does this by matching the syntax allowed for attributes
 * against the string literal directly preceding the expression, assuming that
 * the expression is in an attribute-value position.
 *
 * See attributes in the HTML spec:
 * https://www.w3.org/TR/html5/syntax.html#elements-attributes
 *
 * " \x09\x0a\x0c\x0d" are HTML space characters:
 * https://www.w3.org/TR/html5/infrastructure.html#space-characters
 *
 * "\0-\x1F\x7F-\x9F" are Unicode control characters, which includes every
 * space character except " ".
 *
 * So an attribute is:
 *  * The name: any character except a control character, space character, ('),
 *    ("), ">", "=", or "/"
 *  * Followed by zero or more space characters
 *  * Followed by "="
 *  * Followed by zero or more space characters
 *  * Followed by:
 *    * Any character except space, ('), ("), "<", ">", "=", (`), or
 *    * (") then any non-("), or
 *    * (') then any non-(')
 */
const lastAttributeNameRegex = 
// eslint-disable-next-line no-control-regex
/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;
/**
 * Removes the list of nodes from a Template safely. In addition to removing
 * nodes from the Template, the Template part indices are updated to match
 * the mutated Template DOM.
 *
 * As the template is walked the removal state is tracked and
 * part indices are adjusted as needed.
 *
 * div
 *   div#1 (remove) <-- start removing (removing node is div#1)
 *     div
 *       div#2 (remove)  <-- continue removing (removing node is still div#1)
 *         div
 * div <-- stop removing since previous sibling is the removing node (div#1,
 * removed 4 nodes)
 */
function removeNodesFromTemplate(template, nodesToRemove) {
    const { element: { content }, parts } = template;
    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);
    let partIndex = nextActiveIndexInTemplateParts(parts);
    let part = parts[partIndex];
    let nodeIndex = -1;
    let removeCount = 0;
    const nodesToRemoveInTemplate = [];
    let currentRemovingNode = null;
    while (walker.nextNode()) {
        nodeIndex++;
        const node = walker.currentNode;
        // End removal if stepped past the removing node
        if (node.previousSibling === currentRemovingNode) {
            currentRemovingNode = null;
        }
        // A node to remove was found in the template
        if (nodesToRemove.has(node)) {
            nodesToRemoveInTemplate.push(node);
            // Track node we're removing
            if (currentRemovingNode === null) {
                currentRemovingNode = node;
            }
        }
        // When removing, increment count by which to adjust subsequent part indices
        if (currentRemovingNode !== null) {
            removeCount++;
        }
        while (part !== undefined && part.index === nodeIndex) {
            // If part is in a removed node deactivate it by setting index to -1 or
            // adjust the index as needed.
            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;
            // go to the next active part.
            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
            part = parts[partIndex];
        }
    }
    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));
}
const countNodes = (node) => {
    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;
    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);
    while (walker.nextNode()) {
        count++;
    }
    return count;
};
const nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {
    for (let i = startIndex + 1; i < parts.length; i++) {
        const part = parts[i];
        if (isTemplatePartActive(part)) {
            return i;
        }
    }
    return -1;
};
/**
 * Inserts the given node into the Template, optionally before the given
 * refNode. In addition to inserting the node into the Template, the Template
 * part indices are updated to match the mutated Template DOM.
 */
function insertNodeIntoTemplate(template, node, refNode = null) {
    const { element: { content }, parts } = template;
    // If there's no refNode, then put node at end of template.
    // No part indices need to be shifted in this case.
    if (refNode === null || refNode === undefined) {
        content.appendChild(node);
        return;
    }
    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);
    let partIndex = nextActiveIndexInTemplateParts(parts);
    let insertCount = 0;
    let walkerIndex = -1;
    while (walker.nextNode()) {
        walkerIndex++;
        const walkerNode = walker.currentNode;
        if (walkerNode === refNode) {
            insertCount = countNodes(node);
            refNode.parentNode.insertBefore(node, refNode);
        }
        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {
            // If we've inserted the node, simply adjust all subsequent parts
            if (insertCount > 0) {
                while (partIndex !== -1) {
                    parts[partIndex].index += insertCount;
                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
                }
                return;
            }
            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
        }
    }
}

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const directives = new WeakMap();
/**
 * Brands a function as a directive factory function so that lit-html will call
 * the function during template rendering, rather than passing as a value.
 *
 * A _directive_ is a function that takes a Part as an argument. It has the
 * signature: `(part: Part) => void`.
 *
 * A directive _factory_ is a function that takes arguments for data and
 * configuration and returns a directive. Users of directive usually refer to
 * the directive factory as the directive. For example, "The repeat directive".
 *
 * Usually a template author will invoke a directive factory in their template
 * with relevant arguments, which will then return a directive function.
 *
 * Here's an example of using the `repeat()` directive factory that takes an
 * array and a function to render an item:
 *
 * ```js
 * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`
 * ```
 *
 * When `repeat` is invoked, it returns a directive function that closes over
 * `items` and the template function. When the outer template is rendered, the
 * return directive function is called with the Part for the expression.
 * `repeat` then performs it's custom logic to render multiple items.
 *
 * @param f The directive factory function. Must be a function that returns a
 * function of the signature `(part: Part) => void`. The returned function will
 * be called with the part object.
 *
 * @example
 *
 * import {directive, html} from 'lit-html';
 *
 * const immutable = directive((v) => (part) => {
 *   if (part.value !== v) {
 *     part.setValue(v)
 *   }
 * });
 */
const directive = (f) => ((...args) => {
    const d = f(...args);
    directives.set(d, true);
    return d;
});
const isDirective = (o) => {
    return typeof o === 'function' && directives.has(o);
};

/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * A sentinel value that signals that a value was handled by a directive and
 * should not be written to the DOM.
 */
const noChange = {};
/**
 * A sentinel value that signals a NodePart to fully clear its content.
 */
const nothing = {};

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * An instance of a `Template` that can be attached to the DOM and updated
 * with new values.
 */
class TemplateInstance {
    constructor(template, processor, options) {
        this.__parts = [];
        this.template = template;
        this.processor = processor;
        this.options = options;
    }
    update(values) {
        let i = 0;
        for (const part of this.__parts) {
            if (part !== undefined) {
                part.setValue(values[i]);
            }
            i++;
        }
        for (const part of this.__parts) {
            if (part !== undefined) {
                part.commit();
            }
        }
    }
    _clone() {
        // There are a number of steps in the lifecycle of a template instance's
        // DOM fragment:
        //  1. Clone - create the instance fragment
        //  2. Adopt - adopt into the main document
        //  3. Process - find part markers and create parts
        //  4. Upgrade - upgrade custom elements
        //  5. Update - set node, attribute, property, etc., values
        //  6. Connect - connect to the document. Optional and outside of this
        //     method.
        //
        // We have a few constraints on the ordering of these steps:
        //  * We need to upgrade before updating, so that property values will pass
        //    through any property setters.
        //  * We would like to process before upgrading so that we're sure that the
        //    cloned fragment is inert and not disturbed by self-modifying DOM.
        //  * We want custom elements to upgrade even in disconnected fragments.
        //
        // Given these constraints, with full custom elements support we would
        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect
        //
        // But Safari does not implement CustomElementRegistry#upgrade, so we
        // can not implement that order and still have upgrade-before-update and
        // upgrade disconnected fragments. So we instead sacrifice the
        // process-before-upgrade constraint, since in Custom Elements v1 elements
        // must not modify their light DOM in the constructor. We still have issues
        // when co-existing with CEv0 elements like Polymer 1, and with polyfills
        // that don't strictly adhere to the no-modification rule because shadow
        // DOM, which may be created in the constructor, is emulated by being placed
        // in the light DOM.
        //
        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,
        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade
        // in one step.
        //
        // The Custom Elements v1 polyfill supports upgrade(), so the order when
        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,
        // Connect.
        const fragment = isCEPolyfill ?
            this.template.element.content.cloneNode(true) :
            document.importNode(this.template.element.content, true);
        const stack = [];
        const parts = this.template.parts;
        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null
        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);
        let partIndex = 0;
        let nodeIndex = 0;
        let part;
        let node = walker.nextNode();
        // Loop through all the nodes and parts of a template
        while (partIndex < parts.length) {
            part = parts[partIndex];
            if (!isTemplatePartActive(part)) {
                this.__parts.push(undefined);
                partIndex++;
                continue;
            }
            // Progress the tree walker until we find our next part's node.
            // Note that multiple parts may share the same node (attribute parts
            // on a single element), so this loop may not run at all.
            while (nodeIndex < part.index) {
                nodeIndex++;
                if (node.nodeName === 'TEMPLATE') {
                    stack.push(node);
                    walker.currentNode = node.content;
                }
                if ((node = walker.nextNode()) === null) {
                    // We've exhausted the content inside a nested template element.
                    // Because we still have parts (the outer for-loop), we know:
                    // - There is a template in the stack
                    // - The walker will find a nextNode outside the template
                    walker.currentNode = stack.pop();
                    node = walker.nextNode();
                }
            }
            // We've arrived at our part's node.
            if (part.type === 'node') {
                const part = this.processor.handleTextExpression(this.options);
                part.insertAfterNode(node.previousSibling);
                this.__parts.push(part);
            }
            else {
                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));
            }
            partIndex++;
        }
        if (isCEPolyfill) {
            document.adoptNode(fragment);
            customElements.upgrade(fragment);
        }
        return fragment;
    }
}

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * Our TrustedTypePolicy for HTML which is declared using the html template
 * tag function.
 *
 * That HTML is a developer-authored constant, and is parsed with innerHTML
 * before any untrusted expressions have been mixed in. Therefor it is
 * considered safe by construction.
 */
const policy = window.trustedTypes &&
    trustedTypes.createPolicy('lit-html', { createHTML: (s) => s });
const commentMarker = ` ${marker} `;
/**
 * The return type of `html`, which holds a Template and the values from
 * interpolated expressions.
 */
class TemplateResult {
    constructor(strings, values, type, processor) {
        this.strings = strings;
        this.values = values;
        this.type = type;
        this.processor = processor;
    }
    /**
     * Returns a string of HTML used to create a `<template>` element.
     */
    getHTML() {
        const l = this.strings.length - 1;
        let html = '';
        let isCommentBinding = false;
        for (let i = 0; i < l; i++) {
            const s = this.strings[i];
            // For each binding we want to determine the kind of marker to insert
            // into the template source before it's parsed by the browser's HTML
            // parser. The marker type is based on whether the expression is in an
            // attribute, text, or comment position.
            //   * For node-position bindings we insert a comment with the marker
            //     sentinel as its text content, like <!--{{lit-guid}}-->.
            //   * For attribute bindings we insert just the marker sentinel for the
            //     first binding, so that we support unquoted attribute bindings.
            //     Subsequent bindings can use a comment marker because multi-binding
            //     attributes must be quoted.
            //   * For comment bindings we insert just the marker sentinel so we don't
            //     close the comment.
            //
            // The following code scans the template source, but is *not* an HTML
            // parser. We don't need to track the tree structure of the HTML, only
            // whether a binding is inside a comment, and if not, if it appears to be
            // the first binding in an attribute.
            const commentOpen = s.lastIndexOf('<!--');
            // We're in comment position if we have a comment open with no following
            // comment close. Because <-- can appear in an attribute value there can
            // be false positives.
            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&
                s.indexOf('-->', commentOpen + 1) === -1;
            // Check to see if we have an attribute-like sequence preceding the
            // expression. This can match "name=value" like structures in text,
            // comments, and attribute values, so there can be false-positives.
            const attributeMatch = lastAttributeNameRegex.exec(s);
            if (attributeMatch === null) {
                // We're only in this branch if we don't have a attribute-like
                // preceding sequence. For comments, this guards against unusual
                // attribute values like <div foo="<!--${'bar'}">. Cases like
                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch
                // below.
                html += s + (isCommentBinding ? commentMarker : nodeMarker);
            }
            else {
                // For attributes we use just a marker sentinel, and also append a
                // $lit$ suffix to the name to opt-out of attribute-specific parsing
                // that IE and Edge do for style and certain SVG attributes.
                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +
                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +
                    marker;
            }
        }
        html += this.strings[l];
        return html;
    }
    getTemplateElement() {
        const template = document.createElement('template');
        let value = this.getHTML();
        if (policy !== undefined) {
            // this is secure because `this.strings` is a TemplateStringsArray.
            // TODO: validate this when
            // https://github.com/tc39/proposal-array-is-template-object is
            // implemented.
            value = policy.createHTML(value);
        }
        template.innerHTML = value;
        return template;
    }
}

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const isPrimitive = (value) => {
    return (value === null ||
        !(typeof value === 'object' || typeof value === 'function'));
};
const isIterable = (value) => {
    return Array.isArray(value) ||
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        !!(value && value[Symbol.iterator]);
};
/**
 * Writes attribute values to the DOM for a group of AttributeParts bound to a
 * single attribute. The value is only set once even if there are multiple parts
 * for an attribute.
 */
class AttributeCommitter {
    constructor(element, name, strings) {
        this.dirty = true;
        this.element = element;
        this.name = name;
        this.strings = strings;
        this.parts = [];
        for (let i = 0; i < strings.length - 1; i++) {
            this.parts[i] = this._createPart();
        }
    }
    /**
     * Creates a single part. Override this to create a differnt type of part.
     */
    _createPart() {
        return new AttributePart(this);
    }
    _getValue() {
        const strings = this.strings;
        const l = strings.length - 1;
        const parts = this.parts;
        // If we're assigning an attribute via syntax like:
        //    attr="${foo}"  or  attr=${foo}
        // but not
        //    attr="${foo} ${bar}" or attr="${foo} baz"
        // then we don't want to coerce the attribute value into one long
        // string. Instead we want to just return the value itself directly,
        // so that sanitizeDOMValue can get the actual value rather than
        // String(value)
        // The exception is if v is an array, in which case we do want to smash
        // it together into a string without calling String() on the array.
        //
        // This also allows trusted values (when using TrustedTypes) being
        // assigned to DOM sinks without being stringified in the process.
        if (l === 1 && strings[0] === '' && strings[1] === '') {
            const v = parts[0].value;
            if (typeof v === 'symbol') {
                return String(v);
            }
            if (typeof v === 'string' || !isIterable(v)) {
                return v;
            }
        }
        let text = '';
        for (let i = 0; i < l; i++) {
            text += strings[i];
            const part = parts[i];
            if (part !== undefined) {
                const v = part.value;
                if (isPrimitive(v) || !isIterable(v)) {
                    text += typeof v === 'string' ? v : String(v);
                }
                else {
                    for (const t of v) {
                        text += typeof t === 'string' ? t : String(t);
                    }
                }
            }
        }
        text += strings[l];
        return text;
    }
    commit() {
        if (this.dirty) {
            this.dirty = false;
            this.element.setAttribute(this.name, this._getValue());
        }
    }
}
/**
 * A Part that controls all or part of an attribute value.
 */
class AttributePart {
    constructor(committer) {
        this.value = undefined;
        this.committer = committer;
    }
    setValue(value) {
        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {
            this.value = value;
            // If the value is a not a directive, dirty the committer so that it'll
            // call setAttribute. If the value is a directive, it'll dirty the
            // committer if it calls setValue().
            if (!isDirective(value)) {
                this.committer.dirty = true;
            }
        }
    }
    commit() {
        while (isDirective(this.value)) {
            const directive = this.value;
            this.value = noChange;
            directive(this);
        }
        if (this.value === noChange) {
            return;
        }
        this.committer.commit();
    }
}
/**
 * A Part that controls a location within a Node tree. Like a Range, NodePart
 * has start and end locations and can set and update the Nodes between those
 * locations.
 *
 * NodeParts support several value types: primitives, Nodes, TemplateResults,
 * as well as arrays and iterables of those types.
 */
class NodePart {
    constructor(options) {
        this.value = undefined;
        this.__pendingValue = undefined;
        this.options = options;
    }
    /**
     * Appends this part into a container.
     *
     * This part must be empty, as its contents are not automatically moved.
     */
    appendInto(container) {
        this.startNode = container.appendChild(createMarker());
        this.endNode = container.appendChild(createMarker());
    }
    /**
     * Inserts this part after the `ref` node (between `ref` and `ref`'s next
     * sibling). Both `ref` and its next sibling must be static, unchanging nodes
     * such as those that appear in a literal section of a template.
     *
     * This part must be empty, as its contents are not automatically moved.
     */
    insertAfterNode(ref) {
        this.startNode = ref;
        this.endNode = ref.nextSibling;
    }
    /**
     * Appends this part into a parent part.
     *
     * This part must be empty, as its contents are not automatically moved.
     */
    appendIntoPart(part) {
        part.__insert(this.startNode = createMarker());
        part.__insert(this.endNode = createMarker());
    }
    /**
     * Inserts this part after the `ref` part.
     *
     * This part must be empty, as its contents are not automatically moved.
     */
    insertAfterPart(ref) {
        ref.__insert(this.startNode = createMarker());
        this.endNode = ref.endNode;
        ref.endNode = this.startNode;
    }
    setValue(value) {
        this.__pendingValue = value;
    }
    commit() {
        if (this.startNode.parentNode === null) {
            return;
        }
        while (isDirective(this.__pendingValue)) {
            const directive = this.__pendingValue;
            this.__pendingValue = noChange;
            directive(this);
        }
        const value = this.__pendingValue;
        if (value === noChange) {
            return;
        }
        if (isPrimitive(value)) {
            if (value !== this.value) {
                this.__commitText(value);
            }
        }
        else if (value instanceof TemplateResult) {
            this.__commitTemplateResult(value);
        }
        else if (value instanceof Node) {
            this.__commitNode(value);
        }
        else if (isIterable(value)) {
            this.__commitIterable(value);
        }
        else if (value === nothing) {
            this.value = nothing;
            this.clear();
        }
        else {
            // Fallback, will render the string representation
            this.__commitText(value);
        }
    }
    __insert(node) {
        this.endNode.parentNode.insertBefore(node, this.endNode);
    }
    __commitNode(value) {
        if (this.value === value) {
            return;
        }
        this.clear();
        this.__insert(value);
        this.value = value;
    }
    __commitText(value) {
        const node = this.startNode.nextSibling;
        value = value == null ? '' : value;
        // If `value` isn't already a string, we explicitly convert it here in case
        // it can't be implicitly converted - i.e. it's a symbol.
        const valueAsString = typeof value === 'string' ? value : String(value);
        if (node === this.endNode.previousSibling &&
            node.nodeType === 3 /* Node.TEXT_NODE */) {
            // If we only have a single text node between the markers, we can just
            // set its value, rather than replacing it.
            // TODO(justinfagnani): Can we just check if this.value is primitive?
            node.data = valueAsString;
        }
        else {
            this.__commitNode(document.createTextNode(valueAsString));
        }
        this.value = value;
    }
    __commitTemplateResult(value) {
        const template = this.options.templateFactory(value);
        if (this.value instanceof TemplateInstance &&
            this.value.template === template) {
            this.value.update(value.values);
        }
        else {
            // Make sure we propagate the template processor from the TemplateResult
            // so that we use its syntax extension, etc. The template factory comes
            // from the render function options so that it can control template
            // caching and preprocessing.
            const instance = new TemplateInstance(template, value.processor, this.options);
            const fragment = instance._clone();
            instance.update(value.values);
            this.__commitNode(fragment);
            this.value = instance;
        }
    }
    __commitIterable(value) {
        // For an Iterable, we create a new InstancePart per item, then set its
        // value to the item. This is a little bit of overhead for every item in
        // an Iterable, but it lets us recurse easily and efficiently update Arrays
        // of TemplateResults that will be commonly returned from expressions like:
        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.
        // If _value is an array, then the previous render was of an
        // iterable and _value will contain the NodeParts from the previous
        // render. If _value is not an array, clear this part and make a new
        // array for NodeParts.
        if (!Array.isArray(this.value)) {
            this.value = [];
            this.clear();
        }
        // Lets us keep track of how many items we stamped so we can clear leftover
        // items from a previous render
        const itemParts = this.value;
        let partIndex = 0;
        let itemPart;
        for (const item of value) {
            // Try to reuse an existing part
            itemPart = itemParts[partIndex];
            // If no existing part, create a new one
            if (itemPart === undefined) {
                itemPart = new NodePart(this.options);
                itemParts.push(itemPart);
                if (partIndex === 0) {
                    itemPart.appendIntoPart(this);
                }
                else {
                    itemPart.insertAfterPart(itemParts[partIndex - 1]);
                }
            }
            itemPart.setValue(item);
            itemPart.commit();
            partIndex++;
        }
        if (partIndex < itemParts.length) {
            // Truncate the parts array so _value reflects the current state
            itemParts.length = partIndex;
            this.clear(itemPart && itemPart.endNode);
        }
    }
    clear(startNode = this.startNode) {
        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);
    }
}
/**
 * Implements a boolean attribute, roughly as defined in the HTML
 * specification.
 *
 * If the value is truthy, then the attribute is present with a value of
 * ''. If the value is falsey, the attribute is removed.
 */
class BooleanAttributePart {
    constructor(element, name, strings) {
        this.value = undefined;
        this.__pendingValue = undefined;
        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {
            throw new Error('Boolean attributes can only contain a single expression');
        }
        this.element = element;
        this.name = name;
        this.strings = strings;
    }
    setValue(value) {
        this.__pendingValue = value;
    }
    commit() {
        while (isDirective(this.__pendingValue)) {
            const directive = this.__pendingValue;
            this.__pendingValue = noChange;
            directive(this);
        }
        if (this.__pendingValue === noChange) {
            return;
        }
        const value = !!this.__pendingValue;
        if (this.value !== value) {
            if (value) {
                this.element.setAttribute(this.name, '');
            }
            else {
                this.element.removeAttribute(this.name);
            }
            this.value = value;
        }
        this.__pendingValue = noChange;
    }
}
/**
 * Sets attribute values for PropertyParts, so that the value is only set once
 * even if there are multiple parts for a property.
 *
 * If an expression controls the whole property value, then the value is simply
 * assigned to the property under control. If there are string literals or
 * multiple expressions, then the strings are expressions are interpolated into
 * a string first.
 */
class PropertyCommitter extends AttributeCommitter {
    constructor(element, name, strings) {
        super(element, name, strings);
        this.single =
            (strings.length === 2 && strings[0] === '' && strings[1] === '');
    }
    _createPart() {
        return new PropertyPart(this);
    }
    _getValue() {
        if (this.single) {
            return this.parts[0].value;
        }
        return super._getValue();
    }
    commit() {
        if (this.dirty) {
            this.dirty = false;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.element[this.name] = this._getValue();
        }
    }
}
class PropertyPart extends AttributePart {
}
// Detect event listener options support. If the `capture` property is read
// from the options object, then options are supported. If not, then the third
// argument to add/removeEventListener is interpreted as the boolean capture
// value so we should only pass the `capture` property.
let eventOptionsSupported = false;
// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch
// blocks right into the body of a module
(() => {
    try {
        const options = {
            get capture() {
                eventOptionsSupported = true;
                return false;
            }
        };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        window.addEventListener('test', options, options);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        window.removeEventListener('test', options, options);
    }
    catch (_e) {
        // event options not supported
    }
})();
class EventPart {
    constructor(element, eventName, eventContext) {
        this.value = undefined;
        this.__pendingValue = undefined;
        this.element = element;
        this.eventName = eventName;
        this.eventContext = eventContext;
        this.__boundHandleEvent = (e) => this.handleEvent(e);
    }
    setValue(value) {
        this.__pendingValue = value;
    }
    commit() {
        while (isDirective(this.__pendingValue)) {
            const directive = this.__pendingValue;
            this.__pendingValue = noChange;
            directive(this);
        }
        if (this.__pendingValue === noChange) {
            return;
        }
        const newListener = this.__pendingValue;
        const oldListener = this.value;
        const shouldRemoveListener = newListener == null ||
            oldListener != null &&
                (newListener.capture !== oldListener.capture ||
                    newListener.once !== oldListener.once ||
                    newListener.passive !== oldListener.passive);
        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);
        if (shouldRemoveListener) {
            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);
        }
        if (shouldAddListener) {
            this.__options = getOptions(newListener);
            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);
        }
        this.value = newListener;
        this.__pendingValue = noChange;
    }
    handleEvent(event) {
        if (typeof this.value === 'function') {
            this.value.call(this.eventContext || this.element, event);
        }
        else {
            this.value.handleEvent(event);
        }
    }
}
// We copy options because of the inconsistent behavior of browsers when reading
// the third argument of add/removeEventListener. IE11 doesn't support options
// at all. Chrome 41 only reads `capture` if the argument is an object.
const getOptions = (o) => o &&
    (eventOptionsSupported ?
        { capture: o.capture, passive: o.passive, once: o.once } :
        o.capture);

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * The default TemplateFactory which caches Templates keyed on
 * result.type and result.strings.
 */
function templateFactory(result) {
    let templateCache = templateCaches.get(result.type);
    if (templateCache === undefined) {
        templateCache = {
            stringsArray: new WeakMap(),
            keyString: new Map()
        };
        templateCaches.set(result.type, templateCache);
    }
    let template = templateCache.stringsArray.get(result.strings);
    if (template !== undefined) {
        return template;
    }
    // If the TemplateStringsArray is new, generate a key from the strings
    // This key is shared between all templates with identical content
    const key = result.strings.join(marker);
    // Check if we already have a Template for this key
    template = templateCache.keyString.get(key);
    if (template === undefined) {
        // If we have not seen this key before, create a new Template
        template = new Template(result, result.getTemplateElement());
        // Cache the Template for this key
        templateCache.keyString.set(key, template);
    }
    // Cache all future queries for this TemplateStringsArray
    templateCache.stringsArray.set(result.strings, template);
    return template;
}
const templateCaches = new Map();

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const parts = new WeakMap();
/**
 * Renders a template result or other value to a container.
 *
 * To update a container with new values, reevaluate the template literal and
 * call `render` with the new result.
 *
 * @param result Any value renderable by NodePart - typically a TemplateResult
 *     created by evaluating a template tag like `html` or `svg`.
 * @param container A DOM parent to render to. The entire contents are either
 *     replaced, or efficiently updated if the same result type was previous
 *     rendered there.
 * @param options RenderOptions for the entire render tree rendered to this
 *     container. Render options must *not* change between renders to the same
 *     container, as those changes will not effect previously rendered DOM.
 */
const render = (result, container, options) => {
    let part = parts.get(container);
    if (part === undefined) {
        removeNodes(container, container.firstChild);
        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));
        part.appendInto(container);
    }
    part.setValue(result);
    part.commit();
};

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * Creates Parts when a template is instantiated.
 */
class DefaultTemplateProcessor {
    /**
     * Create parts for an attribute-position binding, given the event, attribute
     * name, and string literals.
     *
     * @param element The element containing the binding
     * @param name  The attribute name
     * @param strings The string literals. There are always at least two strings,
     *   event for fully-controlled bindings with a single expression.
     */
    handleAttributeExpressions(element, name, strings, options) {
        const prefix = name[0];
        if (prefix === '.') {
            const committer = new PropertyCommitter(element, name.slice(1), strings);
            return committer.parts;
        }
        if (prefix === '@') {
            return [new EventPart(element, name.slice(1), options.eventContext)];
        }
        if (prefix === '?') {
            return [new BooleanAttributePart(element, name.slice(1), strings)];
        }
        const committer = new AttributeCommitter(element, name, strings);
        return committer.parts;
    }
    /**
     * Create parts for a text-position binding.
     * @param templateFactory
     */
    handleTextExpression(options) {
        return new NodePart(options);
    }
}
const defaultTemplateProcessor = new DefaultTemplateProcessor();

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
// IMPORTANT: do not change the property name or the assignment expression.
// This line will be used in regexes to search for lit-html usage.
// TODO(justinfagnani): inject version number at build time
if (typeof window !== 'undefined') {
    (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.3.0');
}
/**
 * Interprets a template literal as an HTML template that can efficiently
 * render to and update a container.
 */
const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
// Get a key to lookup in `templateCaches`.
const getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;
let compatibleShadyCSSVersion = true;
if (typeof window.ShadyCSS === 'undefined') {
    compatibleShadyCSSVersion = false;
}
else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {
    console.warn(`Incompatible ShadyCSS version detected. ` +
        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +
        `@webcomponents/shadycss@1.3.1.`);
    compatibleShadyCSSVersion = false;
}
/**
 * Template factory which scopes template DOM using ShadyCSS.
 * @param scopeName {string}
 */
const shadyTemplateFactory = (scopeName) => (result) => {
    const cacheKey = getTemplateCacheKey(result.type, scopeName);
    let templateCache = templateCaches.get(cacheKey);
    if (templateCache === undefined) {
        templateCache = {
            stringsArray: new WeakMap(),
            keyString: new Map()
        };
        templateCaches.set(cacheKey, templateCache);
    }
    let template = templateCache.stringsArray.get(result.strings);
    if (template !== undefined) {
        return template;
    }
    const key = result.strings.join(marker);
    template = templateCache.keyString.get(key);
    if (template === undefined) {
        const element = result.getTemplateElement();
        if (compatibleShadyCSSVersion) {
            window.ShadyCSS.prepareTemplateDom(element, scopeName);
        }
        template = new Template(result, element);
        templateCache.keyString.set(key, template);
    }
    templateCache.stringsArray.set(result.strings, template);
    return template;
};
const TEMPLATE_TYPES = ['html', 'svg'];
/**
 * Removes all style elements from Templates for the given scopeName.
 */
const removeStylesFromLitTemplates = (scopeName) => {
    TEMPLATE_TYPES.forEach((type) => {
        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));
        if (templates !== undefined) {
            templates.keyString.forEach((template) => {
                const { element: { content } } = template;
                // IE 11 doesn't support the iterable param Set constructor
                const styles = new Set();
                Array.from(content.querySelectorAll('style')).forEach((s) => {
                    styles.add(s);
                });
                removeNodesFromTemplate(template, styles);
            });
        }
    });
};
const shadyRenderSet = new Set();
/**
 * For the given scope name, ensures that ShadyCSS style scoping is performed.
 * This is done just once per scope name so the fragment and template cannot
 * be modified.
 * (1) extracts styles from the rendered fragment and hands them to ShadyCSS
 * to be scoped and appended to the document
 * (2) removes style elements from all lit-html Templates for this scope name.
 *
 * Note, <style> elements can only be placed into templates for the
 * initial rendering of the scope. If <style> elements are included in templates
 * dynamically rendered to the scope (after the first scope render), they will
 * not be scoped and the <style> will be left in the template and rendered
 * output.
 */
const prepareTemplateStyles = (scopeName, renderedDOM, template) => {
    shadyRenderSet.add(scopeName);
    // If `renderedDOM` is stamped from a Template, then we need to edit that
    // Template's underlying template element. Otherwise, we create one here
    // to give to ShadyCSS, which still requires one while scoping.
    const templateElement = !!template ? template.element : document.createElement('template');
    // Move styles out of rendered DOM and store.
    const styles = renderedDOM.querySelectorAll('style');
    const { length } = styles;
    // If there are no styles, skip unnecessary work
    if (length === 0) {
        // Ensure prepareTemplateStyles is called to support adding
        // styles via `prepareAdoptedCssText` since that requires that
        // `prepareTemplateStyles` is called.
        //
        // ShadyCSS will only update styles containing @apply in the template
        // given to `prepareTemplateStyles`. If no lit Template was given,
        // ShadyCSS will not be able to update uses of @apply in any relevant
        // template. However, this is not a problem because we only create the
        // template for the purpose of supporting `prepareAdoptedCssText`,
        // which doesn't support @apply at all.
        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);
        return;
    }
    const condensedStyle = document.createElement('style');
    // Collect styles into a single style. This helps us make sure ShadyCSS
    // manipulations will not prevent us from being able to fix up template
    // part indices.
    // NOTE: collecting styles is inefficient for browsers but ShadyCSS
    // currently does this anyway. When it does not, this should be changed.
    for (let i = 0; i < length; i++) {
        const style = styles[i];
        style.parentNode.removeChild(style);
        condensedStyle.textContent += style.textContent;
    }
    // Remove styles from nested templates in this scope.
    removeStylesFromLitTemplates(scopeName);
    // And then put the condensed style into the "root" template passed in as
    // `template`.
    const content = templateElement.content;
    if (!!template) {
        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);
    }
    else {
        content.insertBefore(condensedStyle, content.firstChild);
    }
    // Note, it's important that ShadyCSS gets the template that `lit-html`
    // will actually render so that it can update the style inside when
    // needed (e.g. @apply native Shadow DOM case).
    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);
    const style = content.querySelector('style');
    if (window.ShadyCSS.nativeShadow && style !== null) {
        // When in native Shadow DOM, ensure the style created by ShadyCSS is
        // included in initially rendered output (`renderedDOM`).
        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);
    }
    else if (!!template) {
        // When no style is left in the template, parts will be broken as a
        // result. To fix this, we put back the style node ShadyCSS removed
        // and then tell lit to remove that node from the template.
        // There can be no style in the template in 2 cases (1) when Shady DOM
        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM
        // is in use ShadyCSS removes the style if it contains no content.
        // NOTE, ShadyCSS creates its own style so we can safely add/remove
        // `condensedStyle` here.
        content.insertBefore(condensedStyle, content.firstChild);
        const removes = new Set();
        removes.add(condensedStyle);
        removeNodesFromTemplate(template, removes);
    }
};
/**
 * Extension to the standard `render` method which supports rendering
 * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)
 * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used
 * or when the webcomponentsjs
 * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.
 *
 * Adds a `scopeName` option which is used to scope element DOM and stylesheets
 * when native ShadowDOM is unavailable. The `scopeName` will be added to
 * the class attribute of all rendered DOM. In addition, any style elements will
 * be automatically re-written with this `scopeName` selector and moved out
 * of the rendered DOM and into the document `<head>`.
 *
 * It is common to use this render method in conjunction with a custom element
 * which renders a shadowRoot. When this is done, typically the element's
 * `localName` should be used as the `scopeName`.
 *
 * In addition to DOM scoping, ShadyCSS also supports a basic shim for css
 * custom properties (needed only on older browsers like IE11) and a shim for
 * a deprecated feature called `@apply` that supports applying a set of css
 * custom properties to a given location.
 *
 * Usage considerations:
 *
 * * Part values in `<style>` elements are only applied the first time a given
 * `scopeName` renders. Subsequent changes to parts in style elements will have
 * no effect. Because of this, parts in style elements should only be used for
 * values that will never change, for example parts that set scope-wide theme
 * values or parts which render shared style elements.
 *
 * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a
 * custom element's `constructor` is not supported. Instead rendering should
 * either done asynchronously, for example at microtask timing (for example
 * `Promise.resolve()`), or be deferred until the first time the element's
 * `connectedCallback` runs.
 *
 * Usage considerations when using shimmed custom properties or `@apply`:
 *
 * * Whenever any dynamic changes are made which affect
 * css custom properties, `ShadyCSS.styleElement(element)` must be called
 * to update the element. There are two cases when this is needed:
 * (1) the element is connected to a new parent, (2) a class is added to the
 * element that causes it to match different custom properties.
 * To address the first case when rendering a custom element, `styleElement`
 * should be called in the element's `connectedCallback`.
 *
 * * Shimmed custom properties may only be defined either for an entire
 * shadowRoot (for example, in a `:host` rule) or via a rule that directly
 * matches an element with a shadowRoot. In other words, instead of flowing from
 * parent to child as do native css custom properties, shimmed custom properties
 * flow only from shadowRoots to nested shadowRoots.
 *
 * * When using `@apply` mixing css shorthand property names with
 * non-shorthand names (for example `border` and `border-width`) is not
 * supported.
 */
const render$1 = (result, container, options) => {
    if (!options || typeof options !== 'object' || !options.scopeName) {
        throw new Error('The `scopeName` option is required.');
    }
    const scopeName = options.scopeName;
    const hasRendered = parts.has(container);
    const needsScoping = compatibleShadyCSSVersion &&
        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&
        !!container.host;
    // Handle first render to a scope specially...
    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);
    // On first scope render, render into a fragment; this cannot be a single
    // fragment that is reused since nested renders can occur synchronously.
    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;
    render(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));
    // When performing first scope render,
    // (1) We've rendered into a fragment so that there's a chance to
    // `prepareTemplateStyles` before sub-elements hit the DOM
    // (which might cause them to render based on a common pattern of
    // rendering in a custom element's `connectedCallback`);
    // (2) Scope the template with ShadyCSS one time only for this scope.
    // (3) Render the fragment into the container and make sure the
    // container knows its `part` is the one we just rendered. This ensures
    // DOM will be re-used on subsequent renders.
    if (firstScopeRender) {
        const part = parts.get(renderContainer);
        parts.delete(renderContainer);
        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)
        // that should apply to `renderContainer` even if the rendered value is
        // not a TemplateInstance. However, it will only insert scoped styles
        // into the document if `prepareTemplateStyles` has already been called
        // for the given scope name.
        const template = part.value instanceof TemplateInstance ?
            part.value.template :
            undefined;
        prepareTemplateStyles(scopeName, renderContainer, template);
        removeNodes(container, container.firstChild);
        container.appendChild(renderContainer);
        parts.set(container, part);
    }
    // After elements have hit the DOM, update styling if this is the
    // initial render to this container.
    // This is needed whenever dynamic changes are made so it would be
    // safest to do every render; however, this would regress performance
    // so we leave it up to the user to call `ShadyCSS.styleElement`
    // for dynamic changes.
    if (!hasRendered && needsScoping) {
        window.ShadyCSS.styleElement(container.host);
    }
};

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
var _a$5;
/**
 * Use this module if you want to create your own base class extending
 * [[UpdatingElement]].
 * @packageDocumentation
 */
/*
 * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
 * replaced at compile time by the munged name for object[property]. We cannot
 * alias this function, so we have to use a small shim that has the same
 * behavior when not compiling.
 */
window.JSCompiler_renameProperty =
    (prop, _obj) => prop;
const defaultConverter = {
    toAttribute(value, type) {
        switch (type) {
            case Boolean:
                return value ? '' : null;
            case Object:
            case Array:
                // if the value is `null` or `undefined` pass this through
                // to allow removing/no change behavior.
                return value == null ? value : JSON.stringify(value);
        }
        return value;
    },
    fromAttribute(value, type) {
        switch (type) {
            case Boolean:
                return value !== null;
            case Number:
                return value === null ? null : Number(value);
            case Object:
            case Array:
                return JSON.parse(value);
        }
        return value;
    }
};
/**
 * Change function that returns true if `value` is different from `oldValue`.
 * This method is used as the default for a property's `hasChanged` function.
 */
const notEqual = (value, old) => {
    // This ensures (old==NaN, value==NaN) always returns false
    return old !== value && (old === old || value === value);
};
const defaultPropertyDeclaration = {
    attribute: true,
    type: String,
    converter: defaultConverter,
    reflect: false,
    hasChanged: notEqual
};
const STATE_HAS_UPDATED = 1;
const STATE_UPDATE_REQUESTED = 1 << 2;
const STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;
const STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;
/**
 * The Closure JS Compiler doesn't currently have good support for static
 * property semantics where "this" is dynamic (e.g.
 * https://github.com/google/closure-compiler/issues/3177 and others) so we use
 * this hack to bypass any rewriting by the compiler.
 */
const finalized = 'finalized';
/**
 * Base element class which manages element properties and attributes. When
 * properties change, the `update` method is asynchronously called. This method
 * should be supplied by subclassers to render updates as desired.
 * @noInheritDoc
 */
class UpdatingElement extends HTMLElement {
    constructor() {
        super();
        this.initialize();
    }
    /**
     * Returns a list of attributes corresponding to the registered properties.
     * @nocollapse
     */
    static get observedAttributes() {
        // note: piggy backing on this to ensure we're finalized.
        this.finalize();
        const attributes = [];
        // Use forEach so this works even if for/of loops are compiled to for loops
        // expecting arrays
        this._classProperties.forEach((v, p) => {
            const attr = this._attributeNameForProperty(p, v);
            if (attr !== undefined) {
                this._attributeToPropertyMap.set(attr, p);
                attributes.push(attr);
            }
        });
        return attributes;
    }
    /**
     * Ensures the private `_classProperties` property metadata is created.
     * In addition to `finalize` this is also called in `createProperty` to
     * ensure the `@property` decorator can add property metadata.
     */
    /** @nocollapse */
    static _ensureClassProperties() {
        // ensure private storage for property declarations.
        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {
            this._classProperties = new Map();
            // NOTE: Workaround IE11 not supporting Map constructor argument.
            const superProperties = Object.getPrototypeOf(this)._classProperties;
            if (superProperties !== undefined) {
                superProperties.forEach((v, k) => this._classProperties.set(k, v));
            }
        }
    }
    /**
     * Creates a property accessor on the element prototype if one does not exist
     * and stores a PropertyDeclaration for the property with the given options.
     * The property setter calls the property's `hasChanged` property option
     * or uses a strict identity check to determine whether or not to request
     * an update.
     *
     * This method may be overridden to customize properties; however,
     * when doing so, it's important to call `super.createProperty` to ensure
     * the property is setup correctly. This method calls
     * `getPropertyDescriptor` internally to get a descriptor to install.
     * To customize what properties do when they are get or set, override
     * `getPropertyDescriptor`. To customize the options for a property,
     * implement `createProperty` like this:
     *
     * static createProperty(name, options) {
     *   options = Object.assign(options, {myOption: true});
     *   super.createProperty(name, options);
     * }
     *
     * @nocollapse
     */
    static createProperty(name, options = defaultPropertyDeclaration) {
        // Note, since this can be called by the `@property` decorator which
        // is called before `finalize`, we ensure storage exists for property
        // metadata.
        this._ensureClassProperties();
        this._classProperties.set(name, options);
        // Do not generate an accessor if the prototype already has one, since
        // it would be lost otherwise and that would never be the user's intention;
        // Instead, we expect users to call `requestUpdate` themselves from
        // user-defined accessors. Note that if the super has an accessor we will
        // still overwrite it
        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {
            return;
        }
        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;
        const descriptor = this.getPropertyDescriptor(name, key, options);
        if (descriptor !== undefined) {
            Object.defineProperty(this.prototype, name, descriptor);
        }
    }
    /**
     * Returns a property descriptor to be defined on the given named property.
     * If no descriptor is returned, the property will not become an accessor.
     * For example,
     *
     *   class MyElement extends LitElement {
     *     static getPropertyDescriptor(name, key, options) {
     *       const defaultDescriptor =
     *           super.getPropertyDescriptor(name, key, options);
     *       const setter = defaultDescriptor.set;
     *       return {
     *         get: defaultDescriptor.get,
     *         set(value) {
     *           setter.call(this, value);
     *           // custom action.
     *         },
     *         configurable: true,
     *         enumerable: true
     *       }
     *     }
     *   }
     *
     * @nocollapse
     */
    static getPropertyDescriptor(name, key, options) {
        return {
            // tslint:disable-next-line:no-any no symbol in index
            get() {
                return this[key];
            },
            set(value) {
                const oldValue = this[name];
                this[key] = value;
                this
                    .requestUpdateInternal(name, oldValue, options);
            },
            configurable: true,
            enumerable: true
        };
    }
    /**
     * Returns the property options associated with the given property.
     * These options are defined with a PropertyDeclaration via the `properties`
     * object or the `@property` decorator and are registered in
     * `createProperty(...)`.
     *
     * Note, this method should be considered "final" and not overridden. To
     * customize the options for a given property, override `createProperty`.
     *
     * @nocollapse
     * @final
     */
    static getPropertyOptions(name) {
        return this._classProperties && this._classProperties.get(name) ||
            defaultPropertyDeclaration;
    }
    /**
     * Creates property accessors for registered properties and ensures
     * any superclasses are also finalized.
     * @nocollapse
     */
    static finalize() {
        // finalize any superclasses
        const superCtor = Object.getPrototypeOf(this);
        if (!superCtor.hasOwnProperty(finalized)) {
            superCtor.finalize();
        }
        this[finalized] = true;
        this._ensureClassProperties();
        // initialize Map populated in observedAttributes
        this._attributeToPropertyMap = new Map();
        // make any properties
        // Note, only process "own" properties since this element will inherit
        // any properties defined on the superClass, and finalization ensures
        // the entire prototype chain is finalized.
        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {
            const props = this.properties;
            // support symbols in properties (IE11 does not support this)
            const propKeys = [
                ...Object.getOwnPropertyNames(props),
                ...(typeof Object.getOwnPropertySymbols === 'function') ?
                    Object.getOwnPropertySymbols(props) :
                    []
            ];
            // This for/of is ok because propKeys is an array
            for (const p of propKeys) {
                // note, use of `any` is due to TypeSript lack of support for symbol in
                // index types
                // tslint:disable-next-line:no-any no symbol in index
                this.createProperty(p, props[p]);
            }
        }
    }
    /**
     * Returns the property name for the given attribute `name`.
     * @nocollapse
     */
    static _attributeNameForProperty(name, options) {
        const attribute = options.attribute;
        return attribute === false ?
            undefined :
            (typeof attribute === 'string' ?
                attribute :
                (typeof name === 'string' ? name.toLowerCase() : undefined));
    }
    /**
     * Returns true if a property should request an update.
     * Called when a property value is set and uses the `hasChanged`
     * option for the property if present or a strict identity check.
     * @nocollapse
     */
    static _valueHasChanged(value, old, hasChanged = notEqual) {
        return hasChanged(value, old);
    }
    /**
     * Returns the property value for the given attribute value.
     * Called via the `attributeChangedCallback` and uses the property's
     * `converter` or `converter.fromAttribute` property option.
     * @nocollapse
     */
    static _propertyValueFromAttribute(value, options) {
        const type = options.type;
        const converter = options.converter || defaultConverter;
        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);
        return fromAttribute ? fromAttribute(value, type) : value;
    }
    /**
     * Returns the attribute value for the given property value. If this
     * returns undefined, the property will *not* be reflected to an attribute.
     * If this returns null, the attribute will be removed, otherwise the
     * attribute will be set to the value.
     * This uses the property's `reflect` and `type.toAttribute` property options.
     * @nocollapse
     */
    static _propertyValueToAttribute(value, options) {
        if (options.reflect === undefined) {
            return;
        }
        const type = options.type;
        const converter = options.converter;
        const toAttribute = converter && converter.toAttribute ||
            defaultConverter.toAttribute;
        return toAttribute(value, type);
    }
    /**
     * Performs element initialization. By default captures any pre-set values for
     * registered properties.
     */
    initialize() {
        this._updateState = 0;
        this._updatePromise =
            new Promise((res) => this._enableUpdatingResolver = res);
        this._changedProperties = new Map();
        this._saveInstanceProperties();
        // ensures first update will be caught by an early access of
        // `updateComplete`
        this.requestUpdateInternal();
    }
    /**
     * Fixes any properties set on the instance before upgrade time.
     * Otherwise these would shadow the accessor and break these properties.
     * The properties are stored in a Map which is played back after the
     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome
     * (<=41), properties created for native platform properties like (`id` or
     * `name`) may not have default values set in the element constructor. On
     * these browsers native properties appear on instances and therefore their
     * default value will overwrite any element default (e.g. if the element sets
     * this.id = 'id' in the constructor, the 'id' will become '' since this is
     * the native platform default).
     */
    _saveInstanceProperties() {
        // Use forEach so this works even if for/of loops are compiled to for loops
        // expecting arrays
        this.constructor
            ._classProperties.forEach((_v, p) => {
            if (this.hasOwnProperty(p)) {
                const value = this[p];
                delete this[p];
                if (!this._instanceProperties) {
                    this._instanceProperties = new Map();
                }
                this._instanceProperties.set(p, value);
            }
        });
    }
    /**
     * Applies previously saved instance properties.
     */
    _applyInstanceProperties() {
        // Use forEach so this works even if for/of loops are compiled to for loops
        // expecting arrays
        // tslint:disable-next-line:no-any
        this._instanceProperties.forEach((v, p) => this[p] = v);
        this._instanceProperties = undefined;
    }
    connectedCallback() {
        // Ensure first connection completes an update. Updates cannot complete
        // before connection.
        this.enableUpdating();
    }
    enableUpdating() {
        if (this._enableUpdatingResolver !== undefined) {
            this._enableUpdatingResolver();
            this._enableUpdatingResolver = undefined;
        }
    }
    /**
     * Allows for `super.disconnectedCallback()` in extensions while
     * reserving the possibility of making non-breaking feature additions
     * when disconnecting at some point in the future.
     */
    disconnectedCallback() {
    }
    /**
     * Synchronizes property values when attributes change.
     */
    attributeChangedCallback(name, old, value) {
        if (old !== value) {
            this._attributeToProperty(name, value);
        }
    }
    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {
        const ctor = this.constructor;
        const attr = ctor._attributeNameForProperty(name, options);
        if (attr !== undefined) {
            const attrValue = ctor._propertyValueToAttribute(value, options);
            // an undefined value does not change the attribute.
            if (attrValue === undefined) {
                return;
            }
            // Track if the property is being reflected to avoid
            // setting the property again via `attributeChangedCallback`. Note:
            // 1. this takes advantage of the fact that the callback is synchronous.
            // 2. will behave incorrectly if multiple attributes are in the reaction
            // stack at time of calling. However, since we process attributes
            // in `update` this should not be possible (or an extreme corner case
            // that we'd like to discover).
            // mark state reflecting
            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;
            if (attrValue == null) {
                this.removeAttribute(attr);
            }
            else {
                this.setAttribute(attr, attrValue);
            }
            // mark state not reflecting
            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;
        }
    }
    _attributeToProperty(name, value) {
        // Use tracking info to avoid deserializing attribute value if it was
        // just set from a property setter.
        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {
            return;
        }
        const ctor = this.constructor;
        // Note, hint this as an `AttributeMap` so closure clearly understands
        // the type; it has issues with tracking types through statics
        // tslint:disable-next-line:no-unnecessary-type-assertion
        const propName = ctor._attributeToPropertyMap.get(name);
        if (propName !== undefined) {
            const options = ctor.getPropertyOptions(propName);
            // mark state reflecting
            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;
            this[propName] =
                // tslint:disable-next-line:no-any
                ctor._propertyValueFromAttribute(value, options);
            // mark state not reflecting
            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;
        }
    }
    /**
     * This protected version of `requestUpdate` does not access or return the
     * `updateComplete` promise. This promise can be overridden and is therefore
     * not free to access.
     */
    requestUpdateInternal(name, oldValue, options) {
        let shouldRequestUpdate = true;
        // If we have a property key, perform property update steps.
        if (name !== undefined) {
            const ctor = this.constructor;
            options = options || ctor.getPropertyOptions(name);
            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {
                if (!this._changedProperties.has(name)) {
                    this._changedProperties.set(name, oldValue);
                }
                // Add to reflecting properties set.
                // Note, it's important that every change has a chance to add the
                // property to `_reflectingProperties`. This ensures setting
                // attribute + property reflects correctly.
                if (options.reflect === true &&
                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {
                    if (this._reflectingProperties === undefined) {
                        this._reflectingProperties = new Map();
                    }
                    this._reflectingProperties.set(name, options);
                }
            }
            else {
                // Abort the request if the property should not be considered changed.
                shouldRequestUpdate = false;
            }
        }
        if (!this._hasRequestedUpdate && shouldRequestUpdate) {
            this._updatePromise = this._enqueueUpdate();
        }
    }
    /**
     * Requests an update which is processed asynchronously. This should
     * be called when an element should update based on some state not triggered
     * by setting a property. In this case, pass no arguments. It should also be
     * called when manually implementing a property setter. In this case, pass the
     * property `name` and `oldValue` to ensure that any configured property
     * options are honored. Returns the `updateComplete` Promise which is resolved
     * when the update completes.
     *
     * @param name {PropertyKey} (optional) name of requesting property
     * @param oldValue {any} (optional) old value of requesting property
     * @returns {Promise} A Promise that is resolved when the update completes.
     */
    requestUpdate(name, oldValue) {
        this.requestUpdateInternal(name, oldValue);
        return this.updateComplete;
    }
    /**
     * Sets up the element to asynchronously update.
     */
    async _enqueueUpdate() {
        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;
        try {
            // Ensure any previous update has resolved before updating.
            // This `await` also ensures that property changes are batched.
            await this._updatePromise;
        }
        catch (e) {
            // Ignore any previous errors. We only care that the previous cycle is
            // done. Any error should have been handled in the previous update.
        }
        const result = this.performUpdate();
        // If `performUpdate` returns a Promise, we await it. This is done to
        // enable coordinating updates with a scheduler. Note, the result is
        // checked to avoid delaying an additional microtask unless we need to.
        if (result != null) {
            await result;
        }
        return !this._hasRequestedUpdate;
    }
    get _hasRequestedUpdate() {
        return (this._updateState & STATE_UPDATE_REQUESTED);
    }
    get hasUpdated() {
        return (this._updateState & STATE_HAS_UPDATED);
    }
    /**
     * Performs an element update. Note, if an exception is thrown during the
     * update, `firstUpdated` and `updated` will not be called.
     *
     * You can override this method to change the timing of updates. If this
     * method is overridden, `super.performUpdate()` must be called.
     *
     * For instance, to schedule updates to occur just before the next frame:
     *
     * ```
     * protected async performUpdate(): Promise<unknown> {
     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));
     *   super.performUpdate();
     * }
     * ```
     */
    performUpdate() {
        // Abort any update if one is not pending when this is called.
        // This can happen if `performUpdate` is called early to "flush"
        // the update.
        if (!this._hasRequestedUpdate) {
            return;
        }
        // Mixin instance properties once, if they exist.
        if (this._instanceProperties) {
            this._applyInstanceProperties();
        }
        let shouldUpdate = false;
        const changedProperties = this._changedProperties;
        try {
            shouldUpdate = this.shouldUpdate(changedProperties);
            if (shouldUpdate) {
                this.update(changedProperties);
            }
            else {
                this._markUpdated();
            }
        }
        catch (e) {
            // Prevent `firstUpdated` and `updated` from running when there's an
            // update exception.
            shouldUpdate = false;
            // Ensure element can accept additional updates after an exception.
            this._markUpdated();
            throw e;
        }
        if (shouldUpdate) {
            if (!(this._updateState & STATE_HAS_UPDATED)) {
                this._updateState = this._updateState | STATE_HAS_UPDATED;
                this.firstUpdated(changedProperties);
            }
            this.updated(changedProperties);
        }
    }
    _markUpdated() {
        this._changedProperties = new Map();
        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;
    }
    /**
     * Returns a Promise that resolves when the element has completed updating.
     * The Promise value is a boolean that is `true` if the element completed the
     * update without triggering another update. The Promise result is `false` if
     * a property was set inside `updated()`. If the Promise is rejected, an
     * exception was thrown during the update.
     *
     * To await additional asynchronous work, override the `_getUpdateComplete`
     * method. For example, it is sometimes useful to await a rendered element
     * before fulfilling this Promise. To do this, first await
     * `super._getUpdateComplete()`, then any subsequent state.
     *
     * @returns {Promise} The Promise returns a boolean that indicates if the
     * update resolved without triggering another update.
     */
    get updateComplete() {
        return this._getUpdateComplete();
    }
    /**
     * Override point for the `updateComplete` promise.
     *
     * It is not safe to override the `updateComplete` getter directly due to a
     * limitation in TypeScript which means it is not possible to call a
     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target
     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).
     * This method should be overridden instead. For example:
     *
     *   class MyElement extends LitElement {
     *     async _getUpdateComplete() {
     *       await super._getUpdateComplete();
     *       await this._myChild.updateComplete;
     *     }
     *   }
     */
    _getUpdateComplete() {
        return this._updatePromise;
    }
    /**
     * Controls whether or not `update` should be called when the element requests
     * an update. By default, this method always returns `true`, but this can be
     * customized to control when to update.
     *
     * @param _changedProperties Map of changed properties with old values
     */
    shouldUpdate(_changedProperties) {
        return true;
    }
    /**
     * Updates the element. This method reflects property values to attributes.
     * It can be overridden to render and keep updated element DOM.
     * Setting properties inside this method will *not* trigger
     * another update.
     *
     * @param _changedProperties Map of changed properties with old values
     */
    update(_changedProperties) {
        if (this._reflectingProperties !== undefined &&
            this._reflectingProperties.size > 0) {
            // Use forEach so this works even if for/of loops are compiled to for
            // loops expecting arrays
            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));
            this._reflectingProperties = undefined;
        }
        this._markUpdated();
    }
    /**
     * Invoked whenever the element is updated. Implement to perform
     * post-updating tasks via DOM APIs, for example, focusing an element.
     *
     * Setting properties inside this method will trigger the element to update
     * again after this update cycle completes.
     *
     * @param _changedProperties Map of changed properties with old values
     */
    updated(_changedProperties) {
    }
    /**
     * Invoked when the element is first updated. Implement to perform one time
     * work on the element after update.
     *
     * Setting properties inside this method will trigger the element to update
     * again after this update cycle completes.
     *
     * @param _changedProperties Map of changed properties with old values
     */
    firstUpdated(_changedProperties) {
    }
}
_a$5 = finalized;
/**
 * Marks class as having finished creating properties.
 */
UpdatingElement[_a$5] = true;

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const legacyCustomElement = (tagName, clazz) => {
    window.customElements.define(tagName, clazz);
    // Cast as any because TS doesn't recognize the return type as being a
    // subtype of the decorated class when clazz is typed as
    // `Constructor<HTMLElement>` for some reason.
    // `Constructor<HTMLElement>` is helpful to make sure the decorator is
    // applied to elements however.
    // tslint:disable-next-line:no-any
    return clazz;
};
const standardCustomElement = (tagName, descriptor) => {
    const { kind, elements } = descriptor;
    return {
        kind,
        elements,
        // This callback is called once the class is otherwise fully defined
        finisher(clazz) {
            window.customElements.define(tagName, clazz);
        }
    };
};
/**
 * Class decorator factory that defines the decorated class as a custom element.
 *
 * ```
 * @customElement('my-element')
 * class MyElement {
 *   render() {
 *     return html``;
 *   }
 * }
 * ```
 * @category Decorator
 * @param tagName The name of the custom element to define.
 */
const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?
    legacyCustomElement(tagName, classOrDescriptor) :
    standardCustomElement(tagName, classOrDescriptor);
const standardProperty = (options, element) => {
    // When decorating an accessor, pass it through and add property metadata.
    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't
    // stomp over the user's accessor.
    if (element.kind === 'method' && element.descriptor &&
        !('value' in element.descriptor)) {
        return Object.assign(Object.assign({}, element), { finisher(clazz) {
                clazz.createProperty(element.key, options);
            } });
    }
    else {
        // createProperty() takes care of defining the property, but we still
        // must return some kind of descriptor, so return a descriptor for an
        // unused prototype field. The finisher calls createProperty().
        return {
            kind: 'field',
            key: Symbol(),
            placement: 'own',
            descriptor: {},
            // When @babel/plugin-proposal-decorators implements initializers,
            // do this instead of the initializer below. See:
            // https://github.com/babel/babel/issues/9260 extras: [
            //   {
            //     kind: 'initializer',
            //     placement: 'own',
            //     initializer: descriptor.initializer,
            //   }
            // ],
            initializer() {
                if (typeof element.initializer === 'function') {
                    this[element.key] = element.initializer.call(this);
                }
            },
            finisher(clazz) {
                clazz.createProperty(element.key, options);
            }
        };
    }
};
const legacyProperty = (options, proto, name) => {
    proto.constructor
        .createProperty(name, options);
};
/**
 * A property decorator which creates a LitElement property which reflects a
 * corresponding attribute value. A [[`PropertyDeclaration`]] may optionally be
 * supplied to configure property features.
 *
 * This decorator should only be used for public fields. Private or protected
 * fields should use the [[`internalProperty`]] decorator.
 *
 * @example
 * ```ts
 * class MyElement {
 *   @property({ type: Boolean })
 *   clicked = false;
 * }
 * ```
 * @category Decorator
 * @ExportDecoratedItems
 */
function property(options) {
    // tslint:disable-next-line:no-any decorator
    return (protoOrDescriptor, name) => (name !== undefined) ?
        legacyProperty(options, protoOrDescriptor, name) :
        standardProperty(options, protoOrDescriptor);
}
/**
 * A property decorator that converts a class property into a getter that
 * executes a querySelector on the element's renderRoot.
 *
 * @param selector A DOMString containing one or more selectors to match.
 * @param cache An optional boolean which when true performs the DOM query only
 * once and caches the result.
 *
 * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector
 *
 * @example
 *
 * ```ts
 * class MyElement {
 *   @query('#first')
 *   first;
 *
 *   render() {
 *     return html`
 *       <div id="first"></div>
 *       <div id="second"></div>
 *     `;
 *   }
 * }
 * ```
 * @category Decorator
 */
function query(selector, cache) {
    return (protoOrDescriptor, 
    // tslint:disable-next-line:no-any decorator
    name) => {
        const descriptor = {
            get() {
                return this.renderRoot.querySelector(selector);
            },
            enumerable: true,
            configurable: true,
        };
        if (cache) {
            const key = typeof name === 'symbol' ? Symbol() : `__${name}`;
            descriptor.get = function () {
                if (this[key] === undefined) {
                    (this[key] =
                        this.renderRoot.querySelector(selector));
                }
                return this[key];
            };
        }
        return (name !== undefined) ?
            legacyQuery(descriptor, protoOrDescriptor, name) :
            standardQuery(descriptor, protoOrDescriptor);
    };
}
/**
 * A property decorator that converts a class property into a getter
 * that executes a querySelectorAll on the element's renderRoot.
 *
 * @param selector A DOMString containing one or more selectors to match.
 *
 * See:
 * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll
 *
 * @example
 * ```ts
 * class MyElement {
 *   @queryAll('div')
 *   divs;
 *
 *   render() {
 *     return html`
 *       <div id="first"></div>
 *       <div id="second"></div>
 *     `;
 *   }
 * }
 * ```
 * @category Decorator
 */
function queryAll(selector) {
    return (protoOrDescriptor, 
    // tslint:disable-next-line:no-any decorator
    name) => {
        const descriptor = {
            get() {
                return this.renderRoot.querySelectorAll(selector);
            },
            enumerable: true,
            configurable: true,
        };
        return (name !== undefined) ?
            legacyQuery(descriptor, protoOrDescriptor, name) :
            standardQuery(descriptor, protoOrDescriptor);
    };
}
const legacyQuery = (descriptor, proto, name) => {
    Object.defineProperty(proto, name, descriptor);
};
const standardQuery = (descriptor, element) => ({
    kind: 'method',
    placement: 'prototype',
    key: element.key,
    descriptor,
});
// x-browser support for matches
// tslint:disable-next-line:no-any
const ElementProto = Element.prototype;
const legacyMatches = ElementProto.msMatchesSelector || ElementProto.webkitMatchesSelector;
/**
 * A property decorator that converts a class property into a getter that
 * returns the `assignedNodes` of the given named `slot`. Note, the type of
 * this property should be annotated as `NodeListOf<HTMLElement>`.
 *
 * @param slotName A string name of the slot.
 * @param flatten A boolean which when true flattens the assigned nodes,
 * meaning any assigned nodes that are slot elements are replaced with their
 * assigned nodes.
 * @param selector A string which filters the results to elements that match
 * the given css selector.
 *
 * * @example
 * ```ts
 * class MyElement {
 *   @queryAssignedNodes('list', true, '.item')
 *   listItems;
 *
 *   render() {
 *     return html`
 *       <slot name="list"></slot>
 *     `;
 *   }
 * }
 * ```
 * @category Decorator
 */
function queryAssignedNodes(slotName = '', flatten = false, selector = '') {
    return (protoOrDescriptor, 
    // tslint:disable-next-line:no-any decorator
    name) => {
        const descriptor = {
            get() {
                const slotSelector = `slot${slotName ? `[name=${slotName}]` : ':not([name])'}`;
                const slot = this.renderRoot.querySelector(slotSelector);
                let nodes = slot && slot.assignedNodes({ flatten });
                if (nodes && selector) {
                    nodes = nodes.filter((node) => node.nodeType === Node.ELEMENT_NODE &&
                        node.matches ?
                        node.matches(selector) :
                        legacyMatches.call(node, selector));
                }
                return nodes;
            },
            enumerable: true,
            configurable: true,
        };
        return (name !== undefined) ?
            legacyQuery(descriptor, protoOrDescriptor, name) :
            standardQuery(descriptor, protoOrDescriptor);
    };
}

/**
@license
Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
/**
 * Whether the current browser supports `adoptedStyleSheets`.
 */
const supportsAdoptingStyleSheets = (window.ShadowRoot) &&
    (window.ShadyCSS === undefined || window.ShadyCSS.nativeShadow) &&
    ('adoptedStyleSheets' in Document.prototype) &&
    ('replace' in CSSStyleSheet.prototype);
const constructionToken = Symbol();
class CSSResult {
    constructor(cssText, safeToken) {
        if (safeToken !== constructionToken) {
            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');
        }
        this.cssText = cssText;
    }
    // Note, this is a getter so that it's lazy. In practice, this means
    // stylesheets are not created until the first element instance is made.
    get styleSheet() {
        if (this._styleSheet === undefined) {
            // Note, if `supportsAdoptingStyleSheets` is true then we assume
            // CSSStyleSheet is constructable.
            if (supportsAdoptingStyleSheets) {
                this._styleSheet = new CSSStyleSheet();
                this._styleSheet.replaceSync(this.cssText);
            }
            else {
                this._styleSheet = null;
            }
        }
        return this._styleSheet;
    }
    toString() {
        return this.cssText;
    }
}
/**
 * Wrap a value for interpolation in a [[`css`]] tagged template literal.
 *
 * This is unsafe because untrusted CSS text can be used to phone home
 * or exfiltrate data to an attacker controlled site. Take care to only use
 * this with trusted input.
 */
const unsafeCSS = (value) => {
    return new CSSResult(String(value), constructionToken);
};
const textFromCSSResult = (value) => {
    if (value instanceof CSSResult) {
        return value.cssText;
    }
    else if (typeof value === 'number') {
        return value;
    }
    else {
        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but
            take care to ensure page security.`);
    }
};
/**
 * Template tag which which can be used with LitElement's [[LitElement.styles |
 * `styles`]] property to set element styles. For security reasons, only literal
 * string values may be used. To incorporate non-literal values [[`unsafeCSS`]]
 * may be used inside a template string part.
 */
const css = (strings, ...values) => {
    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);
    return new CSSResult(cssText, constructionToken);
};

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
// IMPORTANT: do not change the property name or the assignment expression.
// This line will be used in regexes to search for LitElement usage.
// TODO(justinfagnani): inject version number at build time
(window['litElementVersions'] || (window['litElementVersions'] = []))
    .push('2.4.0');
/**
 * Sentinal value used to avoid calling lit-html's render function when
 * subclasses do not implement `render`
 */
const renderNotImplemented = {};
/**
 * Base element class that manages element properties and attributes, and
 * renders a lit-html template.
 *
 * To define a component, subclass `LitElement` and implement a
 * `render` method to provide the component's template. Define properties
 * using the [[`properties`]] property or the [[`property`]] decorator.
 */
class LitElement extends UpdatingElement {
    /**
     * Return the array of styles to apply to the element.
     * Override this method to integrate into a style management system.
     *
     * @nocollapse
     */
    static getStyles() {
        return this.styles;
    }
    /** @nocollapse */
    static _getUniqueStyles() {
        // Only gather styles once per class
        if (this.hasOwnProperty(JSCompiler_renameProperty('_styles', this))) {
            return;
        }
        // Take care not to call `this.getStyles()` multiple times since this
        // generates new CSSResults each time.
        // TODO(sorvell): Since we do not cache CSSResults by input, any
        // shared styles will generate new stylesheet objects, which is wasteful.
        // This should be addressed when a browser ships constructable
        // stylesheets.
        const userStyles = this.getStyles();
        if (Array.isArray(userStyles)) {
            // De-duplicate styles preserving the _last_ instance in the set.
            // This is a performance optimization to avoid duplicated styles that can
            // occur especially when composing via subclassing.
            // The last item is kept to try to preserve the cascade order with the
            // assumption that it's most important that last added styles override
            // previous styles.
            const addStyles = (styles, set) => styles.reduceRight((set, s) => 
            // Note: On IE set.add() does not return the set
            Array.isArray(s) ? addStyles(s, set) : (set.add(s), set), set);
            // Array.from does not work on Set in IE, otherwise return
            // Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()
            const set = addStyles(userStyles, new Set());
            const styles = [];
            set.forEach((v) => styles.unshift(v));
            this._styles = styles;
        }
        else {
            this._styles = userStyles === undefined ? [] : [userStyles];
        }
        // Ensure that there are no invalid CSSStyleSheet instances here. They are
        // invalid in two conditions.
        // (1) the sheet is non-constructible (`sheet` of a HTMLStyleElement), but
        //     this is impossible to check except via .replaceSync or use
        // (2) the ShadyCSS polyfill is enabled (:. supportsAdoptingStyleSheets is
        //     false)
        this._styles = this._styles.map((s) => {
            if (s instanceof CSSStyleSheet && !supportsAdoptingStyleSheets) {
                // Flatten the cssText from the passed constructible stylesheet (or
                // undetectable non-constructible stylesheet). The user might have
                // expected to update their stylesheets over time, but the alternative
                // is a crash.
                const cssText = Array.prototype.slice.call(s.cssRules)
                    .reduce((css, rule) => css + rule.cssText, '');
                return unsafeCSS(cssText);
            }
            return s;
        });
    }
    /**
     * Performs element initialization. By default this calls
     * [[`createRenderRoot`]] to create the element [[`renderRoot`]] node and
     * captures any pre-set values for registered properties.
     */
    initialize() {
        super.initialize();
        this.constructor._getUniqueStyles();
        this.renderRoot = this.createRenderRoot();
        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the
        // element's getRootNode(). While this could be done, we're choosing not to
        // support this now since it would require different logic around de-duping.
        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {
            this.adoptStyles();
        }
    }
    /**
     * Returns the node into which the element should render and by default
     * creates and returns an open shadowRoot. Implement to customize where the
     * element's DOM is rendered. For example, to render into the element's
     * childNodes, return `this`.
     * @returns {Element|DocumentFragment} Returns a node into which to render.
     */
    createRenderRoot() {
        return this.attachShadow({ mode: 'open' });
    }
    /**
     * Applies styling to the element shadowRoot using the [[`styles`]]
     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where
     * available and will fallback otherwise. When Shadow DOM is polyfilled,
     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM
     * is available but `adoptedStyleSheets` is not, styles are appended to the
     * end of the `shadowRoot` to [mimic spec
     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).
     */
    adoptStyles() {
        const styles = this.constructor._styles;
        if (styles.length === 0) {
            return;
        }
        // There are three separate cases here based on Shadow DOM support.
        // (1) shadowRoot polyfilled: use ShadyCSS
        // (2) shadowRoot.adoptedStyleSheets available: use it
        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after
        // rendering
        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {
            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);
        }
        else if (supportsAdoptingStyleSheets) {
            this.renderRoot.adoptedStyleSheets =
                styles.map((s) => s instanceof CSSStyleSheet ? s : s.styleSheet);
        }
        else {
            // This must be done after rendering so the actual style insertion is done
            // in `update`.
            this._needsShimAdoptedStyleSheets = true;
        }
    }
    connectedCallback() {
        super.connectedCallback();
        // Note, first update/render handles styleElement so we only call this if
        // connected after first update.
        if (this.hasUpdated && window.ShadyCSS !== undefined) {
            window.ShadyCSS.styleElement(this);
        }
    }
    /**
     * Updates the element. This method reflects property values to attributes
     * and calls `render` to render DOM via lit-html. Setting properties inside
     * this method will *not* trigger another update.
     * @param _changedProperties Map of changed properties with old values
     */
    update(changedProperties) {
        // Setting properties in `render` should not trigger an update. Since
        // updates are allowed after super.update, it's important to call `render`
        // before that.
        const templateResult = this.render();
        super.update(changedProperties);
        // If render is not implemented by the component, don't call lit-html render
        if (templateResult !== renderNotImplemented) {
            this.constructor
                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });
        }
        // When native Shadow DOM is used but adoptedStyles are not supported,
        // insert styling after rendering to ensure adoptedStyles have highest
        // priority.
        if (this._needsShimAdoptedStyleSheets) {
            this._needsShimAdoptedStyleSheets = false;
            this.constructor._styles.forEach((s) => {
                const style = document.createElement('style');
                style.textContent = s.cssText;
                this.renderRoot.appendChild(style);
            });
        }
    }
    /**
     * Invoked on each update to perform rendering tasks. This method may return
     * any value renderable by lit-html's `NodePart` - typically a
     * `TemplateResult`. Setting properties inside this method will *not* trigger
     * the element to update.
     */
    render() {
        return renderNotImplemented;
    }
}
/**
 * Ensure this class is marked as `finalized` as an optimization ensuring
 * it will not needlessly try to `finalize`.
 *
 * Note this property name is a string to prevent breaking Closure JS Compiler
 * optimizations. See updating-element.ts for more information.
 */
LitElement['finalized'] = true;
/**
 * Reference to the underlying library method used to render the element's
 * DOM. By default, points to the `render` method from lit-html's shady-render
 * module.
 *
 * **Most users will never need to touch this property.**
 *
 * This  property should not be confused with the `render` instance method,
 * which should be overridden to define a template for the element.
 *
 * Advanced users creating a new base class based on LitElement can override
 * this property to point to a custom render method with a signature that
 * matches [shady-render's `render`
 * method](https://lit-html.polymer-project.org/api/modules/shady_render.html#render).
 *
 * @nocollapse
 */
LitElement.render = render$1;

let BkjButton = class BkjButton extends LitElement {
    constructor() {
        super(...arguments);
        this.round = false;
        this.flat = false;
        this.disabled = false;
    }
    connectedCallback() {
        super.connectedCallback();
        this.setAttribute('role', 'button');
        this.setAttribute('tabindex', '0');
        if (this.disabled) {
            this.addEventListener('click', e => {
                e.preventDefault();
                e.stopImmediatePropagation();
            });
        }
    }
    firstUpdated() {
        if (this.round)
            this.$button.classList.add('round');
        if (this.flat)
            this.$button.classList.add('flat');
        if (this.icon === "before")
            this.$button.classList.add('reverse');
        if (this.disabled)
            this.$button.classList.add('disabled');
        if (this.icon)
            this.$button.classList.add('icbtn');
    }
    static get styles() {
        return css `
      :host {
        display: flex;
        width: max-content;
        height: max-content;
        border-radius: var(--buttonRadius, 10px);
      }
      :host(:focus) {
       outline: 1px solid var(--buttonFocusOutline, #6dffda2f);
      }
      #button {
        place-content: center;
        align-items: center;
        border: 0px;
        outline: unset;
        cursor: pointer;
        font-weight: 500;
        text-transform: capitalize;
        letter-spacing: .02rem;
        color: var(--buttonFC, teal);
        font-family: var(--regularFont, "Arial Rounded MT");
        background-color: var(--buttonBC, #fafafa);
        width: var(--buttonW, max-content);
        height: var(--buttonH, max-content);
        box-sizing: border-box;
        border-radius: var(--buttonRadius, 10px);
        display: flex;
        padding: var(--buttonPadding, 7px 10px);
        border: var(--buttonBorderStyle, solid 1px) var(--buttonFocusOutline, #6dffda2f);
        transition: filter .2s ease;
        font-size: var(--buttonFS, 1rem);
        -webkit-tap-highlight-color: transparent;
      }
      #button:hover {
        filter: contrast(150%) drop-shadow(0 0 2px var(--buttonHoverFC, teal))
      }
      #button.reverse {flex-direction: row-reverse}
      #button.round {padding: 10px; border-radius: 50%}
      #button.flat {background-color: transparent; transition: background-color .2s, color .2s}
      #button.flat:hover {
        filter: contrast(150%);
        background-color: var(--buttonHoverBC, teal);
        color: var(--buttonHoverFC, #fafafa)
      }
      #button.flat:hover slot[name="icon"] {
        fill: var(--buttonHoverIC, #fafafa)
      }
      #button.disabled {
        cursor: not-allowed;
        filter: grayscale(1) invert(.2);
      }
      #button.icbtn > slot:not([name="icon"])::slotted(*) {
        margin: 0 5px 0 0;
      }
      #button.icbtn.reverse > slot:not([name="icon"])::slotted(*) {
        margin: 0 0 0 5px;
      }
      slot[name="icon"] {
        fill: var(--buttonIC, cadetblue);
        transition: fill .2s;
      }
    `;
    }
    render() {
        return html `
      <section id="button">
        <slot></slot>
        <slot name="icon"></slot>
      </section>
    `;
    }
};
__decorate([
    property({ type: Boolean, reflect: true })
], BkjButton.prototype, "round", void 0);
__decorate([
    property({ type: String, reflect: true })
], BkjButton.prototype, "icon", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], BkjButton.prototype, "flat", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], BkjButton.prototype, "disabled", void 0);
__decorate([
    query('#button')
], BkjButton.prototype, "$button", void 0);
BkjButton = __decorate([
    customElement('bkj-button')
], BkjButton);

class BkjIcon extends HTMLElement {
    static get observedAttributes() {
        return ['name'];
    }
    constructor() {
        super();
        this.attachShadow({ mode: 'open' });
        if (!globalThis.hasOwnProperty('bkj'))
            globalThis.bkj = { iconProvider: { default: 'https://raw.githubusercontent.com/Templarian/MaterialDesign-SVG/master/svg/' } };
        globalThis.bkj.iconProvider.default = 'https://raw.githubusercontent.com/Templarian/MaterialDesign-SVG/master/svg/';
    }
    get size() {
        return this.hasAttribute('size')
            ? this.getAttribute('size')
            : '24px';
    }
    get provider() {
        return this.hasAttribute('provider')
            ? this.getAttribute('provider')
            : 'default';
    }
    attributeChangedCallback(name, old, iconName) {
        return __awaiter(this, void 0, void 0, function* () {
            if (localStorage.getItem(`icon_${iconName}`) === null) {
                const iconProvider = globalThis.bkj.iconProvider[this.provider];
                const res = yield fetch(`${iconProvider}${iconName}.svg`);
                const iconSvg = yield res.text();
                localStorage.setItem(`icon_${iconName}`, iconSvg);
                this.render(iconSvg);
            }
            else
                this.render(localStorage.getItem(`icon_${iconName}`));
            const $svg = this.shadowRoot.querySelector('svg');
            $svg.setAttribute('height', this.size);
            $svg.setAttribute('width', this.size);
        });
    }
    render(fragment) {
        this.shadowRoot.innerHTML = /*html*/ `
            <style>
                :host {
                    width: ${this.size};
                    height: ${this.size};
                }
            </style>
            ${fragment}
        `;
    }
}
customElements.define('bkj-icon', BkjIcon);

class MenuHistory extends Array {
    constructor(...args) {
        super(...args);
    }
    get pathBackward() {
        return this.length > 1 ? this[this.length - 2].split('/') : null;
    }
    reset() {
        this.length = 0;
    }
}
class BkjRichMenu extends HTMLElement {
    constructor() {
        super();
        this.history = new MenuHistory();
        this.createOuterStyle();
        this.attachShadow({ mode: 'open' }).innerHTML = /*html*/ `
            <style>${this.styles}</style>
            <details>
                <summary>
                    <slot name="heading"></slot>
                    <slot name="action"></slot>
                    <nav>
                        <slot id="root"></slot>
                        <slot name="parts" id="parts"></slot>    
                    </nav>
                </summary>
            </details>
        `;
    }
    /**
     * Definition of the  DOM elements needed for all the manipulations.
     * Merging of all the UL in one Map object.
     * Hides all the necessary elements to be hidden
     */
    connectedCallback() {
        const $details = this.shadowRoot.querySelector('details');
        const $root = this.shadowRoot.querySelector('#root');
        const $parts = this.shadowRoot.querySelector('#parts');
        this.menuViews = new Map($root.assignedElements()
            .concat($parts.assignedElements())
            .map((ul) => [ul.dataset.path.split('/')[1], ul]));
        this.menuViews.forEach((ul) => {
            ul.classList.add('bkj-list');
        });
        this.updateMenu();
        $details.addEventListener('toggle', e => {
            if ($details.open) {
                this.setAttribute('open', '');
                this.menuViews.forEach(ul => ul.style.animation = "");
            }
            else
                this.removeAttribute('open');
        });
    }
    /**
     * Render loop, re-update the menu when the sole attribute "path", changed.
     */
    attributeChangedCallback(name, old, path) {
        if (name === 'path') {
            const [from, to] = this.path.split('/');
            this.updateMenu(to);
        }
    }
    static get observedAttributes() {
        return ['path', 'open'];
    }
    get path() {
        return this.hasAttribute('path')
            ? this.getAttribute('path')
            : 'root';
    }
    set path(v) {
        this.setAttribute('path', v);
    }
    /**
     * Get the menu partial to be displayed from the map object holding all the views
     * @param part Name of the menu partial to diplay at the moment
     */
    updateMenu(part = 'root') {
        Array.from(this.menuViews.get(part).children)
            .filter((li) => li.hasAttribute('data-path') && li.dataset.path.includes('/'))
            .forEach((li) => {
            li.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopImmediatePropagation();
                this.path = e.currentTarget.dataset.path;
                this.history.push(this.path);
                const [from, to] = this.path.split('/');
                const [fromBack, toBack] = this.history.pathBackward !== null ? this.history.pathBackward : [null, null];
                const duration = 3;
                if (to === 'root' || to === fromBack) {
                    this.menuViews.get(from).style.animation = `menu-slide-to-right .${duration}s forwards`;
                    this.menuViews.get(to).style.animation = `menu-slide-from-left .${duration}s forwards`;
                }
                else {
                    this.menuViews.get(from).style.animation = `menu-slide-to-left .${duration}s forwards`;
                    this.menuViews.get(to).style.animation = `menu-slide-from-right .${duration}s forwards`;
                }
                if (to === 'root')
                    this.history.reset();
            });
        });
    }
    /**
     * Create a global style tag in head holding animations related code
     */
    createOuterStyle() {
        const outerStyles = document.createElement('style');
        outerStyles.innerHTML = this.outerStyles;
        this.parentElement.insertAdjacentElement('beforeend', outerStyles);
    }
    get styles() {
        return `
            :host {
                --bkj-menu-heading-backcolor: rgba(var(--md-grey-600));
                --bkj-menu-heading-size: 35px;
                --bkj-menu-heading-rad: var(--bkj-menu-heading-size);

                --bkj-menu-backcolor: rgba(var(--md-grey-900), 79);
                --bkj-menu-color: rgb(0,0,0);
                --bkj-menu-width: max-content;
                --bkj-menu-height: auto;
                --bkj-menu-rad: 0px;
                
                width: 100%;
            }
            

            :host * {
                -webkit-touch-callout: none;
                -webkit-user-select: none;
                -khtml-user-select: none;
                -moz-user-select: none;
                -ms-user-select: none;
                user-select: none;
                -webkit-tap-highlight-color: transparent; 
                cursor: pointer;
              }
            :host details {
                max-width: 100%;
                z-index: 0;
            }
            :host summary{
                height: var(--bkj-menu-heading-size);
                width: var(--bkj-menu-heading-size);
                background-color: var(--bkj-menu-heading-backcolor);
                border-radius: var(--bkj-menu-heading-rad);
                display:flex;
                justify-content: center;
                align-items: center; 
                outline: none;
                position: relative;
                max-width: 100%;
                z-index: 30;
            }
            :host summary::-webkit-details-marker {
                display: none;
            }
            summary > ::slotted(bkj-button) {
                z-index: 60
            }
            summary > nav {
                transition: transform var(--transitionTiming);
                transform: scale(0);
                position: fixed;
                box-sizing: border-box;
                background: var(--bkj-menu-backcolor);
                color: var(--bkj-menu-color);
                border-radius: var(--bkj-menu-rad);
                width: 100vw;
                height: 100vh;
                padding: 10px;
                font-size: 1.2rem;
                overflow: hidden;
                transform-origin: top right;
                top: 0;
                right: 0;
                z-index: 50;
            }
            @media screen and (min-width: 860px) {
                summary > nav{
                    width: 400px;
                    filter: drop-shadow(-2px 0 4px black)
                }
            }
            :host details[open] summary > nav {
                transform: scale(1)
            }
        `;
    }
    get outerStyles() {
        return /*css*/ `
        ul.bkj-list[slot="parts"] {                
            visibility: hidden;
            position: absolute;
            opacity: 0;
        }
            ul.bkj-list {
                list-style:none;
                padding: 0;
                visibility: visible;
                transform: translateX(0px);
                opacity: 1;
                position: unset;
                place-content: flex-start;
                height: calc(100% - 40px); /* 40px = margin top*/
                display: flex;
                flex-direction: column;
            }
            @-webkit-keyframes menu-slide-from-right{
                from{
                    visibility: hidden;
                    position: absolute;
                    opacity: 0;
                    display:none;
                    -webkit-transform: translateX(100%);
                    
                            transform: translateX(100%);
                }
                to{
                    visibility: visible;
                    position: unset;
                    opacity: 1;
                    -webkit-transform: translateX(0px);
                            transform: translateX(0px);
                }
            }
            @keyframes menu-slide-from-right{
                from{
                    visibility: hidden;
                    position: absolute;
                    opacity: 0;
                    display:none;
                    -webkit-transform: translateX(100%);
                    
                            transform: translateX(100%);
                }
                to{
                    visibility: visible;
                    position: unset;
                    opacity: 1;
                    -webkit-transform: translateX(0px);
                            transform: translateX(0px);
                }
            }
            @-webkit-keyframes menu-slide-to-right {
                from{
                    visibility: visible;
                    position: unset;
                    opacity: 1;
                    -webkit-transform: translateX(0px);
                            transform: translateX(0px);
                }
                to{
                    visibility: hidden;
                    position: absolute;
                    opacity: 0;
                    display:none;
                    -webkit-transform: translateX(100%);
                    
                            transform: translateX(100%);
                }
            }
            @keyframes menu-slide-to-right {
                from{
                    visibility: visible;
                    position: unset;
                    opacity: 1;
                    -webkit-transform: translateX(0px);
                            transform: translateX(0px);
                }
                to{
                    visibility: hidden;
                    position: absolute;
                    opacity: 0;
                    display: none;
                    -webkit-transform: translateX(100%);
                    
                            transform: translateX(100%);
                }
            }
            @-webkit-keyframes menu-slide-from-left {
                from{
                    visibility: hidden;
                    position: absolute;
                    opacity: 0;
                    display: none;
                    -webkit-transform: translateX(-100%);
                    
                            transform: translateX(-100%);
                }
                to{
                    visibility: visible;
                    position: unset;
                    opacity: 1;
                    -webkit-transform: translateX(0px);
                            transform: translateX(0px);
                }
            }
            @keyframes menu-slide-from-left {
                from{
                    visibility: hidden;
                    position: absolute;
                    opacity: 0;
                    display: none;
                    -webkit-transform: translateX(-100%);
                    
                            transform: translateX(-100%);
                }
                to{
                    visibility: visible;
                    position: unset;
                    opacity: 1;
                    -webkit-transform: translateX(0px);
                            transform: translateX(0px);
                }
            }
            @-webkit-keyframes menu-slide-to-left {
                from{
                    visibility: visible;
                    position: unset;
                    opacity: 1;
                    -webkit-transform: translateX(0px);
                            transform: translateX(0px);
                }
                to{
                    visibility: hidden;
                    position: absolute;
                    opacity: 0;   
                    display: none;
                    -webkit-transform: translateX(-100%);   
                            transform: translateX(-100%);
                }
            }
            @keyframes menu-slide-to-left {
                from{
                    visibility: visible;
                    position: unset;
                    opacity: 1;
                    -webkit-transform: translateX(0px);
                            transform: translateX(0px);
                }
                to{
                    visibility: hidden;
                    position: absolute;
                    opacity: 0;   
                    display: none;
                    -webkit-transform: translateX(-100%);   
                            transform: translateX(-100%);
                }
            }
        `;
    }
}
customElements.define('bkj-rich-menu', BkjRichMenu);

let BkjRadioGroup = class BkjRadioGroup extends LitElement {
    connectedCallback() {
        super.connectedCallback();
        this.setAttribute('role', 'radiogroup');
    }
    get $radios() {
        return Array.from(this._radios).filter((node) => node.nodeType !== 3);
    }
    firstUpdated() {
        if (!this.$radios.find(el => !el.checked))
            this.$radios[0].checked = true;
        this.$radios.forEach(radio => {
            radio.addEventListener('click', (e) => {
                e.stopImmediatePropagation();
                e.preventDefault();
                const radio = e.currentTarget;
                if (!radio.checked) {
                    this.$radios.find(r => r.checked).checked = false;
                    radio.checked = true;
                    this.dispatchEvent(new CustomEvent('bkjRadio:changed', {
                        detail: {
                            __Event: e,
                            value: radio.value
                        }
                    }));
                }
            });
        });
    }
    static get styles() {
        return css `
      :host {
        --radiosBg: #fafafa;
        display: flex;
        flex-direction: column;
        place-content: flex-start;
        width: 100%;
      }
      ::slotted(bkj-radio:last-child) {
        border-radius: var(--lastRadioRadius, 0 0 10px 10px)
      }
      ::slotted(bkj-radio:first-child) {
        border-radius: var(--firstRadioRadius, 10px 10px 0 0)
      }
    `;
    }
    render() {
        return html `
        <slot>
        </slot>
    `;
    }
};
__decorate([
    queryAssignedNodes('', true)
], BkjRadioGroup.prototype, "_radios", void 0);
BkjRadioGroup = __decorate([
    customElement('bkj-radio-group')
], BkjRadioGroup);

let BkjRadio = class BkjRadio extends LitElement {
    constructor() {
        super(...arguments);
        this.checked = false;
    }
    connectedCallback() {
        super.connectedCallback();
        this.setAttribute('role', 'radio');
        this.addEventListener('click', () => {
            this.dispatchEvent(new CustomEvent('bkjRadio:clicked', { bubbles: true, composed: true }));
        });
    }
    updated() {
        this.checked
            ? this.setAttribute('aria-checked', 'true')
            : this.setAttribute('aria-checked', 'false');
    }
    static get styles() {
        return [css `
      :host {
        --markerSize: 12px;
        --radioBg: var(--radiosBg);
        padding: 7px;
        display: flex;
        place-content:space-between;
        cursor: pointer;
        background-color: var(--radioBg);
        transition: filter var(--transitionTiming);      
      }
      :host(:hover) {
        filter: brightness(120%);
      }
      :host(:hover) i::before {
        transform: scale(.5);
        filter: opacity(.5);
      }
      :host > span, i {
        display: flex;
        align-self: center;
      }
      i {
        width: var(--markerSize);
        height: var(--markerSize);
        border: solid 2px currentColor;
        border-radius: 50%;
        box-sizing: border-box;
        position: relative;
        place-content: center;
        margin: 0 4.5px;
      }
      i::before {
        content: '';
        display: flex;
        align-self: center;
        width: calc(var(--markerSize) / 2 );
        height: calc(var(--markerSize) / 2 );
        border-radius: 50%;
        background-color: var(--markerColor, var(--primary));
        transform: scale(0);
        transition: transform .2s ease-out, filter .2s ease-out;
      }
      :host([aria-checked="true"]) i::before {
        transform: scale(1);
      }
      :host([aria-checked="true"]:hover) i::before {
        filter: opacity(1);
      }
    `];
    }
    render() {
        return html `
      <span>
        <slot></slot>
      </span>
      <i></i>
    `;
    }
};
__decorate([
    property({ type: Boolean, reflect: true })
], BkjRadio.prototype, "checked", void 0);
__decorate([
    property({ type: String })
], BkjRadio.prototype, "value", void 0);
BkjRadio = __decorate([
    customElement('bkj-radio')
], BkjRadio);

let BkjSelect = class BkjSelect extends LitElement {
    constructor() {
        super(...arguments);
        this.placeholder = "Select...";
        this.open = false;
    }
    handleToggle({ currentTarget }) {
        currentTarget.open ? this.open = true : this.open = false;
    }
    connectedCallback() {
        super.connectedCallback();
        this.addEventListener('bkjRadio:clicked', (e) => {
            e.stopImmediatePropagation();
            this.open = false;
        });
    }
    static get styles() {
        return css `
      :host {
        width: 100%;
        color:  teal;
        font-family: var(--regularFont, 'Arial Round MT');
        font-size: 1.5rem;
      }
      :host * {
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        -webkit-tap-highlight-color: transparent; 
        cursor: pointer;
      }
      :host :focus {
        outline: none;
      }
      :host summary::-webkit-details-marker {
        display: none;
      }
      details {
        max-width: 100%;
      }
      details:not([open]) > summary:hover {
        filter: brightness(120%);
      }
      details[open] > summary {
        border-radius: var(--selectOpenedRadius, 10px 10px 0 0 )
      }
      summary {
        display: flex;
        place-content: space-between;
        position: relative;
        background-color: var(--selectBC, #fafafa);
        padding: var(--selectPadding, 8px);
        max-width: 100%;
        transition: filter var(--transitionTiming), border-radius var(--transitionTiming);
        border-radius: var(--selectRadius, 10px);
        z-index: 5;
      }
      summary > * {
        align-self: center;
        fill: currentColor;
      }
      nav {
        position: absolute;
        left:0;
        top:0;
        width: 100%;
        transform: scaleY(0);
        transform-origin: top center;
        filter: opacity(0);
        transition: transform var(--transitionTiming), filter var(--transitionTiming);
        z-index: 1;
      }
      details[open] summary > nav {
        transform: scaleY(1) translateY(var(--selectDropOffset, 0));
        filter: opacity(1);
      }
    `;
    }
    render() {
        return html `
      <details ?open=${this.open} @toggle=${this.handleToggle}>
        <summary>
          <span>${this.placeholder}</span>
          <bkj-icon name="unfold-less-horizontal" size="20px"></bkj-icon>
          <nav>
            <slot></slot>
          </nav>
        </summary>
      </details>
    `;
    }
};
__decorate([
    property({ type: String })
], BkjSelect.prototype, "placeholder", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], BkjSelect.prototype, "open", void 0);
BkjSelect = __decorate([
    customElement('bkj-select')
], BkjSelect);

let BkjSwitch = class BkjSwitch extends LitElement {
    constructor() {
        super(...arguments);
        this.pressed = false;
    }
    connectedCallback() {
        super.connectedCallback();
        this.setAttribute('role', 'button');
        this.setAttribute('tabindex', '0');
        this.setAttribute('aria-pressed', this.pressed.toString());
        this.addEventListener('click', (e) => {
            e.preventDefault();
            this.initPressedState(!this.pressed);
        });
    }
    initPressedState(isPressed) {
        if (isPressed) {
            this.setAttribute('aria-pressed', 'true');
            this.pressed = true;
            this.$switch.classList.add('on');
        }
        else {
            this.setAttribute('aria-pressed', 'false');
            this.pressed = false;
            this.$switch.classList.remove('on');
        }
    }
    firstUpdated() {
        this.initPressedState(this.pressed);
    }
    handleUpdate(oldV, propName) {
        if (!this.pressed) {
            this.$switch.classList.remove('on');
            this.setAttribute('aria-pressed', 'false');
        }
        else {
            this.$switch.classList.add('on');
            this.setAttribute('aria-pressed', 'true');
        }
    }
    updated(prop) {
        prop.forEach(this.handleUpdate.bind(this));
    }
    static get styles() {
        return css `
      :host {
        display: flex;
        width: max-content;
        height: max-content;
        cursor: pointer;
        --switchSize: 20px;
        --switchOffset: 2px;
        --_padding_: calc(var(--switchOffset) / 2)
      }
      :host(:focus) {
       outline: unset;
      }
      #switch {
        
        display: flex;
        width: calc(var(--switchSize) * 2);
        height: calc(var(--switchSize) + var(--switchOffset));
        border-radius: 20px;
        background-color: var(--switchBaseBC, #fafafa);
        position: relative;
        box-sizing: border-box;
        justify-content: space-around;
        transition: background-color .2s ease-out;
      }
      #switch::before {
        content: '';
        position: absolute;
        left: 0;
        box-sizing: border-box;
        place-self: center;
        width: var(--switchSize);
        height: var(--switchSize);
        border-radius: 50px;
        background-color: var(--switchBC, #d6d6d6);
        border: 2px solid var(--switchBorder, teal);
        transition: border-color .2s ease-out, background-color .2s ease-out;
        animation: moveleft .3s ease-out forwards;
        transform-origin: top right;
      }
      #switch.on::before {
        transform-origin: bottom right;
        border-color: var(--switchBorder, crimson);
        animation: moveright .3s ease-out forwards;
      }

      #switch.on > slot[name="off"] {
        filter: opacity(0);
        transform: scale(0);
      }
      #switch:not(.on) > slot[name="on"] {
        filter: opacity(0);
        transform: scale(0);
      }

      slot {
        display: flex;
        place-content: center;
        fill: gray;
        filter: opacity(1);
        transition: filter .2s ease, transform .2s ease-out;
      }
      slot::slotted(*) {
        place-self: center;   
        display: flex;   
      }

      @keyframes moveleft{
        0% {
          transform:scaleX(1.2) translateX( var(--_padding_));
        }
        35% {
          height: calc(var(--switchSize)/2);
        }
        100% {
          transform: scaleX(1) translateX(calc(100% - var(--_padding_)));
        }
      }
      @keyframes moveright{
        0% {
          transform: scaleX(1.2) translateX(calc(100% - var(--_padding_)));
        }
        35% {
          height: calc(var(--switchSize)/2);
        }
        100% {
          transform: scaleX(1) translateX( var(--_padding_));
        }
      }
    `;
    }
    render() {
        return html `
      <section id="switch">
        <slot name="off"></slot>
        <slot name="on"></slot>
      </section>
    `;
    }
};
__decorate([
    property({ type: Boolean, reflect: true })
], BkjSwitch.prototype, "pressed", void 0);
__decorate([
    query('#switch')
], BkjSwitch.prototype, "$switch", void 0);
BkjSwitch = __decorate([
    customElement('bkj-switch')
], BkjSwitch);

let BkjField = class BkjField extends LitElement {
    constructor() {
        super(...arguments);
        this.type = 'text';
        this.label = 'Label';
    }
    connectedCallback() {
        super.connectedCallback();
    }
    firstUpdated() {
    }
    get value() {
        return this.$input.value;
    }
    static get styles() {
        return css `
      :host {
        display: flex;
        width: 100%;
        height: max-content;
        --fieldFont: 'Arial Rounded MT';
        --labelFont: var(--fieldFont);
      }
      #field {
        display: flex;
        flex-direction: column;
        width: 100%;
      }
      #field > * {
        margin: 8px 0
      }
      #input {
        font-family: var(--fieldFont);   
        outline: none;
        padding: 10px;
        border-radius: 10px;
        border: none;
        box-sizing: border-box;
        width: 100%;
        color: var(--inputColor, black);
        background: var(--inputBC, #fafafa);
        transition: filter .3s ease-in-out;
      }
      #input:focus {
        filter: drop-shadow(0px 0px 3px var(--fieldFocusOutline, teal))
      }
      label {
        font-family: var(--fieldFont);   
        color: var(--labelColor, #fafafa);
        font-size: 14px;
      }
    `;
    }
    render() {
        const { type, label } = this;
        return html `
      <section id="field">
        <label for="input">${label}</label>
        <input type=${type} id="input" />
      </section>
    `;
    }
};
__decorate([
    property({ type: String, reflect: true })
], BkjField.prototype, "type", void 0);
__decorate([
    property({ type: String, reflect: true })
], BkjField.prototype, "label", void 0);
__decorate([
    query('#input')
], BkjField.prototype, "$input", void 0);
BkjField = __decorate([
    customElement('bkj-field')
], BkjField);

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
const reaction = Symbol('LitMobxRenderReaction');
const cachedRequestUpdate = Symbol('LitMobxRequestUpdate');
/**
 * A class mixin which can be applied to lit-element's
 * [UpdatingElement](https://lit-element.polymer-project.org/api/classes/_lib_updating_element_.updatingelement.html)
 * derived classes. This mixin adds a mobx reaction which tracks the update method of UpdatingElement.
 *
 * Any observables used in the render template of the element will be tracked by a reaction
 * and cause an update of the element upon change.
 *
 * @param constructor the constructor to extend from to add the mobx reaction, must be derived from UpdatingElement.
 */
function MobxReactionUpdate(constructor) {
    var _a, _b;
    return _b = class MobxReactingElement extends constructor {
            constructor() {
                super(...arguments);
                this[_a] = () => {
                    this.requestUpdate();
                };
            }
            connectedCallback() {
                super.connectedCallback();
                const name = this.constructor.name /* c8 ignore next */ || this.nodeName;
                this[reaction] = new Reaction(`${name}.update()`, this[cachedRequestUpdate]);
                if (this.hasUpdated)
                    this.requestUpdate();
            }
            disconnectedCallback() {
                super.disconnectedCallback();
                if (this[reaction]) {
                    this[reaction].dispose();
                    this[reaction] = undefined;
                }
            }
            update(changedProperties) {
                if (this[reaction]) {
                    this[reaction].track(super.update.bind(this, changedProperties));
                }
                else {
                    super.update(changedProperties);
                }
            }
        },
        _a = cachedRequestUpdate,
        _b;
}

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
/**
 * A LitElement derived class which uses the MobxReactionUpdate mixin to create a mobx
 * reactive implementation of LitElement.
 *
 * Any observables used in the render template of the element will be tracked by a reaction
 * and cause an update of the element upon change.
 */
class MobxLitElement extends MobxReactionUpdate(LitElement) {
}

const CLEANUP_PARTS_MS = 1000 * 60;
const LANG_CHANGED_EVENT = "langChanged";

/**
 * Interpolates the values into the string.
 * @param text
 * @param values
 * @param config
 */
function interpolate(text, values, config) {
    return Object.entries(extract(values || {})).reduce((text, [key, value]) => text.replace(new RegExp(`{{[  ]*${key}[  ]*}}`, `gm`), String(extract(value))), text);
}
/**
 * Returns a string based on a chain of keys using the dot notation.
 * @param key
 * @param config
 */
function lookup(key, config) {
    // Split the key in parts (example: hello.world)
    const parts = key.split(".");
    // Find the string by traversing through the strings matching the chain of keys
    let string = config.strings;
    // Shift through all of the parts of the key while matching with the strings.
    // Do not continue if the string is not defined or if we have traversed all of the key parts
    while (string != null && parts.length > 0) {
        string = string[parts.shift()];
    }
    // Make sure the string is in fact a string!
    return string != null ? string.toString() : null;
}
/**
 * Extracts either the value from the function or returns the value that was passed in.
 * @param obj
 */
function extract(obj) {
    return (typeof obj === "function") ? obj() : obj;
}

/**
 * Default configuration object.
 */
const defaultTranslateConfig = () => {
    return {
        loader: () => Promise.resolve({}),
        empty: key => `[${key}]`,
        lookup: lookup,
        interpolate: interpolate,
        translationCache: {}
    };
};
// The current configuration.
let translateConfig = defaultTranslateConfig();
/**
 * Registers a translation config.
 * @param config
 */
function registerTranslateConfig(config) {
    return (translateConfig = Object.assign(Object.assign({}, translateConfig), config));
}
/**
 * Dispatches a language changed event.
 * @param detail
 */
function dispatchLangChanged(detail) {
    window.dispatchEvent(new CustomEvent(LANG_CHANGED_EVENT, { detail }));
}
/**
 * Updates the configuration object with a new language and strings.
 * Then dispatches that the language has changed.
 * @param newLang
 * @param newStrings
 * @param config
 */
function updateLang(newLang, newStrings, config = translateConfig) {
    dispatchLangChanged({
        previousStrings: config.strings,
        previousLang: config.lang,
        lang: (config.lang = newLang),
        strings: (config.strings = newStrings)
    });
}
/**
 * Listens for changes in the language.
 * Returns a method for unsubscribing from the event.
 * @param callback
 * @param options
 */
function listenForLangChanged(callback, options) {
    const handler = (e) => callback(e.detail);
    window.addEventListener(LANG_CHANGED_EVENT, handler, options);
    return () => window.removeEventListener(LANG_CHANGED_EVENT, handler);
}
/**
 * Sets a new current language and dispatches a global language changed event.
 * @param lang
 * @param config
 */
async function use(lang, config = translateConfig) {
    // Load the translations and set the cache
    const strings = await config.loader(lang, config);
    config.translationCache = {};
    // Dispatch global language changed event while setting the new values
    updateLang(lang, strings, config);
}
/**
 * Translates a key and interpolates if values are defined.
 * Uses the current strings and translation cache to fetch the translation.
 * @param key (eg. "common.get_started")
 * @param values (eg. { count: 42 })
 * @param config
 */
function get(key, values, config = translateConfig) {
    // Either use the translation from the cache or get it and add it to the cache
    let translation = config.translationCache[key]
        || (config.translationCache[key] = config.lookup(key, config) || config.empty(key, config));
    // Extract the values
    values = values != null ? extract(values) : null;
    // Interpolate the values and return the translation
    return values != null ? config.interpolate(translation, values, config) : translation;
}

/** #################################################################################
 ** The purpose of this module is to provide an API to clean up the node parts cache.
 ** This is to avoid memory leaks from parts being added and removed to the template.
 ** This is necessary since lit-html currently do not provide a way of cleaning up after a directive.
 ** In the ideal world we would be able to cache the parts in a weakmap, however that makes
 ** us unable to loop over the map which is required for updating the translations when the lang changes.
 ** This module will be obsolete the day lit-html provides a way of cleaning up after a directive
 ** ##################################################################################

/**
 * Check whether the part is still connected / has been removed from the DOM.
 * @param part
 */
function isConnected(part) {
    if (part instanceof NodePart) {
        return part.startNode.isConnected;
    }
    else if (part instanceof AttributePart) {
        return part.committer.element.isConnected;
    }
    else {
        return part.element.isConnected;
    }
}
/**
 * Removes the disconnected parts from the cache.
 */
function removeDisconnectedParts(map) {
    for (const [part] of map) {
        if (!isConnected(part)) {
            map.delete(part);
        }
    }
}
/**
 * Invokes a callback when the browser is idle.
 * Fallback to setTimeout.
 * @param cb
 */
function whenIdle(cb) {
    "requestIdleCallback" in window ? window.requestIdleCallback(cb) : setTimeout(cb);
}
/**
 * Starts an interval that cleans up the part cache map each X ms.
 * @param map
 * @param ms
 */
function attachPartsGarbageCollector(map, ms) {
    setInterval(() => whenIdle(() => removeDisconnectedParts(map)), ms);
}

// Caches the parts and the translations.
// In the ideal world this would be a weakmap, but it is not possible to loop over weakmaps.
// This is the best solution until lit-html provides an API to clean up after directives.
const partCache = new Map();
/**
 * Listens for changes in the language and updates all of the cached parts if necessary
 */
function attachTranslateListener() {
    listenForLangChanged((e) => {
        for (const [part, cb] of partCache) {
            if (isConnected(part)) {
                updatePart(part, cb, e);
            }
        }
    });
}
attachTranslateListener();
attachPartsGarbageCollector(partCache, CLEANUP_PARTS_MS);
/**
 * Handles the translation.
 * @param part
 * @param cb
 * @param e
 */
function updatePart(part, cb, e) {
    // Grab the new value
    const newValue = cb(e);
    // Only set the value if it has changed
    if (part.value === newValue) {
        return;
    }
    // Set the new value
    part.setValue(newValue);
    part.commit();
}
/**
 * A lit directive that invokes the callback when the language changes.
 * @param key
 * @param values
 * @param listen
 */
const langChanged = directive((cb) => (part) => {
    partCache.set(part, cb);
    updatePart(part, cb);
});

/**
 * A lit directive that updates the translation when the language changes.
 * @param key
 * @param values
 * @param config
 */
const translate = (key, values, config) => langChanged(() => get(key, values, config));

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
// For each part, remember the value that was last rendered to the part by the
// unsafeHTML directive, and the DocumentFragment that was last set as a value.
// The DocumentFragment is used as a unique key to check if the last value
// rendered to the part was with unsafeHTML. If not, we'll always re-render the
// value passed to unsafeHTML.
const previousValues = new WeakMap();
/**
 * Renders the result as HTML, rather than text.
 *
 * Note, this is unsafe to use with any user-provided input that hasn't been
 * sanitized or escaped, as it may lead to cross-site-scripting
 * vulnerabilities.
 */
const unsafeHTML = directive((value) => (part) => {
    if (!(part instanceof NodePart)) {
        throw new Error('unsafeHTML can only be used in text bindings');
    }
    const previousValue = previousValues.get(part);
    if (previousValue !== undefined && isPrimitive(value) &&
        value === previousValue.value && part.value === previousValue.fragment) {
        return;
    }
    const template = document.createElement('template');
    template.innerHTML = value; // innerHTML casts to string internally
    const fragment = document.importNode(template.content, true);
    part.setValue(fragment);
    previousValues.set(part, { value, fragment });
});

/**
 * A lit directive that updates the translation and renders embedded HTML markup when the language changes.
 * @param key
 * @param values
 * @param config
 */
const translateUnsafeHTML = (key, values, config) => langChanged(() => unsafeHTML(get(key, values, config)));

function initDarkmode(callback, cssVarName = "darkmode", localStorageKeyName = cssVarName) {
    if (globalThis.localStorage.getItem(localStorageKeyName)) {
        !(globalThis.localStorage.getItem(localStorageKeyName) === 'true')
            ? document.documentElement.classList.remove(cssVarName)
            : document.documentElement.classList.add(cssVarName);
    }
    else if (globalThis.matchMedia("(prefers-color-scheme: dark)").matches) {
        document.documentElement.classList.add(cssVarName);
        globalThis.localStorage.setItem(localStorageKeyName, 'true');
    }
    else
        globalThis.localStorage.setItem(localStorageKeyName, 'false');
    callback(globalThis.localStorage.getItem(localStorageKeyName));
}
function switchDarkmode(callback, cssVarName = "darkmode", localStorageKeyName = cssVarName) {
    document.documentElement.classList.toggle(cssVarName);
    !(globalThis.localStorage.getItem(localStorageKeyName) === 'true')
        ? globalThis.localStorage.setItem(localStorageKeyName, 'true')
        : globalThis.localStorage.setItem(localStorageKeyName, 'false');
    callback(globalThis.localStorage.getItem(localStorageKeyName));
}

const card = css `
  :host {
    display: flex;
    flex-direction: column;
    place-content: center flex-start;
    box-shadow: var(--shadow); 
    padding: calc(var(--padding)*0.65) var(--padding);
    color: var(--color);
    background-color: var(--bgColor);
    border-radius: var(--radius);
    border-left: solid 7px var(--secondary);
  }
`;
const noSelect = css `
  .noSelect {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-tap-highlight-color: transparent;
  }
`;
const ol = css `
  ol {
    padding-inline-start: 20px; 
    margin-top: 0;
  }
  li {
    text-transform: capitalize;
  }
`;
const frost = css `
@supports(backdrop-filter: blur(30px)) {
  .frost {
    backdrop-filter: blur(30px) saturate(125%);
  }
}
`;
const dropShadow = css `.drop-shadow {filter: drop-shadow(0px 0px 5px var(--secondary));}`;
const flex = css `.flex {display: flex;}`;
const rowWrap = css `.row-wrap {flex-flow: row wrap;}`;
const flexCol = css `
  .flex-col {
    display: flex;
    flex-direction: column;
  }
`;
const opacity5 = css `.opa-5 {filter: opacity(.5)}`;
const opacity8 = css `.opa-8 {filter: opacity(.8)}`;
const icSecondary = css `.ic-secondary{fill:var(--secondary)}`;
const fcSecondary = css `.fc-secondary{color:var(--secondary)}`;
const bgPrimary = css `.bg-primary{background-color:var(--primary)}`;
const contentBetween = css `.content-between{place-content: space-between}`;
const contentAround = css `.content-around{place-content: space-around}`;
const contentCenter = css `.content-center {place-content: center;}`;
const contentEnd = css `.content-end {place-content: flex-end;}`;
const contentStart = css `.content-start {place-content: flex-start;}`;
const selfCenter = css `.self-center{align-self: center}`;
const selfBase = css `.self-base{place-self:baseline}`;
const maxW = css `.max-w{width:100%}`;
const fitW = css `.fit-w{width:fit-content}`;
const fitH = css `.fit-h{height:fit-content}`;
const hanFont = css `.han-font{font-family:var(--hanFont); font-size: 1.3em}`;
const subFont = css `.sub-font{font-family:var(--subFont)}`;
const headingFont = css `.heading-font{font-family:var(--headingFont)}`;
const marginRight = css `.mr5 {margin-right: 5px}`;
const marginLeft = css `.ml5 {margin-left: 5px}`;
const animePulse = css `
  .anime-pulse {
    animation: animepulse 1s ease-in-out infinite alternate;
  }
  @keyframes animepulse {
      from {
        transform: scale(.8);
        filter: opacity(.4);
      }
      to {
        transform: scale(1.2);
        filter: opacity(.7);
      }
    }
`;
const animeSimpulse = css `
  .anime-simpulse {
    animation: simpulse 1s ease-in-out .5s infinite alternate;
  }

  @keyframes simpulse {
    from {
      transform: scale(1);
      }
    to {
      transform: scale(1.04);
      filter: saturate(110%)
    }
  }
`;

let xHeader = class xHeader extends MobxLitElement {
    connectedCallback() {
        const _super = Object.create(null, {
            connectedCallback: { get: () => super.connectedCallback }
        });
        return __awaiter(this, void 0, void 0, function* () {
            _super.connectedCallback.call(this);
            yield auth.onAuthStateChanged(user => {
                if (user)
                    state.setUser(user);
            });
        });
    }
    handleThemeSwitch(e) {
        e.preventDefault();
        switchDarkmode(mode => mode === 'true'
            ? state.setMode('darkmode')
            : state.setMode('lightmode'));
    }
    handleChangeLang(e) {
        e.stopImmediatePropagation();
        use(e.detail.value);
        setLang(e.detail.value);
        state.setLang(e.detail.value);
    }
    handleLogout() {
        state.killUser();
        globalThis.localStorage.removeItem('usr_avatar');
        auth.signOut();
    }
    static get styles() {
        return [dropShadow, flexCol, flex, contentStart, contentCenter, selfCenter, icSecondary, maxW, fitH, contentEnd, subFont, headingFont, animePulse, animeSimpulse, contentAround, css `
      :host{
        display: flex;
        flex-flow: row wrap;
        justify-content: space-between;
        background-color: var(--primary);
        height: max-content;
        box-shadow: 1px -5px 20px var(--black);
        padding: var(--padding);
        border-radius: 0 0 25px 25px;
        backdrop-filter: blur(30px) saturate(125%);
      }
      .branding {
        margin: 0 var(--padding);
      }
      .branding h1, .branding h2 {
        margin-block-start: 0;
        margin-block-end: 0;
        margin-inline-start: 0;
        margin-inline-end: 0;
      }
      .branding h1 {
        font-size: 1.6rem;
      }
      .branding h2 {
        font-size: 1.3rem;
      }
      .commands {
        position: absolute;
        top: 10px;
        right: 10px;
      }
      bkj-button {
        background-color: var(--primary);
        --buttonW: 35px;
        --buttonH: 35px;
        --buttonRadius: 50%;
      }
      .switcher {
        transition: transform var(--transitionTiming);
        transform: rotate(var(--colorModeSwitcherIconRotate))
      }
      #inputcontainer {
        width: 90%;
        transition: width var(--transitionTiming);
      }
      #inputcontainer.shrinked {
        width: 85%;
      } 
      search-bar {
        transform: translateY(5px);
      }
      .shrinked search-bar{
        transform: translateY(0px)
      }
      bkj-rich-menu[open] #toggle {
        background-color: var(--bgColor)
      }
      bkj-rich-menu {
        width: max-content;
        font-family: var(--regularFont);
        color: var(--color);
        --bkj-menu-rad: 0;
        --bkj-menu-backcolor: var(--bgColor);
      }
      bkj-rich-menu span {
        padding: 10px;
      }
      bkj-rich-menu bkj-button {
        --buttonBC: var(--primary);
        --buttonFC: var(--primary);
        --buttonHoverFC: var(--primary);
        --buttonFocusOutline: transparent;
      }
      bkj-rich-menu bkj-icon {
         fill: var(--secondary);
      }
      .bkj-list {
        margin-top: 40px;
      }
      bkj-rich-menu li {
        display: flex;
        place-content: start;
        align-items: center;
        font-family: var(--regularFont);
        color: var(--color);
        padding: calc(var(--padding)*.8) calc(var(--padding)/2);
        border-radius: calc(var(--radius)*2);
        background-color: var(--bgColorContrasted);
        margin: calc(var(--padding) / 2) 0;
        transition: filter var(--transitionTiming);
      }
      bkj-rich-menu li:not(#userbox):hover {
        filter: brightness(110%)
      }
      bkj-rich-menu li > bkj-button, bkj-switch {
        margin-right: 10px;
      }
      #userbox {
        place-content: center;
      }
      #userbox.logged bkj-button.navbtn{
        margin: 0px auto 0 20px;
      }
      #userbox bkj-button.navbtn {
        background-color: var(--bgColorContrasted);  
        margin: 0px auto;
        --buttonBorderStyle : 2px solid;
        --buttonFocusOutline: var(--color);
        --buttonPadding: 50px;
        --buttonW: 80px;
        --buttonH: 80px;
        --buttonRadius: 50%;
        --buttonBC: var(--bgColorContrasted);
      }
      #userbox img {
        height: var(--buttonH);
        border-radius: 50%;
        z-index:2;
      }
      #userbox .bubble {
        height: var(--buttonH);
        width: var(--buttonW);
        border-radius: 50%;
        background-color: var(--secondary);
        position: absolute;
        z-index:0;
      } 
      #userbox .bubble:nth-child(2) {
        --offset: 5px;
        height: calc(var(--buttonH) + var(--offset));
        width: calc(var(--buttonW) + var(--offset));
        background-color: var(--primary);
        z-index: 1;
        animation-delay: .1s;
      }
      #userbox .greeting {
        margin-bottom: 10px;
        font-style: italic;
        filter: opacity(0.8);
      }
      .submenu {
        margin-right: 20px
      }
      .submenu bkj-icon {
        fill: var(--primary)
      }
      .submenu bkj-button {
        background-color: var(--bgColor);
        --buttonW: fit-content;
        --buttonH: 35px;
        --buttonRadius: var(--radius);
        margin-bottom: 5px;
        --buttonBC: var(--secondary);
        --buttonFC: var(--primary);
      }
 
      #toggle {
        --buttonFocusOutline: transparent;
        --buttonHoverBC: transparent;
      }
      

      #changelang{
        background-color: transparent;
        padding: 0;
        font-size: .5em;
        
        --selectDropOffset: 45px;
        --selectRadius: calc(var(--radius)*2);
        --selectOpenedRadius: calc(var(--radius)*2) calc(var(--radius)*2) 0 0;
        --firstRadioRadius: 0;
        --selectBC: var(--bgColorContrasted);
        --selectPadding: calc(var(--padding)*0.8) calc(var(--padding)/2);
      }
      bkj-select {
        font-size: 1rem;color: var(--color);
      }
      bkj-radio-group {
        --radiosBg: var(--bgColorContrasted);
      }

      bkj-switch {
        --switchOffset: 5px;
        --switchSize: 30px;
        --switchBaseBC: var(--primary);
        --switchBC: var(--secondary);
        --switchBorder: var(--bgColor);
      }

      li.leave {
        margin-top: auto;
      }
      li.leave bkj-icon {
        fill: crimson;
      }
    `];
    }
    render() {
        const local = {
            "en": "English",
            "fr": "Français",
            "ko": "한국어",
            "ja": "日本語"
        };
        const { handleThemeSwitch } = this;
        const brandingSection = html `
      <section class="branding flex-col content-start">
        <h1 class="heading-font">
          <bkj-icon name="dictionary" provider="local" size="35px"></bkj-icon>
          Memoja
        </h1>
        <h2 class="sub-font">${translate('HEADER.HANJA_DICTIONNARY')}</h2>
      </section>
    `;
        return html `
      ${state.page === 'home' ? brandingSection : null}
      <section id="inputcontainer" class=${state.page !== 'home' ? 'flex self-center content-center shrinked' : 'flex self-center content-center'}>
        <search-bar class="max-w"></search-bar>
      </section>
      <section class="commands flex fit-h content-end">

        <bkj-rich-menu>
            <bkj-button id="toggle" round flat slot="heading">
              <bkj-icon slot="icon" class="ic-secondary" name="menu" provider="local"></bkj-icon>
            </bkj-button>
           <ul data-path="/root">
                ${state.user
            ? html `
                    <li id="userbox" class="flex-col logged">
                      <div class="sub-font greeting">${translate('MENU.GREETING', { name: () => state.user.displayName })}</div>
                      <section class="flex content-around max-w">
                        <bkj-button class="navbtn" round>
                          <div class="bubble anime-pulse"></div>
                          <div class="bubble anime-pulse"></div>
                          <img class="anime-simpulse" slot="icon" src=${globalThis.localStorage.getItem('usr_avatar')} />
                        </bkj-button>
                        <section class="flex-col submenu">
                          <bkj-button icon="after"  @click=${() => Router.go("/favourites")}>
                              <span>${translate('MENU.FAVOURITES')}</span>
                              <bkj-icon slot="icon" class="drop-shadow"  name="view-list-outline"></bkj-icon>
                          </bkj-button>
                          <bkj-button icon="after" disabled>
                              <span>${translate('MENU.PROFILE')} soon...</span>
                              <bkj-icon slot="icon" class="drop-shadow"  name="account-outline"></bkj-icon>
                          </bkj-button>
                        </section>
                      </section>
                    </li>
                  `
            : html `
                    <li id="userbox" class="flex-col" @click=${() => Router.go('/login')}>
                      <div class="self-center heading-font fit-w greeting">${translate('MENU.LOGIN')}</div>
                      <bkj-button class="navbtn">
                          <bkj-icon slot="icon" class="drop-shadow" size="80px" name="account-outline"></bkj-icon>
                      </bkj-button>
                      
                    </li>
                  `}
                <li @click=${() => Router.go('/')}>
                    <bkj-button round  class="navbtn">
                        <bkj-icon slot="icon" class="drop-shadow" name="home"></bkj-icon>
                    </bkj-button>
                    <div>${translate('MENU.HOME')}</div>
                </li>
                <li @click=${() => Router.go('/about')}>
                    <bkj-button round  class="navbtn">
                        <bkj-icon slot="icon" class="drop-shadow" name="information-variant"></bkj-icon>
                    </bkj-button>
                    <div>${translate('MENU.ABOUT')}</div>
                </li>
                <li data-path="root/options">
                    <bkj-button round class="navbtn">
                        <bkj-icon slot="icon" class="drop-shadow" name="cog"></bkj-icon>
                    </bkj-button>
                    <div>${translate('MENU.SETTINGS')}</div>
                </li>
                ${state.user && html `
                    <li class="leave" @click=${this.handleLogout}>
                      <bkj-button round class="navbtn">
                        <bkj-icon slot="icon" class="drop-shadow" name="logout"></bkj-icon>
                      </bkj-button>
                      <div>${translate('MENU.LOGOUT')}</div>
                    </li> 
                  `}
            </ul>


            <ul slot="parts" data-path="root/options">
                <li data-path="options/root">
                    <bkj-button round class="navbtn">
                        <bkj-icon slot="icon" class="drop-shadow" name="chevron-left"></bkj-icon>
                    </bkj-button>
                    <div>${translate('MENU.BACK')}</div>
                </li>
                <li data-path="options/language">
                    <bkj-button round class="navbtn">
                        <bkj-icon slot="icon" class="drop-shadow" name="translate"></bkj-icon>
                    </bkj-button>
                    <div>${translate('MENU.LANGUAGE')}</div>
                </li>
                <li data-path="options/theme">
                    <bkj-button class="navbtn">
                        <bkj-icon slot="icon" class="drop-shadow" name="palette"></bkj-icon>
                    </bkj-button>
                    <div>${translate('MENU.THEME')}</div>
                </li>
            </ul>
            
            <ul slot="parts" data-path="options/language">
                <li data-path="language/options">
                    <bkj-button round class="navbtn">
                        <bkj-icon slot="icon" class="drop-shadow" name="chevron-left"></bkj-icon>
                    </bkj-button>
                    <div>${translate('MENU.SETTINGS')}</div>
                </li>
                <li id="changelang">
                  <bkj-select placeholder=${local[state.lang]}>
                    <bkj-radio-group @bkjRadio:changed=${this.handleChangeLang}>
                      <bkj-radio ?checked=${getLang === 'en'} value="en">${local["en"]}</bkj-radio>
                      <bkj-radio ?checked=${getLang === 'fr'} value="fr">${local["fr"]}</bkj-radio>
                      <bkj-radio ?checked=${getLang === 'ko'} value="ko">${local["ko"]}</bkj-radio>
                      <bkj-radio ?checked=${getLang === 'ja'} value="ja">${local["ja"]}</bkj-radio>
                    </bkj-radio-group>
                  </bkj-select>
                </li>
            </ul>

            <ul slot="parts" data-path="options/theme">
                <li data-path="theme/options">
                    <bkj-button round class="navbtn">
                        <bkj-icon slot="icon" class="drop-shadow" name="chevron-left"></bkj-icon>
                    </bkj-button>
                    <div>${translate('MENU.SETTINGS')}</div>
                </li>
                <li @click=${handleThemeSwitch}>
                    <bkj-switch  ?pressed=${state.mode === "lightmode"}>
                      <bkj-icon slot="on" name="weather-sunny"></bkj-icon>
                      <bkj-icon slot="off" name="weather-night"></bkj-icon>
                    </bkj-switch>
                    <div>${state.mode === 'darkmode' ? translate('MENU.MODE_DARK') : translate('MENU.MODE_LIGHT')}</div>
                </li>
            </ul>

        </bkj-rich-menu>
      </section>
    `;
    }
};
xHeader = __decorate([
    customElement('x-header')
], xHeader);

let xFooter = class xFooter extends MobxLitElement {
    static get styles() {
        return css `
      :host {
        display: flex;
        flex-direction: column;
        place-content: center;
        background-color: var(--secondary);
        height: 100px;
        font-size: 1rem;
        font-family: var(--subFont);
        text-align: center;
        transform: translateY(100%);
      }
    `;
    }
    render() {
        return html `
      Currently v0.0.0. Released under the MIT License.<br/>
      Copyright © 2020 Memoja
    `;
    }
};
xFooter = __decorate([
    customElement('x-footer')
], xFooter);

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
// For each part, remember the value that was last rendered to the part by the
// unsafeSVG directive, and the DocumentFragment that was last set as a value.
// The DocumentFragment is used as a unique key to check if the last value
// rendered to the part was with unsafeSVG. If not, we'll always re-render the
// value passed to unsafeSVG.
const previousValues$1 = new WeakMap();
const isIe = window.navigator.userAgent.indexOf('Trident/') > 0;
/**
 * Renders the result as SVG, rather than text.
 *
 * Note, this is unsafe to use with any user-provided input that hasn't been
 * sanitized or escaped, as it may lead to cross-site-scripting
 * vulnerabilities.
 */
const unsafeSVG = directive((value) => (part) => {
    if (!(part instanceof NodePart)) {
        throw new Error('unsafeSVG can only be used in text bindings');
    }
    const previousValue = previousValues$1.get(part);
    if (previousValue !== undefined && isPrimitive(value) &&
        value === previousValue.value && part.value === previousValue.fragment) {
        return;
    }
    const template = document.createElement('template');
    const content = template.content;
    let svgElement;
    if (isIe) {
        // IE can't set innerHTML of an svg element. However, it also doesn't
        // support Trusted Types, so it's ok for us to use a string when setting
        // innerHTML.
        template.innerHTML = `<svg>${value}</svg>`;
        svgElement = content.firstChild;
    }
    else {
        svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        content.appendChild(svgElement);
        svgElement.innerHTML = value;
    }
    content.removeChild(svgElement);
    reparentNodes(content, svgElement.firstChild);
    const fragment = document.importNode(content, true);
    part.setValue(fragment);
    previousValues$1.set(part, { value, fragment });
});

let CharacterGuidelines = class CharacterGuidelines extends LitElement {
    constructor() {
        super(...arguments);
        this.size = 250;
        this.dashed = 10;
        this.sections = 4;
        this.color = "#69696959";
        this.diagonals = false;
    }
    static get styles() {
        return css `
      :host {
        position: relative;
        display: flex;
      }
      ::slotted(svg) {
        position: absolute;
      }
    `;
    }
    render() {
        const { size, dashed, sections, color, diagonals } = this;
        let horizontal, vertical;
        const cellSize = size / (sections + 1);
        for (let i = sections; i > 0; i--) { //62.5 -> 125 -> 187.5 \ y= 0/250
            horizontal += /*html*/ `<line x1="${cellSize * i}" x2="${cellSize * i}" y1="0" y2="${size}" stroke-dasharray="${dashed}" stroke-linecap="round" stroke="#69696959" />`;
            vertical += /*html*/ `<line y1="${cellSize * i}" y2="${cellSize * i}" x1="0" x2="${size}" stroke-dasharray="${dashed}" stroke-linecap="round" stroke="#69696959" />`;
        }
        return html `
      <svg xmlns="http://www.w3.org/2000/svg" width="${size}" height="${size}" id="grid">
        ${unsafeSVG(horizontal + vertical)}
      </svg>
      <slot></slot>
    `;
    }
};
__decorate([
    property({ type: Number })
], CharacterGuidelines.prototype, "size", void 0);
__decorate([
    property({ type: Number })
], CharacterGuidelines.prototype, "dashed", void 0);
__decorate([
    property({ type: Number })
], CharacterGuidelines.prototype, "sections", void 0);
__decorate([
    property({ type: String })
], CharacterGuidelines.prototype, "color", void 0);
__decorate([
    property({ type: Boolean })
], CharacterGuidelines.prototype, "diagonals", void 0);
CharacterGuidelines = __decorate([
    customElement('character-guidelines')
], CharacterGuidelines);

let FilteringMenu = class FilteringMenu extends MobxLitElement {
    connectedCallback() {
        super.connectedCallback();
    }
    handleExpand() {
        this.$menu.classList.toggle('expanded');
    }
    handleHanjaChange(e) {
        e.stopImmediatePropagation();
        state.setHanjaToFilterOn(e.detail.value);
    }
    handleFilterChange(e) {
        e.stopImmediatePropagation();
        state.setFilter(e.detail.value);
    }
    static get styles() {
        return [flexCol, hanFont, subFont, css `
      :host {
        --buttonH: 50px;
        --buttonW: 50px;
        --offset: 16px;
        position: fixed;
        right: var(--offset);
        bottom: var(--offset);
        height: var(--buttonH);
        width: var(--buttonW);
        z-index: 5;
        -webkit-tap-highlight-color: transparent;
      }
      .fab {filter: drop-shadow(0px 0px 5px var(--color));}
      bkj-button.fab, #menu {
        transition: all var(--transitionTiming);
        --buttonBC: var(--color);
      }
      bkj-button.close {
       --buttonFocusOutline: transparent;
       -webkit-tap-highlight-color: transparent;
      }
      .close, .fab {
        --buttonFC: var(--color);
        --buttonHoverFC: var(--color);
        
      }
      bkj-icon {
        fill: var(--bgColorContrasted);
      }
      #menu.expanded {
        background-color: var(--color);
        transform: scale(1);
        right: 0;
        bottom: 0;
      }
      #menu.expanded + bkj-button.fab {
        transform: scale(0);
      }
      #menu {
        color: var(--bgColorContrasted);
        height: 200px;
        width: calc(100vw - calc(var(--offset) * 2 ));
        transform: scale(0);
        transform-origin: bottom right;
        position: absolute;
        bottom: 10px;
        right: 10px;
        border-radius: calc(var(--buttonH) / 2); /*size of fab / 2*/
        padding: calc(var(--padding) / 4)var(--padding);
        box-sizing: border-box;
        z-index: 6;
      }
      @media screen and (min-width: 860px) {
        #menu {
          width: 360px;
        }
      }
      .close {
        top: 0;
        right: 0;
        position: absolute;
      }
      header {
        font-size: 1rem;
        margin: 0;
        text-align: center;
      }
      main {
        display: flex;
        flex-direction: column;
        padding: var(--padding) 0;
      }
      main label {
        font-size: 1rem;
        margin-bottom: 5px;
      }
      bkj-select {
        --selectBC: var(--bgColorContrasted);
        font-family: var(--regularFont);
        color: var(--color);
        font-size: 1rem;
        margin: var(--padding) 0;
        --lastRadioRadius: 0;
        --selectOpenedRadius: 0 0 calc(var(--radius)*2) calc(var(--radius)*2);
        --selectDropOffset: -100%;
        --selectRadius: calc(var(--radius)*2)
      }
      bkj-radio-group {
        --radiosBg: var(--bgColorContrasted);
      } 
      bkj-select:first-child > bkj-radio-group {
        font-size: 1.8rem;
      }
    `];
    }
    render() {
        const { handleExpand, hanjas, handleHanjaChange, handleFilterChange } = this;
        return html `
      <section id="menu" class="flex-col">
        <header class="sub-font">${translate('FILTER_SETTINGS.TITLE')}</header>
        <main>
        <bkj-select placeholder="Hanja">
          <bkj-radio-group @bkjRadio:changed=${handleHanjaChange} class="han-font">
            ${hanjas.map(hanja => html `<bkj-radio ?checked=${state.hanjaToFilterOn === hanja} value=${hanja}>${hanja}</bkj-radio>`)}
          </bkj-radio-group>
        </bkj-select>
        <bkj-select placeholder="Position">
          <bkj-radio-group @bkjRadio:changed=${handleFilterChange} >
            <bkj-radio ?checked=${state.filter === "start"} value="start">${translate('FILTER_SETTINGS.START')}</bkj-radio>
            <bkj-radio ?checked=${state.filter === "end"} value="end">${translate('FILTER_SETTINGS.END')}</bkj-radio>
            <bkj-radio ?checked=${state.filter === "all"} value="all">${translate('FILTER_SETTINGS.INCLUDE')}</bkj-radio>
          </bkj-radio-group>
        </bkj-select>
        </main>
        <bkj-button round @click=${handleExpand} class="close">
          <bkj-icon slot="icon" name="window-close" size="35px"></bkj-icon>
        </bkj-button>
      </section>
      <bkj-button round @click=${handleExpand} class="fab">
        <bkj-icon slot="icon" name="filter-variant-plus" size="35px"></bkj-icon>
      </bkj-button>
    `;
    }
};
__decorate([
    property({ type: Array })
], FilteringMenu.prototype, "hanjas", void 0);
__decorate([
    query('#menu')
], FilteringMenu.prototype, "$menu", void 0);
FilteringMenu = __decorate([
    customElement('filtering-menu')
], FilteringMenu);

let HanjaCard = class HanjaCard extends LitElement {
    constructor() {
        super(...arguments);
        this.home = false;
    }
    firstUpdated() {
        const docStyle = getComputedStyle(document.documentElement), color = docStyle.getPropertyValue('--secondary');
        this.HanjaWriter = HanziWriter.create(this.$hanja, this.definition.hanja, {
            charDataLoader: (char, onComplete) => __awaiter(this, void 0, void 0, function* () {
                const res = yield fetch(`/assets/data/${char}.json`);
                return yield res.json();
            }),
            width: 250,
            height: 250,
            padding: 5,
            strokeColor: color,
        });
    }
    handleDraw() {
        this.HanjaWriter.animateCharacter();
    }
    handleQuiz() {
        this.HanjaWriter.quiz();
    }
    static get styles() {
        return [dropShadow, card, contentBetween, flex, flexCol, ol, subFont, hanFont, fcSecondary, icSecondary, marginRight, contentCenter, opacity8, selfBase, contentStart, selfBase, css `
      bkj-button {
        --buttonRadius: var(--radius);
        padding: calc(var(--padding)/2);
        --buttonBC: var(--bgColorContrasted);
        --buttonHoverFC: var(--secondary);
        --buttonFocusOutline: transparent;
        --buttonFC: var(--secondary);
      }
      bkj-button > span {
        font-size: .69em;
      }
      .details {
        display: grid;
        grid-template-columns: 50% 50%;
        grid-template-rows: auto auto;
        margin-top: 35px;
        font-size: .6em;
      }
      .korean {
        grid-area: 1 / 1 / auto / auto;
      }
      .strokes {
       grid-area: 1 / 2 / auto / auto;
       margin-left: auto;
      }
      .def {
        grid-area: 2 / 1 / auto / span 2;
      }
      .strokes span {
        text-align: end;
      }
      .eum {
        filter: drop-shadow(0px 0px 5px var(--secondary));
      }
      i {
        font-size: 0.8rem;
      }
     li {
       font-size: .95em;
     }
    `];
    }
    render() {
        const { handleDraw, handleQuiz } = this;
        return html `
      <header class="flex content-between">
        <bkj-button icon="before" class="self-base mr5" @click=${handleDraw}>
          <bkj-icon slot="icon" class="mr5 ic-secondary drop-shadow" name="calligraphy" provider="local"></bkj-icon>
          <span class="drop-shadow">${translate("HANJA_CARD.PLAY_STROKE")}</span>
        </bkj-button>
        <bkj-button icon="before" class="self-base" @click=${handleQuiz}>
          <bkj-icon slot="icon" class="mr5 ic-secondary drop-shadow" name="calligraphy-hand" provider="local"></bkj-icon>
          <span class="drop-shadow">${translate("HANJA_CARD.WRITE_CHAR")}</span>
        </bkj-button>
      </header>
      <main>
        <section class="flex content-center" id="hanja">
          <character-guidelines id="grid"></character-guidelines>
        </section>
          ${!this.home ? html `<section class="details content-start">
            <section class="korean flex-col self-base">
              <i class="opa-8 fc-secondary sub-font">${translate("HANJA_CARD.MEANING_PRONUNCIATION")}</i>
              <ol>
                ${this.definition.hunum.map(o => html `
                  <li>
                    <span class="han-font">
                      ${o.def} <span class="eum fc-secondary">${o.kor}</span>
                    </span>
                  </li>
                `)}
              </ol>
            </section>
            <section class="strokes flex-col self-base">
            <i class="opa-8 fc-secondary sub-font">${translate("HANJA_CARD.STROKES_NUMBER")}</i>
            <span>${this.definition.strokes}</span>
            </section>
            <section class="def flex-col self-base">
              <i class="opa-8 fc-secondary sub-font">en</i>
              <ol>
                ${this.definition.def.en.map(english => html `<li>${english}</li>`)}
              </ol>
            </section>
          </section>` : html ``}
      </main>
    `;
    }
};
__decorate([
    query('#grid')
], HanjaCard.prototype, "$hanja", void 0);
__decorate([
    property({ type: Object })
], HanjaCard.prototype, "definition", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], HanjaCard.prototype, "home", void 0);
HanjaCard = __decorate([
    customElement('hanja-card')
], HanjaCard);

let WordCard = class WordCard extends LitElement {
    playListening() {
        const utterance = new SpeechSynthesisUtterance(this.word.hangul);
        utterance.lang = 'ko-KR';
        utterance.rate = .5;
        speechSynthesis.speak(utterance);
    }
    get english() {
        return this.word.english.includes(',') || this.word.english.includes(';')
            ? this.word.english.split(/[;,]+/)
            : [this.word.english];
    }
    static get styles() {
        return [dropShadow, icSecondary, card, flex, selfCenter, fitW, hanFont, subFont, ol, contentCenter, fcSecondary, opacity5, opacity8, bgPrimary, css `
      slot[name="title"] {
        margin: 0;
        font-size: .5em !important;
        line-height: 1.6em;
      }
      bkj-button {
        margin: 0 var(--padding);
        --buttonH: 35px;
        --buttonW: 35px;
        --buttonBC: var(--primary);
        --buttonFocusOutline: transparent;
        --buttonHoverFC: transparent;
        filter: drop-shadow(0px 0px 5px var(--primary));
      }
      .hanja {
        font-size: var(--hanjaSize, 1.5em);
        margin: var(--centerHanja, none);
      }
      .hangul {
        font-size: 1em;
        display: var(--displayHangul, block);
      }
      .english {font-size: .6em;}
      i {font-size: .8em;}
     footer {
      margin-top: auto;
      margin-bottom: var(--padding);
     }
     frequency-meter {
       --frequencyMeterColor: var(--secondary)
     }
    `];
    }
    render() {
        const { hanja, hangul, freq_deg } = this.word;
        const { english } = this;
        return html `
      <header class="flex">
        <slot name="title"></slot>
        <bkj-button round class="self-center" @click=${this.playListening}>
          <bkj-icon slot="icon" class="ic-secondary drop-shadow" name="volume-high" ></bkj-icon>
        </bkj-button>
        <frequency-meter class="flex self-center" value=${freq_deg} max=${5666} segments=${5} radius=${2}></frequency-meter>
      </header>
      <main>
        <section class="korean flex han-font">
          <section class="hanja">${deleteDash(hanja)}</section>
          <section class="hangul self-center opa-8">${hangul}</section>
        </section>
        <section class="english">
          <i class="sub-font fc-secondary opa-8">en</i>
          <ol>
            ${english.map(word => html `<li>${word}</li>`)}
          </ol>
        </section>
      </main>
      <footer class="flex content-start">
        <slot name="action"></slot>
      </footer>
    `;
    }
};
__decorate([
    property({ type: Object })
], WordCard.prototype, "word", void 0);
WordCard = __decorate([
    customElement('word-card')
], WordCard);

let FrequencyMeter = class FrequencyMeter extends LitElement {
    constructor() {
        super(...arguments);
        this.height = 10;
        this.width = 20;
        this.gap = 5;
        this.segments = 3;
        this.radius = 5;
    }
    get DEG() {
        const _ = Math.floor(((this.value * this.segments) / this.max));
        return isNaN(_)
            ? 0
            : _;
    }
    static get styles() {
        return css `   
      svg {
        filter: drop-shadow(0px 0px 2px var(--frequencyMeterColor));
      }  
      rect{
        fill: var(--frequencyMeterColor);
        opacity: .2;
        
      }
      rect.clear {
        opacity: 1
      } 
    `;
    }
    render() {
        let _ = [];
        const { height, width, gap, segments, radius, DEG } = this;
        const wholeWidth = (width * segments) + (gap * segments);
        for (let i = 0; i < segments; i++) {
            _.push(`<rect x=${i === 0 ? 0 : (i * width) + (gap * i)} y="0" width=${width} height=${height} rx=${radius} ry=${radius} class="${i <= DEG ? 'clear' : ''}" />`);
        }
        return html `
      <svg viewBox="0 0 ${wholeWidth} ${height}" width="${wholeWidth}px" height="${height}px" xmlns="http://www.w3.org/2000/svg">
        ${_.map(rect => html `${unsafeSVG(rect)}`)}
      </svg>
    `;
    }
};
__decorate([
    property({ type: Number })
], FrequencyMeter.prototype, "height", void 0);
__decorate([
    property({ type: Number })
], FrequencyMeter.prototype, "width", void 0);
__decorate([
    property({ type: Number })
], FrequencyMeter.prototype, "gap", void 0);
__decorate([
    property({ type: Number })
], FrequencyMeter.prototype, "segments", void 0);
__decorate([
    property({ type: Number })
], FrequencyMeter.prototype, "radius", void 0);
__decorate([
    property({ type: Number })
], FrequencyMeter.prototype, "value", void 0);
__decorate([
    property({ type: Number })
], FrequencyMeter.prototype, "max", void 0);
FrequencyMeter = __decorate([
    customElement('frequency-meter')
], FrequencyMeter);

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
// Helper functions for manipulating parts
// TODO(kschaaf): Refactor into Part API?
const createAndInsertPart = (containerPart, beforePart) => {
    const container = containerPart.startNode.parentNode;
    const beforeNode = beforePart === undefined ? containerPart.endNode :
        beforePart.startNode;
    const startNode = container.insertBefore(createMarker(), beforeNode);
    container.insertBefore(createMarker(), beforeNode);
    const newPart = new NodePart(containerPart.options);
    newPart.insertAfterNode(startNode);
    return newPart;
};
const updatePart$1 = (part, value) => {
    part.setValue(value);
    part.commit();
    return part;
};
const insertPartBefore = (containerPart, part, ref) => {
    const container = containerPart.startNode.parentNode;
    const beforeNode = ref ? ref.startNode : containerPart.endNode;
    const endNode = part.endNode.nextSibling;
    if (endNode !== beforeNode) {
        reparentNodes(container, part.startNode, endNode, beforeNode);
    }
};
const removePart = (part) => {
    removeNodes(part.startNode.parentNode, part.startNode, part.endNode.nextSibling);
};
// Helper for generating a map of array item to its index over a subset
// of an array (used to lazily generate `newKeyToIndexMap` and
// `oldKeyToIndexMap`)
const generateMap = (list, start, end) => {
    const map = new Map();
    for (let i = start; i <= end; i++) {
        map.set(list[i], i);
    }
    return map;
};
// Stores previous ordered list of parts and map of key to index
const partListCache = new WeakMap();
const keyListCache = new WeakMap();
/**
 * A directive that repeats a series of values (usually `TemplateResults`)
 * generated from an iterable, and updates those items efficiently when the
 * iterable changes based on user-provided `keys` associated with each item.
 *
 * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,
 * meaning previous DOM for a given key is moved into the new position if
 * needed, and DOM will never be reused with values for different keys (new DOM
 * will always be created for new keys). This is generally the most efficient
 * way to use `repeat` since it performs minimum unnecessary work for insertions
 * and removals.
 *
 * IMPORTANT: If providing a `keyFn`, keys *must* be unique for all items in a
 * given call to `repeat`. The behavior when two or more items have the same key
 * is undefined.
 *
 * If no `keyFn` is provided, this directive will perform similar to mapping
 * items to values, and DOM will be reused against potentially different items.
 */
const repeat = directive((items, keyFnOrTemplate, template) => {
    let keyFn;
    if (template === undefined) {
        template = keyFnOrTemplate;
    }
    else if (keyFnOrTemplate !== undefined) {
        keyFn = keyFnOrTemplate;
    }
    return (containerPart) => {
        if (!(containerPart instanceof NodePart)) {
            throw new Error('repeat can only be used in text bindings');
        }
        // Old part & key lists are retrieved from the last update
        // (associated with the part for this instance of the directive)
        const oldParts = partListCache.get(containerPart) || [];
        const oldKeys = keyListCache.get(containerPart) || [];
        // New part list will be built up as we go (either reused from
        // old parts or created for new keys in this update). This is
        // saved in the above cache at the end of the update.
        const newParts = [];
        // New value list is eagerly generated from items along with a
        // parallel array indicating its key.
        const newValues = [];
        const newKeys = [];
        let index = 0;
        for (const item of items) {
            newKeys[index] = keyFn ? keyFn(item, index) : index;
            newValues[index] = template(item, index);
            index++;
        }
        // Maps from key to index for current and previous update; these
        // are generated lazily only when needed as a performance
        // optimization, since they are only required for multiple
        // non-contiguous changes in the list, which are less common.
        let newKeyToIndexMap;
        let oldKeyToIndexMap;
        // Head and tail pointers to old parts and new values
        let oldHead = 0;
        let oldTail = oldParts.length - 1;
        let newHead = 0;
        let newTail = newValues.length - 1;
        // Overview of O(n) reconciliation algorithm (general approach
        // based on ideas found in ivi, vue, snabbdom, etc.):
        //
        // * We start with the list of old parts and new values (and
        //   arrays of their respective keys), head/tail pointers into
        //   each, and we build up the new list of parts by updating
        //   (and when needed, moving) old parts or creating new ones.
        //   The initial scenario might look like this (for brevity of
        //   the diagrams, the numbers in the array reflect keys
        //   associated with the old parts or new values, although keys
        //   and parts/values are actually stored in parallel arrays
        //   indexed using the same head/tail pointers):
        //
        //      oldHead v                 v oldTail
        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]
        //   newParts: [ ,  ,  ,  ,  ,  ,  ]
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new
        //                                      item order
        //      newHead ^                 ^ newTail
        //
        // * Iterate old & new lists from both sides, updating,
        //   swapping, or removing parts at the head/tail locations
        //   until neither head nor tail can move.
        //
        // * Example below: keys at head pointers match, so update old
        //   part 0 in-place (no need to move it) and record part 0 in
        //   the `newParts` list. The last thing we do is advance the
        //   `oldHead` and `newHead` pointers (will be reflected in the
        //   next diagram).
        //
        //      oldHead v                 v oldTail
        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]
        //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead
        //                                      & newHead
        //      newHead ^                 ^ newTail
        //
        // * Example below: head pointers don't match, but tail
        //   pointers do, so update part 6 in place (no need to move
        //   it), and record part 6 in the `newParts` list. Last,
        //   advance the `oldTail` and `oldHead` pointers.
        //
        //         oldHead v              v oldTail
        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]
        //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail
        //                                      & newTail
        //         newHead ^              ^ newTail
        //
        // * If neither head nor tail match; next check if one of the
        //   old head/tail items was removed. We first need to generate
        //   the reverse map of new keys to index (`newKeyToIndexMap`),
        //   which is done once lazily as a performance optimization,
        //   since we only hit this case if multiple non-contiguous
        //   changes were made. Note that for contiguous removal
        //   anywhere in the list, the head and tails would advance
        //   from either end and pass each other before we get to this
        //   case and removals would be handled in the final while loop
        //   without needing to generate the map.
        //
        // * Example below: The key at `oldTail` was removed (no longer
        //   in the `newKeyToIndexMap`), so remove that part from the
        //   DOM and advance just the `oldTail` pointer.
        //
        //         oldHead v           v oldTail
        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]
        //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail
        //         newHead ^           ^ newTail
        //
        // * Once head and tail cannot move, any mismatches are due to
        //   either new or moved items; if a new key is in the previous
        //   "old key to old index" map, move the old part to the new
        //   location, otherwise create and insert a new part. Note
        //   that when moving an old part we null its position in the
        //   oldParts array if it lies between the head and tail so we
        //   know to skip it when the pointers get there.
        //
        // * Example below: neither head nor tail match, and neither
        //   were removed; so find the `newHead` key in the
        //   `oldKeyToIndexMap`, and move that old part's DOM into the
        //   next head position (before `oldParts[oldHead]`). Last,
        //   null the part in the `oldPart` array since it was
        //   somewhere in the remaining oldParts still to be scanned
        //   (between the head and tail pointers) so that we know to
        //   skip that old part on future iterations.
        //
        //         oldHead v        v oldTail
        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]
        //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance
        //                                      newHead
        //         newHead ^           ^ newTail
        //
        // * Note that for moves/insertions like the one above, a part
        //   inserted at the head pointer is inserted before the
        //   current `oldParts[oldHead]`, and a part inserted at the
        //   tail pointer is inserted before `newParts[newTail+1]`. The
        //   seeming asymmetry lies in the fact that new parts are
        //   moved into place outside in, so to the right of the head
        //   pointer are old parts, and to the right of the tail
        //   pointer are new parts.
        //
        // * We always restart back from the top of the algorithm,
        //   allowing matching and simple updates in place to
        //   continue...
        //
        // * Example below: the head pointers once again match, so
        //   simply update part 1 and record it in the `newParts`
        //   array.  Last, advance both head pointers.
        //
        //         oldHead v        v oldTail
        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]
        //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead
        //                                      & newHead
        //            newHead ^        ^ newTail
        //
        // * As mentioned above, items that were moved as a result of
        //   being stuck (the final else clause in the code below) are
        //   marked with null, so we always advance old pointers over
        //   these so we're comparing the next actual old value on
        //   either end.
        //
        // * Example below: `oldHead` is null (already placed in
        //   newParts), so advance `oldHead`.
        //
        //            oldHead v     v oldTail
        //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:
        //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]
        //               newHead ^     ^ newTail
        //
        // * Note it's not critical to mark old parts as null when they
        //   are moved from head to tail or tail to head, since they
        //   will be outside the pointer range and never visited again.
        //
        // * Example below: Here the old tail key matches the new head
        //   key, so the part at the `oldTail` position and move its
        //   DOM to the new head position (before `oldParts[oldHead]`).
        //   Last, advance `oldTail` and `newHead` pointers.
        //
        //               oldHead v  v oldTail
        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]
        //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,
        //                                     advance oldTail & newHead
        //               newHead ^     ^ newTail
        //
        // * Example below: Old and new head keys match, so update the
        //   old head part in place, and advance the `oldHead` and
        //   `newHead` pointers.
        //
        //               oldHead v oldTail
        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]
        //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &
        //                                      newHead
        //                  newHead ^  ^ newTail
        //
        // * Once the new or old pointers move past each other then all
        //   we have left is additions (if old list exhausted) or
        //   removals (if new list exhausted). Those are handled in the
        //   final while loops at the end.
        //
        // * Example below: `oldHead` exceeded `oldTail`, so we're done
        //   with the main loop.  Create the remaining part and insert
        //   it at the new head position, and the update is complete.
        //
        //                   (oldHead > oldTail)
        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]
        //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]
        //                     newHead ^ newTail
        //
        // * Note that the order of the if/else clauses is not
        //   important to the algorithm, as long as the null checks
        //   come first (to ensure we're always working on valid old
        //   parts) and that the final else clause comes last (since
        //   that's where the expensive moves occur). The order of
        //   remaining clauses is is just a simple guess at which cases
        //   will be most common.
        //
        // * TODO(kschaaf) Note, we could calculate the longest
        //   increasing subsequence (LIS) of old items in new position,
        //   and only move those not in the LIS set. However that costs
        //   O(nlogn) time and adds a bit more code, and only helps
        //   make rare types of mutations require fewer moves. The
        //   above handles removes, adds, reversal, swaps, and single
        //   moves of contiguous items in linear time, in the minimum
        //   number of moves. As the number of multiple moves where LIS
        //   might help approaches a random shuffle, the LIS
        //   optimization becomes less helpful, so it seems not worth
        //   the code at this point. Could reconsider if a compelling
        //   case arises.
        while (oldHead <= oldTail && newHead <= newTail) {
            if (oldParts[oldHead] === null) {
                // `null` means old part at head has already been used
                // below; skip
                oldHead++;
            }
            else if (oldParts[oldTail] === null) {
                // `null` means old part at tail has already been used
                // below; skip
                oldTail--;
            }
            else if (oldKeys[oldHead] === newKeys[newHead]) {
                // Old head matches new head; update in place
                newParts[newHead] =
                    updatePart$1(oldParts[oldHead], newValues[newHead]);
                oldHead++;
                newHead++;
            }
            else if (oldKeys[oldTail] === newKeys[newTail]) {
                // Old tail matches new tail; update in place
                newParts[newTail] =
                    updatePart$1(oldParts[oldTail], newValues[newTail]);
                oldTail--;
                newTail--;
            }
            else if (oldKeys[oldHead] === newKeys[newTail]) {
                // Old head matches new tail; update and move to new tail
                newParts[newTail] =
                    updatePart$1(oldParts[oldHead], newValues[newTail]);
                insertPartBefore(containerPart, oldParts[oldHead], newParts[newTail + 1]);
                oldHead++;
                newTail--;
            }
            else if (oldKeys[oldTail] === newKeys[newHead]) {
                // Old tail matches new head; update and move to new head
                newParts[newHead] =
                    updatePart$1(oldParts[oldTail], newValues[newHead]);
                insertPartBefore(containerPart, oldParts[oldTail], oldParts[oldHead]);
                oldTail--;
                newHead++;
            }
            else {
                if (newKeyToIndexMap === undefined) {
                    // Lazily generate key-to-index maps, used for removals &
                    // moves below
                    newKeyToIndexMap = generateMap(newKeys, newHead, newTail);
                    oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);
                }
                if (!newKeyToIndexMap.has(oldKeys[oldHead])) {
                    // Old head is no longer in new list; remove
                    removePart(oldParts[oldHead]);
                    oldHead++;
                }
                else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {
                    // Old tail is no longer in new list; remove
                    removePart(oldParts[oldTail]);
                    oldTail--;
                }
                else {
                    // Any mismatches at this point are due to additions or
                    // moves; see if we have an old part we can reuse and move
                    // into place
                    const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);
                    const oldPart = oldIndex !== undefined ? oldParts[oldIndex] : null;
                    if (oldPart === null) {
                        // No old part for this value; create a new one and
                        // insert it
                        const newPart = createAndInsertPart(containerPart, oldParts[oldHead]);
                        updatePart$1(newPart, newValues[newHead]);
                        newParts[newHead] = newPart;
                    }
                    else {
                        // Reuse old part
                        newParts[newHead] =
                            updatePart$1(oldPart, newValues[newHead]);
                        insertPartBefore(containerPart, oldPart, oldParts[oldHead]);
                        // This marks the old part as having been used, so that
                        // it will be skipped in the first two checks above
                        oldParts[oldIndex] = null;
                    }
                    newHead++;
                }
            }
        }
        // Add parts for any remaining new values
        while (newHead <= newTail) {
            // For all remaining additions, we insert before last new
            // tail, since old pointers are no longer valid
            const newPart = createAndInsertPart(containerPart, newParts[newTail + 1]);
            updatePart$1(newPart, newValues[newHead]);
            newParts[newHead++] = newPart;
        }
        // Remove any remaining unused old parts
        while (oldHead <= oldTail) {
            const oldPart = oldParts[oldHead++];
            if (oldPart !== null) {
                removePart(oldPart);
            }
        }
        // Save order of new parts for next round
        partListCache.set(containerPart, newParts);
        keyListCache.set(containerPart, newKeys);
    };
});

let WordsList = class WordsList extends MobxLitElement {
    constructor() {
        super(...arguments);
        this.items = [];
        this.showTitle = false;
    }
    connectedCallback() {
        super.connectedCallback();
        auth.onAuthStateChanged((user) => __awaiter(this, void 0, void 0, function* () {
            if (user) {
                yield state.populateFavourites();
            }
        }));
    }
    handleExpand(e) {
        e.stopPropagation;
        const button = e.currentTarget;
        const icon = button.firstElementChild;
        const found = Array.from(this.$actions).find(act => act.classList.contains('expanded') && act !== button.parentElement);
        if (found) {
            found.classList.remove('expanded');
            found.firstElementChild.firstElementChild.setAttribute('name', 'dots-vertical');
        }
        button.parentElement.classList.toggle('expanded');
        icon.getAttribute('name') === 'window-close'
            ? icon.setAttribute('name', 'dots-vertical')
            : icon.setAttribute('name', 'window-close');
    }
    handleAddHistory() {
        if (state.user && state.page === 'search') {
            state.setHistory(state.query);
        }
    }
    handleClick(e) {
        e.stopPropagation();
        this.handleAddHistory();
        window.scrollTo({ top: -50, behavior: 'smooth' });
        const item = e.currentTarget;
        Router.go(`/word/${item.id}`);
    }
    handleFavouritize(e) {
        e.stopPropagation();
        const item = e.currentTarget;
        state.setFavourite(item.parentElement.parentElement.dataset.id);
    }
    static get styles() {
        return [dropShadow, flex, flexCol, contentCenter, selfCenter, contentStart, opacity5, opacity8, marginRight, icSecondary, bgPrimary, hanFont, fcSecondary, css `
      :host {
        overflow-y: scroll;
        overflow-x: hidden;
        width: 100%;
        scrollbar-width: none;
        -ms-overflow-style: none;
      }
      :host::-webkit-scrollbar {
        display: none;
      }
      h6 {
        margin: var(--padding);
      }
      ul {
        margin: 0;
        padding: 0;
        list-style: none;
      }
      li {
        margin: var(--padding) 0;
        background-color: var(--bgColorContrasted);
        padding: 4px 8px 4px 16px;
        border-radius: calc(var(--radius) *2);
        position: relative;
        transition: transform var(--transitionTiming)
      }
      li:hover {
        /*transform: skewY(-2.5deg)*/
      }
      .item {
        margin-right: auto;
        width: 95%;
        cursor: pointer;
        -webkit-tap-highlight-color: transparent;
      }
      .item:hover {
        filter: opacity(.9);   
      }
      .hanja {font-size: 1em;}
      .hangul {font-size: .7em;}
      .english {
        font-size: .6em;
        text-transform: capitalize;
      }
      .action {
        position: absolute;    
        box-sizing: border-box;   
        right: 35px;
        top: 0;
        width: 35px;
        height: 100%;
        border-radius: calc(var(--radius) *2);
        transform: translateX(100%);
        transition: all var(--transitionTiming);
        z-index: 5;
      }
      .pull {
        --buttonFocusOutline: transparent;
        --buttonBC: var(--primary);
        --buttonHoverBC: transparent;
        --buttonW: 35px;
        --buttonH: 35px;
      }
      .action.expanded {
        transform: translateX(0);
        padding: calc(var(--padding) /2);
        right: 0;
        width: 100%
      }
      .commands {
        margin-left: auto;
      }
      .commands bkj-button {
        --buttonBC: var(--bgColorContrasted);
        /* --buttonW: 50px;
        --buttonH: 50px;  */
        --buttonRadius: var(--radius);
        --buttonPadding: .35rem;
        --buttonFocusOutline: var(--primary);
        --buttonHoverFC: var(--primary);
        position: relative;
      }
    `];
    }
    render() {
        const { items, handleExpand, handleClick } = this;
        return html `
      ${this.showTitle ? html `<h6 class="fc-secondary drop-shadow">${translate("WORDS_LIST.TITLE")} :</h6>` : null}
      <ul>
        ${repeat(items, (item) => item.id, (item, i) => html `
            <li class="flex content-center" data-id=${item.id}>
              <section class="item flex-col" id=${item.id} @click=${handleClick}>
                <section class="korean flex">
                  <section class="hanja mr5 han-font">${item.hanja}</section>
                  <section class="hangul opa-8 self-center han-font">${item.hangul}</section>
                </section>
                <section class="english opa-5 self-start">${item.english}</section>
              </section>
              ${state.user ? html `
                <section class="action flex content-start">
                  <bkj-button round flat @click=${this.handleFavouritize} class="pull self-center">
                    <bkj-icon slot="icon" class="ic-secondary drop-shadow" name=${state.favourites.has(item.id.toString()) ? 'heart' : 'heart-outline'}></bkj-icon>
                  </bkj-button>
                  <!-- <section class="commands flex self-center">
                    <bkj-button icon="before" class="mr5">
                      <span>Add the word</span>
                      <bkj-icon slot="icon" class="ic-secondary" size="35px" name="playlist-edit"></bkj-icon>
                    </bkj-button>
                    <bkj-button icon="before">
                      <span>Add hanjas</span>
                      <bkj-icon slot="icon" class="ic-secondary" size="35px" name="playlist-edit"></bkj-icon>
                    </bkj-button>
                  </section> -->
                </section>
                ` : ''}
            </li>
        `)}
      </ul>
    `;
    }
};
__decorate([
    property({ type: Array })
], WordsList.prototype, "items", void 0);
__decorate([
    property({ type: Boolean })
], WordsList.prototype, "showTitle", void 0);
__decorate([
    queryAll('.action')
], WordsList.prototype, "$actions", void 0);
WordsList = __decorate([
    customElement('words-list')
], WordsList);

let SimpleCard = class SimpleCard extends LitElement {
    static get styles() {
        return [card, css `
      :host {

      }
    `];
    }
    render() {
        return html `
      <slot></slot>
    `;
    }
};
SimpleCard = __decorate([
    customElement('simple-card')
], SimpleCard);

let SearchHistory = class SearchHistory extends MobxLitElement {
    connectedCallback() {
        const _super = Object.create(null, {
            connectedCallback: { get: () => super.connectedCallback }
        });
        return __awaiter(this, void 0, void 0, function* () {
            _super.connectedCallback.call(this);
            auth.onAuthStateChanged((user) => __awaiter(this, void 0, void 0, function* () {
                if (user) {
                    yield state.populateHistory();
                }
            }));
        });
    }
    handleDeleteHistoryEntry({ currentTarget }) {
        const div = currentTarget.parentElement.firstElementChild;
        const word = div.dataset.word;
        state.unsetHistory(word);
    }
    handleSetQuery({ currentTarget }) {
        const word = currentTarget.dataset.word;
        state.setQuery(word);
    }
    static get styles() {
        return [flex, maxW, headingFont, marginLeft, icSecondary, css `
    :host {
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
    }
      .history-word {
        background-color: var(--primary);
        margin: var(--padding);
        padding: calc(var(--padding) /2);
        border-radius: var(--radius);
        font-size: 1rem;
      }
      bkj-button {
        --buttonBC: var(--bgColorContrasted);
        --buttonHoverFC: var(--secondary);
        --buttonFocusOutline: transparent;
        --buttonH: 24px;
        --buttonW: 24px;
      }
    `];
    }
    render() {
        return html `
    <h4 class='max-w heading-font'>${translate('HISTORY.TITLE')}</h4>
      ${[...state.history].map(word => html `
      <section class='history-word flex'>
        <div data-word=${word} @click=${this.handleSetQuery}>${word}</div>
        <bkj-button @click=${this.handleDeleteHistoryEntry} round class='ml5'>
          <bkj-icon slot='icon' name='window-close' class='ic-secondary'></bkj-icon>
        </bkj-button>
      </section>`)}
    `;
    }
};
SearchHistory = __decorate([
    customElement('search-history')
], SearchHistory);

/**
 * @license
 * Copyright (c) 2020 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * Checks binding values against live DOM values, instead of previously bound
 * values, when determining whether to update the value.
 *
 * This is useful for cases where the DOM value may change from outside of
 * lit-html, such as with a binding to an `<input>` element's `value` property,
 * a content editable elements text, or to a custom element that changes it's
 * own properties or attributes.
 *
 * In these cases if the DOM value changes, but the value set through lit-html
 * bindings hasn't, lit-html won't know to update the DOM value and will leave
 * it alone. If this is not what you want—if you want to overwrite the DOM
 * value with the bound value no matter what—use the `live()` directive:
 *
 *     html`<input .value=${live(x)}>`
 *
 * `live()` performs a strict equality check agains the live DOM value, and if
 * the new value is equal to the live value, does nothing. This means that
 * `live()` should not be used when the binding will cause a type conversion. If
 * you use `live()` with an attribute binding, make sure that only strings are
 * passed in, or the binding will update every render.
 */
const live = directive((value) => (part) => {
    let previousValue;
    if (part instanceof EventPart || part instanceof NodePart) {
        throw new Error('The `live` directive is not allowed on text or event bindings');
    }
    if (part instanceof BooleanAttributePart) {
        checkStrings(part.strings);
        previousValue = part.element.hasAttribute(part.name);
        // This is a hack needed because BooleanAttributePart doesn't have a
        // committer and does its own dirty checking after directives
        part.value = previousValue;
    }
    else {
        const { element, name, strings } = part.committer;
        checkStrings(strings);
        if (part instanceof PropertyPart) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            previousValue = element[name];
            if (previousValue === value) {
                return;
            }
        }
        else if (part instanceof AttributePart) {
            previousValue = element.getAttribute(name);
        }
        if (previousValue === String(value)) {
            return;
        }
    }
    part.setValue(value);
});
const checkStrings = (strings) => {
    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {
        throw new Error('`live` bindings can only contain a single expression');
    }
};

let SearchBar = class SearchBar extends MobxLitElement {
    constructor() {
        super();
        this.handleFocus = this.handleFocus.bind(this);
        this.handleKeyup = this.handleKeyup.bind(this);
        document.addEventListener('searchInputValue:update', (e) => { });
    }
    handleFocus() {
        if (state.page !== 'search') {
            state.setPage('search');
            Router.go(`/search`);
        }
    }
    handleKeyup() {
        let timeout;
        globalThis.clearTimeout(timeout);
        timeout = globalThis.setTimeout(() => state.setQuery(this.searchInput.value.toLowerCase()), 1000);
    }
    static get styles() {
        return css `
      :host {
        position: relative;
        display: flex;
        place-content: center;
        transition: transform var(--transitionTiming);
      }
      input {
        outline: none;
        border: none;
        box-shadow: inset 1px 1px 15px var(--insetShadowColor);
        font-family: var(--regularFont);
        font-size: 1.2rem;
        padding: 5px 35px;
        padding-right: 5px;
        border-radius: calc(var(--radius)*2);
        background-color: var(--bgColorContrasted);
        color: var(--color);
        width: 100%;
      }
      bkj-icon {
        justify-self: flex-end;
        align-self: center;
        display: flex;
        place-content: center;
        transform: translateX(50%);
        left: 0;
        position: absolute;
        fill: var(--color);
        filter: opacity(0.7);
        transition: fill 0.5s, filter .5s;
      }
      input:focus + bkj-icon{
        fill: var(--secondary);
        filter: opacity(1);
      }
    `;
    }
    render() {
        const { handleFocus, handleKeyup: handleKeyDown } = this;
        return html `
      <bkj-icon name="magnify" size="20px"></bkj-icon>
      <input @focus=${handleFocus} @keyup=${handleKeyDown} id="search" type="text" autocomplete="off" placeholder=${translate('HEADER.SEARCH_PLACEHOLDER')} value=${live(state.query)}></input>
      
    `;
    }
};
__decorate([
    query('#search')
], SearchBar.prototype, "searchInput", void 0);
SearchBar = __decorate([
    customElement('search-bar')
], SearchBar);

var DEFS = [{id:1,hanja:"甑",strokes:"17",def:{en:["boiler for steaming rice","pot"],kr:["시루","증"]},hunum:[{kor:"증",def:"시루"}]},{id:2,hanja:"飋",strokes:"22",def:{en:[],kr:["쓸쓸한","바람","실"]},hunum:[{kor:"실",def:"쓸쓸한 바람"}]},{id:3,hanja:"罍",strokes:"21",def:{en:["large earthenware wine jar"],kr:["술독","뢰"]},hunum:[{kor:"뢰",def:"술독"}]},{id:4,hanja:"旬",strokes:"6",def:{en:["ten","period of time"],kr:["요사스런","별","순"]},hunum:[{kor:"순",def:"열흘"}]},{id:5,hanja:"宓",strokes:"8",def:{en:["quiet","silent","in good health"],kr:["성","복"]},hunum:[{kor:"복",def:"성"}]},{id:6,hanja:"罎",strokes:"22",def:{en:["an earthenware jar","a jug"],kr:["壜과","同字"]},hunum:[{kor:"담",def:"술병"}]},{id:7,hanja:"旭",strokes:"6",def:{en:["rising sun","brilliance","radiant"],kr:["교만할","욱"]},hunum:[{kor:"욱",def:"빛날"}]},{id:8,hanja:"兙",strokes:"9",def:{en:["decagram"]},hunum:[{kor:"십",def:""}]},{id:9,hanja:"宕",strokes:"8",def:{en:["stone quarry","cave dwelling"],kr:["석수","탕"]},hunum:[{kor:"탕",def:"골집"}]},{id:10,hanja:"覧",strokes:"16",def:{en:["look at","inspect","perceive"],kr:["볼","람"]},hunum:[{kor:"람",def:"볼"}]},{id:11,hanja:"甓",strokes:"18",def:{en:["glazed tiles","bricks"],kr:["벽돌","벽"]},hunum:[{kor:"벽",def:"벽돌"}]},{id:12,hanja:"党",strokes:"10",def:{en:["political party","gang","faction"],kr:["黨의","略字"]},hunum:[{kor:"당",def:"무리"}]},{id:13,hanja:"宖",strokes:"8",def:{en:[],kr:["집","울릴","횡"]},hunum:[{kor:"횡",def:"집 울릴"}]},{id:14,hanja:"兛",strokes:"10",def:{en:["kilogram"],kr:["킬로그램","천"]},hunum:[{kor:"천",def:"킬로그램"}]},{id:15,hanja:"覨",strokes:"16",def:{en:[],kr:["오래","볼","악"]},hunum:[{kor:"악",def:"오래 볼"}]},{id:16,hanja:"罐",strokes:"24",def:{en:["jar","jug","pitcher","pot"],kr:["두레박","관"]},hunum:[{kor:"관",def:"두레박"}]},{id:17,hanja:"宗",strokes:"8",def:{en:["lineage","ancestry","ancestor","clan"],kr:["마루","종"]},hunum:[{kor:"종",def:"마루"}]},{id:18,hanja:"燎",strokes:"16",def:{en:["to burn","set afire","to illuminate","a signal lamp"],kr:["풀","태울","료"]},hunum:[{kor:"요",def:"뜰에 세운 횃불"}]},{id:19,hanja:"覩",strokes:"16",def:{en:["see","gaze at","witness"],kr:["睹와","同字"]},hunum:[{kor:"도",def:"볼"}]},{id:20,hanja:"甕",strokes:"18",def:{en:["earthen jar","jar for ashes"],kr:["물장군","옹"]},hunum:[{kor:"옹",def:"항아리"}]},{id:21,hanja:"旰",strokes:"7",def:{en:["sunset","dusk","evening"],kr:["해질","간"]},hunum:[{kor:"간",def:"해질"}]},{id:22,hanja:"悁",strokes:"10",def:{en:["irritable","nervous","impatient"],kr:["근심할","연"]},hunum:[{kor:"연",def:"분할"}]},{id:23,hanja:"兜",strokes:"11",def:{en:["pouch"],kr:["투구","두"]},hunum:[{kor:"두",def:"투구"}]},{id:24,hanja:"親",strokes:"16",def:{en:["relatives","parents","intimate"],kr:["사돈","친"]},hunum:[{kor:"친",def:"사랑할"}]},{id:25,hanja:"療",strokes:"17",def:{en:["be healed","cured","recover"],kr:["병","고칠","료"]},hunum:[{kor:"요",def:"병 나을"}]},{id:26,hanja:"官",strokes:"8",def:{en:["official","public servant"],kr:["벼슬","관"]},hunum:[{kor:"관",def:"벼슬"}]},{id:27,hanja:"旱",strokes:"7",def:{en:["drought","dry","dry land"],kr:["가물","한"]},hunum:[{kor:"한",def:"가물"}]},{id:28,hanja:"宙",strokes:"8",def:{en:["time as concept","infinite time"],kr:["집","주"]},hunum:[{kor:"주",def:"집"}]},{id:29,hanja:"蓼",strokes:"17",def:{en:["smartweed","polygonum"],kr:["병","나을","료"]},hunum:[{kor:"요",def:"병 나을"}]},{id:30,hanja:"悃",strokes:"10",def:{en:["sincere","genuine","honest","loyal"],kr:["정성","곤"]},hunum:[{kor:"곤",def:"정성"}]},{id:31,hanja:"悄",strokes:"10",def:{en:["silent","quiet","still","anxious"],kr:["근심할","초"]},hunum:[{kor:"초",def:"근심할"}]},{id:32,hanja:"定",strokes:"8",def:{en:["decide","settle","fix"],kr:["고요할","정"]},hunum:[{kor:"정",def:"정할"}]},{id:33,hanja:"遼",strokes:"16",def:{en:["distant","far"],kr:["나라이름","료"]},hunum:[{kor:"요",def:"멀"}]},{id:34,hanja:"覬",strokes:"17",def:{en:["covet","long for","desire"],kr:["바랄","기"]},hunum:[{kor:"기",def:"바랄"}]},{id:35,hanja:"甘",strokes:"5",def:{en:["sweetness","sweet","tasty"],kr:["달게","여길","감"]},hunum:[{kor:"감",def:"달"}]},{id:36,hanja:"罔",strokes:"8",def:{en:["net","deceive","libel","negative"],kr:["그물","망"]},hunum:[{kor:"망",def:"그물"}]},{id:37,hanja:"旲",strokes:"7",def:{en:[],kr:["햇빛","대"]},hunum:[{kor:"대",def:"햇빛"}]},{id:38,hanja:"兟",strokes:"12",def:{en:["to advance"],kr:["총총","들어설","신"]},hunum:[{kor:"신",def:"나아갈"}]},{id:39,hanja:"罕",strokes:"8",def:{en:["rare","scarce","surname"],kr:["드물","한"]},hunum:[{kor:"한",def:"드물"}]},{id:40,hanja:"龍",strokes:"16",def:{en:["dragon","symbolic of emperor"],kr:["임금","룡"]},hunum:[{kor:"용",def:"용"}]},{id:41,hanja:"悅",strokes:"10",def:{en:["pleased"],kr:["성씨","열"]},hunum:[{kor:"열",def:"즐거울"}]},{id:42,hanja:"宛",strokes:"8",def:{en:["seem","as if","crooked"],kr:["서쪽","나라이름","원"]},hunum:[{kor:"완",def:"어슴푸레할"},{kor:"원",def:"서쪽 나라이름"}]},{id:43,hanja:"暈",strokes:"13",def:{en:["halo in sky","fog","dizzy","faint"],kr:["어지러울","운"]},hunum:[{kor:"운",def:"무리"}]},{id:44,hanja:"甚",strokes:"9",def:{en:["great extent","considerably"],kr:["무엇","심"]},hunum:[{kor:"심",def:"심할"}]},{id:45,hanja:"旴",strokes:"7",def:{en:["dawn"],kr:["새벽","우"]},hunum:[{kor:"우",def:"해 돋을"}]},{id:46,hanja:"櫂",strokes:"18",def:{en:["oar","scull","paddle","row"],kr:["상앗대","도"]},hunum:[{kor:"도",def:"상앗대"}]},{id:47,hanja:"宜",strokes:"8",def:{en:["suitable","right","fitting","proper"],kr:["유순할","의"]},hunum:[{kor:"의",def:"옳을"}]},{id:48,hanja:"\\n",strokes:"",def:{en:[]}},{id:49,hanja:"甛",strokes:"11",def:{en:["sweet","sweetness"],kr:["달","첨"]},hunum:[{kor:"첨",def:"달"}]},{id:50,hanja:"阮",strokes:"7",def:{en:["ancient musical instrument","surname"],kr:["성씨","원"]},hunum:[{kor:"원",def:"원나라"}]},{id:51,hanja:"覯",strokes:"17",def:{en:["meet or see unexpectedly"],kr:["만나볼","구"]},hunum:[{kor:"구",def:"만나볼"}]},{id:52,hanja:"櫃",strokes:"18",def:{en:["cupboard","wardrobe","counter"],kr:["상자","궤"]},hunum:[{kor:"궤",def:"상자"}]},{id:53,hanja:"兡",strokes:"13",def:{en:["mercury"],kr:["헥트르램","백"]},hunum:[{kor:"백",def:"헥토그램"}]},{id:54,hanja:"宝",strokes:"8",def:{en:["treasure","jewel","precious","rare"],kr:["寶의","俗字"]},hunum:[{kor:"보",def:"보배"}]},{id:55,hanja:"甜",strokes:"11",def:{en:["sweet","sweetness"],kr:["달","첨"]},hunum:[{kor:"첨",def:"달"}]},{id:56,hanja:"劉",strokes:"15",def:{en:["surname","kill","destroy"],kr:["성씨","류"]},hunum:[{kor:"유",def:"이길"}]},{id:57,hanja:"兢",strokes:"14",def:{en:["fearful","cautious","wary"],kr:["삼갈","긍"]},hunum:[{kor:"긍",def:"삼갈"}]},{id:58,hanja:"杻",strokes:"8",def:{en:["ligustrum sinenese","tree"],kr:["싸리","뉴"]},hunum:[{kor:"유",def:"싸리"}]},{id:59,hanja:"罘",strokes:"9",def:{en:["screen used in ancient times"],kr:["그물","부"]},hunum:[{kor:"부",def:"그물"}]},{id:60,hanja:"悉",strokes:"11",def:{en:["know","learn about","comprehend"],kr:["모두","실"]},hunum:[{kor:"실",def:"모두"}]},{id:61,hanja:"実",strokes:"8",def:{en:["real","true","honest","sincere"],kr:["實의","略字"]},hunum:[{kor:"실",def:"열매"}]},{id:62,hanja:"柳",strokes:"9",def:{en:["willow tree","pleasure"],kr:["별","이름","류"]},hunum:[{kor:"유",def:"버들"}]},{id:63,hanja:"覲",strokes:"18",def:{en:["have imperial audience"],kr:["뵈올","근"]},hunum:[{kor:"근",def:"뵈올"}]},{id:64,hanja:"甞",strokes:"13",def:{en:["taste","experience","experiment"],kr:["맛볼","상"]},hunum:[{kor:"상",def:"맛볼"}]},{id:65,hanja:"流",strokes:"10",def:{en:["flow","circulate","drift","class"],kr:["귀양보낼","류"]},hunum:[{kor:"유",def:"흐를"}]},{id:66,hanja:"観",strokes:"18",def:{en:["see","observe","view","appearance"],kr:["볼","관"]},hunum:[{kor:"관",def:"볼"}]},{id:67,hanja:"生",strokes:"5",def:{en:["life","living","lifetime","birth"],kr:["날","생"]},hunum:[{kor:"생",def:"날"}]},{id:68,hanja:"悋",strokes:"10",def:{en:["stingy","sparing of","closefisted"],kr:["아낄","린"]},hunum:[{kor:"린",def:"아낄"}]},{id:69,hanja:"入",strokes:"2",def:{en:["enter","come in","join"],kr:["들","입"]},hunum:[{kor:"입",def:"들"}]},{id:70,hanja:"躁",strokes:"20",def:{en:["tense","excited","irritable"],kr:["떠들","조"]},hunum:[{kor:"조",def:"떠들"}]},{id:71,hanja:"悌",strokes:"10",def:{en:["brotherly","respectful"],kr:["공경할","제"]},hunum:[{kor:"제",def:"공경할"}]},{id:72,hanja:"溜",strokes:"13",def:{en:["slide","glide","slip","slippery"],kr:["증류수","류"]},hunum:[{kor:"유",def:"처마물"}]},{id:73,hanja:"葆",strokes:"15",def:{en:["reserve","preserve","conceal"],kr:["풀","더부룩할","보"]},hunum:[{kor:"보",def:"풀 더부룩할"}]},{id:74,hanja:"旺",strokes:"8",def:{en:["prosper","prosperous","increase"],kr:["성할","왕"]},hunum:[{kor:"왕",def:"고울"}]},{id:75,hanja:"兦",strokes:"3",def:{en:["destruction"],kr:["없을","무"]},hunum:[{kor:"망",def:"없을"},{kor:"무",def:"없을"}]},{id:76,hanja:"客",strokes:"9",def:{en:["guest","traveller","customer"],kr:["지날","객"]},hunum:[{kor:"객",def:"손님"}]},{id:77,hanja:"悍",strokes:"10",def:{en:["courageous","brave","violent"],kr:["사나울","한"]},hunum:[{kor:"한",def:"사나울"}]},{id:78,hanja:"琉",strokes:"11",def:{en:["sparkling stone","glazed","opaque"],kr:["나라이름","류"]},hunum:[{kor:"유",def:"유리돌"}]},{id:79,hanja:"旻",strokes:"8",def:{en:["heaven"],kr:["하늘","민"]},hunum:[{kor:"민",def:"하늘"}]},{id:80,hanja:"內",strokes:"4",def:{en:["inside","interior","domestic"],kr:["안","내"]},hunum:[{kor:"납",def:"들일"},{kor:"내",def:"안"}]},{id:81,hanja:"宣",strokes:"9",def:{en:["declare","announce","proclaim"],kr:["베풀","선"]},hunum:[{kor:"선",def:"베풀"}]},{id:82,hanja:"全",strokes:"6",def:{en:["maintain","keep whole or intact"],kr:["갖출","전"]},hunum:[{kor:"전",def:"온전할"}]},{id:83,hanja:"罝",strokes:"10",def:{en:["net for catching rabbits"],kr:["짐승","그물","저"]},hunum:[{kor:"저",def:"짐승 그물"}]},{id:84,hanja:"飛",strokes:"9",def:{en:["fly","go quickly","dart","high"],kr:["날","비"]},hunum:[{kor:"비",def:"날"}]},{id:85,hanja:"留",strokes:"10",def:{en:["stop","halt","stay","detain","keep"],kr:["횡사할","류"]},hunum:[{kor:"유",def:"머무를"}]},{id:86,hanja:"產",strokes:"11",def:{en:["give birth","bring forth","produce"],kr:["産의","略字"]},hunum:[{kor:"산",def:"낳을"}]},{id:87,hanja:"旼",strokes:"8",def:{en:["gentle and affable"],kr:["온화할","민"]},hunum:[{kor:"민",def:"온화할"}]},{id:88,hanja:"室",strokes:"9",def:{en:["room","home","house","chamber"],kr:["아내","실"]},hunum:[{kor:"실",def:"집"}]},{id:89,hanja:"悏",strokes:"10",def:{en:[]},hunum:[{kor:"협",def:"쾌할"}]},{id:90,hanja:"覷",strokes:"19",def:{en:["peep at","watch","spy on"],kr:["엿볼","처"]},hunum:[{kor:"처",def:"엿볼"}]},{id:91,hanja:"飜",strokes:"21",def:{en:["flip over","upset","capsize"],kr:["뒤칠","번"]},hunum:[{kor:"번",def:"뒤칠"}]},{id:92,hanja:"硫",strokes:"12",def:{en:["sulfur"],kr:["유황","류"]},hunum:[{kor:"유",def:"석류황"}]},{id:93,hanja:"産",strokes:"11",def:{en:["give birth"],kr:["낳을","산"]},hunum:[{kor:"산",def:"낳을"}]},{id:94,hanja:"旽",strokes:"8",def:{en:["morning sun","sunrise"],kr:["늘","돋을","돈"]},hunum:[{kor:"돈",def:"늘 돋을"}]},{id:95,hanja:"兩",strokes:"8",def:{en:["two","both","pair","couple","ounce"],kr:["두","량"]},hunum:[{kor:"량",def:"두"}]},{id:96,hanja:"宥",strokes:"9",def:{en:["forgive","pardon","indulge"],kr:["도울","유"]},hunum:[{kor:"유",def:"너그러울"}]},{id:97,hanja:"宦",strokes:"9",def:{en:["officialdom","government official"],kr:["벼슬","환"]},hunum:[{kor:"환",def:"벼슬"}]},{id:98,hanja:"躅",strokes:"20",def:{en:["walk carefully","hesitate","falter"],kr:["철쭉꽃","촉"]},hunum:[{kor:"촉",def:"자취"}]},{id:99,hanja:"紐",strokes:"10",def:{en:["knot","button","handle","knob","tie"],kr:["맺을","뉴"]},hunum:[{kor:"유",def:"단추"}]},{id:100,hanja:"葉",strokes:"15",def:{en:["leaf","petal","page of book","period"],kr:["성씨","엽"]},hunum:[{kor:"섭",def:"고을이름"},{kor:"엽",def:"잎"}]},{id:101,hanja:"罟",strokes:"10",def:{en:["net","snare","pressure come or go"],kr:["그물","고"]},hunum:[{kor:"고",def:"그물"}]},{id:102,hanja:"兪",strokes:"9",def:{en:["surname","consent"],kr:["공손할","유"]},hunum:[{kor:"유",def:"그럴"}]},{id:103,hanja:"八",strokes:"2",def:{en:["eight","all around","all sides"],kr:["여덟","팔"]},hunum:[{kor:"팔",def:"여덟"}]},{id:104,hanja:"類",strokes:"19",def:{en:["class","group","kind","category"],kr:["무리","류"]},hunum:[{kor:"유",def:"같을"}]},{id:105,hanja:"葊",strokes:"15",def:{en:["cottage"],kr:["풀이름","암"]},hunum:[{kor:"암",def:"풀이름"}]},{id:106,hanja:"甥",strokes:"12",def:{en:["sister"],kr:["생질","생"]},hunum:[{kor:"생",def:"생질"}]},{id:107,hanja:"罠",strokes:"10",def:{en:["animal trap"],kr:["그물","민"]},hunum:[{kor:"민",def:"그물"}]},{id:108,hanja:"旿",strokes:"8",def:{en:[],kr:["밝을","오"]},hunum:[{kor:"오",def:"밝을"}]},{id:109,hanja:"躇",strokes:"20",def:{en:["hesitate","falter","be undecided"],kr:["머뭇거릴","착"]},hunum:[{kor:"저",def:"머뭇거릴"},{kor:"착",def:"머뭇거릴"}]},{id:110,hanja:"食",strokes:"9",def:{en:["eat","meal","food","KangXi radical number"],kr:["헛말할","식"]},hunum:[{kor:"사",def:"밥 먹일"},{kor:"식",def:"밥"}]},{id:111,hanja:"六",strokes:"4",def:{en:["number six"],kr:["나라이름","륙"]},hunum:[{kor:"육",def:"여섯"}]},{id:112,hanja:"覺",strokes:"20",def:{en:["to wake up from sleep","conscious"],kr:["꿈","깰","교"]},hunum:[{kor:"각",def:"깨달을"},{kor:"교",def:"꿈 깰"}]},{id:113,hanja:"甦",strokes:"12",def:{en:["be reborn","resuscitate","revive"],kr:["숨","쉴","소"]},hunum:[{kor:"소",def:"깨어날"}]},{id:114,hanja:"罡",strokes:"10",def:{en:["the name of a certain stars","the god who is supposed to live in them"],kr:["강별","강"]},hunum:[{kor:"강",def:"강별"}]},{id:115,hanja:"悒",strokes:"10",def:{en:["sorrowful","depressed","unhappy"],kr:["근심할","읍"]},hunum:[{kor:"읍",def:"답답할"}]},{id:116,hanja:"公",strokes:"4",def:{en:["fair","equitable","public","duke"],kr:["공변될","공"]},hunum:[{kor:"공",def:"공변될"}]},{id:117,hanja:"戮",strokes:"15",def:{en:["kill","massacre","oppress"],kr:["욕할","륙"]},hunum:[{kor:"육",def:"죽일"}]},{id:118,hanja:"六",strokes:"4",def:{en:["number six"],kr:["여섯","륙"]},hunum:[{kor:"륙",def:"여섯"}]},{id:119,hanja:"悔",strokes:"10",def:{en:["repent","show remorse","regret"],kr:["뉘우칠","회"]},hunum:[{kor:"회",def:"뉘우칠"}]},{id:120,hanja:"兮",strokes:"4",def:{en:["exclamatory particle"],kr:["어조사","혜"]},hunum:[{kor:"혜",def:"어조사"}]},{id:121,hanja:"飡",strokes:"11",def:{en:["meal","eat"],kr:["飱과","同字"]},hunum:[{kor:"손",def:"저녁밥"}]},{id:122,hanja:"陸",strokes:"11",def:{en:["land","continental","army"],kr:["두터울","륙"]},hunum:[{kor:"육",def:"뭍"}]},{id:123,hanja:"躉",strokes:"20",def:{en:["sell or buy wholesale","store"],kr:["거룻배","돈"]},hunum:[{kor:"돈",def:"거룻배"}]},{id:124,hanja:"用",strokes:"5",def:{en:["use","employ","apply","operate","use"],kr:["통할","용"]},hunum:[{kor:"용",def:"쓸"}]},{id:125,hanja:"罣",strokes:"11",def:{en:["hinder","disturb","obstruct"],kr:["걸","괘"]},hunum:[{kor:"괘",def:"걸"}]},{id:126,hanja:"悕",strokes:"10",def:{en:[],kr:["슬퍼할","희"]},hunum:[{kor:"희",def:"슬퍼할"}]},{id:127,hanja:"躊",strokes:"21",def:{en:["hesitate","falter","smug","self"],kr:["머뭇거릴","주"]},hunum:[{kor:"주",def:"머뭇거릴"}]},{id:128,hanja:"飢",strokes:"11",def:{en:["hunger","starving","hungry","a famine"],kr:["주릴","기"]},hunum:[{kor:"기",def:"주릴"}]},{id:129,hanja:"倫",strokes:"10",def:{en:["normal human relationships"],kr:["가릴","륜"]},hunum:[{kor:"윤",def:"인륜"}]},{id:130,hanja:"覽",strokes:"21",def:{en:["look at","inspect","perceive"],kr:["볼","람"]},hunum:[{kor:"람",def:"볼"}]},{id:131,hanja:"躋",strokes:"21",def:{en:["ascend","go up","rise"],kr:["오를","제"]},hunum:[{kor:"제",def:"오를"}]},{id:132,hanja:"飣",strokes:"11",def:{en:["display food for show only","sacrifice"],kr:["음식","괼","정"]},hunum:[{kor:"정",def:"굄새"}]},{id:133,hanja:"崙",strokes:"11",def:{en:["Kunlun mountains in Jiangsu"],kr:["나라이름","륜"]},hunum:[{kor:"윤",def:"곤륜산"}]},{id:134,hanja:"悖",strokes:"10",def:{en:["be contradictory to","go counter"],kr:["어지러울","패"]},hunum:[{kor:"발",def:"우쩍 일어날"},{kor:"패",def:"거스를"}]},{id:135,hanja:"宫",strokes:"9",def:{en:["palace"],kr:["宮의","略字"]},hunum:[{kor:"궁",def:"궁궐"}]},{id:136,hanja:"淪",strokes:"11",def:{en:["be lost","sink","be submerged"],kr:["거느릴","륜"]},hunum:[{kor:"윤",def:"빠질"}]},{id:137,hanja:"甫",strokes:"7",def:{en:["begin","man","father","great"],kr:["클","보"]},hunum:[{kor:"보",def:"클"}]},{id:138,hanja:"罦",strokes:"12",def:{en:["net"],kr:["그물","부"]},hunum:[{kor:"부",def:"그물"}]},{id:139,hanja:"悗",strokes:"10",def:{en:[],kr:["잊어버릴","문"]},hunum:[{kor:"문",def:"잊어버릴"}]},{id:140,hanja:"共",strokes:"6",def:{en:["together with","all","total","to share"],kr:["함께","공"]},hunum:[{kor:"공",def:"함께"}]},{id:141,hanja:"宬",strokes:"10",def:{en:["archives","surname"],kr:["창고","성"]},hunum:[{kor:"성",def:"사고"}]},{id:142,hanja:"葑",strokes:"15",def:{en:["the rape"],kr:["무","풍"]},hunum:[{kor:"풍",def:"무"}]},{id:143,hanja:"覿",strokes:"22",def:{en:["see","interview","be admitted to audience"],kr:["볼","적"]},hunum:[{kor:"적",def:"볼"}]},{id:144,hanja:"輪",strokes:"15",def:{en:["wheel","revolve","turn","recur"],kr:["둘레","륜"]},hunum:[{kor:"윤",def:"바퀴"}]},{id:145,hanja:"躍",strokes:"21",def:{en:["skip","jump","frolic"],kr:["뛸","적"]},hunum:[{kor:"약",def:"뛸"},{kor:"적",def:"뛸"}]},{id:146,hanja:"甬",strokes:"7",def:{en:["path","river in Ningbo","Ningbo"],kr:["곡식","셈하는","단위","휘","용"]},hunum:[{kor:"용",def:"물 솟아 오를"}]},{id:147,hanja:"櫓",strokes:"19",def:{en:["oar","scull","row"],kr:["방패","로"]},hunum:[{kor:"로",def:"방패"}]},{id:148,hanja:"飦",strokes:"12",def:{en:["well","thick","rich"],kr:["된죽","전"]},hunum:[{kor:"전",def:"범벅"}]},{id:149,hanja:"罨",strokes:"13",def:{en:["medical compress","fish net"],kr:["그물","엄"]},hunum:[{kor:"엄",def:"그물"}]},{id:150,hanja:"宮",strokes:"10",def:{en:["palace","temple","dwelling","enclose"],kr:["굴궐","궁"]},hunum:[{kor:"궁",def:"궁궐"}]},{id:151,hanja:"噀",strokes:"15",def:{en:["spirt out of the mouth"],kr:["물","뿜을","손"]},hunum:[{kor:"손",def:"물 뿜을"}]},{id:152,hanja:"律",strokes:"9",def:{en:["statute","principle","regulation"],kr:["저울질할","률"]},hunum:[{kor:"율",def:"법"}]},{id:153,hanja:"悚",strokes:"10",def:{en:["afraid","scared","frightened"],kr:["송구할","송"]},hunum:[{kor:"송",def:"두려울"}]},{id:154,hanja:"噁",strokes:"15",def:{en:["nastiness","nauseate"],kr:["성낼","오"]},hunum:[{kor:"오",def:"성낼"}]},{id:155,hanja:"飧",strokes:"12",def:{en:["evening meal","supper","cooked food"],kr:["물에","만","밥","손"]},hunum:[{kor:"손",def:"저녁밥"}]},{id:156,hanja:"噂",strokes:"15",def:{en:["meet"],kr:["수군거릴","준"]},hunum:[{kor:"준",def:"수군거릴"}]},{id:157,hanja:"罪",strokes:"13",def:{en:["crime","sin","vice","evil","hardship"],kr:["허물","죄"]},hunum:[{kor:"죄",def:"허물"}]},{id:158,hanja:"悛",strokes:"10",def:{en:["repent","reform"],kr:["차례","전"]},hunum:[{kor:"전",def:"고칠"}]},{id:159,hanja:"宰",strokes:"10",def:{en:["to slaughter","to rule"],kr:["삶을","재"]},hunum:[{kor:"재",def:"주관할"}]},{id:160,hanja:"慄",strokes:"13",def:{en:["shiver","shudder","tremble","tremble"],kr:["떨","률"]},hunum:[{kor:"율",def:"두려울"}]},{id:161,hanja:"躐",strokes:"22",def:{en:["to stride over","to step across"],kr:["밟을","렵"]},hunum:[{kor:"렵",def:"밟을"}]},{id:162,hanja:"兵",strokes:"7",def:{en:["soldier","troops"],kr:["군사","병"]},hunum:[{kor:"병",def:"군사"}]},{id:163,hanja:"躑",strokes:"22",def:{en:["waver","hesitate","be irresolute"],kr:["머뭇거릴","척"]},hunum:[{kor:"척",def:"머뭇거릴"}]},{id:164,hanja:"栗",strokes:"10",def:{en:["chestnut tree","chestnuts","surname"],kr:["공손할","률"]},hunum:[{kor:"율",def:"밤"}]},{id:165,hanja:"甯",strokes:"12",def:{en:["peaceful"],kr:["편안할","녕"]},hunum:[{kor:"녕",def:"편안할"}]},{id:166,hanja:"罫",strokes:"13",def:{en:["hinder"],kr:["줄","괘"]},hunum:[{kor:"괘",def:"줄"}]},{id:167,hanja:"其",strokes:"8",def:{en:["his","her","its","their","that"],kr:["그","기"]},hunum:[{kor:"기",def:"그"}]},{id:168,hanja:"噃",strokes:"15",def:{en:[],kr:["소리","번"]},hunum:[{kor:"번",def:"산돼지"}]},{id:169,hanja:"田",strokes:"5",def:{en:["field","arable land","cultivated"],kr:["논","전"]},hunum:[{kor:"전",def:"밭"}]},{id:170,hanja:"率",strokes:"11",def:{en:["to lead","ratio","rate","limit"],kr:["홀","한껏","다릴","률"]},hunum:[{kor:"율",def:"헤아릴"}]},{id:171,hanja:"具",strokes:"8",def:{en:["tool","implement","draw up","write"],kr:["갖출","구"]},hunum:[{kor:"구",def:"갖출"}]},{id:172,hanja:"飪",strokes:"13",def:{en:["cooked food","cook until well done"],kr:["익힐","임"]},hunum:[{kor:"임",def:"익힐"}]},{id:173,hanja:"害",strokes:"10",def:{en:["injure","harm","destroy","kill"],kr:["죽일","해"]},hunum:[{kor:"할",def:"손해"},{kor:"해",def:"해할"}]},{id:174,hanja:"典",strokes:"8",def:{en:["law","canon","documentation","classic","scripture"],kr:["도덕","전"]},hunum:[{kor:"전",def:"책"}]},{id:175,hanja:"著",strokes:"14",def:{en:["manifest"],kr:["분명할","착"]},hunum:[{kor:"저",def:"나타날"},{kor:"착",def:"분명할"}]},{id:176,hanja:"躒",strokes:"22",def:{en:["walk","move"],kr:["움직일","력"]},hunum:[{kor:"력",def:"움직일"}]},{id:177,hanja:"由",strokes:"5",def:{en:["cause","reason","from"],kr:["지날","유"]},hunum:[{kor:"유",def:"말미암을"}]},{id:178,hanja:"噅",strokes:"12",def:{en:["to speak falsely or wrongly","ugly"],kr:["곱사등이","위"]},hunum:[{kor:"위",def:"거짓말"}]},{id:179,hanja:"飫",strokes:"13",def:{en:["surfeited","satiated","confer"],kr:["배부를","어"]},hunum:[{kor:"어",def:"먹기 싫을"}]},{id:180,hanja:"隆",strokes:"12",def:{en:["prosperous","plentiful","abundant"],kr:["괘","이름","륭"]},hunum:[{kor:"융",def:"성할"}]},{id:181,hanja:"稀",strokes:"12",def:{en:["rare","unusual","scarce","sparse"],kr:["드물","희"]},hunum:[{kor:"희",def:"드물"}]},{id:182,hanja:"置",strokes:"13",def:{en:["place","lay out","set aside"],kr:["안치할","치"]},hunum:[{kor:"치",def:"베풀"}]},{id:183,hanja:"噆",strokes:"15",def:{en:[],kr:["깨물","참"]},hunum:[{kor:"참",def:"깨물"}]},{id:184,hanja:"躓",strokes:"22",def:{en:["stumble","totter","fail","be frustrated"],kr:["넘어질","지"]},hunum:[{kor:"지",def:"넘어질"}]},{id:185,hanja:"甲",strokes:"5",def:{en:["armor","shell","fingernails","first heavenly stem"],kr:["대궐","갑"]},hunum:[{kor:"갑",def:"갑옷"}]},{id:186,hanja:"櫚",strokes:"19",def:{en:["palm"],kr:["종려나무","려"]},hunum:[{kor:"려",def:"종려나무"}]},{id:187,hanja:"兹",strokes:"9",def:{en:["now","here","this","time","year"],kr:["무성할","자"]},hunum:[{kor:"자",def:"무성할"}]},{id:188,hanja:"宴",strokes:"10",def:{en:["to entertain","feast","a feast","banquet"],kr:["편안할","연"]},hunum:[{kor:"연",def:"잔치할"}]},{id:189,hanja:"利",strokes:"7",def:{en:["gains","advantage","profit","merit"],kr:["이자","리"]},hunum:[{kor:"이",def:"날카로울"}]},{id:190,hanja:"飭",strokes:"13",def:{en:["order","command","give command"],kr:["부지런할","칙"]},hunum:[{kor:"칙",def:"갖출"}]},{id:191,hanja:"櫛",strokes:"19",def:{en:["comb out","weed out","eliminate"],kr:["빗","즐"]},hunum:[{kor:"즐",def:"빗"}]},{id:192,hanja:"躔",strokes:"22",def:{en:["follow in","imitate","rut","path"],kr:["별자리","전"]},hunum:[{kor:"전",def:"햇길"}]},{id:193,hanja:"申",strokes:"5",def:{en:["to state to a superior","report","extend","ninth terrestrial branch"],kr:["원숭이","신"]},hunum:[{kor:"신",def:"펼"}]},{id:194,hanja:"悟",strokes:"10",def:{en:["to apprehend","realize","become aware"],kr:["깨우칠","오"]},hunum:[{kor:"오",def:"깨우칠"}]},{id:195,hanja:"兺",strokes:"10",def:{en:[],kr:["그","뿐"]},hunum:[{kor:"뿐",def:"그"}]},{id:196,hanja:"宵",strokes:"10",def:{en:["night","evening","dark"],kr:["벌레이름","소"]},hunum:[{kor:"소",def:"밤"}]},{id:197,hanja:"噇",strokes:"15",def:{en:[],kr:["먹는","모양","담"]},hunum:[{kor:"담",def:"먹는 모양"}]},{id:198,hanja:"吏",strokes:"6",def:{en:["government official","magistrate"],kr:["관리","리"]},hunum:[{kor:"이",def:"아전"}]},{id:199,hanja:"噈",strokes:"15",def:{en:[],kr:["입맞출","축"]},hunum:[{kor:"축",def:"입맞출"}]},{id:200,hanja:"葚",strokes:"15",def:{en:["mulberry fruit"],kr:["뽕나무","열매","심"]},hunum:[{kor:"심",def:"뽕나무 열매"}]},{id:201,hanja:"罰",strokes:"14",def:{en:["penalty","fine","punish","penalize"],kr:["죄","벌"]},hunum:[{kor:"벌",def:"죄"}]},{id:202,hanja:"稁",strokes:"12",def:{en:[],kr:["稿와","同字"]},hunum:[{kor:"고",def:"볏짚"}]},{id:203,hanja:"悠",strokes:"11",def:{en:["long","far","remote","distant","liesurely"],kr:["근심할","유"]},hunum:[{kor:"유",def:"멀"}]},{id:204,hanja:"櫜",strokes:"19",def:{en:["quiver"],kr:["활집","고"]},hunum:[{kor:"고",def:"활집"}]},{id:205,hanja:"家",strokes:"10",def:{en:["house","home","residence","family"],kr:["집","가"]},hunum:[{kor:"가",def:"집"}]},{id:206,hanja:"飮",strokes:"13",def:{en:["drink","swallow","kind of drink"],kr:["마실","음"]},hunum:[{kor:"음",def:"마실"}]},{id:207,hanja:"履",strokes:"15",def:{en:["footwear","shoes","walk on","tread"],kr:["밟을","리"]},hunum:[{kor:"이",def:"가죽신"}]},{id:208,hanja:"葛",strokes:"15",def:{en:["edible bean","surname"],kr:["칡","갈"]},hunum:[{kor:"갈",def:"칡"}]},{id:209,hanja:"稂",strokes:"12",def:{en:["grass","weeds"],kr:["강아지","풀","랑"]},hunum:[{kor:"랑",def:"강아지 풀"}]},{id:210,hanja:"櫝",strokes:"19",def:{en:["cabinet","wardrobe","closet"],kr:["함","독"]},hunum:[{kor:"독",def:"함"}]},{id:211,hanja:"兼",strokes:"10",def:{en:["unite","combine","connect","and"],kr:["모을","겸"]},hunum:[{kor:"겸",def:"겸할"}]},{id:212,hanja:"噉",strokes:"15",def:{en:["bite","chew","in this way"],kr:["씹을","담"]},hunum:[{kor:"담",def:"씹을"}]},{id:213,hanja:"飯",strokes:"13",def:{en:["cooked rice","food","meal"],kr:["밥","반"]},hunum:[{kor:"반",def:"밥"}]},{id:214,hanja:"易",strokes:"8",def:{en:["change","easy"],kr:["편할","이"]},hunum:[{kor:"이",def:"쉬울"}]},{id:215,hanja:"署",strokes:"13",def:{en:["public office"],kr:["관청","서"]},hunum:[{kor:"서",def:"관청"}]},{id:216,hanja:"悢",strokes:"10",def:{en:[],kr:["슬퍼할","량"]},hunum:[{kor:"량",def:"슬퍼할"}]},{id:217,hanja:"櫞",strokes:"19",def:{en:["citrus"],kr:["연나무","연"]},hunum:[{kor:"연",def:"연나무"}]},{id:218,hanja:"宸",strokes:"10",def:{en:["imperial","imperial palace"],kr:["대궐","신"]},hunum:[{kor:"신",def:"집"}]},{id:219,hanja:"噊",strokes:"15",def:{en:[],kr:["위태할","율"]},hunum:[{kor:"술",def:"위태할"},{kor:"율",def:"위태할"}]},{id:220,hanja:"李",strokes:"7",def:{en:["plum","judge","surname"],kr:["보따리","리"]},hunum:[{kor:"이",def:"오얏"}]},{id:221,hanja:"患",strokes:"11",def:{en:["suffer","worry about","suffering"],kr:["근심","환"]},hunum:[{kor:"환",def:"근심"}]},{id:222,hanja:"噋",strokes:"15",def:{en:["to swallow hastily","to gobble up"],kr:["啍과","同字"]},hunum:[{kor:"톤",def:"느릿할"}]},{id:223,hanja:"男",strokes:"7",def:{en:["male","man","son","baron","surname"],kr:["사내","남"]},hunum:[{kor:"남",def:"사내"}]},{id:224,hanja:"櫟",strokes:"19",def:{en:["chestnut","oak"],kr:["상수리나무","력"]},hunum:[{kor:"력",def:"상수리나무"}]},{id:225,hanja:"容",strokes:"10",def:{en:["looks","appearance","figure","form"],kr:["용서할","용"]},hunum:[{kor:"용",def:"얼굴"}]},{id:226,hanja:"飱",strokes:"13",def:{en:["evening meal"],kr:["飧의","俗字"]},hunum:[{kor:"손",def:"저녁밥"}]},{id:227,hanja:"梨",strokes:"11",def:{en:["pear","opera","cut","slash"],kr:["벌레이름","리"]},hunum:[{kor:"이",def:"배"}]},{id:228,hanja:"悤",strokes:"11",def:{en:["agitated","restless","hurried"],kr:["덤빌","총"]},hunum:[{kor:"총",def:"바쁠"}]},{id:229,hanja:"噌",strokes:"15",def:{en:["scold","shout at"],kr:["시끄러울","증"]},hunum:[{kor:"쟁",def:"장사꾼 웅성거릴"},{kor:"증",def:"시끄러울"}]},{id:230,hanja:"躙",strokes:"23",def:{en:["trample down","oppress","overrun"],kr:["짓밟을","린"]},hunum:[{kor:"린",def:"짓밟을"}]},{id:231,hanja:"甸",strokes:"7",def:{en:["suburbs of capital","govern","crops"],kr:["경기","전"]},hunum:[{kor:"승",def:"다스릴"},{kor:"전",def:"경기"}]},{id:232,hanja:"稅",strokes:"12",def:{en:["taxes","revenue","duty","tax"],kr:["끌를","탈"]},hunum:[{kor:"세",def:"구실"},{kor:"탈",def:"풀"}]},{id:233,hanja:"飲",strokes:"13",def:{en:["drink","swallow","kind of drink"],kr:["飮과","同字"]},hunum:[{kor:"음",def:"마실"}]},{id:234,hanja:"泥",strokes:"8",def:{en:["mud","mire","earth","clay","plaster"],kr:["이슬","맺힐","니"]},hunum:[{kor:"이",def:"진흙"}]},{id:235,hanja:"噍",strokes:"15",def:{en:["chew","eat","munch"],kr:["먹을","초"]},hunum:[{kor:"초",def:"먹을"}]},{id:236,hanja:"躚",strokes:"23",def:{en:["wander about","walk around","revolve"],kr:["춤출","선"]},hunum:[{kor:"선",def:"춤출"}]},{id:237,hanja:"罵",strokes:"15",def:{en:["accuse","blame","curse","scold"],kr:["욕할","매"]},hunum:[{kor:"매",def:"욕할"}]},{id:238,hanja:"宻",strokes:"10",def:{en:["dense","thick","close","intimate"],kr:["密의","俗字"]},hunum:[{kor:"밀",def:"빽빽할"}]},{id:239,hanja:"理",strokes:"11",def:{en:["reason","logic","manage"],kr:["나무결","리"]},hunum:[{kor:"이",def:"다스릴"}]},{id:240,hanja:"町",strokes:"7",def:{en:["raised path between fields"],kr:["시가","정"]},hunum:[{kor:"정",def:"밭 두덕"}]},{id:241,hanja:"鷁",strokes:"21",def:{en:["fishhawk bow or prow"],kr:["돛대","끝","바람개비","익"]},hunum:[{kor:"익",def:"익새"}]},{id:242,hanja:"悦",strokes:"10",def:{en:["pleased","contented","gratified"],kr:["悅의","略字"]},hunum:[{kor:"열",def:"기쁠"}]},{id:243,hanja:"噎",strokes:"15",def:{en:["choke","hiccup"],kr:["목","멜","열"]},hunum:[{kor:"열",def:"목 멜"}]},{id:244,hanja:"飴",strokes:"14",def:{en:["sweet","sweet","syrup"],kr:["엿","이"]},hunum:[{kor:"시",def:"기를"},{kor:"이",def:"엿"}]},{id:245,hanja:"痢",strokes:"12",def:{en:["dysentery"],kr:["설사","리"]},hunum:[{kor:"이",def:"이질"}]},{id:246,hanja:"噏",strokes:"15",def:{en:["inhale","absorb","imbibe","compress","say","tell"],kr:["숨","들이쉴","흡"]},hunum:[{kor:"흡",def:"숨 들이쉴"}]},{id:247,hanja:"画",strokes:"8",def:{en:["a painting","picture","drawing","to draw"],kr:["畫의","略字"]},hunum:[{kor:"화",def:"그림"},{kor:"획",def:"그을"}]},{id:248,hanja:"葡",strokes:"15",def:{en:["grapes"],kr:["나라이름","포"]},hunum:[{kor:"포",def:"포도"}]},{id:249,hanja:"鷂",strokes:"21",def:{en:["sparrow hawk","Circus species"],kr:["새매","요"]},hunum:[{kor:"요",def:"장끼"}]},{id:250,hanja:"稈",strokes:"12",def:{en:["stalk of grain","straw"],kr:["짚","간"]},hunum:[{kor:"간",def:"짚"}]},{id:251,hanja:"悧",strokes:"10",def:{en:["smooth","active","clever","sharp"],kr:["영리할","리"]},hunum:[{kor:"리",def:"영리할"}]},{id:252,hanja:"罹",strokes:"16",def:{en:["sorrow","grief","incur","meet with"],kr:["걸릴","리"]},hunum:[{kor:"이",def:"만날"}]},{id:253,hanja:"罷",strokes:"15",def:{en:["cease","finish","stop","give up"],kr:["잔병","피"]},hunum:[{kor:"파",def:"파할"},{kor:"피",def:"느른할"}]},{id:254,hanja:"甼",strokes:"7",def:{en:["raised path between fields"]},hunum:[{kor:"정",def:"논두렁"}]},{id:255,hanja:"噐",strokes:"15",def:{en:["receptacle","vessel","instrument"],kr:["그릇","기"]},hunum:[{kor:"기",def:"그릇"}]},{id:256,hanja:"裏",strokes:"13",def:{en:["inside","interior","within"],kr:["속","리"]},hunum:[{kor:"이",def:"옷 안"}]},{id:257,hanja:"稊",strokes:"12",def:{en:["darnels","tares"],kr:["강아지풀","제"]},hunum:[{kor:"제",def:"강아지풀"}]},{id:258,hanja:"鷄",strokes:"21",def:{en:["chicken"],kr:["닭","계"]},hunum:[{kor:"계",def:"닭"}]},{id:259,hanja:"董",strokes:"15",def:{en:["direct","supervise","surname"],kr:["바로잡을","동"]},hunum:[{kor:"동",def:"바로잡을"}]},{id:260,hanja:"躞",strokes:"24",def:{en:["to walk"],kr:["저벅저벅","걸을","섭"]},hunum:[{kor:"섭",def:"족자 마구리"}]},{id:261,hanja:"甽",strokes:"8",def:{en:["drain between fields","irrigation"],kr:["畎의","古字"]},hunum:[{kor:"견",def:"밭 도랑"}]},{id:262,hanja:"罸",strokes:"15",def:{en:["penalty","fine","punish","penalize"],kr:["罰과","同字"]},hunum:[{kor:"벌",def:"죄"}]},{id:263,hanja:"悩",strokes:"10",def:{en:["angered","filled with hate"],kr:["惱의","俗字"]},hunum:[{kor:"뇌",def:"괴로워할"}]},{id:264,hanja:"宿",strokes:"11",def:{en:["stop","rest","lodge","stay overnight","constellation"],kr:["머물","숙"]},hunum:[{kor:"수",def:"떼별"},{kor:"숙",def:"잘"}]},{id:265,hanja:"裡",strokes:"13",def:{en:["inside","interior","within"],kr:["裏의","俗字"]},hunum:[{kor:"이",def:"속"}]},{id:266,hanja:"程",strokes:"12",def:{en:["journey","trip","schedule","agenda"],kr:["길","정"]},hunum:[{kor:"정",def:"법"}]},{id:267,hanja:"罹",strokes:"16",def:{en:["sorrow","grief","incur","meet with"],kr:["근심","리"]},hunum:[{kor:"리",def:"근심"}]},{id:268,hanja:"悪",strokes:"11",def:{en:["evil","wicked","bad","foul"],kr:["惡의","略字"]},hunum:[{kor:"악",def:"나쁠"},{kor:"오",def:"미워할"}]},{id:269,hanja:"里",strokes:"7",def:{en:["unit of distance","village","lane"],kr:["잇수","리"]},hunum:[{kor:"이",def:"마을"}]},{id:270,hanja:"噓",strokes:"14",def:{en:["exhale","blow out","deep sigh","hiss","praise","flatter","lie"],kr:["뿜을","허"]},hunum:[{kor:"허",def:"불"}]},{id:271,hanja:"鎊",strokes:"18",def:{en:["pound sterling"],kr:["깎을","방"]},hunum:[{kor:"방",def:"깎을"}]},{id:272,hanja:"甿",strokes:"8",def:{en:["farming population"]},hunum:[{kor:"맹",def:"백성"}]},{id:273,hanja:"稌",strokes:"12",def:{en:["glutinous rice"],kr:["찰벼","도"]},hunum:[{kor:"도",def:"찰벼"}]},{id:274,hanja:"離",strokes:"19",def:{en:["leave","depart","go away","separate"],kr:["외손","리"]},hunum:[{kor:"이",def:"떠날"}]},{id:275,hanja:"稍",strokes:"12",def:{en:["little","slightly","rather"],kr:["벼","줄기","끝","초"]},hunum:[{kor:"초",def:"벼 줄기 끝"}]},{id:276,hanja:"鷇",strokes:"21",def:{en:["chicks","fledglings"],kr:["새","새끼","구"]},hunum:[{kor:"구",def:"새 새끼"}]},{id:277,hanja:"葦",strokes:"15",def:{en:["reed"],kr:["작은","배","위"]},hunum:[{kor:"위",def:"갈대"}]},{id:278,hanja:"躡",strokes:"25",def:{en:["tread","step on","follow","track"],kr:["오를","섭"]},hunum:[{kor:"섭",def:"밟을"}]},{id:279,hanja:"匿",strokes:"11",def:{en:["hide","go into hiding"],kr:["술","담는","그릇","닉"]},hunum:[{kor:"익",def:"숨을"}]},{id:280,hanja:"罼",strokes:"16",def:{en:[],kr:["토끼그물","필"]},hunum:[{kor:"필",def:"토끼그물"}]},{id:281,hanja:"鎌",strokes:"18",def:{en:["sickle"],kr:["낫","겸"]},hunum:[{kor:"겸",def:"낫"}]},{id:282,hanja:"税",strokes:"12",def:{en:["taxes"],kr:["稅과","同字"]},hunum:[{kor:"세",def:"세금"},{kor:"수",def:"수의"},{kor:"열",def:"기쁠"},{kor:"탈",def:"벗을"}]},{id:283,hanja:"溺",strokes:"13",def:{en:["drown","submerge in water","indulge"],kr:["헤어","나오지","못할","닉"]},hunum:[{kor:"익",def:"빠질"}]},{id:284,hanja:"飻",strokes:"14",def:{en:[],kr:["탐할","철"]},hunum:[{kor:"철",def:"탐할"}]},{id:285,hanja:"罽",strokes:"17",def:{en:["a kind of woolen fabric"],kr:["물고기","그물","계"]},hunum:[{kor:"계",def:"물고기 그물"}]},{id:286,hanja:"噕",strokes:"15",def:{en:["to speak falsely or wrongly","ugly"],kr:["噅와","同字"]},hunum:[{kor:"위",def:"거짓말"}]},{id:287,hanja:"吝",strokes:"7",def:{en:["stingy","miserly","parsimonious"],kr:["아낄","인"]},hunum:[{kor:"인",def:"아낄"}]},{id:288,hanja:"罾",strokes:"17",def:{en:["a large square net","lowered and raised from the bank of the river"],kr:["어망","증"]},hunum:[{kor:"증",def:"어망"}]},{id:289,hanja:"櫪",strokes:"20",def:{en:["type of oak","stable"],kr:["말구유","력"]},hunum:[{kor:"력",def:"말구유"}]},{id:290,hanja:"飼",strokes:"14",def:{en:["raise animals","feed","nourish"],kr:["먹일","사"]},hunum:[{kor:"사",def:"먹일"}]},{id:291,hanja:"燐",strokes:"16",def:{en:["phosphorus"],kr:["도깨비불","인"]},hunum:[{kor:"인",def:"도깨비불"}]},{id:292,hanja:"飽",strokes:"14",def:{en:["eat heartily","eat one"],kr:["흡족할","포"]},hunum:[{kor:"포",def:"배부를"}]},{id:293,hanja:"葩",strokes:"15",def:{en:["flowers"],kr:["꽃봉오리","파"]},hunum:[{kor:"파",def:"꽃봉오리"}]},{id:294,hanja:"悰",strokes:"11",def:{en:["enjoy","amuse","please","joy"],kr:["즐길","종"]},hunum:[{kor:"종",def:"즐길"}]},{id:295,hanja:"鎏",strokes:"18",def:{en:["pure gold"],kr:["급속","류"]},hunum:[{kor:"류",def:"급속"}]},{id:296,hanja:"璘",strokes:"16",def:{en:["luster of jade"],kr:["옥빛","인"]},hunum:[{kor:"인",def:"옥빛"}]},{id:297,hanja:"櫬",strokes:"20",def:{en:["coffin","tung tree"],kr:["땔나무","친"]},hunum:[{kor:"친",def:"관"}]},{id:298,hanja:"葪",strokes:"15",def:{en:[],kr:["삽주","계"]},hunum:[{kor:"계",def:"베일"}]},{id:299,hanja:"悱",strokes:"11",def:{en:["to be desirous of speaking"],kr:["표현","못할","비"]},hunum:[{kor:"비",def:"표현 못할"}]},{id:300,hanja:"飾",strokes:"14",def:{en:["decorate","ornament","adorn","to deceive"],kr:["분","바를","식"]},hunum:[{kor:"식",def:"꾸밀"}]},{id:301,hanja:"藺",strokes:"22",def:{en:["rush used in making mats","surname"],kr:["골풀","인"]},hunum:[{kor:"인",def:"골풀"}]},{id:302,hanja:"葫",strokes:"15",def:{en:["bottle"],kr:["조롱박","호"]},hunum:[{kor:"호",def:"마늘"}]},{id:303,hanja:"悲",strokes:"12",def:{en:["sorrow","grief","sorry","sad"],kr:["슬플","비"]},hunum:[{kor:"비",def:"슬플"}]},{id:304,hanja:"隣",strokes:"15",def:{en:["neighbor","neighboring","adjacent"],kr:["鄰의","俗字"]},hunum:[{kor:"인",def:"이웃"}]},{id:305,hanja:"葬",strokes:"15",def:{en:["bury","inter"],kr:["장사","지낼","장"]},hunum:[{kor:"장",def:"장사 지낼"}]},{id:306,hanja:"稔",strokes:"13",def:{en:["ripe grain","harvest","to know","be familiar with"],kr:["곡식익을","임"]},hunum:[{kor:"염",def:"풍년들"},{kor:"임",def:"곡식익을"}]},{id:307,hanja:"悳",strokes:"12",def:{en:["ethics","morality","virtue"],kr:["德의","古字"]},hunum:[{kor:"덕",def:"큰"}]},{id:308,hanja:"鱗",strokes:"23",def:{en:["fish scales"],kr:["비늘","인"]},hunum:[{kor:"인",def:"비늘"}]},{id:309,hanja:"悴",strokes:"11",def:{en:["suffer","become emaciated","haggard"],kr:["피폐할","췌"]},hunum:[{kor:"췌",def:"근심할"}]},{id:310,hanja:"葭",strokes:"15",def:{en:["bulrush","reed","flute","whistle"],kr:["갈대","가"]},hunum:[{kor:"가",def:"갈대"}]},{id:311,hanja:"躩",strokes:"27",def:{en:["take quick","short steps"],kr:["바삐","갈","곽"]},hunum:[{kor:"곽",def:"바삐 갈"}]},{id:312,hanja:"斁",strokes:"17",def:{en:["dislike","be weary of","explain"],kr:["섞을","두"]},hunum:[{kor:"두",def:"섞을"}]},{id:313,hanja:"麟",strokes:"23",def:{en:["female of Chinese unicorn"],kr:["기린","인"]},hunum:[{kor:"인",def:"기린"}]},{id:314,hanja:"悵",strokes:"11",def:{en:["disappointed","dissatisfied"],kr:["슬퍼할","창"]},hunum:[{kor:"창",def:"슬퍼할"}]},{id:315,hanja:"鎔",strokes:"18",def:{en:["fuse","melt","smelt","mold"],kr:["거푸집","용"]},hunum:[{kor:"용",def:"불릴"}]},{id:316,hanja:"躪",strokes:"27",def:{en:["trample down","oppress","overrun"],kr:["짓밟을","린"]},hunum:[{kor:"린",def:"짓밟을"}]},{id:317,hanja:"斂",strokes:"17",def:{en:["draw back","fold back","collect"],kr:["거둘","렴"]},hunum:[{kor:"렴",def:"거둘"}]},{id:318,hanja:"林",strokes:"8",def:{en:["forest","grove","surname"],kr:["더북더북","날","림"]},hunum:[{kor:"임",def:"수풀"}]},{id:319,hanja:"斃",strokes:"18",def:{en:["kill","die violent death"],kr:["엎드러질","폐"]},hunum:[{kor:"폐",def:"죽을"}]},{id:320,hanja:"稗",strokes:"13",def:{en:["darnels","weeds","tares small"],kr:["조그마할","패"]},hunum:[{kor:"패",def:"돌피"}]},{id:321,hanja:"葯",strokes:"15",def:{en:["orris root","leaf of the iris","medicine"],kr:["꽃밥","약"]},hunum:[{kor:"악",def:"구리때 잎"},{kor:"약",def:"꽃밥"}]},{id:322,hanja:"身",strokes:"7",def:{en:["body","trunk","hull","rad"],kr:["몸소","신"]},hunum:[{kor:"신",def:"몸"}]},{id:323,hanja:"悶",strokes:"12",def:{en:["gloomy","depressed","melancholy"],kr:["번민할","민"]},hunum:[{kor:"민",def:"번민할"}]},{id:324,hanja:"淋",strokes:"11",def:{en:["drip","soak","drench","perfectly"],kr:["번지르르할","림"]},hunum:[{kor:"임",def:"지적지적할"}]},{id:325,hanja:"鎖",strokes:"18",def:{en:["lock","padlock","shackles","chains"],kr:["항쇄","쇄"]},hunum:[{kor:"쇄",def:"자물쇠"}]},{id:326,hanja:"躬",strokes:"10",def:{en:["body","personally","in person"],kr:["몸","궁"]},hunum:[{kor:"궁",def:"몸"}]},{id:327,hanja:"噞",strokes:"16",def:{en:["the movement of a fish"],kr:["고기","우물거릴","엄"]},hunum:[{kor:"엄",def:"고기 우물거릴"}]},{id:328,hanja:"臨",strokes:"17",def:{en:["draw near","approach","descend"],kr:["굽힐","림"]},hunum:[{kor:"임",def:"임할"}]},{id:329,hanja:"斅",strokes:"20",def:{en:["teach","instruct","be aroused","awake","intelligent"],kr:["가르칠","효"]},hunum:[{kor:"효",def:"가르칠"}]},{id:330,hanja:"葱",strokes:"15",def:{en:["scallions","leeks","green onions"],kr:["풀","더북할","총"]},hunum:[{kor:"총",def:"풀 더북할"}]},{id:331,hanja:"稙",strokes:"13",def:{en:["grain ready for grinding"],kr:["올벼","직"]},hunum:[{kor:"직",def:"올벼"}]},{id:332,hanja:"鎗",strokes:"18",def:{en:["rifle","small arms","hand gun"],kr:["총","쟁"]},hunum:[{kor:"쟁",def:"금석소리"}]},{id:333,hanja:"悸",strokes:"11",def:{en:["fearful","apprehensive","perturbed"],kr:["두근거를","계"]},hunum:[{kor:"계",def:"두근거를"}]},{id:334,hanja:"激",strokes:"16",def:{en:["arouse","excite","incite","quickly"],kr:["말","과격히","할","격"]},hunum:[{kor:"격",def:"물결 부딪혀 흐를"}]},{id:335,hanja:"立",strokes:"5",def:{en:["stand","let stand","establish","set"],kr:["설","입"]},hunum:[{kor:"입",def:"설"}]},{id:336,hanja:"斆",strokes:"20",def:{en:["teach","instruct","be aroused","awake","intelligent"],kr:["斅와","同字"]},hunum:[{kor:"효",def:"가르칠"}]},{id:337,hanja:"濁",strokes:"16",def:{en:["muddy","turbid","dirty","filthy"],kr:["물이름","탁"]},hunum:[{kor:"탁",def:"흐릴"}]},{id:338,hanja:"稚",strokes:"13",def:{en:["young","immature","childhood"],kr:["늦을","치"]},hunum:[{kor:"치",def:"어린 벼"}]},{id:339,hanja:"鷓",strokes:"22",def:{en:["partridge"],kr:["자고","자"]},hunum:[{kor:"자",def:"자고"}]},{id:340,hanja:"噠",strokes:"16",def:{en:["sound made to get a horse to move forward"],kr:["오랑캐","나라","이름","달"]},hunum:[{kor:"달",def:"오랑캐 나라 이름"}]},{id:341,hanja:"葳",strokes:"15",def:{en:["luxuriant","flourishing","used for various plants"],kr:["위유풀","위"]},hunum:[{kor:"위",def:"초목 성할"}]},{id:342,hanja:"文",strokes:"4",def:{en:["literature","culture","writing"],kr:["얼룩","문"]},hunum:[{kor:"문",def:"무늬"}]},{id:343,hanja:"濂",strokes:"16",def:{en:["a waterfall","a river in Hunan"],kr:["내","이름","렴"]},hunum:[{kor:"렴",def:"내 이름"}]},{id:344,hanja:"笠",strokes:"11",def:{en:["bamboo hat","bamboo covering"],kr:["우리","입"]},hunum:[{kor:"입",def:"우리"}]},{id:345,hanja:"櫶",strokes:"20",def:{en:[]},hunum:[{kor:"헌",def:"나무 이름"}]},{id:346,hanja:"悻",strokes:"11",def:{en:["anger","vexation","angry","indignant"],kr:["발끈","성낼","행"]},hunum:[{kor:"행",def:"발끈 성낼"}]},{id:347,hanja:"斈",strokes:"7",def:{en:["learning","knowledge","school"],kr:["學의","略字"]},hunum:[{kor:"학",def:"배울"}]},{id:348,hanja:"鎚",strokes:"18",def:{en:["hammer","mallet","club"],kr:["옥","다듬을","퇴"]},hunum:[{kor:"추",def:"쇠마치"},{kor:"퇴",def:"옥 다듬을"}]},{id:349,hanja:"襁",strokes:"17",def:{en:["swaddling clothes"],kr:["포대기","강"]},hunum:[{kor:"강",def:"포대기"}]},{id:350,hanja:"稜",strokes:"13",def:{en:["corner","edge","angle","square block"],kr:["모","릉"]},hunum:[{kor:"릉",def:"모"}]},{id:351,hanja:"濃",strokes:"16",def:{en:["thick","strong","concentrated"],kr:["짙을","농"]},hunum:[{kor:"농",def:"짙을"}]},{id:352,hanja:"噢",strokes:"16",def:{en:["moan","interjection for pain","sad"],kr:["슬퍼할","욱"]},hunum:[{kor:"우",def:"슬퍼할"},{kor:"욱",def:"슬퍼할"}]},{id:353,hanja:"粒",strokes:"11",def:{en:["grain","small particle"],kr:["알","입"]},hunum:[{kor:"입",def:"알"}]},{id:354,hanja:"躱",strokes:"13",def:{en:["hide"],kr:["피할","타"]},hunum:[{kor:"타",def:"피할"}]},{id:355,hanja:"噣",strokes:"16",def:{en:["a beak","to peck","to order","enjoin upon"],kr:["쪼을","탁"]},hunum:[{kor:"주",def:"부리"},{kor:"탁",def:"쪼을"}]},{id:356,hanja:"狀",strokes:"7",def:{en:["form","appearance","shape","official"],kr:["모양","형상","장"]},hunum:[{kor:"장",def:"모양 형상"}]},{id:357,hanja:"鎛",strokes:"18",def:{en:["large bell","hoe","spade"],kr:["종","박"]},hunum:[{kor:"박",def:"종"}]},{id:358,hanja:"鷖",strokes:"22",def:{en:["seagull"],kr:["봉황","예"]},hunum:[{kor:"예",def:"갈매기"}]},{id:359,hanja:"葵",strokes:"15",def:{en:["sunflower","measure"],kr:["해바라기","규"]},hunum:[{kor:"규",def:"해바라기"}]},{id:360,hanja:"櫷",strokes:"22",def:{en:[],kr:["느티나무","귀"]},hunum:[{kor:"귀",def:"느티나무"}]},{id:361,hanja:"炙",strokes:"8",def:{en:["roast","broil","toast","cauterize"],kr:["냄새","퍼질","적"]},hunum:[{kor:"적",def:"고기구이"}]},{id:362,hanja:"鷗",strokes:"22",def:{en:["seagull","tern","Larus species"],kr:["갈매기","구"]},hunum:[{kor:"구",def:"갈매기"}]},{id:363,hanja:"稞",strokes:"13",def:{en:["grain ready for grinding","grain"],kr:["보리","과"]},hunum:[{kor:"과",def:"보리"}]},{id:364,hanja:"悼",strokes:"11",def:{en:["grieve","mourn","lament","grieved"],kr:["슬퍼할","도"]},hunum:[{kor:"도",def:"슬퍼할"}]},{id:365,hanja:"噤",strokes:"16",def:{en:["close","be silent","be unable speak"],kr:["입","다물","금"]},hunum:[{kor:"금",def:"입 다물"}]},{id:366,hanja:"葷",strokes:"15",def:{en:["meat diet","strong smelling"],kr:["매운","채소","훈"]},hunum:[{kor:"훈",def:"매운 채소"}]},{id:367,hanja:"稟",strokes:"13",def:{en:["report to","petition"],kr:["성품","품"]},hunum:[{kor:"품",def:"여쭐"}]},{id:368,hanja:"悽",strokes:"11",def:{en:["sorrowful","grieved","melancholy"],kr:["슬퍼할","처"]},hunum:[{kor:"처",def:"슬퍼할"}]},{id:369,hanja:"識",strokes:"19",def:{en:["recognize","understand","know"],kr:["표할","지"]},hunum:[{kor:"지",def:"표할"}]},{id:370,hanja:"襄",strokes:"17",def:{en:["aid","help","assist","undress"],kr:["장사지낼","양"]},hunum:[{kor:"양",def:"오를"}]},{id:371,hanja:"濆",strokes:"16",def:{en:["river bank","river in Henan province","gush"],kr:["뿜을","분"]},hunum:[{kor:"분",def:"뿜을"}]},{id:372,hanja:"噥",strokes:"16",def:{en:["whisper"],kr:["달게","먹을","농"]},hunum:[{kor:"농",def:"달게 먹을"}]},{id:373,hanja:"什",strokes:"4",def:{en:["file of ten soldiers"],kr:["세간","집"]},hunum:[{kor:"집",def:"세간"}]},{id:374,hanja:"鷙",strokes:"22",def:{en:["hawk","vulture"],kr:["맹금","지"]},hunum:[{kor:"지",def:"맹금"}]},{id:375,hanja:"稠",strokes:"13",def:{en:["dense","crowded","packed","soupy"],kr:["빽빽할","주"]},hunum:[{kor:"조",def:"빽빽할"},{kor:"주",def:"빽빽할"}]},{id:376,hanja:"躳",strokes:"14",def:{en:["body","self"],kr:["躬의","本字"]},hunum:[{kor:"궁",def:"몸"}]},{id:377,hanja:"悾",strokes:"11",def:{en:["naive","guileless","simple"],kr:["정성","공"]},hunum:[{kor:"공",def:"정성"}]},{id:378,hanja:"斌",strokes:"11",def:{en:["refined","having both appearance"],kr:["빛날","빈"]},hunum:[{kor:"빈",def:"빛날"}]},{id:379,hanja:"濇",strokes:"16",def:{en:["astringent","harsh","rough","uneven"],kr:["껄끄러울","색"]},hunum:[{kor:"색",def:"껄끄러울"}]},{id:380,hanja:"噦",strokes:"16",def:{en:["belch","vomit"],kr:["새소리","홰"]},hunum:[{kor:"얼",def:"재채기할"},{kor:"홰",def:"새소리"}]},{id:381,hanja:"噧",strokes:"16",def:{en:[],kr:["기운","높여","떠들","홰"]},hunum:[{kor:"홰",def:"기운 높여 떠들"}]},{id:382,hanja:"茶",strokes:"12",def:{en:["tea"],kr:["차","차"]},hunum:[{kor:"차",def:"차"}]},{id:383,hanja:"鎟",strokes:"18",def:{en:[],kr:["방울소리","상"]},hunum:[{kor:"상",def:"방울소리"}]},{id:384,hanja:"櫻",strokes:"21",def:{en:["cherry","cherry blossom"],kr:["앵두나무","앵"]},hunum:[{kor:"앵",def:"앵두나무"}]},{id:385,hanja:"櫼",strokes:"21",def:{en:[],kr:["쐐기","첨"]},hunum:[{kor:"첨",def:"쐐기"}]},{id:386,hanja:"刺",strokes:"8",def:{en:["stab","prick","irritate","prod"],kr:["찌를","척"]},hunum:[{kor:"척",def:"찌를"}]},{id:387,hanja:"葺",strokes:"15",def:{en:["thatch","fix","repair","pile up"],kr:["기울","즙"]},hunum:[{kor:"즙",def:"기울"}]},{id:388,hanja:"濉",strokes:"16",def:{en:[]},hunum:[{kor:"수",def:"물 이름"}]},{id:389,hanja:"器",strokes:"16",def:{en:["receptacle","vessel","instrument"],kr:["그릇","기"]},hunum:[{kor:"기",def:"그릇"}]},{id:390,hanja:"鎡",strokes:"18",def:{en:["hoe","mattock"],kr:["호미","자"]},hunum:[{kor:"자",def:"호미"}]},{id:391,hanja:"濊",strokes:"16",def:{en:["vast","expansive","deep","dirty"],kr:["물","넘칠","예"]},hunum:[{kor:"예",def:"흐릴"}]},{id:392,hanja:"噩",strokes:"16",def:{en:["bad","ill","unlucky"],kr:["놀랄","악"]},hunum:[{kor:"악",def:"놀랄"}]},{id:393,hanja:"噪",strokes:"16",def:{en:["be noisy","chirp loudly"],kr:["떠들썩할","조"]},hunum:[{kor:"조",def:"떠들썩할"}]},{id:394,hanja:"鎣",strokes:"18",def:{en:["polish"],kr:["꾸밀","형"]},hunum:[{kor:"형",def:"줄"}]},{id:395,hanja:"斐",strokes:"12",def:{en:["graceful","elegant","beautiful"],kr:["오락가락할","비"]},hunum:[{kor:"비",def:"오락가락할"}]},{id:396,hanja:"噫",strokes:"16",def:{en:["belch","alas"],kr:["탄식할","희"]},hunum:[{kor:"애",def:"트림할"},{kor:"희",def:"탄식할"}]},{id:397,hanja:"鎤",strokes:"18",def:{en:["sound of a bell","small bell"],kr:["종소리","황"]},hunum:[{kor:"황",def:"종소리"}]},{id:398,hanja:"斑",strokes:"12",def:{en:["mottled","striped","freckle"],kr:["얼룩","반"]},hunum:[{kor:"반",def:"얼룩"}]},{id:399,hanja:"噬",strokes:"16",def:{en:["bite","gnaw","snap at"],kr:["씹을","서"]},hunum:[{kor:"서",def:"씹을"}]},{id:400,hanja:"噭",strokes:"16",def:{en:["shout"],kr:["부르짖을","교"]},hunum:[{kor:"교",def:"부르짖을"}]},{id:401,hanja:"襍",strokes:"18",def:{en:["mixed","blended","mix","mingle"],kr:["雜의","本字"]},hunum:[{kor:"잡",def:"섞일"}]},{id:402,hanja:"稧",strokes:"14",def:{en:[],kr:["볏단","설"]},hunum:[{kor:"설",def:"볏단"}]},{id:403,hanja:"噮",strokes:"16",def:{en:[],kr:["몹시","달","연"]},hunum:[{kor:"연",def:"몹시 달"}]},{id:404,hanja:"儀",strokes:"15",def:{en:["ceremony","rites gifts","admire"],kr:["좋을","의"]},hunum:[{kor:"의",def:"꼴"}]},{id:405,hanja:"噯",strokes:"16",def:{en:["interjection","exclamation"],kr:["트림할","애"]},hunum:[{kor:"애",def:"트림할"}]},{id:406,hanja:"儁",strokes:"15",def:{en:["outstanding","fine","superior","talented","capable","handsome"],kr:["雋·俊과","同字"]},hunum:[{kor:"준",def:"준걸"}]},{id:407,hanja:"鎧",strokes:"18",def:{en:["armor","chain mail"],kr:["갑옷","개"]},hunum:[{kor:"개",def:"투구"}]},{id:408,hanja:"噰",strokes:"16",def:{en:[],kr:["화한","소리","옹"]},hunum:[{kor:"옹",def:"화한 소리"}]},{id:409,hanja:"儂",strokes:"15",def:{en:["I","you","family name"],kr:["나","농"]},hunum:[{kor:"농",def:"나"}]},{id:410,hanja:"噱",strokes:"16",def:{en:["laugh heartily","laugh aloud"],kr:["입","벌일","갹"]},hunum:[{kor:"갹",def:"껄껄 웃을"}]},{id:411,hanja:"噲",strokes:"16",def:{en:["swallow","gulp down","greedy"],kr:["훨할","쾌"]},hunum:[{kor:"쾌",def:"목구멍"}]},{id:412,hanja:"儃",strokes:"15",def:{en:[],kr:["머뭇거릴","천"]},hunum:[{kor:"천",def:"머뭇거릴"}]},{id:413,hanja:"斗",strokes:"4",def:{en:["Chinese peck","liquid measure"],kr:["말","두"]},hunum:[{kor:"두",def:"말"}]},{id:414,hanja:"鷦",strokes:"23",def:{en:["wren"],kr:["뱁새","초"]},hunum:[{kor:"초",def:"뱁새"}]},{id:415,hanja:"億",strokes:"15",def:{en:["hundred million","many"],kr:["인민","억"]},hunum:[{kor:"억",def:"억"}]},{id:416,hanja:"孀",strokes:"20",def:{en:["widow"],kr:["과부","상"]},hunum:[{kor:"상",def:"과부"}]},{id:417,hanja:"噳",strokes:"16",def:{en:["many"],kr:["뭇","사슴","우물거릴","우"]},hunum:[{kor:"우",def:"뭇 사슴 우물거릴"}]},{id:418,hanja:"料",strokes:"10",def:{en:["consider","conjecture","materials","ingredients"],kr:["되질할","료"]},hunum:[{kor:"료",def:"되질할"}]},{id:419,hanja:"濕",strokes:"17",def:{en:["wet","moist","humid","damp","an illness"],kr:["근심","습"]},hunum:[{kor:"습",def:"젖을"}]},{id:420,hanja:"鎬",strokes:"18",def:{en:["stove","bright"],kr:["호경","호"]},hunum:[{kor:"호",def:"호경"}]},{id:421,hanja:"種",strokes:"14",def:{en:["seed","race","offspring","to plant"],kr:["씨","종"]},hunum:[{kor:"종",def:"씨"}]},{id:422,hanja:"儆",strokes:"15",def:{en:["warn","warning"],kr:["경계할","경"]},hunum:[{kor:"경",def:"경계할"}]},{id:423,hanja:"噴",strokes:"15",def:{en:["spurt","blow out","puff out"],kr:["뿜을","분"]},hunum:[{kor:"분",def:"뿜을"}]},{id:424,hanja:"儇",strokes:"15",def:{en:["clever","nimble"],kr:["빠를","현"]},hunum:[{kor:"현",def:"영리할"}]},{id:425,hanja:"鎭",strokes:"18",def:{en:["town","market place","suppress"],kr:["누를","진"]},hunum:[{kor:"진",def:"누를"}]},{id:426,hanja:"孃",strokes:"20",def:{en:["troubled","oppressed","fat","mother"],kr:["계집아이","양"]},hunum:[{kor:"양",def:"계집아이"}]},{id:427,hanja:"鷩",strokes:"23",def:{en:["pheasant"],kr:["금계","별"]},hunum:[{kor:"별",def:"금계"}]},{id:428,hanja:"斛",strokes:"11",def:{en:["dry measure equal to some five or ten dou"],kr:["舒"]},hunum:[{kor:"곡",def:"휘"}]},{id:429,hanja:"鎮",strokes:"18",def:{en:["town","market place","suppress"],kr:["鎭의","俗字"]},hunum:[{kor:"진",def:"鎭의 俗"}]},{id:430,hanja:"儈",strokes:"15",def:{en:["go","broker","proxy"],kr:["거간군","괴"]},hunum:[{kor:"괴",def:"거간군"}]},{id:431,hanja:"鷪",strokes:"23",def:{en:[],kr:["꾀꼬리","앵"]},hunum:[{kor:"앵",def:"꾀꼬리"}]},{id:432,hanja:"襖",strokes:"19",def:{en:["outer garments","coat","jacket"],kr:["도포","오"]},hunum:[{kor:"오",def:"도포"}]},{id:433,hanja:"斜",strokes:"11",def:{en:["slanting","sloping","inclined"],kr:["고을이름","야"]},hunum:[{kor:"사",def:"비낄"},{kor:"야",def:"고을이름"}]},{id:434,hanja:"濘",strokes:"17",def:{en:["mud","miry","muddy","stagnant"],kr:["진흙","녕"]},hunum:[{kor:"녕",def:"진흙"}]},{id:435,hanja:"噶",strokes:"16",def:{en:["used in transliterations"],kr:["땅이름","갈"]},hunum:[{kor:"갈",def:"벼슬이름"}]},{id:436,hanja:"稱",strokes:"14",def:{en:["call","name","brand","address","say"],kr:["같을","칭"]},hunum:[{kor:"칭",def:"저울질할"}]},{id:437,hanja:"儉",strokes:"15",def:{en:["temperate","frugal","economical"],kr:["가난할","검"]},hunum:[{kor:"검",def:"검소할"}]},{id:438,hanja:"孅",strokes:"20",def:{en:["slender","thin","sharp"],kr:["가늘","섬"]},hunum:[{kor:"섬",def:"가늘"}]},{id:439,hanja:"鷫",strokes:"23",def:{en:["turquoise kingfisher"],kr:["숙상새","숙"]},hunum:[{kor:"숙",def:"숙상새"}]},{id:440,hanja:"斝",strokes:"12",def:{en:["small jade wine cup"],kr:["옥잔","가"]},hunum:[{kor:"가",def:"옥잔"}]},{id:441,hanja:"噸",strokes:"16",def:{en:["metric ton"]},hunum:[{kor:"톤",def:"톤"}]},{id:442,hanja:"鎰",strokes:"18",def:{en:["measure of weight for gold"],kr:["중량","일"]},hunum:[{kor:"일",def:"중량"}]},{id:443,hanja:"襘",strokes:"19",def:{en:[],kr:["띠매듭","괴"]},hunum:[{kor:"괴",def:"띠매듭"}]},{id:444,hanja:"稲",strokes:"14",def:{en:["rice growing in field","rice plant"],kr:["稻의","俗字"]},hunum:[{kor:"도",def:"벼"}]},{id:445,hanja:"斟",strokes:"13",def:{en:["to pour wine or tea into a cup","to gauge"],kr:["술","따를","짐"]},hunum:[{kor:"짐",def:"술 따를"}]},{id:446,hanja:"儋",strokes:"15",def:{en:["a small jar","to bear a burden","a load of two"],kr:["기운차고","날쌜해집","담"]},hunum:[{kor:"담",def:"기운차고 날쌜해집"}]},{id:447,hanja:"稳",strokes:"14",def:{en:["stable","firm","solid","steady"],kr:["穩의","俗字"]},hunum:[{kor:"온",def:"편안할"}]},{id:448,hanja:"濚",strokes:"17",def:{en:[],kr:["물","돌아나갈","영"]},hunum:[{kor:"영",def:"물 돌아나갈"}]},{id:449,hanja:"瓆",strokes:"19",def:{en:[],kr:["사람","이름","질"]},hunum:[{kor:"질",def:"사람 이름"}]},{id:450,hanja:"儌",strokes:"15",def:{en:["lucky","fortunate"],kr:["갈","교"]},hunum:[{kor:"교",def:"갈"}]},{id:451,hanja:"濛",strokes:"17",def:{en:["drizzling","misty","raining"],kr:["가랑비","올","몽"]},hunum:[{kor:"몽",def:"가랑비 올"}]},{id:452,hanja:"噺",strokes:"16",def:{en:["story","talk"],kr:["이야기","신"]},hunum:[{kor:"신",def:"이야기"}]},{id:453,hanja:"斡",strokes:"14",def:{en:["revolve","rotate","turn"],kr:["주선할","알"]},hunum:[{kor:"간",def:"관리할"},{kor:"알",def:"돌릴"}]},{id:454,hanja:"襜",strokes:"19",def:{en:["flutter","shaking or vibrating"],kr:["행주치마","첨"]},hunum:[{kor:"첨",def:"행주치마"}]},{id:455,hanja:"稶",strokes:"15",def:{en:[],kr:["서직","무성할","욱"]},hunum:[{kor:"욱",def:"서직 무성할"}]},{id:456,hanja:"稷",strokes:"15",def:{en:["god of cereals","minister of agriculture"],kr:["기장","직"]},hunum:[{kor:"직",def:"기장"}]},{id:457,hanja:"鷰",strokes:"23",def:{en:[],kr:["씨름","연"]},hunum:[{kor:"연",def:"제비"}]},{id:458,hanja:"濞",strokes:"17",def:{en:[],kr:["물","소리","비"]},hunum:[{kor:"비",def:"물 소리"}]},{id:459,hanja:"濟",strokes:"17",def:{en:["to help","aid","relieve","to ferry","cross"],kr:["나루","제"]},hunum:[{kor:"제",def:"나루"}]},{id:460,hanja:"儐",strokes:"16",def:{en:["entertain guests"],kr:["인도할","빈"]},hunum:[{kor:"빈",def:"인도할"}]},{id:461,hanja:"鷱",strokes:"23",def:{en:[],kr:["새이름","고"]},hunum:[{kor:"고",def:"새이름"}]},{id:462,hanja:"瓊",strokes:"19",def:{en:["jade","rare","precious","elegant"],kr:["옥","경"]},hunum:[{kor:"경",def:"옥"}]},{id:463,hanja:"斤",strokes:"4",def:{en:["a catty","an axe","keen","shrewd","KangXi radical number"],kr:["근","근"]},hunum:[{kor:"근",def:"근"}]},{id:464,hanja:"濠",strokes:"17",def:{en:["moat","trench","ditch"],kr:["강","이름","호"]},hunum:[{kor:"호",def:"해자"}]},{id:465,hanja:"鷲",strokes:"23",def:{en:["condor","vulture"],kr:["독수리","취"]},hunum:[{kor:"취",def:"독수리"}]},{id:466,hanja:"斥",strokes:"5",def:{en:["to scold","upbraid","accuse","reproach"],kr:["물리칠","척"]},hunum:[{kor:"척",def:"물리칠"}]},{id:467,hanja:"稹",strokes:"15",def:{en:[],kr:["떨기로","날","진"]},hunum:[{kor:"진",def:"떨기로 날"}]},{id:468,hanja:"儑",strokes:"16",def:{en:[],kr:["용렬할","압"]},hunum:[{kor:"압",def:"잔피할"}]},{id:469,hanja:"孌",strokes:"22",def:{en:["lovely","beautiful","docile","obedient"],kr:["아름다울","련"]},hunum:[{kor:"련",def:"아름다울"}]},{id:470,hanja:"襞",strokes:"19",def:{en:["fold","pleat","crease"],kr:["주름","벽"]},hunum:[{kor:"벽",def:"주름"}]},{id:471,hanja:"鷳",strokes:"23",def:{en:["the silver pheasant","Lophura nycthemera"],kr:["소리개","한"]},hunum:[{kor:"한",def:"소리개"}]},{id:472,hanja:"儒",strokes:"16",def:{en:["Confucian scholar"],kr:["광대","유"]},hunum:[{kor:"유",def:"선비"}]},{id:473,hanja:"襟",strokes:"19",def:{en:["lapel","collar"],kr:["옷깃","금"]},hunum:[{kor:"금",def:"옷깃"}]},{id:474,hanja:"濡",strokes:"17",def:{en:["immerse","moisten","wet","damp"],kr:["곱고","윤택할","유"]},hunum:[{kor:"유",def:"적실"}]},{id:475,hanja:"儓",strokes:"16",def:{en:["servant"],kr:["하인","대"]},hunum:[{kor:"대",def:"하인"}]},{id:476,hanja:"襠",strokes:"19",def:{en:["crotch or seat of pants","pants"],kr:["잠방이","당"]},hunum:[{kor:"당",def:"잠방이"}]},{id:477,hanja:"稻",strokes:"15",def:{en:["rice growing in field","rice plant"],kr:["벼","도"]},hunum:[{kor:"도",def:"벼"}]},{id:478,hanja:"斧",strokes:"8",def:{en:["axe","hatchet","chop","hew"],kr:["도끼","부"]},hunum:[{kor:"부",def:"도끼"}]},{id:479,hanja:"儔",strokes:"16",def:{en:["companion","mate","colleague"],kr:["무리","주"]},hunum:[{kor:"주",def:"무리"}]},{id:480,hanja:"稼",strokes:"15",def:{en:["sow grain","sheaves of grain"],kr:["심을","가"]},hunum:[{kor:"가",def:"심을"}]},{id:481,hanja:"儕",strokes:"16",def:{en:["a company","companion","together"],kr:["동배","제"]},hunum:[{kor:"제",def:"동배"}]},{id:482,hanja:"子",strokes:"3",def:{en:["offspring","child","fruit","seed of","first terrestrial branch"],kr:["아들","자"]},hunum:[{kor:"자",def:"아들"}]},{id:483,hanja:"稽",strokes:"15",def:{en:["examine","investigate","delay"],kr:["머무를","계"]},hunum:[{kor:"계",def:"머무를"}]},{id:484,hanja:"缊",strokes:"12",def:{en:["tangled hemp","raveled silk","vague","confused"],kr:["縕과","同字"]},hunum:[{kor:"온",def:"헌솜"}]},{id:485,hanja:"濤",strokes:"17",def:{en:["large waves"],kr:["물결","도"]},hunum:[{kor:"도",def:"물결"}]},{id:486,hanja:"孑",strokes:"3",def:{en:["remaining","left","lonely"],kr:["창갈구리","혈"]},hunum:[{kor:"혈",def:"외로울"}]},{id:487,hanja:"瓏",strokes:"20",def:{en:["a gem cut like dragon"],kr:["옥소리","룡"]},hunum:[{kor:"룡",def:"옥소리"}]},{id:488,hanja:"鷸",strokes:"23",def:{en:["snipe","kingfisher","Tringa species"]},hunum:[{kor:"흘",def:"도요새"}]},{id:489,hanja:"儗",strokes:"16",def:{en:["compare with","draw analogy with"],kr:["참람할","의"]},hunum:[{kor:"의",def:"서로 못믿을"}]},{id:490,hanja:"襤",strokes:"20",def:{en:["ragged","tattered","threadbare"],kr:["누더기","람"]},hunum:[{kor:"람",def:"누더기"}]},{id:491,hanja:"稿",strokes:"15",def:{en:["draft","manuscript","rough copy"],kr:["볏집","고"]},hunum:[{kor:"고",def:"볏집"}]},{id:492,hanja:"斫",strokes:"9",def:{en:["cut","chop","lop off"],kr:["벨","작"]},hunum:[{kor:"작",def:"벨"}]},{id:493,hanja:"斬",strokes:"11",def:{en:["cut","chop","sever","behead"],kr:["벨","참"]},hunum:[{kor:"참",def:"벨"}]},{id:494,hanja:"儘",strokes:"16",def:{en:["utmost"],kr:["盡과","同字"]},hunum:[{kor:"진",def:"다할"}]},{id:495,hanja:"鷹",strokes:"24",def:{en:["eagle","falcon","Accipiter species"],kr:["매","응"]},hunum:[{kor:"응",def:"매"}]},{id:496,hanja:"孔",strokes:"4",def:{en:["opening","hole","orifice","great"],kr:["구멍","공"]},hunum:[{kor:"공",def:"구멍"}]},{id:497,hanja:"鷺",strokes:"23",def:{en:["heron","egret","Ardea species"],kr:["해오라기","로"]},hunum:[{kor:"로",def:"해오라기"}]},{id:498,hanja:"襦",strokes:"20",def:{en:["short coat","jacket","fine silk fab"],kr:["베쐐기","갓장이","유"]},hunum:[{kor:"유",def:"저고리"}]},{id:499,hanja:"断",strokes:"11",def:{en:["sever","cut off","interrupt"],kr:["어질","단"]},hunum:[{kor:"단",def:"어질"}]},{id:500,hanja:"濩",strokes:"17",def:{en:["pour down","cascade down","look"],kr:["퍼질","호"]},hunum:[{kor:"호",def:"퍼질"}]},{id:501,hanja:"儚",strokes:"16",def:{en:["fleeting","momentary","ephemeral","vain","empty","fickle"],kr:["果敢"]},hunum:[{kor:"맹",def:"어두울"}]},{id:502,hanja:"孕",strokes:"5",def:{en:["be pregnant","pregnancy"],kr:["아이밸","잉"]},hunum:[{kor:"잉",def:"아이밸"}]},{id:503,hanja:"儛",strokes:"16",def:{en:["to skip about","to dance for joy"],kr:["舞와","同字"]},hunum:[{kor:"무",def:"춤 출"}]},{id:504,hanja:"孖",strokes:"6",def:{en:["twins"],kr:["쌍둥이","자"]},hunum:[{kor:"자",def:"쌍둥이"}]},{id:505,hanja:"瓔",strokes:"21",def:{en:["a necklace made of precious stones"],kr:["구슬","목걸이","영"]},hunum:[{kor:"영",def:"옥돌"}]},{id:506,hanja:"缐",strokes:"12",def:{en:[],kr:["線의","簡體字"]},hunum:[{kor:"선",def:"줄"}]},{id:507,hanja:"斯",strokes:"12",def:{en:["this","thus","such","to lop off","emphatic particle"],kr:["이","사"]},hunum:[{kor:"사",def:"이"}]},{id:508,hanja:"鷽",strokes:"24",def:{en:["oriental bullfinch","weaver bird","Pyrrhula species"],kr:["메까치","학"]},hunum:[{kor:"학",def:"메까치"}]},{id:509,hanja:"恁",strokes:"10",def:{en:["that","like this","thus","so","such"],kr:["생각할","임"]},hunum:[{kor:"임",def:"생각할"}]},{id:510,hanja:"儜",strokes:"16",def:{en:["weak","wearied","in distress"],kr:["고달플","녕"]},hunum:[{kor:"녕",def:"고달플"}]},{id:511,hanja:"字",strokes:"6",def:{en:["letter","character","word"],kr:["글자","자"]},hunum:[{kor:"자",def:"글자"}]},{id:512,hanja:"呂",strokes:"7",def:{en:["surname","a musical note"],kr:["성씨","려"]},hunum:[{kor:"여",def:"풍류"}]},{id:513,hanja:"濫",strokes:"17",def:{en:["flood","overflow","excessive"],kr:["넘쳐흐를","함"]},hunum:[{kor:"람",def:"퍼질"},{kor:"함",def:"넘쳐흐를"}]},{id:514,hanja:"濬",strokes:"17",def:{en:["dredge","dig","profound","deep"],kr:["칠","준"]},hunum:[{kor:"준",def:"칠"}]},{id:515,hanja:"存",strokes:"6",def:{en:["exist","live","be","survive","remain"],kr:["있을","존"]},hunum:[{kor:"존",def:"있을"}]},{id:516,hanja:"恂",strokes:"9",def:{en:["careful","sincere","honest","trust"],kr:["갑자기","준"]},hunum:[{kor:"순",def:"진실할"},{kor:"준",def:"갑자기"}]},{id:517,hanja:"女",strokes:"3",def:{en:["woman","girl","feminine","rad"],kr:["시집보낼","녀"]},hunum:[{kor:"여",def:"계집"}]},{id:518,hanja:"襪",strokes:"21",def:{en:["socks","stockings"],kr:["버선","말"]},hunum:[{kor:"말",def:"버선"}]},{id:519,hanja:"新",strokes:"13",def:{en:["new","recent","fresh","modern"],kr:["고울","신"]},hunum:[{kor:"신",def:"새"}]},{id:520,hanja:"恃",strokes:"9",def:{en:["rely on","presume on","trust to"],kr:["어머니","시"]},hunum:[{kor:"시",def:"믿을"}]},{id:521,hanja:"鷿",strokes:"24",def:{en:[],kr:["농병아리","벽"]},hunum:[{kor:"벽",def:"농병아리"}]},{id:522,hanja:"廬",strokes:"19",def:{en:["hut","cottage","name of a mountain"],kr:["움막","려"]},hunum:[{kor:"여",def:"초가"}]},{id:523,hanja:"斱",strokes:"13",def:{en:[],kr:["쪼갤","작"]},hunum:[{kor:"작",def:"쪼갤"}]},{id:524,hanja:"斲",strokes:"14",def:{en:["cut","chop","hack"],kr:["깎을","착"]},hunum:[{kor:"착",def:"깎을"}]},{id:525,hanja:"檀",strokes:"17",def:{en:["sandalwood","hardwood","surname"],kr:["향나무","단"]},hunum:[{kor:"단",def:"향나무"}]},{id:526,hanja:"孚",strokes:"7",def:{en:["brood over eggs","have confidence"],kr:["미쁠","부"]},hunum:[{kor:"부",def:"미쁠"}]},{id:527,hanja:"旅",strokes:"10",def:{en:["trip","journey","travel","traveler"],kr:["베풀","려"]},hunum:[{kor:"여",def:"나그네"}]},{id:528,hanja:"瓘",strokes:"22",def:{en:["jade"],kr:["옥","이름","관"]},hunum:[{kor:"관",def:"옥 이름"}]},{id:529,hanja:"濮",strokes:"17",def:{en:["county in Henan province"],kr:["강","이름","복"]},hunum:[{kor:"복",def:"강 이름"}]},{id:530,hanja:"襭",strokes:"21",def:{en:["tuck up hem of garment and wrap"],kr:["옷자락","꽂을","힐"]},hunum:[{kor:"힐",def:"옷자락 꽂을"}]},{id:531,hanja:"孛",strokes:"7",def:{en:["comet"],kr:["혜성","패"]},hunum:[{kor:"패",def:"혜성"}]},{id:532,hanja:"濯",strokes:"17",def:{en:["wash out","rinse","cleanse"],kr:["놀","탁"]},hunum:[{kor:"탁",def:"씻을"}]},{id:533,hanja:"償",strokes:"17",def:{en:["repay","recompense","restitution"],kr:["갚을","상"]},hunum:[{kor:"상",def:"갚을"}]},{id:534,hanja:"濾",strokes:"18",def:{en:["strain out","filter"],kr:["맑을","려"]},hunum:[{kor:"여",def:"씻을"}]},{id:535,hanja:"恆",strokes:"9",def:{en:["constant","regular","persistent"],kr:["恒의","本字"]},hunum:[{kor:"항",def:"항상"}]},{id:536,hanja:"瓚",strokes:"23",def:{en:["ceremonial libation cup"],kr:["제기","찬"]},hunum:[{kor:"찬",def:"제기"}]},{id:537,hanja:"儠",strokes:"17",def:{en:[],kr:["풍신","좃을","렵"]},hunum:[{kor:"렵",def:"풍신 좃을"}]},{id:538,hanja:"孜",strokes:"7",def:{en:["be as diligent as possible"],kr:["힘쓸","자"]},hunum:[{kor:"자",def:"힘쓸"}]},{id:539,hanja:"礪",strokes:"20",def:{en:["whetstone","sharpen"],kr:["돌","단단할","려"]},hunum:[{kor:"여",def:"돌 단단할"}]},{id:540,hanja:"孝",strokes:"7",def:{en:["filial piety","obedience","mourning"],kr:["효도","효"]},hunum:[{kor:"효",def:"효도"}]},{id:541,hanja:"瓛",strokes:"24",def:{en:["scaptre"],kr:["옥홀","환"]},hunum:[{kor:"환",def:"옥홀"}]},{id:542,hanja:"襯",strokes:"22",def:{en:["underwear","inner garments"],kr:["베풀","친"]},hunum:[{kor:"친",def:"속옷"}]},{id:543,hanja:"恇",strokes:"9",def:{en:["fear"],kr:["겁낼","광"]},hunum:[{kor:"광",def:"겁낼"}]},{id:544,hanja:"儡",strokes:"17",def:{en:["puppet","dummy"],kr:["영락할","뢰"]},hunum:[{kor:"뢰",def:"영락할"}]},{id:545,hanja:"閭",strokes:"15",def:{en:["village of twenty"],kr:["마을","려"]},hunum:[{kor:"여",def:"마을"}]},{id:546,hanja:"濱",strokes:"17",def:{en:["beach","sea coast","river bank"],kr:["물가","빈"]},hunum:[{kor:"빈",def:"물가"}]},{id:547,hanja:"恈",strokes:"9",def:{en:[],kr:["탐할","모"]},hunum:[{kor:"모",def:"탐할"}]},{id:548,hanja:"儢",strokes:"17",def:{en:[],kr:["맘에","하기","싫을","려"]},hunum:[{kor:"려",def:"맘에 하기 싫을"}]},{id:549,hanja:"驪",strokes:"29",def:{en:["a pure black horse","a pair of horses"],kr:["산이름","려"]},hunum:[{kor:"여",def:"가라말"}]},{id:550,hanja:"瓜",strokes:"5",def:{en:["melon","gourd","cucumber","rad"],kr:["오이","과"]},hunum:[{kor:"과",def:"오이"}]},{id:551,hanja:"萃",strokes:"14",def:{en:["dense","thick","close","to collect together"],kr:["괘","이름","췌"]},hunum:[{kor:"췌",def:"모을"}]},{id:552,hanja:"濳",strokes:"19",def:{en:["hide","conceal","secrete","hidden"],kr:["潛의","俗字"]},hunum:[{kor:"잠",def:"잠길 潛의 俗"}]},{id:553,hanja:"檄",strokes:"17",def:{en:["call arms","urgency"],kr:["과격할","격"]},hunum:[{kor:"격",def:"격서"}]},{id:554,hanja:"孟",strokes:"8",def:{en:["first in series","great","eminent"],kr:["맏","맹"]},hunum:[{kor:"망",def:"맹랑할"},{kor:"맹",def:"맏"}]},{id:555,hanja:"麗",strokes:"19",def:{en:["beautiful","magnificent","elegant"],kr:["베풀","려"]},hunum:[{kor:"여",def:"고울"}]},{id:556,hanja:"斷",strokes:"18",def:{en:["sever","cut off","interrupt"],kr:["끊을","단"]},hunum:[{kor:"단",def:"끊을"}]},{id:557,hanja:"恊",strokes:"9",def:{en:["be united","cooperate"],kr:["위협할","협"]},hunum:[{kor:"협",def:"겁낼"}]},{id:558,hanja:"儤",strokes:"17",def:{en:["on duty"]},hunum:[{kor:"포",def:"번 설"}]},{id:559,hanja:"黎",strokes:"15",def:{en:["surname","numerous","many","black"],kr:["동틀","려"]},hunum:[{kor:"여",def:"무리"}]},{id:560,hanja:"襲",strokes:"22",def:{en:["raid","attack","inherit"],kr:["엄습할","습"]},hunum:[{kor:"습",def:"옷 덧입을"}]},{id:561,hanja:"萄",strokes:"14",def:{en:["grapes"],kr:["포도나무","도"]},hunum:[{kor:"도",def:"포도나무"}]},{id:562,hanja:"濴",strokes:"17",def:{en:[],kr:["물","졸졸","흐를","영"]},hunum:[{kor:"영",def:"물 졸졸 흐를"}]},{id:563,hanja:"孡",strokes:"8",def:{en:[]},hunum:[{kor:"태",def:"아이 밸"}]},{id:564,hanja:"萅",strokes:"14",def:{en:["spring","wanton"]},hunum:[{kor:"춘",def:"봄"}]},{id:565,hanja:"蹀",strokes:"16",def:{en:["to skip","to dance","to put the foot down"],kr:["저벅저벅","걸을","접"]},hunum:[{kor:"접",def:"저벅저벅 걸을"}]},{id:566,hanja:"恋",strokes:"10",def:{en:["love","long for","yearn for","love"],kr:["戀의","俗字"]},hunum:[{kor:"련",def:"그리워할"}]},{id:567,hanja:"儥",strokes:"17",def:{en:[],kr:["길","육"]},hunum:[{kor:"육",def:"팔"}]},{id:568,hanja:"力",strokes:"2",def:{en:["power","capability","influence"],kr:["부지런할","력"]},hunum:[{kor:"역",def:"힘"}]},{id:569,hanja:"方",strokes:"4",def:{en:["a square","rectangle","a region","local"],kr:["모","방"]},hunum:[{kor:"방",def:"모"}]},{id:570,hanja:"瓠",strokes:"11",def:{en:["bottle gourd","calabash","pot"],kr:["단지","호"]},hunum:[{kor:"호",def:"표주박"}]},{id:571,hanja:"儦",strokes:"17",def:{en:["milling"],kr:["많을","표"]},hunum:[{kor:"표",def:"떼지어 걷는 모양"}]},{id:572,hanja:"蹁",strokes:"16",def:{en:["to walk with a limp"],kr:["잘름거릴","편"]},hunum:[{kor:"편",def:"돌쳐갈"}]},{id:573,hanja:"曆",strokes:"16",def:{en:["calendar","era"],kr:["세월","력"]},hunum:[{kor:"역",def:"셀"}]},{id:574,hanja:"襴",strokes:"23",def:{en:["a one piece garment"],kr:["난삼","란"]},hunum:[{kor:"란",def:"난삼"}]},{id:575,hanja:"萆",strokes:"14",def:{en:["the castor"],kr:["비해","비"]},hunum:[{kor:"비",def:"비해"}]},{id:576,hanja:"恍",strokes:"9",def:{en:["seemingly","absent"],kr:["황홀할","황"]},hunum:[{kor:"황",def:"황홀할"}]},{id:577,hanja:"儧",strokes:"17",def:{en:[],kr:["모일","찬"]},hunum:[{kor:"찬",def:"모일"}]},{id:578,hanja:"萇",strokes:"14",def:{en:["averrhora carambola","surname"],kr:["나무","이름","장"]},hunum:[{kor:"장",def:"나무 이름"}]},{id:579,hanja:"季",strokes:"8",def:{en:["quarter of year","season","surname"],kr:["끝","계"]},hunum:[{kor:"계",def:"끝"}]},{id:580,hanja:"歷",strokes:"16",def:{en:["take place","past","history"],kr:["겪을","력"]},hunum:[{kor:"역",def:"지낼"}]},{id:581,hanja:"蹂",strokes:"16",def:{en:["trample under foot","tread on"],kr:["쌀","씻을","유"]},hunum:[{kor:"유",def:"밟을"}]},{id:582,hanja:"瓢",strokes:"16",def:{en:["ladle made from dried gourd"],kr:["표주박","표"]},hunum:[{kor:"표",def:"표주박"}]},{id:583,hanja:"儨",strokes:"17",def:{en:[],kr:["바를","질"]},hunum:[{kor:"질",def:"바를"}]},{id:584,hanja:"檉",strokes:"17",def:{en:["type of willow","tamarisk"],kr:["능수버들","정"]},hunum:[{kor:"정",def:"능수버들"}]},{id:585,hanja:"孤",strokes:"8",def:{en:["orphan","fatherless","solitary"],kr:["외로울","고"]},hunum:[{kor:"고",def:"외로울"}]},{id:586,hanja:"轢",strokes:"22",def:{en:["run over something with vehicle"],kr:["서로","부닥칠","력"]},hunum:[{kor:"역",def:"수레바퀴에 치일"}]},{id:587,hanja:"於",strokes:"8",def:{en:["in","at","on","interjection alas"],kr:["오홉다","외칠","오"]},hunum:[{kor:"어",def:"방향의 어조사"},{kor:"오",def:"오홉다 외칠"}]},{id:588,hanja:"瓣",strokes:"19",def:{en:["petal","segment","valves"],kr:["꽃잎","판"]},hunum:[{kor:"판",def:"외씨"}]},{id:589,hanja:"蹄",strokes:"16",def:{en:["hoof","leg of pork","little witch"],kr:["굽","제"]},hunum:[{kor:"제",def:"굽"}]},{id:590,hanja:"儩",strokes:"17",def:{en:["complete"],kr:["다할","사"]},hunum:[{kor:"사",def:"다할"}]},{id:591,hanja:"孥",strokes:"8",def:{en:["one"],kr:["자식","노"]},hunum:[{kor:"노",def:"자식"}]},{id:592,hanja:"年",strokes:"6",def:{en:["year","new","person"],kr:["나아갈","년"]},hunum:[{kor:"년",def:"해"}]},{id:593,hanja:"施",strokes:"9",def:{en:["grant","bestow","give","act","name"],kr:["미칠","이"]},hunum:[{kor:"시",def:"베풀"},{kor:"이",def:"비뚤어질"}]},{id:594,hanja:"学",strokes:"8",def:{en:["learning","knowledge","school"],kr:["學의","略字"]},hunum:[{kor:"학",def:"배울"}]},{id:595,hanja:"恐",strokes:"10",def:{en:["fear","fearful","apprehensive"],kr:["두려울","공"]},hunum:[{kor:"공",def:"두려울"}]},{id:596,hanja:"優",strokes:"17",def:{en:["superior","excellent","actor"],kr:["결단성","없을","우"]},hunum:[{kor:"우",def:"넉넉할"}]},{id:597,hanja:"憐",strokes:"15",def:{en:["pity","sympathize"],kr:["사랑할","련"]},hunum:[{kor:"련",def:"불쌍할"}]},{id:598,hanja:"儫",strokes:"16",def:{en:[],kr:["영웅","호"]},hunum:[{kor:"호",def:"영웅"}]},{id:599,hanja:"濺",strokes:"18",def:{en:["sprinkle","spray","spill","splash"],kr:["흩뿌릴","천"]},hunum:[{kor:"천",def:"흩뿌릴"}]},{id:600,hanja:"戀",strokes:"22",def:{en:["love","long for","yearn for","love"],kr:["사모할","련"]},hunum:[{kor:"련",def:"생각할"}]},{id:601,hanja:"萊",strokes:"14",def:{en:["goosefoot","weed","fallow field"],kr:["명아주","래"]},hunum:[{kor:"래",def:"명아주"}]},{id:602,hanja:"斿",strokes:"9",def:{en:["to swim","to move or rove freely"],kr:["면류관술","유"]},hunum:[{kor:"유",def:"깃발"}]},{id:603,hanja:"萋",strokes:"14",def:{en:["luxuriant foliage","crowded"],kr:["풀","성하게","우거진","모양","처"]},hunum:[{kor:"처",def:"풀 성하게 우거진 모양"}]},{id:604,hanja:"恒",strokes:"9",def:{en:["constant","regular","persistent"],kr:["옛","항"]},hunum:[{kor:"긍",def:"시위"},{kor:"항",def:"늘"}]},{id:605,hanja:"檍",strokes:"17",def:{en:["ilex"],kr:["싸리나무","억"]},hunum:[{kor:"억",def:"참죽나무"}]},{id:606,hanja:"撚",strokes:"15",def:{en:["twirl in fingers","tease","toy with"],kr:["손","끝으로","비빌","년"]},hunum:[{kor:"년",def:"잡을"}]},{id:607,hanja:"蹇",strokes:"17",def:{en:["lame","crippled","unlucky"],kr:["교만할","건"]},hunum:[{kor:"건",def:"절름거릴"}]},{id:608,hanja:"瓦",strokes:"5",def:{en:["tile","earthenware pottery","girl"],kr:["기와","와"]},hunum:[{kor:"와",def:"질그릇"}]},{id:609,hanja:"儭",strokes:"18",def:{en:["to assist","to give alms"],kr:["속옷","츤"]},hunum:[{kor:"츤",def:"속옷"}]},{id:610,hanja:"檎",strokes:"17",def:{en:["small red apple"],kr:["능금나무","금"]},hunum:[{kor:"금",def:"능금나무"}]},{id:611,hanja:"漣",strokes:"14",def:{en:["flowing water","ripples","weeping"],kr:["눈물","줄줄","흘릴","련"]},hunum:[{kor:"련",def:"물 놀이칠"}]},{id:612,hanja:"萌",strokes:"14",def:{en:["bud","sprout"],kr:["싹","맹"]},hunum:[{kor:"맹",def:"싹"}]},{id:613,hanja:"蹈",strokes:"17",def:{en:["stamp feet","dance"],kr:["밟을","도"]},hunum:[{kor:"도",def:"밟을"}]},{id:614,hanja:"孩",strokes:"9",def:{en:["baby","child","children"],kr:["방글방글","웃을","해"]},hunum:[{kor:"해",def:"어린아이"}]},{id:615,hanja:"萍",strokes:"14",def:{en:["duckweed","wandering","traveling"],kr:["개구리밥","평"]},hunum:[{kor:"평",def:"마름"}]},{id:616,hanja:"蹉",strokes:"17",def:{en:["error","mistake","slip","failure"],kr:["넘어질","차"]},hunum:[{kor:"차",def:"넘어질"}]},{id:617,hanja:"煉",strokes:"13",def:{en:["smelt","refine","distill","condense"],kr:["반죽할","련"]},hunum:[{kor:"련",def:"쇠 불릴"}]},{id:618,hanja:"蹊",strokes:"17",def:{en:["footpath","trail","track"],kr:["건널","혜"]},hunum:[{kor:"혜",def:"지름길"}]},{id:619,hanja:"檐",strokes:"17",def:{en:["eaves of house","brim","rim"],kr:["처마","첨"]},hunum:[{kor:"첨",def:"처마"}]},{id:620,hanja:"瓩",strokes:"8",def:{en:["kilowatt","kilogram"],kr:["킬로그램","천"]},hunum:[{kor:"천",def:"킬로그램"}]},{id:621,hanja:"恕",strokes:"10",def:{en:["forgive","excuse","show mercy"],kr:["용서할","서"]},hunum:[{kor:"서",def:"용서할"}]},{id:622,hanja:"璉",strokes:"15",def:{en:["vessel used to hold grain offerings"],kr:["종묘","제기","련"]},hunum:[{kor:"련",def:"종묘 제기"}]},{id:623,hanja:"萎",strokes:"14",def:{en:["wither","wilt"],kr:["쇠약해질","위"]},hunum:[{kor:"위",def:"마를"}]},{id:624,hanja:"濾",strokes:"18",def:{en:["strain out","filter"],kr:["겨를","려"]},hunum:[{kor:"려",def:"겨를"}]},{id:625,hanja:"孫",strokes:"10",def:{en:["grandchild","descendent","surname"],kr:["피할","손"]},hunum:[{kor:"손",def:"손자"}]},{id:626,hanja:"秊",strokes:"8",def:{en:["year","new","person"],kr:["年의","本字"]},hunum:[{kor:"년",def:"해"}]},{id:627,hanja:"蹌",strokes:"17",def:{en:["walk rapidly"],kr:["추창할","창"]},hunum:[{kor:"창",def:"추창할"}]},{id:628,hanja:"儱",strokes:"18",def:{en:["rude","barbarous"],kr:["건목칠","롱"]},hunum:[{kor:"롱",def:"건목칠"}]},{id:629,hanja:"練",strokes:"15",def:{en:["practice","drill","exercise","train"],kr:["겪을","련"]},hunum:[{kor:"련",def:"이길"}]},{id:630,hanja:"儲",strokes:"18",def:{en:["to save money","store","reserve","an heir"],kr:["용납할","저"]},hunum:[{kor:"저",def:"쌓을"}]},{id:631,hanja:"西",strokes:"6",def:{en:["west","westward","occident"],kr:["서녘","서"]},hunum:[{kor:"서",def:"서녘"}]},{id:632,hanja:"儳",strokes:"19",def:{en:["obstinate","stupid","uneven","mix"],kr:["어긋날","참"]},hunum:[{kor:"참",def:"어긋날"}]},{id:633,hanja:"恙",strokes:"10",def:{en:["illness","sickness","indisposition"],kr:["근심","양"]},hunum:[{kor:"양",def:"근심"}]},{id:634,hanja:"檔",strokes:"17",def:{en:["shelf","frame","crosspiece"],kr:["책상","당"]},hunum:[{kor:"당",def:"책상"}]},{id:635,hanja:"聯",strokes:"17",def:{en:["connect","join","associate","ally"],kr:["관계할","련"]},hunum:[{kor:"련",def:"잇닿을"}]},{id:636,hanja:"嘁",strokes:"14",def:{en:["to be grieved","ashamed","used to imitate sounds"]},hunum:[{kor:"잡",def:"부끄러울"},{kor:"축",def:"부끄러울"}]},{id:637,hanja:"蹏",strokes:"17",def:{en:["hoof","leg of pork","little witch a horse"],kr:["蹄와","同字"]},hunum:[{kor:"제",def:"굽"}]},{id:638,hanja:"恚",strokes:"10",def:{en:["anger","rage"],kr:["원망할","에"]},hunum:[{kor:"에",def:"성낼"}]},{id:639,hanja:"儴",strokes:"19",def:{en:[],kr:["인연할","상"]},hunum:[{kor:"상",def:"고생할"}]},{id:640,hanja:"輦",strokes:"15",def:{en:["a hand","to transport by carriage"],kr:["궁중의","길","련"]},hunum:[{kor:"련",def:"당길"}]},{id:641,hanja:"風",strokes:"9",def:{en:["wind","air","manners","atmosphere"],kr:["모양","풍"]},hunum:[{kor:"풍",def:"바람"}]},{id:642,hanja:"儵",strokes:"19",def:{en:[],kr:["갑자기","숙"]},hunum:[{kor:"숙",def:"잿빛"}]},{id:643,hanja:"孰",strokes:"11",def:{en:["who"],kr:["익을","숙"]},hunum:[{kor:"숙",def:"누구"}]},{id:644,hanja:"嘂",strokes:"14",def:{en:["cry loudly","yell","scream"],kr:["크게","부르짖을","교"]},hunum:[{kor:"교",def:"크게 부르짖을"}]},{id:645,hanja:"蓮",strokes:"17",def:{en:["lotus","water lily","paradise"],kr:["연꽃","련"]},hunum:[{kor:"련",def:"연밥"}]},{id:646,hanja:"瓮",strokes:"9",def:{en:["earthen jar","jar for ashes"],kr:["항아리","옹"]},hunum:[{kor:"옹",def:"항아리"}]},{id:647,hanja:"儶",strokes:"20",def:{en:["valiant","brave","eminent"],kr:["끝","휴"]},hunum:[{kor:"혜",def:"빠를"},{kor:"휴",def:"끝"}]},{id:648,hanja:"檗",strokes:"17",def:{en:["tree"],kr:["황벽나무","벽"]},hunum:[{kor:"벽",def:"황벽나무"}]},{id:649,hanja:"孱",strokes:"12",def:{en:["weak","unfit","frail","feeble"],kr:["잔약할","잔"]},hunum:[{kor:"잔",def:"잔약할"}]},{id:650,hanja:"連",strokes:"11",def:{en:["join","connect","continuous","even"],kr:["끌릴","련"]},hunum:[{kor:"련",def:"이을"}]},{id:651,hanja:"儷",strokes:"21",def:{en:["spouse","couple","pair"],kr:["짝","려"]},hunum:[{kor:"려",def:"짝"}]},{id:652,hanja:"嘄",strokes:"14",def:{en:[],kr:["부르짖을","교"]},hunum:[{kor:"교",def:"부르짖을"}]},{id:653,hanja:"鍊",strokes:"17",def:{en:["smelt metals","forge","refine"],kr:["단련할","련"]},hunum:[{kor:"련",def:"불린 쇠"}]},{id:654,hanja:"恝",strokes:"10",def:{en:["carefree","indifferent manner","without sorrow"],kr:["걱정","없을","괄"]},hunum:[{kor:"개",def:"걱정 없을"},{kor:"괄",def:"걱정 없을"}]},{id:655,hanja:"儸",strokes:"21",def:{en:["bandit","daredevil"],kr:["간능할","라"]},hunum:[{kor:"라",def:"간능할"}]},{id:656,hanja:"孳",strokes:"13",def:{en:["breed in large numbers"]},hunum:[{kor:"자",def:"부지런할"}]},{id:657,hanja:"嘅",strokes:"14",def:{en:["sound of sighing"],kr:["성낼","개"]},hunum:[{kor:"개",def:"탄식할"}]},{id:658,hanja:"列",strokes:"6",def:{en:["a line","to arrange in order","classify"],kr:["베풀","렬"]},hunum:[{kor:"열",def:"벌릴"}]},{id:659,hanja:"瓲",strokes:"9",def:{en:[]},hunum:[{kor:"톤",def:"톤"}]},{id:660,hanja:"嘆",strokes:"14",def:{en:["sigh","admire"],kr:["한숨쉴","탄"]},hunum:[{kor:"탄",def:"한숨쉴"}]},{id:661,hanja:"儹",strokes:"21",def:{en:["to accumulate","to hoard","to store up"],kr:["모을","찬"]},hunum:[{kor:"찬",def:"모을"}]},{id:662,hanja:"劣",strokes:"6",def:{en:["bad","inferior","slightly"],kr:["서툴","렬"]},hunum:[{kor:"열",def:"용렬할"}]},{id:663,hanja:"恟",strokes:"9",def:{en:["scared","nervous"],kr:["두려워할","흉"]},hunum:[{kor:"흉",def:"두려워할"}]},{id:664,hanja:"颭",strokes:"14",def:{en:["sway in wind"],kr:["펄렁거릴","점"]},hunum:[{kor:"점",def:"펄렁거릴"}]},{id:665,hanja:"秀",strokes:"7",def:{en:["ear of grain","flowering","luxuriant","refined","elegant","graceful"],kr:["아름다울","수"]},hunum:[{kor:"수",def:"빼어날"}]},{id:666,hanja:"儺",strokes:"21",def:{en:["rich"],kr:["역귀","쫓을","나"]},hunum:[{kor:"나",def:"역귀 쫓을"}]},{id:667,hanja:"孵",strokes:"14",def:{en:["sit on eggs","hatch"],kr:["알","깔","부"]},hunum:[{kor:"부",def:"알 깔"}]},{id:668,hanja:"嘇",strokes:"14",def:{en:[],kr:["머금을","삼"]},hunum:[{kor:"삼",def:"머금을"}]},{id:669,hanja:"咽",strokes:"9",def:{en:["throat","pharynx"],kr:["막힐","열"]},hunum:[{kor:"열",def:"목 멜"}]},{id:670,hanja:"蹕",strokes:"18",def:{en:["clear way","make room for","emp"],kr:["길","치울","필"]},hunum:[{kor:"필",def:"길 치울"}]},{id:671,hanja:"嘈",strokes:"14",def:{en:["noisy"],kr:["지껄일","조"]},hunum:[{kor:"조",def:"지껄일"}]},{id:672,hanja:"私",strokes:"7",def:{en:["private","personal","secret"],kr:["사사","사"]},hunum:[{kor:"사",def:"사사"}]},{id:673,hanja:"恠",strokes:"9",def:{en:["strange","unusual","peculiar"],kr:["怪의","俗字"]},hunum:[{kor:"괴",def:"괴이할"}]},{id:674,hanja:"檜",strokes:"17",def:{en:["Chinese cypress","Chinese juniper"],kr:["노송나무","회"]},hunum:[{kor:"괄",def:"전나무"},{kor:"회",def:"노송나무"}]},{id:675,hanja:"儻",strokes:"22",def:{en:["if"],kr:["빼어날","당"]},hunum:[{kor:"당",def:"빼어날"}]},{id:676,hanja:"孶",strokes:"14",variant:"孳",def:{en:["variant of","to breed in large numbers"],kr:["孳"]},hunum:[{kor:"자",def:"부지런할"}]},{id:677,hanja:"烈",strokes:"10",def:{en:["fiery","violent","vehement","ardent"],kr:["사나울","렬"]},hunum:[{kor:"열",def:"불 활활 붙을"}]},{id:678,hanja:"檝",strokes:"17",def:{en:["oar"],kr:["楫과","同字"]},hunum:[{kor:"즙",def:"노"}]},{id:679,hanja:"儼",strokes:"22",def:{en:["grave","respectful","majestic"],kr:["공경할","엄"]},hunum:[{kor:"엄",def:"공경할"}]},{id:680,hanja:"嘉",strokes:"14",def:{en:["excellent","joyful","auspicious"],kr:["아름다울","가"]},hunum:[{kor:"가",def:"아름다울"}]},{id:681,hanja:"颯",strokes:"14",def:{en:["the sound of the wind","bleak","melancholy"],kr:["바람소리","삽"]},hunum:[{kor:"삽",def:"바람소리"}]},{id:682,hanja:"裂",strokes:"12",def:{en:["split","crack","break open","rend"],kr:["비단","자투리","렬"]},hunum:[{kor:"열",def:"찢어질"}]},{id:683,hanja:"恢",strokes:"9",def:{en:["restore","big","great","immense","vast"],kr:["넓을","회"]},hunum:[{kor:"회",def:"넓을"}]},{id:684,hanja:"學",strokes:"16",def:{en:["learning","knowledge","school"],kr:["배울","학"]},hunum:[{kor:"학",def:"배울"}]},{id:685,hanja:"秃",strokes:"7",def:{en:["bald"]},hunum:[{kor:"독",def:"대머리"}]},{id:686,hanja:"儽",strokes:"23",def:{en:["lazy","tired out","worn fatigued"],kr:["게으를","래"]},hunum:[{kor:"래",def:"게으를"}]},{id:687,hanja:"嘊",strokes:"14",def:{en:[],kr:["비틀거릴","애"]},hunum:[{kor:"애",def:"비틀거릴"}]},{id:688,hanja:"說",strokes:"14",def:{en:["speak","say","talk","scold","upbraid"],kr:["기꺼울","열"]},hunum:[{kor:"열",def:"기꺼울"}]},{id:689,hanja:"瓶",strokes:"11",def:{en:["jug","pitcher","vase","jar","bottle"],kr:["甁의","俗字"]},hunum:[{kor:"병",def:"병"}]},{id:690,hanja:"颱",strokes:"14",def:{en:["taiphoon"],kr:["몹시","부는","바람","태"]},hunum:[{kor:"태",def:"몹시 부는 바람"}]},{id:691,hanja:"恣",strokes:"10",def:{en:["indulge oneself","unrestrained"],kr:["방자할","자"]},hunum:[{kor:"자",def:"방자할"}]},{id:692,hanja:"檟",strokes:"17",def:{en:["small evergreen shrub"],kr:["오동나무","가"]},hunum:[{kor:"가",def:"오동나무"}]},{id:693,hanja:"廉",strokes:"13",def:{en:["upright","honorable","honest"],kr:["살필","렴"]},hunum:[{kor:"염",def:"맑을"}]},{id:694,hanja:"瓷",strokes:"11",def:{en:["crockery","porcelain","chinaware"],kr:["오지그릇","자"]},hunum:[{kor:"자",def:"오지그릇"}]},{id:695,hanja:"恤",strokes:"9",def:{en:["show pity","relieve","help"],kr:["구휼할","휼"]},hunum:[{kor:"휼",def:"구휼할"}]},{id:696,hanja:"嘌",strokes:"14",def:{en:[],kr:["몰아갈","표"]},hunum:[{kor:"표",def:"휙 불"}]},{id:697,hanja:"蹙",strokes:"18",def:{en:["urgent","suddenly","grieve","lament"],kr:["쭈그러질","축"]},hunum:[{kor:"축",def:"찡그릴"}]},{id:698,hanja:"檠",strokes:"17",def:{en:["stand for lamp","frame for bow"],kr:["도지개","경"]},hunum:[{kor:"경",def:"도지개"}]},{id:699,hanja:"孺",strokes:"17",def:{en:["child","blood relation","affection"],kr:["딸릴","유"]},hunum:[{kor:"유",def:"젖먹이"}]},{id:700,hanja:"颲",strokes:"15",def:{en:[],kr:["사나운","바람","렬"]},hunum:[{kor:"렬",def:"사나운 바람"}]},{id:701,hanja:"念",strokes:"7",def:{en:["think of","recall","study"],kr:["대단히","짧은시각","념"]},hunum:[{kor:"염",def:"생각할"}]},{id:702,hanja:"恥",strokes:"10",def:{en:["shame","humiliation","ashamed"],kr:["욕될","치"]},hunum:[{kor:"치",def:"부끄럼"}]},{id:703,hanja:"秆",strokes:"8",def:{en:["straw","stalk of grain"],kr:["稈과","同字"]},hunum:[{kor:"간",def:"볏집"}]},{id:704,hanja:"儿",strokes:"2",def:{en:["son","child","radical"],kr:["어진사람","인"]},hunum:[{kor:"궤",def:"어진 사람"},{kor:"인",def:"어진사람"}]},{id:705,hanja:"嘍",strokes:"14",def:{en:["used in onomatopoetic expressions"],kr:["시끄러울","루"]},hunum:[{kor:"루",def:"시끄러울"}]},{id:706,hanja:"颳",strokes:"15",def:{en:["to blow"],kr:["모진","바람","괄"]},hunum:[{kor:"괄",def:"모진 바람"}]},{id:707,hanja:"捻",strokes:"11",def:{en:["to twist","nip with the fingers"],kr:["손가락으로","찍을","념"]},hunum:[{kor:"염",def:"손가락으로 찍을"}]},{id:708,hanja:"檢",strokes:"17",def:{en:["check","examine"],kr:["수결둘","검"]},hunum:[{kor:"검",def:"교정할"}]},{id:709,hanja:"孼",strokes:"19",def:{en:["misfortune","sin","evil"],kr:["요물","얼"]},hunum:[{kor:"얼",def:"첩자식"}]},{id:710,hanja:"嘎",strokes:"14",def:{en:["sound of laughter","bad","malevolent"],kr:["새소리","알"]},hunum:[{kor:"알",def:"새소리"}]},{id:711,hanja:"殮",strokes:"17",def:{en:["dress corpse for burial"],kr:["염할","염"]},hunum:[{kor:"염",def:"염할"}]},{id:712,hanja:"蹜",strokes:"18",def:{en:["walk carefully"],kr:["발","끌어","디딜","축"]},hunum:[{kor:"축",def:"발 끌어 디딜"}]},{id:713,hanja:"檣",strokes:"17",def:{en:["mast","yard","boom"],kr:["돛대","장"]},hunum:[{kor:"장",def:"돛대"}]},{id:714,hanja:"孽",strokes:"20",def:{en:["evil","son of concubine","ghost"],kr:["孼과","同字"]},hunum:[{kor:"얼",def:"서자"}]},{id:715,hanja:"嘏",strokes:"14",def:{en:["felicity","prosperity","large and strong"],kr:["복","하"]},hunum:[{kor:"가",def:"클"},{kor:"하",def:"복"}]},{id:716,hanja:"簾",strokes:"19",def:{en:["a blind","screen","curtain"],kr:["발","렴"]},hunum:[{kor:"염",def:"발"}]},{id:717,hanja:"缶",strokes:"6",def:{en:["earthen crock or jar","rad"],kr:["장군","부"]},hunum:[{kor:"부",def:"장군"}]},{id:718,hanja:"恨",strokes:"9",def:{en:["hatred","dislike","resent","hate"],kr:["한탄할","한"]},hunum:[{kor:"한",def:"한탄할"}]},{id:719,hanja:"秉",strokes:"8",def:{en:["grasp","hold","bundle","authority"],kr:["잡을","병"]},hunum:[{kor:"병",def:"잡을"}]},{id:720,hanja:"嘐",strokes:"14",def:{en:["final exclamatory particle"],kr:["닭","울","교"]},hunum:[{kor:"교",def:"닭 울"}]},{id:721,hanja:"颶",strokes:"17",def:{en:["cyclone","typhoon","gale"],kr:["사방풍","구"]},hunum:[{kor:"구",def:"사방풍"}]},{id:722,hanja:"獵",strokes:"18",def:{en:["hunt","field sports"],kr:["바람소리","렵"]},hunum:[{kor:"엽",def:"사냥할"}]},{id:723,hanja:"缷",strokes:"8",def:{en:["lay down","retire from office"]},hunum:[{kor:"사",def:"풀"}]},{id:724,hanja:"嘑",strokes:"14",def:{en:["to menace","to howl at","to bawl"],kr:["거칠게","말할","호"]},hunum:[{kor:"호",def:"부르짖을"}]},{id:725,hanja:"缸",strokes:"9",def:{en:["earthen jug","crock","cistern"],kr:["항아리","항"]},hunum:[{kor:"항",def:"항아리"}]},{id:726,hanja:"鶄",strokes:"19",def:{en:[],kr:["교청새","청"]},hunum:[{kor:"청",def:"교청새"}]},{id:727,hanja:"秊",strokes:"8",def:{en:["year","new","person"],kr:["年의","本字"]},hunum:[{kor:"년",def:"해"}]},{id:728,hanja:"恩",strokes:"10",def:{en:["kindness","mercy","charity"],kr:["사랑할","은"]},hunum:[{kor:"은",def:"은혜"}]},{id:729,hanja:"孿",strokes:"22",def:{en:["twins"],kr:["쌍둥이","산"]},hunum:[{kor:"산",def:"쌍둥이"}]},{id:730,hanja:"令",strokes:"5",def:{en:["command","order","magistrate","allow","cause"],kr:["벼슬이름","령"]},hunum:[{kor:"영",def:"하여금"}]},{id:731,hanja:"鍈",strokes:"16",def:{en:[],kr:["방울소리","영"]},hunum:[{kor:"영",def:"방울소리"}]},{id:732,hanja:"嘒",strokes:"14",def:{en:["sharp"],kr:["가냘플","혜"]},hunum:[{kor:"혜",def:"가냘플"}]},{id:733,hanja:"秋",strokes:"9",def:{en:["autumn","fall","year"],kr:["성씨","추"]},hunum:[{kor:"추",def:"가을"}]},{id:734,hanja:"蹟",strokes:"18",def:{en:["trace","tracks","footprints"],kr:["자취","적"]},hunum:[{kor:"적",def:"행적"}]},{id:735,hanja:"恪",strokes:"9",def:{en:["respectful","reverent"],kr:["삼갈","각"]},hunum:[{kor:"각",def:"삼갈"}]},{id:736,hanja:"囹",strokes:"8",def:{en:["prison","enclosure"],kr:["감옥","령"]},hunum:[{kor:"영",def:"감옥"}]},{id:737,hanja:"鍉",strokes:"17",def:{en:["spoon","key"],kr:["열쇠","시"]},hunum:[{kor:"시",def:"숟가락"}]},{id:738,hanja:"恫",strokes:"9",def:{en:["in pain","sorrowful"],kr:["앓을","통"]},hunum:[{kor:"통",def:"슬플"}]},{id:739,hanja:"蹠",strokes:"18",def:{en:["step on","tread on","sole"],kr:["밟을","척"]},hunum:[{kor:"척",def:"밟을"}]},{id:740,hanja:"寧",strokes:"14",def:{en:["repose","serenity","peace","peaceful"],kr:["어찌","녕"]},hunum:[{kor:"영",def:"편안할"}]},{id:741,hanja:"鍊",strokes:"17",def:{en:["smelt metals","forge","refine"],kr:["불릴","련"]},hunum:[{kor:"련",def:"불릴"}]},{id:742,hanja:"缺",strokes:"10",def:{en:["be short of","lack","gap","deficit"],kr:["이","빠질","결"]},hunum:[{kor:"결",def:"이지러질"}]},{id:743,hanja:"种",strokes:"9",def:{en:["seed","race","breed","to plant"],kr:["어릴","충"]},hunum:[{kor:"충",def:"어릴"}]},{id:744,hanja:"恬",strokes:"9",def:{en:["quiet","calm","tranquil","peaceful"],kr:["편안할","념"]},hunum:[{kor:"념",def:"편안할"}]},{id:745,hanja:"嘓",strokes:"14",def:{en:["gurgling sound","chattering"],kr:["귀찮을","괵"]},hunum:[{kor:"괵",def:"귀찮을"}]},{id:746,hanja:"嶺",strokes:"17",def:{en:["mountain ridge","mountain peak"],kr:["봉우리","령"]},hunum:[{kor:"영",def:"고개"}]},{id:747,hanja:"鍋",strokes:"17",def:{en:["cooking","saucepan"],kr:["노구솥","과"]},hunum:[{kor:"과",def:"노구솥"}]},{id:748,hanja:"恭",strokes:"10",def:{en:["respectful","polite","reverent"],kr:["공손할","공"]},hunum:[{kor:"공",def:"공손할"}]},{id:749,hanja:"嘔",strokes:"14",def:{en:["to vomit","annoy","enrage"],kr:["기쁠","후"]},hunum:[{kor:"구",def:"토할"},{kor:"후",def:"기쁠"}]},{id:750,hanja:"颺",strokes:"18",def:{en:["soar","fly","float","scatter"],kr:["높일","양"]},hunum:[{kor:"양",def:"날릴"}]},{id:751,hanja:"怜",strokes:"8",def:{en:["pity","sympathize"],kr:["영리할","령"]},hunum:[{kor:"영",def:"영리할"}]},{id:752,hanja:"嘕",strokes:"14",def:{en:[],kr:["빙그레할","언"]},hunum:[{kor:"언",def:"기꺼워할"}]},{id:753,hanja:"玲",strokes:"9",def:{en:["tinkling of jade"],kr:["정교할","령"]},hunum:[{kor:"영",def:"옥소리 쟁그렁거릴"}]},{id:754,hanja:"鍍",strokes:"17",def:{en:["plate","coat","gild"],kr:["도금할","도"]},hunum:[{kor:"도",def:"도금할"}]},{id:755,hanja:"鶉",strokes:"19",def:{en:["quail","Turnix species"],kr:["옷","해질","순"]},hunum:[{kor:"순",def:"메추라기"}]},{id:756,hanja:"蹣",strokes:"18",def:{en:["to jump over","to limp"],kr:["비틀거릴","만"]},hunum:[{kor:"만",def:"비틀거릴"}]},{id:757,hanja:"嘖",strokes:"14",def:{en:["interjection of approval or admiration"],kr:["외칠","책"]},hunum:[{kor:"책",def:"외칠"}]},{id:758,hanja:"蹤",strokes:"18",def:{en:["footprints","traces","tracks"],kr:["자취","종"]},hunum:[{kor:"종",def:"자취"}]},{id:759,hanja:"息",strokes:"10",def:{en:["rest","put stop to","end","cease"],kr:["기를","식"]},hunum:[{kor:"식",def:"숨쉴"}]},{id:760,hanja:"颼",strokes:"19",def:{en:["sound of wind","blow chilly"],kr:["바람소리","수"]},hunum:[{kor:"수",def:"바람소리"}]},{id:761,hanja:"瑩",strokes:"14",def:{en:["lustre of gems","bright","lustrous"],kr:["밝을","영"]},hunum:[{kor:"영",def:"귀막이 옥"}]},{id:762,hanja:"缾",strokes:"12",def:{en:["jar","bottle"],kr:["두레박","병"]},hunum:[{kor:"병",def:"두레박"}]},{id:763,hanja:"恰",strokes:"9",def:{en:["just","exactly","precisely","proper"],kr:["마치","흡"]},hunum:[{kor:"흡",def:"마치"}]},{id:764,hanja:"缿",strokes:"12",def:{en:[],kr:["벙어리","항"]},hunum:[{kor:"항",def:"항통"}]},{id:765,hanja:"萩",strokes:"15",def:{en:["scandent hop","tree"],kr:["가래나무","추"]},hunum:[{kor:"추",def:"맑은 대쑥"}]},{id:766,hanja:"科",strokes:"9",def:{en:["section","department","science"],kr:["과정","과"]},hunum:[{kor:"과",def:"과정"}]},{id:767,hanja:"嘗",strokes:"14",def:{en:["taste","experience","experiment"],kr:["맛볼","상"]},hunum:[{kor:"상",def:"맛볼"}]},{id:768,hanja:"羚",strokes:"11",def:{en:["species of antelope"],kr:["큰","뿔","양","령"]},hunum:[{kor:"영",def:"영양"}]},{id:769,hanja:"嘘",strokes:"14",def:{en:["exhale","blow out","deep sigh","hiss","praise"],kr:["噓의","俗字"]},hunum:[{kor:"허",def:"불"}]},{id:770,hanja:"秒",strokes:"9",def:{en:["beard of grain or corn","a second"],kr:["시간","단위","초"]},hunum:[{kor:"묘",def:"까끄라기"},{kor:"초",def:"시간 단위"}]},{id:771,hanja:"聆",strokes:"11",def:{en:["listen","hear"],kr:["깨달을","령"]},hunum:[{kor:"영",def:"들을"}]},{id:772,hanja:"颿",strokes:"19",def:{en:["sail"],kr:["돛","범"]},hunum:[{kor:"범",def:"돛"}]},{id:773,hanja:"鈴",strokes:"13",def:{en:["bell"],kr:["방울","령"]},hunum:[{kor:"영",def:"방울"}]},{id:774,hanja:"檮",strokes:"18",def:{en:["block of wood","blockhead","stupid"],kr:["그루터기","도"]},hunum:[{kor:"도",def:"그루터기"}]},{id:775,hanja:"零",strokes:"13",def:{en:["zero","fragment","fraction"],kr:["셈","나머지","령"]},hunum:[{kor:"련",def:"조용히 오는 비"},{kor:"영",def:"부서질"}]},{id:776,hanja:"萬",strokes:"15",def:{en:["ten thousand","innumerable"],kr:["일만","만"]},hunum:[{kor:"만",def:"일만"}]},{id:777,hanja:"秕",strokes:"9",def:{en:["empty grain or rice husk","chaff"],kr:["쭉정이","비"]},hunum:[{kor:"비",def:"쭉정이"}]},{id:778,hanja:"檯",strokes:"18",def:{en:["table"],kr:["등대","대"]},hunum:[{kor:"대",def:"등대"}]},{id:779,hanja:"嘛",strokes:"14",def:{en:["final exclamatory particle"],kr:["나마","마"]},hunum:[{kor:"마",def:"나마"}]},{id:780,hanja:"靈",strokes:"24",def:{en:["spirit","soul","spiritual world"],kr:["좋을","령"]},hunum:[{kor:"영",def:"신령"}]},{id:781,hanja:"蹩",strokes:"19",def:{en:["to limp"],kr:["절름발이","별"]},hunum:[{kor:"별",def:"절름발이"}]},{id:782,hanja:"恵",strokes:"10",def:{en:["favor","benefit","confer kindness"]},hunum:[{kor:"혜",def:"은혜"}]},{id:783,hanja:"秖",strokes:"9",def:{en:[],kr:["마침","지"]},hunum:[{kor:"지",def:"마침"}]},{id:784,hanja:"領",strokes:"14",def:{en:["neck","collar","lead","guide"],kr:["받을","령"]},hunum:[{kor:"영",def:"옷깃"}]},{id:785,hanja:"鍔",strokes:"17",def:{en:["high","lofty","edge of knife"],kr:["칼날끝","악"]},hunum:[{kor:"악",def:"칼날끝"}]},{id:786,hanja:"例",strokes:"8",def:{en:["precedent","example","regulation"],kr:["대부분","례"]},hunum:[{kor:"예",def:"본보기"}]},{id:787,hanja:"秘",strokes:"10",def:{en:["secret","mysterious","abstruse"],kr:["숨길","비"]},hunum:[{kor:"비",def:"숨길"}]},{id:788,hanja:"嘞",strokes:"14",def:{en:[],kr:["어조사","륵"]},hunum:[{kor:"륵",def:"어조사"}]},{id:789,hanja:"禮",strokes:"18",def:{en:["social custom","manners","courtesy","rites"],kr:["인사","례"]},hunum:[{kor:"예",def:"예도"}]},{id:790,hanja:"萱",strokes:"15",def:{en:["day","hemerocallisflava"],kr:["원추리","훤"]},hunum:[{kor:"훤",def:"원추리"}]},{id:791,hanja:"蹭",strokes:"19",def:{en:["to shuffle","procrastinate","dilly"],kr:["어정거릴","층"]},hunum:[{kor:"층",def:"어정거릴"}]},{id:792,hanja:"鍗",strokes:"17",def:{en:[],kr:["큰","가마","제"]},hunum:[{kor:"제",def:"큰 가마"}]},{id:793,hanja:"檳",strokes:"18",def:{en:["betelnut","areca nut"],kr:["빈랑나무","빈"]},hunum:[{kor:"빈",def:"빈랑나무"}]},{id:794,hanja:"故",strokes:"9",def:{en:["ancient","old","reason","because"],kr:["옛","고"]},hunum:[{kor:"고",def:"옛"}]},{id:795,hanja:"嘟",strokes:"15",def:{en:["sound of horn tooting"],kr:["칭찬할","도"]},hunum:[{kor:"도",def:"칭찬할"}]},{id:796,hanja:"澁",strokes:"15",def:{en:["astringent","harsh","uneven","rough"],kr:["떫을","삽"]},hunum:[{kor:"삽",def:"떫을"}]},{id:797,hanja:"嘠",strokes:"15",def:{en:["the chirping of birds loud laughter"],kr:["嘎의","俗字"]},hunum:[{kor:"알",def:"새소리"}]},{id:798,hanja:"醴",strokes:"20",def:{en:["sweet wine","sweet spring"],kr:["고을이름","례"]},hunum:[{kor:"예",def:"단술"}]},{id:799,hanja:"澂",strokes:"15",def:{en:["clear and still water"],kr:["澄과","同字"]},hunum:[{kor:"징",def:"맑을"}]},{id:800,hanja:"隸",strokes:"16",def:{en:["be subservient to","servant"],kr:["검열할","례"]},hunum:[{kor:"예",def:"종"}]},{id:801,hanja:"蹯",strokes:"19",def:{en:["an animal"],kr:["짐승","발바닥","번"]},hunum:[{kor:"번",def:"짐승 발바닥"}]},{id:802,hanja:"效",strokes:"10",def:{en:["result","effect","effectiveness"],kr:["본받을","효"]},hunum:[{kor:"효",def:"본받을"}]},{id:803,hanja:"蹰",strokes:"19",def:{en:["hesitate","waver","falter"],kr:["머뭇거릴","주"]},hunum:[{kor:"주",def:"머뭇거릴"}]},{id:804,hanja:"檶",strokes:"18",def:{en:[],kr:["개수통","염"]},hunum:[{kor:"염",def:"개수통"}]},{id:805,hanja:"惡",strokes:"11",def:{en:["evil","wicked","bad","foul"],kr:["부끄러울","오"]},hunum:[{kor:"오",def:"미워할"}]},{id:806,hanja:"鶖",strokes:"20",def:{en:["large waterfowl with naked head","Garrulus glandarius"],kr:["두루미","추"]},hunum:[{kor:"추",def:"두루미"}]},{id:807,hanja:"澄",strokes:"15",def:{en:["purify water by allowing sediment to settle","clear","pure"],kr:["맑을","징"]},hunum:[{kor:"징",def:"맑을"}]},{id:808,hanja:"敉",strokes:"10",def:{en:["pacify","soothe","stabilize"],kr:["어루만질","미"]},hunum:[{kor:"미",def:"어루만질"}]},{id:809,hanja:"了",strokes:"2",def:{en:["to finish","particle of completed action"],kr:["깨달을","료"]},hunum:[{kor:"요",def:"마칠"}]},{id:810,hanja:"鍛",strokes:"17",def:{en:["forge metal","temper","refine"],kr:["쇠불릴","단"]},hunum:[{kor:"단",def:"쇠불릴"}]},{id:811,hanja:"萵",strokes:"15",def:{en:["lettuce"],kr:["부루","와"]},hunum:[{kor:"와",def:"상추"}]},{id:812,hanja:"鍜",strokes:"17",def:{en:[],kr:["목투구","하"]},hunum:[{kor:"하",def:"목투구"}]},{id:813,hanja:"僚",strokes:"14",def:{en:["officials","bureaucracy"],kr:["어여쁠","료"]},hunum:[{kor:"요",def:"벗"}]},{id:814,hanja:"褄",strokes:"14",def:{en:["a skirt"],kr:["깃의","가","처"]},hunum:[{kor:"처",def:"깃의 가"}]},{id:815,hanja:"蹲",strokes:"19",def:{en:["squat","crouch","idle about"],kr:["걸터앉을","준"]},hunum:[{kor:"준",def:"걸터앉을"}]},{id:816,hanja:"租",strokes:"10",def:{en:["rent","lease","rental","tax"],kr:["구실","조"]},hunum:[{kor:"조",def:"구실"}]},{id:817,hanja:"澆",strokes:"15",def:{en:["spray","water","sprinkle"],kr:["물","끌어올","요"]},hunum:[{kor:"요",def:"걸찰"}]},{id:818,hanja:"寮",strokes:"15",def:{en:["shanty","hut","shack"],kr:["중의","집","료"]},hunum:[{kor:"요",def:"동관"}]},{id:819,hanja:"鍝",strokes:"17",def:{en:[],kr:["귀고리","우"]},hunum:[{kor:"우",def:"귀고리"}]},{id:820,hanja:"尿",strokes:"7",def:{en:["urine","urinate"],kr:["오줌","뇨"]},hunum:[{kor:"요",def:"오줌"}]},{id:821,hanja:"萸",strokes:"15",def:{en:["dogwood"],kr:["수유","유"]},hunum:[{kor:"유",def:"수유"}]},{id:822,hanja:"檻",strokes:"18",def:{en:["threshold","door"],kr:["우리","함"]},hunum:[{kor:"함",def:"우리"}]},{id:823,hanja:"萹",strokes:"15",def:{en:["grass"]},hunum:[{kor:"편",def:"마디풀"}]},{id:824,hanja:"蹴",strokes:"19",def:{en:["kick","tread on","leap","solemn"],kr:["밟을","축"]},hunum:[{kor:"축",def:"찰"}]},{id:825,hanja:"澈",strokes:"15",def:{en:["thoroughly","completely"],kr:["물","맑을","철"]},hunum:[{kor:"철",def:"물 맑을"}]},{id:826,hanja:"敍",strokes:"11",def:{en:["express","state","relate","narrate"],kr:["차례","서"]},hunum:[{kor:"서",def:"차례"}]},{id:827,hanja:"料",strokes:"10",def:{en:["consider","conjecture","material"],kr:["대금","료"]},hunum:[{kor:"요",def:"말질할"}]},{id:828,hanja:"鶚",strokes:"20",def:{en:["osprey","fishhawk","Pandion haliaetus"],kr:["물수리","악"]},hunum:[{kor:"악",def:"물수리"}]},{id:829,hanja:"複",strokes:"15",def:{en:["repeat","double","overlap"],kr:["겹칠","부"]},hunum:[{kor:"복",def:"겹옷"},{kor:"부",def:"겹칠"}]},{id:830,hanja:"檼",strokes:"18",def:{en:["ridge pole","shape wood by use of heat","tool for shaping bent wood"],kr:["대공","은"]},hunum:[{kor:"은",def:"집 마룻대"}]},{id:831,hanja:"敎",strokes:"11",def:{en:["teach"],kr:["가르침","교"]},hunum:[{kor:"교",def:"가르침"}]},{id:832,hanja:"澉",strokes:"15",def:{en:["to wash name of a place"]},hunum:[{kor:"검",def:"싱거울"}]},{id:833,hanja:"嘨",strokes:"15",def:{en:["roar","howl","scream","whistle"],kr:["嘯와","同字"]},hunum:[{kor:"소",def:"휘파람"}]},{id:834,hanja:"樂",strokes:"15",def:{en:["happy","glad","enjoyable","music"],kr:["좋아할","요"]},hunum:[{kor:"요",def:"좋아할"}]},{id:835,hanja:"鍠",strokes:"17",def:{en:["weapon"],kr:["종고","소리","굉"]},hunum:[{kor:"굉",def:"종고 소리"}]},{id:836,hanja:"嘩",strokes:"15",def:{en:["rushing sound","gush forward"],kr:["譁와","同字"]},hunum:[{kor:"화",def:"떠들썩할"}]},{id:837,hanja:"秢",strokes:"10",def:{en:[],kr:["벼","처음","익을","령"]},hunum:[{kor:"령",def:"벼 처음 익을"}]},{id:838,hanja:"蹶",strokes:"19",def:{en:["stumble","fall down","trample"],kr:["급히걸을","궤"]},hunum:[{kor:"궐",def:"우물벌레"},{kor:"궤",def:"급히걸을"}]},{id:839,hanja:"澋",strokes:"15",def:{en:[],kr:["물이","빙","돌","횡"]},hunum:[{kor:"횡",def:"물이 빙 돌"}]},{id:840,hanja:"秣",strokes:"10",def:{en:["fodder","horse feed","feed horse"],kr:["꼴","말"]},hunum:[{kor:"말",def:"꼴"}]},{id:841,hanja:"敏",strokes:"11",def:{en:["fast","quick","clever","smart"],kr:["민첩할","민"]},hunum:[{kor:"민",def:"민첩할"}]},{id:842,hanja:"萼",strokes:"15",def:{en:["the stem and calyx of a flower","a younger brother"],kr:["꽃받침","악"]},hunum:[{kor:"악",def:"꽃받침"}]},{id:843,hanja:"褊",strokes:"15",def:{en:["cramped","narrow","crowded","mean"],kr:["옷이","몸에","낄","편"]},hunum:[{kor:"편",def:"좁을"}]},{id:844,hanja:"秤",strokes:"10",def:{en:["balance","scale","steelyard"],kr:["백","근","칭"]},hunum:[{kor:"칭",def:"저울"}]},{id:845,hanja:"檿",strokes:"18",def:{en:["mulberry"],kr:["산뽕나무","염"]},hunum:[{kor:"염",def:"산뽕나무"}]},{id:846,hanja:"澌",strokes:"15",def:{en:["to exhaust","to drain dry"],kr:["다할","시"]},hunum:[{kor:"시",def:"물 잦을"}]},{id:847,hanja:"嘫",strokes:"15",def:{en:[],kr:["대답할","연"]},hunum:[{kor:"연",def:"대답할"}]},{id:848,hanja:"落",strokes:"15",def:{en:["fall","drop","net income","surplus"],kr:["떨어질","락"]},hunum:[{kor:"락",def:"떨어질"}]},{id:849,hanja:"嘬",strokes:"15",def:{en:["to lap","to suck"],kr:["산적","한","입에","넣을","최"]},hunum:[{kor:"최",def:"물"}]},{id:850,hanja:"澍",strokes:"15",def:{en:["timely rain","life"],kr:["단비","주"]},hunum:[{kor:"주",def:"단비"}]},{id:851,hanja:"救",strokes:"11",def:{en:["save","rescue","relieve","help","aid"],kr:["구원할","구"]},hunum:[{kor:"구",def:"구원할"}]},{id:852,hanja:"澎",strokes:"15",def:{en:["splatter"],kr:["물결","부딛는","형세","팽"]},hunum:[{kor:"팽",def:"물소리"}]},{id:853,hanja:"秦",strokes:"10",def:{en:["feudal state of Qin","the Qin dynasty"],kr:["벼","이름","진"]},hunum:[{kor:"진",def:"벼 이름"}]},{id:854,hanja:"褌",strokes:"15",def:{en:["trousers","pants","shorts","drawers"],kr:["잠방이","곤"]},hunum:[{kor:"곤",def:"잠방이"}]},{id:855,hanja:"鍤",strokes:"17",def:{en:["spade","shovel","marking pin"],kr:["가래","삽"]},hunum:[{kor:"삽",def:"가래"}]},{id:856,hanja:"蹺",strokes:"19",def:{en:["raise one"],kr:["발돋움할","교"]},hunum:[{kor:"교",def:"발돋움할"}]},{id:857,hanja:"嘮",strokes:"15",def:{en:["chat","jaw","gossip","talk"],kr:["이야기할","초"]},hunum:[{kor:"초",def:"이야기할"}]},{id:858,hanja:"秧",strokes:"10",def:{en:["rice seedlings","young rice plants"],kr:["모","앙"]},hunum:[{kor:"앙",def:"모"}]},{id:859,hanja:"鶡",strokes:"20",def:{en:["crossbill","species of nightingale"],kr:["관이름","갈"]},hunum:[{kor:"갈",def:"할단새"}]},{id:860,hanja:"敔",strokes:"11",def:{en:["gavel"],kr:["풍류그칠","어"]},hunum:[{kor:"어",def:"금할"}]},{id:861,hanja:"澐",strokes:"15",def:{en:["billows"],kr:["큰","물결","운"]},hunum:[{kor:"운",def:"큰 물결"}]},{id:862,hanja:"嘯",strokes:"15",def:{en:["roar","howl","scream","whistle"],kr:["읊을","소"]},hunum:[{kor:"소",def:"휘파람"}]},{id:863,hanja:"蹼",strokes:"19",def:{en:["webbed feet of waterfowl"],kr:["물갈퀴","복"]},hunum:[{kor:"복",def:"물갈퀴"}]},{id:864,hanja:"敕",strokes:"11",def:{en:["an imperial order or decree"],kr:["신칙할","칙"]},hunum:[{kor:"칙",def:"경계할"}]},{id:865,hanja:"秩",strokes:"10",def:{en:["order","orderly","salary","decade"],kr:["차례","질"]},hunum:[{kor:"질",def:"차례"}]},{id:866,hanja:"嘰",strokes:"15",def:{en:["sigh in disapproval","take small"],kr:["쪽잘거릴","기"]},hunum:[{kor:"기",def:"쪽잘거릴"}]},{id:867,hanja:"僁",strokes:"13",def:{en:[],kr:["소근거릴","설"]},hunum:[{kor:"설",def:"소근거릴"}]},{id:868,hanja:"澒",strokes:"15",def:{en:["vast"],kr:["수은","홍"]},hunum:[{kor:"홍",def:"수은"}]},{id:869,hanja:"嘱",strokes:"15",def:{en:["order","tell","instruct","leave word"],kr:["囑의","俗字"]},hunum:[{kor:"촉",def:"부탁할"}]},{id:870,hanja:"秪",strokes:"10",def:{en:["only","merely"],kr:["벼","처음","익을","지"]},hunum:[{kor:"지",def:"벼 처음 익을"}]},{id:871,hanja:"褐",strokes:"15",def:{en:["coarse woolen cloth","dull","dark"],kr:["갈옷","갈"]},hunum:[{kor:"갈",def:"털베"}]},{id:872,hanja:"敖",strokes:"11",def:{en:["ramble","play about","leisurely"],kr:["거만할","오"]},hunum:[{kor:"오",def:"희롱할"}]},{id:873,hanja:"僂",strokes:"13",def:{en:["humpback","surname"],kr:["구부릴","루"]},hunum:[{kor:"루",def:"구부릴"}]},{id:874,hanja:"鶤",strokes:"20",def:{en:[],kr:["댓닭","곤"]},hunum:[{kor:"곤",def:"댓닭"}]},{id:875,hanja:"敗",strokes:"11",def:{en:["be defeated","decline","fail"],kr:["썪을","패"]},hunum:[{kor:"패",def:"헐어질"}]},{id:876,hanja:"秫",strokes:"10",def:{en:["glutinous variety of millet"],kr:["차조","출"]},hunum:[{kor:"출",def:"차조"}]},{id:877,hanja:"嘲",strokes:"15",def:{en:["ridicule","deride","scorn","jeer at"],kr:["조롱할","조"]},hunum:[{kor:"조",def:"조롱할"}]},{id:878,hanja:"澔",strokes:"15",def:{en:["radiance of gems"],kr:["浩와","同字"]},hunum:[{kor:"호",def:"넓을"}]},{id:879,hanja:"僄",strokes:"13",def:{en:["light","airy"],kr:["진중치","못할","표"]},hunum:[{kor:"표",def:"몸이 가벼울"}]},{id:880,hanja:"褒",strokes:"15",def:{en:["praise","commend","honor","cite"],kr:["고을이름","포"]},hunum:[{kor:"포",def:"포장할"}]},{id:881,hanja:"秬",strokes:"10",def:{en:["black millet"],kr:["검은","기장","거"]},hunum:[{kor:"거",def:"검은 기장"}]},{id:882,hanja:"敘",strokes:"11",def:{en:["express","state","relate","narrate"],kr:["敍의","俗字"]},hunum:[{kor:"서",def:"차례"}]},{id:883,hanja:"嬀",strokes:"15",def:{en:["name of a river in Shanxi","crafty"],kr:["성","규"]},hunum:[{kor:"규",def:"성"}]},{id:884,hanja:"鍪",strokes:"17",def:{en:["an iron pan","a metal cap"],kr:["가마","무"]},hunum:[{kor:"무",def:"투구"}]},{id:885,hanja:"鍫",strokes:"17",def:{en:["shovel"],kr:["가래","초"]},hunum:[{kor:"초",def:"가래"}]},{id:886,hanja:"褓",strokes:"15",def:{en:["swaddling cloth","infancy"],kr:["포대기","보"]},hunum:[{kor:"보",def:"포대기"}]},{id:887,hanja:"教",strokes:"11",def:{en:["teach","class"],kr:["敎의","俗字"]},hunum:[{kor:"교",def:"가르칠"}]},{id:888,hanja:"嘳",strokes:"15",def:{en:[],kr:["한숨쉴","괴"]},hunum:[{kor:"괴",def:"한숨쉴"}]},{id:889,hanja:"僅",strokes:"13",def:{en:["only","merely","solely","just"],kr:["겨우","근"]},hunum:[{kor:"근",def:"겨우"}]},{id:890,hanja:"嘴",strokes:"15",def:{en:["mouth","lips"],kr:["부리","취"]},hunum:[{kor:"취",def:"부리"}]},{id:891,hanja:"璀",strokes:"15",def:{en:["lustre of gems","glitter","shine"],kr:["구슬","주렁주렁","달릴","최"]},hunum:[{kor:"최",def:"옥빛 찬란할"}]},{id:892,hanja:"鍬",strokes:"17",def:{en:["shovel"],kr:["가래","초"]},hunum:[{kor:"초",def:"가래"}]},{id:893,hanja:"僆",strokes:"13",def:{en:[],kr:["쌍둥이","련"]},hunum:[{kor:"련",def:"쌍둥이"}]},{id:894,hanja:"嘵",strokes:"15",def:{en:["garrulous","disturbed","restless"],kr:["두려워할","효"]},hunum:[{kor:"효",def:"두려워할"}]},{id:895,hanja:"褕",strokes:"15",def:{en:["shirt"],kr:["쾌자","유"]},hunum:[{kor:"유",def:"꿩의 깃으로 꾸민 옷"}]},{id:896,hanja:"澗",strokes:"15",def:{en:["brook","mountain stream"],kr:["산골물","간"]},hunum:[{kor:"간",def:"산골물"}]},{id:897,hanja:"僇",strokes:"13",def:{en:["humiliate","treat with contempt"],kr:["욕보일","륙"]},hunum:[{kor:"륙",def:"욕보일"}]},{id:898,hanja:"鶩",strokes:"20",def:{en:["duck"],kr:["집오리","목"]},hunum:[{kor:"목",def:"집오리"}]},{id:899,hanja:"称",strokes:"10",def:{en:["call","name","brand","address","say"],kr:["稱과","同字"]},hunum:[{kor:"칭",def:"일컫을"}]},{id:900,hanja:"璂",strokes:"15",def:{en:["jade ornament"],kr:["피변","꾸미개","기"]},hunum:[{kor:"기",def:"피변 꾸미개"}]},{id:901,hanja:"嘶",strokes:"15",def:{en:["neighing of a horse","gravel voiced","husky throated"],kr:["울부짖을","시"]},hunum:[{kor:"시",def:"말 울"}]},{id:902,hanja:"僈",strokes:"13",def:{en:["negligent","remiss"],kr:["얕볼","만"]},hunum:[{kor:"만",def:"얕볼"}]},{id:903,hanja:"鍮",strokes:"17",def:{en:["brass"],kr:["놋쇠","유"]},hunum:[{kor:"유",def:"놋쇠"}]},{id:904,hanja:"嬅",strokes:"15",def:{en:[],kr:["여자","이름","화"]},hunum:[{kor:"화",def:"여자 이름"}]},{id:905,hanja:"嘷",strokes:"15",def:{en:["the roaring of wild beasts","to howl","to wail","to bawl"],kr:["외칠","호"]},hunum:[{kor:"호",def:"짖을"}]},{id:906,hanja:"敝",strokes:"12",def:{en:["break","destroy","broken","tattered"],kr:["활줌통","폐"]},hunum:[{kor:"폐",def:"옷 해질"}]},{id:907,hanja:"僉",strokes:"13",def:{en:["all","together","unanimous"],kr:["다","첨"]},hunum:[{kor:"첨",def:"다"}]},{id:908,hanja:"璃",strokes:"15",def:{en:["glass"],kr:["유리","리"]},hunum:[{kor:"리",def:"유리"}]},{id:909,hanja:"澘",strokes:"15",def:{en:[],kr:["潸의","略字"]},hunum:[{kor:"산",def:"눈물흐를"}]},{id:910,hanja:"鍰",strokes:"17",def:{en:["measure","money","coins"],kr:["무게","단위","환"]},hunum:[{kor:"환",def:"무게 단위"}]},{id:911,hanja:"鶬",strokes:"21",def:{en:["oriole"],kr:["왜가리","청"]},hunum:[{kor:"청",def:"왜가리"}]},{id:912,hanja:"敞",strokes:"12",def:{en:["roomy","spacious","open","broad"],kr:["높을","창"]},hunum:[{kor:"창",def:"높을"}]},{id:913,hanja:"褘",strokes:"15",def:{en:["ceremonial gowns of a queen"],kr:["아름다울","위"]},hunum:[{kor:"위",def:"휘장"}]},{id:914,hanja:"澙",strokes:"16",def:{en:[],kr:["潟의","俗字"]},hunum:[{kor:"석",def:"개펄"}]},{id:915,hanja:"嘸",strokes:"15",def:{en:["unclear","an expletive"],kr:["모호한","모양","무"]},hunum:[{kor:"무",def:"분명하지 않을"}]},{id:916,hanja:"僊",strokes:"13",def:{en:["Taoist super","transcendent","immortal"],kr:["춤출","선"]},hunum:[{kor:"선",def:"춤출"}]},{id:917,hanja:"僋",strokes:"13",def:{en:[],kr:["어리석을","탐"]},hunum:[{kor:"탐",def:"늘어날"}]},{id:918,hanja:"褙",strokes:"15",def:{en:["paper or cloth pasted together"]},hunum:[{kor:"배",def:"속적삼"}]},{id:919,hanja:"嘹",strokes:"15",def:{en:["used describe clarity of voice","resonant"],kr:["울","료"]},hunum:[{kor:"료",def:"울"}]},{id:920,hanja:"褚",strokes:"15",def:{en:["bag","valise","stuff","pad","surname"],kr:["옷에","솜","둘","저"]},hunum:[{kor:"저",def:"주머니"}]},{id:921,hanja:"璆",strokes:"15",def:{en:["beautiful jade","tinkle"],kr:["옥경쇠","구"]},hunum:[{kor:"구",def:"옥경쇠"}]},{id:922,hanja:"嘺",strokes:"15",def:{en:[],kr:["입","비뚤러질","교"]},hunum:[{kor:"교",def:"입 비뚤러질"}]},{id:923,hanja:"嘻",strokes:"15",def:{en:["mirthful","happy","interjection"],kr:["웃을","희"]},hunum:[{kor:"희",def:"웃을"}]},{id:924,hanja:"璇",strokes:"15",def:{en:["beautiful jade","star"],kr:["아름다운옥","선"]},hunum:[{kor:"선",def:"아름다운옥"}]},{id:925,hanja:"敡",strokes:"12",def:{en:["rebuke"],kr:["쉽게","말할","이"]},hunum:[{kor:"이",def:"업신여길"}]},{id:926,hanja:"働",strokes:"13",def:{en:["labor","work"],kr:["궁닐","동"]},hunum:[{kor:"동",def:"궁닐"}]},{id:927,hanja:"嬈",strokes:"15",def:{en:["graceful","charming","fascinating"],kr:["예쁜체","할","요"]},hunum:[{kor:"요",def:"예쁜체 할"}]},{id:928,hanja:"嬉",strokes:"15",def:{en:["enjoy","play","amuse oneself"],kr:["즐길","희"]},hunum:[{kor:"희",def:"즐길"}]},{id:929,hanja:"嘼",strokes:"15",def:{en:[],kr:["쌓을","휴"]},hunum:[{kor:"휴",def:"쌓을"}]},{id:930,hanja:"敢",strokes:"12",def:{en:["to dare","venture","bold","brave"],kr:["용맹할","감"]},hunum:[{kor:"감",def:"감히"}]},{id:931,hanja:"僎",strokes:"14",def:{en:["collect"],kr:["향음","주인","돕는","사람","준"]},hunum:[{kor:"선",def:"갖출"},{kor:"준",def:"향음 주인 돕는 사람"}]},{id:932,hanja:"鶯",strokes:"21",def:{en:["oriole","green finch","Sylvia species"],kr:["꾀꼬리","앵"]},hunum:[{kor:"앵",def:"꾀꼬리"}]},{id:933,hanja:"嘽",strokes:"15",def:{en:["pant","many"],kr:["많을","탄"]},hunum:[{kor:"천",def:"많을"},{kor:"탄",def:"헐떡거릴"}]},{id:934,hanja:"顂",strokes:"17",def:{en:[],kr:["덮을","뢰"]},hunum:[{kor:"뢰",def:"덮을"}]},{id:935,hanja:"璉",strokes:"15",def:{en:["a vessel used hold grain offerings"],kr:["호련","련"]},hunum:[{kor:"련",def:"호련"}]},{id:936,hanja:"散",strokes:"12",def:{en:["scatter","disperse","break up"],kr:["흩을","산"]},hunum:[{kor:"산",def:"흩을"}]},{id:937,hanja:"像",strokes:"14",def:{en:["a picture","image","figure","to resemble"],kr:["형상","상"]},hunum:[{kor:"상",def:"형상"}]},{id:938,hanja:"鍵",strokes:"17",def:{en:["door bolt","lock bolt","key"],kr:["수레","굴대","건"]},hunum:[{kor:"건",def:"열쇠"}]},{id:939,hanja:"秸",strokes:"11",def:{en:["stalks of millet","corn"],kr:["짚","고갱이","갈"]},hunum:[{kor:"갈",def:"볏짚"}]},{id:940,hanja:"璊",strokes:"15",def:{en:["reddish"],kr:["붉은","옥","문"]},hunum:[{kor:"문",def:"붉은 옥"}]},{id:941,hanja:"澟",strokes:"16",def:{en:[],kr:["서늘할","름"]},hunum:[{kor:"름",def:"서늘할"}]},{id:942,hanja:"嘾",strokes:"15",def:{en:[],kr:["탐할","담"]},hunum:[{kor:"담",def:"탐할"}]},{id:943,hanja:"嬋",strokes:"15",def:{en:["beautiful","lovely","pretty","graceful"],kr:["고울","선"]},hunum:[{kor:"선",def:"고울"}]},{id:944,hanja:"嘿",strokes:"15",def:{en:["be silent","be quiet"],kr:["말","아니할","묵"]},hunum:[{kor:"묵",def:"고요할"}]},{id:945,hanja:"僑",strokes:"14",def:{en:["sojourn","lodge"],kr:["높을","교"]},hunum:[{kor:"교",def:"높을"}]},{id:946,hanja:"嬌",strokes:"15",def:{en:["seductive and loveable","tender"],kr:["아리따울","교"]},hunum:[{kor:"교",def:"아리따울"}]},{id:947,hanja:"澡",strokes:"16",def:{en:["wash","bathe"],kr:["씻을","조"]},hunum:[{kor:"조",def:"씻을"}]},{id:948,hanja:"璋",strokes:"15",def:{en:["jade plaything","jade ornament"],kr:["끝의","반을","깎아","뾰족하게","한","홀","장"]},hunum:[{kor:"장",def:"끝의 반을 깎아 뾰족하게 한 홀"}]},{id:949,hanja:"敦",strokes:"12",def:{en:["esteem","honest","candid","sincere"],kr:["성낼","퇴"]},hunum:[{kor:"돈",def:"도타울"},{kor:"퇴",def:"쪼을"}]},{id:950,hanja:"僒",strokes:"14",def:{en:[],kr:["구부릴","군"]},hunum:[{kor:"군",def:"구부릴"}]},{id:951,hanja:"鶴",strokes:"21",def:{en:["crane","Grus species"],kr:["두루미","학"]},hunum:[{kor:"학",def:"두루미"}]},{id:952,hanja:"顆",strokes:"17",def:{en:["grain","kernel"],kr:["낟알","과"]},hunum:[{kor:"과",def:"낟알"}]},{id:953,hanja:"移",strokes:"11",def:{en:["change place","shift","move about"],kr:["변할","이"]},hunum:[{kor:"이",def:"옮길"}]},{id:954,hanja:"澣",strokes:"16",def:{en:["cleanse","wash"],kr:["빨","한"]},hunum:[{kor:"한",def:"빨"}]},{id:955,hanja:"顇",strokes:"17",def:{en:["be worn out","be haggard"]},hunum:[{kor:"췌",def:"야윌"},{kor:"취",def:"야윌"}]},{id:956,hanja:"鶵",strokes:"21",def:{en:["chick","fledging","infant","toddler"]},hunum:[{kor:"추",def:"난새"}]},{id:957,hanja:"僔",strokes:"14",def:{en:[],kr:["모을","준"]},hunum:[{kor:"준",def:"모을"}]},{id:958,hanja:"敩",strokes:"12",def:{en:[],kr:["斆의","略字"]},hunum:[{kor:"효",def:"가르칠"}]},{id:959,hanja:"顈",strokes:"17",def:{en:[],kr:["홑옷","경"]},hunum:[{kor:"경",def:"홑옷"}]},{id:960,hanja:"澤",strokes:"16",def:{en:["marsh","swamp","grace","brilliance","damp","moist","fertile"],kr:["비와","이슬","택"]},hunum:[{kor:"석",def:"풀"},{kor:"택",def:"못"}]},{id:961,hanja:"僕",strokes:"14",def:{en:["slave","servant","I"],kr:["종","복"]},hunum:[{kor:"복",def:"종"}]},{id:962,hanja:"僖",strokes:"14",def:{en:["joy","gladness","delight","surname"],kr:["기쁠","희"]},hunum:[{kor:"희",def:"기쁠"}]},{id:963,hanja:"鍼",strokes:"17",def:{en:["needle","pin","tack","prick","inject"],kr:["침","침"]},hunum:[{kor:"감",def:"덜"},{kor:"침",def:"바늘"}]},{id:964,hanja:"鶸",strokes:"21",def:{en:["light yellowish"],kr:["투계","약"]},hunum:[{kor:"약",def:"댓닭"}]},{id:965,hanja:"鍾",strokes:"17",def:{en:["cup","glass","goblet","surname"],kr:["술병","종"]},hunum:[{kor:"종",def:"술병"}]},{id:966,hanja:"褥",strokes:"16",def:{en:["mattress","cushion","bedding"]},hunum:[{kor:"요",def:"요"}]},{id:967,hanja:"敬",strokes:"13",def:{en:["respect","honor","respectfully"],kr:["공경할","경"]},hunum:[{kor:"경",def:"공경할"}]},{id:968,hanja:"澧",strokes:"16",def:{en:["river in northern Hunan province"],kr:["강","이름","례"]},hunum:[{kor:"례",def:"강 이름"}]},{id:969,hanja:"鶹",strokes:"21",def:{en:["the owl"],kr:["올빼미","류"]},hunum:[{kor:"류",def:"올빼미"}]},{id:970,hanja:"顋",strokes:"18",def:{en:["lower part of face","jaw","gills of a fish"],kr:["볼","시"]},hunum:[{kor:"시",def:"뺨"}]},{id:971,hanja:"題",strokes:"18",def:{en:["forehead","title","headline","theme"],kr:["이마","제"]},hunum:[{kor:"제",def:"이마"}]},{id:972,hanja:"敭",strokes:"12",def:{en:["scatter","spread","praise","raise"],kr:["오를","양"]},hunum:[{kor:"양",def:"오를"}]},{id:973,hanja:"澨",strokes:"16",def:{en:["shore","river in Hubei"],kr:["물가","서"]},hunum:[{kor:"서",def:"물가"}]},{id:974,hanja:"褧",strokes:"16",def:{en:["unlined clothes","light overcoat"],kr:["홑옷","경"]},hunum:[{kor:"경",def:"홑옷"}]},{id:975,hanja:"僚",strokes:"14",def:{en:["companion","colleague","officials","bureaucracy","a pretty face"],kr:["동료","료"]},hunum:[{kor:"료",def:"동료"}]},{id:976,hanja:"鶻",strokes:"21",def:{en:["a kind of pigeon","falcon"],kr:["송골매","골"]},hunum:[{kor:"골",def:"송골매"}]},{id:977,hanja:"額",strokes:"18",def:{en:["forehead","tablet","plaque","fixed"],kr:["수량","액"]},hunum:[{kor:"액",def:"이마"}]},{id:978,hanja:"嬖",strokes:"16",def:{en:["favorite","a minion"],kr:["벼슬이름","폐"]},hunum:[{kor:"폐",def:"사랑할"}]},{id:979,hanja:"僛",strokes:"14",def:{en:[],kr:["취하여","춤추는","모양","기"]},hunum:[{kor:"기",def:"취하여 춤추는 모양"}]},{id:980,hanja:"顎",strokes:"18",def:{en:["jaw"],kr:["턱","악"]},hunum:[{kor:"악",def:"턱"}]},{id:981,hanja:"鹿",strokes:"11",def:{en:["deer","surname","KangXi radical"],kr:["사슴","녹"]},hunum:[{kor:"녹",def:"사슴"}]},{id:982,hanja:"顏",strokes:"18",def:{en:["face","facial appearance"],kr:["색채","안"]},hunum:[{kor:"안",def:"얼굴"}]},{id:983,hanja:"褪",strokes:"16",def:{en:["strip","undress","fall off","fade"],kr:["꽃빛","옅어질","퇴"]},hunum:[{kor:"퇴",def:"옷 벗을"}]},{id:984,hanja:"論",strokes:"15",def:{en:["debate","discuss","discourse"],kr:["말할","논"]},hunum:[{kor:"논",def:"말할"}]},{id:985,hanja:"数",strokes:"13",def:{en:["number","several","count","fate"],kr:["빽빽할","촉"]},hunum:[{kor:"수",def:"셈"},{kor:"촉",def:"빽빽할"}]},{id:986,hanja:"僝",strokes:"14",def:{en:["to revile","to abuse"],kr:["욕할","잔"]},hunum:[{kor:"잔",def:"욕할"}]},{id:987,hanja:"褫",strokes:"16",def:{en:["strip","tear off","undress"],kr:["넋","잃을","치"]},hunum:[{kor:"치",def:"옷 빼앗을"}]},{id:988,hanja:"嬙",strokes:"16",def:{en:["lady"],kr:["궁녀","장"]},hunum:[{kor:"장",def:"궁녀"}]},{id:989,hanja:"壟",strokes:"19",def:{en:["grave","mound","ridge in field"],kr:["밭두둑","농"]},hunum:[{kor:"농",def:"밭두둑"}]},{id:990,hanja:"鶿",strokes:"21",def:{en:["cormorant"],kr:["가마우지","자"]},hunum:[{kor:"자",def:"가마우지"}]},{id:991,hanja:"澮",strokes:"16",def:{en:["irrigation ditch","trench","river"],kr:["봇도랑","회"]},hunum:[{kor:"회",def:"봇도랑"}]},{id:992,hanja:"弄",strokes:"7",def:{en:["do","play or fiddle with","alley"],kr:["희롱할","농"]},hunum:[{kor:"농",def:"희롱할"}]},{id:993,hanja:"璘",strokes:"16",def:{en:["luster of jade"],kr:["옥빛","린"]},hunum:[{kor:"린",def:"옥빛"}]},{id:994,hanja:"敲",strokes:"14",def:{en:["strike","beat","pound","hammer","rap"],kr:["두드릴","교"]},hunum:[{kor:"고",def:"두드릴"},{kor:"교",def:"두드릴"}]},{id:995,hanja:"僞",strokes:"14",def:{en:["false","counterfeit","bogus"],kr:["속일","위"]},hunum:[{kor:"위",def:"거짓"}]},{id:996,hanja:"顒",strokes:"18",def:{en:["solemn","large","grand","majestic"],kr:["우러를","옹"]},hunum:[{kor:"옹",def:"우러를"}]},{id:997,hanja:"嬛",strokes:"16",def:{en:["apt","clever","sycophant","flatterer"],kr:["산뜻할","현"]},hunum:[{kor:"현",def:"산뜻할"}]},{id:998,hanja:"澯",strokes:"16",def:{en:[],kr:["맑을","찬"]},hunum:[{kor:"찬",def:"맑을"}]},{id:999,hanja:"顓",strokes:"18",def:{en:["good","honest","simple","respectful"],kr:["오로지","전"]},hunum:[{kor:"전",def:"어리석을"}]},{id:1000,hanja:"僟",strokes:"14",def:{en:[],kr:["삼갈","기"]},hunum:[{kor:"기",def:"삼갈"}]},{id:1001,hanja:"籠",strokes:"22",def:{en:["cage","cage"],kr:["대그릇","농"]},hunum:[{kor:"농",def:"대그릇"}]},{id:1002,hanja:"整",strokes:"15",def:{en:["orderly","neat","tidy","whole"],kr:["가지런할","정"]},hunum:[{kor:"정",def:"가지런할"}]},{id:1003,hanja:"顔",strokes:"18",def:{en:["face","facial appearance"],kr:["顏과","同字"]},hunum:[{kor:"안",def:"얼굴"}]},{id:1004,hanja:"聾",strokes:"22",def:{en:["deaf"],kr:["귀머거리","농"]},hunum:[{kor:"농",def:"귀머거리"}]},{id:1005,hanja:"顕",strokes:"18",def:{en:["manifest","display","evident","clear"],kr:["顯의","略字"]},hunum:[{kor:"현",def:"나타날"}]},{id:1006,hanja:"菁",strokes:"14",def:{en:["flower of leek family","turnip"],kr:["부추꽃","청"]},hunum:[{kor:"청",def:"부추꽃"}]},{id:1007,hanja:"澱",strokes:"16",def:{en:["sediment","dregs","precipitate"],kr:["물","고일","전"]},hunum:[{kor:"전",def:"찌끼"}]},{id:1008,hanja:"敵",strokes:"15",def:{en:["enemy","foe","rival","resist"],kr:["막을","적"]},hunum:[{kor:"적",def:"대적할"}]},{id:1009,hanja:"牢",strokes:"7",def:{en:["prison","stable","pen","secure"],kr:["가축우리","뇌"]},hunum:[{kor:"뇌",def:"가축우리"}]},{id:1010,hanja:"璜",strokes:"16",def:{en:["a semicircular jade ornament used as a pendant"],kr:["서옥","황"]},hunum:[{kor:"황",def:"서옥"}]},{id:1011,hanja:"僢",strokes:"14",def:{en:[],kr:["어그러질","천"]},hunum:[{kor:"천",def:"어그러질"}]},{id:1012,hanja:"菂",strokes:"14",def:{en:[],kr:["연밥","적"]},hunum:[{kor:"적",def:"연밥"}]},{id:1013,hanja:"褰",strokes:"16",def:{en:["underclothing","to pick up one"],kr:["발","걷을","건"]},hunum:[{kor:"건",def:"바지"}]},{id:1014,hanja:"橃",strokes:"16",def:{en:[],kr:["떼","벌"]},hunum:[{kor:"벌",def:"떼"}]},{id:1015,hanja:"顖",strokes:"19",def:{en:["top of the head","skull"],kr:["囟의","俗字"]},hunum:[{kor:"신",def:"정수리"}]},{id:1016,hanja:"磊",strokes:"15",def:{en:["pile of rocks or stones","great"],kr:["돌이","많이","쌓인","모양","뇌"]},hunum:[{kor:"뇌",def:"돌이 많이 쌓인 모양"}]},{id:1017,hanja:"僣",strokes:"14",def:{en:["assume","usurp"],kr:["교활할","참"]},hunum:[{kor:"참",def:"교활할"}]},{id:1018,hanja:"璝",strokes:"16",def:{en:[],kr:["옥돌","괴"]},hunum:[{kor:"괴",def:"옥돌"}]},{id:1019,hanja:"敷",strokes:"15",def:{en:["spread","diffuse","apply","paint"],kr:["펼","부"]},hunum:[{kor:"부",def:"펼"}]},{id:1020,hanja:"澳",strokes:"16",def:{en:["inlet","bay","dock","bank"]},hunum:[{kor:"오",def:"깊을"},{kor:"욱",def:"후미"}]},{id:1021,hanja:"橄",strokes:"16",def:{en:["olive"],kr:["감람나무","감"]},hunum:[{kor:"감",def:"감람나무"}]},{id:1022,hanja:"賂",strokes:"13",def:{en:["bribe","give present"],kr:["뇌물","뇌"]},hunum:[{kor:"뇌",def:"뇌물"}]},{id:1023,hanja:"僤",strokes:"14",def:{en:["sincere"],kr:["빠를","탄"]},hunum:[{kor:"탄",def:"도타울"}]},{id:1024,hanja:"怊",strokes:"8",def:{en:[],kr:["슬퍼할","초"]},hunum:[{kor:"초",def:"슬퍼할"}]},{id:1025,hanja:"璞",strokes:"16",def:{en:["unpolished gem","uncarved gem"],kr:["옥덩어리","박"]},hunum:[{kor:"박",def:"옥덩어리"}]},{id:1026,hanja:"數",strokes:"15",def:{en:["number","several","count","fate"],kr:["이치","수"]},hunum:[{kor:"삭",def:"자주"},{kor:"수",def:"헤아릴"}]},{id:1027,hanja:"雷",strokes:"13",def:{en:["thunder"],kr:["우뢰","뇌"]},hunum:[{kor:"뇌",def:"우뢰"}]},{id:1028,hanja:"菅",strokes:"14",def:{en:["coarse grass","themedia forskali"],kr:["골풀","관"]},hunum:[{kor:"관",def:"골풀"}]},{id:1029,hanja:"璟",strokes:"16",def:{en:["luster of gem"],kr:["옥","빛","경"]},hunum:[{kor:"경",def:"옥 빛"}]},{id:1030,hanja:"僥",strokes:"14",def:{en:["be lucky","by chance","by luck"],kr:["난장이","요"]},hunum:[{kor:"요",def:"거짓"}]},{id:1031,hanja:"願",strokes:"19",def:{en:["desire","want","wish","ambition"],kr:["생각할","원"]},hunum:[{kor:"원",def:"하고자할"}]},{id:1032,hanja:"壘",strokes:"18",def:{en:["rampart","military wall"],kr:["진","누"]},hunum:[{kor:"누",def:"진"}]},{id:1033,hanja:"橇",strokes:"16",def:{en:["a sledge for transportation"],kr:["진흙","썰매","취"]},hunum:[{kor:"취",def:"진흙 썰매"}]},{id:1034,hanja:"僦",strokes:"14",def:{en:["to heir","to rent"],kr:["고용할","추"]},hunum:[{kor:"추",def:"임금"}]},{id:1035,hanja:"澶",strokes:"16",def:{en:["still water","placid","tranquil"],kr:["물이름","전"]},hunum:[{kor:"전",def:"물이름"}]},{id:1036,hanja:"嬢",strokes:"16",def:{en:["troubled","oppressed","fat","mother"],kr:["孃의","略字"]},hunum:[{kor:"양",def:"아가씨"}]},{id:1037,hanja:"顙",strokes:"19",def:{en:["the forehead","to kowtow"],kr:["이마","상"]},hunum:[{kor:"상",def:"이마"}]},{id:1038,hanja:"屢",strokes:"14",def:{en:["frequently","often","again and again"],kr:["빛이","들어오는","창","누"]},hunum:[{kor:"누",def:"창"}]},{id:1039,hanja:"璡",strokes:"16",def:{en:["jade look alike stone"],kr:["옥돌","진"]},hunum:[{kor:"진",def:"옥돌"}]},{id:1040,hanja:"顚",strokes:"19",def:{en:["top","peak","summit","upset"],kr:["엎드러질","전"]},hunum:[{kor:"전",def:"이마"}]},{id:1041,hanja:"怍",strokes:"8",def:{en:["to be ashamed"],kr:["부끄러울","작"]},hunum:[{kor:"작",def:"부끄러울"}]},{id:1042,hanja:"橈",strokes:"16",def:{en:["bent or twisted piece of wood","a paddle"],kr:["노","요"]},hunum:[{kor:"요",def:"노"}]},{id:1043,hanja:"僧",strokes:"14",def:{en:["Buddhist priest","monk","san of Sanskrit sangha"],kr:["중","승"]},hunum:[{kor:"승",def:"중"}]},{id:1044,hanja:"樓",strokes:"15",def:{en:["building of two or more stories"],kr:["다락","누"]},hunum:[{kor:"누",def:"다락"}]},{id:1045,hanja:"顛",strokes:"19",def:{en:["top","peak","summit","upset"],kr:["顚과","同字"]},hunum:[{kor:"전",def:"엎드러질"}]},{id:1046,hanja:"褶",strokes:"17",def:{en:["pleat","crease","wrinkles"],kr:["겹옷","첩"]},hunum:[{kor:"습",def:"슬갑"},{kor:"첩",def:"덧옷"}]},{id:1047,hanja:"僨",strokes:"14",def:{en:["ruin","cause fail","overthrown"],kr:["넘어질","분"]},hunum:[{kor:"분",def:"넘어질"}]},{id:1048,hanja:"淚",strokes:"11",def:{en:["tears","weep","cry"],kr:["눈물","누"]},hunum:[{kor:"누",def:"눈물"}]},{id:1049,hanja:"僩",strokes:"14",def:{en:["courageous","martial","dignified"],kr:["노할","한"]},hunum:[{kor:"한",def:"노할"}]},{id:1050,hanja:"嬥",strokes:"17",def:{en:[],kr:["날씬할","조"]},hunum:[{kor:"조",def:"날씬할"}]},{id:1051,hanja:"璣",strokes:"16",def:{en:["pearl that is not quite round"],kr:["구슬","기"]},hunum:[{kor:"기",def:"구슬"}]},{id:1052,hanja:"怏",strokes:"8",def:{en:["discontented","dispirited","sad"],kr:["원망할","앙"]},hunum:[{kor:"앙",def:"원망할"}]},{id:1053,hanja:"橊",strokes:"16",variant:"榴",def:{en:["variant of","pomegranate"],kr:["榴"]},hunum:[{kor:"류",def:"석류나무"}]},{id:1054,hanja:"漏",strokes:"14",def:{en:["leak","drip","funnel","hour glass"],kr:["샐","누"]},hunum:[{kor:"누",def:"샐"}]},{id:1055,hanja:"褸",strokes:"17",def:{en:["lapel","collar","tattered","threadbare"],kr:["남루할","루"]},hunum:[{kor:"루",def:"남루할"}]},{id:1056,hanja:"菉",strokes:"14",def:{en:["the green bamboo","greenish bamboo"],kr:["조개풀","록"]},hunum:[{kor:"록",def:"조개풀"}]},{id:1057,hanja:"敾",strokes:"16",def:{en:["to rule"],kr:["글잘쓸","선"]},hunum:[{kor:"선",def:"글잘쓸"}]},{id:1058,hanja:"澹",strokes:"16",def:{en:["calm","quiet","tranquil"],kr:["맑을","담"]},hunum:[{kor:"담",def:"맑을"}]},{id:1059,hanja:"橋",strokes:"16",def:{en:["bridge","beam","crosspiece"],kr:["다리","교"]},hunum:[{kor:"교",def:"다리"}]},{id:1060,hanja:"僪",strokes:"14",def:{en:[],kr:["미칠","결"]},hunum:[{kor:"결",def:"해무리"}]},{id:1061,hanja:"累",strokes:"11",def:{en:["tired","implicate","involve","bother"],kr:["포갤","누"]},hunum:[{kor:"누",def:"포갤"}]},{id:1062,hanja:"踆",strokes:"14",def:{en:["squat"],kr:["그칠","준"]},hunum:[{kor:"준",def:"그칠"}]},{id:1063,hanja:"菊",strokes:"14",def:{en:["chrysanthemum"],kr:["국화","국"]},hunum:[{kor:"국",def:"국화"}]},{id:1064,hanja:"璥",strokes:"17",def:{en:["a kind of jade"],kr:["경옥","경"]},hunum:[{kor:"경",def:"경옥"}]},{id:1065,hanja:"類",strokes:"19",def:{en:["class","group","kind","category"],kr:["무리","류"]},hunum:[{kor:"류",def:"무리"}]},{id:1066,hanja:"縷",strokes:"17",def:{en:["thread","detailed","precise"],kr:["자세할","누"]},hunum:[{kor:"누",def:"자세할"}]},{id:1067,hanja:"僬",strokes:"14",def:{en:["clever","alert in mind pigmies"],kr:["밝게","살필","초"]},hunum:[{kor:"초",def:"밝게 살필"}]},{id:1068,hanja:"褺",strokes:"17",def:{en:["dirty","ragged","undress","to treat with irreverence"],kr:["겹옷","첩"]},hunum:[{kor:"첩",def:"겹옷"}]},{id:1069,hanja:"菋",strokes:"14",def:{en:[],kr:["오미자","미"]},hunum:[{kor:"미",def:"오미자"}]},{id:1070,hanja:"怒",strokes:"9",def:{en:["anger","rage","passion","angry"],kr:["성낼","노"]},hunum:[{kor:"노",def:"성낼"}]},{id:1071,hanja:"陋",strokes:"9",def:{en:["narrow","crude","coarse","ugly"],kr:["줍을","누"]},hunum:[{kor:"누",def:"줍을"}]},{id:1072,hanja:"僭",strokes:"14",def:{en:["assume","usurp"],kr:["참람할","참"]},hunum:[{kor:"참",def:"참람할"}]},{id:1073,hanja:"菌",strokes:"14",def:{en:["mushroom","germ","microbe"],kr:["버섯","균"]},hunum:[{kor:"균",def:"버섯"}]},{id:1074,hanja:"踈",strokes:"14",def:{en:["neglect","careless","lax"],kr:["疎의","譌字"]},hunum:[{kor:"소",def:"트일"}]},{id:1075,hanja:"璧",strokes:"17",def:{en:["piece of jade with hole in it"],kr:["동근","옥","벽"]},hunum:[{kor:"벽",def:"동근 옥"}]},{id:1076,hanja:"嬨",strokes:"17",def:{en:[],kr:["계집성품너그러고순할","자"]},hunum:[{kor:"자",def:"계집성품너그러고순할"}]},{id:1077,hanja:"勒",strokes:"11",def:{en:["strangle","tighten"],kr:["굴레","늑"]},hunum:[{kor:"늑",def:"굴레"}]},{id:1078,hanja:"褻",strokes:"17",def:{en:["dirty","ragged","slight","insult","treat with disrespect"],kr:["더러울","설"]},hunum:[{kor:"설",def:"더러울"}]},{id:1079,hanja:"璨",strokes:"17",def:{en:["gems","luster of gems","lustrous"],kr:["빛날","찬"]},hunum:[{kor:"찬",def:"빛날"}]},{id:1080,hanja:"怔",strokes:"8",def:{en:["a disease resembling neurosis"],kr:["가슴","두근두근할","정"]},hunum:[{kor:"정",def:"황겁할"}]},{id:1081,hanja:"踉",strokes:"14",def:{en:["hop","jump","hurriedly","urgently"],kr:["뛸","량"]},hunum:[{kor:"량",def:"뛸"}]},{id:1082,hanja:"僮",strokes:"14",def:{en:["page","boy servant"],kr:["아이","동"]},hunum:[{kor:"동",def:"아이"}]},{id:1083,hanja:"肋",strokes:"6",def:{en:["ribs","chest"],kr:["갈비대","늑"]},hunum:[{kor:"늑",def:"갈비대"}]},{id:1084,hanja:"怕",strokes:"8",def:{en:["to fear","be afraid of","apprehensive"],kr:["두려울","파"]},hunum:[{kor:"파",def:"두려울"}]},{id:1085,hanja:"橐",strokes:"16",def:{en:["a sack","a bag opening at both ends"],kr:["짐승이름","탁"]},hunum:[{kor:"탁",def:"전대"}]},{id:1086,hanja:"澾",strokes:"16",def:{en:["slippery","smooth"]},hunum:[{kor:"달",def:"미끄러울"}]},{id:1087,hanja:"嬪",strokes:"17",def:{en:["court lady","palace maid"],kr:["아내","빈"]},hunum:[{kor:"빈",def:"아내"}]},{id:1088,hanja:"凜",strokes:"15",def:{en:["shiver with cold or fear","fearful"],kr:["찰","늠"]},hunum:[{kor:"늠",def:"찰"}]},{id:1089,hanja:"怖",strokes:"8",def:{en:["terror","fear","frighten","terrified"],kr:["놀래킬","포"]},hunum:[{kor:"포",def:"두려울"}]},{id:1090,hanja:"璪",strokes:"17",def:{en:["pearl pendants on coronet"],kr:["면루관","드림","옥","조"]},hunum:[{kor:"조",def:"면루관 드림 옥"}]},{id:1091,hanja:"僰",strokes:"14",def:{en:["ancient aboriginal tribe"],kr:["오랑캐","북"]},hunum:[{kor:"북",def:"오랑캐"}]},{id:1092,hanja:"凌",strokes:"10",def:{en:["pure","virtuous","insult","maltreat"],kr:["얼음","능"]},hunum:[{kor:"능",def:"얼음"}]},{id:1093,hanja:"怗",strokes:"8",def:{en:["observant","peaceful","submissive"],kr:["고요할","첩"]},hunum:[{kor:"첩",def:"고요할"}]},{id:1094,hanja:"橒",strokes:"16",def:{en:["wood streaks"],kr:["나무","무늬","운"]},hunum:[{kor:"운",def:"나무 무늬"}]},{id:1095,hanja:"顥",strokes:"21",def:{en:["luminous","white","hoary"],kr:["빛나는","모양","호"]},hunum:[{kor:"호",def:"클"}]},{id:1096,hanja:"菑",strokes:"14",def:{en:["to weed grass","land which has been under cultivation for one year"],kr:["따비밭","치"]},hunum:[{kor:"치",def:"따비밭"}]},{id:1097,hanja:"璫",strokes:"17",def:{en:["pendant ornaments","earrings"],kr:["귀고리","당"]},hunum:[{kor:"당",def:"귀고리"}]},{id:1098,hanja:"橓",strokes:"16",def:{en:[],kr:["무궁화나무","순"]},hunum:[{kor:"순",def:"무궁화나무"}]},{id:1099,hanja:"嬭",strokes:"17",def:{en:["milk","suckle","breasts"],kr:["젖","내"]},hunum:[{kor:"내",def:"젖"}]},{id:1100,hanja:"稜",strokes:"13",def:{en:["corner","edge","angle","square block"],kr:["모질","능"]},hunum:[{kor:"능",def:"모질"}]},{id:1101,hanja:"怙",strokes:"8",def:{en:["rely on","presume on","persist in"],kr:["믿을","호"]},hunum:[{kor:"호",def:"믿을"}]},{id:1102,hanja:"嗀",strokes:"13",def:{en:[],kr:["게울","학"]},hunum:[{kor:"학",def:"게울"}]},{id:1103,hanja:"顦",strokes:"21",def:{en:["be worn","emaciated","haggard"],kr:["야윌","초"]},hunum:[{kor:"초",def:"야윌"}]},{id:1104,hanja:"綾",strokes:"14",def:{en:["thin silk","damask silk"],kr:["무늬","놓은","비단","능"]},hunum:[{kor:"능",def:"무늬 놓은 비단"}]},{id:1105,hanja:"嗁",strokes:"13",def:{en:["give forth sound","make noise"],kr:["啼와","同字"]},hunum:[{kor:"제",def:"울"}]},{id:1106,hanja:"菓",strokes:"14",def:{en:["fruits","nuts","berries"],kr:["과일","과"]},hunum:[{kor:"과",def:"과일"}]},{id:1107,hanja:"踏",strokes:"15",def:{en:["step on","trample","tread on","walk"],kr:["떨어지는","소리","답"]},hunum:[{kor:"답",def:"떨어지는 소리"}]},{id:1108,hanja:"顧",strokes:"21",def:{en:["look back","look at","look after"],kr:["돌아볼","고"]},hunum:[{kor:"고",def:"돌아볼"}]},{id:1109,hanja:"菱",strokes:"14",def:{en:["water","water caltrop"],kr:["마름","능"]},hunum:[{kor:"능",def:"마름"}]},{id:1110,hanja:"菔",strokes:"14",def:{en:["turnip"],kr:["무","복"]},hunum:[{kor:"복",def:"무"}]},{id:1111,hanja:"僵",strokes:"15",def:{en:["stiff and motionless","stock still"],kr:["쓰러질","강"]},hunum:[{kor:"강",def:"엎드러질"}]},{id:1112,hanja:"嬰",strokes:"17",def:{en:["baby","infant","bother"],kr:["물요괴","영"]},hunum:[{kor:"영",def:"어릴"}]},{id:1113,hanja:"嗂",strokes:"13",def:{en:[],kr:["기꺼울","요"]},hunum:[{kor:"요",def:"기꺼울"}]},{id:1114,hanja:"陵",strokes:"11",def:{en:["hill","mound","mausoleum"],kr:["능","능"]},hunum:[{kor:"능",def:"능"}]},{id:1115,hanja:"嗃",strokes:"13",def:{en:["to flute"],kr:["성낸","소리","효"]},hunum:[{kor:"학",def:"꾸짖을"},{kor:"효",def:"성낸 소리"}]},{id:1116,hanja:"踐",strokes:"15",def:{en:["trample","tread upon","walk on"],kr:["밟을","천"]},hunum:[{kor:"천",def:"밟을"}]},{id:1117,hanja:"怛",strokes:"8",def:{en:["grieved","saddened","worried"],kr:["깜짝","놀랄","달"]},hunum:[{kor:"달",def:"깜짝 놀랄"}]},{id:1118,hanja:"僶",strokes:"15",def:{en:[],kr:["어거지로","할","민"]},hunum:[{kor:"민",def:"어거지로 할"}]},{id:1119,hanja:"讀",strokes:"22",def:{en:["read","study","pronounce"],kr:["구절","두"]},hunum:[{kor:"두",def:"구절"}]},{id:1120,hanja:"環",strokes:"17",def:{en:["jade ring or bracelet","ring"],kr:["고리","환"]},hunum:[{kor:"환",def:"고리"}]},{id:1121,hanja:"菖",strokes:"14",def:{en:["iris","sweet flag","calamus"],kr:["창포","창"]},hunum:[{kor:"창",def:"창포"}]},{id:1122,hanja:"怜",strokes:"8",def:{en:["pity","sympathize"],kr:["영리할","령"]},hunum:[{kor:"련",def:"연리할"},{kor:"령",def:"영리할"}]},{id:1123,hanja:"橘",strokes:"16",def:{en:["orange","tangerine"],kr:["귤나무","귤"]},hunum:[{kor:"귤",def:"귤나무"}]},{id:1124,hanja:"僷",strokes:"14",def:{en:[],kr:["펴지","않을","엽"]},hunum:[{kor:"엽",def:"얼굴 예쁠"}]},{id:1125,hanja:"嬲",strokes:"17",def:{en:["frolic","play with","flirt with"],kr:["샘낼","뇨"]},hunum:[{kor:"뇨",def:"샘낼"}]},{id:1126,hanja:"嗄",strokes:"13",def:{en:["hoarse of voice"],kr:["목","쉴","애"]},hunum:[{kor:"사",def:"목 잠길"},{kor:"애",def:"목 쉴"}]},{id:1127,hanja:"拏",strokes:"8",def:{en:["take","bring","grasp","hold","arrest"],kr:["붙잡을","라"]},hunum:[{kor:"라",def:"붙잡을"}]},{id:1128,hanja:"嗅",strokes:"13",def:{en:["smell","scent","sniff","olfactive"],kr:["맡을","후"]},hunum:[{kor:"후",def:"맡을"}]},{id:1129,hanja:"顫",strokes:"22",def:{en:["shiver","tremble","trembling"],kr:["머리","비뚤이","전"]},hunum:[{kor:"전",def:"사지 떨릴"}]},{id:1130,hanja:"思",strokes:"9",def:{en:["think","consider","ponder","final particle"],kr:["생각할","사"]},hunum:[{kor:"사",def:"생각할"}]},{id:1131,hanja:"橙",strokes:"16",def:{en:["orange"],kr:["귤","증"]},hunum:[{kor:"등",def:"등자나무"},{kor:"증",def:"귤"}]},{id:1132,hanja:"僸",strokes:"15",def:{en:[],kr:["우러를","금"]},hunum:[{kor:"금",def:"우러를"}]},{id:1133,hanja:"樂",strokes:"15",def:{en:["happy","glad","enjoyable","music"],kr:["즐거울","락"]},hunum:[{kor:"락",def:"즐거울"}]},{id:1134,hanja:"嗆",strokes:"13",def:{en:["choke by smoke","irritates nose"],kr:["새","먹을","창"]},hunum:[{kor:"창",def:"새 먹을"}]},{id:1135,hanja:"菘",strokes:"14",def:{en:["celery","cabbage"],kr:["배추","숭"]},hunum:[{kor:"숭",def:"배추"}]},{id:1136,hanja:"璲",strokes:"17",def:{en:["pendant girdle ornament"],kr:["패옥","수"]},hunum:[{kor:"수",def:"서옥"}]},{id:1137,hanja:"橚",strokes:"16",def:{en:["tall tree"],kr:["길고","꼿꼿할","숙"]},hunum:[{kor:"숙",def:"길고 꼿꼿할"}]},{id:1138,hanja:"價",strokes:"15",def:{en:["price","value"],kr:["값","가"]},hunum:[{kor:"가",def:"값"}]},{id:1139,hanja:"嬴",strokes:"16",def:{en:["to win","to have a surplus","surname"],kr:["아름다울","영"]},hunum:[{kor:"영",def:"성씨"}]},{id:1140,hanja:"諾",strokes:"16",def:{en:["promise","assent","approve"],kr:["대답할","락"]},hunum:[{kor:"락",def:"대답할"}]},{id:1141,hanja:"禀",strokes:"13",def:{en:["report to","petition"],kr:["성품","품"]},hunum:[{kor:"품",def:"여쭐"}]},{id:1142,hanja:"踔",strokes:"15",def:{en:["to get ahead","to stride","to excel"],kr:["앙감질","탁"]},hunum:[{kor:"탁",def:"우뚝 설"}]},{id:1143,hanja:"嗇",strokes:"13",def:{en:["miserly","thrifty","stingy","stopped up","constipated"],kr:["아낄","색"]},hunum:[{kor:"색",def:"아낄"}]},{id:1144,hanja:"丹",strokes:"4",def:{en:["cinnabar","vermilion"],kr:["붉을","란"]},hunum:[{kor:"란",def:"붉을"}]},{id:1145,hanja:"怠",strokes:"9",def:{en:["idle","remiss","negligent","neglect"],kr:["거만할","태"]},hunum:[{kor:"태",def:"게으를"}]},{id:1146,hanja:"禁",strokes:"13",def:{en:["restrict","prohibit","forbid"],kr:["금할","금"]},hunum:[{kor:"금",def:"금할"}]},{id:1147,hanja:"僻",strokes:"15",def:{en:["out","remote","unorthodox"],kr:["피할","피"]},hunum:[{kor:"벽",def:"후미질"},{kor:"피",def:"피할"}]},{id:1148,hanja:"嗈",strokes:"13",def:{en:["oh"],kr:["기러기","짝지어","울","옹"]},hunum:[{kor:"옹",def:"기러기 짝지어 울"}]},{id:1149,hanja:"寧",strokes:"14",def:{en:["repose","serenity","peace","peaceful"],kr:["편안할","령"]},hunum:[{kor:"령",def:"편안할"}]},{id:1150,hanja:"顯",strokes:"23",def:{en:["manifest","display","evident","clear"],kr:["높을","현"]},hunum:[{kor:"현",def:"나타날"}]},{id:1151,hanja:"璵",strokes:"18",def:{en:["beautiful jade"],kr:["보배옥","여"]},hunum:[{kor:"여",def:"보배옥"}]},{id:1152,hanja:"怡",strokes:"8",def:{en:["harmony","pleasure","joy","be glad"],kr:["즐거울","이"]},hunum:[{kor:"이",def:"기쁠"}]},{id:1153,hanja:"嗉",strokes:"13",def:{en:["bird","wine pot"],kr:["멀떠구니","소"]},hunum:[{kor:"소",def:"멀떠구니"}]},{id:1154,hanja:"怒",strokes:"8",def:{en:["anger","rage","passion","angry"],kr:["성냉","로"]},hunum:[{kor:"로",def:"성냉"}]},{id:1155,hanja:"嗊",strokes:"13",def:{en:[],kr:["노래","홍"]},hunum:[{kor:"홍",def:"노래"}]},{id:1156,hanja:"僽",strokes:"15",def:{en:[],kr:["몹시","욕할","추"]},hunum:[{kor:"추",def:"몹시 욕할"}]},{id:1157,hanja:"菜",strokes:"14",def:{en:["vegetables","dish","order","food"],kr:["나물","채"]},hunum:[{kor:"채",def:"나물"}]},{id:1158,hanja:"顰",strokes:"24",def:{en:["frown","knit brows","with knitted"],kr:["찡그릴","빈"]},hunum:[{kor:"빈",def:"찡그릴"}]},{id:1159,hanja:"率",strokes:"11",def:{en:["to lead","ratio","rate","limit"],kr:["헤아릴","률"]},hunum:[{kor:"률",def:"헤아릴"}]},{id:1160,hanja:"嗋",strokes:"13",def:{en:[],kr:["들이마실","협"]},hunum:[{kor:"협",def:"들이마실"}]},{id:1161,hanja:"機",strokes:"16",def:{en:["machine","moment","chance"],kr:["틀","기"]},hunum:[{kor:"기",def:"틀"}]},{id:1162,hanja:"顱",strokes:"25",def:{en:["skull"],kr:["머리뼈","로"]},hunum:[{kor:"로",def:"머리뼈"}]},{id:1163,hanja:"異",strokes:"12",def:{en:["different","unusual","strange"],kr:["다를","리"]},hunum:[{kor:"리",def:"다를"}]},{id:1164,hanja:"禅",strokes:"13",def:{en:["meditation","contemplation"],kr:["禪의","略字"]},hunum:[{kor:"선",def:"선"}]},{id:1165,hanja:"僾",strokes:"15",def:{en:["like"],kr:["어렴풋할","애"]},hunum:[{kor:"애",def:"어렴풋할"}]},{id:1166,hanja:"嗌",strokes:"13",def:{en:["the throat","to quarrel","choke"]},hunum:[{kor:"악",def:"웃는 소리"},{kor:"애",def:"목 멜"},{kor:"익",def:"목구멍"}]},{id:1167,hanja:"北",strokes:"5",def:{en:["north","northern","northward"]},hunum:[{kor:"북",def:"북녘"}]},{id:1168,hanja:"錄",strokes:"16",def:{en:["copy","write down","record"],kr:["사실할","려"]},hunum:[{kor:"록",def:"기록할"},{kor:"여",def:"사실할"}]},{id:1169,hanja:"菟",strokes:"14",def:{en:["dodder","creeper"],kr:["고을","이름","도"]},hunum:[{kor:"도",def:"고을 이름"}]},{id:1170,hanja:"璹",strokes:"18",def:{en:[]},hunum:[{kor:"수",def:"옥 그릇"}]},{id:1171,hanja:"急",strokes:"9",def:{en:["quick","quickly","urgent","pressing"],kr:["급할","급"]},hunum:[{kor:"급",def:"급할"}]},{id:1172,hanja:"橡",strokes:"16",def:{en:["chestnut oak","rubber tree","rubber"],kr:["상수리나무","상"]},hunum:[{kor:"상",def:"상수리나무"}]},{id:1173,hanja:"僿",strokes:"15",def:{en:["small","minute","lacking sincerity"],kr:["잘게","부슬","사"]},hunum:[{kor:"사",def:"잘게 부슬"}]},{id:1174,hanja:"顳",strokes:"27",def:{en:["the temporal bone"],kr:["귀밑","뼈","섭"]},hunum:[{kor:"섭",def:"귀밑 뼈"}]},{id:1175,hanja:"磻",strokes:"17",def:{en:["a tributary of the Wei river in Shanxi"],kr:["강이름","번"]},hunum:[{kor:"번",def:"강이름"}]},{id:1176,hanja:"怦",strokes:"8",def:{en:["eager","ardent","impulsive","anxious"],kr:["칼칼할","평"]},hunum:[{kor:"평",def:"맘 급할"}]},{id:1177,hanja:"菠",strokes:"14",def:{en:["spinach and similar greens"],kr:["시금치","파"]},hunum:[{kor:"파",def:"시금치"}]},{id:1178,hanja:"橢",strokes:"16",def:{en:["oval","elliptical","tubular"],kr:["길죽한","그릇","타"]},hunum:[{kor:"타",def:"둥글길죽할"}]},{id:1179,hanja:"嗎",strokes:"13",def:{en:["final interrogative particle"],kr:["꾸짖을","마"]},hunum:[{kor:"마",def:"꾸짖을"}]},{id:1180,hanja:"顴",strokes:"27",def:{en:["cheek bones"],kr:["광대뼈","관"]},hunum:[{kor:"관",def:"광대뼈"}]},{id:1181,hanja:"便",strokes:"9",def:{en:["convenience","ease","expedient"],kr:["똥오줌","변"]},hunum:[{kor:"변",def:"똥오줌"}]},{id:1182,hanja:"鵂",strokes:"17",def:{en:["horned owl","scops chinensis","bird of ill omen"],kr:["수리부엉이","휴"]},hunum:[{kor:"휴",def:"수리부엉이"}]},{id:1183,hanja:"菡",strokes:"14",def:{en:["buds","lotus buds"],kr:["연봉오리","함"]},hunum:[{kor:"함",def:"연봉오리"}]},{id:1184,hanja:"錆",strokes:"16",def:{en:["the color of a mineral"],kr:["자세할","청"]},hunum:[{kor:"청",def:"자세할"}]},{id:1185,hanja:"性",strokes:"8",def:{en:["nature","character","sex"],kr:["색욕","성"]},hunum:[{kor:"성",def:"성품"}]},{id:1186,hanja:"復",strokes:"12",def:{en:["return","repeat","repeatedly"],kr:["다시","부"]},hunum:[{kor:"부",def:"다시"}]},{id:1187,hanja:"嗐",strokes:"13",def:{en:["alas"],kr:["하품할","해"]},hunum:[{kor:"할",def:"감탄사"},{kor:"해",def:"하품할"}]},{id:1188,hanja:"踝",strokes:"15",def:{en:["ankle"],kr:["복사뼈","과"]},hunum:[{kor:"과",def:"복사뼈"}]},{id:1189,hanja:"怨",strokes:"9",def:{en:["hatred","enmity","resentment"],kr:["분낼","원"]},hunum:[{kor:"원",def:"원망할"}]},{id:1190,hanja:"嬾",strokes:"19",def:{en:["lazy","languid","listless"],kr:["게으를","란"]},hunum:[{kor:"란",def:"게으를"}]},{id:1191,hanja:"不",strokes:"4",def:{en:["no","not","un","negative prefix"],kr:["아닐","불"]},hunum:[{kor:"불",def:"아닐"}]},{id:1192,hanja:"嗑",strokes:"13",def:{en:["eat seeds","reproach","loquacious"],kr:["괘","이름","합"]},hunum:[{kor:"합",def:"잔말할"}]},{id:1193,hanja:"鵄",strokes:"17",variant:"鴟",def:{en:["variant of","kite","horned owl","wine cups"],kr:["鴟"]},hunum:[{kor:"치",def:"솔개"}]},{id:1194,hanja:"踞",strokes:"15",def:{en:["crouch","squat","sit","occupy"],kr:["걸터앉을","거"]},hunum:[{kor:"거",def:"걸터앉을"}]},{id:1195,hanja:"璽",strokes:"19",def:{en:["imperial signet","royal signet"],kr:["도장","새"]},hunum:[{kor:"새",def:"도장"}]},{id:1196,hanja:"禊",strokes:"14",def:{en:["semi"],kr:["계제","계"]},hunum:[{kor:"계",def:"계제"}]},{id:1197,hanja:"怩",strokes:"8",def:{en:["shy","timid","bashful","look ashamed"],kr:["부끄러워할","니"]},hunum:[{kor:"니",def:"부끄러워할"}]},{id:1198,hanja:"嬿",strokes:"19",def:{en:["lovely"],kr:["아름다울","연"]},hunum:[{kor:"연",def:"아름다울"}]},{id:1199,hanja:"泌",strokes:"8",def:{en:["to seep out","excrete"],kr:["샘물","흐르는","모양","비"]},hunum:[{kor:"비",def:"샘물 흐르는 모양"}]},{id:1200,hanja:"踟",strokes:"15",def:{en:["hesitate","undecided","embarrassed"],kr:["머뭇거릴","지"]},hunum:[{kor:"지",def:"머뭇거릴"}]},{id:1201,hanja:"禋",strokes:"14",def:{en:["offer sacrifice","sacrifice"],kr:["제사지낼","인"]},hunum:[{kor:"인",def:"제사지낼"}]},{id:1202,hanja:"怪",strokes:"8",def:{en:["strange","unusual","peculiar"],kr:["기이할","괴"]},hunum:[{kor:"괴",def:"기이할"}]},{id:1203,hanja:"數",strokes:"15",def:{en:["number","several","count","fate"],kr:["자주","삭"]},hunum:[{kor:"삭",def:"자주"}]},{id:1204,hanja:"嗒",strokes:"13",def:{en:[],kr:["우두먼할","탑"]},hunum:[{kor:"탑",def:"우두먼할"}]},{id:1205,hanja:"璿",strokes:"18",def:{en:["fine jade"],kr:["아름다운옥","선"]},hunum:[{kor:"선",def:"아름다운옥"}]},{id:1206,hanja:"橦",strokes:"16",def:{en:["tree"],kr:["나무이름","동"]},hunum:[{kor:"동",def:"나무이름"}]},{id:1207,hanja:"索",strokes:"10",def:{en:["large rope","cable","rules","laws"],kr:["동아줄","삭"]},hunum:[{kor:"삭",def:"동아줄"}]},{id:1208,hanja:"禍",strokes:"14",def:{en:["misfortune","calamity","disaster"],kr:["재화","화"]},hunum:[{kor:"화",def:"재화"}]},{id:1209,hanja:"嗓",strokes:"13",def:{en:["voice","throat"],kr:["목구멍","상"]},hunum:[{kor:"상",def:"목구멍"}]},{id:1210,hanja:"參",strokes:"11",def:{en:["take part in","intervene"],kr:["석","삼"]},hunum:[{kor:"삼",def:"석"}]},{id:1211,hanja:"嗔",strokes:"13",def:{en:["be angry at","scold","rebuke"],kr:["성낼","진"]},hunum:[{kor:"진",def:"성낼"}]},{id:1212,hanja:"禎",strokes:"14",def:{en:["lucky","auspicious","good omen"],kr:["상서로울","정"]},hunum:[{kor:"정",def:"상서로울"}]},{id:1213,hanja:"塞",strokes:"13",def:{en:["stop up","block","cork"],kr:["막힐","색"]},hunum:[{kor:"색",def:"막힐"}]},{id:1214,hanja:"踣",strokes:"15",def:{en:["to stumble and fall prone stiff in death"],kr:["넘어질","부"]},hunum:[{kor:"복",def:"넘어질"},{kor:"부",def:"넘어질"}]},{id:1215,hanja:"福",strokes:"14",def:{en:["happiness","good fortune","blessing"],kr:["복","복"]},hunum:[{kor:"복",def:"복"}]},{id:1216,hanja:"嗕",strokes:"13",def:{en:[],kr:["오랑캐","이름","욕"]},hunum:[{kor:"욕",def:"오랑캐 이름"}]},{id:1217,hanja:"省",strokes:"9",def:{en:["province","save","economize"],kr:["덜","생"]},hunum:[{kor:"생",def:"덜"}]},{id:1218,hanja:"怯",strokes:"8",def:{en:["lacking in courage","afraid"],kr:["으를","겁"]},hunum:[{kor:"겁",def:"무서워할"}]},{id:1219,hanja:"葉",strokes:"15",def:{en:["leaf","petal","page of book","period"],kr:["고을이름","섭"]},hunum:[{kor:"섭",def:"고을이름"}]},{id:1220,hanja:"橫",strokes:"16",def:{en:["across","horizontal","lateral"],kr:["가로","횡"]},hunum:[{kor:"횡",def:"가로"}]},{id:1221,hanja:"錏",strokes:"16",def:{en:["soft steel","ammonium"],kr:["투구의","목가림","아"]},hunum:[{kor:"아",def:"투구의 목가림"}]},{id:1222,hanja:"菩",strokes:"14",def:{en:["herb","aromatic plant"],kr:["보살","보"]},hunum:[{kor:"보",def:"보살"}]},{id:1223,hanja:"禑",strokes:"14",def:{en:[]},hunum:[{kor:"우",def:"복"}]},{id:1224,hanja:"說",strokes:"14",def:{en:["speak","say","talk","scold","upbraid"],kr:["쉴","세"]},hunum:[{kor:"세",def:"달랠"}]},{id:1225,hanja:"錐",strokes:"16",def:{en:["gimlet","awl","drill","auger","bore"],kr:["송곳","추"]},hunum:[{kor:"추",def:"송곳"}]},{id:1226,hanja:"怱",strokes:"9",def:{en:["hastily","in haste","hurriedly"],kr:["悤의","俗字"]},hunum:[{kor:"총",def:"바쁠"}]},{id:1227,hanja:"殺",strokes:"11",def:{en:["kill","slaughter","murder","hurt"],kr:["빠를","쇄"]},hunum:[{kor:"쇄",def:"내릴"}]},{id:1228,hanja:"菫",strokes:"14",def:{en:["celery","aconite"],kr:["오랑캐","꽃","근"]},hunum:[{kor:"근",def:"오랑캐 꽃"}]},{id:1229,hanja:"嗙",strokes:"13",def:{en:["boast"],kr:["웃을","방"]},hunum:[{kor:"방",def:"웃을"}]},{id:1230,hanja:"辰",strokes:"7",def:{en:["early morning"],kr:["날","신"]},hunum:[{kor:"신",def:"날"}]},{id:1231,hanja:"怳",strokes:"8",def:{en:["wild","mad","flurried"],kr:["멍할","황"]},hunum:[{kor:"황",def:"멍할"}]},{id:1232,hanja:"禔",strokes:"14",def:{en:["happiness","peace","good fortune"],kr:["복","제"]},hunum:[{kor:"시",def:"복"},{kor:"제",def:"복"}]},{id:1233,hanja:"攀",strokes:"19",def:{en:["climb","pull","hang on to"],kr:["더위잡을","반"]},hunum:[{kor:"반",def:"더위잡을"}]},{id:1234,hanja:"嗚",strokes:"13",def:{en:["sound of crying","sobbing"],kr:["탄식할","오"]},hunum:[{kor:"오",def:"탄식할"}]},{id:1235,hanja:"沈",strokes:"7",def:{en:["sink","submerge","addicted to","name"],kr:["성","심"]},hunum:[{kor:"심",def:"성"}]},{id:1236,hanja:"踩",strokes:"15",def:{en:["step on"],kr:["뛸","채"]},hunum:[{kor:"채",def:"뛸"}]},{id:1237,hanja:"嗛",strokes:"13",def:{en:["pouch","hold","content"],kr:["입에","밥","물고","있을","겸"]},hunum:[{kor:"겸",def:"부족히 여길"}]},{id:1238,hanja:"拾",strokes:"9",def:{en:["pick up","collect","tidy up","ten"],kr:["十의","갖은자"]},hunum:[{kor:"십",def:"十의 갖은"}]},{id:1239,hanja:"踪",strokes:"15",def:{en:["footprints","traces","tracks"],kr:["자취","종"]},hunum:[{kor:"종",def:"자취"}]},{id:1240,hanja:"攂",strokes:"18",def:{en:["to beat a drum"],kr:["攏의","本字"]},hunum:[{kor:"뢰",def:"갈"}]},{id:1241,hanja:"嗜",strokes:"13",def:{en:["be fond of","have weakness for"],kr:["즐길","기"]},hunum:[{kor:"기",def:"즐길"}]},{id:1242,hanja:"若",strokes:"11",def:{en:["if","supposing","assuming","similar"],kr:["지혜","범어의","음역","야"]},hunum:[{kor:"야",def:"땅이름"}]},{id:1243,hanja:"華",strokes:"14",def:{en:["flowery","illustrious","Chinese"],kr:["꽃","화"]},hunum:[{kor:"화",def:"꽃"}]},{id:1244,hanja:"錕",strokes:"16",def:{en:["ancient treasured sword"],kr:["붉은","쇠","곤"]},hunum:[{kor:"곤",def:"붉은 쇠"}]},{id:1245,hanja:"嗝",strokes:"13",def:{en:["cackling of fowls to gag","to vomit"],kr:["꿩","울","격"]},hunum:[{kor:"격",def:"딸꾹질할"}]},{id:1246,hanja:"掠",strokes:"11",def:{en:["rob","ransack","plunder","pass by"],kr:["노략질할","약"]},hunum:[{kor:"약",def:"노략질할"}]},{id:1247,hanja:"攄",strokes:"18",def:{en:["spread","disperse","vent","set forth"],kr:["비길","터"]},hunum:[{kor:"터",def:"펼칠"}]},{id:1248,hanja:"鵑",strokes:"18",def:{en:["cuckoo"],kr:["뻐꾹새","견"]},hunum:[{kor:"견",def:"접동새"}]},{id:1249,hanja:"菰",strokes:"14",def:{en:["wild rice","zizania latifolia"],kr:["향초","고"]},hunum:[{kor:"고",def:"향초"}]},{id:1250,hanja:"嗞",strokes:"13",def:{en:["to consult about","to plan","to report in writing to an equal","a despatch"],kr:["탄식할","자"]},hunum:[{kor:"자",def:"탄식할"}]},{id:1251,hanja:"嗟",strokes:"13",def:{en:["sigh","alas"],kr:["탄식할","차"]},hunum:[{kor:"차",def:"탄식할"}]},{id:1252,hanja:"菱",strokes:"14",def:{en:["water","water caltrop"],kr:["蔆과","同字"]},hunum:[{kor:"릉",def:"마름"}]},{id:1253,hanja:"略",strokes:"11",def:{en:["approximately","roughly","outline"],kr:["잔꾀","약"]},hunum:[{kor:"약",def:"간략할"}]},{id:1254,hanja:"錘",strokes:"16",def:{en:["balance weight on scale","hammer"],kr:["저울","추"]},hunum:[{kor:"추",def:"저울눈"}]},{id:1255,hanja:"鵓",strokes:"18",def:{en:["species of pigeon"],kr:["집비둘기","발"]},hunum:[{kor:"발",def:"집비둘기"}]},{id:1256,hanja:"菲",strokes:"14",def:{en:["fragrant","luxuriant","the Philippines"],kr:["엷을","비"]},hunum:[{kor:"비",def:"엷을"}]},{id:1257,hanja:"橴",strokes:"15",def:{en:["place name"],kr:["땅이름","자"]},hunum:[{kor:"자",def:"땅이름"}]},{id:1258,hanja:"潁",strokes:"15",def:{en:["river in Anhui"],kr:["성씨","영"]},hunum:[{kor:"영",def:"물 이름"}]},{id:1259,hanja:"嗠",strokes:"13",def:{en:[]},hunum:[{kor:"락",def:"진한 유즙"}]},{id:1260,hanja:"亮",strokes:"9",def:{en:["bright","brilliant","radiant","light"],kr:["임금의","상중","량"]},hunum:[{kor:"양",def:"밝을"}]},{id:1261,hanja:"攇",strokes:"19",def:{en:[],kr:["물건","맬","헌"]},hunum:[{kor:"헌",def:"비길"}]},{id:1262,hanja:"錙",strokes:"16",def:{en:["an ancient unit of weight"],kr:["조금","치"]},hunum:[{kor:"치",def:"저울눈"}]},{id:1263,hanja:"鵔",strokes:"18",def:{en:[],kr:["금계","준"]},hunum:[{kor:"준",def:"금계"}]},{id:1264,hanja:"裀",strokes:"12",def:{en:["mat","coverlet","underwear"],kr:["요","인"]},hunum:[{kor:"인",def:"요"}]},{id:1265,hanja:"橵",strokes:"16",def:{en:["wood placed under roof tiles"],kr:["산자","산"]},hunum:[{kor:"산",def:"산자"}]},{id:1266,hanja:"嗡",strokes:"13",def:{en:["sound of flying bees","airplanes"],kr:["벌레소리","옹"]},hunum:[{kor:"옹",def:"소 울음소리"}]},{id:1267,hanja:"兩",strokes:"8",def:{en:["two","both","pair","couple","ounce"],kr:["두","량"]},hunum:[{kor:"양",def:"두"}]},{id:1268,hanja:"錚",strokes:"16",def:{en:["clanging sound","small gong"],kr:["징","쟁"]},hunum:[{kor:"쟁",def:"쇳소리 쟁그렁거릴"}]},{id:1269,hanja:"裁",strokes:"12",def:{en:["cut out","decrease"],kr:["결단할","재"]},hunum:[{kor:"재",def:"마름질할"}]},{id:1270,hanja:"菴",strokes:"14",def:{en:["small Buddhist monastery"],kr:["암자","암"]},hunum:[{kor:"암",def:"암자"}]},{id:1271,hanja:"嗢",strokes:"13",def:{en:[],kr:["목","멜","올"]},hunum:[{kor:"올",def:"목 멜"}]},{id:1272,hanja:"凉",strokes:"10",def:{en:["cool","cold","disheartened"],kr:["서늘할","량"]},hunum:[{kor:"양",def:"서늘할"}]},{id:1273,hanja:"禝",strokes:"15",def:{en:[],kr:["사람","이름","직"]},hunum:[{kor:"직",def:"사람 이름"}]},{id:1274,hanja:"踰",strokes:"16",def:{en:["exceed","transgress","cross over"],kr:["넘을","유"]},hunum:[{kor:"유",def:"넘을"}]},{id:1275,hanja:"裂",strokes:"12",def:{en:["split","crack","break open","rend"],kr:["찢을","렬"]},hunum:[{kor:"렬",def:"찢을"}]},{id:1276,hanja:"嗣",strokes:"13",def:{en:["to connect","inherit","descendants","heirs"],kr:["이을","사"]},hunum:[{kor:"사",def:"이을"}]},{id:1277,hanja:"梁",strokes:"11",def:{en:["bridge","beam","rafters","surname"],kr:["다리","량"]},hunum:[{kor:"양",def:"들보"}]},{id:1278,hanja:"踱",strokes:"16",def:{en:["stroll","pace","walk slowly"],kr:["아금막기할","탁"]},hunum:[{kor:"탁",def:"맨발로 걸을"}]},{id:1279,hanja:"嗤",strokes:"13",def:{en:["laugh at","ridicule","sneer","snort"],kr:["냉소","치"]},hunum:[{kor:"치",def:"비웃을"}]},{id:1280,hanja:"菶",strokes:"14",def:{en:["species of water plant","flower"],kr:["풀","무성할","봉"]},hunum:[{kor:"봉",def:"풀 무성할"}]},{id:1281,hanja:"攊",strokes:"19",def:{en:[]},hunum:[{kor:"력",def:"칠"},{kor:"약",def:"칠"},{kor:"역",def:"칠"}]},{id:1282,hanja:"糧",strokes:"18",def:{en:["food","grain","provisions"],kr:["양식","량"]},hunum:[{kor:"양",def:"양식"}]},{id:1283,hanja:"良",strokes:"7",def:{en:["good","virtuous","respectable"],kr:["남편","량"]},hunum:[{kor:"양",def:"어질"}]},{id:1284,hanja:"装",strokes:"12",def:{en:["dress","clothes","attire","fill"],kr:["裝의","俗字"]},hunum:[{kor:"장",def:"차려 입을"}]},{id:1285,hanja:"錞",strokes:"16",def:{en:["instrument"],kr:["사발종","순"]},hunum:[{kor:"대",def:"창고달"},{kor:"순",def:"사발종"}]},{id:1286,hanja:"怾",strokes:"8",def:{en:["mountain name"],kr:["산","이름","기"]},hunum:[{kor:"기",def:"산 이름"}]},{id:1287,hanja:"諒",strokes:"15",def:{en:["excuse","forgive","guess","presume"],kr:["헤아릴","량"]},hunum:[{kor:"양",def:"헤아릴"}]},{id:1288,hanja:"菹",strokes:"14",def:{en:["salted or pickled vegetables"],kr:["푸서리","저"]},hunum:[{kor:"저",def:"김치"}]},{id:1289,hanja:"錟",strokes:"16",def:{en:["long spear"],kr:["긴","창","담"]},hunum:[{kor:"담",def:"긴 창"}]},{id:1290,hanja:"踴",strokes:"16",def:{en:["leap","jump"],kr:["뛸","용"]},hunum:[{kor:"용",def:"뛸"}]},{id:1291,hanja:"嗧",strokes:"13",def:{en:[],kr:["갤런","륜"]},hunum:[{kor:"륜",def:"갤런"}]},{id:1292,hanja:"量",strokes:"12",def:{en:["measure","quantity","capacity"],kr:["용량","량"]},hunum:[{kor:"양",def:"헤아릴"}]},{id:1293,hanja:"踵",strokes:"16",def:{en:["heel","follow","visit","call on"],kr:["발꿈치","종"]},hunum:[{kor:"종",def:"발꿈치"}]},{id:1294,hanja:"錠",strokes:"16",def:{en:["spindle","slab","cake","tablet"],kr:["촛대","정"]},hunum:[{kor:"정",def:"촛대"}]},{id:1295,hanja:"勵",strokes:"17",def:{en:["strive","encourage"],kr:["가다듬을","려"]},hunum:[{kor:"여",def:"힘쓸"}]},{id:1296,hanja:"鵜",strokes:"18",def:{en:["pelican"],kr:["접동새","제"]},hunum:[{kor:"제",def:"접동새"}]},{id:1297,hanja:"踶",strokes:"16",def:{en:["paw"],kr:["찰","제"]},hunum:[{kor:"제",def:"찰"}]},{id:1298,hanja:"錡",strokes:"16",def:{en:["a kind of pen","a kind of chisel"],kr:["휘뚝거릴","의"]},hunum:[{kor:"기",def:"솥"},{kor:"의",def:"세발 가마"}]},{id:1299,hanja:"嗩",strokes:"13",def:{en:["flute"],kr:["뿔나팔","쇄"]},hunum:[{kor:"쇄",def:"뿔나팔"}]},{id:1300,hanja:"錢",strokes:"16",def:{en:["money","currency","coins"],kr:["가래","전"]},hunum:[{kor:"전",def:"돈"}]},{id:1301,hanja:"鵝",strokes:"18",def:{en:["goose"],kr:["거위","아"]},hunum:[{kor:"아",def:"거위"}]},{id:1302,hanja:"攏",strokes:"19",def:{en:["collect","bring together"],kr:["누를","롱"]},hunum:[{kor:"롱",def:"누를"}]},{id:1303,hanja:"鵞",strokes:"18",def:{en:["goose"],kr:["鵝와","同字"]},hunum:[{kor:"아",def:"거위"}]},{id:1304,hanja:"菽",strokes:"14",def:{en:["beans and peas","collectively"]},hunum:[{kor:"숙",def:"콩"}]},{id:1305,hanja:"裊",strokes:"13",def:{en:["curling upwards","wavering gently"],kr:["끄을","뇨"]},hunum:[{kor:"뇨",def:"끄을"}]},{id:1306,hanja:"橿",strokes:"17",def:{en:["a kind of oak"],kr:["억셀","강"]},hunum:[{kor:"강",def:"참죽나무"}]},{id:1307,hanja:"錣",strokes:"16",def:{en:["armor neckplates"],kr:["물미","철"]},hunum:[{kor:"철",def:"물미"}]},{id:1308,hanja:"踹",strokes:"16",def:{en:["trample","tread on","kick","to crush"],kr:["발꿈치","단"]},hunum:[{kor:"단",def:"발꿈치"}]},{id:1309,hanja:"嗭",strokes:"13",def:{en:["place name"],kr:["땅","이름","짓"]},hunum:[{kor:"짓",def:"땅 이름"}]},{id:1310,hanja:"錤",strokes:"16",def:{en:["hoe"],kr:["호미","기"]},hunum:[{kor:"기",def:"호미"}]},{id:1311,hanja:"鵠",strokes:"18",def:{en:["target"],kr:["고니","혹"]},hunum:[{kor:"곡",def:"고니"},{kor:"혹",def:"고니"}]},{id:1312,hanja:"禦",strokes:"16",def:{en:["defend","resist","hold out against"],kr:["그칠","어"]},hunum:[{kor:"어",def:"막을"}]},{id:1313,hanja:"禧",strokes:"17",def:{en:["happiness","congratulations"],kr:["복","희"]},hunum:[{kor:"희",def:"복"}]},{id:1314,hanja:"鵡",strokes:"18",def:{en:["species of parrot"],kr:["앵무새","무"]},hunum:[{kor:"무",def:"앵무새"}]},{id:1315,hanja:"裍",strokes:"13",def:{en:["a border or band on the edge of a dress"],kr:["걷어","올릴","곤"]},hunum:[{kor:"곤",def:"걷어 올릴"}]},{id:1316,hanja:"潏",strokes:"15",def:{en:["fareshare reclaimed from river"],kr:["물","흐를","율"]},hunum:[{kor:"율",def:"물 흐를"}]},{id:1317,hanja:"傀",strokes:"12",def:{en:["great","gigantic","puppet"],kr:["클","괴"]},hunum:[{kor:"괴",def:"클"}]},{id:1318,hanja:"錦",strokes:"16",def:{en:["brocade","tapestry","embroidered"],kr:["비단","금"]},hunum:[{kor:"금",def:"비단"}]},{id:1319,hanja:"禨",strokes:"17",def:{en:["pray for good fortune"],kr:["조짐","기"]},hunum:[{kor:"기",def:"조짐"}]},{id:1320,hanja:"攔",strokes:"20",def:{en:["obstruct","impede","bar","hinder"],kr:["막을","란"]},hunum:[{kor:"란",def:"막을"}]},{id:1321,hanja:"錧",strokes:"16",def:{en:[],kr:["비녀장","관"]},hunum:[{kor:"관",def:"비녀장"}]},{id:1322,hanja:"踽",strokes:"16",def:{en:["to walk alone","self"],kr:["타달거릴","우"]},hunum:[{kor:"우",def:"타달거릴"}]},{id:1323,hanja:"裏",strokes:"13",def:{en:["inside","interior","within"],kr:["속","리"]},hunum:[{kor:"리",def:"속"}]},{id:1324,hanja:"潑",strokes:"15",def:{en:["pour","splash","water","sprinkle","violent","malignant"],kr:["뿌릴","발"]},hunum:[{kor:"발",def:"뿌릴"}]},{id:1325,hanja:"錨",strokes:"17",def:{en:["anchor"],kr:["닻","묘"]},hunum:[{kor:"묘",def:"닻"}]},{id:1326,hanja:"禪",strokes:"17",def:{en:["meditation","contemplation","to level ground for altar","abdicate"],kr:["봉선","선"]},hunum:[{kor:"선",def:"봉선"}]},{id:1327,hanja:"傃",strokes:"12",def:{en:[],kr:["떳떳할","소"]},hunum:[{kor:"소",def:"향할"}]},{id:1328,hanja:"禫",strokes:"17",def:{en:["sacrifice offered at the end of the three years"],kr:["담제","담"]},hunum:[{kor:"담",def:"담제"}]},{id:1329,hanja:"錪",strokes:"16",def:{en:[],kr:["쇠","전"]},hunum:[{kor:"전",def:"솥"}]},{id:1330,hanja:"裒",strokes:"13",def:{en:["collect","gather","assemble","praise"],kr:["모을","부"]},hunum:[{kor:"부",def:"모을"}]},{id:1331,hanja:"攘",strokes:"20",def:{en:["seize","take by force","repel"],kr:["빼앗을","양"]},hunum:[{kor:"양",def:"물리칠"}]},{id:1332,hanja:"潔",strokes:"15",def:{en:["clean","purify","pure"],kr:["조촐할","결"]},hunum:[{kor:"결",def:"맑을"}]},{id:1333,hanja:"攙",strokes:"20",def:{en:["to give a helping hand","to support","hold up"],kr:["찌를","참"]},hunum:[{kor:"참",def:"찌를"}]},{id:1334,hanja:"傅",strokes:"12",def:{en:["tutor","teacher","assist","surname"],kr:["스승","부"]},hunum:[{kor:"부",def:"스승"}]},{id:1335,hanja:"嫁",strokes:"13",def:{en:["to marry","give a daughter in marriage"],kr:["시집갈","가"]},hunum:[{kor:"가",def:"시집갈"}]},{id:1336,hanja:"錫",strokes:"16",def:{en:["tin","stannum","bestow","confer"],kr:["주석","석"]},hunum:[{kor:"석",def:"주석"}]},{id:1337,hanja:"嫂",strokes:"13",def:{en:["sister","elder brother"],kr:["형수","수"]},hunum:[{kor:"수",def:"형수"}]},{id:1338,hanja:"錬",strokes:"16",def:{en:["smelt metals"]},hunum:[{kor:"동",def:"보습날"},{kor:"련",def:"불릴"}]},{id:1339,hanja:"裔",strokes:"13",def:{en:["progeny","descendants","posterity"],kr:["후손","예"]},hunum:[{kor:"예",def:"옷 뒷자락"}]},{id:1340,hanja:"禮",strokes:"18",def:{en:["social custom","manners","courtesy","rites"],kr:["예도","례"]},hunum:[{kor:"례",def:"예도"}]},{id:1341,hanja:"瑀",strokes:"13",def:{en:["stone resembling jade","agate"],kr:["옥돌","우"]},hunum:[{kor:"우",def:"옥돌"}]},{id:1342,hanja:"鵩",strokes:"19",def:{en:["owl","buzzard","Otus scops"],kr:["새","이름","복"]},hunum:[{kor:"복",def:"새 이름"}]},{id:1343,hanja:"裕",strokes:"13",def:{en:["abundant","rich","plentiful"],kr:["너그러울","유"]},hunum:[{kor:"유",def:"넉넉할"}]},{id:1344,hanja:"瑁",strokes:"13",def:{en:["fine piece of jade"],kr:["서옥","모"]},hunum:[{kor:"모",def:"서옥"}]},{id:1345,hanja:"嗶",strokes:"14",def:{en:["used in transliterations"],kr:["잔말할","필"]},hunum:[{kor:"필",def:"울"}]},{id:1346,hanja:"潗",strokes:"15",def:{en:[],kr:["샘솟을","집"]},hunum:[{kor:"집",def:"샘솟을"}]},{id:1347,hanja:"嫄",strokes:"13",def:{en:["an ancient emperor","Qiang Yuan","consort to Gu"],kr:["여자이름","원"]},hunum:[{kor:"원",def:"여자이름"}]},{id:1348,hanja:"錮",strokes:"16",def:{en:["run metal into cracks","confine"],kr:["땜질할","고"]},hunum:[{kor:"고",def:"땜질할"}]},{id:1349,hanja:"禰",strokes:"19",def:{en:["one"],kr:["아비사당","니"]},hunum:[{kor:"니",def:"아비사당"}]},{id:1350,hanja:"瑃",strokes:"13",def:{en:[]},hunum:[{kor:"춘",def:"옥 이름"}]},{id:1351,hanja:"錯",strokes:"16",def:{en:["error","blunder","mistake","wrong"],kr:["섞일","착"]},hunum:[{kor:"조",def:"둘"},{kor:"착",def:"섞일"}]},{id:1352,hanja:"禱",strokes:"19",def:{en:["pray","entreat","beg","plead","prayer"],kr:["빌","도"]},hunum:[{kor:"도",def:"빌"}]},{id:1353,hanja:"攝",strokes:"21",def:{en:["take in","absorb","act as deputy","administer","assist"],kr:["고요할","녑"]},hunum:[{kor:"섭",def:"몰아 잡을"},{kor:"엽",def:"가질"}]},{id:1354,hanja:"潘",strokes:"15",def:{en:["surname","water in which rice has been rinsed","a river that flows into the Han"],kr:["넘칠","번"]},hunum:[{kor:"반",def:"뜨물"},{kor:"번",def:"넘칠"}]},{id:1355,hanja:"嗷",strokes:"14",def:{en:["loud clamor","sound of wailing"],kr:["여럿이","걱정할","오"]},hunum:[{kor:"오",def:"여럿이 걱정할"}]},{id:1356,hanja:"裘",strokes:"13",def:{en:["fur garments","surname"],kr:["갓옷","구"]},hunum:[{kor:"구",def:"갓옷"}]},{id:1357,hanja:"瑄",strokes:"13",def:{en:["a ornamental piece of jade several inches across with a hole in the center"],kr:["도리옥","선"]},hunum:[{kor:"선",def:"도리옥"}]},{id:1358,hanja:"潙",strokes:"15",def:{en:["river in Shanxi"],kr:["물이름","규"]},hunum:[{kor:"규",def:"물이름"}]},{id:1359,hanja:"嗸",strokes:"14",def:{en:["same as","noisy"],kr:["嗷"]},hunum:[{kor:"오",def:"슬픈 소리"}]},{id:1360,hanja:"瑅",strokes:"13",def:{en:[],kr:["제당","제"]},hunum:[{kor:"제",def:"제당"}]},{id:1361,hanja:"傋",strokes:"12",def:{en:[],kr:["아첨","아니할","강"]},hunum:[{kor:"강",def:"아첨 아니할"}]},{id:1362,hanja:"鵬",strokes:"19",def:{en:["fabulous bird of enormous size"],kr:["대붕새","붕"]},hunum:[{kor:"붕",def:"대붕새"}]},{id:1363,hanja:"裙",strokes:"13",def:{en:["skirt","apron","petticoat"],kr:["치마","군"]},hunum:[{kor:"군",def:"치마"}]},{id:1364,hanja:"禳",strokes:"22",def:{en:["pray or sacrifice","exorcise"],kr:["푸닥거리할","양"]},hunum:[{kor:"양",def:"푸닥거리할"}]},{id:1365,hanja:"潚",strokes:"15",def:{en:["gay","deep"]},hunum:[{kor:"숙",def:"빠를"},{kor:"축",def:"깊고 맑을"}]},{id:1366,hanja:"嗹",strokes:"14",def:{en:["chatter"],kr:["길게","말할","련"]},hunum:[{kor:"련",def:"길게 말할"}]},{id:1367,hanja:"纁",strokes:"20",def:{en:["shade of red","light red"],kr:["분홍빛","훈"]},hunum:[{kor:"훈",def:"분홍빛"}]},{id:1368,hanja:"嗺",strokes:"14",def:{en:[],kr:["급히","마실","최"]},hunum:[{kor:"최",def:"입 옴칠"}]},{id:1369,hanja:"潛",strokes:"15",def:{en:["hide","hidden","secret","latent"],kr:["잠길","잠"]},hunum:[{kor:"잠",def:"잠길"}]},{id:1370,hanja:"傌",strokes:"12",def:{en:["to curse","to revile","to abuse","to scold"],kr:["욕할","마"]},hunum:[{kor:"마",def:"욕할"}]},{id:1371,hanja:"録",strokes:"16",def:{en:["copy"],kr:["録와","同字"]},hunum:[{kor:"록",def:"희학질할"},{kor:"여",def:"사실할"}]},{id:1372,hanja:"禴",strokes:"22",def:{en:["sacrifice"],kr:["종묘의","여름제사","약"]},hunum:[{kor:"약",def:"종묘의 여름제사"}]},{id:1373,hanja:"瑆",strokes:"13",def:{en:[]},hunum:[{kor:"성",def:"옥빛"}]},{id:1374,hanja:"頀",strokes:"23",def:{en:["music"],kr:["지킬","호"]},hunum:[{kor:"호",def:"구할"}]},{id:1375,hanja:"纂",strokes:"20",def:{en:["edit","compile","topknot","chignon"],kr:["모을","찬"]},hunum:[{kor:"찬",def:"모을"}]},{id:1376,hanja:"嗻",strokes:"14",def:{en:["to screen"],kr:["말","많을","차"]},hunum:[{kor:"차",def:"말 많을"}]},{id:1377,hanja:"潜",strokes:"15",def:{en:["hide","hidden","secret","latent"],kr:["潛의","俗字"]},hunum:[{kor:"잠",def:"잠길"}]},{id:1378,hanja:"傍",strokes:"12",def:{en:["by side of","beside","near","close"],kr:["마지못할","팽"]},hunum:[{kor:"방",def:"곁"},{kor:"팽",def:"마지못할"}]},{id:1379,hanja:"嫈",strokes:"13",def:{en:["lady"],kr:["예쁠","앵"]},hunum:[{kor:"앵",def:"예쁠"}]},{id:1380,hanja:"潝",strokes:"15",def:{en:["agree"],kr:["빨리","흐르는","소리","흡"]},hunum:[{kor:"흡",def:"빨리 흐르는 소리"}]},{id:1381,hanja:"頁",strokes:"9",def:{en:["page","sheet","leaf","rad"],kr:["페이지","혈"]},hunum:[{kor:"혈",def:"머리"}]},{id:1382,hanja:"鵯",strokes:"19",def:{en:["Pycnonotus species"],kr:["갈가마귀","필"]},hunum:[{kor:"필",def:"갈가마귀"}]},{id:1383,hanja:"攢",strokes:"22",def:{en:["save","hoard"],kr:["모일","찬"]},hunum:[{kor:"찬",def:"모일"}]},{id:1384,hanja:"嫉",strokes:"13",def:{en:["jealousy","be jealous of"],kr:["미워할","질"]},hunum:[{kor:"질",def:"미워할"}]},{id:1385,hanja:"傎",strokes:"12",def:{en:["topple"],kr:["엎드러질","전"]},hunum:[{kor:"전",def:"엎드러질"}]},{id:1386,hanja:"嗼",strokes:"14",def:{en:[],kr:["고요할","막"]},hunum:[{kor:"막",def:"고요할"}]},{id:1387,hanja:"鵰",strokes:"19",def:{en:["eagle","vulture","Aquila species"],kr:["수리","조"]},hunum:[{kor:"조",def:"수리"}]},{id:1388,hanja:"頂",strokes:"11",def:{en:["top","peak","carry on head","very"],kr:["관","꼭대기","치장하는","장식","정"]},hunum:[{kor:"정",def:"이마"}]},{id:1389,hanja:"補",strokes:"13",def:{en:["mend","patch","fix","repair","restore"],kr:["기울","보"]},hunum:[{kor:"보",def:"기울"}]},{id:1390,hanja:"攣",strokes:"22",def:{en:["tangled","entwined","crooked"],kr:["걸릴","련"]},hunum:[{kor:"련",def:"걸릴"}]},{id:1391,hanja:"潞",strokes:"15",def:{en:["river in northern china"],kr:["강","이름","로"]},hunum:[{kor:"로",def:"강 이름"}]},{id:1392,hanja:"嗽",strokes:"14",def:{en:["cough","gargle","clear throat"],kr:["입가실","수"]},hunum:[{kor:"수",def:"기침할"}]},{id:1393,hanja:"攤",strokes:"22",def:{en:["spread out","open","apportion"],kr:["펼칠","탄"]},hunum:[{kor:"탄",def:"열"}]},{id:1394,hanja:"嗾",strokes:"14",def:{en:["to set a dog on","incite","instigate"],kr:["부추길","주"]},hunum:[{kor:"주",def:"부추길"}]},{id:1395,hanja:"裝",strokes:"13",def:{en:["dress","clothes","decorate","fill"],kr:["차려","입을","장"]},hunum:[{kor:"장",def:"차려 입을"}]},{id:1396,hanja:"嫋",strokes:"13",def:{en:["slender and delicate"],kr:["가냘플","약"]},hunum:[{kor:"뇨",def:"날릴"},{kor:"약",def:"가냘플"}]},{id:1397,hanja:"頃",strokes:"11",def:{en:["a moment","a measure of area equal to","to lean"],kr:["반걸음","규"]},hunum:[{kor:"경",def:"밭 넓이 단위"},{kor:"규",def:"반걸음"}]},{id:1398,hanja:"潟",strokes:"15",def:{en:["land impregnated with salt from the tide"],kr:["개펄","석"]},hunum:[{kor:"석",def:"개펄"}]},{id:1399,hanja:"嫌",strokes:"13",def:{en:["hate","detest","suspect","criticize"],kr:["유쾌하지","않을","혐"]},hunum:[{kor:"혐",def:"싫어할"}]},{id:1400,hanja:"嗿",strokes:"14",def:{en:["gobble"],kr:["여럿이","먹는","소리","탐"]},hunum:[{kor:"탐",def:"여럿이 먹는 소리"}]},{id:1401,hanja:"傑",strokes:"12",def:{en:["hero","outstanding","remarkable"],kr:["떡잎","걸"]},hunum:[{kor:"걸",def:"호걸"}]},{id:1402,hanja:"鵲",strokes:"19",def:{en:["magpie","Pica species"],kr:["까치","작"]},hunum:[{kor:"작",def:"까치"}]},{id:1403,hanja:"禹",strokes:"9",def:{en:["legendary hsia dynasty founder"],kr:["느릴","우"]},hunum:[{kor:"우",def:"하우씨"}]},{id:1404,hanja:"傒",strokes:"12",def:{en:["personal name","servant"],kr:["묶을","혜"]},hunum:[{kor:"혜",def:"묶을"}]},{id:1405,hanja:"項",strokes:"12",def:{en:["neck","nape of neck","sum","funds"],kr:["항목","항"]},hunum:[{kor:"항",def:"목덜미"}]},{id:1406,hanja:"裟",strokes:"13",def:{en:["a cassock or robe of a monk"],kr:["가사","사"]},hunum:[{kor:"사",def:"가사"}]},{id:1407,hanja:"禺",strokes:"9",def:{en:["district","mountain in Zhejiang"],kr:["땅","이름","옹"]},hunum:[{kor:"옹",def:"땅 이름"}]},{id:1408,hanja:"瑋",strokes:"13",def:{en:["type of jade","rare","valuable"],kr:["노리개","위"]},hunum:[{kor:"위",def:"위옥"}]},{id:1409,hanja:"纇",strokes:"21",def:{en:["knot","blemish","flaw","wicked"],kr:["실","마디","뢰"]},hunum:[{kor:"뢰",def:"실 마디"}]},{id:1410,hanja:"潡",strokes:"15",def:{en:[],kr:["큰","물","돈"]},hunum:[{kor:"돈",def:"큰 물"}]},{id:1411,hanja:"纈",strokes:"21",def:{en:["patterned silk","tie knot"],kr:["홀치기염색","힐"]},hunum:[{kor:"힐",def:"홀치기염색"}]},{id:1412,hanja:"潢",strokes:"15",def:{en:["expanse of water","lake","pond"],kr:["웅덩이","황"]},hunum:[{kor:"황",def:"웅덩이"}]},{id:1413,hanja:"傓",strokes:"12",def:{en:[],kr:["매우","성할","선"]},hunum:[{kor:"선",def:"매우 성할"}]},{id:1414,hanja:"順",strokes:"12",def:{en:["obey","submit to","go along with"],kr:["성씨","순"]},hunum:[{kor:"순",def:"좇을"}]},{id:1415,hanja:"离",strokes:"11",def:{en:["rare beast","strange","elegant"],kr:["산신","리"]},hunum:[{kor:"리",def:"산신"}]},{id:1416,hanja:"纉",strokes:"21",def:{en:[],kr:["이을","찬"]},hunum:[{kor:"찬",def:"이을"}]},{id:1417,hanja:"傔",strokes:"12",def:{en:["servant"],kr:["겸종","겸"]},hunum:[{kor:"겸",def:"겸종"}]},{id:1418,hanja:"裡",strokes:"13",def:{en:["inside","interior","within"],kr:["裏와","同字"]},hunum:[{kor:"리",def:"속"}]},{id:1419,hanja:"瑎",strokes:"13",def:{en:[]},hunum:[{kor:"해",def:"검은 옥돌"}]},{id:1420,hanja:"傕",strokes:"12",def:{en:[],kr:["성","각"]},hunum:[{kor:"각",def:"성"}]},{id:1421,hanja:"須",strokes:"12",def:{en:["must","have to","necessary","moment","whiskers"],kr:["기다릴","수"]},hunum:[{kor:"수",def:"수염"}]},{id:1422,hanja:"禽",strokes:"13",def:{en:["birds","fowl","surname","capture"],kr:["날짐승","금"]},hunum:[{kor:"금",def:"날짐승"}]},{id:1423,hanja:"纊",strokes:"21",def:{en:["cotton","silk"],kr:["솜","광"]},hunum:[{kor:"광",def:"솜"}]},{id:1424,hanja:"潤",strokes:"15",def:{en:["soft","moist","sleek","freshen"],kr:["젖을","륜"]},hunum:[{kor:"륜",def:"젖을"}]},{id:1425,hanja:"禾",strokes:"5",def:{en:["grain still on stalk","rice plant"],kr:["벼","화"]},hunum:[{kor:"화",def:"벼"}]},{id:1426,hanja:"傖",strokes:"12",def:{en:["vulgar person","country man"],kr:["천할","창"]},hunum:[{kor:"창",def:"천할"}]},{id:1427,hanja:"鵷",strokes:"19",def:{en:["co"],kr:["원추새","원"]},hunum:[{kor:"원",def:"원추새"}]},{id:1428,hanja:"頉",strokes:"12",def:{en:["cheeks","jaw","chin","rear","nourish"],kr:["기를","이"]},hunum:[{kor:"이",def:"기를"}]},{id:1429,hanja:"攪",strokes:"23",def:{en:["disturb","agitate","stir up"],kr:["어지러울","교"]},hunum:[{kor:"교",def:"어지러울"}]},{id:1430,hanja:"攫",strokes:"23",def:{en:["snatch away","seize","catch with"],kr:["붙잡을","확"]},hunum:[{kor:"확",def:"붙잡을"}]},{id:1431,hanja:"頊",strokes:"13",def:{en:["grieved","anxious"],kr:["별이름","욱"]},hunum:[{kor:"욱",def:"머리 굽실거릴"}]},{id:1432,hanja:"續",strokes:"21",def:{en:["continue","carry on","succeed"],kr:["이을","속"]},hunum:[{kor:"속",def:"이을"}]},{id:1433,hanja:"潦",strokes:"15",def:{en:["to flood","a puddle","without care"],kr:["큰","비","료"]},hunum:[{kor:"료",def:"큰 비"}]},{id:1434,hanja:"傘",strokes:"12",def:{en:["umbrella","parasol","parachute"],kr:["우산","산"]},hunum:[{kor:"산",def:"우산"}]},{id:1435,hanja:"禿",strokes:"7",def:{en:["bald","bare","stripped"],kr:["대머리","독"]},hunum:[{kor:"독",def:"대머리"}]},{id:1436,hanja:"纍",strokes:"21",def:{en:["bind","wind about","link","join"],kr:["갇힐","류"]},hunum:[{kor:"류",def:"갇힐"}]},{id:1437,hanja:"攬",strokes:"24",def:{en:["grasp","take hold of","monopolize"],kr:["잡을","람"]},hunum:[{kor:"람",def:"잡을"}]},{id:1438,hanja:"備",strokes:"12",def:{en:["prepare","ready","perfect"],kr:["깆출","비"]},hunum:[{kor:"비",def:"갖출"}]},{id:1439,hanja:"頌",strokes:"13",def:{en:["laud","acclaim","hymn","ode"],kr:["모양","용"]},hunum:[{kor:"송",def:"기릴"},{kor:"용",def:"얼굴"}]},{id:1440,hanja:"傚",strokes:"12",def:{en:["imitate","mimic"],kr:["본받을","효"]},hunum:[{kor:"효",def:"본받을"}]},{id:1441,hanja:"鵻",strokes:"19",def:{en:["pigeon","turtle","a hawk"],kr:["아롱비둘기","추"]},hunum:[{kor:"추",def:"아롱비둘기"}]},{id:1442,hanja:"纏",strokes:"21",def:{en:["wrap","wind around","tie","bind"],kr:["얽을","전"]},hunum:[{kor:"전",def:"둘릴"}]},{id:1443,hanja:"頍",strokes:"13",def:{en:["to raise one"],kr:["고깔비녀","규"]},hunum:[{kor:"규",def:"고깔비녀"}]},{id:1444,hanja:"嫖",strokes:"14",def:{en:["patronize prostitutes","frequent"],kr:["색에","빠질","표"]},hunum:[{kor:"표",def:"가벼울"}]},{id:1445,hanja:"傛",strokes:"12",def:{en:[],kr:["몸","굽힐","용"]},hunum:[{kor:"용",def:"혁혁할"}]},{id:1446,hanja:"頎",strokes:"13",def:{en:["tall and slim"],kr:["헌걸찰","기"]},hunum:[{kor:"기",def:"헌걸찰"}]},{id:1447,hanja:"裨",strokes:"14",def:{en:["aid","benefit","help","supplement"],kr:["도울","비"]},hunum:[{kor:"비",def:"도울"}]},{id:1448,hanja:"頏",strokes:"13",def:{en:["fly down or downward"],kr:["오르락","내리락할","항"]},hunum:[{kor:"항",def:"목"}]},{id:1449,hanja:"瑕",strokes:"13",def:{en:["flaw in gem","fault","defect"],kr:["티","하"]},hunum:[{kor:"하",def:"티"}]},{id:1450,hanja:"支",strokes:"4",def:{en:["disperse","pay","support","branch"],kr:["가를","지"]},hunum:[{kor:"지",def:"가를"}]},{id:1451,hanja:"傜",strokes:"12",def:{en:["a minority tribe"],kr:["별이름","요"]},hunum:[{kor:"요",def:"부릴"}]},{id:1452,hanja:"嫗",strokes:"14",def:{en:["old woman","hag"],kr:["할미","구"]},hunum:[{kor:"구",def:"할미"}]},{id:1453,hanja:"豈",strokes:"10",def:{en:["how"],kr:["승전악","개"]},hunum:[{kor:"개",def:"승전악"}]},{id:1454,hanja:"鵾",strokes:"19",def:{en:["a bird resembling the crane"],kr:["댓닭","곤"]},hunum:[{kor:"곤",def:"댓닭"}]},{id:1455,hanja:"預",strokes:"13",def:{en:["prepare","arrange","in advance"],kr:["참여할","예"]},hunum:[{kor:"예",def:"미리"}]},{id:1456,hanja:"更",strokes:"7",def:{en:["more","still further","much more"],kr:["다시","갱"]},hunum:[{kor:"갱",def:"다시"}]},{id:1457,hanja:"傝",strokes:"12",def:{en:[],kr:["용렬할","탑"]},hunum:[{kor:"탑",def:"답답할"}]},{id:1458,hanja:"嫙",strokes:"14",def:{en:[],kr:["예쁠","선"]},hunum:[{kor:"선",def:"예쁠"}]},{id:1459,hanja:"頑",strokes:"13",def:{en:["obstinate","stubborn","recalcitrant"],kr:["완악할","완"]},hunum:[{kor:"완",def:"완고할"}]},{id:1460,hanja:"車",strokes:"7",def:{en:["cart","vehicle","carry in cart"],kr:["잇몸","거"]},hunum:[{kor:"거",def:"수레"}]},{id:1461,hanja:"瑗",strokes:"13",def:{en:["large ring of fine jade"],kr:["구멍","큰","둥근","옥","원"]},hunum:[{kor:"원",def:"도리옥"}]},{id:1462,hanja:"潭",strokes:"15",def:{en:["deep pool","lake","deep","profound"],kr:["깊을","담"]},hunum:[{kor:"담",def:"깊을"}]},{id:1463,hanja:"潮",strokes:"15",def:{en:["tide","moist","wet","damp","flow"],kr:["조수","조"]},hunum:[{kor:"조",def:"조수"}]},{id:1464,hanja:"樀",strokes:"15",def:{en:[],kr:["방망이","적"]},hunum:[{kor:"적",def:"추녀"}]},{id:1465,hanja:"傞",strokes:"12",def:{en:["unsteady"],kr:["취하여","춤추는","모양","사"]},hunum:[{kor:"사",def:"취하여 춤추는 모양"}]},{id:1466,hanja:"嫚",strokes:"14",def:{en:["scorn","despise","be rude","affront"],kr:["업신여길","만"]},hunum:[{kor:"만",def:"업신여길"}]},{id:1467,hanja:"頒",strokes:"13",def:{en:["confer","bestow","publish","promulgate"],kr:["큰","머리","분"]},hunum:[{kor:"반",def:"나눌"},{kor:"분",def:"큰 머리"}]},{id:1468,hanja:"賈",strokes:"13",def:{en:["surname","merchant","buy","trade"],kr:["장사","고"]},hunum:[{kor:"고",def:"장사"}]},{id:1469,hanja:"纓",strokes:"23",def:{en:["a chin strap","tassel","to annoy","bother"],kr:["얽힐","영"]},hunum:[{kor:"영",def:"갓끈"}]},{id:1470,hanja:"攲",strokes:"12",def:{en:["up","uneven"],kr:["기울기","기"]},hunum:[{kor:"기",def:"기울기"}]},{id:1471,hanja:"纔",strokes:"23",def:{en:["talent","ability","just","only"],kr:["비롯할","재"]},hunum:[{kor:"재",def:"겨우"}]},{id:1472,hanja:"嫛",strokes:"14",def:{en:["compliant","yielding","easy"],kr:["갓난아이","예"]},hunum:[{kor:"예",def:"유순할"}]},{id:1473,hanja:"頓",strokes:"13",def:{en:["pause","stop","bow","kowtow","arrange"],kr:["조아릴","둔"]},hunum:[{kor:"돈",def:"조아릴"},{kor:"둔",def:"조아릴"}]},{id:1474,hanja:"滑",strokes:"13",def:{en:["slip","slide","slippery","polished"],kr:["어지러울","골"]},hunum:[{kor:"골",def:"어지러울"}]},{id:1475,hanja:"瑙",strokes:"13",def:{en:["agate","cornelian"],kr:["마노","노"]},hunum:[{kor:"노",def:"마노"}]},{id:1476,hanja:"潯",strokes:"15",def:{en:["steep bank by stream","jiujiang"],kr:["물가","심"]},hunum:[{kor:"심",def:"물가"}]},{id:1477,hanja:"瑚",strokes:"13",def:{en:["coral","person of virtue"],kr:["산호","호"]},hunum:[{kor:"호",def:"산호"}]},{id:1478,hanja:"串",strokes:"7",def:{en:["string","relatives","conspire"],kr:["곶","곶"]},hunum:[{kor:"곶",def:"곶"}]},{id:1479,hanja:"潰",strokes:"15",def:{en:["flooding river","militarily defeat"],kr:["흩어질","궤"]},hunum:[{kor:"궤",def:"흩어질"}]},{id:1480,hanja:"裯",strokes:"14",def:{en:["coverlet","bedspread"],kr:["홑이불","주"]},hunum:[{kor:"주",def:"홑이불"}]},{id:1481,hanja:"樂",strokes:"15",def:{en:["happy","glad","enjoyable","music"],kr:["좋아할","요"]},hunum:[{kor:"락",def:"즐길"},{kor:"악",def:"풍류"},{kor:"요",def:"좋아할"}]},{id:1482,hanja:"句",strokes:"5",def:{en:["sentence"],kr:["글귀","귀"]},hunum:[{kor:"귀",def:"글귀"}]},{id:1483,hanja:"瑛",strokes:"13",def:{en:["luster of gem","crystal"],kr:["수정","영"]},hunum:[{kor:"영",def:"옥빛"}]},{id:1484,hanja:"纖",strokes:"23",def:{en:["fine","delicate","minute","graceful"],kr:["가늘","섬"]},hunum:[{kor:"섬",def:"가늘"}]},{id:1485,hanja:"傢",strokes:"12",def:{en:["stubborn","obstinate","intransigent"],kr:["세간","가"]},hunum:[{kor:"가",def:"세간"}]},{id:1486,hanja:"頖",strokes:"14",def:{en:["Zhou dynasty school","disperse","fall apart"],kr:["풀릴","반"]},hunum:[{kor:"반",def:"풀릴"}]},{id:1487,hanja:"龜",strokes:"16",def:{en:["turtle or tortoise","cuckold"],kr:["거북","귀"]},hunum:[{kor:"귀",def:"거북"}]},{id:1488,hanja:"瑜",strokes:"13",def:{en:["flawless gem or jewel"],kr:["아름다운","옥","유"]},hunum:[{kor:"유",def:"아름다운 옥"}]},{id:1489,hanja:"收",strokes:"6",def:{en:["gather together","collect","harvest"],kr:["수레바퀴","수"]},hunum:[{kor:"수",def:"모을"}]},{id:1490,hanja:"瑝",strokes:"13",def:{en:[],kr:["옥","소리","황"]},hunum:[{kor:"황",def:"옥 소리"}]},{id:1491,hanja:"裱",strokes:"14",def:{en:["to mount maps or scrolls to paste"],kr:["목수건","표"]},hunum:[{kor:"표",def:"목수건"}]},{id:1492,hanja:"纘",strokes:"25",def:{en:["continue","carry on","succeed"],kr:["이을","찬"]},hunum:[{kor:"찬",def:"이을"}]},{id:1493,hanja:"龜",strokes:"16",def:{en:["turtle or tortoise","cuckold"],kr:["피부가","틀","균"]},hunum:[{kor:"균",def:"(피부가)틀"}]},{id:1494,hanja:"攷",strokes:"6",def:{en:["examine","test","investigate"],kr:["考의","古字"]},hunum:[{kor:"고",def:"생각할"}]},{id:1495,hanja:"頗",strokes:"14",def:{en:["lean one side","very","rather"],kr:["자못","파"]},hunum:[{kor:"파",def:"비뚤어질"}]},{id:1496,hanja:"樅",strokes:"15",def:{en:["fir tree"],kr:["전나무","종"]},hunum:[{kor:"종",def:"전나무"}]},{id:1497,hanja:"潴",strokes:"15",def:{en:["pond","a pool"],kr:["瀦와","同字"]},hunum:[{kor:"저",def:"웅덩이"}]},{id:1498,hanja:"嫠",strokes:"14",def:{en:["a widow"],kr:["과부","리"]},hunum:[{kor:"리",def:"과부"}]},{id:1499,hanja:"契",strokes:"9",def:{en:["deed","contract","bond","engrave"],kr:["부족","이름","글"]},hunum:[{kor:"글",def:"부족 이름"}]},{id:1500,hanja:"瑞",strokes:"13",def:{en:["felicitous omen","auspicious"],kr:["상서","서"]},hunum:[{kor:"서",def:"상서"}]},{id:1501,hanja:"攸",strokes:"7",def:{en:["distant","far","adverbial prefix"],kr:["대롱거릴","유"]},hunum:[{kor:"유",def:"곳"}]},{id:1502,hanja:"嫡",strokes:"14",def:{en:["legal wife","child of legal wife"],kr:["맏아들","적"]},hunum:[{kor:"적",def:"정실"}]},{id:1503,hanja:"領",strokes:"14",def:{en:["neck","collar","lead","guide"],kr:["옷깃","령"]},hunum:[{kor:"령",def:"옷깃"}]},{id:1504,hanja:"金",strokes:"8",def:{en:["gold","metals in general","money"],kr:["성","금"]},hunum:[{kor:"금",def:"성"}]},{id:1505,hanja:"裳",strokes:"14",def:{en:["clothes","skirt","beautiful"],kr:["치마","상"]},hunum:[{kor:"상",def:"치마"}]},{id:1506,hanja:"莅",strokes:"13",def:{en:["attend","be present","arrive at"],kr:["다다를","리"]},hunum:[{kor:"리",def:"다다를"}]},{id:1507,hanja:"瑟",strokes:"13",def:{en:["large stringed musical instrument","dignified","massive","sound of wind"],kr:["바람소리","슬"]},hunum:[{kor:"슬",def:"비파"}]},{id:1508,hanja:"改",strokes:"7",def:{en:["change","alter","improve","remodel"],kr:["바꿀","개"]},hunum:[{kor:"개",def:"고칠"}]},{id:1509,hanja:"嫢",strokes:"14",def:{en:[],kr:["가는","허리","규"]},hunum:[{kor:"규",def:"가는 허리"}]},{id:1510,hanja:"喇",strokes:"12",def:{en:["horn","bugle","lama","final particle"],kr:["라마교","라"]},hunum:[{kor:"나",def:"나팔"}]},{id:1511,hanja:"裴",strokes:"14",def:{en:["surname","look of a flowing gown"],kr:["옷","치렁치렁할","배"]},hunum:[{kor:"배",def:"옷 치렁치렁할"}]},{id:1512,hanja:"瑠",strokes:"14",def:{en:["precious stone"],kr:["琉와","同字"]},hunum:[{kor:"류",def:"맑은 유리"}]},{id:1513,hanja:"纛",strokes:"25",def:{en:["a banner","a streamer"],kr:["클","깃발","도"]},hunum:[{kor:"도",def:"클 깃발"}]},{id:1514,hanja:"嫣",strokes:"14",def:{en:["charming","fascinating","gay"],kr:["생긋생긋","웃을","언"]},hunum:[{kor:"언",def:"생긋생긋 웃을"}]},{id:1515,hanja:"頚",strokes:"14",def:{en:["neck","throat"],kr:["頸의","俗字"]},hunum:[{kor:"경",def:"목"}]},{id:1516,hanja:"奈",strokes:"8",def:{en:["but","how","bear","stand","endure"],kr:["어찌","나"]},hunum:[{kor:"나",def:"어찌"}]},{id:1517,hanja:"裵",strokes:"14",def:{en:["surname","look of a flowing gown"]},hunum:[{kor:"배",def:"치렁치렁할"}]},{id:1518,hanja:"跂",strokes:"11",def:{en:["creeping","crawling"],kr:["육발","기"]},hunum:[{kor:"기",def:"육발"}]},{id:1519,hanja:"纜",strokes:"27",def:{en:["hawser","heavy","cable"],kr:["닻줄","람"]},hunum:[{kor:"람",def:"닻줄"}]},{id:1520,hanja:"攻",strokes:"7",def:{en:["attack","assault","criticize"],kr:["칠","공"]},hunum:[{kor:"공",def:"칠"}]},{id:1521,hanja:"懶",strokes:"19",def:{en:["lazy","languid","listless"],kr:["게으를","나"]},hunum:[{kor:"나",def:"게으를"}]},{id:1522,hanja:"瑢",strokes:"14",def:{en:[],kr:["패옥소리","용"]},hunum:[{kor:"용",def:"패옥소리"}]},{id:1523,hanja:"嫥",strokes:"14",def:{en:[],kr:["아름다울","전"]},hunum:[{kor:"전",def:"아름다울"}]},{id:1524,hanja:"樊",strokes:"15",def:{en:["a railing","a fence an enclosed place"],kr:["울","번"]},hunum:[{kor:"번",def:"울"}]},{id:1525,hanja:"癩",strokes:"21",def:{en:["leprosy","scabies","mange","shoddy"],kr:["약물","중독","나"]},hunum:[{kor:"나",def:"약물 중독"}]},{id:1526,hanja:"瑣",strokes:"14",def:{en:["fragments","trifling","petty","troublesome"],kr:["대궐문","아로새길","쇄"]},hunum:[{kor:"쇄",def:"옥가루"}]},{id:1527,hanja:"攽",strokes:"8",def:{en:[],kr:["나눌","반"]},hunum:[{kor:"반",def:"나눌"}]},{id:1528,hanja:"潸",strokes:"15",def:{en:["weep","tears flowing"],kr:["눈물흐를","산"]},hunum:[{kor:"산",def:"눈물흐를"}]},{id:1529,hanja:"樋",strokes:"15",def:{en:["tree name"],kr:["어름나무","통"]},hunum:[{kor:"통",def:"대 홈"}]},{id:1530,hanja:"羅",strokes:"19",def:{en:["net for catching birds","gauze"],kr:["새","그물","나"]},hunum:[{kor:"나",def:"새 그물"}]},{id:1531,hanja:"裸",strokes:"14",def:{en:["bare","nude","undress","strip"]},hunum:[{kor:"라",def:"벌거벗을"}]},{id:1532,hanja:"莉",strokes:"13",def:{en:["white jasmine"],kr:["말리","리"]},hunum:[{kor:"리",def:"말리"}]},{id:1533,hanja:"瑤",strokes:"14",def:{en:["precious jade"],kr:["못","이름","요"]},hunum:[{kor:"요",def:"아름다운 옥"}]},{id:1534,hanja:"放",strokes:"8",def:{en:["put","release","free","liberate"],kr:["놓을","방"]},hunum:[{kor:"방",def:"놓을"}]},{id:1535,hanja:"嫦",strokes:"14",def:{en:["name of a moon goddess"],kr:["姮과","同字"]},hunum:[{kor:"항",def:"항아"}]},{id:1536,hanja:"跆",strokes:"12",def:{en:["trample"],kr:["밟을","태"]},hunum:[{kor:"태",def:"밟을"}]},{id:1537,hanja:"政",strokes:"8",def:{en:["government","political affairs"],kr:["조세","정"]},hunum:[{kor:"정",def:"정사"}]},{id:1538,hanja:"莊",strokes:"13",def:{en:["village","hamlet","villa","surname"],kr:["엄할","장"]},hunum:[{kor:"장",def:"엄할"}]},{id:1539,hanja:"頞",strokes:"15",def:{en:[],kr:["콧마루","알"]},hunum:[{kor:"알",def:"콧마루"}]},{id:1540,hanja:"蘿",strokes:"25",def:{en:["type of creeping plant","turnip"],kr:["소나무겨우살이","나"]},hunum:[{kor:"나",def:"소나무겨우살이"}]},{id:1541,hanja:"裹",strokes:"14",def:{en:["wrap","bind","encircle","confine"],kr:["쌀","과"]},hunum:[{kor:"과",def:"쌀"}]},{id:1542,hanja:"瑥",strokes:"14",def:{en:[],kr:["사람이름","온"]},hunum:[{kor:"온",def:"사람이름"}]},{id:1543,hanja:"潺",strokes:"15",def:{en:["sound of flowing water"],kr:["물이","줄줄","흐르는","모양","잔"]},hunum:[{kor:"잔",def:"물이 줄줄 흐르는 모양"}]},{id:1544,hanja:"催",strokes:"13",def:{en:["press","urge"],kr:["일어날","최"]},hunum:[{kor:"최",def:"재촉할"}]},{id:1545,hanja:"螺",strokes:"17",def:{en:["spiral shell","conch","spiral"],kr:["소라","나"]},hunum:[{kor:"나",def:"소라"}]},{id:1546,hanja:"傭",strokes:"13",def:{en:["hire","employ","charter","servant"],kr:["가지런할","충"]},hunum:[{kor:"용",def:"머슴"},{kor:"충",def:"고를"}]},{id:1547,hanja:"裸",strokes:"14",def:{en:["bare","nude","undress","strip"],kr:["털","없는","벌레","라"]},hunum:[{kor:"나",def:"벌거벗을"}]},{id:1548,hanja:"潼",strokes:"15",def:{en:["high","lofty","damp"],kr:["물","이름","동"]},hunum:[{kor:"동",def:"물 이름"}]},{id:1549,hanja:"瑨",strokes:"14",def:{en:["jade look alike stone"],kr:["아름다운","돌","진"]},hunum:[{kor:"진",def:"아름다운 돌"}]},{id:1550,hanja:"傮",strokes:"13",def:{en:["finish","to go around"],kr:["마칠","조"]},hunum:[{kor:"조",def:"마칠"}]},{id:1551,hanja:"嫩",strokes:"14",def:{en:["soft","tender","delicate","young"],kr:["언약할","눈"]},hunum:[{kor:"눈",def:"언약할"}]},{id:1552,hanja:"頡",strokes:"15",def:{en:["fly upward","soar","contest","to rob"],kr:["곧은목","힐"]},hunum:[{kor:"갈",def:"긁을"},{kor:"힐",def:"곧은목"}]},{id:1553,hanja:"邏",strokes:"23",def:{en:["patrol","inspect","watch"],kr:["돌","나"]},hunum:[{kor:"나",def:"돌"}]},{id:1554,hanja:"潽",strokes:"15",def:{en:[]},hunum:[{kor:"보",def:"물 이름"}]},{id:1555,hanja:"傯",strokes:"13",def:{en:["urgent"],kr:["곤궁할","총"]},hunum:[{kor:"총",def:"바쁠"}]},{id:1556,hanja:"樂",strokes:"15",def:{en:["happy","glad","enjoyable","music"],kr:["즐길","낙"]},hunum:[{kor:"낙",def:"즐길"}]},{id:1557,hanja:"莎",strokes:"13",def:{en:["kind of sedge grass","used anciently for raincoats"],kr:["향부자","사"]},hunum:[{kor:"사",def:"향부자"}]},{id:1558,hanja:"瑩",strokes:"15",def:{en:["lustre of gems","bright","lustrous"],kr:["밝을","형"]},hunum:[{kor:"영",def:"귀막이 옥"},{kor:"형",def:"밝을"}]},{id:1559,hanja:"潾",strokes:"15",def:{en:["clear water"],kr:["맑을","린"]},hunum:[{kor:"린",def:"맑을"}]},{id:1560,hanja:"製",strokes:"14",def:{en:["make","manufacture","produce"],kr:["만들","제"]},hunum:[{kor:"제",def:"만들"}]},{id:1561,hanja:"樑",strokes:"15",def:{en:["bridge","beam"]},hunum:[{kor:"량",def:"들보"}]},{id:1562,hanja:"傰",strokes:"13",def:{en:[],kr:["성","붕"]},hunum:[{kor:"붕",def:"성"}]},{id:1563,hanja:"嫫",strokes:"14",def:{en:[],kr:["예쁠","모"]},hunum:[{kor:"모",def:"예쁠"}]},{id:1564,hanja:"頣",strokes:"15",def:{en:["to view others with raised eyes"],kr:["눈들고","볼","신"]},hunum:[{kor:"신",def:"눈들고 볼"}]},{id:1565,hanja:"跋",strokes:"12",def:{en:["go by foot","epilogue","colophon"],kr:["밟을","발"]},hunum:[{kor:"발",def:"밟을"}]},{id:1566,hanja:"跌",strokes:"12",def:{en:["stumble","slip","fall down","stamp"],kr:["넘어질","질"]},hunum:[{kor:"질",def:"넘어질"}]},{id:1567,hanja:"樒",strokes:"15",def:{en:["a tree whose branches are placed on Buddhist graves"],kr:["침향","밀"]},hunum:[{kor:"밀",def:"침향"}]},{id:1568,hanja:"頤",strokes:"16",def:{en:["cheeks","jaw","chin","rear","to nourish"],kr:["괘","이름","이"]},hunum:[{kor:"이",def:"턱"}]},{id:1569,hanja:"洛",strokes:"9",def:{en:["river in Shanxi province","city"],kr:["강","이름","낙"]},hunum:[{kor:"낙",def:"강 이름"}]},{id:1570,hanja:"裾",strokes:"14",def:{en:["lapel","border of garment","skirt"],kr:["옷","뒷자락","거"]},hunum:[{kor:"거",def:"옷 뒷자락"}]},{id:1571,hanja:"瑪",strokes:"14",def:{en:["agate","cornelian"],kr:["마노","마"]},hunum:[{kor:"마",def:"마노"}]},{id:1572,hanja:"樓",strokes:"15",def:{en:["building of two or more stories"],kr:["다락","루"]},hunum:[{kor:"루",def:"다락"}]},{id:1573,hanja:"傲",strokes:"13",def:{en:["proud","haughty","overbearing"],kr:["즐길","오"]},hunum:[{kor:"오",def:"업신여길"}]},{id:1574,hanja:"烙",strokes:"10",def:{en:["brand","burn","branding iron"],kr:["지질","낙"]},hunum:[{kor:"낙",def:"지질"}]},{id:1575,hanja:"嫮",strokes:"14",def:{en:[],kr:["시기할","호"]},hunum:[{kor:"호",def:"아름다울"}]},{id:1576,hanja:"頦",strokes:"15",def:{en:["chin"],kr:["턱","해"]},hunum:[{kor:"해",def:"턱"}]},{id:1577,hanja:"跎",strokes:"12",def:{en:["slip","stumble","falter","vacillate"],kr:["미끄러질","타"]},hunum:[{kor:"타",def:"미끄러질"}]},{id:1578,hanja:"傳",strokes:"13",def:{en:["summon","propagate","transmit"],kr:["책","전"]},hunum:[{kor:"전",def:"전할"}]},{id:1579,hanja:"樔",strokes:"15",def:{en:[],kr:["너스레","소"]},hunum:[{kor:"소",def:"풀막"}]},{id:1580,hanja:"喀",strokes:"12",def:{en:["vomit","used in transliterations"],kr:["토할","객"]},hunum:[{kor:"객",def:"기침할"}]},{id:1581,hanja:"珞",strokes:"10",def:{en:["kind of necklace"],kr:["구슬","목걸이","낙"]},hunum:[{kor:"낙",def:"구슬 목걸이"}]},{id:1582,hanja:"莒",strokes:"13",def:{en:["hemp","taro","herb"],kr:["고을이름","거"]},hunum:[{kor:"거",def:"모시풀"}]},{id:1583,hanja:"傴",strokes:"13",def:{en:["humpback","stoop"],kr:["구부릴","구"]},hunum:[{kor:"구",def:"구부릴"}]},{id:1584,hanja:"嫯",strokes:"14",def:{en:[],kr:["업신여길","오"]},hunum:[{kor:"오",def:"업신여길"}]},{id:1585,hanja:"喁",strokes:"12",def:{en:["the mouth of a fish at the surface of the water","gasping for breath"],kr:["서로","부를","우"]},hunum:[{kor:"옹",def:"물고기 입 오물거릴"},{kor:"우",def:"서로 부를"}]},{id:1586,hanja:"落",strokes:"15",def:{en:["fall","drop","net income","surplus"],kr:["떨어질","낙"]},hunum:[{kor:"낙",def:"떨어질"}]},{id:1587,hanja:"莓",strokes:"13",def:{en:["moss","edible berries"],kr:["나무딸기","매"]},hunum:[{kor:"매",def:"나무딸기"}]},{id:1588,hanja:"瑭",strokes:"14",def:{en:["a kind of jade"],kr:["옥이름","당"]},hunum:[{kor:"당",def:"옥이름"}]},{id:1589,hanja:"債",strokes:"13",def:{en:["debt","loan","liabilities"],kr:["빚","채"]},hunum:[{kor:"채",def:"빚"}]},{id:1590,hanja:"酪",strokes:"13",def:{en:["cream","cheese","koumiss"],kr:["타락","낙"]},hunum:[{kor:"낙",def:"타락"}]},{id:1591,hanja:"跏",strokes:"12",def:{en:["sit cross","squat"],kr:["책상다리할","가"]},hunum:[{kor:"가",def:"책상다리할"}]},{id:1592,hanja:"樗",strokes:"15",def:{en:["Ailanthus glandulosa","a kind of tree useless as timber"],kr:["가죽나무","저"]},hunum:[{kor:"저",def:"가죽나무"}]},{id:1593,hanja:"喃",strokes:"12",def:{en:["keep talking","chattering","mumble"],kr:["재잘거릴","남"]},hunum:[{kor:"남",def:"재잘거릴"}]},{id:1594,hanja:"駱",strokes:"16",def:{en:["white horse with black mane","camel"],kr:["낙타","낙"]},hunum:[{kor:"낙",def:"낙타"}]},{id:1595,hanja:"瑯",strokes:"14",def:{en:["kind of white cornelian"],kr:["고을","이름","랑"]},hunum:[{kor:"랑",def:"고을 이름"}]},{id:1596,hanja:"傷",strokes:"13",def:{en:["wound","injury","fall ill from"],kr:["상처","상"]},hunum:[{kor:"상",def:"상처"}]},{id:1597,hanja:"善",strokes:"12",def:{en:["good","virtuous","charitable","kind"],kr:["착할","선"]},hunum:[{kor:"선",def:"착할"}]},{id:1598,hanja:"亂",strokes:"13",def:{en:["confusion","state of chaos","create chaos","revolt"],kr:["어지러울","난"]},hunum:[{kor:"난",def:"어지러울"}]},{id:1599,hanja:"莖",strokes:"13",def:{en:["stem","stalk"],kr:["줄기","경"]},hunum:[{kor:"경",def:"줄기"}]},{id:1600,hanja:"瑰",strokes:"14",def:{en:["extraordinary","fabulous","rose"],kr:["슬이름","괴"]},hunum:[{kor:"괴",def:"슬이름"}]},{id:1601,hanja:"標",strokes:"15",def:{en:["a mark","symbol","label","sign","standard"],kr:["나무","끝","표"]},hunum:[{kor:"표",def:"표시할"}]},{id:1602,hanja:"瑱",strokes:"14",def:{en:["a gem used as ear plug","a jade earring"],kr:["옥이름","전"]},hunum:[{kor:"전",def:"귀막이옥"}]},{id:1603,hanja:"喅",strokes:"12",def:{en:[],kr:["뭇","소리","육"]},hunum:[{kor:"육",def:"뭇 소리"}]},{id:1604,hanja:"頫",strokes:"15",def:{en:["bow","nod","condescend"],kr:["머리","숙일","부"]},hunum:[{kor:"부",def:"머리 숙일"}]},{id:1605,hanja:"卵",strokes:"7",def:{en:["egg","ovum","roe","spawn"],kr:["알","난"]},hunum:[{kor:"난",def:"알"}]},{id:1606,hanja:"頬",strokes:"15",def:{en:["cheeks","jaw"],kr:["頰과","同字"]},hunum:[{kor:"협",def:"뺨"}]},{id:1607,hanja:"喆",strokes:"12",def:{en:["a sage","wise","sagacious"],kr:["哲과","同字"]},hunum:[{kor:"철",def:"밝을"}]},{id:1608,hanja:"瑲",strokes:"14",def:{en:["tinkling sound tinkling of pendant gems"],kr:["옥","소리","창"]},hunum:[{kor:"창",def:"옥 소리"}]},{id:1609,hanja:"欄",strokes:"21",def:{en:["railing","balustrade","animal pan"],kr:["난간","난"]},hunum:[{kor:"난",def:"난간"}]},{id:1610,hanja:"莘",strokes:"13",def:{en:["long","numerous","a marsh plant whose root is used for medicine"],kr:["나라이름","신"]},hunum:[{kor:"신",def:"약 이름"}]},{id:1611,hanja:"纮",strokes:"7",def:{en:["string","vast","expansive"],kr:["넓을","굉"]},hunum:[{kor:"굉",def:"넓을"}]},{id:1612,hanja:"瑳",strokes:"14",def:{en:["luster of gem","lustrous","bright"],kr:["깨끗할","차"]},hunum:[{kor:"차",def:"깨끗할"}]},{id:1613,hanja:"傺",strokes:"13",def:{en:["to hinder","to detain"],kr:["묵을","제"]},hunum:[{kor:"제",def:"묵을"}]},{id:1614,hanja:"祀",strokes:"8",def:{en:["to sacrifice","worship"],kr:["제사","사"]},hunum:[{kor:"사",def:"제사"}]},{id:1615,hanja:"樛",strokes:"15",def:{en:["bending branches","bent limbs"],kr:["나무가지","휘어질","규"]},hunum:[{kor:"규",def:"나무가지 휘어질"}]},{id:1616,hanja:"喇",strokes:"12",def:{en:["horn","bugle","lama","final particle"],kr:["말굽히할","랄"]},hunum:[{kor:"라",def:"나팔"},{kor:"랄",def:"말굽히할"}]},{id:1617,hanja:"頭",strokes:"16",def:{en:["head","top","chief","first","boss"],kr:["머리","두"]},hunum:[{kor:"두",def:"머리"}]},{id:1618,hanja:"爛",strokes:"21",def:{en:["rotten","spoiled","decayed"],kr:["문드러질","난"]},hunum:[{kor:"난",def:"문드러질"}]},{id:1619,hanja:"頮",strokes:"16",def:{en:["wash"],kr:["세수할","회"]},hunum:[{kor:"회",def:"세수할"}]},{id:1620,hanja:"嫶",strokes:"15",def:{en:[],kr:["수척할","초"]},hunum:[{kor:"초",def:"수척할"}]},{id:1621,hanja:"跕",strokes:"12",def:{en:["shuffle"],kr:["미끄러질","접"]},hunum:[{kor:"접",def:"미끄러질"}]},{id:1622,hanja:"祁",strokes:"8",def:{en:["pray","numerous","ample","abundant"],kr:["성할","기"]},hunum:[{kor:"기",def:"성할"}]},{id:1623,hanja:"傻",strokes:"13",def:{en:["foolish","silly","stupid","an imbecile"],kr:["약을","사"]},hunum:[{kor:"사",def:"약을"}]},{id:1624,hanja:"喈",strokes:"12",def:{en:["music","melody"],kr:["빠를","개"]},hunum:[{kor:"개",def:"새소리"}]},{id:1625,hanja:"心",strokes:"4",def:{en:["heart","mind","intelligence","soul"],kr:["마음","심"]},hunum:[{kor:"심",def:"마음"}]},{id:1626,hanja:"蘭",strokes:"23",def:{en:["orchid","elegant","graceful"],kr:["난초","난"]},hunum:[{kor:"난",def:"난초"}]},{id:1627,hanja:"莚",strokes:"13",def:{en:["bamboo mat","feast","banquet"],kr:["풀","이름","연"]},hunum:[{kor:"연",def:"만연할"}]},{id:1628,hanja:"喉",strokes:"12",def:{en:["throat","gullet","larynx","guttural"],kr:["목구멍","후"]},hunum:[{kor:"후",def:"목구멍"}]},{id:1629,hanja:"跖",strokes:"12",def:{en:["sole"],kr:["발바닥","척"]},hunum:[{kor:"척",def:"발바닥"}]},{id:1630,hanja:"莛",strokes:"13",def:{en:["stalks of grasses","etc"],kr:["들보","정"]},hunum:[{kor:"정",def:"풀 줄거리"}]},{id:1631,hanja:"鸞",strokes:"30",def:{en:["fabulous bird"],kr:["난새","난"]},hunum:[{kor:"난",def:"난새"}]},{id:1632,hanja:"頰",strokes:"16",def:{en:["cheeks","jaw"],kr:["천천히","말할","협"]},hunum:[{kor:"협",def:"뺨"}]},{id:1633,hanja:"喊",strokes:"12",def:{en:["shout","call out","yell","howl","cry"],kr:["소리","함"]},hunum:[{kor:"함",def:"소리"}]},{id:1634,hanja:"必",strokes:"4",def:{en:["surely","most certainly","must"],kr:["기약","필"]},hunum:[{kor:"필",def:"반드시"}]},{id:1635,hanja:"樞",strokes:"15",def:{en:["door hinge","pivot","center of power"],kr:["가운데","추"]},hunum:[{kor:"우",def:"느름나무"},{kor:"추",def:"밑둥"}]},{id:1636,hanja:"嵐",strokes:"12",def:{en:["mountain mist","mountain haze"],kr:["남기","남"]},hunum:[{kor:"남",def:"남기"}]},{id:1637,hanja:"跗",strokes:"12",def:{en:["the instep"],kr:["발등","부"]},hunum:[{kor:"부",def:"발등"}]},{id:1638,hanja:"瑶",strokes:"14",def:{en:["precious jade"],kr:["瑤와","同字"]},hunum:[{kor:"요",def:"아름다운 옥"}]},{id:1639,hanja:"莝",strokes:"13",def:{en:["to chop straw fine for animals"],kr:["여물","좌"]},hunum:[{kor:"좌",def:"여물"}]},{id:1640,hanja:"樟",strokes:"15",def:{en:["camphor tree"],kr:["녹나무","장"]},hunum:[{kor:"장",def:"녹나무"}]},{id:1641,hanja:"傽",strokes:"13",def:{en:["terror"],kr:["놀랄","장"]},hunum:[{kor:"장",def:"놀랄"}]},{id:1642,hanja:"喋",strokes:"12",def:{en:["nag","chatter","babble","twitter"],kr:["재잘거릴","첩"]},hunum:[{kor:"잡",def:"오리와 기러기 텁석거려 먹는 소리"},{kor:"첩",def:"재잘거릴"}]},{id:1643,hanja:"濫",strokes:"17",def:{en:["flood","overflow","excessive"],kr:["퍼질","남"]},hunum:[{kor:"남",def:"퍼질"}]},{id:1644,hanja:"嫺",strokes:"15",def:{en:["refined","elegant","gracious"],kr:["우아할","한"]},hunum:[{kor:"한",def:"우아할"}]},{id:1645,hanja:"喌",strokes:"12",def:{en:["syllable"]},hunum:[{kor:"주",def:"닭 부르는 소리"}]},{id:1646,hanja:"祅",strokes:"9",def:{en:["calamities","disasters","ormazda"],kr:["재앙","요"]},hunum:[{kor:"요",def:"재앙"}]},{id:1647,hanja:"傾",strokes:"13",def:{en:["upset","pour out","overflow"],kr:["기울","경"]},hunum:[{kor:"경",def:"기울"}]},{id:1648,hanja:"藍",strokes:"20",def:{en:["blue","indigo plant","surname"],kr:["쪽","남"]},hunum:[{kor:"남",def:"쪽"}]},{id:1649,hanja:"莞",strokes:"13",def:{en:["smiling","a kind of aquatic herb"],kr:["빙그레","웃는","모양","완"]},hunum:[{kor:"관",def:"골풀"},{kor:"완",def:"빙그레 웃는 모양"}]},{id:1650,hanja:"莟",strokes:"13",def:{en:["a bud"],kr:["꽃봉오리","함"]},hunum:[{kor:"함",def:"꽃봉오리"}]},{id:1651,hanja:"嫻",strokes:"15",def:{en:["elegant","refined","skillful"],kr:["우아할","한"]},hunum:[{kor:"한",def:"우아할"}]},{id:1652,hanja:"祆",strokes:"9",def:{en:["Ormazda","god of the Zoroastrians","extended to god of the Manicheans"],kr:["하늘","천"]},hunum:[{kor:"천",def:"하늘"}]},{id:1653,hanja:"喍",strokes:"13",def:{en:[],kr:["개싸움할","재"]},hunum:[{kor:"재",def:"개싸움할"}]},{id:1654,hanja:"模",strokes:"15",def:{en:["model","standard","pattern","copy"],kr:["법","모"]},hunum:[{kor:"모",def:"법"}]},{id:1655,hanja:"傿",strokes:"13",def:{en:[],kr:["鄢과","同字"]},hunum:[{kor:"언",def:"고을 이름"}]},{id:1656,hanja:"襤",strokes:"20",def:{en:["ragged","tattered","threadbare"],kr:["누더기","남"]},hunum:[{kor:"남",def:"누더기"}]},{id:1657,hanja:"跚",strokes:"12",def:{en:["stagger","limp"],kr:["비틀거릴","산"]},hunum:[{kor:"산",def:"비틀거릴"}]},{id:1658,hanja:"跛",strokes:"12",def:{en:["lame"],kr:["기울어","지게","설","피"]},hunum:[{kor:"파",def:"절뚝발이"},{kor:"피",def:"기울어 지게 설"}]},{id:1659,hanja:"祇",strokes:"9",def:{en:["only","merely","but"],kr:["마침","지"]},hunum:[{kor:"기",def:"토지의 신"},{kor:"지",def:"마침"}]},{id:1660,hanja:"忉",strokes:"5",def:{en:["grieved","distressed in mind"],kr:["근심할","도"]},hunum:[{kor:"도",def:"근심할"}]},{id:1661,hanja:"拉",strokes:"8",def:{en:["pull","drag","seize","hold","lengthen"],kr:["꺽을","납"]},hunum:[{kor:"납",def:"꺽을"}]},{id:1662,hanja:"莠",strokes:"13",def:{en:["weeds","tares","undesirable","evil"],kr:["추할","유"]},hunum:[{kor:"유",def:"가라지"}]},{id:1663,hanja:"祈",strokes:"9",def:{en:["pray","entreat","beseech"],kr:["빌","기"]},hunum:[{kor:"기",def:"빌"}]},{id:1664,hanja:"嫽",strokes:"15",def:{en:["play with"],kr:["외조모","료"]},hunum:[{kor:"료",def:"외조모"}]},{id:1665,hanja:"喏",strokes:"12",def:{en:["respectful reply of assent to superiors"],kr:["공손히","대답할","야"]},hunum:[{kor:"야",def:"공손히 대답할"}]},{id:1666,hanja:"臘",strokes:"19",def:{en:["year end sacrifice","dried meat"],kr:["납향","납"]},hunum:[{kor:"납",def:"납향"}]},{id:1667,hanja:"鋆",strokes:"15",def:{en:["gold","character used in personal name"]},hunum:[{kor:"윤",def:"금"}]},{id:1668,hanja:"莢",strokes:"13",def:{en:["pods of leguminous plants","pods"],kr:["명협","협"]},hunum:[{kor:"협",def:"콩 꼬투리"}]},{id:1669,hanja:"祉",strokes:"9",def:{en:["happiness","blessings","good luck"],kr:["복","지"]},hunum:[{kor:"지",def:"복"}]},{id:1670,hanja:"樣",strokes:"15",def:{en:["shape","form","pattern","style"],kr:["모범","양"]},hunum:[{kor:"상",def:"상수리나무"},{kor:"양",def:"모양"}]},{id:1671,hanja:"蠟",strokes:"21",def:{en:["wax","candle","waxy","glazed"],kr:["밀","납"]},hunum:[{kor:"납",def:"밀"}]},{id:1672,hanja:"鴃",strokes:"15",def:{en:["shrike","butcherbird"],kr:["때까치","격"]},hunum:[{kor:"격",def:"왜가리"}]},{id:1673,hanja:"距",strokes:"12",def:{en:["distance","bird"],kr:["미눌","거"]},hunum:[{kor:"거",def:"며느리 발톱"}]},{id:1674,hanja:"祊",strokes:"9",def:{en:["river in Shandong","space inside"],kr:["사당문","제사","팽"]},hunum:[{kor:"팽",def:"사당문 제사"}]},{id:1675,hanja:"瑽",strokes:"15",def:{en:["tinkling of jade pendants"],kr:["패옥소리","종"]},hunum:[{kor:"종",def:"패옥소리"}]},{id:1676,hanja:"忌",strokes:"7",def:{en:["jealous","envious","fear"],kr:["꺼릴","기"]},hunum:[{kor:"기",def:"꺼릴"}]},{id:1677,hanja:"廊",strokes:"13",def:{en:["corridor","porch","veranda"],kr:["복도","낭"]},hunum:[{kor:"낭",def:"복도"}]},{id:1678,hanja:"鋈",strokes:"15",def:{en:["silver plating"],kr:["은","올릴","옥"]},hunum:[{kor:"옥",def:"은 올릴"}]},{id:1679,hanja:"莤",strokes:"13",def:{en:[]},hunum:[{kor:"천",def:"술 거를"}]},{id:1680,hanja:"喑",strokes:"12",def:{en:["to be dumb","the sobbing of infants"],kr:["목","쉴","음"]},hunum:[{kor:"음",def:"소리지를"}]},{id:1681,hanja:"忍",strokes:"7",def:{en:["endure","bear","suffer","forbear"],kr:["참을","인"]},hunum:[{kor:"인",def:"참을"}]},{id:1682,hanja:"頷",strokes:"16",def:{en:["chin","jowl","give nod"],kr:["끄덕일","암"]},hunum:[{kor:"암",def:"끄덕일"}]},{id:1683,hanja:"朗",strokes:"10",def:{en:["clear","bright","distinct"],kr:["밝을","낭"]},hunum:[{kor:"낭",def:"밝을"}]},{id:1684,hanja:"跟",strokes:"13",def:{en:["heel","to follow","accompany","with"],kr:["발두꿈치","근"]},hunum:[{kor:"근",def:"발두꿈치"}]},{id:1685,hanja:"瑾",strokes:"15",def:{en:["brilliance of gems","fine jade"],kr:["붉은옥","근"]},hunum:[{kor:"근",def:"붉은옥"}]},{id:1686,hanja:"鴆",strokes:"15",def:{en:["a bird resembling the secretary falcon"],kr:["짐새","짐"]},hunum:[{kor:"짐",def:"짐새"}]},{id:1687,hanja:"喒",strokes:"12",def:{en:["a dual pronoun","I","you and me","we two"],kr:["나","잠"]},hunum:[{kor:"잠",def:"나"}]},{id:1688,hanja:"頸",strokes:"16",def:{en:["neck","throat"],kr:["목","경"]},hunum:[{kor:"경",def:"목"}]},{id:1689,hanja:"浪",strokes:"10",def:{en:["wave","wasteful","reckless"],kr:["물결","낭"]},hunum:[{kor:"낭",def:"물결"}]},{id:1690,hanja:"頹",strokes:"16",def:{en:["ruined","decayed","disintegrate"],kr:["대머리","퇴"]},hunum:[{kor:"퇴",def:"기울어질"}]},{id:1691,hanja:"跡",strokes:"13",def:{en:["search","track","trace"],kr:["자취","적"]},hunum:[{kor:"적",def:"자취"}]},{id:1692,hanja:"纻",strokes:"7",def:{en:["ramie","sack cloth"],kr:["紵와","同字"]},hunum:[{kor:"저",def:"모시풀"}]},{id:1693,hanja:"喓",strokes:"12",def:{en:["chirping","buzzing"],kr:["벌레소리","요"]},hunum:[{kor:"요",def:"벌레소리"}]},{id:1694,hanja:"狼",strokes:"10",def:{en:["wolf"],kr:["이리","낭"]},hunum:[{kor:"낭",def:"이리"}]},{id:1695,hanja:"鴇",strokes:"15",def:{en:["bustard","procuress","Otis species"],kr:["능에","보"]},hunum:[{kor:"보",def:"능에"}]},{id:1696,hanja:"忐",strokes:"7",def:{en:["timorous","nervous"]},hunum:[{kor:"탐",def:"마을 허할"}]},{id:1697,hanja:"樨",strokes:"15",def:{en:[]},hunum:[{kor:"서",def:"계수나무"}]},{id:1698,hanja:"鋌",strokes:"15",def:{en:["ingots","bars of metal","hurry"],kr:["쇳덩이","정"]},hunum:[{kor:"정",def:"화살촉"}]},{id:1699,hanja:"喔",strokes:"12",def:{en:["descriptive of crying or of crowing"],kr:["아첨해","웃는","소리","악"]},hunum:[{kor:"악",def:"닭 우는 소리"}]},{id:1700,hanja:"郎",strokes:"10",def:{en:["gentleman","young man","husband"],kr:["사나이","낭"]},hunum:[{kor:"낭",def:"사나이"}]},{id:1701,hanja:"鴈",strokes:"15",def:{en:["wild goose"],kr:["기러기","안"]},hunum:[{kor:"안",def:"기러기"}]},{id:1702,hanja:"権",strokes:"15",def:{en:["power","right","authority"],kr:["權의","俗字"]},hunum:[{kor:"권",def:"권세"}]},{id:1703,hanja:"頻",strokes:"16",def:{en:["frequently","again and again"],kr:["자주","빈"]},hunum:[{kor:"빈",def:"자주"}]},{id:1704,hanja:"來",strokes:"8",def:{en:["come","coming","return","returning"],kr:["올","내"]},hunum:[{kor:"내",def:"올"}]},{id:1705,hanja:"鴉",strokes:"15",def:{en:["crow","raven","Corvus species"],kr:["검을","아"]},hunum:[{kor:"아",def:"갈가마귀"}]},{id:1706,hanja:"跣",strokes:"13",def:{en:["bare footed"],kr:["맨발","선"]},hunum:[{kor:"선",def:"맨발"}]},{id:1707,hanja:"横",strokes:"15",def:{en:["across"],kr:["비낄","횡"]},hunum:[{kor:"횡",def:"비낄"}]},{id:1708,hanja:"忒",strokes:"7",def:{en:["excessive","too","very","to err","to mistake","changeable"],kr:["어기어질","특"]},hunum:[{kor:"특",def:"변할"}]},{id:1709,hanja:"祐",strokes:"10",def:{en:["divine intervention","protection"],kr:["다행할","우"]},hunum:[{kor:"우",def:"도울"}]},{id:1710,hanja:"頼",strokes:"16",def:{en:["rely","depend on","accuse falsely"],kr:["賴의","俗字"]},hunum:[{kor:"뢰",def:"의뢰할"}]},{id:1711,hanja:"冷",strokes:"7",def:{en:["cold","cool","lonely"],kr:["차가울","냉"]},hunum:[{kor:"냉",def:"차가울"}]},{id:1712,hanja:"莨",strokes:"13",def:{en:["herb","Scopolia japonica"],kr:["수크령","랑"]},hunum:[{kor:"랑",def:"수크령"}]},{id:1713,hanja:"跤",strokes:"13",def:{en:["stumble","fall down","wrestle"],kr:["발화목","교"]},hunum:[{kor:"교",def:"발화목"}]},{id:1714,hanja:"鋏",strokes:"15",def:{en:["tongs","pincers","dagger","sword"],kr:["집개","협"]},hunum:[{kor:"협",def:"칼 손잡이"}]},{id:1715,hanja:"頽",strokes:"16",def:{en:["ruined"],kr:["頹와","同字"]},hunum:[{kor:"퇴",def:"무너질"}]},{id:1716,hanja:"樫",strokes:"15",def:{en:["evergreen oak"],kr:["떡갈나무","견"]},hunum:[{kor:"견",def:"떡갈나무"}]},{id:1717,hanja:"喗",strokes:"12",def:{en:[],kr:["이빨","더러울","운"]},hunum:[{kor:"운",def:"입 클"}]},{id:1718,hanja:"勞",strokes:"12",def:{en:["labor","toil","do manual work"],kr:["수고할","노"]},hunum:[{kor:"노",def:"수고할"}]},{id:1719,hanja:"莩",strokes:"13",def:{en:["membrane lining inside of reed"],kr:["굶어죽을","표"]},hunum:[{kor:"부",def:"풀 이름"},{kor:"표",def:"굶어죽을"}]},{id:1720,hanja:"喘",strokes:"12",def:{en:["pant","gasp","breathe heavily"],kr:["헐떡거릴","천"]},hunum:[{kor:"천",def:"헐떡거릴"}]},{id:1721,hanja:"擄",strokes:"16",def:{en:["capture","seize"],kr:["사로잡을","노"]},hunum:[{kor:"노",def:"사로잡을"}]},{id:1722,hanja:"莪",strokes:"13",def:{en:["artemisia"],kr:["지칭개","아"]},hunum:[{kor:"아",def:"지칭개"}]},{id:1723,hanja:"喙",strokes:"12",def:{en:["beak","bill","snout","pant"],kr:["부리","훼"]},hunum:[{kor:"훼",def:"부리"}]},{id:1724,hanja:"鋑",strokes:"15",def:{en:["to engrave or carve","as a block for printing"]},hunum:[{kor:"전",def:"새길"}]},{id:1725,hanja:"祓",strokes:"10",def:{en:["exorcise","remove evil","clean"],kr:["푸닥거리할","불"]},hunum:[{kor:"불",def:"푸닥거리할"}]},{id:1726,hanja:"頿",strokes:"17",def:{en:[],kr:["코밑수염","자"]},hunum:[{kor:"자",def:"코밑수염"}]},{id:1727,hanja:"櫓",strokes:"19",def:{en:["oar","scull","row"],kr:["큰","방패","노"]},hunum:[{kor:"노",def:"큰 방패"}]},{id:1728,hanja:"鴌",strokes:"15",def:{en:[],kr:["鳳의","古字"]},hunum:[{kor:"봉",def:"봉새"}]},{id:1729,hanja:"莫",strokes:"13",def:{en:["do not","is not","can not","negative"],kr:["저물","모"]},hunum:[{kor:"막",def:"없을"},{kor:"모",def:"저물"}]},{id:1730,hanja:"喚",strokes:"12",def:{en:["call","summon","invite","be called"],kr:["부를","환"]},hunum:[{kor:"환",def:"부를"}]},{id:1731,hanja:"忖",strokes:"6",def:{en:["guess","suppose","conjecture"],kr:["짐작할","촌"]},hunum:[{kor:"촌",def:"헤아릴"}]},{id:1732,hanja:"祔",strokes:"10",def:{en:["worship one","entomb"],kr:["합사할","부"]},hunum:[{kor:"부",def:"합사할"}]},{id:1733,hanja:"爐",strokes:"20",def:{en:["fireplace","stove","oven","furnace"],kr:["화로","노"]},hunum:[{kor:"노",def:"화로"}]},{id:1734,hanja:"鋒",strokes:"15",def:{en:["point of spear","sharp point"],kr:["칼끝","봉"]},hunum:[{kor:"봉",def:"칼끝"}]},{id:1735,hanja:"跨",strokes:"13",def:{en:["straddle","bestride","ride","carry"],kr:["타넘을","과"]},hunum:[{kor:"과",def:"타넘을"}]},{id:1736,hanja:"喛",strokes:"12",def:{en:[],kr:["근심할","환"]},hunum:[{kor:"환",def:"성낼"}]},{id:1737,hanja:"志",strokes:"7",def:{en:["purpose","will","determination"],kr:["뜻","지"]},hunum:[{kor:"지",def:"뜻"}]},{id:1738,hanja:"祕",strokes:"10",def:{en:["mysterious","secret","abstruse"],kr:["귀신","비"]},hunum:[{kor:"비",def:"귀신"}]},{id:1739,hanja:"擁",strokes:"16",def:{en:["embrace","hug","squeeze","crowd"],kr:["가질","옹"]},hunum:[{kor:"옹",def:"안을"}]},{id:1740,hanja:"盧",strokes:"16",def:{en:["cottage","hut","surname","black"],kr:["밥그릇","노"]},hunum:[{kor:"노",def:"밥그릇"}]},{id:1741,hanja:"喜",strokes:"12",def:{en:["like","love","enjoy","joyful thing"],kr:["기뻐할","희"]},hunum:[{kor:"희",def:"기뻐할"}]},{id:1742,hanja:"祖",strokes:"10",def:{en:["ancestor","forefather","grandfather"],kr:["조상","조"]},hunum:[{kor:"조",def:"조상"}]},{id:1743,hanja:"忘",strokes:"6",def:{en:["forget","neglect","miss","omit"],kr:["잊을","망"]},hunum:[{kor:"망",def:"잊을"}]},{id:1744,hanja:"老",strokes:"6",def:{en:["old","aged","experienced"],kr:["늙을","노"]},hunum:[{kor:"노",def:"늙을"}]},{id:1745,hanja:"跪",strokes:"13",def:{en:["kneel"],kr:["끓어앉을","궤"]},hunum:[{kor:"궤",def:"끓어앉을"}]},{id:1746,hanja:"祗",strokes:"10",def:{en:["respect","look up to","revere"],kr:["공경할","지"]},hunum:[{kor:"지",def:"공경할"}]},{id:1747,hanja:"喝",strokes:"12",def:{en:["drink","shout","call out"],kr:["목","쉴","애"]},hunum:[{kor:"갈",def:"꾸짖을"},{kor:"애",def:"목 쉴"}]},{id:1748,hanja:"忙",strokes:"7",def:{en:["busy","pressed for time","hustling"],kr:["바쁠","망"]},hunum:[{kor:"망",def:"바쁠"}]},{id:1749,hanja:"跫",strokes:"13",def:{en:["sound of footsteps"],kr:["발자국","소리","공"]},hunum:[{kor:"공",def:"발자국 소리"}]},{id:1750,hanja:"喞",strokes:"12",def:{en:["chirping of insects","pump"],kr:["찍찍거릴","직"]},hunum:[{kor:"즐",def:"두런거릴"},{kor:"직",def:"찍찍거릴"}]},{id:1751,hanja:"擄",strokes:"16",def:{en:["capture","seize"],kr:["사로잡을","로"]},hunum:[{kor:"로",def:"사로잡을"}]},{id:1752,hanja:"蘆",strokes:"22",def:{en:["rushes","reeds"],kr:["갈대","노"]},hunum:[{kor:"노",def:"갈대"}]},{id:1753,hanja:"跬",strokes:"13",def:{en:["to step","a stride equal to half a pace"],kr:["한발자국","규"]},hunum:[{kor:"규",def:"한발자국"}]},{id:1754,hanja:"鋗",strokes:"15",def:{en:["a small basin","rings on a cart of carriage"],kr:["퉁노구","현"]},hunum:[{kor:"현",def:"노구솥"}]},{id:1755,hanja:"擅",strokes:"16",def:{en:["monopolize","claim","arbitrarily","to dare"],kr:["멋대로","천"]},hunum:[{kor:"천",def:"멋대로"}]},{id:1756,hanja:"喟",strokes:"12",def:{en:["heave sigh","sigh"],kr:["한숨쉴","위"]},hunum:[{kor:"괴",def:"한숨쉴"},{kor:"위",def:"한숨쉴"}]},{id:1757,hanja:"虜",strokes:"10",def:{en:["capture","imprison","seize","prison"],kr:["포로","노"]},hunum:[{kor:"노",def:"포로"}]},{id:1758,hanja:"鴒",strokes:"16",def:{en:["species of lark","wagtail","Motacilla species"],kr:["할미새","령"]},hunum:[{kor:"령",def:"할미새"}]},{id:1759,hanja:"莱",strokes:"13",def:{en:["goosefoot","weed","fallow field"],kr:["명아주","래"]},hunum:[{kor:"래",def:"명아주"}]},{id:1760,hanja:"喠",strokes:"12",def:{en:[],kr:["말","못할","종"]},hunum:[{kor:"종",def:"말 못할"}]},{id:1761,hanja:"祚",strokes:"10",def:{en:["throne","bless","blessing","happiness"],kr:["복","조"]},hunum:[{kor:"조",def:"복"}]},{id:1762,hanja:"漁",strokes:"14",def:{en:["to fish","seize","pursue","surname"],kr:["물고기","잡을","어"]},hunum:[{kor:"어",def:"물고기 잡을"}]},{id:1763,hanja:"路",strokes:"13",def:{en:["road","path","street","journey"],kr:["길","노"]},hunum:[{kor:"노",def:"길"}]},{id:1764,hanja:"漂",strokes:"14",def:{en:["float","drift","tossed about"],kr:["높이","훨훨","날","표"]},hunum:[{kor:"표",def:"뜰"}]},{id:1765,hanja:"擇",strokes:"16",def:{en:["select","choose","pick out"],kr:["차별할","택"]},hunum:[{kor:"택",def:"가릴"}]},{id:1766,hanja:"樵",strokes:"16",def:{en:["woodcutter","firewood","gather wood"],kr:["땔나무","초"]},hunum:[{kor:"초",def:"땔나무"}]},{id:1767,hanja:"祛",strokes:"10",def:{en:["expel","disperse","exorcise"],kr:["굳셀","거"]},hunum:[{kor:"거",def:"물리칠"}]},{id:1768,hanja:"応",strokes:"7",def:{en:["should","ought to","must"],kr:["應의","略字"]},hunum:[{kor:"응",def:"응할"}]},{id:1769,hanja:"露",strokes:"20",def:{en:["dew","bare","open","exposed"],kr:["이슬","노"]},hunum:[{kor:"노",def:"이슬"}]},{id:1770,hanja:"祜",strokes:"10",def:{en:["blessing","happiness","prosperity"],kr:["복","호"]},hunum:[{kor:"호",def:"복"}]},{id:1771,hanja:"鴕",strokes:"16",def:{en:["ostrich","Struthio camelus"],kr:["타조","타"]},hunum:[{kor:"타",def:"타조"}]},{id:1772,hanja:"忝",strokes:"7",def:{en:["disgraced","ashamed","self"],kr:["더럽힐","첨"]},hunum:[{kor:"첨",def:"더럽힐"}]},{id:1773,hanja:"袁",strokes:"10",def:{en:["robe","surname"],kr:["성씨","원"]},hunum:[{kor:"원",def:"옷 치렁거릴"}]},{id:1774,hanja:"魯",strokes:"15",def:{en:["foolish","stupid","rash","vulgar"],kr:["미련할","노"]},hunum:[{kor:"노",def:"미련할"}]},{id:1775,hanja:"路",strokes:"13",def:{en:["road","path","street","journey"],kr:["길","로"]},hunum:[{kor:"로",def:"길"}]},{id:1776,hanja:"喣",strokes:"12",def:{en:["to breathe upon"],kr:["불","후"]},hunum:[{kor:"후",def:"불"}]},{id:1777,hanja:"擉",strokes:"16",def:{en:["to pierce","to break through"],kr:["찌를","착"]},hunum:[{kor:"착",def:"찌를"}]},{id:1778,hanja:"祝",strokes:"10",def:{en:["pray for happiness or blessings"],kr:["비로소","축"]},hunum:[{kor:"주",def:"축문"},{kor:"축",def:"빌"}]},{id:1779,hanja:"袂",strokes:"10",def:{en:["sleeves"],kr:["소매","몌"]},hunum:[{kor:"몌",def:"소매"}]},{id:1780,hanja:"漄",strokes:"14",def:{en:[],kr:["물가","애"]},hunum:[{kor:"애",def:"물가"}]},{id:1781,hanja:"忞",strokes:"8",def:{en:[],kr:["강인할","민"]},hunum:[{kor:"민",def:"강인할"}]},{id:1782,hanja:"鷺",strokes:"23",def:{en:["heron","egret"],kr:["해오라기","노"]},hunum:[{kor:"노",def:"해오라기"}]},{id:1783,hanja:"喤",strokes:"12",def:{en:["ah","harmony"],kr:["어린아이","울음","황"]},hunum:[{kor:"황",def:"어린아이 울음"}]},{id:1784,hanja:"跱",strokes:"13",def:{en:["stop"],kr:["갖출","치"]},hunum:[{kor:"치",def:"머뭇거릴"}]},{id:1785,hanja:"樸",strokes:"16",def:{en:["simple","honest","plain","rough"],kr:["총생할","복"]},hunum:[{kor:"박",def:"통나무"},{kor:"복",def:"총생할"}]},{id:1786,hanja:"擊",strokes:"16",def:{en:["strike","hit","beat","attack","fight"],kr:["撃과","同字"]},hunum:[{kor:"격",def:"칠"}]},{id:1787,hanja:"忟",strokes:"7",def:{en:["restless"],kr:["강인할","민"]},hunum:[{kor:"민",def:"강인할"}]},{id:1788,hanja:"碌",strokes:"13",def:{en:["rough","uneven","rocky","mediocre"],kr:["푸른","빛","녹"]},hunum:[{kor:"녹",def:"푸른 빛"}]},{id:1789,hanja:"漆",strokes:"14",def:{en:["varnish","lacquer","paint"],kr:["물이름","칠"]},hunum:[{kor:"칠",def:"옻나무"}]},{id:1790,hanja:"忠",strokes:"7",def:{en:["loyalty","devotion","fidelity"],kr:["곧을","충"]},hunum:[{kor:"충",def:"충성"}]},{id:1791,hanja:"神",strokes:"10",def:{en:["spirit","god","supernatural being"],kr:["정신","신"]},hunum:[{kor:"신",def:"천신"}]},{id:1792,hanja:"樹",strokes:"16",def:{en:["tree","plant","set up","establish"],kr:["심을","수"]},hunum:[{kor:"수",def:"나무"}]},{id:1793,hanja:"祿",strokes:"13",def:{en:["blessing","happiness","prosperity"],kr:["행복","녹"]},hunum:[{kor:"녹",def:"행복"}]},{id:1794,hanja:"鴘",strokes:"16",def:{en:[],kr:["매","변"]},hunum:[{kor:"변",def:"매"}]},{id:1795,hanja:"樺",strokes:"16",def:{en:["type of birch"],kr:["자작나무","화"]},hunum:[{kor:"화",def:"자작나무"}]},{id:1796,hanja:"鴙",strokes:"16",def:{en:[],kr:["雉와","同字"]},hunum:[{kor:"치",def:"꿩"}]},{id:1797,hanja:"忡",strokes:"7",def:{en:["a sad","uneasy countenance"],kr:["근심할","충"]},hunum:[{kor:"충",def:"근심할"}]},{id:1798,hanja:"祟",strokes:"10",def:{en:["evil spirit","evil influence"],kr:["빌미","수"]},hunum:[{kor:"수",def:"빌미"}]},{id:1799,hanja:"喦",strokes:"12",def:{en:["talkative"],kr:["다툴","엽"]},hunum:[{kor:"엽",def:"땅 이름"}]},{id:1800,hanja:"綠",strokes:"14",def:{en:["green","chlorine"],kr:["초록빛","녹"]},hunum:[{kor:"녹",def:"초록빛"}]},{id:1801,hanja:"跳",strokes:"13",def:{en:["jump","leap","vault","bounce","dance"],kr:["뛸","조"]},hunum:[{kor:"도",def:"뛸"},{kor:"조",def:"뛸"}]},{id:1802,hanja:"喧",strokes:"12",def:{en:["lively","noisy","clamor","talk loudly"],kr:["의젓할","훤"]},hunum:[{kor:"훤",def:"의젓할"}]},{id:1803,hanja:"鋟",strokes:"15",def:{en:["carve"],kr:["새길","침"]},hunum:[{kor:"침",def:"새길"}]},{id:1804,hanja:"袆",strokes:"10",def:{en:["ceremonial gowns of a queen"],kr:["褘와","同字"]},hunum:[{kor:"위",def:"아름다울"}]},{id:1805,hanja:"祠",strokes:"10",def:{en:["ancestral temple","offer sacrifice"],kr:["사당","사"]},hunum:[{kor:"사",def:"사당"}]},{id:1806,hanja:"樻",strokes:"16",def:{en:[],kr:["가마테나무","궤"]},hunum:[{kor:"궤",def:"가마테나무"}]},{id:1807,hanja:"忢",strokes:"8",def:{en:[]},hunum:[{kor:"오",def:"깨다를"}]},{id:1808,hanja:"菉",strokes:"14",def:{en:["the green bamboo","greenish bamboo"],kr:["조개풀","녹"]},hunum:[{kor:"녹",def:"조개풀"}]},{id:1809,hanja:"践",strokes:"12",def:{en:["trample","tread upon","walk on"],kr:["밟을","천"]},hunum:[{kor:"천",def:"밟을"}]},{id:1810,hanja:"操",strokes:"16",def:{en:["conduct","run","control","manage"],kr:["잡을","조"]},hunum:[{kor:"조",def:"잡을"}]},{id:1811,hanja:"漉",strokes:"14",def:{en:["filter","strain","wet","dripping"],kr:["거를","록"]},hunum:[{kor:"록",def:"거를"}]},{id:1812,hanja:"喨",strokes:"12",def:{en:["wail","cry","yell","neigh"],kr:["소리","맑을","량"]},hunum:[{kor:"량",def:"소리 맑을"}]},{id:1813,hanja:"錄",strokes:"16",def:{en:["copy","write down","record"],kr:["기록할","녹"]},hunum:[{kor:"녹",def:"기록할"}]},{id:1814,hanja:"鴛",strokes:"16",def:{en:["male mandarin duck"],kr:["숫원앙새","원"]},hunum:[{kor:"원",def:"숫원앙새"}]},{id:1815,hanja:"樽",strokes:"16",def:{en:["goblet","jar","jug","lush"],kr:["술그릇","준"]},hunum:[{kor:"준",def:"술그릇"}]},{id:1816,hanja:"袈",strokes:"11",def:{en:["Buddhist cassock"],kr:["가사","가"]},hunum:[{kor:"가",def:"가사"}]},{id:1817,hanja:"祢",strokes:"10",def:{en:["one"],kr:["아비사당","니"]},hunum:[{kor:"니",def:"아비사당"}]},{id:1818,hanja:"擎",strokes:"17",def:{en:["lift up","hold up","support"],kr:["들","경"]},hunum:[{kor:"경",def:"들"}]},{id:1819,hanja:"喩",strokes:"12",def:{en:["metaphor"],kr:["비유할","유"]},hunum:[{kor:"유",def:"깨우쳐 줄"}]},{id:1820,hanja:"忤",strokes:"7",def:{en:["insubordinate","stubborn","wrong"],kr:["미워할","오"]},hunum:[{kor:"오",def:"거스릴"}]},{id:1821,hanja:"莻",strokes:"13",def:{en:["late"],kr:["늦을","늦"]},hunum:[{kor:"늦",def:"늦을"}]},{id:1822,hanja:"喪",strokes:"12",def:{en:["mourning","mourn","funeral"],kr:["죽을","상"]},hunum:[{kor:"상",def:"죽을"}]},{id:1823,hanja:"擐",strokes:"16",def:{en:["to put on"],kr:["입을","환"]},hunum:[{kor:"환",def:"입을"}]},{id:1824,hanja:"漌",strokes:"14",def:{en:[],kr:["맑을","근"]},hunum:[{kor:"근",def:"맑을"}]},{id:1825,hanja:"喫",strokes:"12",def:{en:["eat","drink","suffer","endure","bear"],kr:["마실","끽"]},hunum:[{kor:"끽",def:"마실"}]},{id:1826,hanja:"莽",strokes:"12",def:{en:["thicket","underbrush","poisonous"],kr:["우거질","망"]},hunum:[{kor:"망",def:"우거질"}]},{id:1827,hanja:"鴟",strokes:"16",def:{en:["kite","horned owl","wine cups"],kr:["올빼미","치"]},hunum:[{kor:"치",def:"솔개"}]},{id:1828,hanja:"袋",strokes:"11",def:{en:["pocket","bag","sack","pouch"],kr:["자루","대"]},hunum:[{kor:"대",def:"자루"}]},{id:1829,hanja:"祥",strokes:"11",def:{en:["good luck","good omen","happiness"],kr:["상서로울","상"]},hunum:[{kor:"상",def:"상서로울"}]},{id:1830,hanja:"喬",strokes:"12",def:{en:["tall","lofty","proud","stately"],kr:["높을","교"]},hunum:[{kor:"교",def:"높을"}]},{id:1831,hanja:"莾",strokes:"14",def:{en:[],kr:["마디","짧은","대","망"]},hunum:[{kor:"망",def:"마디 짧은 대"}]},{id:1832,hanja:"擒",strokes:"16",def:{en:["catch","capture","seize","arrest"],kr:["사로잡을","금"]},hunum:[{kor:"금",def:"사로잡을"}]},{id:1833,hanja:"喭",strokes:"12",def:{en:["condole with","coarse"],kr:["조문할","언"]},hunum:[{kor:"안",def:"추솔할"},{kor:"언",def:"조문할"}]},{id:1834,hanja:"忨",strokes:"7",def:{en:[],kr:["사랑할","완"]},hunum:[{kor:"완",def:"탐할"}]},{id:1835,hanja:"鋤",strokes:"15",def:{en:["hoe","eradicate"],kr:["호미","서"]},hunum:[{kor:"서",def:"호미"}]},{id:1836,hanja:"莿",strokes:"14",def:{en:["thorn"],kr:["풀가시","자"]},hunum:[{kor:"자",def:"풀가시"}]},{id:1837,hanja:"袍",strokes:"11",def:{en:["long gown","robe","cloak"],kr:["앞섶","포"]},hunum:[{kor:"포",def:"도포"}]},{id:1838,hanja:"祧",strokes:"11",def:{en:["an ancestral hall"],kr:["조묘","조"]},hunum:[{kor:"조",def:"조묘"}]},{id:1839,hanja:"鋥",strokes:"15",def:{en:[]},hunum:[{kor:"정",def:"칼날 세울"}]},{id:1840,hanja:"漏",strokes:"14",def:{en:["leak","drip","funnel","hour glass"],kr:["샐","루"]},hunum:[{kor:"루",def:"샐"}]},{id:1841,hanja:"單",strokes:"12",def:{en:["single","individual","only","lone"],kr:["고을이름","선"]},hunum:[{kor:"단",def:"홀로"},{kor:"선",def:"고을이름"}]},{id:1842,hanja:"票",strokes:"11",def:{en:["slip of paper or bamboo","ticket"],kr:["날랠","표"]},hunum:[{kor:"표",def:"쪽지"}]},{id:1843,hanja:"擔",strokes:"16",def:{en:["carry","bear","undertake"],kr:["질","담"]},hunum:[{kor:"담",def:"질"}]},{id:1844,hanja:"跼",strokes:"14",def:{en:["bent","stooped","crouched","contract"],kr:["구부릴","국"]},hunum:[{kor:"국",def:"구부릴"}]},{id:1845,hanja:"擕",strokes:"16",def:{en:[],kr:["携와","同字"]},hunum:[{kor:"휴",def:"이끌"}]},{id:1846,hanja:"快",strokes:"7",def:{en:["rapid","quick","speedy","fast","soon"],kr:["빠를","쾌"]},hunum:[{kor:"쾌",def:"기분이 좋을"}]},{id:1847,hanja:"偁",strokes:"11",def:{en:["state"],kr:["稱의","本字"]},hunum:[{kor:"칭",def:"일컫을"}]},{id:1848,hanja:"漑",strokes:"14",def:{en:["water"],kr:["물","천천히","흐를","개"]},hunum:[{kor:"개",def:"물 댈"}]},{id:1849,hanja:"喰",strokes:"12",def:{en:["to eat","drink"],kr:["먹을","식"]},hunum:[{kor:"식",def:"먹을"}]},{id:1850,hanja:"鴣",strokes:"16",def:{en:["species of Taiwan pigeon"],kr:["자고","고"]},hunum:[{kor:"고",def:"자고"}]},{id:1851,hanja:"跽",strokes:"14",def:{en:["to kneel for a long time","to go down on hands and knees"],kr:["꿇어앉을","기"]},hunum:[{kor:"기",def:"꿇어앉을"}]},{id:1852,hanja:"擗",strokes:"16",def:{en:["to beat the breast"],kr:["가슴칠","벽"]},hunum:[{kor:"벽",def:"가슴칠"}]},{id:1853,hanja:"漓",strokes:"13",def:{en:["river in Guangxi province"],kr:["스며들","리"]},hunum:[{kor:"리",def:"스며들"}]},{id:1854,hanja:"忭",strokes:"7",def:{en:["delighted","pleased"],kr:["기뻐할","변"]},hunum:[{kor:"변",def:"기뻐할"}]},{id:1855,hanja:"偃",strokes:"11",def:{en:["cease","lay off","lay down"],kr:["자빠질","언"]},hunum:[{kor:"언",def:"자빠질"}]},{id:1856,hanja:"鋪",strokes:"15",def:{en:["spread out","arrange","shop","store","place to sleep","bed"],kr:["아플","포"]},hunum:[{kor:"포",def:"전방"}]},{id:1857,hanja:"袒",strokes:"11",def:{en:["strip","lay bare","bared","naked"],kr:["솔기","터질","탄"]},hunum:[{kor:"단",def:"웃옷 벗을"},{kor:"탄",def:"솔기 터질"}]},{id:1858,hanja:"擘",strokes:"16",def:{en:["thumb","break","tear open","rip"],kr:["엄지손가락","벽"]},hunum:[{kor:"벽",def:"엄지손가락"}]},{id:1859,hanja:"演",strokes:"14",def:{en:["perform","put on","exercise"],kr:["넓힐","연"]},hunum:[{kor:"연",def:"펼칠"}]},{id:1860,hanja:"喲",strokes:"12",def:{en:["ah","final particle"],kr:["감탄하는","어조사","약"]},hunum:[{kor:"약",def:"감탄하는 어조사"}]},{id:1861,hanja:"忮",strokes:"7",def:{en:["stubborn","perverse","aggressive"],kr:["해칠","기"]},hunum:[{kor:"기",def:"해칠"}]},{id:1862,hanja:"偄",strokes:"11",def:{en:["weak"],kr:["공손할","연"]},hunum:[{kor:"난",def:"언약할"},{kor:"연",def:"연약할"}]},{id:1863,hanja:"鴦",strokes:"16",def:{en:["female mandarin duck"],kr:["암원앙새","앙"]},hunum:[{kor:"앙",def:"암원앙새"}]},{id:1864,hanja:"漕",strokes:"14",def:{en:["transport by water","canal transportation"],kr:["배로","실어","나를","조"]},hunum:[{kor:"조",def:"배로 실어 나를"}]},{id:1865,hanja:"祭",strokes:"11",def:{en:["sacrifice to","worship"],kr:["제사","채"]},hunum:[{kor:"제",def:"제사"},{kor:"채",def:"제사"}]},{id:1866,hanja:"喳",strokes:"12",def:{en:["whispering"],kr:["예하고","대답하는","소리","사"]},hunum:[{kor:"사",def:"예하고 대답하는 소리"}]},{id:1867,hanja:"偅",strokes:"11",def:{en:[],kr:["흐리멍텅할","동"]},hunum:[{kor:"동",def:"흐리멍텅할"}]},{id:1868,hanja:"偆",strokes:"11",def:{en:[],kr:["두터울","춘"]},hunum:[{kor:"춘",def:"가멸할"}]},{id:1869,hanja:"據",strokes:"16",def:{en:["to occupy","take possession of","a base"],kr:["짚을","거"]},hunum:[{kor:"거",def:"의지할"}]},{id:1870,hanja:"鴨",strokes:"16",def:{en:["duck","Anas species"],kr:["오리","압"]},hunum:[{kor:"압",def:"오리"}]},{id:1871,hanja:"忱",strokes:"7",def:{en:["truth","sincerity","sincere"],kr:["정성","침"]},hunum:[{kor:"침",def:"믿을"}]},{id:1872,hanja:"琁",strokes:"11",def:{en:["beautiful jade","star"],kr:["옥","선"]},hunum:[{kor:"선",def:"옥"}]},{id:1873,hanja:"假",strokes:"11",def:{en:["falsehood","deception","vacation"],kr:["거짓","하"]},hunum:[{kor:"가",def:"거짓"},{kor:"하",def:"거짓"}]},{id:1874,hanja:"鋭",strokes:"15",def:{en:["sharp"],kr:["銳와","同字"]},hunum:[{kor:"예",def:"날카로울"},{kor:"태",def:"창"}]},{id:1875,hanja:"袖",strokes:"11",def:{en:["sleeve","put something in sleeve"],kr:["소매","수"]},hunum:[{kor:"수",def:"소매"}]},{id:1876,hanja:"営",strokes:"12",def:{en:["encampment","barracks","manage"],kr:["榮과","同字"]},hunum:[{kor:"영",def:"경영할"}]},{id:1877,hanja:"偈",strokes:"11",def:{en:["brave","martial","hasty","scudding"],kr:["글귀","게"]},hunum:[{kor:"걸",def:"힘 빼두를"},{kor:"게",def:"쉴"}]},{id:1878,hanja:"媄",strokes:"12",def:{en:[],kr:["빛","고울","미"]},hunum:[{kor:"미",def:"빛 고울"}]},{id:1879,hanja:"袗",strokes:"11",def:{en:["unlined garments","hem of garment"],kr:["홑옷","진"]},hunum:[{kor:"진",def:"홑옷"}]},{id:1880,hanja:"球",strokes:"11",def:{en:["ball","sphere","globe","round"],kr:["옥경쇠","구"]},hunum:[{kor:"구",def:"옥경쇠"}]},{id:1881,hanja:"偉",strokes:"11",def:{en:["great","robust","extraordinary"],kr:["기특할","위"]},hunum:[{kor:"위",def:"클"}]},{id:1882,hanja:"琄",strokes:"11",def:{en:[]},hunum:[{kor:"현",def:"옥 모양"}]},{id:1883,hanja:"喸",strokes:"12",def:{en:["place name"],kr:["땅이름","폿"]},hunum:[{kor:"폿",def:"땅이름"}]},{id:1884,hanja:"漙",strokes:"14",def:{en:["dewy"],kr:["이슬방울","맺을","단"]},hunum:[{kor:"단",def:"이슬방울 맺을"}]},{id:1885,hanja:"偊",strokes:"11",def:{en:["to walk alone","self"]},hunum:[{kor:"우",def:"혼자 걸을"}]},{id:1886,hanja:"琅",strokes:"11",def:{en:["a variety of white carnelian","pure"],kr:["옥","이름","랑"]},hunum:[{kor:"랑",def:"옥 이름"}]},{id:1887,hanja:"漚",strokes:"14",def:{en:["soak","steep","sodden","soaked","rotten","foam","froth"],kr:["물거품","구"]},hunum:[{kor:"구",def:"물거품"}]},{id:1888,hanja:"念",strokes:"8",def:{en:["think of","recall","study"],kr:["생각","념"]},hunum:[{kor:"념",def:"생각"}]},{id:1889,hanja:"擠",strokes:"17",def:{en:["crowd","squeeze","push against"],kr:["물리칠","제"]},hunum:[{kor:"제",def:"물리칠"}]},{id:1890,hanja:"理",strokes:"11",def:{en:["reason","logic","manage"],kr:["다스릴","리"]},hunum:[{kor:"리",def:"다스릴"}]},{id:1891,hanja:"繁",strokes:"17",def:{en:["complicated","complex","difficult"],kr:["많을","번"]},hunum:[{kor:"반",def:"뱃대끈"},{kor:"번",def:"많을"}]},{id:1892,hanja:"偌",strokes:"11",def:{en:["thus","so","like","such"],kr:["너무","야"]},hunum:[{kor:"야",def:"성씨"}]},{id:1893,hanja:"鋲",strokes:"15",def:{en:["rivet"],kr:["징","병"]},hunum:[{kor:"병",def:"넓은 못"}]},{id:1894,hanja:"忷",strokes:"7",variant:"恟",def:{en:["variant of","scared","nervous"],kr:["恟"]},hunum:[{kor:"흉",def:"두려워할"}]},{id:1895,hanja:"琇",strokes:"11",def:{en:["coarse variety of jasper or jade"],kr:["옥돌","수"]},hunum:[{kor:"수",def:"귀막이"}]},{id:1896,hanja:"擡",strokes:"17",def:{en:["carry","raise","lift"],kr:["들","대"]},hunum:[{kor:"대",def:"들"}]},{id:1897,hanja:"喻",strokes:"12",def:{en:["metaphor","analogy","example","like"],kr:["喩와","同字"]},hunum:[{kor:"유",def:"깨우칠"}]},{id:1898,hanja:"擢",strokes:"17",def:{en:["pull up","draw up","select"],kr:["이길","탁"]},hunum:[{kor:"탁",def:"뽑을"}]},{id:1899,hanja:"袛",strokes:"11",def:{en:[],kr:["속적삼","저"]},hunum:[{kor:"저",def:"속적삼"}]},{id:1900,hanja:"繃",strokes:"17",def:{en:["bind","draw firmly","strap"],kr:["묶을","붕"]},hunum:[{kor:"붕",def:"묶을"}]},{id:1901,hanja:"忸",strokes:"7",def:{en:["blush","be bashful","be ashamed"],kr:["익을","뉴"]},hunum:[{kor:"뉴",def:"익을"}]},{id:1902,hanja:"偎",strokes:"11",def:{en:["cling to","cuddle","embrace","fondle"],kr:["가물거릴","외"]},hunum:[{kor:"외",def:"사랑할"}]},{id:1903,hanja:"韁",strokes:"22",def:{en:["reins","halter","bridle"],kr:["고삐","강"]},hunum:[{kor:"강",def:"고삐"}]},{id:1904,hanja:"偏",strokes:"11",def:{en:["inclined one side","slanting"],kr:["간사한","모양","편"]},hunum:[{kor:"편",def:"치우칠"}]},{id:1905,hanja:"祷",strokes:"12",def:{en:["pray","entreat","beg","plead","prayer"]},hunum:[{kor:"도",def:"빌"}]},{id:1906,hanja:"繄",strokes:"17",def:{en:["be","particle","sigh","alas"],kr:["탄식하는","소리","예"]},hunum:[{kor:"예",def:"검푸른 비단"}]},{id:1907,hanja:"擣",strokes:"17",def:{en:["hull","thresh","beat","attack"],kr:["찧을","도"]},hunum:[{kor:"도",def:"찧을"}]},{id:1908,hanja:"鴰",strokes:"17",def:{en:["the crow"],kr:["재두루미","괄"]},hunum:[{kor:"괄",def:"재두루미"}]},{id:1909,hanja:"袝",strokes:"11",def:{en:[]},hunum:[{kor:"부",def:"나들이옷"}]},{id:1910,hanja:"琉",strokes:"10",def:{en:["sparkling stone","glazed","opaque"],kr:["유리","류"]},hunum:[{kor:"류",def:"유리"}]},{id:1911,hanja:"繅",strokes:"17",def:{en:["draw","reel silk from cocoons","elegant compositions"],kr:["고치","실","뽑을","소"]},hunum:[{kor:"소",def:"고치 실 뽑을"}]},{id:1912,hanja:"偐",strokes:"11",def:{en:["false","counterfeit","spurious"],kr:["거짓","안"]},hunum:[{kor:"안",def:"거짓"}]},{id:1913,hanja:"韃",strokes:"22",def:{en:["tatars"],kr:["칠","달"]},hunum:[{kor:"달",def:"칠"}]},{id:1914,hanja:"袞",strokes:"11",def:{en:["ceremonial dress worn by the emperor"],kr:["곤룡포","곤"]},hunum:[{kor:"곤",def:"곤룡포"}]},{id:1915,hanja:"繆",strokes:"17",def:{en:["wind around","bind","prepare"],kr:["어그러질","류"]},hunum:[{kor:"무",def:"묶을"},{kor:"유",def:"어그러질"}]},{id:1916,hanja:"擥",strokes:"19",def:{en:["drive away","expel","oust"],kr:["攬과","同字"]},hunum:[{kor:"람",def:"가질"}]},{id:1917,hanja:"漠",strokes:"14",def:{en:["desert","aloof","indifferent","cool"],kr:["사막","막"]},hunum:[{kor:"막",def:"사막"}]},{id:1918,hanja:"喿",strokes:"13",def:{en:["chirping of birds"],kr:["새","때지어","울","소"]},hunum:[{kor:"소",def:"새 때지어 울"}]},{id:1919,hanja:"忻",strokes:"7",def:{en:["delightful","joyful","pleasant"],kr:["기뻐할","흔"]},hunum:[{kor:"흔",def:"기뻐할"}]},{id:1920,hanja:"偒",strokes:"11",def:{en:[],kr:["헌걸찰","탕"]},hunum:[{kor:"탕",def:"헌걸찰"}]},{id:1921,hanja:"擦",strokes:"17",def:{en:["wipe","scrub","rub","scour","brush"],kr:["뿌릴","찰"]},hunum:[{kor:"찰",def:"뿌릴"}]},{id:1922,hanja:"祺",strokes:"13",def:{en:["good luck","good fortune"],kr:["복","기"]},hunum:[{kor:"기",def:"복"}]},{id:1923,hanja:"繇",strokes:"17",def:{en:["reason","cause"],kr:["성할","요"]},hunum:[{kor:"요",def:"따를"}]},{id:1924,hanja:"媍",strokes:"12",def:{en:[],kr:["婦와","同字"]},hunum:[{kor:"부",def:"며느리"}]},{id:1925,hanja:"鋸",strokes:"16",def:{en:["a saw","to saw","amputate"],kr:["다리","꺾는","형벌","거"]},hunum:[{kor:"거",def:"톱"}]},{id:1926,hanja:"漢",strokes:"14",def:{en:["the Chinese people","Chinese language"],kr:["한수","한"]},hunum:[{kor:"한",def:"한수"}]},{id:1927,hanja:"鋹",strokes:"16",def:{en:["sharp","a keen edge","sharp point"],kr:["날카로울","청"]},hunum:[{kor:"청",def:"날카로울"}]},{id:1928,hanja:"韆",strokes:"24",def:{en:["swing"],kr:["그네","천"]},hunum:[{kor:"천",def:"그네"}]},{id:1929,hanja:"繈",strokes:"18",def:{en:["string of copper coins","swaddling clothes"],kr:["繦의","本字"]},hunum:[{kor:"강",def:"포대기"}]},{id:1930,hanja:"擧",strokes:"18",def:{en:["raise","lift up","recommend"],kr:["일걸을","거"]},hunum:[{kor:"거",def:"들"}]},{id:1931,hanja:"忼",strokes:"7",def:{en:[],kr:["탄식할","강"]},hunum:[{kor:"강",def:"강개할"}]},{id:1932,hanja:"偓",strokes:"11",def:{en:["to fuss"],kr:["거리낄","악"]},hunum:[{kor:"악",def:"거리낄"}]},{id:1933,hanja:"忽",strokes:"8",def:{en:["suddenly","abruptly","neglect"],kr:["소흘히","할","홀"]},hunum:[{kor:"홀",def:"소흘히 할"}]},{id:1934,hanja:"祼",strokes:"13",def:{en:["libation"],kr:["강신제","관"]},hunum:[{kor:"관",def:"강신제"}]},{id:1935,hanja:"漣",strokes:"14",def:{en:["flowing water","ripples","weeping"],kr:["물놀이","련"]},hunum:[{kor:"련",def:"물놀이"}]},{id:1936,hanja:"鋺",strokes:"16",def:{en:["a metal bowl"],kr:["저울","바탕","원"]},hunum:[{kor:"원",def:"저울 바탕"}]},{id:1937,hanja:"偕",strokes:"11",def:{en:["together","be in order"],kr:["화할","혜"]},hunum:[{kor:"해",def:"함께할"},{kor:"혜",def:"같을"}]},{id:1938,hanja:"琎",strokes:"11",def:{en:[],kr:["옥돌","진"]},hunum:[{kor:"진",def:"옥돌"}]},{id:1939,hanja:"繊",strokes:"17",def:{en:["fine","delicate","minute","graceful"],kr:["가늘","섬"]},hunum:[{kor:"섬",def:"가늘"}]},{id:1940,hanja:"鴶",strokes:"17",def:{en:[],kr:["뻐꾸기","알"]},hunum:[{kor:"알",def:"뻐꾸기"}]},{id:1941,hanja:"袢",strokes:"11",def:{en:["robe"],kr:["속옷","번"]},hunum:[{kor:"번",def:"속옷"}]},{id:1942,hanja:"韉",strokes:"26",def:{en:["saddle blanket"],kr:["언치","천"]},hunum:[{kor:"천",def:"언치"}]},{id:1943,hanja:"偖",strokes:"11",def:{en:["rip up","tear down","raise","haul"],kr:["찢을","차"]},hunum:[{kor:"차",def:"찢을"}]},{id:1944,hanja:"繋",strokes:"19",def:{en:["attach","connect","unite","fasten"]},hunum:[{kor:"계",def:"맬"}]},{id:1945,hanja:"忿",strokes:"8",def:{en:["get angry","fury","exasperation"],kr:["성낼","분"]},hunum:[{kor:"분",def:"성낼"}]},{id:1946,hanja:"鋼",strokes:"16",def:{en:["steel","hard","strong","tough"],kr:["쇠","강"]},hunum:[{kor:"강",def:"쇠"}]},{id:1947,hanja:"鋽",strokes:"16",def:{en:[],kr:["불리지","않은","쇠","조"]},hunum:[{kor:"조",def:"불리지 않은 쇠"}]},{id:1948,hanja:"媒",strokes:"12",def:{en:["go","matchmaker","medium"],kr:["중매","매"]},hunum:[{kor:"매",def:"중매"}]},{id:1949,hanja:"袤",strokes:"11",def:{en:["longitude","lengthwise","length"],kr:["길이","무"]},hunum:[{kor:"무",def:"길이"}]},{id:1950,hanja:"媓",strokes:"12",def:{en:[],kr:["어머니","황"]},hunum:[{kor:"황",def:"어머니"}]},{id:1951,hanja:"祿",strokes:"13",def:{en:["blessing","happiness","prosperity"],kr:["복","록"]},hunum:[{kor:"록",def:"복"}]},{id:1952,hanja:"繍",strokes:"17",def:{en:["embroider","embroidery","ornament"],kr:["繡와","同字"]},hunum:[{kor:"수",def:"수놓을"}]},{id:1953,hanja:"擬",strokes:"17",def:{en:["draft","intend","plan","propose"],kr:["흡사할","의"]},hunum:[{kor:"의",def:"의논할"}]},{id:1954,hanja:"偘",strokes:"11",def:{en:["ancient family name"],kr:["侃과","同字"]},hunum:[{kor:"간",def:"굳셀"}]},{id:1955,hanja:"韋",strokes:"9",def:{en:["tanned leather","surname","KangXi radical number"],kr:["성씨","위"]},hunum:[{kor:"위",def:"다룬 가죽"}]},{id:1956,hanja:"擭",strokes:"17",def:{en:["trap catch animals","snare","seize"],kr:["함정","화"]},hunum:[{kor:"화",def:"덫"}]},{id:1957,hanja:"鴻",strokes:"17",def:{en:["species of wild swan","vast"],kr:["큰","기러기","홍"]},hunum:[{kor:"홍",def:"큰 기러기"}]},{id:1958,hanja:"琓",strokes:"11",def:{en:[]},hunum:[{kor:"완",def:"옥 이름"}]},{id:1959,hanja:"做",strokes:"11",def:{en:["work","make","act"],kr:["지을","주"]},hunum:[{kor:"자",def:"지을"},{kor:"주",def:"지을"}]},{id:1960,hanja:"媕",strokes:"12",def:{en:["undecided"],kr:["머뭇거릴","암"]},hunum:[{kor:"암",def:"머뭇거릴"}]},{id:1961,hanja:"韍",strokes:"14",def:{en:["a leather knee"],kr:["폐슬","불"]},hunum:[{kor:"불",def:"폐슬"}]},{id:1962,hanja:"繐",strokes:"18",def:{en:["fine cloth"],kr:["가늘고","성긴","베","세"]},hunum:[{kor:"세",def:"가늘고 성긴 베"}]},{id:1963,hanja:"漪",strokes:"14",def:{en:["ripples on water","swirling"],kr:["물놀이칠","의"]},hunum:[{kor:"의",def:"물놀이칠"}]},{id:1964,hanja:"偛",strokes:"11",def:{en:[],kr:["키작을","삽"]},hunum:[{kor:"삽",def:"키작을"}]},{id:1965,hanja:"擯",strokes:"17",def:{en:["exclude","expel","reject","usher"],kr:["물리칠","빈"]},hunum:[{kor:"빈",def:"물리칠"}]},{id:1966,hanja:"漫",strokes:"14",def:{en:["overflow of water","spreading"],kr:["질펀할","만"]},hunum:[{kor:"만",def:"질펀할"}]},{id:1967,hanja:"漬",strokes:"14",def:{en:["soak","steep","dye","stains","sodden"],kr:["담글","지"]},hunum:[{kor:"지",def:"담글"}]},{id:1968,hanja:"停",strokes:"11",def:{en:["stop","suspend","delay","suitable"],kr:["늦어질","정"]},hunum:[{kor:"정",def:"머무를"}]},{id:1969,hanja:"韐",strokes:"15",def:{en:["knee"],kr:["가죽바지","갑"]},hunum:[{kor:"갑",def:"가죽바지"}]},{id:1970,hanja:"袪",strokes:"11",def:{en:["sleeves","cuff"],kr:["소매","아귀","거"]},hunum:[{kor:"거",def:"소매"}]},{id:1971,hanja:"被",strokes:"11",def:{en:["passive indicator","bedding"],kr:["창피할","피"]},hunum:[{kor:"피",def:"이불"}]},{id:1972,hanja:"繒",strokes:"18",def:{en:["silk fabrics","surname"],kr:["비단","증"]},hunum:[{kor:"증",def:"비단"}]},{id:1973,hanja:"擱",strokes:"17",def:{en:["place","put","lay down","delay"],kr:["놓을","각"]},hunum:[{kor:"각",def:"놓을"}]},{id:1974,hanja:"漭",strokes:"14",def:{en:["vast","expansive"],kr:["넓을","망"]},hunum:[{kor:"망",def:"넓을"}]},{id:1975,hanja:"偝",strokes:"11",def:{en:["not facing","desert"],kr:["버릴","배"]},hunum:[{kor:"배",def:"버릴"}]},{id:1976,hanja:"擲",strokes:"18",def:{en:["throw","hurl","cast","fling"],kr:["던질","척"]},hunum:[{kor:"척",def:"던질"}]},{id:1977,hanja:"槀",strokes:"14",def:{en:["draft","manuscript"],kr:["마를","고"]},hunum:[{kor:"고",def:"마를"}]},{id:1978,hanja:"偞",strokes:"11",def:{en:[],kr:["얼굴","예쁠","엽"]},hunum:[{kor:"엽",def:"가벼울"}]},{id:1979,hanja:"媚",strokes:"12",def:{en:["charming","attractive","flatter"],kr:["풍치가","아름다울","미"]},hunum:[{kor:"미",def:"아첨할"}]},{id:1980,hanja:"偟",strokes:"11",def:{en:["agitated","alarmed"],kr:["노닐","황"]},hunum:[{kor:"황",def:"노닐"}]},{id:1981,hanja:"韓",strokes:"17",def:{en:["fence","surname","Korea"],kr:["나라","이름","한"]},hunum:[{kor:"한",def:"나라 이름"}]},{id:1982,hanja:"織",strokes:"18",def:{en:["weave","knit","organize","unite"],kr:["짤","직"]},hunum:[{kor:"직",def:"짤"}]},{id:1983,hanja:"媛",strokes:"12",def:{en:["beauty","beautiful woman"],kr:["여자","벼슬이름","원"]},hunum:[{kor:"원",def:"아리따운 여자"}]},{id:1984,hanja:"荀",strokes:"12",def:{en:["surname","ancient state","plant"],kr:["성씨","순"]},hunum:[{kor:"순",def:"풀 이름"}]},{id:1985,hanja:"繕",strokes:"18",def:{en:["repair","mend","rewrite","transcribe"],kr:["기울","선"]},hunum:[{kor:"선",def:"기울"}]},{id:1986,hanja:"擴",strokes:"18",def:{en:["expand","enlarge","stretch"],kr:["넓힐","확"]},hunum:[{kor:"광",def:"넓힐"},{kor:"확",def:"넓힐"}]},{id:1987,hanja:"漰",strokes:"14",def:{en:["roar"]},hunum:[{kor:"불",def:"물결치는 소리"}]},{id:1988,hanja:"槁",strokes:"14",def:{en:["wither","withered","rotten","dead"],kr:["槀와","同字"]},hunum:[{kor:"고",def:"마를"}]},{id:1989,hanja:"偠",strokes:"11",def:{en:[],kr:["허리","가늘","요"]},hunum:[{kor:"요",def:"허리 가늘"}]},{id:1990,hanja:"琛",strokes:"12",def:{en:["treasure","valuables"],kr:["보배","침"]},hunum:[{kor:"침",def:"보배"}]},{id:1991,hanja:"繖",strokes:"18",def:{en:["umbrella","parasol","parachute"],kr:["일산","산"]},hunum:[{kor:"산",def:"일산"}]},{id:1992,hanja:"漱",strokes:"14",def:{en:["gargle","rinse","wash","scour"],kr:["빨래할","수"]},hunum:[{kor:"수",def:"양치질할"}]},{id:1993,hanja:"偢",strokes:"11",def:{en:["to stare at"],kr:["얼이","빠져","있을","초"]},hunum:[{kor:"초",def:"얼이 빠져 있을"}]},{id:1994,hanja:"漲",strokes:"14",def:{en:["rise in price"],kr:["불을","창"]},hunum:[{kor:"창",def:"불을"}]},{id:1995,hanja:"繗",strokes:"18",def:{en:[],kr:["이을","린"]},hunum:[{kor:"린",def:"이을"}]},{id:1996,hanja:"槃",strokes:"14",def:{en:["tray","turn","rotate","search"],kr:["쟁반","반"]},hunum:[{kor:"반",def:"쟁반"}]},{id:1997,hanja:"荃",strokes:"12",def:{en:["aromatic herb","fine cloth"],kr:["전풀","전"]},hunum:[{kor:"전",def:"향풀"}]},{id:1998,hanja:"漳",strokes:"14",def:{en:["name of a river in Henan"],kr:["강이름","장"]},hunum:[{kor:"장",def:"강이름"}]},{id:1999,hanja:"媟",strokes:"12",def:{en:["lust after","act indecently","lewd"],kr:["깔볼","설"]},hunum:[{kor:"설",def:"깔볼"}]},{id:2000,hanja:"袱",strokes:"12",def:{en:["a piece of cloth used wrap bundles"],kr:["보","복"]},hunum:[{kor:"복",def:"보"}]},{id:2001,hanja:"繙",strokes:"18",def:{en:["to interpret","to flap","flutter in the wind"],kr:["되풀이","풀이할","번"]},hunum:[{kor:"번",def:"되풀이 풀이할"}]},{id:2002,hanja:"袳",strokes:"12",def:{en:["spread one"],kr:["옷","펼칠","치"]},hunum:[{kor:"치",def:"옷 펼칠"}]},{id:2003,hanja:"繚",strokes:"18",def:{en:["wind round","rap around","bind"],kr:["감길","료"]},hunum:[{kor:"료",def:"감길"}]},{id:2004,hanja:"健",strokes:"11",def:{en:["strong","robust","healthy","strength"],kr:["탐할","견"]},hunum:[{kor:"건",def:"굳셀"},{kor:"견",def:"탐할"}]},{id:2005,hanja:"擺",strokes:"18",def:{en:["put","place","display","swing","sway"],kr:["손뼉칠","파"]},hunum:[{kor:"파",def:"열"}]},{id:2006,hanja:"趁",strokes:"12",def:{en:["take advantage of","avail oneself"],kr:["좇을","진"]},hunum:[{kor:"전",def:"밟을"},{kor:"진",def:"좇을"}]},{id:2007,hanja:"琠",strokes:"12",def:{en:["a gem used as ear plug","a jade earring"]},hunum:[{kor:"전",def:"귀막이"}]},{id:2008,hanja:"媢",strokes:"12",def:{en:["be jealous of","be envious"],kr:["강새암","할","모"]},hunum:[{kor:"모",def:"강새암 할"}]},{id:2009,hanja:"韙",strokes:"18",def:{en:["right","proper","perpriety"],kr:["옳을","위"]},hunum:[{kor:"위",def:"옳을"}]},{id:2010,hanja:"袴",strokes:"12",def:{en:["pants","trousers","panties"],kr:["바지","고"]},hunum:[{kor:"고",def:"바지"}]},{id:2011,hanja:"荆",strokes:"12",def:{en:["thorns","brambles","my wife","cane"],kr:["가시","형"]},hunum:[{kor:"형",def:"광대싸리"}]},{id:2012,hanja:"琡",strokes:"12",def:{en:[]},hunum:[{kor:"수",def:"옥 이름"}]},{id:2013,hanja:"荇",strokes:"12",def:{en:["a water plant","Nymphoides peltalum"],kr:["조아기","행"]},hunum:[{kor:"행",def:"마름풀"}]},{id:2014,hanja:"琢",strokes:"12",def:{en:["polish jade","cut jade"],kr:["가릴","탁"]},hunum:[{kor:"탁",def:"옥 쪼을"}]},{id:2015,hanja:"偨",strokes:"11",def:{en:["uneven"],kr:["오르락","내리락할","치"]},hunum:[{kor:"치",def:"가지런하지 않을"}]},{id:2016,hanja:"媤",strokes:"12",def:{en:["husband"],kr:["시집","시"]},hunum:[{kor:"시",def:"시집"}]},{id:2017,hanja:"漸",strokes:"14",def:{en:["gradually"],kr:["점점","참"]},hunum:[{kor:"점",def:"번질"},{kor:"참",def:"점점"}]},{id:2018,hanja:"繞",strokes:"18",def:{en:["entwine","wind around","surround"],kr:["둘릴","요"]},hunum:[{kor:"요",def:"얽힐"}]},{id:2019,hanja:"槊",strokes:"14",def:{en:["spear","lance"],kr:["창","삭"]},hunum:[{kor:"삭",def:"창"}]},{id:2020,hanja:"偩",strokes:"11",def:{en:["follow"],kr:["본뜰","부"]},hunum:[{kor:"부",def:"본뜰"}]},{id:2021,hanja:"韜",strokes:"19",def:{en:["sheath","scabbard","bow case"],kr:["활집","도"]},hunum:[{kor:"도",def:"활집"}]},{id:2022,hanja:"偪",strokes:"11",def:{en:["compel","pressure","force","bother"],kr:["가까울","핍"]},hunum:[{kor:"핍",def:"핍박할"}]},{id:2023,hanja:"超",strokes:"12",def:{en:["jump over","leap over","surpass"],kr:["뛰어넘을","초"]},hunum:[{kor:"초",def:"뛰어넘을"}]},{id:2024,hanja:"草",strokes:"12",def:{en:["grass","straw","thatch","herbs"],kr:["풀","초"]},hunum:[{kor:"초",def:"풀"}]},{id:2025,hanja:"琤",strokes:"12",def:{en:["jade of jade being","tinkle"],kr:["옥소리","쟁"]},hunum:[{kor:"쟁",def:"옥소리"}]},{id:2026,hanja:"擾",strokes:"18",def:{en:["disturb","annoy","agitate"],kr:["번거로울","요"]},hunum:[{kor:"요",def:"길들일"}]},{id:2027,hanja:"構",strokes:"14",def:{en:["frame","building","structure"],kr:["집세울","구"]},hunum:[{kor:"구",def:"집세울"}]},{id:2028,hanja:"韝",strokes:"19",def:{en:["leather arm band"],kr:["깍지","구"]},hunum:[{kor:"구",def:"깍지"}]},{id:2029,hanja:"琥",strokes:"12",def:{en:["jewel in shape of tiger","amber"],kr:["호박","호"]},hunum:[{kor:"호",def:"호박"}]},{id:2030,hanja:"荊",strokes:"12",def:{en:["thorns","brambles","my wife","cane"],kr:["곤장","형"]},hunum:[{kor:"형",def:"모형나무"}]},{id:2031,hanja:"偫",strokes:"11",def:{en:["wait for","lay in"],kr:["갖출","치"]},hunum:[{kor:"치",def:"기다릴"}]},{id:2032,hanja:"槌",strokes:"14",def:{en:["hammer","mallet","strike","beat"],kr:["던질","퇴"]},hunum:[{kor:"추",def:"칠"},{kor:"퇴",def:"몽둥이"}]},{id:2033,hanja:"韞",strokes:"19",def:{en:["an orange color","hide","conceal"],kr:["붉은","빛","온"]},hunum:[{kor:"온",def:"감출"}]},{id:2034,hanja:"偬",strokes:"11",def:{en:["urgent"],kr:["傯의","俗字"]},hunum:[{kor:"총",def:"바쁠"}]},{id:2035,hanja:"槍",strokes:"14",def:{en:["spear","lance","gun","rifle"],kr:["창","창"]},hunum:[{kor:"쟁",def:"혜성"},{kor:"창",def:"창"}]},{id:2036,hanja:"琦",strokes:"12",def:{en:["gem","precious stone","jade"],kr:["옥","이름","기"]},hunum:[{kor:"기",def:"옥 이름"}]},{id:2037,hanja:"繡",strokes:"18",def:{en:["embroider","embroidery","ornament"],kr:["성씨","수"]},hunum:[{kor:"수",def:"수놓을"}]},{id:2038,hanja:"媧",strokes:"12",def:{en:["mythological snail goddess"],kr:["여자이름","왜"]},hunum:[{kor:"과",def:"사람 이름"},{kor:"왜",def:"여자이름"}]},{id:2039,hanja:"韠",strokes:"20",def:{en:["knee"],kr:["슬갑","필"]},hunum:[{kor:"필",def:"슬갑"}]},{id:2040,hanja:"漼",strokes:"14",def:{en:["having the appearance of depth"],kr:["눈서리","쌓일","최"]},hunum:[{kor:"최",def:"깊을"}]},{id:2041,hanja:"槎",strokes:"14",def:{en:["raft","time","occasion","to hew"],kr:["뗏목","차"]},hunum:[{kor:"차",def:"뗏목"}]},{id:2042,hanja:"繢",strokes:"18",def:{en:["draw","sketch","paint"],kr:["톱끝","궤"]},hunum:[{kor:"궤",def:"톱끝"}]},{id:2043,hanja:"偭",strokes:"11",def:{en:["transgress"],kr:["향할","면"]},hunum:[{kor:"면",def:"향할"}]},{id:2044,hanja:"琨",strokes:"12",def:{en:["beautiful jade","precious stones"],kr:["옥돌","곤"]},hunum:[{kor:"곤",def:"옥돌"}]},{id:2045,hanja:"韡",strokes:"21",def:{en:["gorgeous"],kr:["꽃","환히","필","위"]},hunum:[{kor:"위",def:"꽃 환히 필"}]},{id:2046,hanja:"繤",strokes:"18",def:{en:["edit"],kr:["지을","찬"]},hunum:[{kor:"찬",def:"지을"}]},{id:2047,hanja:"越",strokes:"12",def:{en:["exceed","go beyond","the more"],kr:["부들자리","활"]},hunum:[{kor:"월",def:"넘을"},{kor:"활",def:"부들자리"}]},{id:2048,hanja:"漾",strokes:"14",def:{en:["overflow","swirl","ripple","to be tosssed by waves"],kr:["물결","출렁거릴","양"]},hunum:[{kor:"양",def:"물결 출렁거릴"}]},{id:2049,hanja:"槐",strokes:"14",def:{en:["locust tree"],kr:["홰나무","괴"]},hunum:[{kor:"괴",def:"홰나무"}]},{id:2050,hanja:"偯",strokes:"11",def:{en:["sob"],kr:["울음","끝소리","의"]},hunum:[{kor:"의",def:"울음 끝소리"}]},{id:2051,hanja:"媪",strokes:"12",def:{en:["old woman","lower"],kr:["땅귀신","오"]},hunum:[{kor:"오",def:"할미"}]},{id:2052,hanja:"漿",strokes:"15",def:{en:["any thick fluid","starch","broth"],kr:["미음","장"]},hunum:[{kor:"장",def:"미음"}]},{id:2053,hanja:"荏",strokes:"12",def:{en:["beans","soft","pliable","herb"],kr:["들깨","임"]},hunum:[{kor:"임",def:"들깨"}]},{id:2054,hanja:"偰",strokes:"11",def:{en:[],kr:["맑을","설"]},hunum:[{kor:"설",def:"맑을"}]},{id:2055,hanja:"荐",strokes:"12",def:{en:["repeat","reoccur","recommend"],kr:["거듭할","천"]},hunum:[{kor:"건",def:"천거할"},{kor:"천",def:"거듭할"}]},{id:2056,hanja:"琪",strokes:"12",def:{en:["type of jade"],kr:["옥","기"]},hunum:[{kor:"기",def:"옥"}]},{id:2057,hanja:"繦",strokes:"19",def:{en:["string of copper coins","swaddling"],kr:["돈꿰미","강"]},hunum:[{kor:"강",def:"돈꿰미"}]},{id:2058,hanja:"荑",strokes:"12",def:{en:["sprouts","tares"],kr:["띠싹","제"]},hunum:[{kor:"이",def:"흰 비름"},{kor:"제",def:"띠싹"}]},{id:2059,hanja:"琫",strokes:"12",def:{en:["ornament"],kr:["칼집","장식","봉"]},hunum:[{kor:"봉",def:"칼집 장식"}]},{id:2060,hanja:"槓",strokes:"14",def:{en:["lever","pole","crowbar","sharpen","trunk"],kr:["지렛대","공"]},hunum:[{kor:"공",def:"지렛대"}]},{id:2061,hanja:"偲",strokes:"11",def:{en:["talented","urgent"],kr:["굳셀","시"]},hunum:[{kor:"시",def:"간절히 책망할"}]},{id:2062,hanja:"荒",strokes:"12",def:{en:["wasteland","desert","uncultivated"],kr:["거칠","황"]},hunum:[{kor:"황",def:"거칠"}]},{id:2063,hanja:"琬",strokes:"12",def:{en:["the virtue of a gentleman","jade"],kr:["아름다운","옥","완"]},hunum:[{kor:"완",def:"보석"}]},{id:2064,hanja:"啀",strokes:"11",def:{en:["gnaw","yell","scold"],kr:["물어뜯을","애"]},hunum:[{kor:"애",def:"물어뜯을"}]},{id:2065,hanja:"側",strokes:"11",def:{en:["side","incline","slant","lean"],kr:["아플","측"]},hunum:[{kor:"측",def:"곁"}]},{id:2066,hanja:"趎",strokes:"13",def:{en:[],kr:["사람이름","주"]},hunum:[{kor:"주",def:"사람이름"}]},{id:2067,hanja:"啁",strokes:"11",def:{en:["chirp","twitter","twittering"],kr:["새소리","주"]},hunum:[{kor:"조",def:"비웃을"},{kor:"주",def:"새소리"}]},{id:2068,hanja:"繩",strokes:"19",def:{en:["rope","string","cord","measure","restrain"],kr:["이을","승"]},hunum:[{kor:"승",def:"노끈"}]},{id:2069,hanja:"繪",strokes:"19",def:{en:["draw","sketch","paint"],kr:["그림","회"]},hunum:[{kor:"회",def:"그림"}]},{id:2070,hanja:"琮",strokes:"12",def:{en:["octagonal piece of jade with hole in middle"],kr:["옥홀","종"]},hunum:[{kor:"종",def:"옥홀"}]},{id:2071,hanja:"偵",strokes:"11",def:{en:["spy","reconnoiter","detective"],kr:["물을","정"]},hunum:[{kor:"정",def:"엿볼"}]},{id:2072,hanja:"啂",strokes:"11",def:{en:[]}},{id:2073,hanja:"趐",strokes:"13",def:{en:[],kr:["나아갈","혈"]},hunum:[{kor:"혈",def:"새가 떼로 날"}]},{id:2074,hanja:"琯",strokes:"12",def:{en:["a jade tube used as an instrument"],kr:["옥피리","관"]},hunum:[{kor:"관",def:"옥피리"}]},{id:2075,hanja:"繫",strokes:"19",def:{en:["attach","connect","unite","fasten"],kr:["맺을","계"]},hunum:[{kor:"계",def:"맬"}]},{id:2076,hanja:"偶",strokes:"11",def:{en:["accidentally","coincidently","an idol"],kr:["뜻밖에","우"]},hunum:[{kor:"우",def:"짝지울"}]},{id:2077,hanja:"啃",strokes:"11",def:{en:["gnaw","chew","bite"],kr:["입","다시는","소리","삽"]},hunum:[{kor:"삽",def:"입 다시는 소리"}]},{id:2078,hanja:"偷",strokes:"11",def:{en:["to steal","burglar","thief"],kr:["偸와","同字"]},hunum:[{kor:"투",def:"훔칠"}]},{id:2079,hanja:"啄",strokes:"11",def:{en:["to peck"],kr:["문","두드릴","탁"]},hunum:[{kor:"탁",def:"쪼을"}]},{id:2080,hanja:"趑",strokes:"13",def:{en:["can","to falter"],kr:["머뭇거릴","자"]},hunum:[{kor:"자",def:"머뭇거릴"}]},{id:2081,hanja:"琰",strokes:"12",def:{en:["jewel","gem","glitter of gems"],kr:["비취옥","염"]},hunum:[{kor:"염",def:"아름다운 옥"}]},{id:2082,hanja:"偸",strokes:"11",def:{en:["to steal"],kr:["인정머리없을","투"]},hunum:[{kor:"투",def:"훔칠"}]},{id:2083,hanja:"啅",strokes:"11",def:{en:[],kr:["啄과","同字"]},hunum:[{kor:"조",def:"시끄러울"},{kor:"탁",def:"쪼을"}]},{id:2084,hanja:"槙",strokes:"14",def:{en:["a twig","an ornamental evergreen"],kr:["자빠진","나무","전"]},hunum:[{kor:"전",def:"나무 끝"}]},{id:2085,hanja:"繭",strokes:"19",def:{en:["cocoon","callus","blister"],kr:["비단","견"]},hunum:[{kor:"견",def:"고치"}]},{id:2086,hanja:"媳",strokes:"13",def:{en:["daughter"],kr:["며느리","식"]},hunum:[{kor:"식",def:"며느리"}]},{id:2087,hanja:"往",strokes:"8",def:{en:["go","depart","past","formerly"],kr:["이따금","왕"]},hunum:[{kor:"왕",def:"갈"}]},{id:2088,hanja:"征",strokes:"8",def:{en:["invade","attack","conquer"],kr:["갈","정"]},hunum:[{kor:"정",def:"칠"}]},{id:2089,hanja:"荘",strokes:"12",def:{en:["village","hamlet","villa","surname"],kr:["莊의","俗字"]},hunum:[{kor:"장",def:"씩씩할"}]},{id:2090,hanja:"琲",strokes:"12",def:{en:["necklace"],kr:["구슬","꿰미","배"]},hunum:[{kor:"배",def:"구슬 꿰미"}]},{id:2091,hanja:"偹",strokes:"11",def:{en:["prepare","ready","perfect"]},hunum:[{kor:"비",def:"갖출"}]},{id:2092,hanja:"商",strokes:"11",def:{en:["commerce","business","trade"],kr:["헤아릴","상"]},hunum:[{kor:"상",def:"헤아릴"}]},{id:2093,hanja:"繯",strokes:"19",def:{en:["noose","hang death","tie","bind"],kr:["맬","현"]},hunum:[{kor:"현",def:"얽힐"}]},{id:2094,hanja:"徂",strokes:"8",def:{en:["go","advance","to","die"],kr:["갈","조"]},hunum:[{kor:"조",def:"갈"}]},{id:2095,hanja:"啇",strokes:"11",def:{en:["to stalk","the stem","the foot","the base"],kr:["밑둥","적"]},hunum:[{kor:"적",def:"나무 뿌리"}]},{id:2096,hanja:"琳",strokes:"12",def:{en:["beautiful jade","gem"],kr:["아름다운","옥","림"]},hunum:[{kor:"림",def:"아름다운 옥"}]},{id:2097,hanja:"媵",strokes:"13",def:{en:["a maid who accompanies bride to her new home","to escort","a concubine"],kr:["보낼","잉"]},hunum:[{kor:"잉",def:"보낼"}]},{id:2098,hanja:"韭",strokes:"9",def:{en:["scallion","leek","radical"],kr:["부추","구"]},hunum:[{kor:"구",def:"부추"}]},{id:2099,hanja:"礁",strokes:"17",def:{en:["reef","jetty","submerged rocks"],kr:["암초","초"]},hunum:[{kor:"초",def:"암초"}]},{id:2100,hanja:"繰",strokes:"19",def:{en:["to reel silk from cocoons"],kr:["야청","통견","조"]},hunum:[{kor:"조",def:"야청 통견"}]},{id:2101,hanja:"銀",strokes:"14",def:{en:["silver","cash","money","wealth"],kr:["돈","은"]},hunum:[{kor:"은",def:"은"}]},{id:2102,hanja:"琴",strokes:"12",def:{en:["Chinese lute or guitar"],kr:["거문고","금"]},hunum:[{kor:"금",def:"거문고"}]},{id:2103,hanja:"韮",strokes:"13",def:{en:["scallion","leek"],kr:["韭와","同字"]},hunum:[{kor:"구",def:"부추"}]},{id:2104,hanja:"琵",strokes:"12",def:{en:["guitar"],kr:["비파","비"]},hunum:[{kor:"비",def:"비파"}]},{id:2105,hanja:"啉",strokes:"11",def:{en:["stupid","slow"],kr:["술순배","람"]},hunum:[{kor:"람",def:"술순배"}]},{id:2106,hanja:"径",strokes:"8",def:{en:["narrow path","diameter","direct"],kr:["통할","경"]},hunum:[{kor:"경",def:"통할"}]},{id:2107,hanja:"琶",strokes:"12",def:{en:["guitar"],kr:["비파","파"]},hunum:[{kor:"파",def:"비파"}]},{id:2108,hanja:"啊",strokes:"11",def:{en:["exclamatory particle"],kr:["어조사","아"]},hunum:[{kor:"아",def:"사랑할"}]},{id:2109,hanja:"待",strokes:"9",def:{en:["treat","entertain","receive","wait"],kr:["기다릴","대"]},hunum:[{kor:"대",def:"기다릴"}]},{id:2110,hanja:"偽",strokes:"11",def:{en:["false","counterfeit","bogus"],kr:["僞의","略字"]},hunum:[{kor:"위",def:"거짓"}]},{id:2111,hanja:"啋",strokes:"11",def:{en:[]},hunum:[{kor:"교",def:"움직일"}]},{id:2112,hanja:"韱",strokes:"17",def:{en:["wild onions or leeks"],kr:["산부추","섬"]},hunum:[{kor:"섬",def:"산부추"}]},{id:2113,hanja:"琸",strokes:"12",def:{en:[],kr:["사람이름","탁"]},hunum:[{kor:"탁",def:"사람이름"}]},{id:2114,hanja:"銃",strokes:"14",def:{en:["ancient weapon","blunderbuss"],kr:["총","총"]},hunum:[{kor:"총",def:"도끼 구멍"}]},{id:2115,hanja:"趙",strokes:"14",def:{en:["surname","ancient state"],kr:["조나라","조"]},hunum:[{kor:"조",def:"조나라"}]},{id:2116,hanja:"韲",strokes:"19",def:{en:["break or smash into pieces","pulverize"],kr:["양념할","제"]},hunum:[{kor:"제",def:"양념할"}]},{id:2117,hanja:"媺",strokes:"13",def:{en:["beautiful"],kr:["착하고","아름다울","미"]},hunum:[{kor:"미",def:"착하고 아름다울"}]},{id:2118,hanja:"徇",strokes:"9",def:{en:["comply with","follow","display"],kr:["부릴","순"]},hunum:[{kor:"순",def:"조리 돌릴"}]},{id:2119,hanja:"很",strokes:"9",def:{en:["very","quite","much"],kr:["패려궂을","흔"]},hunum:[{kor:"흔",def:"패려궂을"}]},{id:2120,hanja:"啍",strokes:"11",def:{en:["creak","gibberish"],kr:["느럭느럭할","톤"]},hunum:[{kor:"톤",def:"입김"}]},{id:2121,hanja:"媻",strokes:"13",def:{en:["to move"],kr:["비틀거릴","반"]},hunum:[{kor:"반",def:"비틀거릴"}]},{id:2122,hanja:"音",strokes:"9",def:{en:["sound","tone","pitch","pronunciation"],kr:["음악","음"]},hunum:[{kor:"음",def:"소리"}]},{id:2123,hanja:"銅",strokes:"14",def:{en:["copper","brass","bronze cuprum"],kr:["구리","동"]},hunum:[{kor:"동",def:"구리"}]},{id:2124,hanja:"琺",strokes:"12",def:{en:["enamel","cloisson"],kr:["é"]},hunum:[{kor:"법",def:"법랑"}]},{id:2125,hanja:"媼",strokes:"13",def:{en:["old woman","lower"]},hunum:[{kor:"온",def:"할머니"}]},{id:2126,hanja:"啎",strokes:"11",def:{en:["obstinate","disobedient","intractable"],kr:["거스를","오"]},hunum:[{kor:"오",def:"거스를"}]},{id:2127,hanja:"徉",strokes:"9",def:{en:["wonder","rove","stray","hesitating"],kr:["배회할","양"]},hunum:[{kor:"양",def:"배회할"}]},{id:2128,hanja:"徊",strokes:"9",def:{en:["linger","walk to and fro","hesitain"],kr:["노닐","회"]},hunum:[{kor:"회",def:"노닐"}]},{id:2129,hanja:"繶",strokes:"19",def:{en:[],kr:["땋은","노","억"]},hunum:[{kor:"억",def:"땋은 노"}]},{id:2130,hanja:"媽",strokes:"13",def:{en:["mother","mama"],kr:["어미","마"]},hunum:[{kor:"마",def:"어미"}]},{id:2131,hanja:"問",strokes:"11",def:{en:["ask","inquire after"],kr:["알릴","문"]},hunum:[{kor:"문",def:"물을"}]},{id:2132,hanja:"韵",strokes:"13",def:{en:["rhyme","vowel"],kr:["韻과","同字"]},hunum:[{kor:"운",def:"운"}]},{id:2133,hanja:"媾",strokes:"13",def:{en:["marry","be on friendly terms with"],kr:["겹사돈","구"]},hunum:[{kor:"구",def:"겹사돈"}]},{id:2134,hanja:"律",strokes:"9",def:{en:["statute","principle","regulation"],kr:["법","률"]},hunum:[{kor:"률",def:"법"}]},{id:2135,hanja:"後",strokes:"9",def:{en:["behind","rear","after","descendents"],kr:["뒤","후"]},hunum:[{kor:"후",def:"뒤"}]},{id:2136,hanja:"啐",strokes:"11",def:{en:["to taste","to sip","to spit","the sound of sipping","to surprise"],kr:["맛","볼","쵀"]},hunum:[{kor:"줄",def:"지껄일"},{kor:"쵀",def:"부를"}]},{id:2137,hanja:"媿",strokes:"13",def:{en:["ashamed","conscience"],kr:["창피줄","괴"]},hunum:[{kor:"괴",def:"창피줄"}]},{id:2138,hanja:"韶",strokes:"14",def:{en:["music of the emperor Shun","beautiful"],kr:["봄","소"]},hunum:[{kor:"소",def:"아름다울"}]},{id:2139,hanja:"槥",strokes:"15",def:{en:["coffin"],kr:["작은","관","혜"]},hunum:[{kor:"혜",def:"널"}]},{id:2140,hanja:"繹",strokes:"19",def:{en:["to unravel or unreel silk","to interpret","explain"],kr:["실","끝","찾을","역"]},hunum:[{kor:"역",def:"삭일"}]},{id:2141,hanja:"啑",strokes:"11",def:{en:[],kr:["콧김","불","체"]},hunum:[{kor:"삽",def:"오리가 텁석텁석 먹을"},{kor:"잡",def:"마실"},{kor:"체",def:"콧김 불"}]},{id:2142,hanja:"琿",strokes:"13",def:{en:["bright","glorious","splendid"]},hunum:[{kor:"혼",def:"아름다운 옥"}]},{id:2143,hanja:"趠",strokes:"15",def:{en:[],kr:["멀","초"]},hunum:[{kor:"초",def:"멀"}]},{id:2144,hanja:"礌",strokes:"18",def:{en:[],kr:["돌","굴러내릴","뢰"]},hunum:[{kor:"뢰",def:"돌 굴러내릴"}]},{id:2145,hanja:"槦",strokes:"15",def:{en:[],kr:["병기","얹는","시렁","용"]},hunum:[{kor:"용",def:"병기 얹는 시렁"}]},{id:2146,hanja:"槧",strokes:"15",def:{en:["wooden tablet","edition"],kr:["편지","첨"]},hunum:[{kor:"참",def:"판"},{kor:"첨",def:"편지"}]},{id:2147,hanja:"銋",strokes:"14",def:{en:[],kr:["젖을","임"]},hunum:[{kor:"임",def:"젖을"}]},{id:2148,hanja:"啓",strokes:"11",def:{en:["open","begin","commence","explain"],kr:["열","계"]},hunum:[{kor:"계",def:"열"}]},{id:2149,hanja:"礎",strokes:"18",def:{en:["foundation stone","plinth"],kr:["주춧돌","초"]},hunum:[{kor:"초",def:"주춧돌"}]},{id:2150,hanja:"繼",strokes:"20",def:{en:["continue","maintain","carry on"],kr:["이을","계"]},hunum:[{kor:"계",def:"이을"}]},{id:2151,hanja:"槨",strokes:"15",def:{en:["outer"],kr:["덧널","곽"]},hunum:[{kor:"곽",def:"덧널"}]},{id:2152,hanja:"徐",strokes:"10",def:{en:["slowly","quietly","calmly","composed","dignified"],kr:["천천할","서"]},hunum:[{kor:"서",def:"천천할"}]},{id:2153,hanja:"韺",strokes:"18",def:{en:["music"],kr:["풍류이름","영"]},hunum:[{kor:"영",def:"풍류이름"}]},{id:2154,hanja:"趣",strokes:"15",def:{en:["what attracts one"],kr:["뜻","취"]},hunum:[{kor:"촉",def:"재촉할"},{kor:"추",def:"벼슬 이름"},{kor:"취",def:"추창할"}]},{id:2155,hanja:"繽",strokes:"20",def:{en:["flourishing","thriving","abundant"],kr:["어지러울","빈"]},hunum:[{kor:"빈",def:"어지러울"}]},{id:2156,hanja:"礏",strokes:"18",def:{en:[],kr:["산","높은","모양","급"]},hunum:[{kor:"급",def:"산 높은 모양"}]},{id:2157,hanja:"槩",strokes:"14",def:{en:["generally","approximately"],kr:["槪와","同字"]},hunum:[{kor:"개",def:"평미레"}]},{id:2158,hanja:"啕",strokes:"11",def:{en:["wail"],kr:["수도할","도"]},hunum:[{kor:"도",def:"수도할"}]},{id:2159,hanja:"徑",strokes:"10",def:{en:["narrow path","diameter","direct"],kr:["지름길","경"]},hunum:[{kor:"경",def:"지름길"}]},{id:2160,hanja:"韻",strokes:"19",def:{en:["rhyme","vowel"],kr:["운","운"]},hunum:[{kor:"운",def:"울림"}]},{id:2161,hanja:"銎",strokes:"14",def:{en:[],kr:["도끼","구멍","공"]},hunum:[{kor:"공",def:"도끼 구멍"}]},{id:2162,hanja:"繾",strokes:"20",def:{en:["attached to","inseparable","entangled"],kr:["마지","않을","견"]},hunum:[{kor:"견",def:"곡진할"}]},{id:2163,hanja:"槪",strokes:"15",def:{en:["generally"],kr:["칠한","술통","개"]},hunum:[{kor:"개",def:"평두목"}]},{id:2164,hanja:"啖",strokes:"11",def:{en:["eat","feed","chew","bite","entice"],kr:["씹을","담"]},hunum:[{kor:"담",def:"씹을"}]},{id:2165,hanja:"徒",strokes:"10",def:{en:["disciple","follower","go on foot"],kr:["무리","도"]},hunum:[{kor:"도",def:"무리"}]},{id:2166,hanja:"従",strokes:"10",def:{en:["from","by","since","whence","through"],kr:["從의","略字"]},hunum:[{kor:"종",def:"좆을"}]},{id:2167,hanja:"礑",strokes:"18",def:{en:[],kr:["밑바닥","당"]},hunum:[{kor:"당",def:"밑바닥"}]},{id:2168,hanja:"啗",strokes:"11",def:{en:["eat","chew","bite","entice","lure"],kr:["씹을","담"]},hunum:[{kor:"담",def:"씹을"}]},{id:2169,hanja:"礒",strokes:"18",def:{en:[],kr:["바위","의"]},hunum:[{kor:"의",def:"바위"}]},{id:2170,hanja:"響",strokes:"20",def:{en:["make sound","make noise","sound"],kr:["악기","향"]},hunum:[{kor:"향",def:"소리 울릴"}]},{id:2171,hanja:"銑",strokes:"14",def:{en:["mill"],kr:["끌","선"]},hunum:[{kor:"선",def:"끌"}]},{id:2172,hanja:"槭",strokes:"15",def:{en:["maple"],kr:["단풍나무","축"]},hunum:[{kor:"색",def:"나뭇잎 떨어져 앙상할"},{kor:"축",def:"단풍나무"}]},{id:2173,hanja:"啙",strokes:"12",def:{en:["poor"],kr:["약할","자"]},hunum:[{kor:"자",def:"약할"}]},{id:2174,hanja:"趨",strokes:"17",def:{en:["hasten","hurry","be attracted to"],kr:["추창할","추"]},hunum:[{kor:"촉",def:"빠를"},{kor:"추",def:"달아날"}]},{id:2175,hanja:"啚",strokes:"11",def:{en:[],kr:["鄙와","同字"]},hunum:[{kor:"비",def:"더러울"}]},{id:2176,hanja:"銓",strokes:"14",def:{en:["weigh","measure","select officials"],kr:["저울질할","전"]},hunum:[{kor:"전",def:"사람 가릴"}]},{id:2177,hanja:"得",strokes:"11",def:{en:["obtain","get","gain","acquire"],kr:["얻을","득"]},hunum:[{kor:"득",def:"얻을"}]},{id:2178,hanja:"啜",strokes:"11",def:{en:["sip","suck up","sob","weep"],kr:["마실","철"]},hunum:[{kor:"철",def:"마실"}]},{id:2179,hanja:"礖",strokes:"18",def:{en:[],kr:["여돌","여"]},hunum:[{kor:"여",def:"여돌"}]},{id:2180,hanja:"徘",strokes:"11",def:{en:["walk back and forth","hesitate"],kr:["노닐","배"]},hunum:[{kor:"배",def:"노닐"}]},{id:2181,hanja:"銕",strokes:"14",def:{en:["iron","strong","solid","firm"],kr:["鐵의","古字"]},hunum:[{kor:"철",def:"쇠"}]},{id:2182,hanja:"撃",strokes:"15",def:{en:["strike","hit","beat","attack","fight"],kr:["죽일","격"]},hunum:[{kor:"격",def:"칠"}]},{id:2183,hanja:"啝",strokes:"11",def:{en:[]},hunum:[{kor:"화",def:"순할"}]},{id:2184,hanja:"銖",strokes:"14",def:{en:["unit of weight","one twenty"],kr:["저울눈","수"]},hunum:[{kor:"수",def:"저울눈"}]},{id:2185,hanja:"槲",strokes:"15",def:{en:["type of oak"],kr:["떡갈나무","곡"]},hunum:[{kor:"곡",def:"떡갈나무"}]},{id:2186,hanja:"啞",strokes:"11",def:{en:["dumb","mute","become hoarse"],kr:["놀랄","아"]},hunum:[{kor:"아",def:"벙어리"}]},{id:2187,hanja:"徙",strokes:"11",def:{en:["move one","shift","migrate"],kr:["옮길","사"]},hunum:[{kor:"사",def:"옮길"}]},{id:2188,hanja:"礙",strokes:"19",def:{en:["obstruct","hinder","block","deter"],kr:["막을","애"]},hunum:[{kor:"애",def:"막을"}]},{id:2189,hanja:"撅",strokes:"15",def:{en:["protrude","snap","break","dig"],kr:["옷걷을","궤"]},hunum:[{kor:"궤",def:"옷걷을"}]},{id:2190,hanja:"啟",strokes:"11",def:{en:["open","begin"],kr:["인도할","계"]},hunum:[{kor:"계",def:"인도할"}]},{id:2191,hanja:"滁",strokes:"13",def:{en:["district in Anhui province"],kr:["물이름","저"]},hunum:[{kor:"저",def:"물이름"}]},{id:2192,hanja:"銘",strokes:"14",def:{en:["inscribe","engrave","unforgettably"],kr:["새길","명"]},hunum:[{kor:"명",def:"새길"}]},{id:2193,hanja:"血",strokes:"6",def:{en:["blood","radical number"],kr:["씩씩할","혈"]},hunum:[{kor:"혈",def:"피"}]},{id:2194,hanja:"銙",strokes:"14",def:{en:[],kr:["대구","과"]},hunum:[{kor:"과",def:"대구"}]},{id:2195,hanja:"荳",strokes:"13",def:{en:["beans","peas","bean"],kr:["콩","두"]},hunum:[{kor:"두",def:"콩"}]},{id:2196,hanja:"滂",strokes:"13",def:{en:["torrential","voluminous"],kr:["비","퍼부을","방"]},hunum:[{kor:"방",def:"비 퍼부을"}]},{id:2197,hanja:"啡",strokes:"11",def:{en:["morphine","coffee"],kr:["코","고는","소리","비"]},hunum:[{kor:"배",def:"코 고는 소리"},{kor:"비",def:"코 고는 소리"}]},{id:2198,hanja:"徜",strokes:"11",def:{en:["walking and fro","lingering"],kr:["노닐","상"]},hunum:[{kor:"상",def:"노닐"}]},{id:2199,hanja:"銚",strokes:"14",def:{en:["large hoe","surname","a spear brevium"],kr:["쟁개비","조"]},hunum:[{kor:"조",def:"쟁개비"}]},{id:2200,hanja:"撈",strokes:"15",def:{en:["scoop out of water","dredge","fish"],kr:["잡을","로"]},hunum:[{kor:"로",def:"잡을"}]},{id:2201,hanja:"滃",strokes:"13",def:{en:["swelling","rising","dispersing"],kr:["안개","자욱할","옹"]},hunum:[{kor:"옹",def:"구름 피어 오를"}]},{id:2202,hanja:"啣",strokes:"11",def:{en:["hold in mouth","harbor","cherish"],kr:["재갈","함"]},hunum:[{kor:"함",def:"재갈"}]},{id:2203,hanja:"滄",strokes:"13",def:{en:["blue","dark green","cold"],kr:["찰","창"]},hunum:[{kor:"창",def:"찰"}]},{id:2204,hanja:"從",strokes:"11",def:{en:["from","by","since","whence","through"],kr:["좇을","종"]},hunum:[{kor:"종",def:"좇을"}]},{id:2205,hanja:"銛",strokes:"14",def:{en:["sharp","keen","a kind of hoe"],kr:["가래","섬"]},hunum:[{kor:"섬",def:"가래"}]},{id:2206,hanja:"銜",strokes:"14",def:{en:["bit","hold in mouth","bite","gag"],kr:["재갈","함"]},hunum:[{kor:"함",def:"재갈"}]},{id:2207,hanja:"滅",strokes:"13",def:{en:["extinguish","wipe out","exterminate"],kr:["멸망할","멸"]},hunum:[{kor:"멸",def:"멸망할"}]},{id:2208,hanja:"荷",strokes:"13",def:{en:["lotus","water lily","holland"],kr:["연","하"]},hunum:[{kor:"하",def:"연"}]},{id:2209,hanja:"趲",strokes:"26",def:{en:["go in hurry","hasten","urge"],kr:["놀라","흩어질","찬"]},hunum:[{kor:"찬",def:"놀라 흩어질"}]},{id:2210,hanja:"衄",strokes:"10",def:{en:["epistaxis","nosebleed","to be defeated"],kr:["코피","뉵"]},hunum:[{kor:"뉵",def:"코피"}]},{id:2211,hanja:"槹",strokes:"15",def:{en:["spar","well"],kr:["두레박","고"]},hunum:[{kor:"고",def:"두레박"}]},{id:2212,hanja:"徠",strokes:"11",def:{en:["induce","encourage to come"],kr:["올","래"]},hunum:[{kor:"래",def:"올"}]},{id:2213,hanja:"衅",strokes:"11",def:{en:["consecrate sacrificial vessels by smearing blood","rift"],kr:["釁과","同字"]},hunum:[{kor:"흔",def:"피 칠할"}]},{id:2214,hanja:"足",strokes:"7",def:{en:["foot","attain","satisfy","enough"],kr:["지날","주"]},hunum:[{kor:"족",def:"발"},{kor:"주",def:"지날"}]},{id:2215,hanja:"御",strokes:"11",def:{en:["drive","ride","chariot","manage"],kr:["거느릴","어"]},hunum:[{kor:"아",def:"맞을"},{kor:"어",def:"거느릴"}]},{id:2216,hanja:"滈",strokes:"13",def:{en:[],kr:["장마","호"]},hunum:[{kor:"호",def:"장마"}]},{id:2217,hanja:"衆",strokes:"12",def:{en:["multitude","crowd","masses","public"],kr:["무리","중"]},hunum:[{kor:"중",def:"무리"}]},{id:2218,hanja:"槻",strokes:"15",def:{en:["zelkova tree"],kr:["물푸레나무","규"]},hunum:[{kor:"규",def:"물푸레나무"}]},{id:2219,hanja:"滉",strokes:"13",def:{en:["deep"],kr:["물","깊고","넓을","황"]},hunum:[{kor:"황",def:"물 깊고 넓을"}]},{id:2220,hanja:"徣",strokes:"11",def:{en:[],kr:["빌릴","차"]},hunum:[{kor:"차",def:"빌릴"}]},{id:2221,hanja:"趵",strokes:"10",def:{en:["noise of tramping feet"],kr:["차는","소리","작"]},hunum:[{kor:"박",def:"차는 소리"},{kor:"작",def:"차는 소리"}]},{id:2222,hanja:"槽",strokes:"15",def:{en:["trough","manger","vat","tank","groove","a distillery"],kr:["구유","조"]},hunum:[{kor:"조",def:"구유"}]},{id:2223,hanja:"荻",strokes:"13",def:{en:["reed","miscanthus sacchariflorus"],kr:["갈대","적"]},hunum:[{kor:"적",def:"갈대"}]},{id:2224,hanja:"滋",strokes:"12",def:{en:["grow","multiply","increase","thrive"],kr:["불을","자"]},hunum:[{kor:"자",def:"불을"}]},{id:2225,hanja:"撐",strokes:"15",def:{en:["prop up","support","brace","to push off"],kr:["헤칠","탱"]},hunum:[{kor:"탱",def:"버틸"}]},{id:2226,hanja:"滌",strokes:"14",def:{en:["wash","cleanse","purify","sweep"],kr:["씻을","척"]},hunum:[{kor:"척",def:"씻을"}]},{id:2227,hanja:"衊",strokes:"21",def:{en:["smear","slander","defile"],kr:["모독할","멸"]},hunum:[{kor:"멸",def:"모독할"}]},{id:2228,hanja:"槿",strokes:"15",def:{en:["hibiscus"],kr:["무궁화","근"]},hunum:[{kor:"근",def:"무궁화"}]},{id:2229,hanja:"徧",strokes:"12",def:{en:["everywhere","all over","all around"]},hunum:[{kor:"편",def:"두루 미칠"}]},{id:2230,hanja:"撑",strokes:"15",def:{en:["prop up","support","brace"],kr:["撐의","俗字"]},hunum:[{kor:"탱",def:"버틸"}]},{id:2231,hanja:"徨",strokes:"12",def:{en:["doubtful","irresolute","vacillating"],kr:["노닐","황"]},hunum:[{kor:"황",def:"노닐"}]},{id:2232,hanja:"滎",strokes:"13",def:{en:["county in Henan","rising and dashing of waves"],kr:["물결","일","형"]},hunum:[{kor:"형",def:"실개천"}]},{id:2233,hanja:"行",strokes:"6",def:{en:["go","walk","move","travel","circulate"],kr:["행실","행"]},hunum:[{kor:"항",def:"시장"},{kor:"행",def:"다닐"}]},{id:2234,hanja:"趺",strokes:"11",def:{en:["sit cross","back of the foo"],kr:["책상다리할","부"]},hunum:[{kor:"부",def:"책상다리할"}]},{id:2235,hanja:"礦",strokes:"20",def:{en:["mine","mineral","ore"],kr:["쇳돌","황"]},hunum:[{kor:"광",def:"쇳돌"},{kor:"황",def:"쇳돌"}]},{id:2236,hanja:"撒",strokes:"15",def:{en:["release","cast away","let go","disperse","relax"],kr:["뿌릴","살"]},hunum:[{kor:"살",def:"뿌릴"}]},{id:2237,hanja:"衍",strokes:"9",def:{en:["overflow","spill over","spread out"],kr:["흐를","연"]},hunum:[{kor:"연",def:"성할"}]},{id:2238,hanja:"礧",strokes:"20",def:{en:["roll"],kr:["바위너설","뢰"]},hunum:[{kor:"뢰",def:"바위너설"}]},{id:2239,hanja:"撓",strokes:"15",def:{en:["scratch","disturb","bother","submit"],kr:["궁할","뇨"]},hunum:[{kor:"요",def:"긁을"}]},{id:2240,hanja:"復",strokes:"12",def:{en:["return","repeat","repeatedly"],kr:["다시","부"]},hunum:[{kor:"복",def:"돌아올"},{kor:"부",def:"다시"}]},{id:2241,hanja:"倀",strokes:"10",def:{en:["bewildered","rash","wildly"],kr:["미칠","창"]},hunum:[{kor:"창",def:"미칠"}]},{id:2242,hanja:"趼",strokes:"13",def:{en:["callous skin on hands or feet"],kr:["발","부르틀","견"]},hunum:[{kor:"견",def:"발 부르틀"}]},{id:2243,hanja:"衎",strokes:"9",def:{en:["to give pleasure","pleased","happy"],kr:["바를","간"]},hunum:[{kor:"간",def:"즐길"}]},{id:2244,hanja:"循",strokes:"12",def:{en:["obey","comply with","follow"],kr:["돌아다닐","순"]},hunum:[{kor:"순",def:"좇을"}]},{id:2245,hanja:"撕",strokes:"15",def:{en:["rip","tear","buy cloth"]},hunum:[{kor:"서",def:"훈계할"}]},{id:2246,hanja:"滑",strokes:"13",def:{en:["slip","slide","slippery","polished"],kr:["미끄러울","활"]},hunum:[{kor:"골",def:"어지러울"},{kor:"활",def:"미끄러울"}]},{id:2247,hanja:"趾",strokes:"11",def:{en:["toe","tracks","footprints"],kr:["발","지"]},hunum:[{kor:"지",def:"발"}]},{id:2248,hanja:"倂",strokes:"10",def:{en:["combine"],kr:["아우를","병"]},hunum:[{kor:"병",def:"아우를"}]},{id:2249,hanja:"礪",strokes:"20",def:{en:["whetstone","sharpen"],kr:["거친","숫돌","려"]},hunum:[{kor:"려",def:"거친 숫돌"}]},{id:2250,hanja:"徬",strokes:"13",def:{en:["to wander about","walk along side of","to be next to"],kr:["시중들","방"]},hunum:[{kor:"방",def:"시중들"}]},{id:2251,hanja:"鳥",strokes:"11",def:{en:["bird","KangXi radical"],kr:["새","조"]},hunum:[{kor:"조",def:"새"}]},{id:2252,hanja:"滓",strokes:"13",def:{en:["sediment","lees","dregs"],kr:["찌끼","재"]},hunum:[{kor:"재",def:"앙금"}]},{id:2253,hanja:"倃",strokes:"10",def:{en:["damage","destroy"],kr:["훼방할","구"]},hunum:[{kor:"구",def:"훼방할"}]},{id:2254,hanja:"趿",strokes:"11",def:{en:["to tread on","slipshod"],kr:["발가락으로잡을","삽"]},hunum:[{kor:"삽",def:"발가락으로잡을"}]},{id:2255,hanja:"礫",strokes:"20",def:{en:["gravel","pebbles","potsherds"],kr:["조약돌","력"]},hunum:[{kor:"력",def:"조약돌"}]},{id:2256,hanja:"徭",strokes:"13",def:{en:["conscript labor","compulsory labor"],kr:["부릴","요"]},hunum:[{kor:"요",def:"부릴"}]},{id:2257,hanja:"倄",strokes:"10",def:{en:[],kr:["한탄할","효"]},hunum:[{kor:"효",def:"찌를"}]},{id:2258,hanja:"衒",strokes:"11",def:{en:["brag","show off","promote oneself"],kr:["팔릴","현"]},hunum:[{kor:"현",def:"자랑할"}]},{id:2259,hanja:"婀",strokes:"11",def:{en:["be beautiful","be graceful"],kr:["娿와","同字"]},hunum:[{kor:"아",def:"아리따울"}]},{id:2260,hanja:"鳦",strokes:"12",def:{en:["swallow"],kr:["제비","을"]},hunum:[{kor:"을",def:"제비"}]},{id:2261,hanja:"礬",strokes:"20",def:{en:["alum"],kr:["명반","반"]},hunum:[{kor:"반",def:"명반"}]},{id:2262,hanja:"滔",strokes:"13",def:{en:["overflow","rushing water","a torrent"],kr:["물","넘칠","도"]},hunum:[{kor:"도",def:"물 넘칠"}]},{id:2263,hanja:"微",strokes:"13",def:{en:["small","prefix micro","trifling"],kr:["자질구레할","미"]},hunum:[{kor:"미",def:"작을"}]},{id:2264,hanja:"礭",strokes:"21",def:{en:[],kr:["회초리","확"]},hunum:[{kor:"확",def:"회초리"}]},{id:2265,hanja:"徯",strokes:"13",def:{en:["wait for","await","expect","hope"],kr:["사잇길","혜"]},hunum:[{kor:"혜",def:"기다릴"}]},{id:2266,hanja:"撙",strokes:"15",def:{en:["economize","abide by","comply with"],kr:["누를","준"]},hunum:[{kor:"준",def:"누를"}]},{id:2267,hanja:"倅",strokes:"10",def:{en:["deputy","vice"],kr:["원님","쉬"]},hunum:[{kor:"쉬",def:"버금"}]},{id:2268,hanja:"婁",strokes:"11",def:{en:["surname","a constellation","to wear"],kr:["별","이름","루"]},hunum:[{kor:"루",def:"별 이름"}]},{id:2269,hanja:"鳧",strokes:"13",def:{en:["wild duck","teal","swim"],kr:["오리","부"]},hunum:[{kor:"부",def:"오리"}]},{id:2270,hanja:"術",strokes:"11",def:{en:["art","skill","special feat","method","technique"],kr:["술법","술"]},hunum:[{kor:"술",def:"재주"}]},{id:2271,hanja:"倆",strokes:"10",def:{en:["clever","skilled","two","pair"],kr:["재주","량"]},hunum:[{kor:"량",def:"재주"}]},{id:2272,hanja:"珀",strokes:"9",def:{en:["amber"],kr:["호박","박"]},hunum:[{kor:"박",def:"호박"}]},{id:2273,hanja:"撚",strokes:"15",def:{en:["twirl in fingers","tease","toy with"],kr:["비틀","년"]},hunum:[{kor:"년",def:"비틀"}]},{id:2274,hanja:"滕",strokes:"13",def:{en:["an ancient state in Shandong province","water bursting forth"],kr:["물","솟을","등"]},hunum:[{kor:"등",def:"물 솟을"}]},{id:2275,hanja:"銭",strokes:"14",def:{en:["money","currency","coins"]},hunum:[{kor:"전",def:"돈"}]},{id:2276,hanja:"鳩",strokes:"13",def:{en:["pigeon","dove","collect","assemble"],kr:["비둘기","구"]},hunum:[{kor:"구",def:"비둘기"}]},{id:2277,hanja:"珂",strokes:"9",def:{en:["inferior kind of jade"],kr:["옥","이름","가"]},hunum:[{kor:"가",def:"옥 이름"}]},{id:2278,hanja:"撝",strokes:"15",def:{en:["wave","brandish","modest","humble"],kr:["찣을","휘"]},hunum:[{kor:"휘",def:"찣을"}]},{id:2279,hanja:"倉",strokes:"10",def:{en:["granary","berth","sea"],kr:["곳집","창"]},hunum:[{kor:"창",def:"곳집"}]},{id:2280,hanja:"街",strokes:"12",def:{en:["street","road","thoroughfare"],kr:["거리","가"]},hunum:[{kor:"가",def:"거리"}]},{id:2281,hanja:"礱",strokes:"21",def:{en:["grind","sharpen","mill"],kr:["갈","롱"]},hunum:[{kor:"롱",def:"갈"}]},{id:2282,hanja:"徳",strokes:"14",def:{en:["virtue","ethics"],kr:["德의","略字"]},hunum:[{kor:"덕",def:"큰"}]},{id:2283,hanja:"滙",strokes:"13",def:{en:["waters converging to one spot","whirling waters","to remit money"],kr:["匯와","同字"]},hunum:[{kor:"회",def:"물 돌아 나갈"}]},{id:2284,hanja:"徴",strokes:"14",def:{en:["summon"],kr:["徵의","略字"]},hunum:[{kor:"징",def:"부를"},{kor:"치",def:"徵의 略"}]},{id:2285,hanja:"撞",strokes:"15",def:{en:["knock against","bump into","collide"],kr:["두드릴","당"]},hunum:[{kor:"당",def:"두드릴"}]},{id:2286,hanja:"婆",strokes:"11",def:{en:["old woman","grandmother"],kr:["너풀너풀","춤출","파"]},hunum:[{kor:"파",def:"할머니"}]},{id:2287,hanja:"徵",strokes:"15",def:{en:["summon","recruit","musical note"],kr:["치성","치"]},hunum:[{kor:"징",def:"부를"},{kor:"치",def:"치성"}]},{id:2288,hanja:"個",strokes:"10",def:{en:["numerary adjunct","piece","single"],kr:["치우칠","개"]},hunum:[{kor:"개",def:"낱"}]},{id:2289,hanja:"鳬",strokes:"13",def:{en:["wild duck","teal","swim"],kr:["鳧의","俗字"]},hunum:[{kor:"부",def:"오리"}]},{id:2290,hanja:"撟",strokes:"15",def:{en:["correct","to bend or twist","to feign","to raise"],kr:["들","교"]},hunum:[{kor:"교",def:"들"}]},{id:2291,hanja:"滚",strokes:"14",def:{en:["turn"],kr:["滾과","同字"]},hunum:[{kor:"곤",def:"흐를"}]},{id:2292,hanja:"倌",strokes:"10",def:{en:["assistant in wine shop","groom"],kr:["수레","모는","사람","관"]},hunum:[{kor:"관",def:"수레 모는 사람"}]},{id:2293,hanja:"衙",strokes:"13",def:{en:["public office","official residence"],kr:["마을","아"]},hunum:[{kor:"아",def:"마을"}]},{id:2294,hanja:"珆",strokes:"9",def:{en:[]},hunum:[{kor:"이",def:"옥돌"}]},{id:2295,hanja:"縁",strokes:"15",def:{en:["hem"],kr:["緣과","同字"]},hunum:[{kor:"연",def:"인연"}]},{id:2296,hanja:"縂",strokes:"15",def:{en:["collect","overall","altogether"],kr:["総과","同字"]},hunum:[{kor:"총",def:"다"}]},{id:2297,hanja:"倍",strokes:"10",def:{en:["times","fold","multiple times"],kr:["암송할","패"]},hunum:[{kor:"배",def:"곱"},{kor:"패",def:"어길"}]},{id:2298,hanja:"銳",strokes:"15",def:{en:["sharp","keen","acute","pointed"],kr:["창","태"]},hunum:[{kor:"예",def:"날카로울"},{kor:"태",def:"창"}]},{id:2299,hanja:"鳮",strokes:"13",def:{en:["chickens","domestic fowl"],kr:["鷄의","俗字"]},hunum:[{kor:"계",def:"닭"}]},{id:2300,hanja:"鞀",strokes:"14",def:{en:["drum"],kr:["소고","도"]},hunum:[{kor:"도",def:"소고"}]},{id:2301,hanja:"啻",strokes:"12",def:{en:["only","merely","just like","stop at"],kr:["쯤","시"]},hunum:[{kor:"시",def:"뿐"}]},{id:2302,hanja:"德",strokes:"15",def:{en:["ethics","morality","virtue"],kr:["큰","덕"]},hunum:[{kor:"덕",def:"큰"}]},{id:2303,hanja:"鞁",strokes:"14",def:{en:[],kr:["안갑","피"]},hunum:[{kor:"피",def:"말 가슴걸이"}]},{id:2304,hanja:"啼",strokes:"12",def:{en:["weep","whimper","howl","twitter"],kr:["울","제"]},hunum:[{kor:"제",def:"울"}]},{id:2305,hanja:"倎",strokes:"10",def:{en:[],kr:["두터울","전"]},hunum:[{kor:"전",def:"두터울"}]},{id:2306,hanja:"婉",strokes:"11",def:{en:["amiable","congenial","restrained"],kr:["젊을","완"]},hunum:[{kor:"완",def:"순할"}]},{id:2307,hanja:"鳯",strokes:"13",def:{en:["male phoenix","symbol of joy"],kr:["鳳의","俗字"]},hunum:[{kor:"봉",def:"봉황"}]},{id:2308,hanja:"衛",strokes:"15",def:{en:["guard","protect","defend"],kr:["衞와","同字"]},hunum:[{kor:"위",def:"지킬"}]},{id:2309,hanja:"倏",strokes:"10",def:{en:["hastily","suddenly","abruptly"],kr:["개의","빨리","달리는","모양","숙"]},hunum:[{kor:"숙",def:"잠간"}]},{id:2310,hanja:"珈",strokes:"9",def:{en:["an ornament attached to a woman"],kr:["머리꾸미개","가"]},hunum:[{kor:"가",def:"머리꾸미개"}]},{id:2311,hanja:"啽",strokes:"12",def:{en:[],kr:["잠꼬대","암"]},hunum:[{kor:"암",def:"잠꼬대"}]},{id:2312,hanja:"衝",strokes:"15",def:{en:["rush against","charge ahead"],kr:["돌파할","충"]},hunum:[{kor:"충",def:"충돌할"}]},{id:2313,hanja:"啾",strokes:"12",def:{en:["wailing of child","chirp"],kr:["찍찍거릴","추"]},hunum:[{kor:"추",def:"두런거릴"}]},{id:2314,hanja:"撤",strokes:"15",def:{en:["omit","remove","withdraw"],kr:["거둘","철"]},hunum:[{kor:"철",def:"거둘"}]},{id:2315,hanja:"徹",strokes:"15",def:{en:["penetrate","pervade","penetrating"],kr:["통할","철"]},hunum:[{kor:"철",def:"통할"}]},{id:2316,hanja:"倐",strokes:"10",def:{en:["hastily","suddenly"],kr:["倏의","俗字"]},hunum:[{kor:"숙",def:"갑자기"}]},{id:2317,hanja:"銶",strokes:"15",def:{en:["chisel"],kr:["끌","구"]},hunum:[{kor:"구",def:"끌"}]},{id:2318,hanja:"珉",strokes:"9",def:{en:["stone resembling jade"],kr:["아름다운돌","민"]},hunum:[{kor:"민",def:"아름다운돌"}]},{id:2319,hanja:"鞄",strokes:"14",def:{en:["to work hides","leather bag"],kr:["가죽","다로는","장인","포"]},hunum:[{kor:"포",def:"가방"}]},{id:2320,hanja:"們",strokes:"10",def:{en:["adjunct pronoun indicate plural"],kr:["무리","문"]},hunum:[{kor:"문",def:"들"}]},{id:2321,hanja:"婌",strokes:"11",def:{en:[],kr:["궁녀","벼슬이름","숙"]},hunum:[{kor:"숙",def:"궁녀 벼슬이름"}]},{id:2322,hanja:"銷",strokes:"15",def:{en:["melt","fuse","market","sell","to pass time","finish","cancel"],kr:["사라질","소"]},hunum:[{kor:"소",def:"녹을"}]},{id:2323,hanja:"衞",strokes:"16",def:{en:["guard","protect","defend"],kr:["나라이름","위"]},hunum:[{kor:"위",def:"막을"}]},{id:2324,hanja:"珊",strokes:"9",def:{en:["coral"],kr:["산호","산"]},hunum:[{kor:"산",def:"산호"}]},{id:2325,hanja:"撥",strokes:"15",def:{en:["move","dispel","distribute","plectrum","play stringed instrument"],kr:["다스릴","발"]},hunum:[{kor:"발",def:"다스릴"}]},{id:2326,hanja:"啿",strokes:"12",def:{en:[],kr:["넉넉할","잠"]},hunum:[{kor:"담",def:"많을"},{kor:"잠",def:"넉넉할"}]},{id:2327,hanja:"倒",strokes:"10",def:{en:["fall over","lie down","take turns"],kr:["넘어질","도"]},hunum:[{kor:"도",def:"넘어질"}]},{id:2328,hanja:"鳳",strokes:"14",def:{en:["male phoenix","symbol of joy"],kr:["봉새","봉"]},hunum:[{kor:"봉",def:"봉새"}]},{id:2329,hanja:"鞅",strokes:"14",def:{en:["leather strap over horse"],kr:["소고삐","앙"]},hunum:[{kor:"앙",def:"가슴걸이"}]},{id:2330,hanja:"示",strokes:"5",def:{en:["show","manifest","demonstrate"],kr:["가르칠","시"]},hunum:[{kor:"기",def:"땅 귀신"},{kor:"시",def:"보일"}]},{id:2331,hanja:"縇",strokes:"15",def:{en:["decoration"],kr:["선두를","선"]},hunum:[{kor:"선",def:"선두를"}]},{id:2332,hanja:"珌",strokes:"9",def:{en:["ornament"],kr:["칼","장식","옥","필"]},hunum:[{kor:"필",def:"칼 장식 옥"}]},{id:2333,hanja:"倓",strokes:"10",def:{en:[],kr:["편안할","담"]},hunum:[{kor:"담",def:"편안할"}]},{id:2334,hanja:"銹",strokes:"15",def:{en:["rust","corrode"],kr:["동록","수"]},hunum:[{kor:"수",def:"동록"}]},{id:2335,hanja:"鳴",strokes:"14",def:{en:["cry of bird or animal","make sound"],kr:["울","명"]},hunum:[{kor:"명",def:"울"}]},{id:2336,hanja:"縈",strokes:"16",def:{en:["entangle","entwine","coil"],kr:["맬","영"]},hunum:[{kor:"영",def:"얽힐"}]},{id:2337,hanja:"徼",strokes:"16",def:{en:["frontier","border","inspect","patrol"],kr:["구할","요"]},hunum:[{kor:"요",def:"돌아다닐"}]},{id:2338,hanja:"徽",strokes:"17",def:{en:["a badge","insignia"],kr:["아름다울","휘"]},hunum:[{kor:"휘",def:"아름다울"}]},{id:2339,hanja:"衡",strokes:"16",def:{en:["measure","weigh","judge","consider"],kr:["가로","횡"]},hunum:[{kor:"형",def:"저울대"},{kor:"횡",def:"가로"}]},{id:2340,hanja:"縉",strokes:"16",def:{en:["red silk"],kr:["搢과","同字"]},hunum:[{kor:"진",def:"붉은 비단"}]},{id:2341,hanja:"珍",strokes:"9",def:{en:["precious","valuable","rare"],kr:["보배","진"]},hunum:[{kor:"진",def:"보배"}]},{id:2342,hanja:"倔",strokes:"10",def:{en:["stubborn","obstinate","intransigent","firm"],kr:["딱딱할","굴"]},hunum:[{kor:"굴",def:"딱딱할"}]},{id:2343,hanja:"礼",strokes:"6",def:{en:["social custom","manners","courtesy"],kr:["禮의","古字"]},hunum:[{kor:"례",def:"예도"}]},{id:2344,hanja:"倕",strokes:"10",def:{en:[],kr:["이름","수"]},hunum:[{kor:"수",def:"무거울"}]},{id:2345,hanja:"婐",strokes:"11",def:{en:["maid"],kr:["단정할","와"]},hunum:[{kor:"와",def:"정숙할"}]},{id:2346,hanja:"鳶",strokes:"14",def:{en:["kite","Milvus species"],kr:["솔개","연"]},hunum:[{kor:"연",def:"솔개"}]},{id:2347,hanja:"衢",strokes:"24",def:{en:["highway","thoroughfare","intersection"],kr:["네거리","구"]},hunum:[{kor:"구",def:"네거리"}]},{id:2348,hanja:"縊",strokes:"16",def:{en:["hang","strangle"],kr:["목","맬","의"]},hunum:[{kor:"액",def:"목 맬"},{kor:"의",def:"목 맬"}]},{id:2349,hanja:"撩",strokes:"15",def:{en:["lift up","raise","leave","depart"],kr:["다스릴","료"]},hunum:[{kor:"료",def:"다스릴"}]},{id:2350,hanja:"倖",strokes:"10",def:{en:["lucky","fortunate","dote on","spoil"],kr:["친할","행"]},hunum:[{kor:"행",def:"요행"}]},{id:2351,hanja:"縋",strokes:"16",def:{en:["climb down rope","hang by rope"],kr:["줄에","달릴","추"]},hunum:[{kor:"추",def:"줄에 달릴"}]},{id:2352,hanja:"衣",strokes:"6",def:{en:["clothes","clothing","cover","skin"],kr:["입을","의"]},hunum:[{kor:"의",def:"옷"}]},{id:2353,hanja:"珏",strokes:"9",def:{en:["two pieces of jade joined together"],kr:["쌍옥","곡"]},hunum:[{kor:"각",def:"쌍옥"},{kor:"곡",def:"쌍옥"}]},{id:2354,hanja:"倗",strokes:"10",def:{en:[],kr:["부탁할","붕"]},hunum:[{kor:"붕",def:"부탁할"}]},{id:2355,hanja:"社",strokes:"8",def:{en:["god of the soil and altars to him","group of families","company","society"],kr:["토지의","신","사"]},hunum:[{kor:"사",def:"토지의 신"}]},{id:2356,hanja:"撫",strokes:"15",def:{en:["pat","console","comfort","pacify"],kr:["누를","무"]},hunum:[{kor:"무",def:"어루만질"}]},{id:2357,hanja:"鞋",strokes:"15",def:{en:["shoes","footwear in general"],kr:["신","혜"]},hunum:[{kor:"혜",def:"신"}]},{id:2358,hanja:"倘",strokes:"10",def:{en:["if","supposing","in event of"],kr:["혹시","당"]},hunum:[{kor:"당",def:"혹시"}]},{id:2359,hanja:"候",strokes:"10",def:{en:["wait","expect","visit","greet"],kr:["물을","후"]},hunum:[{kor:"후",def:"물을"}]},{id:2360,hanja:"珒",strokes:"10",def:{en:[],kr:["옥","이름","진"]},hunum:[{kor:"진",def:"옥 이름"}]},{id:2361,hanja:"播",strokes:"15",def:{en:["sow","spread","broadcast","case away","reject"],kr:["달아날","파"]},hunum:[{kor:"파",def:"심을"}]},{id:2362,hanja:"倚",strokes:"10",def:{en:["rely on","depend on","lean heavily"],kr:["믿을","의"]},hunum:[{kor:"기",def:"기이할"},{kor:"의",def:"기댈"}]},{id:2363,hanja:"鞍",strokes:"15",def:{en:["saddle","any saddle"],kr:["안장","안"]},hunum:[{kor:"안",def:"안장"}]},{id:2364,hanja:"表",strokes:"9",def:{en:["show","express","manifest","display"],kr:["밝을","표"]},hunum:[{kor:"표",def:"겉"}]},{id:2365,hanja:"縐",strokes:"16",def:{en:["crepe","crape","wrinkles","creases"],kr:["구길","추"]},hunum:[{kor:"추",def:"주름"}]},{id:2366,hanja:"撮",strokes:"15",def:{en:["little bit","small amount","pinch"],kr:["비칠","촬"]},hunum:[{kor:"촬",def:"머리 끄덩이 잡을"}]},{id:2367,hanja:"倛",strokes:"10",def:{en:[],kr:["탈","기"]},hunum:[{kor:"기",def:"탈"}]},{id:2368,hanja:"鞏",strokes:"15",def:{en:["bind","firm","secure","strong"],kr:["묶을","공"]},hunum:[{kor:"공",def:"묶을"}]},{id:2369,hanja:"滬",strokes:"14",def:{en:["Shanghai","river near Shanghai"],kr:["강","이름","호"]},hunum:[{kor:"호",def:"강 이름"}]},{id:2370,hanja:"倜",strokes:"10",def:{en:["raise high","unrestrained"],kr:["대범할","척"]},hunum:[{kor:"척",def:"대범할"}]},{id:2371,hanja:"撰",strokes:"15",def:{en:["compose","write","compile"],kr:["고를","천"]},hunum:[{kor:"찬",def:"지을"},{kor:"천",def:"지을"}]},{id:2372,hanja:"珖",strokes:"10",def:{en:["carat"],kr:["옥피리","광"]},hunum:[{kor:"광",def:"옥피리"}]},{id:2373,hanja:"縑",strokes:"16",def:{en:["fine silk"],kr:["합사비단","겸"]},hunum:[{kor:"겸",def:"합사비단"}]},{id:2374,hanja:"滭",strokes:"14",def:{en:[],kr:["샘","끓어","솟을","필"]},hunum:[{kor:"필",def:"샘 끓어 솟을"}]},{id:2375,hanja:"倝",strokes:"10",def:{en:["sunrise","dawn"],kr:["해","돋을","간"]},hunum:[{kor:"간",def:"해 돋을"}]},{id:2376,hanja:"衫",strokes:"9",def:{en:["shirt","robe","gown","jacket"],kr:["적삼","삼"]},hunum:[{kor:"삼",def:"적삼"}]},{id:2377,hanja:"婚",strokes:"11",def:{en:["get married","marriage","wedding"],kr:["혼인할","혼"]},hunum:[{kor:"혼",def:"혼인할"}]},{id:2378,hanja:"倞",strokes:"10",def:{en:["far"],kr:["굳셀","경"]},hunum:[{kor:"경",def:"굳셀"}]},{id:2379,hanja:"撲",strokes:"15",def:{en:["pound","beat","strike","attack"],kr:["닦을","복"]},hunum:[{kor:"박",def:"업어질"},{kor:"복",def:"닦을"}]},{id:2380,hanja:"滯",strokes:"14",def:{en:["block up","obstruct","stagnant"],kr:["막힐","체"]},hunum:[{kor:"체",def:"막힐"}]},{id:2381,hanja:"借",strokes:"10",def:{en:["borrow","lend","make pretext of"],kr:["빌","차"]},hunum:[{kor:"적",def:"빌릴"},{kor:"차",def:"빌"}]},{id:2382,hanja:"珙",strokes:"10",def:{en:["precious stone","xian in Sichuan"],kr:["큰","옥","공"]},hunum:[{kor:"공",def:"큰 옥"}]},{id:2383,hanja:"倠",strokes:"10",def:{en:[],kr:["추할","휴"]},hunum:[{kor:"휴",def:"추할"}]},{id:2384,hanja:"鞔",strokes:"16",def:{en:["sides or uppers of shoes to stretch a skin on a frame for a drum"],kr:["신울","만"]},hunum:[{kor:"만",def:"신울"}]},{id:2385,hanja:"衮",strokes:"10",def:{en:["ceremonial dress worn by the emperor"],kr:["袞과","同字"]},hunum:[{kor:"곤",def:"곤룡포"}]},{id:2386,hanja:"茀",strokes:"11",def:{en:["overgrown with grass","weedy"],kr:["풀","우거질","불"]},hunum:[{kor:"불",def:"풀 우거질"}]},{id:2387,hanja:"縕",strokes:"16",def:{en:["tangled hemp","raveled silk","vague","confused"],kr:["묵은","솜","온"]},hunum:[{kor:"온",def:"모시"}]},{id:2388,hanja:"倡",strokes:"10",def:{en:["guide","leader","lead","introduce"],kr:["여광대","창"]},hunum:[{kor:"창",def:"여광대"}]},{id:2389,hanja:"茁",strokes:"11",def:{en:["to sprout","flourish","sprouts appearing above","vigorous"],kr:["풀","처음","나는","모양","줄"]},hunum:[{kor:"줄",def:"풀 처음 나는 모양"}]},{id:2390,hanja:"概",strokes:"13",def:{en:["generally","approximately"],kr:["槪와","同字"]},hunum:[{kor:"개",def:"대개"}]},{id:2391,hanja:"縗",strokes:"16",def:{en:["sackcloth worn on breast during"],kr:["상옷","최"]},hunum:[{kor:"최",def:"상복"}]},{id:2392,hanja:"倢",strokes:"10",def:{en:["beautiful","handsome","woman"],kr:["빠를","첩"]},hunum:[{kor:"첩",def:"빠를"}]},{id:2393,hanja:"滲",strokes:"14",def:{en:["soak through","infiltrate"],kr:["스밀","참"]},hunum:[{kor:"참",def:"스밀"}]},{id:2394,hanja:"衰",strokes:"10",def:{en:["decline","falter","decrease","weaken"],kr:["상복","최"]},hunum:[{kor:"쇠",def:"쇠할"},{kor:"최",def:"상복"}]},{id:2395,hanja:"茂",strokes:"11",def:{en:["thick","lush","dense","talented"],kr:["무성할","무"]},hunum:[{kor:"무",def:"우거질"}]},{id:2396,hanja:"珝",strokes:"10",def:{en:[],kr:["옥","이름","후"]},hunum:[{kor:"후",def:"옥 이름"}]},{id:2397,hanja:"倣",strokes:"10",def:{en:["imitate"],kr:["본뜰","방"]},hunum:[{kor:"방",def:"본뜰"}]},{id:2398,hanja:"范",strokes:"11",def:{en:["surname","bee"],kr:["풀","이름","범"]},hunum:[{kor:"범",def:"풀 이름"}]},{id:2399,hanja:"縘",strokes:"16",def:{en:[],kr:["繫와","同字"]},hunum:[{kor:"계",def:"맬"}]},{id:2400,hanja:"値",strokes:"10",def:{en:["price","cost","worth"],kr:["당할","치"]},hunum:[{kor:"치",def:"값"}]},{id:2401,hanja:"滴",strokes:"14",def:{en:["drip","drop of water"],kr:["물","댈","적"]},hunum:[{kor:"적",def:"물방울"}]},{id:2402,hanja:"衲",strokes:"10",def:{en:["mend","sew","patch","line","quilt"],kr:["기울","납"]},hunum:[{kor:"납",def:"기울"}]},{id:2403,hanja:"珞",strokes:"10",def:{en:["kind of necklace"],kr:["구슬","목걸이","락"]},hunum:[{kor:"락",def:"구슬 목걸이"}]},{id:2404,hanja:"鞘",strokes:"16",def:{en:["scabbard","sheath"],kr:["칼집","초"]},hunum:[{kor:"초",def:"칼집"}]},{id:2405,hanja:"榆",strokes:"13",def:{en:["elm tree"],kr:["楡와","同字"]},hunum:[{kor:"유",def:"누릅나무"}]},{id:2406,hanja:"倥",strokes:"10",def:{en:["boorish","ignorant","urgent","pressing"],kr:["어리석을","공"]},hunum:[{kor:"공",def:"어리석을"}]},{id:2407,hanja:"茄",strokes:"11",def:{en:["eggplant"],kr:["가지","가"]},hunum:[{kor:"가",def:"가지"}]},{id:2408,hanja:"撹",strokes:"15",def:{en:["disturb","agitate","stir up"],kr:["攪의","略字"]},hunum:[{kor:"교",def:"흔들"}]},{id:2409,hanja:"珠",strokes:"10",def:{en:["precious stone","gem","jewel","pearl"],kr:["구슬","주"]},hunum:[{kor:"주",def:"구슬"}]},{id:2410,hanja:"倦",strokes:"10",def:{en:["be tired of","weary"],kr:["게으를","권"]},hunum:[{kor:"권",def:"게으를"}]},{id:2411,hanja:"婢",strokes:"11",def:{en:["servant girl","your servant"],kr:["여자종","비"]},hunum:[{kor:"비",def:"여자종"}]},{id:2412,hanja:"茅",strokes:"11",def:{en:["reeds","rushes","grass","surname"],kr:["띠","모"]},hunum:[{kor:"모",def:"띠"}]},{id:2413,hanja:"縛",strokes:"16",def:{en:["to tie"],kr:["묶을","박"]},hunum:[{kor:"박",def:"묶을"}]},{id:2414,hanja:"滵",strokes:"14",def:{en:[],kr:["물","흐르는","모양","밀"]},hunum:[{kor:"밀",def:"물 흐르는 모양"}]},{id:2415,hanja:"倧",strokes:"10",def:{en:[],kr:["상고","신인","종"]},hunum:[{kor:"종",def:"상고 신인"}]},{id:2416,hanja:"婣",strokes:"11",def:{en:["marriage connections","a bride"],kr:["姻과","同字"]},hunum:[{kor:"인",def:"혼인"}]},{id:2417,hanja:"撻",strokes:"16",def:{en:["flog","whip","chastise","a tart"],kr:["매질할","달"]},hunum:[{kor:"달",def:"매질할"}]},{id:2418,hanja:"縝",strokes:"16",def:{en:["detailed","fine","closely woven"],kr:["삼실","진"]},hunum:[{kor:"진",def:"삼실"}]},{id:2419,hanja:"倨",strokes:"10",def:{en:["arrogant","haughty","rude"],kr:["굽을","거"]},hunum:[{kor:"거",def:"거만할"}]},{id:2420,hanja:"珢",strokes:"10",def:{en:["precious stone"],kr:["옥돌","은"]},hunum:[{kor:"간",def:"부르터 삐어진 흔적 있는 옥"},{kor:"은",def:"옥돌"}]},{id:2421,hanja:"撼",strokes:"16",def:{en:["move","shake"],kr:["깨뜨릴","감"]},hunum:[{kor:"감",def:"흔들"}]},{id:2422,hanja:"滷",strokes:"14",def:{en:["thick gravy","sauce","broth","brine"],kr:["소금밭","로"]},hunum:[{kor:"로",def:"소금밭"}]},{id:2423,hanja:"縞",strokes:"16",def:{en:["white raw silk"],kr:["흴","호"]},hunum:[{kor:"호",def:"명주"}]},{id:2424,hanja:"滸",strokes:"14",def:{en:["riverbank","shore"],kr:["물가","호"]},hunum:[{kor:"호",def:"물가"}]},{id:2425,hanja:"衷",strokes:"10",def:{en:["heart","from bottom of one"],kr:["마음","충"]},hunum:[{kor:"충",def:"가운데"}]},{id:2426,hanja:"倩",strokes:"10",def:{en:["beautiful","lovely","son"],kr:["예쁠","천"]},hunum:[{kor:"천",def:"예쁠"}]},{id:2427,hanja:"茈",strokes:"11",def:{en:["a plant yielding a red dye"],kr:["지치","자"]},hunum:[{kor:"자",def:"지치"}]},{id:2428,hanja:"珣",strokes:"10",def:{en:["name of a kind of jade"],kr:["옥","이름","순"]},hunum:[{kor:"순",def:"옥그릇"}]},{id:2429,hanja:"倪",strokes:"10",def:{en:["feeble","tiny","young and weak"],kr:["끝","예"]},hunum:[{kor:"예",def:"어릴"}]},{id:2430,hanja:"茉",strokes:"11",def:{en:["white jasmine"],kr:["말리","말"]},hunum:[{kor:"말",def:"말리"}]},{id:2431,hanja:"珤",strokes:"10",def:{en:["treasure","jewel","precious","rare"],kr:["寶의","古字"]},hunum:[{kor:"보",def:"보배"}]},{id:2432,hanja:"縟",strokes:"16",def:{en:["decorative","adorned","elegant"]},hunum:[{kor:"욕",def:"꾸밀"}]},{id:2433,hanja:"撾",strokes:"16",def:{en:["to beat","to strike"],kr:["칠","과"]},hunum:[{kor:"과",def:"칠"}]},{id:2434,hanja:"榌",strokes:"13",def:{en:["wooden ladder"],kr:["사닥다리","비"]},hunum:[{kor:"비",def:"사닥다리"}]},{id:2435,hanja:"倫",strokes:"10",def:{en:["normal human relationships"],kr:["인륜","륜"]},hunum:[{kor:"륜",def:"인륜"}]},{id:2436,hanja:"婦",strokes:"11",def:{en:["married women","woman","wife"],kr:["며느리","부"]},hunum:[{kor:"부",def:"며느리"}]},{id:2437,hanja:"珥",strokes:"10",def:{en:["ear ornament","stick","insert"],kr:["해무리","이"]},hunum:[{kor:"이",def:"귀막이 옥"}]},{id:2438,hanja:"縠",strokes:"16",def:{en:["crepe"],kr:["주름","비단","곡"]},hunum:[{kor:"곡",def:"주름 비단"}]},{id:2439,hanja:"撿",strokes:"16",def:{en:["to pick up"],kr:["비교할","검"]},hunum:[{kor:"검",def:"잡을"}]},{id:2440,hanja:"珦",strokes:"10",def:{en:["a kind of jade"]},hunum:[{kor:"향",def:"옥 이름"}]},{id:2441,hanja:"倬",strokes:"10",def:{en:["noticeable","large","clear","distinct"],kr:["클","탁"]},hunum:[{kor:"탁",def:"환할"}]},{id:2442,hanja:"婧",strokes:"11",def:{en:["modest","supple"]},hunum:[{kor:"정",def:"날씬한"}]},{id:2443,hanja:"縡",strokes:"16",def:{en:["matter","affair"],kr:["실을","재"]},hunum:[{kor:"재",def:"일"}]},{id:2444,hanja:"榎",strokes:"14",def:{en:["small evergreen shrub"],kr:["檟와","同字"]},hunum:[{kor:"가",def:"오동나무"}]},{id:2445,hanja:"倭",strokes:"10",def:{en:["dwarf","dwarfish","short"],kr:["빙글","돌아올","위"]},hunum:[{kor:"왜",def:"나라이름"},{kor:"위",def:"순한 모양"}]},{id:2446,hanja:"鞠",strokes:"17",def:{en:["bow","bend","rear","raise","nourish"],kr:["기를","국"]},hunum:[{kor:"국",def:"기를"}]},{id:2447,hanja:"縢",strokes:"16",def:{en:["bind","tie up","restrain","cord"],kr:["봉할","등"]},hunum:[{kor:"등",def:"봉할"}]},{id:2448,hanja:"縣",strokes:"16",def:{en:["county","district","subdivision"],kr:["끊어질","현"]},hunum:[{kor:"현",def:"매달릴"}]},{id:2449,hanja:"倮",strokes:"10",def:{en:["bare","naked","uncovered"],kr:["알몸","라"]},hunum:[{kor:"라",def:"알몸"}]},{id:2450,hanja:"婪",strokes:"11",def:{en:["covet","covetous","avaricious"],kr:["탐할","람"]},hunum:[{kor:"람",def:"탐할"}]},{id:2451,hanja:"滾",strokes:"14",def:{en:["turn","roll","rotate","boil"],kr:["흐를","곤"]},hunum:[{kor:"곤",def:"흐를"}]},{id:2452,hanja:"珩",strokes:"10",def:{en:["the top gem of the pendants"],kr:["갓끈","형"]},hunum:[{kor:"형",def:"노리개"}]},{id:2453,hanja:"榑",strokes:"14",def:{en:[],kr:["부상","부"]},hunum:[{kor:"부",def:"부상"}]},{id:2454,hanja:"倰",strokes:"10",def:{en:[],kr:["속일","릉"]},hunum:[{kor:"릉",def:"속일"}]},{id:2455,hanja:"鞣",strokes:"18",def:{en:["tan","soften"],kr:["마른","가죽","유"]},hunum:[{kor:"유",def:"다룬 가죽"}]},{id:2456,hanja:"衽",strokes:"10",def:{en:["lapel","hidden lapel of coat"],kr:["옷깃","임"]},hunum:[{kor:"임",def:"옷깃"}]},{id:2457,hanja:"滿",strokes:"14",def:{en:["fill","full","satisfied"],kr:["찰","만"]},hunum:[{kor:"만",def:"찰"}]},{id:2458,hanja:"倱",strokes:"10",def:{en:[],kr:["흐릿할","혼"]},hunum:[{kor:"혼",def:"흐릿할"}]},{id:2459,hanja:"縦",strokes:"16",def:{en:["indulge in","give free reign to"],kr:["縱과","同字"]},hunum:[{kor:"종",def:"세로"},{kor:"총",def:"바뿔"}]},{id:2460,hanja:"婬",strokes:"11",def:{en:["obscene","licentious","lewd"],kr:["음탕할","음"]},hunum:[{kor:"음",def:"간통할"}]},{id:2461,hanja:"衾",strokes:"10",def:{en:["coverlet","quilt"],kr:["이불","금"]},hunum:[{kor:"금",def:"이불"}]},{id:2462,hanja:"珪",strokes:"10",def:{en:["a jade table conferred upon feudal princes by the emperor as a symbol of dignity and authority"],kr:["圭와","同字"]},hunum:[{kor:"규",def:"서옥"}]},{id:2463,hanja:"珫",strokes:"10",def:{en:[]},hunum:[{kor:"충",def:"귀고리 옥"}]},{id:2464,hanja:"倲",strokes:"10",def:{en:[],kr:["어리석을","동"]},hunum:[{kor:"동",def:"어리석을"}]},{id:2465,hanja:"衿",strokes:"10",def:{en:["collar or lapel of garment"],kr:["옷깃","금"]},hunum:[{kor:"금",def:"옷깃"}]},{id:2466,hanja:"鞦",strokes:"18",def:{en:["leather stap","swing"],kr:["말고들개","추"]},hunum:[{kor:"추",def:"그네"}]},{id:2467,hanja:"榔",strokes:"13",def:{en:["betel"],kr:["나무","이름","랑"]},hunum:[{kor:"랑",def:"나무 이름"}]},{id:2468,hanja:"倳",strokes:"10",def:{en:[],kr:["찌를","사"]},hunum:[{kor:"사",def:"찌를"}]},{id:2469,hanja:"唀",strokes:"10",def:{en:[],kr:["誘와","同字"]},hunum:[{kor:"유",def:"꾈"}]},{id:2470,hanja:"榕",strokes:"14",def:{en:["banyan tree"],kr:["용나무","용"]},hunum:[{kor:"용",def:"용나무"}]},{id:2471,hanja:"倴",strokes:"10",def:{en:[],kr:["둔한","사람","분"]},hunum:[{kor:"분",def:"사람이름"}]},{id:2472,hanja:"唁",strokes:"10",def:{en:["express condolence"],kr:["위문할","언"]},hunum:[{kor:"언",def:"위문할"}]},{id:2473,hanja:"班",strokes:"10",def:{en:["class","group","grade","squad","job"],kr:["나눌","반"]},hunum:[{kor:"반",def:"나눌"}]},{id:2474,hanja:"珮",strokes:"10",def:{en:["jade ornament"],kr:["찰","패"]},hunum:[{kor:"패",def:"노리개"}]},{id:2475,hanja:"榖",strokes:"14",def:{en:["paper mulberry"],kr:["穀의","俗字"]},hunum:[{kor:"곡",def:"닥나무"}]},{id:2476,hanja:"鞨",strokes:"18",def:{en:["tribe"],kr:["말갈보석","갈"]},hunum:[{kor:"갈",def:"말갈나라"}]},{id:2477,hanja:"倶",strokes:"10",def:{en:["all"],kr:["俱와","同字"]},hunum:[{kor:"구",def:"함께"}]},{id:2478,hanja:"縫",strokes:"17",def:{en:["sew","mend"],kr:["꿰맬","봉"]},hunum:[{kor:"봉",def:"꿰맬"}]},{id:2479,hanja:"婲",strokes:"11",def:{en:[],kr:["예쁠","화"]},hunum:[{kor:"화",def:"예쁠"}]},{id:2480,hanja:"唄",strokes:"10",def:{en:["final particle of assertion pathaka"],kr:["노래부를","패"]},hunum:[{kor:"패",def:"염불소리"}]},{id:2481,hanja:"榘",strokes:"13",def:{en:["carpenter","ruler","rule"],kr:["곡척","구"]},hunum:[{kor:"구",def:"곡척"}]},{id:2482,hanja:"唅",strokes:"10",def:{en:["a sound","to put in the mouth","grumble"],kr:["머금을","함"]},hunum:[{kor:"함",def:"머금을"}]},{id:2483,hanja:"赒",strokes:"12",def:{en:["give for charity"],kr:["賙의","古字"]},hunum:[{kor:"주",def:"진휼할"}]},{id:2484,hanja:"彀",strokes:"13",def:{en:["enough","adequate fully","quite"],kr:["활","잔뜩","당길","구"]},hunum:[{kor:"구",def:"활 잔뜩 당길"}]},{id:2485,hanja:"鞫",strokes:"18",def:{en:["interrogate","question"]},hunum:[{kor:"구",def:"국문할"}]},{id:2486,hanja:"茗",strokes:"12",def:{en:["tea","tea plant"],kr:["차","싹","명"]},hunum:[{kor:"명",def:"차 싹"}]},{id:2487,hanja:"縮",strokes:"17",def:{en:["contract","draw in","reduce"],kr:["모자랄","축"]},hunum:[{kor:"축",def:"줄어들"}]},{id:2488,hanja:"倹",strokes:"10",def:{en:["temperate","frugal","economical"],kr:["儉의","略字"]},hunum:[{kor:"검",def:"검소할"}]},{id:2489,hanja:"唆",strokes:"10",def:{en:["make mischief","incite","instigate"],kr:["부추길","사"]},hunum:[{kor:"사",def:"부추길"}]},{id:2490,hanja:"鞬",strokes:"18",def:{en:["a quiver on a horse","a store"],kr:["동개","건"]},hunum:[{kor:"건",def:"칼집"}]},{id:2491,hanja:"鞭",strokes:"18",def:{en:["whip","whip","string of firecrackers"],kr:["태장","편"]},hunum:[{kor:"편",def:"채찍"}]},{id:2492,hanja:"榛",strokes:"14",def:{en:["hazelnut","thicket","underbrush"],kr:["개암나무","진"]},hunum:[{kor:"진",def:"개암나무"}]},{id:2493,hanja:"唇",strokes:"10",def:{en:["lips"],kr:["놀랄","진"]},hunum:[{kor:"진",def:"놀랄"}]},{id:2494,hanja:"彂",strokes:"13",def:{en:["issue","dispatch","send out","emit"]},hunum:[{kor:"발",def:"필"}]},{id:2495,hanja:"縯",strokes:"17",def:{en:["long"],kr:["늘일","연"]},hunum:[{kor:"연",def:"길"}]},{id:2496,hanja:"鞮",strokes:"18",def:{en:["leather shoes"],kr:["가죽신","제"]},hunum:[{kor:"제",def:"가죽신"}]},{id:2497,hanja:"磁",strokes:"14",def:{en:["magnetic","magnetism","porcelain"],kr:["자석","자"]},hunum:[{kor:"자",def:"자석"}]},{id:2498,hanja:"榜",strokes:"14",def:{en:["placard","list of successful exam candidates"],kr:["볼기칠","병"]},hunum:[{kor:"방",def:"매"},{kor:"병",def:"게시판"}]},{id:2499,hanja:"唈",strokes:"10",def:{en:["to sob"],kr:["숨","느껴쉴","읍"]},hunum:[{kor:"압",def:"숨 느껴 쉴"},{kor:"읍",def:"숨 느껴쉴"}]},{id:2500,hanja:"珵",strokes:"11",def:{en:[],kr:["패옥","정"]},hunum:[{kor:"정",def:"노리개"}]},{id:2501,hanja:"婷",strokes:"12",def:{en:["pretty","attractive","graceful"],kr:["쌀쌀할","정"]},hunum:[{kor:"정",def:"아리따울"}]},{id:2502,hanja:"倻",strokes:"10",def:{en:["phonetic used in Korean place names"],kr:["땅이름","야"]},hunum:[{kor:"야",def:"땅이름"}]},{id:2503,hanja:"唉",strokes:"10",def:{en:["alas","exclamation of surprise or pain"],kr:["대답하는","소리","애"]},hunum:[{kor:"애",def:"대답하는 소리"}]},{id:2504,hanja:"鉀",strokes:"13",def:{en:["potassium kalium"],kr:["갑옷","갑"]},hunum:[{kor:"갑",def:"갑옷"}]},{id:2505,hanja:"茛",strokes:"12",def:{en:[],kr:["미나리아재비","간"]},hunum:[{kor:"간",def:"독초이름"}]},{id:2506,hanja:"值",strokes:"10",def:{en:["price"],kr:["値와","同字"]},hunum:[{kor:"치",def:"값"}]},{id:2507,hanja:"鉁",strokes:"13",def:{en:[],kr:["보배","진"]},hunum:[{kor:"진",def:"보배"}]},{id:2508,hanja:"縱",strokes:"17",def:{en:["indulge in","give free reign to"],kr:["바쁠","총"]},hunum:[{kor:"종",def:"늘어질"},{kor:"총",def:"바쁠"}]},{id:2509,hanja:"唊",strokes:"10",def:{en:["press"],kr:["망녕되이","말할","겹"]},hunum:[{kor:"겹",def:"망녕되이 말할"}]},{id:2510,hanja:"鞰",strokes:"18",def:{en:[]},hunum:[{kor:"온",def:"쌓을"}]},{id:2511,hanja:"茝",strokes:"13",def:{en:[],kr:["구리때","채"]},hunum:[{kor:"채",def:"구리때"}]},{id:2512,hanja:"榟",strokes:"14",def:{en:[]},hunum:[{kor:"재",def:"가래나무"}]},{id:2513,hanja:"彆",strokes:"15",def:{en:["awkward"],kr:["활","뒤틀릴","별"]},hunum:[{kor:"별",def:"활 뒤틀릴"}]},{id:2514,hanja:"鞱",strokes:"19",def:{en:[],kr:["너그러울","도"]},hunum:[{kor:"도",def:"너그러울"}]},{id:2515,hanja:"珷",strokes:"12",def:{en:["an inferior gem"],kr:["옥돌","무"]},hunum:[{kor:"무",def:"옥돌"}]},{id:2516,hanja:"縲",strokes:"17",def:{en:["a chain or rope used bind criminals"],kr:["포승","류"]},hunum:[{kor:"류",def:"포승"}]},{id:2517,hanja:"磅",strokes:"15",def:{en:["pound","weigh"],kr:["돌","떨어지는","소리","방"]},hunum:[{kor:"방",def:"돌 떨어지는 소리"}]},{id:2518,hanja:"唌",strokes:"10",def:{en:[],kr:["참소할","연"]},hunum:[{kor:"단",def:"참소리"},{kor:"연",def:"참소할"}]},{id:2519,hanja:"鞲",strokes:"19",def:{en:["leather arm guard"],kr:["팔찌","구"]},hunum:[{kor:"구",def:"팔찌"}]},{id:2520,hanja:"縳",strokes:"17",def:{en:["wrap"],kr:["낳이","실","견"]},hunum:[{kor:"견",def:"올"}]},{id:2521,hanja:"彈",strokes:"15",def:{en:["pellet","bullet","shot","shell"],kr:["탄핵할","탄"]},hunum:[{kor:"탄",def:"쏠"}]},{id:2522,hanja:"鉄",strokes:"13",def:{en:["iron","strong","solid","firm"],kr:["쇠","철"]},hunum:[{kor:"철",def:"쇠"}]},{id:2523,hanja:"唍",strokes:"10",def:{en:[],kr:["방긋","웃을","완"]},hunum:[{kor:"완",def:"방긋 웃을"}]},{id:2524,hanja:"珹",strokes:"11",def:{en:["type of jade","pearl"]},hunum:[{kor:"성",def:"옥 이름"}]},{id:2525,hanja:"縴",strokes:"17",def:{en:["tow line"],kr:["궂은","솜","견"]},hunum:[{kor:"견",def:"궂은 솜"}]},{id:2526,hanja:"唎",strokes:"10",def:{en:["sound","noise","final particle"],kr:["가는","소리","리"]},hunum:[{kor:"리",def:"가는 소리"}]},{id:2527,hanja:"鞴",strokes:"19",def:{en:["saddle up horse","drive horse"],kr:["풀무","비"]},hunum:[{kor:"비",def:"풀무"}]},{id:2528,hanja:"鉅",strokes:"13",def:{en:["steel","iron","great"],kr:["강한","쇠","거"]},hunum:[{kor:"거",def:"갈고리"}]},{id:2529,hanja:"縵",strokes:"17",def:{en:["plain silk","simple","plain"],kr:["무늬","없는","비단","만"]},hunum:[{kor:"만",def:"무늬 없는 비단"}]},{id:2530,hanja:"磈",strokes:"15",def:{en:[],kr:["돌","사닥다리","외"]},hunum:[{kor:"외",def:"돌 사닥다리"}]},{id:2531,hanja:"彊",strokes:"16",def:{en:["stubborn","uncompromising"],kr:["송장","뻣뻣할","강"]},hunum:[{kor:"강",def:"굳셀"}]},{id:2532,hanja:"唏",strokes:"10",def:{en:["weep or sob","grieve"],kr:["슬퍼할","희"]},hunum:[{kor:"희",def:"슬퍼할"}]},{id:2533,hanja:"縷",strokes:"17",def:{en:["thread","detailed","precise"],kr:["실","루"]},hunum:[{kor:"루",def:"실"}]},{id:2534,hanja:"珽",strokes:"11",def:{en:["jade tablet"],kr:["옥","이름","정"]},hunum:[{kor:"정",def:"옥 이름"}]},{id:2535,hanja:"磊",strokes:"15",def:{en:["pile of rocks or stones","great"],kr:["돌무더기","뢰"]},hunum:[{kor:"뢰",def:"돌무더기"}]},{id:2536,hanja:"榤",strokes:"14",def:{en:["perch for fowls roost on"],kr:["닭의","홰","걸"]},hunum:[{kor:"걸",def:"닭의 홰"}]},{id:2537,hanja:"婿",strokes:"12",def:{en:["son","husband"],kr:["사위","서"]},hunum:[{kor:"서",def:"사위"}]},{id:2538,hanja:"唐",strokes:"10",def:{en:["Tang dynasty","Chinese"],kr:["당나라","당"]},hunum:[{kor:"당",def:"당나라"}]},{id:2539,hanja:"彌",strokes:"17",def:{en:["extensive","full","fill","complete"],kr:["널리","미"]},hunum:[{kor:"미",def:"두루"}]},{id:2540,hanja:"茣",strokes:"13",def:{en:["mat","matting"],kr:["차조기","오"]},hunum:[{kor:"오",def:"차조기"}]},{id:2541,hanja:"榥",strokes:"14",def:{en:["screen"],kr:["책상","황"]},hunum:[{kor:"황",def:"책상"}]},{id:2542,hanja:"鉉",strokes:"13",def:{en:["device for carrying a tripod"],kr:["솥귀","현"]},hunum:[{kor:"현",def:"솥귀"}]},{id:2543,hanja:"現",strokes:"11",def:{en:["appear","manifest","become visible"],kr:["옥빛","현"]},hunum:[{kor:"현",def:"나타날"}]},{id:2544,hanja:"縹",strokes:"17",def:{en:["light blue silk","dim","misty"],kr:["훌쩍","날","표"]},hunum:[{kor:"표",def:"옥빛"}]},{id:2545,hanja:"磋",strokes:"15",def:{en:["polish","buff","scrutinize"],kr:["윤낼","차"]},hunum:[{kor:"차",def:"윤낼"}]},{id:2546,hanja:"赟",strokes:"16",def:{en:["affable","agreeable","pleasant"]},hunum:[{kor:"윤",def:"예쁠"}]},{id:2547,hanja:"鞸",strokes:"20",def:{en:["leather arm guard"],kr:["슬갑","필"]},hunum:[{kor:"필",def:"슬갑"}]},{id:2548,hanja:"榦",strokes:"14",def:{en:["tree trunk","support","prop"],kr:["幹의","本字"]},hunum:[{kor:"간",def:"줄기"}]},{id:2549,hanja:"彎",strokes:"22",def:{en:["bend","curve"],kr:["굽을","만"]},hunum:[{kor:"만",def:"굽을"}]},{id:2550,hanja:"鉋",strokes:"13",def:{en:["carpenter"],kr:["대패","포"]},hunum:[{kor:"포",def:"대패"}]},{id:2551,hanja:"榧",strokes:"14",def:{en:["type of yew"],kr:["비자나무","비"]},hunum:[{kor:"비",def:"비자나무"}]},{id:2552,hanja:"鞹",strokes:"20",def:{en:["skin"],kr:["무두질한","가죽","곽"]},hunum:[{kor:"곽",def:"무두질한 가죽"}]},{id:2553,hanja:"縻",strokes:"17",def:{en:["halter for ox","tie up","harness"],kr:["얽어맬","미"]},hunum:[{kor:"미",def:"고삐"}]},{id:2554,hanja:"磎",strokes:"15",def:{en:["mountain stream","creek"],kr:["谿와","同字"]},hunum:[{kor:"계",def:"시내"}]},{id:2555,hanja:"榨",strokes:"14",def:{en:["to press or extract juices","a press to extract juices","a vegetable"],kr:["술주자","자"]},hunum:[{kor:"자",def:"술주자"}]},{id:2556,hanja:"唔",strokes:"10",def:{en:["hold in mouth","bite"],kr:["글","읽는","소리","오"]},hunum:[{kor:"오",def:"글 읽는 소리"}]},{id:2557,hanja:"總",strokes:"17",def:{en:["collect","overall","altogether"],kr:["끄덩이","잡을","총"]},hunum:[{kor:"총",def:"꿰맬"}]},{id:2558,hanja:"唕",strokes:"10",def:{en:[],kr:["지저귈","조"]},hunum:[{kor:"조",def:"지저귈"}]},{id:2559,hanja:"磏",strokes:"15",def:{en:[],kr:["거친","숫돌","렴"]},hunum:[{kor:"렴",def:"거친 숫돌"}]},{id:2560,hanja:"赤",strokes:"7",def:{en:["red","communist","bare"],kr:["금치","적"]},hunum:[{kor:"적",def:"붉을"}]},{id:2561,hanja:"績",strokes:"17",def:{en:["spin","achievements"],kr:["이을","적"]},hunum:[{kor:"적",def:"길쌈"}]},{id:2562,hanja:"磐",strokes:"15",def:{en:["large rock","boulder","firm"],kr:["넓을","반"]},hunum:[{kor:"반",def:"넓을"}]},{id:2563,hanja:"唖",strokes:"10",def:{en:["dumb","mute","become hoarse"],kr:["啞의","略字"]},hunum:[{kor:"아",def:"벙어리"}]},{id:2564,hanja:"鉎",strokes:"13",def:{en:[],kr:["녹","생"]},hunum:[{kor:"생",def:"녹"}]},{id:2565,hanja:"茨",strokes:"12",def:{en:["caltrop","tribulus terrestris"],kr:["가시나무","자"]},hunum:[{kor:"자",def:"가시나무"}]},{id:2566,hanja:"磑",strokes:"15",def:{en:["stone mill","grind","break apart"],kr:["맷돌","애"]},hunum:[{kor:"애",def:"맷돌"}]},{id:2567,hanja:"当",strokes:"6",def:{en:["bear","accept","undertake","just"],kr:["當의","略字"]},hunum:[{kor:"당",def:"마땅할"}]},{id:2568,hanja:"鞽",strokes:"21",def:{en:[],kr:["신","교"]},hunum:[{kor:"교",def:"신"}]},{id:2569,hanja:"鉏",strokes:"13",def:{en:["hoe","eradicate","eliminate"],kr:["호미","서"]},hunum:[{kor:"서",def:"호미"}]},{id:2570,hanja:"彔",strokes:"8",def:{en:["to carve wood"],kr:["나무","깍을","록"]},hunum:[{kor:"록",def:"나무 깍을"}]},{id:2571,hanja:"鉐",strokes:"13",def:{en:[],kr:["놋쇠","석"]},hunum:[{kor:"석",def:"놋쇠"}]},{id:2572,hanja:"茪",strokes:"12",def:{en:[],kr:["초결명","광"]},hunum:[{kor:"광",def:"초결명"}]},{id:2573,hanja:"赦",strokes:"11",def:{en:["forgive","remit","pardon"],kr:["용서할","사"]},hunum:[{kor:"사",def:"용서할"}]},{id:2574,hanja:"榭",strokes:"14",def:{en:["kiosk","pavilion"],kr:["정자","사"]},hunum:[{kor:"사",def:"정자"}]},{id:2575,hanja:"鉑",strokes:"13",def:{en:["platinum","thin sheet of metal"],kr:["금박","박"]},hunum:[{kor:"박",def:"금박"}]},{id:2576,hanja:"茫",strokes:"12",def:{en:["vast","boundless","widespread"],kr:["아득할","망"]},hunum:[{kor:"망",def:"아득할"}]},{id:2577,hanja:"赧",strokes:"12",def:{en:["blush","turn red"],kr:["얼굴","붉힐","난"]},hunum:[{kor:"난",def:"얼굴 붉힐"}]},{id:2578,hanja:"唚",strokes:"10",def:{en:["vomiting of animals","to use bad language"],kr:["입맞출","침"]},hunum:[{kor:"침",def:"입맞출"}]},{id:2579,hanja:"磔",strokes:"15",def:{en:["downward stroke slanting right"],kr:["찢을","책"]},hunum:[{kor:"책",def:"찢을"}]},{id:2580,hanja:"鉒",strokes:"13",def:{en:[],kr:["쇳돌","주"]},hunum:[{kor:"주",def:"쇳돌"}]},{id:2581,hanja:"榮",strokes:"14",def:{en:["glory","honor","flourish","prosper"],kr:["꽃다울","영"]},hunum:[{kor:"영",def:"영화로울"}]},{id:2582,hanja:"彖",strokes:"9",def:{en:["a hog","a hedgehog","a porcupine"],kr:["결단할","단"]},hunum:[{kor:"단",def:"결단할"}]},{id:2583,hanja:"茬",strokes:"12",def:{en:["harvest"]},hunum:[{kor:"치",def:"풀 모양"}]},{id:2584,hanja:"磕",strokes:"15",def:{en:["hit","collide","knock into","sound"],kr:["돌","부딪는","소리","개"]},hunum:[{kor:"개",def:"돌 부딪는 소리"}]},{id:2585,hanja:"彗",strokes:"11",def:{en:["broomstick","comet"],kr:["꼬리별","혜"]},hunum:[{kor:"수",def:"혜성"},{kor:"혜",def:"비"}]},{id:2586,hanja:"榰",strokes:"14",def:{en:[],kr:["주춧돌","지"]},hunum:[{kor:"지",def:"주춧돌"}]},{id:2587,hanja:"摂",strokes:"13",def:{en:["take in","absorb","act as deputy"]},hunum:[{kor:"섭",def:"다스릴"},{kor:"엽",def:"편안할"}]},{id:2588,hanja:"唜",strokes:"10",def:{en:[],kr:["끌","말"]},hunum:[{kor:"말",def:"끌"}]},{id:2589,hanja:"赫",strokes:"14",def:{en:["bright","radiant","glowing"],kr:["성할","혁"]},hunum:[{kor:"혁",def:"불 이글이글할"}]},{id:2590,hanja:"榱",strokes:"14",def:{en:["rafter"],kr:["서까래","최"]},hunum:[{kor:"최",def:"서까래"}]},{id:2591,hanja:"彘",strokes:"12",def:{en:["swine"],kr:["돼지","체"]},hunum:[{kor:"체",def:"돼지"}]},{id:2592,hanja:"茯",strokes:"12",def:{en:["china root","medicinal fungus"],kr:["복령","복"]},hunum:[{kor:"복",def:"복령"}]},{id:2593,hanja:"彙",strokes:"13",def:{en:["collect","compile","assemble","hedgehog"],kr:["무리","휘"]},hunum:[{kor:"휘",def:"무리"}]},{id:2594,hanja:"彚",strokes:"13",def:{en:["collect","compile","assemble","hedgehog"],kr:["彙와","同字"]},hunum:[{kor:"휘",def:"무리"}]},{id:2595,hanja:"唟",strokes:"10",def:{en:["place name"],kr:["땅이름","것"]},hunum:[{kor:"것",def:"땅이름"}]},{id:2596,hanja:"鉗",strokes:"13",def:{en:["pincers","pliers","tongs"],kr:["입","다물","겸"]},hunum:[{kor:"겸",def:"목사슬"}]},{id:2597,hanja:"茱",strokes:"12",def:{en:["dogwood"],kr:["수유","수"]},hunum:[{kor:"수",def:"수유"}]},{id:2598,hanja:"磚",strokes:"16",def:{en:["tile","brick"],kr:["기와","전"]},hunum:[{kor:"전",def:"벽돌"}]},{id:2599,hanja:"榴",strokes:"14",def:{en:["pomegranate"],kr:["석류나무","류"]},hunum:[{kor:"류",def:"석류나무"}]},{id:2600,hanja:"溁",strokes:"12",def:{en:[],kr:["濚과","同字"]},hunum:[{kor:"영",def:"물이 졸졸 흐를"}]},{id:2601,hanja:"彛",strokes:"16",def:{en:["yi","tripod","wine vessel","rule"],kr:["彝의","俗字"]},hunum:[{kor:"이",def:"떳떳할"}]},{id:2602,hanja:"茲",strokes:"12",def:{en:["now","here","this","time","year"],kr:["무성할","자"]},hunum:[{kor:"자",def:"무성할"}]},{id:2603,hanja:"赭",strokes:"16",def:{en:["reddish brown","hematite","ochre"],kr:["붉은흙","자"]},hunum:[{kor:"자",def:"붉은흙"}]},{id:2604,hanja:"茳",strokes:"12",def:{en:[],kr:["강리풀","강"]},hunum:[{kor:"강",def:"강리풀"}]},{id:2605,hanja:"茴",strokes:"12",def:{en:["fennel","aniseed"],kr:["회향풀","회"]},hunum:[{kor:"회",def:"회향풀"}]},{id:2606,hanja:"彝",strokes:"18",def:{en:["yi","tripod","wine vessel","rule"],kr:["술통","이"]},hunum:[{kor:"이",def:"떳떳할"}]},{id:2607,hanja:"走",strokes:"7",def:{en:["walk","go on foot","run","leave"],kr:["달릴","주"]},hunum:[{kor:"주",def:"달릴"}]},{id:2608,hanja:"榷",strokes:"14",def:{en:["footbridge","toll","levy","monopoly"],kr:["외나무","다리","교"]},hunum:[{kor:"교",def:"외나무 다리"}]},{id:2609,hanja:"彞",strokes:"18",def:{en:["yi","tripod"],kr:["彛와","同字"]},hunum:[{kor:"이",def:"떳떳할"}]},{id:2610,hanja:"鉛",strokes:"13",def:{en:["lead plumbum"],kr:["분","연"]},hunum:[{kor:"연",def:"납"}]},{id:2611,hanja:"茵",strokes:"12",def:{en:["a cushion","mattress","wormwood","Skimmia japon"],kr:["자리","인"]},hunum:[{kor:"인",def:"자리"}]},{id:2612,hanja:"唤",strokes:"10",def:{en:["call"],kr:["喚과","同字"]},hunum:[{kor:"환",def:"부를"}]},{id:2613,hanja:"蠃",strokes:"19",def:{en:["the solitary wasp"],kr:["나나니벌","라"]},hunum:[{kor:"라",def:"나나니벌"}]},{id:2614,hanja:"茶",strokes:"12",def:{en:["tea"],kr:["차","차"]},hunum:[{kor:"다",def:"차풀"},{kor:"차",def:"차"}]},{id:2615,hanja:"蠅",strokes:"19",def:{en:["flies"],kr:["파리","승"]},hunum:[{kor:"승",def:"파리"}]},{id:2616,hanja:"鉞",strokes:"13",def:{en:["broad","a battle axe","halberd"],kr:["도끼","월"]},hunum:[{kor:"월",def:"도끼"}]},{id:2617,hanja:"茸",strokes:"12",def:{en:["soft","downy","buds","sprouts"],kr:["못생길","용"]},hunum:[{kor:"용",def:"풀 뾰죽뾰죽 날"}]},{id:2618,hanja:"赳",strokes:"9",def:{en:["grand","valiant"],kr:["헌걸찰","규"]},hunum:[{kor:"규",def:"헌걸찰"}]},{id:2619,hanja:"形",strokes:"7",def:{en:["form","shape","appearance"],kr:["몸","형"]},hunum:[{kor:"형",def:"모양"}]},{id:2620,hanja:"榻",strokes:"14",def:{en:["cot","couch","bed"],kr:["자리","탑"]},hunum:[{kor:"탑",def:"평상"}]},{id:2621,hanja:"磠",strokes:"16",def:{en:["sal ammoniac","sand","pebble"],kr:["약돌","뇨"]},hunum:[{kor:"뇨",def:"약돌"}]},{id:2622,hanja:"茹",strokes:"12",def:{en:["roots","vegetables","eat","bear"],kr:["헤아릴","여"]},hunum:[{kor:"여",def:"띠 뿌리"}]},{id:2623,hanja:"赴",strokes:"9",def:{en:["go to","attend","be present"],kr:["나아갈","부"]},hunum:[{kor:"부",def:"나아갈"}]},{id:2624,hanja:"榼",strokes:"14",def:{en:["wine glass"],kr:["뚜껑","합"]},hunum:[{kor:"합",def:"술그릇"}]},{id:2625,hanja:"溉",strokes:"12",def:{en:["water","irrigate","flood","wash"],kr:["漑와","同字"]},hunum:[{kor:"개",def:"물 댈"}]},{id:2626,hanja:"彤",strokes:"7",def:{en:["red","vermilion","name of ancient"],kr:["붉은","칠","동"]},hunum:[{kor:"동",def:"붉은 칠"}]},{id:2627,hanja:"赶",strokes:"10",def:{en:["pursue","follow","expel","drive away"],kr:["달릴","간"]},hunum:[{kor:"간",def:"달릴"}]},{id:2628,hanja:"榾",strokes:"14",def:{en:["pieces of wood"],kr:["등걸","골"]},hunum:[{kor:"골",def:"등걸"}]},{id:2629,hanja:"唪",strokes:"11",def:{en:["to recite","to intone or chant"],kr:["껄껄","웃을","봉"]},hunum:[{kor:"봉",def:"껄껄 웃을"}]},{id:2630,hanja:"彥",strokes:"9",def:{en:["elegant","handsome","learned"],kr:["클","언"]},hunum:[{kor:"언",def:"착한 선비"}]},{id:2631,hanja:"茼",strokes:"12",def:{en:[],kr:["쏙갓","동"]},hunum:[{kor:"동",def:"쏙갓"}]},{id:2632,hanja:"起",strokes:"10",def:{en:["rise","stand up","go up","begin"],kr:["일어날","기"]},hunum:[{kor:"기",def:"일어날"}]},{id:2633,hanja:"溌",strokes:"12",def:{en:["pour","splash","water","sprinkle"]},hunum:[{kor:"발",def:"물 뿌릴"}]},{id:2634,hanja:"唫",strokes:"11",def:{en:["to hum","to intone","etc","to shut"],kr:["입","다물","금"]},hunum:[{kor:"금",def:"입 다물"}]},{id:2635,hanja:"彦",strokes:"9",def:{en:["elegant"],kr:["彥과","同字"]},hunum:[{kor:"언",def:"착한 선비"}]},{id:2636,hanja:"鉢",strokes:"13",def:{en:["earthenware basin","alms bowl"],kr:["바리때","발"]},hunum:[{kor:"발",def:"바리때"}]},{id:2637,hanja:"唬",strokes:"11",def:{en:["to intimidate","to scare"],kr:["외칠","호"]},hunum:[{kor:"호",def:"범이 울"}]},{id:2638,hanja:"彧",strokes:"10",def:{en:["refined","cultured","polished"],kr:["문채날","욱"]},hunum:[{kor:"욱",def:"빛날"}]},{id:2639,hanja:"摒",strokes:"14",def:{en:["expel","cast off","arrange"],kr:["제거할","병"]},hunum:[{kor:"병",def:"제거할"}]},{id:2640,hanja:"唭",strokes:"11",def:{en:[],kr:["듣지도","보지도","않을","기"]},hunum:[{kor:"기",def:"듣지도 보지도 않을"}]},{id:2641,hanja:"鉤",strokes:"13",def:{en:["hook","barb","sickle","stroke with"],kr:["갈고랑쇠","구"]},hunum:[{kor:"구",def:"갈고랑쇠"}]},{id:2642,hanja:"彩",strokes:"11",def:{en:["hue","color","variegated colors"],kr:["무늬","채"]},hunum:[{kor:"채",def:"무늬"}]},{id:2643,hanja:"磧",strokes:"16",def:{en:["sand and gravel","rocks exposed at low tide","to crush"],kr:["모래벌","적"]},hunum:[{kor:"적",def:"돌무더기"}]},{id:2644,hanja:"溏",strokes:"13",def:{en:["pool","not hardened","semi"],kr:["진수렁","당"]},hunum:[{kor:"당",def:"진수렁"}]},{id:2645,hanja:"售",strokes:"11",def:{en:["sell"],kr:["갚을","수"]},hunum:[{kor:"수",def:"팔"}]},{id:2646,hanja:"鉥",strokes:"13",def:{en:["needle"],kr:["인도할","술"]},hunum:[{kor:"술",def:"돗바늘"}]},{id:2647,hanja:"蠍",strokes:"19",def:{en:["scorpion"],kr:["전갈","갈"]},hunum:[{kor:"갈",def:"전갈"}]},{id:2648,hanja:"彪",strokes:"11",def:{en:["tiger","tiger stripes","tiger"],kr:["작은","범","표"]},hunum:[{kor:"표",def:"칡범"}]},{id:2649,hanja:"鉦",strokes:"13",def:{en:["kind of gong used in ancient times by troops on the march"],kr:["징","정"]},hunum:[{kor:"정",def:"징"}]},{id:2650,hanja:"磨",strokes:"16",def:{en:["grind","polish","rub","wear out","a millstone"],kr:["갈","마"]},hunum:[{kor:"마",def:"갈"}]},{id:2651,hanja:"源",strokes:"13",def:{en:["spring","source","head","surname"],kr:["계속할","원"]},hunum:[{kor:"원",def:"근원"}]},{id:2652,hanja:"彫",strokes:"11",def:{en:["carve","decorate","emaciated"],kr:["새길","조"]},hunum:[{kor:"조",def:"새길"}]},{id:2653,hanja:"唯",strokes:"11",def:{en:["only","yes"],kr:["허락할","유"]},hunum:[{kor:"유",def:"오직"}]},{id:2654,hanja:"磪",strokes:"16",def:{en:["a high mountain","precipitous"],kr:["험하고","높을","최"]},hunum:[{kor:"최",def:"험하고 높을"}]},{id:2655,hanja:"彬",strokes:"11",def:{en:["cultivated","well"],kr:["빛날","빈"]},hunum:[{kor:"빈",def:"빛날"}]},{id:2656,hanja:"唱",strokes:"11",def:{en:["sing","chant","call","ditty","song"],kr:["노래","창"]},hunum:[{kor:"창",def:"노래"}]},{id:2657,hanja:"彭",strokes:"12",def:{en:["name of ancient country","surname"],kr:["북소리","팽"]},hunum:[{kor:"방",def:"많을"},{kor:"팽",def:"성씨"}]},{id:2658,hanja:"蠑",strokes:"20",def:{en:["lizard"],kr:["도마뱀","영"]},hunum:[{kor:"영",def:"도마뱀"}]},{id:2659,hanja:"摘",strokes:"14",def:{en:["pluck","pick","select","specify"],kr:["움직일","적"]},hunum:[{kor:"적",def:"딸"}]},{id:2660,hanja:"磬",strokes:"16",def:{en:["musical instrument","musical stone"],kr:["경쇠","경"]},hunum:[{kor:"경",def:"경쇠"}]},{id:2661,hanja:"唲",strokes:"11",def:{en:["forced laughter"],kr:["응석","부릴","애"]},hunum:[{kor:"아",def:"선웃음칠"},{kor:"애",def:"어리광 부릴"}]},{id:2662,hanja:"唳",strokes:"11",def:{en:["cry of bird","cry"],kr:["울","려"]},hunum:[{kor:"려",def:"울"}]},{id:2663,hanja:"威",strokes:"9",def:{en:["pomp","power","powerful","dominate"],kr:["두려울","위"]},hunum:[{kor:"위",def:"위엄"}]},{id:2664,hanja:"彰",strokes:"14",def:{en:["clear","manifest","obvious"],kr:["밝을","창"]},hunum:[{kor:"창",def:"밝을"}]},{id:2665,hanja:"溕",strokes:"13",def:{en:[]},hunum:[{kor:"몽",def:"이슬비"}]},{id:2666,hanja:"唴",strokes:"11",def:{en:[],kr:["울어","기진할","강"]},hunum:[{kor:"강",def:"어린아이 울"}]},{id:2667,hanja:"玁",strokes:"23",def:{en:["a dog with a long snout or muzzle"],kr:["獫과","同字"]},hunum:[{kor:"험",def:"오랑캐 이름"}]},{id:2668,hanja:"準",strokes:"13",def:{en:["rule","guideline","standard"],kr:["수준기","준"]},hunum:[{kor:"절",def:"코마루"},{kor:"준",def:"수준기"}]},{id:2669,hanja:"磯",strokes:"17",def:{en:["jetty","submerged rock","eddy"],kr:["물가","기"]},hunum:[{kor:"기",def:"물가"}]},{id:2670,hanja:"唵",strokes:"11",def:{en:["used in Buddhist texts to transliterate non","to eat with the hand"]},hunum:[{kor:"암",def:"머금을"}]},{id:2671,hanja:"影",strokes:"15",def:{en:["shadow","image","reflection","photograph"],kr:["형상","영"]},hunum:[{kor:"영",def:"그림자"}]},{id:2672,hanja:"唶",strokes:"11",def:{en:["sigh","groan","loud laughter"],kr:["부르짖을","책"]},hunum:[{kor:"차",def:"탄식할"},{kor:"책",def:"부르짖을"}]},{id:2673,hanja:"娃",strokes:"9",def:{en:["baby","doll","pretty girl"],kr:["얼굴","아름다울","왜"]},hunum:[{kor:"왜",def:"어여쁜 계집"}]},{id:2674,hanja:"溘",strokes:"13",def:{en:["abruptly","suddenly","unexpectedly"],kr:["의지할","합"]},hunum:[{kor:"합",def:"문득"}]},{id:2675,hanja:"唷",strokes:"11",def:{en:["final particle"],kr:["소리지를","육"]},hunum:[{kor:"육",def:"소리지를"}]},{id:2676,hanja:"玄",strokes:"5",def:{en:["deep","profound","abstruse"],kr:["고요할","현"]},hunum:[{kor:"현",def:"검을"}]},{id:2677,hanja:"唸",strokes:"11",def:{en:["recite","read","chant"],kr:["신음할","점"]},hunum:[{kor:"전",def:"신음할"},{kor:"점",def:"신음할"}]},{id:2678,hanja:"唹",strokes:"11",def:{en:["to smile at"],kr:["고요히","웃을","어"]},hunum:[{kor:"어",def:"고요히 웃을"}]},{id:2679,hanja:"鉱",strokes:"13",def:{en:["mine","mineral","ore"],kr:["鑛의","俗字"]},hunum:[{kor:"광",def:"쇳돌"}]},{id:2680,hanja:"摠",strokes:"14",def:{en:["general"],kr:["장수","총"]},hunum:[{kor:"총",def:"거느릴"}]},{id:2681,hanja:"磴",strokes:"17",def:{en:["steps on ledge","cliff","or hill"],kr:["돌","비탈길","등"]},hunum:[{kor:"등",def:"돌 비탈길"}]},{id:2682,hanja:"玆",strokes:"10",def:{en:["now","here","this","time","year"],kr:["이","자"]},hunum:[{kor:"자",def:"이"}]},{id:2683,hanja:"磵",strokes:"17",def:{en:["brook","mountain stream"],kr:["석간수","간"]},hunum:[{kor:"간",def:"산골 시내"}]},{id:2684,hanja:"溜",strokes:"13",def:{en:["slide","glide","slip","slippery"],kr:["방울져","떨어질","류"]},hunum:[{kor:"류",def:"방울져 떨어질"}]},{id:2685,hanja:"彷",strokes:"7",def:{en:["like","resembling","resemble"],kr:["거닐","방"]},hunum:[{kor:"방",def:"거닐"}]},{id:2686,hanja:"率",strokes:"11",def:{en:["to lead","ratio","rate","limit"],kr:["뱀","이름","솔"]},hunum:[{kor:"률",def:"거느릴"},{kor:"솔",def:"거느릴"}]},{id:2687,hanja:"溝",strokes:"13",def:{en:["ditch","drain","narrow waterway"],kr:["개천","구"]},hunum:[{kor:"구",def:"개천"}]},{id:2688,hanja:"唼",strokes:"11",def:{en:["speaking evil"],kr:["쪼아먹을","삽"]},hunum:[{kor:"삽",def:"쪼아먹을"}]},{id:2689,hanja:"娉",strokes:"10",def:{en:["beautiful","attractive","charming","graceful"],kr:["장가들다","빙"]},hunum:[{kor:"빙",def:"장가들다"}]},{id:2690,hanja:"玈",strokes:"11",def:{en:["black"],kr:["검을","로"]},hunum:[{kor:"로",def:"검을"}]},{id:2691,hanja:"緄",strokes:"14",def:{en:["cord","woven belt","hem","hemming"],kr:["띠","곤"]},hunum:[{kor:"곤",def:"띠"}]},{id:2692,hanja:"靂",strokes:"24",def:{en:["thunderclap","crashing thunder"],kr:["벼락","력"]},hunum:[{kor:"력",def:"벼락"}]},{id:2693,hanja:"磷",strokes:"17",def:{en:["phosphorus","water rushing between"],kr:["돌","을","틈물이","흐르는","모양","린"]},hunum:[{kor:"린",def:"돌 을 틈물이 흐르는 모양"}]},{id:2694,hanja:"唾",strokes:"11",def:{en:["spit","spit on","saliva"],kr:["버릴","타"]},hunum:[{kor:"타",def:"침"}]},{id:2695,hanja:"玉",strokes:"5",def:{en:["jade","precious stone","gem"],kr:["이룰","옥"]},hunum:[{kor:"옥",def:"구슬"}]},{id:2696,hanja:"溟",strokes:"13",def:{en:["drizzling rain","dark","obscure"],kr:["어두울","명"]},hunum:[{kor:"명",def:"어두울"}]},{id:2697,hanja:"役",strokes:"7",def:{en:["service","a servant","laborer","to serve"],kr:["국경","지킬","역"]},hunum:[{kor:"역",def:"부릴"}]},{id:2698,hanja:"鉷",strokes:"14",def:{en:["trigger"],kr:["돌쇠뇌","홍"]},hunum:[{kor:"홍",def:"돌쇠뇌"}]},{id:2699,hanja:"唿",strokes:"11",def:{en:["sad","part"],kr:["근심할","홀"]},hunum:[{kor:"홀",def:"근심할"}]},{id:2700,hanja:"靄",strokes:"24",def:{en:["cloudy sky","haze","calm","peaceful"],kr:["아지랭이","애"]},hunum:[{kor:"애",def:"아지랭이"}]},{id:2701,hanja:"緇",strokes:"14",def:{en:["black silk"],kr:["검을","치"]},hunum:[{kor:"치",def:"검을"}]},{id:2702,hanja:"王",strokes:"4",def:{en:["king","ruler","royal","surname"],kr:["할아버지","왕"]},hunum:[{kor:"왕",def:"임금"}]},{id:2703,hanja:"蠟",strokes:"21",def:{en:["wax","candle","waxy","glazed"],kr:["밀","랍"]},hunum:[{kor:"랍",def:"밀"}]},{id:2704,hanja:"磺",strokes:"17",def:{en:["sulphur","brimstone"],kr:["쇳돌","광"]},hunum:[{kor:"광",def:"쇳돌"}]},{id:2705,hanja:"彼",strokes:"8",def:{en:["that","there","those"],kr:["저","피"]},hunum:[{kor:"피",def:"저"}]},{id:2706,hanja:"摧",strokes:"14",def:{en:["destroy","break","injure"],kr:["저지할","최"]},hunum:[{kor:"최",def:"꺾을"}]},{id:2707,hanja:"靆",strokes:"24",def:{en:["cloudy sky","not clear","dark"],kr:["구름","낄","체"]},hunum:[{kor:"체",def:"구름 낄"}]},{id:2708,hanja:"溢",strokes:"13",def:{en:["overflow","brim over","full"],kr:["넘칠","일"]},hunum:[{kor:"일",def:"넘칠"}]},{id:2709,hanja:"磻",strokes:"17",def:{en:["a tributary of the Wei river in Shanxi"],kr:["강이름","번"]},hunum:[{kor:"반",def:"강이름"},{kor:"번",def:"강이름"}]},{id:2710,hanja:"蠡",strokes:"21",def:{en:["wood","bore into wood"],kr:["좀먹을","려"]},hunum:[{kor:"려",def:"좀먹을"}]},{id:2711,hanja:"蠢",strokes:"21",def:{en:["wriggle","stupid","silly","fat"],kr:["꿈틀거릴","준"]},hunum:[{kor:"준",def:"꿈틀거릴"}]},{id:2712,hanja:"玎",strokes:"6",def:{en:["jingling","tinkling"],kr:["옥소리","정"]},hunum:[{kor:"정",def:"옥소리"}]},{id:2713,hanja:"磼",strokes:"17",def:{en:[],kr:["산","높을","잡"]},hunum:[{kor:"잡",def:"산 높을"}]},{id:2714,hanja:"緊",strokes:"14",def:{en:["tense","tight","taut","firm","secure"],kr:["굳게","얽힐","긴"]},hunum:[{kor:"긴",def:"굳게 얽힐"}]},{id:2715,hanja:"摩",strokes:"14",def:{en:["rub","scour","grind","friction"],kr:["갈","마"]},hunum:[{kor:"마",def:"갈"}]},{id:2716,hanja:"靈",strokes:"24",def:{en:["spirit","soul","spiritual world"],kr:["신령","령"]},hunum:[{kor:"령",def:"신령"}]},{id:2717,hanja:"緋",strokes:"14",def:{en:["scarlet","dark red","crimson","purpl"],kr:["붉은","빛","비"]},hunum:[{kor:"비",def:"붉은 빛"}]},{id:2718,hanja:"溥",strokes:"13",def:{en:["big","great","vast","wide","widespread"],kr:["펼","부"]},hunum:[{kor:"박",def:"빽빽할"},{kor:"부",def:"펼"}]},{id:2719,hanja:"彿",strokes:"8",def:{en:["resembling","like","as if"],kr:["비슷할","불"]},hunum:[{kor:"불",def:"비슷할"}]},{id:2720,hanja:"娑",strokes:"10",def:{en:["dance","frolic","lounge","saunter"],kr:["춤출","사"]},hunum:[{kor:"사",def:"춤출"}]},{id:2721,hanja:"鉼",strokes:"16",def:{en:["plate"],kr:["판금","병"]},hunum:[{kor:"병",def:"판금"}]},{id:2722,hanja:"靉",strokes:"25",def:{en:["cloudy sky","dark","obscure"],kr:["구름낄","애"]},hunum:[{kor:"애",def:"구름낄"}]},{id:2723,hanja:"蠣",strokes:"21",def:{en:["oyster"],kr:["굴","려"]},hunum:[{kor:"려",def:"굴"}]},{id:2724,hanja:"磽",strokes:"17",def:{en:["barren land","sandy soil"],kr:["메마른","땅","교"]},hunum:[{kor:"교",def:"메마른 땅"}]},{id:2725,hanja:"緍",strokes:"14",variant:"緡",def:{en:["variant of","a fishing","cord","string of coins","a paper or straw string"],kr:["緡"]},hunum:[{kor:"민",def:"낚시줄"}]},{id:2726,hanja:"溧",strokes:"13",def:{en:["river in Anhui and Jiangsu provinces"],kr:["강","이름","률"]},hunum:[{kor:"률",def:"강 이름"}]},{id:2727,hanja:"娓",strokes:"10",def:{en:["comply","complying","agreeable"],kr:["힘쓸","미"]},hunum:[{kor:"미",def:"장황할"}]},{id:2728,hanja:"鉾",strokes:"14",def:{en:["spear"],kr:["칼","끝","모"]},hunum:[{kor:"모",def:"칼 끝"}]},{id:2729,hanja:"靌",strokes:"27",def:{en:[]},hunum:[{kor:"보",def:"보배"}]},{id:2730,hanja:"総",strokes:"14",def:{en:["collect","overall","altogether"],kr:["總과","同字"]},hunum:[{kor:"총",def:"다"}]},{id:2731,hanja:"摭",strokes:"14",def:{en:["pick up","gather"],kr:["주울","척"]},hunum:[{kor:"척",def:"주울"}]},{id:2732,hanja:"玔",strokes:"7",def:{en:["green jade"],kr:["옥고리","천"]},hunum:[{kor:"천",def:"옥고리"}]},{id:2733,hanja:"溪",strokes:"13",def:{en:["mountain stream","creek"],kr:["시내","계"]},hunum:[{kor:"계",def:"시내"}]},{id:2734,hanja:"摯",strokes:"15",def:{en:["sincere","warm","cordial","surname"],kr:["잡을","지"]},hunum:[{kor:"지",def:"잡을"}]},{id:2735,hanja:"玕",strokes:"7",def:{en:["inferior variety of gem"],kr:["옥돌","간"]},hunum:[{kor:"간",def:"옥돌"}]},{id:2736,hanja:"溫",strokes:"13",def:{en:["lukewarm","warm","tepid","mild"],kr:["부드러울","온"]},hunum:[{kor:"온",def:"따뜻할"}]},{id:2737,hanja:"玖",strokes:"7",def:{en:["black"],kr:["옥","다음가는","돌","구"]},hunum:[{kor:"구",def:"옥 다음가는 돌"}]},{id:2738,hanja:"緑",strokes:"14",def:{en:["green","chlorine"]},hunum:[{kor:"록",def:"푸를"}]},{id:2739,hanja:"娘",strokes:"10",def:{en:["mother","young girl","woman","wife"],kr:["아가씨","낭"]},hunum:[{kor:"낭",def:"아가씨"}]},{id:2740,hanja:"娙",strokes:"10",def:{en:[],kr:["예쁠","형"]},hunum:[{kor:"형",def:"여관 이름"}]},{id:2741,hanja:"靑",strokes:"8",def:{en:["blue"],kr:["푸를","청"]},hunum:[{kor:"청",def:"푸를"}]},{id:2742,hanja:"玗",strokes:"7",def:{en:[],kr:["우기나무","우"]},hunum:[{kor:"우",def:"옥돌"}]},{id:2743,hanja:"緒",strokes:"14",def:{en:["end of thread","thread"],kr:["緖의","略字"]},hunum:[{kor:"서",def:"실마리"}]},{id:2744,hanja:"青",strokes:"8",def:{en:["blue","green","black","young"],kr:["푸를","청"]},hunum:[{kor:"청",def:"푸를"}]},{id:2745,hanja:"玘",strokes:"7",def:{en:["court"],kr:["패옥","기"]},hunum:[{kor:"기",def:"패옥"}]},{id:2746,hanja:"俁",strokes:"9",def:{en:["big"]},hunum:[{kor:"유",def:"클"}]},{id:2747,hanja:"玙",strokes:"7",def:{en:[]},hunum:[{kor:"여",def:"옥"}]},{id:2748,hanja:"摳",strokes:"14",def:{en:["raise","lift up","tight"],kr:["치마걷어들","구"]},hunum:[{kor:"구",def:"치마걷어들"}]},{id:2749,hanja:"溯",strokes:"13",def:{en:["go upstream","go against current","formerly"],kr:["거슬러","올라갈","소"]},hunum:[{kor:"삭",def:"물이름"},{kor:"소",def:"거슬러 올라갈"}]},{id:2750,hanja:"娛",strokes:"10",def:{en:["pleasure","enjoyment","amusement"],kr:["즐거울","오"]},hunum:[{kor:"오",def:"즐거울"}]},{id:2751,hanja:"係",strokes:"9",def:{en:["bind","tie up","involve","relation"],kr:["걸릴","계"]},hunum:[{kor:"계",def:"걸릴"}]},{id:2752,hanja:"促",strokes:"9",def:{en:["urge","press","hurry","close"],kr:["짧을","촉"]},hunum:[{kor:"촉",def:"핍박할"}]},{id:2753,hanja:"娜",strokes:"10",def:{en:["elegant","graceful","delicate"],kr:["아리따울","나"]},hunum:[{kor:"나",def:"아리따울"}]},{id:2754,hanja:"溱",strokes:"13",def:{en:["river in Henan"],kr:["많을","진"]},hunum:[{kor:"진",def:"많을"}]},{id:2755,hanja:"緖",strokes:"15",def:{en:["end of thread","thread","clue"],kr:["실마리","서"]},hunum:[{kor:"서",def:"실마리"}]},{id:2756,hanja:"楂",strokes:"13",def:{en:["a raft","to hew","to fell trees"],kr:["떼","사"]},hunum:[{kor:"사",def:"떼"}]},{id:2757,hanja:"俄",strokes:"9",def:{en:["sudden","soon","Russian"],kr:["갑자기","아"]},hunum:[{kor:"아",def:"갑자기"}]},{id:2758,hanja:"緗",strokes:"15",def:{en:["light"],kr:["담황색","상"]},hunum:[{kor:"상",def:"담황색"}]},{id:2759,hanja:"溲",strokes:"13",def:{en:["urinate","soak","drench"],kr:["적실","수"]},hunum:[{kor:"수",def:"오줌"}]},{id:2760,hanja:"俅",strokes:"9",def:{en:["ornamental cap"],kr:["공손할","구"]},hunum:[{kor:"구",def:"공손할"}]},{id:2761,hanja:"緘",strokes:"15",def:{en:["seal","close","bind","letter"],kr:["봉할","함"]},hunum:[{kor:"함",def:"봉할"}]},{id:2762,hanja:"靖",strokes:"13",def:{en:["pacify","appease","calm","peaceful"],kr:["생각할","정"]},hunum:[{kor:"정",def:"다스릴"}]},{id:2763,hanja:"娟",strokes:"10",def:{en:["beautiful","graceful"],kr:["춤추는","모양","연"]},hunum:[{kor:"연",def:"어여쁠"}]},{id:2764,hanja:"蠱",strokes:"23",def:{en:["poison","venom","harm","bewitch"],kr:["독","고"]},hunum:[{kor:"고",def:"독"}]},{id:2765,hanja:"玞",strokes:"8",def:{en:["an inferior agate"],kr:["옥돌","부"]},hunum:[{kor:"부",def:"옥돌"}]},{id:2766,hanja:"摸",strokes:"14",def:{en:["gently touch with hand","caress"],kr:["찾을","모"]},hunum:[{kor:"모",def:"찾을"}]},{id:2767,hanja:"娠",strokes:"10",def:{en:["pregnant"],kr:["마부","신"]},hunum:[{kor:"신",def:"아이밸"}]},{id:2768,hanja:"俇",strokes:"9",def:{en:[],kr:["허둥지둥할","광"]},hunum:[{kor:"광",def:"허둥지둥할"}]},{id:2769,hanja:"蠲",strokes:"23",def:{en:["the millipede sometimes confounded with the grow","bright","clear"],kr:["반딧불","견"]},hunum:[{kor:"견",def:"밝을"}]},{id:2770,hanja:"玟",strokes:"8",def:{en:["streaks in jade","gem"],kr:["옥돌","민"]},hunum:[{kor:"민",def:"옥돌"}]},{id:2771,hanja:"線",strokes:"15",def:{en:["thread","line","wire","clue"],kr:["실","선"]},hunum:[{kor:"선",def:"실"}]},{id:2772,hanja:"摹",strokes:"15",def:{en:["trace","copy","duplicate","pattern"],kr:["베낄","모"]},hunum:[{kor:"모",def:"베낄"}]},{id:2773,hanja:"摺",strokes:"14",def:{en:["fold","bend","twisted","curved"],kr:["패할","접"]},hunum:[{kor:"접",def:"접을"}]},{id:2774,hanja:"苅",strokes:"10",def:{en:["cut off","reap","mow","sickle"],kr:["자를","예"]},hunum:[{kor:"예",def:"벨"}]},{id:2775,hanja:"玠",strokes:"8",def:{en:["large jade tablet used by officials at court to indicate their ranks"],kr:["큰","서옥","개"]},hunum:[{kor:"개",def:"큰 서옥"}]},{id:2776,hanja:"溵",strokes:"13",def:{en:[],kr:["물이름","은"]},hunum:[{kor:"은",def:"물소리"}]},{id:2777,hanja:"俉",strokes:"9",def:{en:[],kr:["맞이할","오"]},hunum:[{kor:"오",def:"맞이할"}]},{id:2778,hanja:"俊",strokes:"9",def:{en:["talented","capable","handsome"],kr:["준걸","준"]},hunum:[{kor:"준",def:"준걸"}]},{id:2779,hanja:"靚",strokes:"15",def:{en:["make up face","ornament","quiet"],kr:["밝을","정"]},hunum:[{kor:"정",def:"단장할"}]},{id:2780,hanja:"緜",strokes:"15",def:{en:["cotton wad","wool","soft","downy"],kr:["햇솜","면"]},hunum:[{kor:"면",def:"햇솜"}]},{id:2781,hanja:"摻",strokes:"14",def:{en:["a delicate hand","mix","blend","adulterate"],kr:["섬섬할","섬"]},hunum:[{kor:"섬",def:"섬섬할"}]},{id:2782,hanja:"溶",strokes:"13",def:{en:["to melt","dissolve","overflowing with"],kr:["녹일","용"]},hunum:[{kor:"용",def:"물 질펀히 흐를"}]},{id:2783,hanja:"溷",strokes:"13",def:{en:["privy","latrine","turbid","dirty"],kr:["어지러울","혼"]},hunum:[{kor:"혼",def:"어지러울"}]},{id:2784,hanja:"緝",strokes:"15",def:{en:["to sew in close stitches"],kr:["낳을","집"]},hunum:[{kor:"즙",def:"자을"},{kor:"집",def:"낳을"}]},{id:2785,hanja:"娣",strokes:"10",def:{en:["younger sister","sister"],kr:["여동생","제"]},hunum:[{kor:"제",def:"여동생"}]},{id:2786,hanja:"靛",strokes:"16",def:{en:["indigo","any blue dye"],kr:["푸른","대","전"]},hunum:[{kor:"전",def:"푸른 대"}]},{id:2787,hanja:"蠶",strokes:"24",def:{en:["silkworms"],kr:["누에","잠"]},hunum:[{kor:"잠",def:"누에"}]},{id:2788,hanja:"俋",strokes:"9",def:{en:[],kr:["밭","가는","모양","읍"]},hunum:[{kor:"읍",def:"날쌜"}]},{id:2789,hanja:"摽",strokes:"14",def:{en:["throw out","push out","strike"],kr:["가슴","만질","표"]},hunum:[{kor:"표",def:"칠"}]},{id:2790,hanja:"贄",strokes:"18",def:{en:["gift superior","gift given"],kr:["폐백","지"]},hunum:[{kor:"지",def:"폐백"}]},{id:2791,hanja:"靜",strokes:"16",def:{en:["quiet","still","motionless","gentle"],kr:["편안할","정"]},hunum:[{kor:"정",def:"고요할"}]},{id:2792,hanja:"緞",strokes:"15",def:{en:["satin"],kr:["신발","하"]},hunum:[{kor:"단",def:"비단"},{kor:"하",def:"신발"}]},{id:2793,hanja:"楊",strokes:"13",def:{en:["willow","poplar","aspen","surname"],kr:["갯버들","양"]},hunum:[{kor:"양",def:"갯버들"}]},{id:2794,hanja:"俌",strokes:"9",def:{en:[],kr:["도울","보"]},hunum:[{kor:"보",def:"도울"}]},{id:2795,hanja:"贅",strokes:"18",def:{en:["unnecessary","superfluous"],kr:["군더더기","췌"]},hunum:[{kor:"췌",def:"붙일"}]},{id:2796,hanja:"靝",strokes:"18",def:{en:[],kr:["하늘","천"]},hunum:[{kor:"천",def:"하늘"}]},{id:2797,hanja:"娥",strokes:"10",def:{en:["be beautiful","good","surname"],kr:["예쁠","아"]},hunum:[{kor:"아",def:"예쁠"}]},{id:2798,hanja:"俍",strokes:"9",def:{en:[],kr:["良과","同字"]},hunum:[{kor:"량",def:"어질"}]},{id:2799,hanja:"締",strokes:"15",def:{en:["tie","join","connect","connection"],kr:["맺을","체"]},hunum:[{kor:"체",def:"맺을"}]},{id:2800,hanja:"俎",strokes:"9",def:{en:["chopping board or block","painted"],kr:["도마","조"]},hunum:[{kor:"조",def:"도마"}]},{id:2801,hanja:"溺",strokes:"13",def:{en:["drown","submerge in water","indulge"],kr:["빠질","닉"]},hunum:[{kor:"뇨",def:"우줌눌"},{kor:"닉",def:"빠질"}]},{id:2802,hanja:"非",strokes:"8",def:{en:["not","negative","non","oppose"],kr:["아닐","비"]},hunum:[{kor:"비",def:"아닐"}]},{id:2803,hanja:"娧",strokes:"10",def:{en:[],kr:["더딜","태"]},hunum:[{kor:"태",def:"기뻐할"}]},{id:2804,hanja:"贇",strokes:"19",def:{en:["affable","agreeable","pleasant"]},hunum:[{kor:"윤",def:"예쁠"}]},{id:2805,hanja:"玦",strokes:"8",def:{en:["broken piece of jade"],kr:["활","깍지","결"]},hunum:[{kor:"결",def:"옥패"}]},{id:2806,hanja:"緡",strokes:"15",def:{en:["a fishing","cord","string of coins","a paper or straw string"],kr:["낚시줄","민"]},hunum:[{kor:"민",def:"낚시줄"}]},{id:2807,hanja:"俏",strokes:"9",def:{en:["like","similar","resemble","pretty"],kr:["거문고","뒤치는","소리","소"]},hunum:[{kor:"소",def:"거문고 뒤치는 소리"}]},{id:2808,hanja:"蠹",strokes:"24",def:{en:["moth","insects which eat into clot"],kr:["좀","두"]},hunum:[{kor:"두",def:"좀"}]},{id:2809,hanja:"贈",strokes:"19",def:{en:["give present","bestow","confer"],kr:["보낼","증"]},hunum:[{kor:"증",def:"보낼"}]},{id:2810,hanja:"俐",strokes:"9",def:{en:["smooth","active","clever","sharp"],kr:["똑똑할","리"]},hunum:[{kor:"리",def:"똑똑할"}]},{id:2811,hanja:"靠",strokes:"15",def:{en:["lean on","trust","depend on","near"],kr:["기댈","고"]},hunum:[{kor:"고",def:"기댈"}]},{id:2812,hanja:"玧",strokes:"8",def:{en:["reddish"],kr:["귀막이","구슬","윤"]},hunum:[{kor:"윤",def:"귀막이 구슬"}]},{id:2813,hanja:"緣",strokes:"15",def:{en:["hem","margin","reason","cause","karma","fate"],kr:["서두를","연"]},hunum:[{kor:"단",def:"단옷"},{kor:"연",def:"인연"}]},{id:2814,hanja:"溽",strokes:"13",def:{en:["moist","humid","muggy"],kr:["무더울","욕"]},hunum:[{kor:"욕",def:"유월 더위"}]},{id:2815,hanja:"楏",strokes:"13",def:{en:[],kr:["호미자루","규"]},hunum:[{kor:"규",def:"호미자루"}]},{id:2816,hanja:"娩",strokes:"10",def:{en:["give birth child","complaisant"],kr:["해산할","만"]},hunum:[{kor:"만",def:"해산할"}]},{id:2817,hanja:"俑",strokes:"9",def:{en:["wooden figure buried with dead"],kr:["시체와","함께","매장하는","허수아비","인형","용"]},hunum:[{kor:"용",def:"시체와 함께 매장하는 허수아비 인형"}]},{id:2818,hanja:"靡",strokes:"19",def:{en:["divide","disperse","scatter"],kr:["쏠릴","미"]},hunum:[{kor:"미",def:"쓰러질"}]},{id:2819,hanja:"蠻",strokes:"25",def:{en:["barbarians","barbarous","savage"],kr:["오랑캐","만"]},hunum:[{kor:"만",def:"오랑캐"}]},{id:2820,hanja:"俒",strokes:"9",def:{en:[],kr:["완전할","흔"]},hunum:[{kor:"흔",def:"완전할"}]},{id:2821,hanja:"贊",strokes:"19",def:{en:["help","support","assist","aid"],kr:["도울","찬"]},hunum:[{kor:"찬",def:"도울"}]},{id:2822,hanja:"玨",strokes:"8",def:{en:["two pieces of jade joined together"],kr:["珏의","古字"]},hunum:[{kor:"각",def:"쌍옥"},{kor:"곡",def:"쌍옥"}]},{id:2823,hanja:"面",strokes:"9",def:{en:["face","surface","plane","side","dimension"],kr:["낯","면"]},hunum:[{kor:"면",def:"낯"}]},{id:2824,hanja:"贋",strokes:"19",def:{en:["false","counterfeit","bogus","sham"],kr:["가짜","안"]},hunum:[{kor:"안",def:"가짜"}]},{id:2825,hanja:"玩",strokes:"8",def:{en:["play with","joke","enjoy"],kr:["보배","완"]},hunum:[{kor:"완",def:"희롱할"}]},{id:2826,hanja:"俓",strokes:"9",def:{en:["straight","pass"],kr:["徑과","同字"]},hunum:[{kor:"경",def:"지름길"}]},{id:2827,hanja:"俔",strokes:"9",def:{en:["like"],kr:["풍세보는","깃","현"]},hunum:[{kor:"현",def:"염탐할"}]},{id:2828,hanja:"緦",strokes:"15",def:{en:["coarse cotton cloth used for mourning"],kr:["석달복","시"]},hunum:[{kor:"시",def:"보름새베"}]},{id:2829,hanja:"楓",strokes:"13",def:{en:["maple tree"],kr:["신나무","풍"]},hunum:[{kor:"풍",def:"단풍나무"}]},{id:2830,hanja:"苑",strokes:"11",def:{en:["pasture","park","garden","mansion"],kr:["큰","바람","원"]},hunum:[{kor:"원",def:"나랏동산"}]},{id:2831,hanja:"玫",strokes:"8",def:{en:["rose"],kr:["매괴","매"]},hunum:[{kor:"매",def:"매괴"}]},{id:2832,hanja:"娭",strokes:"10",def:{en:[],kr:["계집종","애"]},hunum:[{kor:"애",def:"계집종"}]},{id:2833,hanja:"靦",strokes:"16",def:{en:["timid","shy","bashful"],kr:["물끄러미","볼","전"]},hunum:[{kor:"전",def:"무안할"}]},{id:2834,hanja:"苒",strokes:"11",def:{en:["lush","successively","in order"],kr:["덧없을","염"]},hunum:[{kor:"염",def:"풀 우거질"}]},{id:2835,hanja:"贍",strokes:"20",def:{en:["support","aid","to be sufficient","rich","elegant"],kr:["넉넉할","섬"]},hunum:[{kor:"섬",def:"넉넉할"}]},{id:2836,hanja:"編",strokes:"15",def:{en:["knit","weave","arrange","compile"],kr:["벌릴","편"]},hunum:[{kor:"변",def:"땋을"},{kor:"편",def:"책편"}]},{id:2837,hanja:"楔",strokes:"13",def:{en:["wedge","gatepost","foreword"],kr:["문설주","설"]},hunum:[{kor:"설",def:"문설주"}]},{id:2838,hanja:"哀",strokes:"9",def:{en:["sad","mournful","pitiful","pity"],kr:["가여울","애"]},hunum:[{kor:"애",def:"슬플"}]},{id:2839,hanja:"品",strokes:"9",def:{en:["article","product","commodity"],kr:["벼슬","차례","품"]},hunum:[{kor:"품",def:"뭇"}]},{id:2840,hanja:"楕",strokes:"13",def:{en:["oval","elliptical","tubular"],kr:["橢의","略字"]},hunum:[{kor:"타",def:"길고 둥글"}]},{id:2841,hanja:"苓",strokes:"11",def:{en:["fungus","tuber","licorice"],kr:["도꼬마리","령"]},hunum:[{kor:"령",def:"도꼬마리"}]},{id:2842,hanja:"玭",strokes:"8",def:{en:[],kr:["구슬","이름","빈"]},hunum:[{kor:"빈",def:"구슬 이름"}]},{id:2843,hanja:"緩",strokes:"15",def:{en:["slow","leisurely","to postpone","delay"],kr:["더딜","완"]},hunum:[{kor:"완",def:"느즈러질"}]},{id:2844,hanja:"娯",strokes:"10",def:{en:["pleasure","enjoyment","amusement"],kr:["娛와","同字"]},hunum:[{kor:"오",def:"즐거울"}]},{id:2845,hanja:"俗",strokes:"9",def:{en:["social customs","vulgar","unrefined"],kr:["세상","속"]},hunum:[{kor:"속",def:"익을"}]},{id:2846,hanja:"苔",strokes:"11",def:{en:["moss","lichen"],kr:["이끼","태"]},hunum:[{kor:"태",def:"이끼"}]},{id:2847,hanja:"贏",strokes:"20",def:{en:["win","surplus","gain","profit"],kr:["자랄","영"]},hunum:[{kor:"영",def:"이문 남길"}]},{id:2848,hanja:"哂",strokes:"9",def:{en:["smile","laugh at","sneer at"],kr:["비웃을","신"]},hunum:[{kor:"신",def:"빙그레 웃을"}]},{id:2849,hanja:"俘",strokes:"9",def:{en:["prisoner of war","take as prisoner"],kr:["사로잡을","부"]},hunum:[{kor:"부",def:"사로잡을"}]},{id:2850,hanja:"靨",strokes:"23",def:{en:["dimples"],kr:["얼굴의","검은","사마귀","엽"]},hunum:[{kor:"엽",def:"웃는 볼 옴쏙 들어갈"}]},{id:2851,hanja:"俙",strokes:"9",def:{en:["to pretend","appear as if"],kr:["희미할","희"]},hunum:[{kor:"희",def:"비슷할"}]},{id:2852,hanja:"苕",strokes:"11",def:{en:["rush plant"],kr:["능소화","초"]},hunum:[{kor:"초",def:"능소화"}]},{id:2853,hanja:"贐",strokes:"21",def:{en:["farewell present"],kr:["노수","신"]},hunum:[{kor:"신",def:"노자"}]},{id:2854,hanja:"楗",strokes:"13",def:{en:["bar of door","bolt of lock"],kr:["문지방","건"]},hunum:[{kor:"건",def:"문 빗장"}]},{id:2855,hanja:"哃",strokes:"9",def:{en:[],kr:["클말할","동"]},hunum:[{kor:"동",def:"클말할"}]},{id:2856,hanja:"革",strokes:"9",def:{en:["leather","animal hides","rad"],kr:["갑주","혁"]},hunum:[{kor:"극",def:"위독해질"},{kor:"혁",def:"가죽"}]},{id:2857,hanja:"哄",strokes:"9",def:{en:["coax","beguile","cheat","deceive"],kr:["떠들썩할","홍"]},hunum:[{kor:"홍",def:"떠들썩할"}]},{id:2858,hanja:"緬",strokes:"15",def:{en:["distant","remote","think of"],kr:["가는","실","면"]},hunum:[{kor:"면",def:"가는 실"}]},{id:2859,hanja:"俚",strokes:"9",def:{en:["rustic","vulgar","unpolished","mean"],kr:["속될","리"]},hunum:[{kor:"리",def:"속될"}]},{id:2860,hanja:"哅",strokes:"9",def:{en:[],kr:["떠들","흉"]},hunum:[{kor:"흉",def:"떠들"}]},{id:2861,hanja:"苗",strokes:"11",def:{en:["sprouts","Miao nationality"],kr:["모","묘"]},hunum:[{kor:"묘",def:"모"}]},{id:2862,hanja:"楙",strokes:"13",def:{en:["name of plant","lush"],kr:["아름다울","무"]},hunum:[{kor:"무",def:"무성할"}]},{id:2863,hanja:"哆",strokes:"9",def:{en:["tremble","shiver","shudder","quiver"],kr:["입","딱","벌일","치"]},hunum:[{kor:"치",def:"입 딱 벌일"}]},{id:2864,hanja:"楚",strokes:"13",def:{en:["name of feudal state","clear"],kr:["회초리","초"]},hunum:[{kor:"초",def:"회초리"}]},{id:2865,hanja:"贓",strokes:"21",def:{en:["booty","loot","stolen goods","bribe"],kr:["장물","장"]},hunum:[{kor:"장",def:"장물"}]},{id:2866,hanja:"玲",strokes:"9",def:{en:["tinkling of jade"],kr:["옥이름","령"]},hunum:[{kor:"령",def:"옥이름"}]},{id:2867,hanja:"弁",strokes:"5",def:{en:["conical cap worn during Zhou dynasty"],kr:["고깔","변"]},hunum:[{kor:"반",def:"즐거워할"},{kor:"변",def:"고깔"}]},{id:2868,hanja:"俛",strokes:"9",def:{en:["make effort","endeavor","to lower the head"],kr:["힘쓸","면"]},hunum:[{kor:"면",def:"힘쓸"}]},{id:2869,hanja:"娵",strokes:"11",def:{en:["star"],kr:["예쁜","여자","추"]},hunum:[{kor:"추",def:"젊을"}]},{id:2870,hanja:"贔",strokes:"21",def:{en:["strong"],kr:["힘쓸","비"]},hunum:[{kor:"비",def:"힘쓸"}]},{id:2871,hanja:"玳",strokes:"9",def:{en:["tortoise shell"],kr:["대모","바다거북","대"]},hunum:[{kor:"대",def:"대모(바다거북)"}]},{id:2872,hanja:"緯",strokes:"15",def:{en:["woof","parallels of latitude"],kr:["별","오른편으로","돌","위"]},hunum:[{kor:"위",def:"씨줄"}]},{id:2873,hanja:"哇",strokes:"9",def:{en:["vomit","cry of an infant"],kr:["게울","와"]},hunum:[{kor:"와",def:"음란한 소리"}]},{id:2874,hanja:"俜",strokes:"9",def:{en:["to trust to","send a message"],kr:["비틀거리다","빙"]},hunum:[{kor:"빙",def:"비틀거리다"}]},{id:2875,hanja:"靭",strokes:"12",def:{en:["strong and pliable","resilient"],kr:["韌과","同字"]},hunum:[{kor:"인",def:"질길"}]},{id:2876,hanja:"哈",strokes:"9",def:{en:["sound of laughter"],kr:["한","모금","합"]},hunum:[{kor:"합",def:"한 모금"}]},{id:2877,hanja:"娶",strokes:"11",def:{en:["marry","take wife"],kr:["중개인","취"]},hunum:[{kor:"취",def:"장가들"}]},{id:2878,hanja:"碁",strokes:"13",def:{en:["chess","any game similar to chess"],kr:["棋와","同字"]},hunum:[{kor:"기",def:"바둑"}]},{id:2879,hanja:"弃",strokes:"7",def:{en:["reject","abandon","discard"],kr:["棄의","古字"]},hunum:[{kor:"기",def:"버릴"}]},{id:2880,hanja:"保",strokes:"9",def:{en:["protect","safeguard","defend","care"],kr:["지킬","보"]},hunum:[{kor:"보",def:"지킬"}]},{id:2881,hanja:"哉",strokes:"9",def:{en:["final exclamatory particle"],kr:["그런가","재"]},hunum:[{kor:"재",def:"비로소"}]},{id:2882,hanja:"苛",strokes:"11",def:{en:["small","petty","harsh","rigorous"],kr:["매울","가"]},hunum:[{kor:"가",def:"매울"}]},{id:2883,hanja:"贖",strokes:"22",def:{en:["buy","redeem","ransome","atone for"],kr:["무역할","속"]},hunum:[{kor:"속",def:"속바칠"}]},{id:2884,hanja:"楝",strokes:"13",def:{en:["melia japonica"],kr:["멀구슬나무","련"]},hunum:[{kor:"련",def:"멀구슬나무"}]},{id:2885,hanja:"弄",strokes:"7",def:{en:["do","play or fiddle with","alley"],kr:["희롱할","롱"]},hunum:[{kor:"롱",def:"희롱할"}]},{id:2886,hanja:"俞",strokes:"9",def:{en:["surname","consent","approve"],kr:["兪의","俗字"]},hunum:[{kor:"유",def:"대답할"}]},{id:2887,hanja:"苜",strokes:"11",def:{en:["clover"],kr:["거여목","목"]},hunum:[{kor:"목",def:"거여목"}]},{id:2888,hanja:"楞",strokes:"13",def:{en:["used for Ceylon in Buddhist texts"],kr:["모","릉"]},hunum:[{kor:"릉",def:"모"}]},{id:2889,hanja:"俟",strokes:"9",def:{en:["wait for","wait until","as soon as"],kr:["기다릴","사"]},hunum:[{kor:"기",def:"성씨"},{kor:"사",def:"기다릴"}]},{id:2890,hanja:"玷",strokes:"9",def:{en:["flaw in gem","flaw in character"],kr:["흠각","점"]},hunum:[{kor:"점",def:"옥의 티"}]},{id:2891,hanja:"緲",strokes:"15",def:{en:["indistinct","dim","minute","distant"],kr:["아득할","묘"]},hunum:[{kor:"묘",def:"아득할"}]},{id:2892,hanja:"俠",strokes:"9",def:{en:["chivalrous person","knight"],kr:["사이에","낄","협"]},hunum:[{kor:"겹",def:"아오를"},{kor:"협",def:"의기"}]},{id:2893,hanja:"苞",strokes:"11",def:{en:["a variety of rush","firm","enduring","to burst forth"],kr:["꾸러피","포"]},hunum:[{kor:"포",def:"그령풀"}]},{id:2894,hanja:"弇",strokes:"9",def:{en:["cover over","hide","narrow"],kr:["사람이름","감"]},hunum:[{kor:"감",def:"뚜껑"}]},{id:2895,hanja:"信",strokes:"9",def:{en:["trust","believe","letter"],kr:["사신","신"]},hunum:[{kor:"신",def:"믿을"}]},{id:2896,hanja:"玹",strokes:"9",def:{en:[]},hunum:[{kor:"형",def:"옥돌"}]},{id:2897,hanja:"弈",strokes:"9",def:{en:["Chinese chess"],kr:["바둑둘","혁"]},hunum:[{kor:"혁",def:"바둑둘"}]},{id:2898,hanja:"苟",strokes:"11",def:{en:["careless","frivolous","illicit","grammatical particle","but","if only","surname","grass name","distinguish DKW"],kr:["진실로","구"]},hunum:[{kor:"구",def:"진실로"}]},{id:2899,hanja:"練",strokes:"15",def:{en:["practice","drill","exercise","train"],kr:["익힐","련"]},hunum:[{kor:"련",def:"익힐"}]},{id:2900,hanja:"楠",strokes:"13",def:{en:["name of tree","machilus nanmu"],kr:["녹나무","남"]},hunum:[{kor:"남",def:"녹나무"}]},{id:2901,hanja:"响",strokes:"9",def:{en:["make sound","make noise","sound"]},hunum:[{kor:"향",def:"울릴"}]},{id:2902,hanja:"靳",strokes:"13",def:{en:["strap on a horse"],kr:["아낄","근"]},hunum:[{kor:"근",def:"아낄"}]},{id:2903,hanja:"娼",strokes:"11",def:{en:["prostitute","harlot"],kr:["몸","파는","여자","창"]},hunum:[{kor:"창",def:"몸 파는 여자"}]},{id:2904,hanja:"碇",strokes:"13",def:{en:["anchor"],kr:["배","멈출","정"]},hunum:[{kor:"정",def:"닻돌"}]},{id:2905,hanja:"苠",strokes:"11",def:{en:[],kr:["속대","민"]},hunum:[{kor:"민",def:"속대"}]},{id:2906,hanja:"贛",strokes:"24",def:{en:["Jiangxi province","places therein"],kr:["줄","공"]},hunum:[{kor:"공",def:"줄"}]},{id:2907,hanja:"楡",strokes:"13",def:{en:["elm tree"],kr:["서쪽","유"]},hunum:[{kor:"유",def:"느름나무"}]},{id:2908,hanja:"俣",strokes:"9",def:{en:["big"],kr:["갈래질","오"]},hunum:[{kor:"오",def:"갈래질"}]},{id:2909,hanja:"靴",strokes:"13",def:{en:["boots"],kr:["신","화"]},hunum:[{kor:"화",def:"신"}]},{id:2910,hanja:"弊",strokes:"15",def:{en:["evil","wrong","bad","criminal"],kr:["엎드릴","폐"]},hunum:[{kor:"폐",def:"해질"}]},{id:2911,hanja:"緶",strokes:"15",def:{en:["hem","plait","braid","queue"],kr:["꿰맬","편"]},hunum:[{kor:"편",def:"꿰맬"}]},{id:2912,hanja:"玻",strokes:"9",def:{en:["glass"],kr:["유리옥","파"]},hunum:[{kor:"파",def:"파려옥"}]},{id:2913,hanja:"俤",strokes:"9",def:{en:["visage","face","trace","shadow","memory"],kr:["面影"]},hunum:[{kor:"제",def:"용모"}]},{id:2914,hanja:"贜",strokes:"25",def:{en:["booty","loot","stolen goods","bribe"]},hunum:[{kor:"장",def:"징믈"}]},{id:2915,hanja:"苡",strokes:"11",def:{en:["barley"],kr:["질경이","이"]},hunum:[{kor:"이",def:"율무"}]},{id:2916,hanja:"楢",strokes:"13",def:{en:["tinder"],kr:["홰","유"]},hunum:[{kor:"유",def:"부드러운 나무"}]},{id:2917,hanja:"哎",strokes:"9",def:{en:["interjection of surprise"],kr:["애통하는","소리","애"]},hunum:[{kor:"애",def:"애통하는 소리"}]},{id:2918,hanja:"鈇",strokes:"12",def:{en:["an ax","a hatchet"],kr:["도끼","부"]},hunum:[{kor:"부",def:"도끼"}]},{id:2919,hanja:"楣",strokes:"13",def:{en:["crossbeam above or under gate"],kr:["처마","미"]},hunum:[{kor:"미",def:"문미"}]},{id:2920,hanja:"弋",strokes:"3",def:{en:["catch","arrest","shoot with bow"],kr:["오랑캐","익"]},hunum:[{kor:"익",def:"주살"}]},{id:2921,hanja:"俥",strokes:"9",def:{en:["rickshaw","cart","vehicle","name of piece in Chinese chess"],kr:["인력거","거"]},hunum:[{kor:"거",def:"인력거"}]},{id:2922,hanja:"靵",strokes:"13",def:{en:[],kr:["단추","뉴"]},hunum:[{kor:"뉴",def:"단추"}]},{id:2923,hanja:"靶",strokes:"13",def:{en:["target","splashboard on chariot"],kr:["고삐","파"]},hunum:[{kor:"파",def:"고삐"}]},{id:2924,hanja:"娿",strokes:"11",def:{en:[],kr:["아리따울","아"]},hunum:[{kor:"아",def:"아리따울"}]},{id:2925,hanja:"緹",strokes:"15",def:{en:["reddish color","red","brown"],kr:["붉은","비단","제"]},hunum:[{kor:"제",def:"붉은 비단"}]},{id:2926,hanja:"鱅",strokes:"22",def:{en:["a kind of tench"],kr:["용어","용"]},hunum:[{kor:"용",def:"용어"}]},{id:2927,hanja:"苣",strokes:"11",def:{en:["kind of lettuce"],kr:["검은","깨","거"]},hunum:[{kor:"거",def:"상추"}]},{id:2928,hanja:"楥",strokes:"13",def:{en:["a last for making shoes","to turn on a lathe"],kr:["신골","원"]},hunum:[{kor:"원",def:"떡갈나무"}]},{id:2929,hanja:"弍",strokes:"5",def:{en:["number two"],kr:["二의","古字"]},hunum:[{kor:"이",def:"두"}]},{id:2930,hanja:"靷",strokes:"13",def:{en:["the leather belt that connects a horse with a cart"],kr:["가슴걸이","인"]},hunum:[{kor:"인",def:"가슴걸이"}]},{id:2931,hanja:"碌",strokes:"13",def:{en:["rough","uneven","rocky","mediocre"],kr:["돌","모양","록"]},hunum:[{kor:"록",def:"돌 모양"}]},{id:2932,hanja:"楦",strokes:"13",def:{en:["a last for making shoes","to turn on a lathe"]},hunum:[{kor:"원",def:"산골"},{kor:"훤",def:"산골"}]},{id:2933,hanja:"緻",strokes:"15",def:{en:["delicate","fine","dense"],kr:["헌","옷","기울","치"]},hunum:[{kor:"치",def:"톡톡할"}]},{id:2934,hanja:"鱇",strokes:"22",def:{en:["anglerfish"],kr:["천징어","강"]},hunum:[{kor:"강",def:"천징어"}]},{id:2935,hanja:"若",strokes:"11",def:{en:["if","supposing","assuming","similar"],kr:["만약","약"]},hunum:[{kor:"야",def:"땅이름"},{kor:"약",def:"같을"}]},{id:2936,hanja:"碍",strokes:"13",def:{en:["obstruct","hinder","block","deter"],kr:["礙의","俗字"]},hunum:[{kor:"애",def:"거리낄"}]},{id:2937,hanja:"式",strokes:"6",def:{en:["style","system","formula","rule"],kr:["수레","앞","가로막대","식"]},hunum:[{kor:"식",def:"법"}]},{id:2938,hanja:"楨",strokes:"13",def:{en:["hardwood","supports","posts"],kr:["단단한","나무","정"]},hunum:[{kor:"정",def:"담틀 마구리대"}]},{id:2939,hanja:"苦",strokes:"11",def:{en:["bitter","hardship","suffering"],kr:["쓸","고"]},hunum:[{kor:"고",def:"쓸"}]},{id:2940,hanja:"緼",strokes:"15",variant:"縕",def:{en:["variant of","tangled hemp","raveled silk","vague","confused"],kr:["縕"]},hunum:[{kor:"온",def:"헌솜"}]},{id:2941,hanja:"碎",strokes:"13",def:{en:["break","smash","broken","busted"],kr:["잘","쇄"]},hunum:[{kor:"쇄",def:"부술"}]},{id:2942,hanja:"靺",strokes:"14",def:{en:["stocking","the Tungusic tribe"],kr:["버선","말"]},hunum:[{kor:"말",def:"버선"}]},{id:2943,hanja:"苧",strokes:"11",def:{en:["china grass","ramie"],kr:["모시","저"]},hunum:[{kor:"저",def:"모시"}]},{id:2944,hanja:"鈍",strokes:"12",def:{en:["blunt","obtuse","dull","flat","dull"],kr:["무딜","둔"]},hunum:[{kor:"둔",def:"무딜"}]},{id:2945,hanja:"鱈",strokes:"22",def:{en:["codfish"],kr:["대구","설"]},hunum:[{kor:"설",def:"대구"}]},{id:2946,hanja:"碏",strokes:"13",def:{en:["coloured"],kr:["삼갈","작"]},hunum:[{kor:"작",def:"삼갈"}]},{id:2947,hanja:"弑",strokes:"12",def:{en:["to kill one"],kr:["윗사람","죽일","시"]},hunum:[{kor:"시",def:"윗사람 죽일"}]},{id:2948,hanja:"楪",strokes:"13",def:{en:["small dish","window"],kr:["널평상","접"]},hunum:[{kor:"접",def:"널평상"}]},{id:2949,hanja:"鱉",strokes:"23",def:{en:["turtle"],kr:["鼈과","同字"]},hunum:[{kor:"별",def:"자라"}]},{id:2950,hanja:"弒",strokes:"13",def:{en:["to kill one"],kr:["弑의","本字"]},hunum:[{kor:"시",def:"윗사람 죽일"}]},{id:2951,hanja:"靼",strokes:"14",def:{en:["tartars"],kr:["다룬가죽","달"]},hunum:[{kor:"달",def:"다룬가죽"}]},{id:2952,hanja:"楫",strokes:"13",def:{en:["oar","paddle"],kr:["노","즙"]},hunum:[{kor:"접",def:"노"},{kor:"즙",def:"노"}]},{id:2953,hanja:"碑",strokes:"13",def:{en:["stone tablet","gravestone"],kr:["돌기둥","비"]},hunum:[{kor:"비",def:"돌기둥"}]},{id:2954,hanja:"弓",strokes:"3",def:{en:["bow","curved","arched","KangXi radical number"],kr:["활","궁"]},hunum:[{kor:"궁",def:"활"}]},{id:2955,hanja:"弔",strokes:"4",def:{en:["condole","mourn","pity","hang"],kr:["위문할","조"]},hunum:[{kor:"적",def:"이를"},{kor:"조",def:"위문할"}]},{id:2956,hanja:"鈐",strokes:"12",def:{en:["lock","latch","stamp","seal"],kr:["큰","보습","검"]},hunum:[{kor:"검",def:"굴대 비녀장"}]},{id:2957,hanja:"楬",strokes:"13",def:{en:["tablet","a signpost"],kr:["패를","써서","표시할","갈"]},hunum:[{kor:"갈",def:"패를 써서 표시할"}]},{id:2958,hanja:"修",strokes:"10",def:{en:["study","repair","cultivate"],kr:["꾸밀","수"]},hunum:[{kor:"수",def:"닦을"}]},{id:2959,hanja:"鈑",strokes:"12",def:{en:["plate"],kr:["불린","금","판"]},hunum:[{kor:"판",def:"불린 금"}]},{id:2960,hanja:"苫",strokes:"11",def:{en:["rush or straw matting"],kr:["글씨","흘려","쓸","점"]},hunum:[{kor:"점",def:"이엉"}]},{id:2961,hanja:"碓",strokes:"13",def:{en:["pestle"],kr:["방아","대"]},hunum:[{kor:"대",def:"방아"}]},{id:2962,hanja:"業",strokes:"13",def:{en:["profession","business","trade"],kr:["공경할","업"]},hunum:[{kor:"업",def:"일"}]},{id:2963,hanja:"引",strokes:"4",def:{en:["to pull","draw out","attract","to stretch"],kr:["끌","인"]},hunum:[{kor:"인",def:"끌"}]},{id:2964,hanja:"俯",strokes:"10",def:{en:["bow down","face down","look down"],kr:["구푸릴","부"]},hunum:[{kor:"부",def:"구푸릴"}]},{id:2965,hanja:"俰",strokes:"10",def:{en:[],kr:["화할","화"]},hunum:[{kor:"화",def:"화할"}]},{id:2966,hanja:"楮",strokes:"13",def:{en:["mulberry","paper"],kr:["감매나무","저"]},hunum:[{kor:"저",def:"닥나무"}]},{id:2967,hanja:"鈒",strokes:"12",def:{en:["spear","slice","grass"],kr:["창","삽"]},hunum:[{kor:"삽",def:"창"}]},{id:2968,hanja:"楯",strokes:"13",def:{en:["shield","horizontal bar"],kr:["상여","순"]},hunum:[{kor:"순",def:"난간"}]},{id:2969,hanja:"俱",strokes:"10",def:{en:["all","together","accompany"],kr:["함께","구"]},hunum:[{kor:"구",def:"함께"}]},{id:2970,hanja:"俲",strokes:"10",def:{en:["same as","imitate","mimic"],kr:["傚"]},hunum:[{kor:"효",def:"본받을"}]},{id:2971,hanja:"鈔",strokes:"12",def:{en:["paper money","bank notes","copy"],kr:["노략질할","초"]},hunum:[{kor:"초",def:"노략질할"}]},{id:2972,hanja:"鱏",strokes:"23",def:{en:["a ray","skate"],kr:["칼철갑상어","심"]},hunum:[{kor:"심",def:"칼철갑상어"}]},{id:2973,hanja:"弗",strokes:"5",def:{en:["not","negative"],kr:["아닐","불"]},hunum:[{kor:"불",def:"아닐"}]},{id:2974,hanja:"弘",strokes:"5",def:{en:["enlarge","expand","liberal","great"],kr:["넓을","홍"]},hunum:[{kor:"홍",def:"넓을"}]},{id:2975,hanja:"苯",strokes:"11",def:{en:["benzene","luxuriant"],kr:["풀","떨기로","날","분"]},hunum:[{kor:"분",def:"풀 떨기로 날"}]},{id:2976,hanja:"碗",strokes:"13",def:{en:["bowl","small dish"],kr:["그릇","완"]},hunum:[{kor:"완",def:"그릇"}]},{id:2977,hanja:"俳",strokes:"10",def:{en:["actor","vaudeville show","insincere"],kr:["광대","배"]},hunum:[{kor:"배",def:"광대"}]},{id:2978,hanja:"俴",strokes:"10",def:{en:["thin"],kr:["엷을","천"]},hunum:[{kor:"천",def:"엷을"}]},{id:2979,hanja:"俵",strokes:"10",def:{en:["divide","distribute"],kr:["가마니","표"]},hunum:[{kor:"표",def:"나누어 줄"}]},{id:2980,hanja:"鱒",strokes:"23",def:{en:["barbel"],kr:["송어","준"]},hunum:[{kor:"준",def:"송어"}]},{id:2981,hanja:"鈗",strokes:"12",def:{en:[],kr:["창","윤"]},hunum:[{kor:"윤",def:"창"}]},{id:2982,hanja:"英",strokes:"11",def:{en:["petal","flower","leaf","brave","a hero","England","English"],kr:["아름다울","영"]},hunum:[{kor:"영",def:"꽃부리"}]},{id:2983,hanja:"楳",strokes:"13",def:{en:["plums","prunes","surname"],kr:["梅의","古字"]},hunum:[{kor:"매",def:"매화나무"}]},{id:2984,hanja:"鱓",strokes:"23",def:{en:["eel"],kr:["두렁허리","선"]},hunum:[{kor:"선",def:"두렁허리"}]},{id:2985,hanja:"搆",strokes:"13",def:{en:["pull","drag","reach","implicate"],kr:["얽어맬","구"]},hunum:[{kor:"구",def:"얽어맬"}]},{id:2986,hanja:"弛",strokes:"6",def:{en:["loosen","relax","unstring a bow"],kr:["해이할","이"]},hunum:[{kor:"이",def:"늦출"}]},{id:2987,hanja:"俶",strokes:"10",def:{en:["start","begin","beginning","arrange"],kr:["시작할","척"]},hunum:[{kor:"숙",def:"비롯할"},{kor:"척",def:"시작할"}]},{id:2988,hanja:"鱔",strokes:"23",def:{en:["eel"],kr:["鱓의","俗字"]},hunum:[{kor:"선",def:"드렁허리"}]},{id:2989,hanja:"苳",strokes:"11",def:{en:[],kr:["겨울살이","동"]},hunum:[{kor:"동",def:"겨울살이"}]},{id:2990,hanja:"蟀",strokes:"17",def:{en:["cricket"],kr:["귀뚜라미","솔"]},hunum:[{kor:"솔",def:"귀뚜라미"}]},{id:2991,hanja:"極",strokes:"13",def:{en:["extreme","utmost","furthest","final"],kr:["가운데","극"]},hunum:[{kor:"극",def:"가운데"}]},{id:2992,hanja:"員",strokes:"10",def:{en:["member","personnel","staff member"],kr:["둥글","원"]},hunum:[{kor:"원",def:"관원"}]},{id:2993,hanja:"俷",strokes:"10",def:{en:[],kr:["등질","비"]},hunum:[{kor:"비",def:"등질"}]},{id:2994,hanja:"苴",strokes:"11",def:{en:["sackcloth","female hemp plant"],kr:["신바닥","저"]},hunum:[{kor:"저",def:"암삼"}]},{id:2995,hanja:"湃",strokes:"12",def:{en:["sound of waves","turbulent"],kr:["물결","이는","모양","배"]},hunum:[{kor:"배",def:"물결 이는 모양"}]},{id:2996,hanja:"哢",strokes:"10",def:{en:["syllable"],kr:["지저귈","롱"]},hunum:[{kor:"롱",def:"지저귈"}]},{id:2997,hanja:"俸",strokes:"10",def:{en:["wages","salary","official emolument"],kr:["녹","봉"]},hunum:[{kor:"봉",def:"녹"}]},{id:2998,hanja:"楷",strokes:"13",def:{en:["model style of Chinese writing"],kr:["법","해"]},hunum:[{kor:"해",def:"해나무"}]},{id:2999,hanja:"鱖",strokes:"23",def:{en:["mandarin fish"],kr:["쏘가리","궤"]},hunum:[{kor:"궐",def:"쏘가리"},{kor:"궤",def:"쏘가리"}]},{id:3000,hanja:"搉",strokes:"13",def:{en:["knock","pick out","ridicule"],kr:["칠","각"]},hunum:[{kor:"각",def:"칠"}]},{id:3001,hanja:"湄",strokes:"12",def:{en:["water","shore","bank"],kr:["더운","물","미"]},hunum:[{kor:"미",def:"물 가"}]},{id:3002,hanja:"俹",strokes:"10",def:{en:[],kr:["거만할","아"]},hunum:[{kor:"아",def:"기댈"}]},{id:3003,hanja:"鈜",strokes:"12",def:{en:[],kr:["쇳소리","횡"]},hunum:[{kor:"횡",def:"쇳소리"}]},{id:3004,hanja:"楸",strokes:"13",def:{en:["mallotus japonicus","deciduous tre"],kr:["바둑판","추"]},hunum:[{kor:"추",def:"가래나무"}]},{id:3005,hanja:"弟",strokes:"7",def:{en:["young brother","junior","i","me"],kr:["아우","제"]},hunum:[{kor:"제",def:"아우"}]},{id:3006,hanja:"鱗",strokes:"23",def:{en:["fish scales"],kr:["비늘","린"]},hunum:[{kor:"린",def:"비늘"}]},{id:3007,hanja:"湅",strokes:"12",def:{en:["boil silk"],kr:["누일","련"]},hunum:[{kor:"련",def:"누일"}]},{id:3008,hanja:"哤",strokes:"10",def:{en:["jargon"],kr:["난잡할","방"]},hunum:[{kor:"방",def:"난잡할"}]},{id:3009,hanja:"俺",strokes:"10",def:{en:["personal pronoun","I"],kr:["클","업"]},hunum:[{kor:"엄",def:"자기"},{kor:"업",def:"자기"}]},{id:3010,hanja:"蟄",strokes:"17",def:{en:["to hibernate"],kr:["우물거릴","칩"]},hunum:[{kor:"칩",def:"벌레 움츠릴"}]},{id:3011,hanja:"鱘",strokes:"23",def:{en:["sturgeon"],kr:["심어","심"]},hunum:[{kor:"심",def:"심어"}]},{id:3012,hanja:"楹",strokes:"13",def:{en:["column","pillar","numerary adjunct"],kr:["하관들","영"]},hunum:[{kor:"영",def:"기둥"}]},{id:3013,hanja:"哥",strokes:"10",def:{en:["elder brother"],kr:["노래","가"]},hunum:[{kor:"가",def:"노래"}]},{id:3014,hanja:"鈞",strokes:"12",def:{en:["unit of measure equivalent to thirty catties"],kr:["서른","근","균"]},hunum:[{kor:"균",def:"서른 근"}]},{id:3015,hanja:"碟",strokes:"14",def:{en:["small dish","plate"],kr:["가죽다룰","설"]},hunum:[{kor:"설",def:"가죽다룰"}]},{id:3016,hanja:"哦",strokes:"10",def:{en:["oh"],kr:["놀람의","어조사","아"]},hunum:[{kor:"아",def:"놀람의 어조사"}]},{id:3017,hanja:"俻",strokes:"10",def:{en:["to prepare","to provide","to put in order","to complete perfection","completeness"],kr:["흘겨볼","비"]},hunum:[{kor:"비",def:"하여금"}]},{id:3018,hanja:"苹",strokes:"11",def:{en:["artemisia","duckweed","apple"],kr:["사과","평"]},hunum:[{kor:"평",def:"맑은 대쑥"}]},{id:3019,hanja:"弢",strokes:"8",def:{en:["bow case","scabbard","sheathe"],kr:["활집","도"]},hunum:[{kor:"도",def:"활집"}]},{id:3020,hanja:"鈟",strokes:"12",def:{en:[],kr:["낚시","조"]},hunum:[{kor:"조",def:"낚시"}]},{id:3021,hanja:"苺",strokes:"11",def:{en:["berries"],kr:["딸기","매"]},hunum:[{kor:"매",def:"딸기"}]},{id:3022,hanja:"蟇",strokes:"17",def:{en:["frog","toad"],kr:["개구리","마"]},hunum:[{kor:"마",def:"개구리"}]},{id:3023,hanja:"楼",strokes:"13",def:{en:["building of two or more stories"],kr:["樓의","俗字"]},hunum:[{kor:"루",def:"다락"}]},{id:3024,hanja:"損",strokes:"13",def:{en:["diminish","impair","injure"],kr:["괘","이름","손"]},hunum:[{kor:"손",def:"덜"}]},{id:3025,hanja:"哨",strokes:"10",def:{en:["whistle","blow whistle","chirp"],kr:["망","볼","초"]},hunum:[{kor:"소",def:"입술 비뚤어질"},{kor:"초",def:"망 볼"}]},{id:3026,hanja:"湊",strokes:"12",def:{en:["piece together","assemble"],kr:["모일","주"]},hunum:[{kor:"주",def:"모일"}]},{id:3027,hanja:"苻",strokes:"11",def:{en:["kind of herb","type of grass"],kr:["귀목풀","부"]},hunum:[{kor:"부",def:"귀목풀"}]},{id:3028,hanja:"哩",strokes:"10",def:{en:["mile"],kr:["어조사","리"]},hunum:[{kor:"리",def:"어조사"}]},{id:3029,hanja:"俾",strokes:"10",def:{en:["so that","in order that","cause"],kr:["더할","비"]},hunum:[{kor:"비",def:"더할"}]},{id:3030,hanja:"鱝",strokes:"24",def:{en:[],kr:["가오리","분"]},hunum:[{kor:"분",def:"가오리"}]},{id:3031,hanja:"碣",strokes:"14",def:{en:["stone tablet"],kr:["돌","세울","게"]},hunum:[{kor:"갈",def:"비"},{kor:"게",def:"돌 세울"}]},{id:3032,hanja:"搏",strokes:"13",def:{en:["seize","spring upon","strike"],kr:["칠","박"]},hunum:[{kor:"박",def:"칠"}]},{id:3033,hanja:"哪",strokes:"10",def:{en:["which"],kr:["연귀","쫓는","소리","나"]},hunum:[{kor:"나",def:"연귀 쫓는 소리"}]},{id:3034,hanja:"弥",strokes:"8",def:{en:["extensive","full","fill","complete"],kr:["彌와","同字"]},hunum:[{kor:"미",def:"미륵"}]},{id:3035,hanja:"搐",strokes:"13",def:{en:["cramp","spasm","convulsion","twitch"],kr:["당길","휵"]},hunum:[{kor:"휵",def:"당길"}]},{id:3036,hanja:"弦",strokes:"8",def:{en:["string","hypotenuse","crescent"],kr:["땅이름","현"]},hunum:[{kor:"현",def:"시위"}]},{id:3037,hanja:"哫",strokes:"10",def:{en:["to cajole"],kr:["아첨할","족"]},hunum:[{kor:"족",def:"아첨할"}]},{id:3038,hanja:"苽",strokes:"11",def:{en:["bulrush","Zizania latifolia"],kr:["줄","고"]},hunum:[{kor:"고",def:"줄"}]},{id:3039,hanja:"蟊",strokes:"17",def:{en:["a fly which is used similarly to cantharides"],kr:["蝥와","同字"]},hunum:[{kor:"모",def:"해충"}]},{id:3040,hanja:"碤",strokes:"14",def:{en:[],kr:["물","속","돌","영"]},hunum:[{kor:"영",def:"물 속 돌"}]},{id:3041,hanja:"鱟",strokes:"24",def:{en:["king crab"],kr:["참게","후"]},hunum:[{kor:"후",def:"참게"}]},{id:3042,hanja:"弧",strokes:"8",def:{en:["wooden bow","arc","crescent"],kr:["활","호"]},hunum:[{kor:"호",def:"활"}]},{id:3043,hanja:"哬",strokes:"10",def:{en:[],kr:["꾸짖을","하"]},hunum:[{kor:"하",def:"꾸짖을"}]},{id:3044,hanja:"苾",strokes:"11",def:{en:["smell","fragrance","aroma"]},hunum:[{kor:"필",def:"향기로울"}]},{id:3045,hanja:"蟋",strokes:"17",def:{en:["cricket"],kr:["귀뚜라미","실"]},hunum:[{kor:"실",def:"귀뚜라미"}]},{id:3046,hanja:"湍",strokes:"12",def:{en:["rapid water current","rapids"],kr:["여울","단"]},hunum:[{kor:"단",def:"여울"}]},{id:3047,hanja:"鱠",strokes:"24",def:{en:["minced fish","hash"],kr:["회","회"]},hunum:[{kor:"회",def:"회"}]},{id:3048,hanja:"苿",strokes:"11",def:{en:[]},hunum:[{kor:"미",def:"맛"}]},{id:3049,hanja:"搒",strokes:"13",def:{en:["pole","beat"],kr:["배저을","방"]},hunum:[{kor:"방",def:"배저을"}]},{id:3050,hanja:"湎",strokes:"12",def:{en:["flushed with drink","drunk"],kr:["빠질","면"]},hunum:[{kor:"면",def:"빠질"}]},{id:3051,hanja:"哭",strokes:"10",def:{en:["weep","cry","wail"],kr:["울","곡"]},hunum:[{kor:"곡",def:"울"}]},{id:3052,hanja:"搓",strokes:"13",def:{en:["to rub or roll between the hands"],kr:["비빌","차"]},hunum:[{kor:"차",def:"비빌"}]},{id:3053,hanja:"碧",strokes:"14",def:{en:["jade","green","blue"],kr:["푸를","벽"]},hunum:[{kor:"벽",def:"푸를"}]},{id:3054,hanja:"弩",strokes:"8",def:{en:["cross","bow","downward stroke"],kr:["쇠뇌","여러","개의","화살이나","돌을","잇따라","쏘게","된","큰","활","노"]},hunum:[{kor:"노",def:"쇠뇌(여러 개의 화살이나 돌을 잇따라 쏘게 된 큰 활)"}]},{id:3055,hanja:"哮",strokes:"10",def:{en:["cough","pant","roar"],kr:["으르렁거릴","효"]},hunum:[{kor:"효",def:"으르렁거릴"}]},{id:3056,hanja:"碨",strokes:"14",def:{en:[],kr:["바위","옹두라지","외"]},hunum:[{kor:"외",def:"돌 자갈 땅"}]},{id:3057,hanja:"搔",strokes:"13",def:{en:["to scratch"],kr:["분분할","소"]},hunum:[{kor:"소",def:"긁을"}]},{id:3058,hanja:"哯",strokes:"10",def:{en:[],kr:["아이","젖","토할","현"]},hunum:[{kor:"현",def:"아이 젖 토할"}]},{id:3059,hanja:"鱣",strokes:"24",def:{en:["sturgeon"],kr:["전어","전"]},hunum:[{kor:"전",def:"전어"}]},{id:3060,hanja:"碩",strokes:"14",def:{en:["great","eminent","large","big"],kr:["클","석"]},hunum:[{kor:"석",def:"클"}]},{id:3061,hanja:"湑",strokes:"12",def:{en:["to strain spirits","river in Guangxi","abundant","bright"],kr:["거를","서"]},hunum:[{kor:"서",def:"거를"}]},{id:3062,hanja:"搖",strokes:"13",def:{en:["wag","swing","wave","shake","scull"],kr:["별이름","요"]},hunum:[{kor:"요",def:"흔들"}]},{id:3063,hanja:"哰",strokes:"10",def:{en:["incoherent chatter"],kr:["말","알아듣지","못할","로"]},hunum:[{kor:"로",def:"말 알아듣지 못할"}]},{id:3064,hanja:"搗",strokes:"13",def:{en:["hull","thresh","beat","attack"],kr:["찧을","도"]},hunum:[{kor:"도",def:"찧을"}]},{id:3065,hanja:"哱",strokes:"10",def:{en:[],kr:["어지러울","발"]},hunum:[{kor:"발",def:"어지러울"}]},{id:3066,hanja:"弭",strokes:"9",def:{en:["stop","desist","end","quell"],kr:["그칠","미"]},hunum:[{kor:"미",def:"활고자"}]},{id:3067,hanja:"哲",strokes:"10",def:{en:["wise","sagacious","wise man","sage"],kr:["밝을","철"]},hunum:[{kor:"철",def:"밝을"}]},{id:3068,hanja:"蟒",strokes:"19",def:{en:["python","boa constrictor"],kr:["이무기","망"]},hunum:[{kor:"망",def:"이무기"}]},{id:3069,hanja:"湓",strokes:"12",def:{en:["an affluent of the River Yangtze near Kiukiang"],kr:["용솟음할","분"]},hunum:[{kor:"분",def:"용솟음할"}]},{id:3070,hanja:"碭",strokes:"14",def:{en:["brilliantly colored stone with veined patterns in it"],kr:["산이름","탕"]},hunum:[{kor:"탕",def:"무늬진 돌"}]},{id:3071,hanja:"哳",strokes:"10",def:{en:[],kr:["새소리","찰"]},hunum:[{kor:"찰",def:"새소리"}]},{id:3072,hanja:"湔",strokes:"12",def:{en:["wash","cleanse","purge"],kr:["물","번질","전"]},hunum:[{kor:"전",def:"빨"}]},{id:3073,hanja:"鱧",strokes:"24",def:{en:["snakehead"],kr:["가물치","례"]},hunum:[{kor:"례",def:"가물치"}]},{id:3074,hanja:"湖",strokes:"12",def:{en:["a lake","Hubei","Hunan","bluish"],kr:["호수","호"]},hunum:[{kor:"호",def:"호수"}]},{id:3075,hanja:"弱",strokes:"10",def:{en:["weak","fragile","delicate"],kr:["어릴","약"]},hunum:[{kor:"약",def:"약할"}]},{id:3076,hanja:"姃",strokes:"8",def:{en:[]},hunum:[{kor:"정",def:"단정할"}]},{id:3077,hanja:"搜",strokes:"13",def:{en:["search","seek","investigate"],kr:["어지러울","수"]},hunum:[{kor:"수",def:"찾을"}]},{id:3078,hanja:"哶",strokes:"10",def:{en:["bleat"],kr:["양울","마"]},hunum:[{kor:"마",def:"양울"}]},{id:3079,hanja:"獃",strokes:"13",def:{en:["dull","dull","simple","stupid"],kr:["어리석을","애"]},hunum:[{kor:"애",def:"어리석을"}]},{id:3080,hanja:"湘",strokes:"12",def:{en:["Hunan province"],kr:["강이름","상"]},hunum:[{kor:"상",def:"강이름"}]},{id:3081,hanja:"哷",strokes:"10",def:{en:[],kr:["닭","우는","소리","렬"]},hunum:[{kor:"렬",def:"닭 우는 소리"}]},{id:3082,hanja:"獄",strokes:"13",def:{en:["prison","jail","case","lawsuit"],kr:["감옥","옥"]},hunum:[{kor:"옥",def:"감옥"}]},{id:3083,hanja:"弴",strokes:"11",def:{en:["red lacquer bow"],kr:["그림","그린","활","조"]},hunum:[{kor:"돈",def:"그림 그린 활"},{kor:"조",def:"그림 그린 활"}]},{id:3084,hanja:"張",strokes:"11",def:{en:["stretch","extend","expand","sheet"],kr:["베풀","장"]},hunum:[{kor:"장",def:"베풀"}]},{id:3085,hanja:"姆",strokes:"8",def:{en:["child","matron"],kr:["여스승","모"]},hunum:[{kor:"모",def:"여스승"}]},{id:3086,hanja:"獅",strokes:"13",def:{en:["lion"],kr:["사자","사"]},hunum:[{kor:"사",def:"사자"}]},{id:3087,hanja:"哹",strokes:"10",def:{en:[],kr:["물새","우는","소리","부"]},hunum:[{kor:"부",def:"부는 소리"}]},{id:3088,hanja:"哺",strokes:"10",def:{en:["chew food","feed"],kr:["먹일","포"]},hunum:[{kor:"포",def:"씹어 먹을"}]},{id:3089,hanja:"鱭",strokes:"25",def:{en:["anchovy"],kr:["갈치","제"]},hunum:[{kor:"제",def:"갈치"}]},{id:3090,hanja:"湛",strokes:"12",def:{en:["deep","profound","clear","tranquil","placid"],kr:["잠길","침"]},hunum:[{kor:"담",def:"즐거울"},{kor:"침",def:"빠질"}]},{id:3091,hanja:"蟚",strokes:"18",def:{en:["a small land crab"],kr:["蟛과","同字"]},hunum:[{kor:"팽",def:"방게"}]},{id:3092,hanja:"姈",strokes:"8",def:{en:[],kr:["계집","슬기로울","령"]},hunum:[{kor:"령",def:"계집 슬기로울"}]},{id:3093,hanja:"需",strokes:"14",def:{en:["need","require","must"],kr:["괘","이름","수"]},hunum:[{kor:"수",def:"음식"}]},{id:3094,hanja:"湜",strokes:"12",def:{en:["transparent","clear"],kr:["엄숙할","식"]},hunum:[{kor:"식",def:"물 맑을"}]},{id:3095,hanja:"哼",strokes:"10",def:{en:["hum","sing softly","groan","moan"],kr:["겁낼","형"]},hunum:[{kor:"형",def:"겁낼"}]},{id:3096,hanja:"蟛",strokes:"18",def:{en:["a land"],kr:["방게","팽"]},hunum:[{kor:"팽",def:"방게"}]},{id:3097,hanja:"綃",strokes:"13",def:{en:["raw silk fabric"],kr:["생명주실","초"]},hunum:[{kor:"초",def:"생명주실"}]},{id:3098,hanja:"搢",strokes:"13",def:{en:["to stick into","to shake"],kr:["꽂을","진"]},hunum:[{kor:"진",def:"꽂을"}]},{id:3099,hanja:"姉",strokes:"8",def:{en:["elder sister"],kr:["姊의","俗字"]},hunum:[{kor:"자",def:"손위 누이"}]},{id:3100,hanja:"鈴",strokes:"13",def:{en:["bell"],kr:["방울","령"]},hunum:[{kor:"령",def:"방울"}]},{id:3101,hanja:"強",strokes:"11",def:{en:["strong","powerful","energetic"],kr:["强의","本字"]},hunum:[{kor:"강",def:"강할"}]},{id:3102,hanja:"湞",strokes:"12",def:{en:["river in Guangdong province"],kr:["물이름","정"]},hunum:[{kor:"정",def:"물이름"}]},{id:3103,hanja:"鈵",strokes:"13",def:{en:[]},hunum:[{kor:"병",def:"굳을"}]},{id:3104,hanja:"哽",strokes:"10",def:{en:["choke"],kr:["목멜","경"]},hunum:[{kor:"경",def:"목멜"}]},{id:3105,hanja:"湟",strokes:"12",def:{en:["river in qinghai province"],kr:["해자","황"]},hunum:[{kor:"황",def:"해자"}]},{id:3106,hanja:"弹",strokes:"11",def:{en:["pellet","bullet","shot","shell"],kr:["彈과","同字"]},hunum:[{kor:"탄",def:"탄알"}]},{id:3107,hanja:"始",strokes:"8",def:{en:["begin","start","then","only then"],kr:["별이름","시"]},hunum:[{kor:"시",def:"비로소"}]},{id:3108,hanja:"搤",strokes:"13",def:{en:["seize"],kr:["움켜쥘","액"]},hunum:[{kor:"액",def:"움켜쥘"}]},{id:3109,hanja:"搥",strokes:"13",def:{en:["beat","pound","strike","throw","shampoo"],kr:["북","칠","추"]},hunum:[{kor:"추",def:"북 칠"}]},{id:3110,hanja:"鈷",strokes:"13",def:{en:["cobalt","household iron cobaltum"],kr:["다리미","고"]},hunum:[{kor:"고",def:"다리미"}]},{id:3111,hanja:"霄",strokes:"15",def:{en:["sky","clouds","mist","night"],kr:["진눈깨비","소"]},hunum:[{kor:"소",def:"하늘"}]},{id:3112,hanja:"綆",strokes:"13",def:{en:["well rope"],kr:["두레박줄","경"]},hunum:[{kor:"경",def:"두레박줄"}]},{id:3113,hanja:"哿",strokes:"10",def:{en:["excellent","to commend to be able to"],kr:["좋을","가"]},hunum:[{kor:"가",def:"좋을"}]},{id:3114,hanja:"强",strokes:"12",def:{en:["strong","powerful","energetic"],kr:["바구미","강"]},hunum:[{kor:"강",def:"강할"}]},{id:3115,hanja:"確",strokes:"15",def:{en:["sure","certain","real","true"],kr:["굳을","확"]},hunum:[{kor:"확",def:"굳을"}]},{id:3116,hanja:"姍",strokes:"8",def:{en:["slander","ridicule","proceed slowly"],kr:["헐뜯을","산"]},hunum:[{kor:"산",def:"헐뜯을"}]},{id:3117,hanja:"鈸",strokes:"13",def:{en:["cymbals"],kr:["방울","발"]},hunum:[{kor:"발",def:"방울"}]},{id:3118,hanja:"霅",strokes:"15",def:{en:["thunder"],kr:["비올","삽"]},hunum:[{kor:"삽",def:"비올"}]},{id:3119,hanja:"弼",strokes:"12",def:{en:["aid","assist","help","correct"],kr:["거듭","필"]},hunum:[{kor:"필",def:"도울"}]},{id:3120,hanja:"霆",strokes:"15",def:{en:["a sudden peal of thunder"],kr:["번개","정"]},hunum:[{kor:"정",def:"벼락"}]},{id:3121,hanja:"蟠",strokes:"18",def:{en:["coil","coiling","curling","occupy"],kr:["서릴","반"]},hunum:[{kor:"반",def:"서릴"}]},{id:3122,hanja:"碻",strokes:"15",def:{en:["solid"],kr:["굳을","확"]},hunum:[{kor:"확",def:"굳을"}]},{id:3123,hanja:"搨",strokes:"13",def:{en:["rub","make rubbings of inscription"],kr:["베낄","탑"]},hunum:[{kor:"탑",def:"비문 박을"}]},{id:3124,hanja:"震",strokes:"15",def:{en:["shake","quake","tremor","excite"],kr:["벼락","진"]},hunum:[{kor:"진",def:"벼락"}]},{id:3125,hanja:"鈺",strokes:"13",def:{en:["rare treasure"],kr:["보배","옥"]},hunum:[{kor:"옥",def:"보배"}]},{id:3126,hanja:"湣",strokes:"12",def:{en:["mixed","confused","pity"],kr:["낚시줄","민"]},hunum:[{kor:"민",def:"낚시줄"}]},{id:3127,hanja:"霈",strokes:"15",def:{en:["torrential rains","flow of water"],kr:["비","쏟아질","패"]},hunum:[{kor:"패",def:"비 쏟아질"}]},{id:3128,hanja:"弾",strokes:"12",variant:"彈",def:{en:["variant of","a pellet","bullet","shot","shell"],kr:["彈"]},hunum:[{kor:"탄",def:"탄알"}]},{id:3129,hanja:"姐",strokes:"8",def:{en:["elder sister","young lady"],kr:["교만할","저"]},hunum:[{kor:"저",def:"맏누이"}]},{id:3130,hanja:"碼",strokes:"15",def:{en:["number","numerals","yard","symbol"],kr:["마노","마"]},hunum:[{kor:"마",def:"마노"}]},{id:3131,hanja:"姑",strokes:"8",def:{en:["father","husband"],kr:["시어미","고"]},hunum:[{kor:"고",def:"시어미"}]},{id:3132,hanja:"霉",strokes:"15",def:{en:["mildew","mold","moldy","mildewed"],kr:["매우","매"]},hunum:[{kor:"매",def:"매우"}]},{id:3133,hanja:"蟣",strokes:"18",def:{en:["louse eggs","nits"],kr:["서캐","기"]},hunum:[{kor:"기",def:"서캐"}]},{id:3134,hanja:"獐",strokes:"14",def:{en:["roebuck","hornless river deer"],kr:["노루","장"]},hunum:[{kor:"장",def:"노루"}]},{id:3135,hanja:"姒",strokes:"8",def:{en:["wife of elder brother"],kr:["동서","사"]},hunum:[{kor:"사",def:"동서"}]},{id:3136,hanja:"鱸",strokes:"27",def:{en:["sea perch","sea bass"],kr:["농어","로"]},hunum:[{kor:"로",def:"농어"}]},{id:3137,hanja:"碾",strokes:"15",def:{en:["roller","crush","roll"],kr:["맷돌","년"]},hunum:[{kor:"년",def:"맷돌"}]},{id:3138,hanja:"搪",strokes:"13",def:{en:["ward off","evade","parry","block"],kr:["당동할","당"]},hunum:[{kor:"당",def:"당동할"}]},{id:3139,hanja:"姓",strokes:"8",def:{en:["one","clan","people"],kr:["백성","성"]},hunum:[{kor:"성",def:"일가"}]},{id:3140,hanja:"搫",strokes:"14",def:{en:[],kr:["덜","반"]},hunum:[{kor:"반",def:"덜"}]},{id:3141,hanja:"湧",strokes:"12",def:{en:["well up","gush forth","rise"],kr:["涌의","俗字"]},hunum:[{kor:"용",def:"물 넘칠"}]},{id:3142,hanja:"霌",strokes:"16",def:{en:[],kr:["운우","모양","주"]},hunum:[{kor:"주",def:"운우 모양"}]},{id:3143,hanja:"綎",strokes:"13",def:{en:[],kr:["띠술","정"]},hunum:[{kor:"정",def:"띠술"}]},{id:3144,hanja:"委",strokes:"8",def:{en:["appoint","send","commission"],kr:["벼이삭","고개","숙일","위"]},hunum:[{kor:"위",def:"맡길"}]},{id:3145,hanja:"鱺",strokes:"30",def:{en:["eel"],kr:["뱀장어","리"]},hunum:[{kor:"려",def:"뱀장어"},{kor:"리",def:"뱀장어"}]},{id:3146,hanja:"獒",strokes:"14",def:{en:["mastiff","large fierce dog"],kr:["사나운","개","오"]},hunum:[{kor:"오",def:"사나운 개"}]},{id:3147,hanja:"搬",strokes:"13",def:{en:["transfer","move","remove","shift"],kr:["옮길","반"]},hunum:[{kor:"반",def:"옮길"}]},{id:3148,hanja:"搭",strokes:"13",def:{en:["join together","attach to","add to"],kr:["박을","탑"]},hunum:[{kor:"탑",def:"모뜰"}]},{id:3149,hanja:"鈿",strokes:"13",def:{en:["hairpin","gold inlaid work","filigree"],kr:["보배로","꾸민","그릇","전"]},hunum:[{kor:"전",def:"비녀"}]},{id:3150,hanja:"鱻",strokes:"33",def:{en:["fresh","new","delicious","rare","few"],kr:["생선","선"]},hunum:[{kor:"선",def:"생선"}]},{id:3151,hanja:"霍",strokes:"16",def:{en:["quickly","suddenly","surname"],kr:["빠를","곽"]},hunum:[{kor:"곽",def:"빠를"}]},{id:3152,hanja:"霎",strokes:"16",def:{en:["light rain","drizzle","an instant","passing"],kr:["가랑비","삽"]},hunum:[{kor:"삽",def:"가랑비"}]},{id:3153,hanja:"綏",strokes:"13",def:{en:["soothe","appease","pacify","carriage harness"],kr:["깃발","늘어질","유"]},hunum:[{kor:"수",def:"편안할"},{kor:"유",def:"깃발 늘어질"}]},{id:3154,hanja:"湫",strokes:"12",def:{en:["a small pond","a damp and narrow place"],kr:["서늘할","추"]},hunum:[{kor:"추",def:"늪"}]},{id:3155,hanja:"姗",strokes:"8",def:{en:["slander","ridicule","proceed slowly"],kr:["姍의","略字"]},hunum:[{kor:"산",def:"헐뜯을"}]},{id:3156,hanja:"霏",strokes:"16",def:{en:["falling of snow and rain"],kr:["눈","펄펄","내릴","비"]},hunum:[{kor:"비",def:"눈 펄펄 내릴"}]},{id:3157,hanja:"搯",strokes:"13",def:{en:["take out","pull out"],kr:["두드릴","도"]},hunum:[{kor:"도",def:"두드릴"}]},{id:3158,hanja:"搰",strokes:"13",def:{en:["dig","turbid","exert"],kr:["팔","골"]},hunum:[{kor:"골",def:"팔"}]},{id:3159,hanja:"侀",strokes:"8",def:{en:["form"],kr:["모일","형"]},hunum:[{kor:"형",def:"이룰"}]},{id:3160,hanja:"霑",strokes:"16",def:{en:["be moistened","soaked","moisten"],kr:["비","지정거릴","점"]},hunum:[{kor:"점",def:"젖을"}]},{id:3161,hanja:"姙",strokes:"9",def:{en:["conceive","be pregnant"],kr:["妊과","同字"]},hunum:[{kor:"임",def:"아이 밸"}]},{id:3162,hanja:"獗",strokes:"15",def:{en:["unruly","wild","violent","lawless"],kr:["도둑","일어날","궐"]},hunum:[{kor:"궐",def:"도둑 일어날"}]},{id:3163,hanja:"獘",strokes:"16",def:{en:["collapse"],kr:["엎드러질","폐"]},hunum:[{kor:"폐",def:"곤할"}]},{id:3164,hanja:"姚",strokes:"9",def:{en:["handsome","elegant","surname"],kr:["멀","요"]},hunum:[{kor:"요",def:"어여쁠"}]},{id:3165,hanja:"侁",strokes:"8",def:{en:["crowd"],kr:["떼지어","갈","신"]},hunum:[{kor:"신",def:"떼지어 갈"}]},{id:3166,hanja:"蟬",strokes:"18",def:{en:["cicada","continuous"],kr:["매미","선"]},hunum:[{kor:"선",def:"매미"}]},{id:3167,hanja:"經",strokes:"13",def:{en:["classic works","pass through"],kr:["날","경"]},hunum:[{kor:"경",def:"날"}]},{id:3168,hanja:"湮",strokes:"12",def:{en:["bury","sink","block up","stain"],kr:["잠길","인"]},hunum:[{kor:"인",def:"잠길"}]},{id:3169,hanja:"侂",strokes:"8",def:{en:["to commission","to entrust to","to depute","to request","to ask"],kr:["부탁할","탁"]},hunum:[{kor:"탁",def:"부칠"}]},{id:3170,hanja:"椀",strokes:"12",def:{en:["bowl","cup","dish"],kr:["사발","완"]},hunum:[{kor:"완",def:"주발"}]},{id:3171,hanja:"湯",strokes:"12",def:{en:["hot water","soup","gravy","broth"],kr:["씻을","탕"]},hunum:[{kor:"상",def:"물흐를"},{kor:"탕",def:"물 끓일"}]},{id:3172,hanja:"椁",strokes:"12",def:{en:["outer","vault"],kr:["관","곽"]},hunum:[{kor:"곽",def:"관"}]},{id:3173,hanja:"姜",strokes:"9",def:{en:["surname","ginger"],kr:["강할","강"]},hunum:[{kor:"강",def:"성씨"}]},{id:3174,hanja:"侃",strokes:"8",def:{en:["upright and strong","amiable"],kr:["강직할","간"]},hunum:[{kor:"간",def:"강직할"}]},{id:3175,hanja:"霓",strokes:"16",def:{en:["rainbow","variegated","colored"],kr:["암무지개","예"]},hunum:[{kor:"예",def:"암무지개"}]},{id:3176,hanja:"侄",strokes:"8",def:{en:["nephew"],kr:["어리석을","질"]},hunum:[{kor:"질",def:"어리석을"}]},{id:3177,hanja:"霔",strokes:"16",def:{en:[],kr:["장마","주"]},hunum:[{kor:"주",def:"장마"}]},{id:3178,hanja:"姝",strokes:"9",def:{en:["a beautiful girl"],kr:["예쁠","주"]},hunum:[{kor:"주",def:"예쁠"}]},{id:3179,hanja:"蟯",strokes:"18",def:{en:["worms"],kr:["촌백충","요"]},hunum:[{kor:"요",def:"촌백충"}]},{id:3180,hanja:"侅",strokes:"8",def:{en:["to give","prepared for included in","embraced in"],kr:["이상할","해"]},hunum:[{kor:"해",def:"이상할"}]},{id:3181,hanja:"搶",strokes:"13",def:{en:["plunder","rob","take by force"],kr:["닿을","창"]},hunum:[{kor:"창",def:"닿을"}]},{id:3182,hanja:"姞",strokes:"9",def:{en:["concubine"],kr:["성","길"]},hunum:[{kor:"길",def:"성"}]},{id:3183,hanja:"獜",strokes:"15",def:{en:[],kr:["튼튼할","린"]},hunum:[{kor:"린",def:"튼튼할"}]},{id:3184,hanja:"湲",strokes:"12",def:{en:["flow"],kr:["물","졸졸","흐를","환"]},hunum:[{kor:"원",def:"물소리"},{kor:"환",def:"물소리"}]},{id:3185,hanja:"椄",strokes:"12",def:{en:["to graft"],kr:["문설주","접"]},hunum:[{kor:"접",def:"나무 접붙일"}]},{id:3186,hanja:"來",strokes:"8",def:{en:["come","coming","return","returning"],kr:["올","래"]},hunum:[{kor:"래",def:"올"}]},{id:3187,hanja:"霖",strokes:"16",def:{en:["long spell of rain","copious rain"],kr:["장마","림"]},hunum:[{kor:"림",def:"장마"}]},{id:3188,hanja:"綘",strokes:"13",def:{en:[],kr:["縫과","同字"]},hunum:[{kor:"봉",def:"궤맬"}]},{id:3189,hanja:"蟲",strokes:"18",def:{en:["worms","insects"],kr:["김","오를","충"]},hunum:[{kor:"충",def:"벌레"}]},{id:3190,hanja:"椅",strokes:"12",def:{en:["chair","seat"],kr:["교의","의"]},hunum:[{kor:"의",def:"가래나무"}]},{id:3191,hanja:"侇",strokes:"8",def:{en:["a class","a category a corpse"],kr:["주검","이"]},hunum:[{kor:"이",def:"무리"}]},{id:3192,hanja:"継",strokes:"13",def:{en:["continue","maintain","carry on"],kr:["繼의","俗字"]},hunum:[{kor:"계",def:"이을"}]},{id:3193,hanja:"湳",strokes:"12",def:{en:[],kr:["강","이름","남"]},hunum:[{kor:"남",def:"강 이름"}]},{id:3194,hanja:"賀",strokes:"12",def:{en:["congratulate","send present"],kr:["축하할","하"]},hunum:[{kor:"하",def:"축하할"}]},{id:3195,hanja:"侈",strokes:"8",def:{en:["luxurious","extravagant"],kr:["풍부할","치"]},hunum:[{kor:"치",def:"사치할"}]},{id:3196,hanja:"続",strokes:"13",def:{en:["continue","carry on","succeed"],kr:["續의","略字"]},hunum:[{kor:"속",def:"이을"}]},{id:3197,hanja:"携",strokes:"13",def:{en:["lead by hand","take with","carry"],kr:["연속할","휴"]},hunum:[{kor:"휴",def:"끌"}]},{id:3198,hanja:"侉",strokes:"8",def:{en:[],kr:["자랑할","과"]},hunum:[{kor:"과",def:"자랑할"}]},{id:3199,hanja:"霙",strokes:"17",def:{en:["sleet"],kr:["구름","피어오를","영"]},hunum:[{kor:"영",def:"눈꽃"}]},{id:3200,hanja:"賁",strokes:"12",def:{en:["forge ahead","energetic","surname"],kr:["클","분"]},hunum:[{kor:"분",def:"클"}]},{id:3201,hanja:"獠",strokes:"15",def:{en:["to hunt at night by torches"],kr:["밤사냥","료"]},hunum:[{kor:"료",def:"밤사냥"}]},{id:3202,hanja:"綜",strokes:"14",def:{en:["arrange threads for weaving"],kr:["모을","종"]},hunum:[{kor:"종",def:"모을"}]},{id:3203,hanja:"姢",strokes:"9",def:{en:["beautiful","graceful"],kr:["娟과","同字"]},hunum:[{kor:"연",def:"고울"}]},{id:3204,hanja:"侊",strokes:"8",def:{en:["big"],kr:["성한","모양","광"]},hunum:[{kor:"광",def:"성한 모양"}]},{id:3205,hanja:"賂",strokes:"13",def:{en:["bribe","give present"],kr:["뇌물","줄","뢰"]},hunum:[{kor:"로",def:"뇌물 줄"},{kor:"뢰",def:"뇌물 줄"}]},{id:3206,hanja:"姣",strokes:"9",def:{en:["beautiful","handsome","pretty"],kr:["예쁠","교"]},hunum:[{kor:"교",def:"예쁠"}]},{id:3207,hanja:"例",strokes:"8",def:{en:["precedent","example","regulation"],kr:["법식","례"]},hunum:[{kor:"례",def:"법식"}]},{id:3208,hanja:"賃",strokes:"13",def:{en:["rent","hire","hired person"],kr:["품팔이","임"]},hunum:[{kor:"임",def:"품팔이"}]},{id:3209,hanja:"賄",strokes:"13",def:{en:["bribe","bribes","riches","wealth"],kr:["뇌물","회"]},hunum:[{kor:"회",def:"뇌물"}]},{id:3210,hanja:"搽",strokes:"13",def:{en:["smear","rub","wipe","anoint"],kr:["칠할","차"]},hunum:[{kor:"차",def:"칠할"}]},{id:3211,hanja:"姤",strokes:"9",def:{en:["mate","copulate","good"],kr:["만날","구"]},hunum:[{kor:"구",def:"만날"}]},{id:3212,hanja:"霜",strokes:"17",def:{en:["frost","crystallized","candied"],kr:["서리","상"]},hunum:[{kor:"상",def:"서리"}]},{id:3213,hanja:"芈",strokes:"9",def:{en:["bleat of sheep","surname"],kr:["성씨","미"]},hunum:[{kor:"미",def:"양이 울"}]},{id:3214,hanja:"獣",strokes:"15",def:{en:["beast","animal","bestial"],kr:["獸와","同字"]},hunum:[{kor:"수",def:"짐승"}]},{id:3215,hanja:"搾",strokes:"13",def:{en:["to crush with the hand","press","squeeze","extract"],kr:["짤","착"]},hunum:[{kor:"착",def:"짤"}]},{id:3216,hanja:"椋",strokes:"12",def:{en:["fruit"],kr:["들보","량"]},hunum:[{kor:"량",def:"들보"}]},{id:3217,hanja:"姥",strokes:"9",def:{en:["maternal grandmother","midwife"],kr:["할미","모"]},hunum:[{kor:"모",def:"할미"}]},{id:3218,hanja:"侍",strokes:"8",def:{en:["serve","attend upon","attendant","servant","samurai"],kr:["좇을","시"]},hunum:[{kor:"시",def:"모실"}]},{id:3219,hanja:"蟷",strokes:"19",def:{en:["mantis"],kr:["사마귀","당"]},hunum:[{kor:"당",def:"사마귀"}]},{id:3220,hanja:"獤",strokes:"15",def:{en:[],kr:["돈피","돈"]},hunum:[{kor:"돈",def:"돈피"}]},{id:3221,hanja:"霞",strokes:"17",def:{en:["rosy clouds"],kr:["놀","하"]},hunum:[{kor:"하",def:"놀"}]},{id:3222,hanja:"芊",strokes:"9",def:{en:["exuberant and vigorous foliage"],kr:["풀","무성할","천"]},hunum:[{kor:"천",def:"풀 무성할"}]},{id:3223,hanja:"姦",strokes:"9",def:{en:["adultery","debauchery","debauch"],kr:["간사할","간"]},hunum:[{kor:"간",def:"간사할"}]},{id:3224,hanja:"侎",strokes:"8",def:{en:["to soothe","to pacify","to settle","to establish"],kr:["어루만질","미"]},hunum:[{kor:"미",def:"어루만질"}]},{id:3225,hanja:"賆",strokes:"13",def:{en:[]},hunum:[{kor:"변",def:"더할"}]},{id:3226,hanja:"綠",strokes:"14",def:{en:["green","chlorine"],kr:["초록빛","록"]},hunum:[{kor:"록",def:"초록빛"}]},{id:3227,hanja:"湺",strokes:"12",def:{en:[]},hunum:[{kor:"보",def:"보"}]},{id:3228,hanja:"蟹",strokes:"19",def:{en:["crab","brachyura"],kr:["게","해"]},hunum:[{kor:"해",def:"게"}]},{id:3229,hanja:"侏",strokes:"8",def:{en:["small","little","tiny","dwarf"],kr:["난쟁이","주"]},hunum:[{kor:"주",def:"난쟁이"}]},{id:3230,hanja:"植",strokes:"12",def:{en:["plant","trees","plants","grow"],kr:["두목","치"]},hunum:[{kor:"식",def:"심을"},{kor:"치",def:"방망이"}]},{id:3231,hanja:"芋",strokes:"9",def:{en:["taro"],kr:["클","후"]},hunum:[{kor:"우",def:"토란"},{kor:"후",def:"클"}]},{id:3232,hanja:"資",strokes:"13",def:{en:["property","wealth","capital"],kr:["재물","자"]},hunum:[{kor:"자",def:"재물"}]},{id:3233,hanja:"侐",strokes:"8",def:{en:["quiet"],kr:["고요할","혁"]},hunum:[{kor:"혁",def:"고요할"}]},{id:3234,hanja:"椎",strokes:"12",def:{en:["hammer","mallet","vertebra"],kr:["참나무","추"]},hunum:[{kor:"추",def:"쇠몽둥이"}]},{id:3235,hanja:"姨",strokes:"9",def:{en:["mother","concubine"],kr:["처이모","이"]},hunum:[{kor:"이",def:"이모"}]},{id:3236,hanja:"賈",strokes:"13",def:{en:["surname","merchant","buy","trade"],kr:["장사","고"]},hunum:[{kor:"가",def:"값"},{kor:"고",def:"장사"}]},{id:3237,hanja:"綢",strokes:"14",def:{en:["silk cloth","satin damask"],kr:["얽힐","주"]},hunum:[{kor:"도",def:"쌀"},{kor:"주",def:"얽힐"}]},{id:3238,hanja:"侑",strokes:"8",def:{en:["help","assist","repay kindness"],kr:["귀인을","모시고","밥먹을","유"]},hunum:[{kor:"유",def:"도울"}]},{id:3239,hanja:"蟻",strokes:"19",def:{en:["ants"],kr:["술구더기","의"]},hunum:[{kor:"의",def:"왕개미"}]},{id:3240,hanja:"芍",strokes:"9",def:{en:["peony","water chestnuts"],kr:["연꽃의","열매","적"]},hunum:[{kor:"작",def:"작약"},{kor:"적",def:"연밥"}]},{id:3241,hanja:"綣",strokes:"14",def:{en:["affectionate","solicitous"],kr:["정다울","권"]},hunum:[{kor:"권",def:"정다울"}]},{id:3242,hanja:"姪",strokes:"9",def:{en:["niece"],kr:["조카","질"]},hunum:[{kor:"절",def:"조카"},{kor:"질",def:"조카"}]},{id:3243,hanja:"賊",strokes:"13",def:{en:["thief","traitor"],kr:["해칠","적"]},hunum:[{kor:"적",def:"도적"}]},{id:3244,hanja:"侒",strokes:"8",def:{en:[],kr:["편안할","안"]},hunum:[{kor:"안",def:"편안할"}]},{id:3245,hanja:"芎",strokes:"9",def:{en:["a kind of herb"],kr:["궁궁이","궁"]},hunum:[{kor:"궁",def:"궁궁이"}]},{id:3246,hanja:"獨",strokes:"16",def:{en:["alone","single","solitary","only"],kr:["홀로","독"]},hunum:[{kor:"독",def:"홀로"}]},{id:3247,hanja:"姫",strokes:"9",def:{en:["beauty","imperial concubine"],kr:["姬의","俗字"]},hunum:[{kor:"진",def:"삼갈"},{kor:"희",def:"여자"}]},{id:3248,hanja:"椑",strokes:"12",def:{en:["oval"],kr:["술통","비"]},hunum:[{kor:"비",def:"술통"}]},{id:3249,hanja:"霣",strokes:"18",def:{en:["fall"],kr:["천둥에","비","몰아올","운"]},hunum:[{kor:"운",def:"떨어질"}]},{id:3250,hanja:"獩",strokes:"16",def:{en:[],kr:["민족이름","예"]},hunum:[{kor:"예",def:"민족이름"}]},{id:3251,hanja:"綥",strokes:"14",def:{en:[],kr:["비단","쑥색","기"]},hunum:[{kor:"기",def:"비단 쑥색"}]},{id:3252,hanja:"湿",strokes:"12",def:{en:["wet","moist","humid","damp","illness"],kr:["濕과","同字"]},hunum:[{kor:"습",def:"젖을"}]},{id:3253,hanja:"姬",strokes:"10",def:{en:["beauty","imperial concubine"],kr:["성","희"]},hunum:[{kor:"희",def:"성"}]},{id:3254,hanja:"獪",strokes:"16",def:{en:["sly","cunning","crafty"],kr:["교활할","회"]},hunum:[{kor:"쾌",def:"간교할"},{kor:"회",def:"교활할"}]},{id:3255,hanja:"椒",strokes:"12",def:{en:["pepper","spices"],kr:["산초나무","초"]},hunum:[{kor:"초",def:"산초나무"}]},{id:3256,hanja:"侔",strokes:"8",def:{en:["equal"],kr:["가지런","할","모"]},hunum:[{kor:"모",def:"가지런 할"}]},{id:3257,hanja:"蟾",strokes:"19",def:{en:["toad"],kr:["두꺼비","섬"]},hunum:[{kor:"섬",def:"두꺼비"}]},{id:3258,hanja:"綦",strokes:"14",def:{en:["dark grey"],kr:["연두빛","비단","기"]},hunum:[{kor:"기",def:"연두빛 비단"}]},{id:3259,hanja:"獫",strokes:"16",def:{en:["dog"],kr:["험윤","오랑캐","험"]},hunum:[{kor:"험",def:"험윤 오랑캐"}]},{id:3260,hanja:"綧",strokes:"14",def:{en:[],kr:["피륙의","폭의","넓이","준"]},hunum:[{kor:"준",def:"피륙의 폭의 넓이"}]},{id:3261,hanja:"獬",strokes:"16",def:{en:["a fabulous monster"],kr:["해갓","해"]},hunum:[{kor:"해",def:"신통한 양"}]},{id:3262,hanja:"姮",strokes:"9",def:{en:["lady"],kr:["달","부르는","다른","이름","항"]},hunum:[{kor:"항",def:"항아"}]},{id:3263,hanja:"咀",strokes:"8",def:{en:["suck","chew","masticate"],kr:["먹을","저"]},hunum:[{kor:"저",def:"씹을"}]},{id:3264,hanja:"侖",strokes:"8",def:{en:["logical reasons","logical order"],kr:["둥글","륜"]},hunum:[{kor:"륜",def:"둥글"}]},{id:3265,hanja:"霦",strokes:"19",def:{en:[],kr:["옥","광채","빈"]},hunum:[{kor:"빈",def:"옥 광채"}]},{id:3266,hanja:"芒",strokes:"9",def:{en:["Miscanthus sinensis"],kr:["까끄라기","망"]},hunum:[{kor:"망",def:"까끄라기"}]},{id:3267,hanja:"侗",strokes:"8",def:{en:["big","ignorant","rude","rustic"],kr:["무지할","동"]},hunum:[{kor:"동",def:"무지할"}]},{id:3268,hanja:"霧",strokes:"19",def:{en:["fog","mist","vapor","fine spray"],kr:["어두울","무"]},hunum:[{kor:"무",def:"안개"}]},{id:3269,hanja:"綩",strokes:"14",def:{en:[]},hunum:[{kor:"원",def:"갓끈"}]},{id:3270,hanja:"芔",strokes:"9",def:{en:["a general term for plants"],kr:["풀","훼"]},hunum:[{kor:"훼",def:"풀"}]},{id:3271,hanja:"侘",strokes:"8",def:{en:["disappointed","forlorn"],kr:["실의할","차"]},hunum:[{kor:"차",def:"실의할"}]},{id:3272,hanja:"咂",strokes:"8",def:{en:["to suck","to smack the lips"],kr:["빨","잡"]},hunum:[{kor:"잡",def:"빨"}]},{id:3273,hanja:"獯",strokes:"17",def:{en:["a tribe of Scythians which invaded China during the Hsia dynasty"],kr:["오랑캐","이름","훈"]},hunum:[{kor:"훈",def:"오랑캐 이름"}]},{id:3274,hanja:"侙",strokes:"8",def:{en:[],kr:["두려워할","칙"]},hunum:[{kor:"칙",def:"두려워할"}]},{id:3275,hanja:"綫",strokes:"14",def:{en:["line","thread","wire","clue"],kr:["線과","同字"]},hunum:[{kor:"선",def:"줄"}]},{id:3276,hanja:"賑",strokes:"14",def:{en:["relieve","aid distressed","rich"],kr:["구휼할","진"]},hunum:[{kor:"진",def:"구휼할"}]},{id:3277,hanja:"咄",strokes:"8",def:{en:["noise of rage","cry out in anger"],kr:["꾸짖을","돌"]},hunum:[{kor:"돌",def:"꾸짖을"}]},{id:3278,hanja:"霪",strokes:"19",def:{en:["long and heavy rain"],kr:["장마","음"]},hunum:[{kor:"음",def:"장마"}]},{id:3279,hanja:"獰",strokes:"17",def:{en:["ferocious appearance","hideous"],kr:["삽살개","털","녕"]},hunum:[{kor:"영",def:"모질"}]},{id:3280,hanja:"綬",strokes:"14",def:{en:["silk ribbon attached as a seal"],kr:["인끈","수"]},hunum:[{kor:"수",def:"인끈"}]},{id:3281,hanja:"椙",strokes:"12",def:{en:[],kr:["삼나무","창"]},hunum:[{kor:"창",def:"삼나무"}]},{id:3282,hanja:"侚",strokes:"8",def:{en:["fast"],kr:["조리","돌릴","순"]},hunum:[{kor:"순",def:"좇을"}]},{id:3283,hanja:"維",strokes:"14",def:{en:["maintain","preserve","safeguard"],kr:["오직","유"]},hunum:[{kor:"유",def:"벼리"}]},{id:3284,hanja:"獲",strokes:"17",def:{en:["obtain","get","receive","seize"],kr:["얻을","획"]},hunum:[{kor:"확",def:"낙심할"},{kor:"획",def:"얻을"}]},{id:3285,hanja:"咆",strokes:"8",def:{en:["roar"],kr:["불끈","성낼","포"]},hunum:[{kor:"포",def:"고함지를"}]},{id:3286,hanja:"廁",strokes:"12",def:{en:["toilet","lavatory","mingle with"],kr:["버금","치"]},hunum:[{kor:"치",def:"뒷간"}]},{id:3287,hanja:"供",strokes:"8",def:{en:["supply","provide for","offer in worship"],kr:["이바지할","공"]},hunum:[{kor:"공",def:"이바지할"}]},{id:3288,hanja:"芘",strokes:"10",def:{en:[],kr:["풀","이름","비"]},hunum:[{kor:"비",def:"풀 이름"}]},{id:3289,hanja:"賓",strokes:"14",def:{en:["guest","visitor","surname","submit"],kr:["손","빈"]},hunum:[{kor:"빈",def:"손"}]},{id:3290,hanja:"綮",strokes:"14",def:{en:["embroidered banner"],kr:["발","고운","비단","계"]},hunum:[{kor:"계",def:"발 고운 비단"}]},{id:3291,hanja:"咇",strokes:"8",def:{en:["fragrant"],kr:["향기날","필"]},hunum:[{kor:"필",def:"향기날"}]},{id:3292,hanja:"侜",strokes:"8",def:{en:["lies"],kr:["속일","주"]},hunum:[{kor:"주",def:"속일"}]},{id:3293,hanja:"廂",strokes:"12",def:{en:["side","wing","theatre box"],kr:["행랑","상"]},hunum:[{kor:"상",def:"행랑"}]},{id:3294,hanja:"芙",strokes:"10",def:{en:["hibiscus"],kr:["부용","부"]},hunum:[{kor:"부",def:"부용"}]},{id:3295,hanja:"賔",strokes:"14",def:{en:["guest","visitor","surname","submit"],kr:["손","빈"]},hunum:[{kor:"빈",def:"손"}]},{id:3296,hanja:"廃",strokes:"12",def:{en:["abrogate","terminate","discard"],kr:["廢의","略字"]},hunum:[{kor:"폐",def:"폐할"}]},{id:3297,hanja:"検",strokes:"12",def:{en:["check","examine"],kr:["檢과","同字"]},hunum:[{kor:"검",def:"검사할"}]},{id:3298,hanja:"咈",strokes:"8",def:{en:["oppose"],kr:["어길","불"]},hunum:[{kor:"불",def:"어길"}]},{id:3299,hanja:"依",strokes:"8",def:{en:["rely on","be set in","consent","obey a wish"],kr:["병풍","의"]},hunum:[{kor:"의",def:"의지할"}]},{id:3300,hanja:"芚",strokes:"10",def:{en:["green sprout","foolish"],kr:["채소","이름","둔"]},hunum:[{kor:"둔",def:"채소 이름"}]},{id:3301,hanja:"咉",strokes:"8",def:{en:["an echo","a sound to vomit","as an infant"],kr:["목메어","슬피","울","앙"]},hunum:[{kor:"앙",def:"목메어 슬피 울"}]},{id:3302,hanja:"廄",strokes:"14",def:{en:["stable","barnyard"],kr:["廐와","同字"]},hunum:[{kor:"구",def:"마구간"}]},{id:3303,hanja:"侞",strokes:"8",def:{en:[],kr:["온순할","여"]},hunum:[{kor:"여",def:"온순할"}]},{id:3304,hanja:"釀",strokes:"24",def:{en:["brew","ferment"],kr:["술","빚을","양"]},hunum:[{kor:"양",def:"술 빚을"}]},{id:3305,hanja:"獵",strokes:"18",def:{en:["hunt","field sports"],kr:["사냥","렵"]},hunum:[{kor:"렵",def:"사냥"}]},{id:3306,hanja:"綰",strokes:"14",def:{en:["to string together","to bind up"],kr:["얽을","관"]},hunum:[{kor:"관",def:"얽을"}]},{id:3307,hanja:"釁",strokes:"25",def:{en:["smear with blood in sacrifice","rift","quarrel"],kr:["피바를","흔"]},hunum:[{kor:"흔",def:"피바를"}]},{id:3308,hanja:"咊",strokes:"8",def:{en:["harmony","peace","conciliation","to be on good terms with","kindly","mild"],kr:["순할","화"]},hunum:[{kor:"화",def:"순할"}]},{id:3309,hanja:"硃",strokes:"11",def:{en:["a red mole","cinnabar"],kr:["주사","주"]},hunum:[{kor:"주",def:"주사"}]},{id:3310,hanja:"姸",strokes:"9",def:{en:["beautiful"],kr:["사랑스러울","연"]},hunum:[{kor:"연",def:"고울"}]},{id:3311,hanja:"霰",strokes:"20",def:{en:["hail","sleet"],kr:["별","선"]},hunum:[{kor:"산",def:"싸라기눈"},{kor:"선",def:"싸락눈"}]},{id:3312,hanja:"綱",strokes:"14",def:{en:["heavy rope","hawser","main points"],kr:["대강","강"]},hunum:[{kor:"강",def:"벼리"}]},{id:3313,hanja:"芝",strokes:"10",def:{en:["sesame","a purplish or brown mushroom thought to have miraculous powers"],kr:["지초","지"]},hunum:[{kor:"지",def:"지초"}]},{id:3314,hanja:"咋",strokes:"8",def:{en:["question","why","to bite","loud"],kr:["잠간","사"]},hunum:[{kor:"사",def:"잠간"}]},{id:3315,hanja:"侠",strokes:"8",def:{en:["chivalrous person","knight"],kr:["俠과","同字"]},hunum:[{kor:"겹",def:"의기로울"},{kor:"협",def:"의기로울"}]},{id:3316,hanja:"獷",strokes:"18",def:{en:["fierce","rude","uncivilized"],kr:["사나울","광"]},hunum:[{kor:"광",def:"사나울"}]},{id:3317,hanja:"網",strokes:"14",def:{en:["net","web","network"],kr:["그물","망"]},hunum:[{kor:"망",def:"그물"}]},{id:3318,hanja:"和",strokes:"8",def:{en:["harmony","peace","peaceful","calm"],kr:["화할","화"]},hunum:[{kor:"화",def:"화할"}]},{id:3319,hanja:"賙",strokes:"15",def:{en:["give for charity"],kr:["진휼할","주"]},hunum:[{kor:"주",def:"진휼할"}]},{id:3320,hanja:"硅",strokes:"11",def:{en:["silicon"],kr:["유리만드는","흙","규"]},hunum:[{kor:"규",def:"유리만드는 흙"}]},{id:3321,hanja:"姺",strokes:"9",def:{en:["name of an ancient state"],kr:["나라이름","신"]},hunum:[{kor:"신",def:"나라이름"}]},{id:3322,hanja:"価",strokes:"8",def:{en:["price","value"],kr:["價의","略字"]},hunum:[{kor:"가",def:"값"}]},{id:3323,hanja:"露",strokes:"20",def:{en:["dew","bare","open","exposed"],kr:["이슬","로"]},hunum:[{kor:"로",def:"이슬"}]},{id:3324,hanja:"釃",strokes:"26",def:{en:["strain"],kr:["술","거를","시"]},hunum:[{kor:"시",def:"술 거를"}]},{id:3325,hanja:"獸",strokes:"19",def:{en:["beast","animal","bestial"],kr:["짐승","수"]},hunum:[{kor:"수",def:"짐승"}]},{id:3326,hanja:"綳",strokes:"14",def:{en:["a cloth to carry an infant on the back","to tie","to bind"]},hunum:[{kor:"붕",def:"묶을"}]},{id:3327,hanja:"廈",strokes:"13",def:{en:["big building","mansion"],kr:["큰","집","하"]},hunum:[{kor:"하",def:"큰 집"}]},{id:3328,hanja:"綴",strokes:"14",def:{en:["patch together","link","connect"],kr:["꿰멜","체"]},hunum:[{kor:"철",def:"꿰맬"},{kor:"체",def:"꿰멜"}]},{id:3329,hanja:"姻",strokes:"9",def:{en:["relatives by marriage"],kr:["혼인","인"]},hunum:[{kor:"인",def:"혼인"}]},{id:3330,hanja:"芟",strokes:"10",def:{en:["mow","cut","weed out","scythe"],kr:["벨","삼"]},hunum:[{kor:"삼",def:"벨"}]},{id:3331,hanja:"賚",strokes:"15",def:{en:["give","present","confer","surname"],kr:["줄","뢰"]},hunum:[{kor:"뢰",def:"줄"}]},{id:3332,hanja:"咍",strokes:"8",def:{en:["laugh"],kr:["비웃을","해"]},hunum:[{kor:"해",def:"비웃을"}]},{id:3333,hanja:"綵",strokes:"14",def:{en:["varicolored silk","variegated"],kr:["비단","채"]},hunum:[{kor:"채",def:"비단"}]},{id:3334,hanja:"賛",strokes:"15",def:{en:["help","support","assist","aid"],kr:["도울","찬"]},hunum:[{kor:"찬",def:"도울"}]},{id:3335,hanja:"廉",strokes:"13",def:{en:["upright","honorable","honest"],kr:["청렴할","렴"]},hunum:[{kor:"렴",def:"청렴할"}]},{id:3336,hanja:"侣",strokes:"8",def:{en:["companion","associate with"]},hunum:[{kor:"려",def:"짝"}]},{id:3337,hanja:"釅",strokes:"27",def:{en:["thick","strong"],kr:["술맛","텁텁할","염"]},hunum:[{kor:"염",def:"술맛 텁텁할"}]},{id:3338,hanja:"獺",strokes:"19",def:{en:["otter"],kr:["수달","찰"]},hunum:[{kor:"달",def:"수달"},{kor:"찰",def:"수달"}]},{id:3339,hanja:"咎",strokes:"8",def:{en:["fault","defect","error","mistake"],kr:["허물","구"]},hunum:[{kor:"고",def:"허물"},{kor:"구",def:"허물"}]},{id:3340,hanja:"廊",strokes:"12",def:{en:["corridor","porch","veranda"],kr:["복도","랑"]},hunum:[{kor:"랑",def:"복도"}]},{id:3341,hanja:"侤",strokes:"8",def:{en:[],kr:["생각할","고"]},hunum:[{kor:"고",def:"생각할"}]},{id:3342,hanja:"釆",strokes:"7",def:{en:["distinguish","KangXi radical"],kr:["분별할","변"]},hunum:[{kor:"변",def:"분별할"}]},{id:3343,hanja:"芡",strokes:"10",def:{en:["plant allied to the waterlily"],kr:["가시연밥","검"]},hunum:[{kor:"검",def:"마름"}]},{id:3344,hanja:"賜",strokes:"15",def:{en:["give","bestow favors","appoint"],kr:["줄","사"]},hunum:[{kor:"사",def:"줄"}]},{id:3345,hanja:"獻",strokes:"19",def:{en:["offer","present","show","display"],kr:["어진이","헌"]},hunum:[{kor:"사",def:"술통"},{kor:"헌",def:"바칠"}]},{id:3346,hanja:"采",strokes:"8",def:{en:["collect","gather","pick","pluck"],kr:["캘","채"]},hunum:[{kor:"채",def:"캘"}]},{id:3347,hanja:"咏",strokes:"8",def:{en:["sing song or poem","hum","chant"],kr:["읊을","영"]},hunum:[{kor:"영",def:"노래할"}]},{id:3348,hanja:"廋",strokes:"13",def:{en:["conceal","hide","search for","seek"],kr:["숨길","수"]},hunum:[{kor:"수",def:"숨길"}]},{id:3349,hanja:"獼",strokes:"20",def:{en:["macacus monkey"],kr:["원숭이","미"]},hunum:[{kor:"미",def:"원숭이"}]},{id:3350,hanja:"姿",strokes:"9",def:{en:["one","carriage","bearing"],kr:["맵시","자"]},hunum:[{kor:"자",def:"맵시"}]},{id:3351,hanja:"咐",strokes:"8",def:{en:["instruct","order"],kr:["분부할","부"]},hunum:[{kor:"부",def:"분부할"}]},{id:3352,hanja:"釈",strokes:"11",def:{en:["interprete","elucidate","release"],kr:["釋의","俗字"]},hunum:[{kor:"석",def:"풀"}]},{id:3353,hanja:"芢",strokes:"10",def:{en:[],kr:["씨","인"]},hunum:[{kor:"인",def:"씨"}]},{id:3354,hanja:"賞",strokes:"15",def:{en:["reward","grant","bestow","appreciate"],kr:["상줄","상"]},hunum:[{kor:"상",def:"상줄"}]},{id:3355,hanja:"綸",strokes:"14",def:{en:["green silk thread or tassel"],kr:["낚싯줄","륜"]},hunum:[{kor:"관",def:"관건"},{kor:"륜",def:"낚싯줄"}]},{id:3356,hanja:"釉",strokes:"12",def:{en:["glaze"],kr:["물건","빛날","유"]},hunum:[{kor:"유",def:"물건 빛날"}]},{id:3357,hanja:"芣",strokes:"10",def:{en:["medicinal plantago"],kr:["질경이","부"]},hunum:[{kor:"부",def:"질경이"}]},{id:3358,hanja:"咒",strokes:"8",def:{en:["curse","damn","incantation"],kr:["呪와","同字"]},hunum:[{kor:"주",def:"빌"}]},{id:3359,hanja:"霸",strokes:"21",def:{en:["rule by might rather than right"],kr:["패왕","패"]},hunum:[{kor:"패",def:"으뜸"}]},{id:3360,hanja:"賠",strokes:"15",def:{en:["indemnify","suffer loss"],kr:["물어줄","배"]},hunum:[{kor:"배",def:"물어줄"}]},{id:3361,hanja:"綺",strokes:"14",def:{en:["fine thin silk","elegant","beautifu"],kr:["비단","기"]},hunum:[{kor:"기",def:"비단"}]},{id:3362,hanja:"綻",strokes:"14",def:{en:["ripped seam","rend","crack"],kr:["파할","탄"]},hunum:[{kor:"탄",def:"옷 터질"}]},{id:3363,hanja:"椧",strokes:"12",def:{en:["gutter"],kr:["홈","통","명"]},hunum:[{kor:"명",def:"홈 통"}]},{id:3364,hanja:"廏",strokes:"14",def:{en:["stable","barnyard"],kr:["廐와","同字"]},hunum:[{kor:"구",def:"마구간"}]},{id:3365,hanja:"霹",strokes:"21",def:{en:["thunder","crashing thunder"],kr:["벼락","벽"]},hunum:[{kor:"벽",def:"벼락"}]},{id:3366,hanja:"釋",strokes:"20",def:{en:["interprete","elucidate","release"],kr:["풀","석"]},hunum:[{kor:"석",def:"풀"}]},{id:3367,hanja:"芥",strokes:"10",def:{en:["mustard plant","mustard","tiny"],kr:["티끌","개"]},hunum:[{kor:"개",def:"겨자"}]},{id:3368,hanja:"賡",strokes:"15",def:{en:["continue"],kr:["일","갱"]},hunum:[{kor:"갱",def:"이을"}]},{id:3369,hanja:"芦",strokes:"10",def:{en:["rushes","reeds"],kr:["蔖의","俗字"]},hunum:[{kor:"호",def:"지황"}]},{id:3370,hanja:"賢",strokes:"15",def:{en:["virtuous","worthy","good","able"],kr:["구멍","현"]},hunum:[{kor:"현",def:"어질"}]},{id:3371,hanja:"廐",strokes:"14",def:{en:["stable","barnyard"],kr:["마구간","구"]},hunum:[{kor:"구",def:"마구간"}]},{id:3372,hanja:"里",strokes:"7",def:{en:["unit of distance","village","lane"],kr:["마을","리"]},hunum:[{kor:"리",def:"마을"}]},{id:3373,hanja:"重",strokes:"9",def:{en:["heavy","weighty","double"],kr:["무거울","중"]},hunum:[{kor:"중",def:"무거울"}]},{id:3374,hanja:"鰈",strokes:"20",def:{en:["flatfish","flounder","sole"],kr:["넙치","접"]},hunum:[{kor:"접",def:"가자미"}]},{id:3375,hanja:"硏",strokes:"11",def:{en:["grind"],kr:["연마할","연"]},hunum:[{kor:"연",def:"연마할"}]},{id:3376,hanja:"咕",strokes:"8",def:{en:["mumble","mutter","murmur","rumble"],kr:["투덜거릴","고"]},hunum:[{kor:"고",def:"투덜거릴"}]},{id:3377,hanja:"廑",strokes:"14",def:{en:["a hut","careful"],kr:["작은집","근"]},hunum:[{kor:"근",def:"작은집"}]},{id:3378,hanja:"芧",strokes:"10",def:{en:["chestnut oak"],kr:["상수리","서"]},hunum:[{kor:"서",def:"상수리"}]},{id:3379,hanja:"賣",strokes:"15",def:{en:["sell","betray","show off"],kr:["팔","매"]},hunum:[{kor:"매",def:"팔"}]},{id:3380,hanja:"綽",strokes:"14",def:{en:["graceful","delicate","spacious"],kr:["너그러울","작"]},hunum:[{kor:"작",def:"너그러울"}]},{id:3381,hanja:"鰉",strokes:"20",def:{en:["sturgeon"],kr:["용상어","황"]},hunum:[{kor:"황",def:"용상어"}]},{id:3382,hanja:"賤",strokes:"15",def:{en:["mean","low","cheap","worthless"],kr:["천할","천"]},hunum:[{kor:"천",def:"천할"}]},{id:3383,hanja:"咖",strokes:"8",def:{en:["coffee","a phonetic"],kr:["커피의","음차로","쓰는자","가"]},hunum:[{kor:"가",def:"커피차"}]},{id:3384,hanja:"野",strokes:"11",def:{en:["open country","field","wilderness"],kr:["들판","야"]},hunum:[{kor:"야",def:"들판"}]},{id:3385,hanja:"芨",strokes:"10",def:{en:["name of a plant","the roots are used for various purposes"],kr:["말오줌나무","급"]},hunum:[{kor:"급",def:"말오줌나무"}]},{id:3386,hanja:"綾",strokes:"14",def:{en:["thin silk","damask silk"],kr:["비단","릉"]},hunum:[{kor:"릉",def:"비단"}]},{id:3387,hanja:"霽",strokes:"22",def:{en:["to clear up after rain","to cease be angry"],kr:["갤","제"]},hunum:[{kor:"제",def:"갤"}]},{id:3388,hanja:"廓",strokes:"14",def:{en:["broad","wide","open","empty","to expand"],kr:["클","확"]},hunum:[{kor:"곽",def:"둘레"},{kor:"확",def:"클"}]},{id:3389,hanja:"量",strokes:"12",def:{en:["measure","quantity","capacity"],kr:["헤아릴","량"]},hunum:[{kor:"량",def:"헤아릴"}]},{id:3390,hanja:"鰊",strokes:"20",def:{en:["a herring"],kr:["고기","이름","련"]},hunum:[{kor:"련",def:"고기 이름"}]},{id:3391,hanja:"芩",strokes:"10",def:{en:["salt marsh plant"],kr:["풀","이름","금"]},hunum:[{kor:"금",def:"풀 이름"}]},{id:3392,hanja:"綿",strokes:"14",def:{en:["cotton wad","wool","soft","downy"],kr:["이어질","면"]},hunum:[{kor:"면",def:"이어질"}]},{id:3393,hanja:"侮",strokes:"9",def:{en:["insult","ridicule","disgrace"],kr:["업신여길","모"]},hunum:[{kor:"모",def:"업신여길"}]},{id:3394,hanja:"霾",strokes:"22",def:{en:["misty","foggy","dust storm"],kr:["흙비","올","매"]},hunum:[{kor:"매",def:"흙비 올"}]},{id:3395,hanja:"釐",strokes:"18",def:{en:["manage","control"],kr:["제사","지내는","고기","희"]},hunum:[{kor:"리",def:"다스릴"},{kor:"희",def:"제사 지내는 고기"}]},{id:3396,hanja:"芪",strokes:"10",def:{en:["celery"],kr:["단너삼","기"]},hunum:[{kor:"기",def:"단너삼"}]},{id:3397,hanja:"賦",strokes:"15",def:{en:["tax","give","endow","army","diffuse"],kr:["구실","부"]},hunum:[{kor:"부",def:"구실"}]},{id:3398,hanja:"侯",strokes:"9",def:{en:["marquis","lord","target in archery"],kr:["과녁","후"]},hunum:[{kor:"후",def:"과녁"}]},{id:3399,hanja:"鰌",strokes:"20",def:{en:["loach","squid","lizard","eel"],kr:["해추","추"]},hunum:[{kor:"추",def:"미꾸라지"}]},{id:3400,hanja:"廕",strokes:"14",def:{en:["shade","protect","shade","cover"],kr:["덮을","음"]},hunum:[{kor:"음",def:"덮을"}]},{id:3401,hanja:"金",strokes:"8",def:{en:["gold","metals in general","money"],kr:["사람의","성","김"]},hunum:[{kor:"금",def:"쇠"},{kor:"김",def:"사람의 성"}]},{id:3402,hanja:"芫",strokes:"10",def:{en:["daphne genkwa","poisonous plant"],kr:["여뀌","원"]},hunum:[{kor:"원",def:"고기 잡는 풀"}]},{id:3403,hanja:"鰍",strokes:"20",def:{en:["loach"],kr:["미꾸라지","추"]},hunum:[{kor:"추",def:"미꾸라지"}]},{id:3404,hanja:"揀",strokes:"12",def:{en:["choose","select","pick up","gather"],kr:["분별할","련"]},hunum:[{kor:"간",def:"가릴"},{kor:"연",def:"가릴"}]},{id:3405,hanja:"芬",strokes:"10",def:{en:["fragrance","aroma","perfume"],kr:["향기로울","분"]},hunum:[{kor:"분",def:"향기로울"}]},{id:3406,hanja:"芭",strokes:"10",def:{en:["plantain or banana palm","fragrant"],kr:["파초","파"]},hunum:[{kor:"파",def:"파초"}]},{id:3407,hanja:"廖",strokes:"14",def:{en:["surname","name of an ancient state"],kr:["공허할","료"]},hunum:[{kor:"료",def:"공허할"}]},{id:3408,hanja:"咜",strokes:"8",def:{en:["to scold"],kr:["咤의","譌字"]},hunum:[{kor:"타",def:"꾸짖을"}]},{id:3409,hanja:"侲",strokes:"9",def:{en:[],kr:["동자","진"]},hunum:[{kor:"진",def:"동자"}]},{id:3410,hanja:"質",strokes:"15",def:{en:["matter","material","substance"],kr:["바탕","질"]},hunum:[{kor:"지",def:"바탕"},{kor:"질",def:"바탕"}]},{id:3411,hanja:"椰",strokes:"13",def:{en:["palm tree","coconut palm"],kr:["야자나무","야"]},hunum:[{kor:"야",def:"야자나무"}]},{id:3412,hanja:"芮",strokes:"10",def:{en:["tiny","small","water"],kr:["성씨","예"]},hunum:[{kor:"예",def:"풀 뾰족뾰족할"}]},{id:3413,hanja:"侳",strokes:"9",def:{en:[],kr:["욕보일","좌"]},hunum:[{kor:"좌",def:"욕보일"}]},{id:3414,hanja:"揃",strokes:"12",def:{en:["shear"],kr:["가지런히","할","전"]},hunum:[{kor:"전",def:"가를"}]},{id:3415,hanja:"鰐",strokes:"20",def:{en:["alligator"],kr:["악어","악"]},hunum:[{kor:"악",def:"악어"}]},{id:3416,hanja:"芯",strokes:"10",def:{en:["pith from rush"],kr:["등심초","심"]},hunum:[{kor:"심",def:"등심초"}]},{id:3417,hanja:"揄",strokes:"12",def:{en:["lift","raise","praise","hang","flap"],kr:["희롱할","유"]},hunum:[{kor:"유",def:"당길"}]},{id:3418,hanja:"芰",strokes:"10",def:{en:["water caltrop"],kr:["세발","마름","기"]},hunum:[{kor:"기",def:"세발 마름"}]},{id:3419,hanja:"花",strokes:"10",def:{en:["flower","blossoms"],kr:["꽃","화"]},hunum:[{kor:"화",def:"꽃"}]},{id:3420,hanja:"侵",strokes:"9",def:{en:["invade","encroach upon","raid"],kr:["흉작","침"]},hunum:[{kor:"침",def:"범할"}]},{id:3421,hanja:"廚",strokes:"15",def:{en:["kitchen","closet","cupboard"],kr:["부엌","주"]},hunum:[{kor:"주",def:"부엌"}]},{id:3422,hanja:"賬",strokes:"15",def:{en:["accounts","bill","debt","credit"],kr:["치부책","장"]},hunum:[{kor:"장",def:"치부책"}]},{id:3423,hanja:"釗",strokes:"10",def:{en:["endeavor","strive","encourage","cut"]},hunum:[{kor:"쇠",def:"쇠"}]},{id:3424,hanja:"鰒",strokes:"20",def:{en:["abalone"],kr:["전복","복"]},hunum:[{kor:"복",def:"전복"}]},{id:3425,hanja:"咠",strokes:"9",def:{en:["to whisper"],kr:["참소할","집"]},hunum:[{kor:"집",def:"참소할"}]},{id:3426,hanja:"釘",strokes:"10",def:{en:["nail","spike","pursue closely"],kr:["못","정"]},hunum:[{kor:"정",def:"창"}]},{id:3427,hanja:"廛",strokes:"15",def:{en:["a store","shop","ground alloted to a retainer"],kr:["터전","전"]},hunum:[{kor:"전",def:"전방"}]},{id:3428,hanja:"椴",strokes:"13",def:{en:["poplar","aspen"],kr:["자작나무","단"]},hunum:[{kor:"단",def:"자작나무"}]},{id:3429,hanja:"揆",strokes:"12",def:{en:["prime minister","to guess","estimate"],kr:["헤아릴","규"]},hunum:[{kor:"규",def:"헤아릴"}]},{id:3430,hanja:"侶",strokes:"9",def:{en:["companion","associate with"],kr:["짝","려"]},hunum:[{kor:"려",def:"짝"}]},{id:3431,hanja:"鰓",strokes:"20",def:{en:["fish gills"],kr:["뿔심","새"]},hunum:[{kor:"새",def:"뿔심"}]},{id:3432,hanja:"賭",strokes:"16",def:{en:["bet","gamble","wager","compete"],kr:["노름","도"]},hunum:[{kor:"도",def:"노름"}]},{id:3433,hanja:"咡",strokes:"9",def:{en:["side of mouth"],kr:["입","어귀","이"]},hunum:[{kor:"이",def:"입 어귀"}]},{id:3434,hanja:"侷",strokes:"9",def:{en:["narrow","cramped","confined"],kr:["죄어칠","국"]},hunum:[{kor:"국",def:"죄어칠"}]},{id:3435,hanja:"芳",strokes:"10",def:{en:["fragrant","virtuous","beautiful"],kr:["꽃다울","방"]},hunum:[{kor:"방",def:"꽃다울"}]},{id:3436,hanja:"鰕",strokes:"20",def:{en:["shrimp","prawn"],kr:["새우","하"]},hunum:[{kor:"하",def:"새우"}]},{id:3437,hanja:"椶",strokes:"13",def:{en:["palm tree"],kr:["棕과","同字"]},hunum:[{kor:"종",def:"종려나무"}]},{id:3438,hanja:"咢",strokes:"9",def:{en:["sound","drumming"],kr:["놀랄","악"]},hunum:[{kor:"악",def:"놀랄"}]},{id:3439,hanja:"廝",strokes:"15",def:{en:["servant"],kr:["마부","시"]},hunum:[{kor:"시",def:"부릴"}]},{id:3440,hanja:"侸",strokes:"9",def:{en:[],kr:["마를","두"]},hunum:[{kor:"두",def:"마를"}]},{id:3441,hanja:"廞",strokes:"15",def:{en:["to prepare horses and chariots for battle"],kr:["진열할","흠"]},hunum:[{kor:"흠",def:"진열할"}]},{id:3442,hanja:"侹",strokes:"9",def:{en:[],kr:["멀쑥할","정"]},hunum:[{kor:"정",def:"평평할"}]},{id:3443,hanja:"硜",strokes:"12",def:{en:["the sound of stones knocking together"],kr:["돌소리","갱"]},hunum:[{kor:"갱",def:"아릿아릿할"}]},{id:3444,hanja:"螂",strokes:"16",def:{en:["mantis","dung beetle"],kr:["蜋과","同字"]},hunum:[{kor:"랑",def:"사마귀"}]},{id:3445,hanja:"咤",strokes:"9",def:{en:["scold","bellow","shout at","roar"],kr:["쩍쩍","씹는소리","타"]},hunum:[{kor:"타",def:"꾸짖을"}]},{id:3446,hanja:"硝",strokes:"12",def:{en:["saltpeter","niter"],kr:["초석","초"]},hunum:[{kor:"초",def:"초석"}]},{id:3447,hanja:"清",strokes:"11",def:{en:["clear","pure","clean","peaceful"],kr:["맑을","청"]},hunum:[{kor:"청",def:"맑을"}]},{id:3448,hanja:"揉",strokes:"12",def:{en:["rub","massage","crush by hand"],kr:["희일","유"]},hunum:[{kor:"유",def:"풀"}]},{id:3449,hanja:"廟",strokes:"15",def:{en:["temple","shrine","imperial court"],kr:["사당","묘"]},hunum:[{kor:"묘",def:"사당"}]},{id:3450,hanja:"釜",strokes:"10",def:{en:["cauldron","pot","kettle"],kr:["가마","부"]},hunum:[{kor:"부",def:"가마"}]},{id:3451,hanja:"螃",strokes:"16",def:{en:["crab"],kr:["방게","방"]},hunum:[{kor:"방",def:"방게"}]},{id:3452,hanja:"咥",strokes:"9",def:{en:["sound of cat","bite","laugh"],kr:["허허","웃을","희"]},hunum:[{kor:"희",def:"허허 웃을"}]},{id:3453,hanja:"針",strokes:"10",def:{en:["needle","pin","tack","acupuncture"],kr:["찌를","침"]},hunum:[{kor:"침",def:"바늘"}]},{id:3454,hanja:"椹",strokes:"13",def:{en:["a chopping board"],kr:["토막","침"]},hunum:[{kor:"침",def:"모탕"}]},{id:3455,hanja:"廠",strokes:"15",def:{en:["factory","plant","workshop","mill"],kr:["헛간","창"]},hunum:[{kor:"창",def:"헛간"}]},{id:3456,hanja:"芷",strokes:"10",def:{en:["angelica","type of iris"],kr:["구리때","지"]},hunum:[{kor:"지",def:"구리때"}]},{id:3457,hanja:"侻",strokes:"9",def:{en:[],kr:["간략할","탈"]},hunum:[{kor:"탈",def:"간사할"}]},{id:3458,hanja:"椺",strokes:"13",def:{en:["beam of a house"],kr:["들보","보"]},hunum:[{kor:"보",def:"들보"}]},{id:3459,hanja:"渇",strokes:"11",def:{en:["thirsty"],kr:["渴과","同字"]},hunum:[{kor:"갈",def:"목마를"},{kor:"걸",def:"목마를"}]},{id:3460,hanja:"咦",strokes:"9",def:{en:["expression of surprise"],kr:["웃을","재"]},hunum:[{kor:"이",def:"크게 부를"},{kor:"재",def:"크게 부를"}]},{id:3461,hanja:"廡",strokes:"15",def:{en:["corridor","hallway","luxuriant"],kr:["지붕","무"]},hunum:[{kor:"무",def:"집"}]},{id:3462,hanja:"芸",strokes:"10",def:{en:["rue","herb used to keep insects away","to cut grass or weeds","art","talent","ability","craft","technique","performance","acting","trick","stunt"],kr:["성씨","운"]},hunum:[{kor:"예",def:"재주"},{kor:"운",def:"향풀"}]},{id:3463,hanja:"廢",strokes:"15",def:{en:["abrogate","terminate","discard"],kr:["떨어질","폐"]},hunum:[{kor:"폐",def:"폐할"}]},{id:3464,hanja:"済",strokes:"11",def:{en:["help","aid","relieve","ferry","cross"],kr:["濟의","略字"]},hunum:[{kor:"제",def:"건널"}]},{id:3465,hanja:"咧",strokes:"9",def:{en:["stretch mouth","grimace","grin"],kr:["새소리","렬"]},hunum:[{kor:"렬",def:"새소리"}]},{id:3466,hanja:"芹",strokes:"10",def:{en:["celery"],kr:["미나리","근"]},hunum:[{kor:"근",def:"미나리"}]},{id:3467,hanja:"賴",strokes:"16",def:{en:["rely","depend on","accuse falsely"],kr:["힘","입을","뢰"]},hunum:[{kor:"뢰",def:"힘 입을"}]},{id:3468,hanja:"硠",strokes:"12",def:{en:[],kr:["돌","부딪는","소라","랑"]},hunum:[{kor:"랑",def:"돌 부딪는 소라"}]},{id:3469,hanja:"渉",strokes:"11",def:{en:["ford stream"],kr:["涉과","同字"]},hunum:[{kor:"섭",def:"건널"}]},{id:3470,hanja:"咨",strokes:"9",def:{en:["inquire","consult","discuss","plan"],kr:["물을","자"]},hunum:[{kor:"자",def:"물을"}]},{id:3471,hanja:"廣",strokes:"15",def:{en:["broad","wide","extensive"],kr:["넓을","광"]},hunum:[{kor:"광",def:"넓을"}]},{id:3472,hanja:"芻",strokes:"10",def:{en:["mow","cut grass","hay","fodder"],kr:["짐승먹이","추"]},hunum:[{kor:"추",def:"꼴"}]},{id:3473,hanja:"椽",strokes:"13",def:{en:["beams","rafters","supports"],kr:["서까래","연"]},hunum:[{kor:"연",def:"서까래"}]},{id:3474,hanja:"咩",strokes:"9",def:{en:["the bleating of sheep"],kr:["양","울","미"]},hunum:[{kor:"미",def:"양 울"}]},{id:3475,hanja:"廤",strokes:"15",def:{en:["to place"],kr:["곳","곶"]},hunum:[{kor:"곶",def:"곳"}]},{id:3476,hanja:"描",strokes:"12",def:{en:["copy","trace","sketch","depict"],kr:["그릴","묘"]},hunum:[{kor:"묘",def:"그릴"}]},{id:3477,hanja:"咪",strokes:"9",def:{en:["sound of cat","cat","meter"],kr:["咩와","同字"]},hunum:[{kor:"미",def:"양 울"}]},{id:3478,hanja:"廥",strokes:"16",def:{en:[],kr:["여물광","괴"]},hunum:[{kor:"괴",def:"여물광"}]},{id:3479,hanja:"便",strokes:"9",def:{en:["convenience","ease","expedient"],kr:["오줌","편"]},hunum:[{kor:"변",def:"똥오줌"},{kor:"편",def:"편할"}]},{id:3480,hanja:"芼",strokes:"10",def:{en:["to choose","to select","greens"],kr:["풀","우거질","모"]},hunum:[{kor:"모",def:"풀 우거질"}]},{id:3481,hanja:"咫",strokes:"9",def:{en:["foot measure of Zhou dynasty"],kr:["길이","지"]},hunum:[{kor:"지",def:"길이"}]},{id:3482,hanja:"提",strokes:"12",def:{en:["hold in hand","lift in hand"],kr:["끌","제"]},hunum:[{kor:"시",def:"떼지어 날"},{kor:"제",def:"끌"}]},{id:3483,hanja:"渌",strokes:"11",def:{en:["strain"]},hunum:[{kor:"록",def:"밭을"}]},{id:3484,hanja:"芽",strokes:"10",def:{en:["bud","sprout","shoot"],kr:["싹","아"]},hunum:[{kor:"아",def:"싹"}]},{id:3485,hanja:"椿",strokes:"13",def:{en:["father","a plant with white flowers"],kr:["어르신네","춘"]},hunum:[{kor:"춘",def:"참죽나무"}]},{id:3486,hanja:"釣",strokes:"11",def:{en:["fish","fishhook","tempt","lure"],kr:["낚시","조"]},hunum:[{kor:"조",def:"낚시"}]},{id:3487,hanja:"廧",strokes:"16",def:{en:["wall"],kr:["담","장"]},hunum:[{kor:"장",def:"담"}]},{id:3488,hanja:"咬",strokes:"9",def:{en:["bite","gnaw"],kr:["새소리","교"]},hunum:[{kor:"교",def:"새소리"}]},{id:3489,hanja:"芾",strokes:"10",def:{en:["flower","small","little","lush"],kr:["작은","모양","비"]},hunum:[{kor:"비",def:"작은 모양"}]},{id:3490,hanja:"廨",strokes:"16",def:{en:["government office","public office"],kr:["공해","해"]},hunum:[{kor:"해",def:"관청"}]},{id:3491,hanja:"插",strokes:"12",def:{en:["insert","stick into","plant"],kr:["揷의","略字"]},hunum:[{kor:"삽",def:"꽂을"}]},{id:3492,hanja:"釤",strokes:"11",def:{en:["samarium"],kr:["낫","삼"]},hunum:[{kor:"삼",def:"낫"}]},{id:3493,hanja:"芿",strokes:"11",def:{en:["grass which has been cut and regrown","wild grass"],kr:["새풀싹","잉"]},hunum:[{kor:"잉",def:"새풀싹"}]},{id:3494,hanja:"螌",strokes:"16",def:{en:["a striped","poisonous fly"],kr:["가뢰","반"]},hunum:[{kor:"반",def:"가뢰"}]},{id:3495,hanja:"咭",strokes:"9",def:{en:["a card","young and pretty"],kr:["웃는","모양","길"]},hunum:[{kor:"갈",def:"쥐 우는 소리"},{kor:"길",def:"웃는 모양"}]},{id:3496,hanja:"廩",strokes:"16",def:{en:["granary","stockpile","store"],kr:["곳집","름"]},hunum:[{kor:"름",def:"곳집"}]},{id:3497,hanja:"賻",strokes:"17",def:{en:["gift of money help pay funeral"],kr:["부의","부"]},hunum:[{kor:"부",def:"부의"}]},{id:3498,hanja:"融",strokes:"16",def:{en:["melt","fuse","blend","harmonize"],kr:["귀신이름","융"]},hunum:[{kor:"융",def:"부드러울"}]},{id:3499,hanja:"硧",strokes:"12",def:{en:[]},hunum:[{kor:"용",def:"숫돌"}]},{id:3500,hanja:"硨",strokes:"12",def:{en:["giant clam","tridacna gigas"],kr:["조개","이름","차"]},hunum:[{kor:"차",def:"조개 이름"}]},{id:3501,hanja:"咮",strokes:"9",def:{en:["a beak","to peck"],kr:["부리","주"]},hunum:[{kor:"주",def:"부리"}]},{id:3502,hanja:"釦",strokes:"11",def:{en:["button","buckle","clasp","engrave"],kr:["그릇에","금테","두를","구"]},hunum:[{kor:"구",def:"그릇에 금테 두를"}]},{id:3503,hanja:"購",strokes:"17",def:{en:["buy","purchase","hire"],kr:["살","구입할","구"]},hunum:[{kor:"구",def:"살(구입할)"}]},{id:3504,hanja:"釧",strokes:"11",def:{en:["bracelet","armlet"],kr:["팔찌","천"]},hunum:[{kor:"천",def:"팔찌"}]},{id:3505,hanja:"咯",strokes:"9",def:{en:["final particle"],kr:["토할","각"]},hunum:[{kor:"각",def:"토할"}]},{id:3506,hanja:"鰣",strokes:"21",def:{en:["reeves","hilsa herring"],kr:["준치","시"]},hunum:[{kor:"시",def:"준치"}]},{id:3507,hanja:"賽",strokes:"17",def:{en:["compete","contend","contest","race"],kr:["굿할","새"]},hunum:[{kor:"새",def:"굿할"}]},{id:3508,hanja:"揖",strokes:"12",def:{en:["salute","bow","defer to","yield"],kr:["모을","즙"]},hunum:[{kor:"읍",def:"읍할"},{kor:"즙",def:"모을"}]},{id:3509,hanja:"廬",strokes:"19",def:{en:["hut","cottage","name of a mountain"],kr:["오두막집","려"]},hunum:[{kor:"려",def:"오두막집"}]},{id:3510,hanja:"鰤",strokes:"21",def:{en:["a yellowtail"],kr:["새우","사"]},hunum:[{kor:"사",def:"새우"}]},{id:3511,hanja:"賾",strokes:"18",def:{en:["abstruse","deep","profound"],kr:["깊숙할","색"]},hunum:[{kor:"색",def:"깊숙할"}]},{id:3512,hanja:"鰥",strokes:"21",def:{en:["huge fish","widower","bachelor"],kr:["환어","환"]},hunum:[{kor:"환",def:"환어"}]},{id:3513,hanja:"咱",strokes:"9",def:{en:["us"],kr:["나","찰"]},hunum:[{kor:"차",def:"우리"},{kor:"찰",def:"나"}]},{id:3514,hanja:"硫",strokes:"12",def:{en:["sulfur"],kr:["유황","류"]},hunum:[{kor:"류",def:"유황"}]},{id:3515,hanja:"咲",strokes:"9",def:{en:["smile","laugh","giggle","snicker"],kr:["웃을","소"]},hunum:[{kor:"소",def:"웃을"}]},{id:3516,hanja:"釪",strokes:"11",def:{en:["an alms bowl","a small bell"],kr:["바리때","우"]},hunum:[{kor:"우",def:"요령"}]},{id:3517,hanja:"硬",strokes:"12",def:{en:["hard","firm","strong","obstinate"],kr:["굳을","경"]},hunum:[{kor:"경",def:"굳을"}]},{id:3518,hanja:"咳",strokes:"9",def:{en:["cough"],kr:["방글방글","웃을","해"]},hunum:[{kor:"해",def:"기침"}]},{id:3519,hanja:"确",strokes:"12",def:{en:["sure","certain","real","true"],kr:["확실할","학"]},hunum:[{kor:"학",def:"확실할"}]},{id:3520,hanja:"揚",strokes:"12",def:{en:["scatter","spread","praise"],kr:["칭찬할","양"]},hunum:[{kor:"양",def:"드높일"}]},{id:3521,hanja:"妁",strokes:"6",def:{en:["act as go"],kr:["중매","작"]},hunum:[{kor:"작",def:"중매"}]},{id:3522,hanja:"換",strokes:"12",def:{en:["change","exchange","substitute"],kr:["바꿀","환"]},hunum:[{kor:"환",def:"바꿀"}]},{id:3523,hanja:"鰨",strokes:"21",def:{en:["sole"],kr:["큰","배","탑"]},hunum:[{kor:"탑",def:"큰 배"}]},{id:3524,hanja:"廱",strokes:"21",def:{en:["harmonious","pool","hall"],kr:["벽옹","옹"]},hunum:[{kor:"옹",def:"벽옹"}]},{id:3525,hanja:"如",strokes:"6",def:{en:["if","supposing","as if","like","as"],kr:["이를","여"]},hunum:[{kor:"여",def:"같을"}]},{id:3526,hanja:"釭",strokes:"11",def:{en:["tire of wheel","band"],kr:["굴대","공"]},hunum:[{kor:"공",def:"굴대"}]},{id:3527,hanja:"硯",strokes:"12",def:{en:["inkstone"],kr:["돌","연"]},hunum:[{kor:"연",def:"벼루"}]},{id:3528,hanja:"渗",strokes:"11",def:{en:["soak through","infiltrate"],kr:["스밀","참"]},hunum:[{kor:"참",def:"스밀"}]},{id:3529,hanja:"揜",strokes:"12",def:{en:["cover up","take by force","shut"],kr:["곤박할","엄"]},hunum:[{kor:"암",def:"덮을"},{kor:"엄",def:"찾아가질"}]},{id:3530,hanja:"咶",strokes:"9",def:{en:[],kr:["이야기할","활"]},hunum:[{kor:"시",def:"핥을"},{kor:"활",def:"핥을"}]},{id:3531,hanja:"妃",strokes:"6",def:{en:["wife","spouse","imperial concubine"],kr:["왕비","비"]},hunum:[{kor:"비",def:"왕비"}]},{id:3532,hanja:"鰩",strokes:"21",def:{en:["the nautilus","the ray"],kr:["날치","요"]},hunum:[{kor:"요",def:"날치"}]},{id:3533,hanja:"廳",strokes:"25",def:{en:["hall","central room"],kr:["관청","청"]},hunum:[{kor:"청",def:"관청"}]},{id:3534,hanja:"咷",strokes:"9",def:{en:["howl","cry loudly"],kr:["아이","울음","끈질길","도"]},hunum:[{kor:"도",def:"아이 울음 끈질길"}]},{id:3535,hanja:"妄",strokes:"6",def:{en:["absurd","foolish","reckless","false"],kr:["허망할","망"]},hunum:[{kor:"망",def:"허망할"}]},{id:3536,hanja:"渙",strokes:"12",def:{en:["scatter","scattered","dispersed"],kr:["흩어질","환"]},hunum:[{kor:"환",def:"흩어질"}]},{id:3537,hanja:"咸",strokes:"9",def:{en:["together","all","completely","united"],kr:["모두","함"]},hunum:[{kor:"함",def:"모두"}]},{id:3538,hanja:"渚",strokes:"11",def:{en:["small sand bank","islet"],kr:["물","갈라질","저"]},hunum:[{kor:"저",def:"물가"}]},{id:3539,hanja:"揟",strokes:"12",def:{en:[],kr:["나무이름","서"]},hunum:[{kor:"서",def:"나무이름"}]},{id:3540,hanja:"螘",strokes:"16",def:{en:["ant"],kr:["목","매어","죽는","벌레","의"]},hunum:[{kor:"의",def:"목 매어 죽는 벌레"}]},{id:3541,hanja:"咺",strokes:"9",def:{en:["majestic"],kr:["섧게","울","훤"]},hunum:[{kor:"훤",def:"섧게 울"}]},{id:3542,hanja:"揠",strokes:"12",def:{en:["to pull up","to eradicate"],kr:["뽑을","알"]},hunum:[{kor:"알",def:"뽑을"}]},{id:3543,hanja:"減",strokes:"12",def:{en:["decrease","subtract","diminish"],kr:["물이름","감"]},hunum:[{kor:"감",def:"덜"}]},{id:3544,hanja:"鰭",strokes:"21",def:{en:["fin"],kr:["지느러미","기"]},hunum:[{kor:"기",def:"지느러미"}]},{id:3545,hanja:"咻",strokes:"9",def:{en:["shout"],kr:["떠들","휴"]},hunum:[{kor:"휴",def:"떠들"}]},{id:3546,hanja:"終",strokes:"11",def:{en:["end","finally","in the end"],kr:["끝낼","종"]},hunum:[{kor:"종",def:"끝낼"}]},{id:3547,hanja:"握",strokes:"12",def:{en:["grasp","hold fast","take by hand"],kr:["손아귀","악"]},hunum:[{kor:"악",def:"잡을"}]},{id:3548,hanja:"延",strokes:"7",def:{en:["delay","postpone","defer"],kr:["닿을","연"]},hunum:[{kor:"연",def:"미칠"}]},{id:3549,hanja:"鰮",strokes:"21",def:{en:["sardine"],kr:["멸치","온"]},hunum:[{kor:"온",def:"멸치"}]},{id:3550,hanja:"雀",strokes:"11",def:{en:["sparrow"],kr:["참새","작"]},hunum:[{kor:"작",def:"참새"}]},{id:3551,hanja:"絃",strokes:"11",def:{en:["string on musical instrument"],kr:["줄풍류","현"]},hunum:[{kor:"현",def:"줄풍류"}]},{id:3552,hanja:"渝",strokes:"12",def:{en:["change","chongqing"],kr:["고을이름","투"]},hunum:[{kor:"투",def:"빛 변할"}]},{id:3553,hanja:"廷",strokes:"7",def:{en:["court"],kr:["곧을","정"]},hunum:[{kor:"정",def:"조정"}]},{id:3554,hanja:"咼",strokes:"9",def:{en:["chat","jaw","gossip","talk","mouth"],kr:["입","비뚤어질","괘"]},hunum:[{kor:"괘",def:"입 비뚤어질"}]},{id:3555,hanja:"鰯",strokes:"21",def:{en:["a sardine"],kr:["정어리","약"]},hunum:[{kor:"약",def:"멸치"}]},{id:3556,hanja:"雁",strokes:"12",def:{en:["wild goose"],kr:["鴈과","同字"]},hunum:[{kor:"안",def:"기러기"}]},{id:3557,hanja:"揣",strokes:"12",def:{en:["put things under clothes"],kr:["헤아릴","타"]},hunum:[{kor:"취",def:"잴"},{kor:"타",def:"헤아릴"}]},{id:3558,hanja:"釵",strokes:"11",def:{en:["ornamental hairpin"],kr:["비녀","채"]},hunum:[{kor:"차",def:"비녀"},{kor:"채",def:"비녀"}]},{id:3559,hanja:"組",strokes:"11",def:{en:["class","section","department"],kr:["끈","조"]},hunum:[{kor:"조",def:"끈"}]},{id:3560,hanja:"咽",strokes:"9",def:{en:["throat","pharynx"],kr:["목구멍","인"]},hunum:[{kor:"열",def:"목 멜"},{kor:"인",def:"목구멍"}]},{id:3561,hanja:"妊",strokes:"7",def:{en:["conceive","be pregnant"],kr:["아이밸","임"]},hunum:[{kor:"임",def:"아이밸"}]},{id:3562,hanja:"渟",strokes:"12",def:{en:["clear"],kr:["물가","정"]},hunum:[{kor:"정",def:"물 고일"}]},{id:3563,hanja:"猉",strokes:"11",def:{en:[]},hunum:[{kor:"기",def:"강아지"}]},{id:3564,hanja:"絅",strokes:"11",def:{en:["unlined garment","dust coat"],kr:["끌어","쥘","경"]},hunum:[{kor:"경",def:"끌어 쥘"}]},{id:3565,hanja:"鰱",strokes:"22",def:{en:["silver carp","hypophthalmiathys"],kr:["연어","련"]},hunum:[{kor:"련",def:"연어"}]},{id:3566,hanja:"猊",strokes:"11",def:{en:["lion","wild beast","wild horse"],kr:["사자","예"]},hunum:[{kor:"예",def:"사자"}]},{id:3567,hanja:"絆",strokes:"11",def:{en:["loop","catch","fetter","shackle"],kr:["줄","반"]},hunum:[{kor:"반",def:"줄"}]},{id:3568,hanja:"渠",strokes:"12",def:{en:["ditch","canal","channel","gutter"],kr:["무엇","거"]},hunum:[{kor:"거",def:"개천"}]},{id:3569,hanja:"咿",strokes:"9",def:{en:["descriptive of creaking","laugh"],kr:["책","읽는","소리","이"]},hunum:[{kor:"이",def:"선웃음칠"}]},{id:3570,hanja:"建",strokes:"9",def:{en:["build","establish","erect","found"],kr:["별이름","건"]},hunum:[{kor:"건",def:"세울"}]},{id:3571,hanja:"鰲",strokes:"22",def:{en:["huge sea turtle"],kr:["큰","자라","오"]},hunum:[{kor:"오",def:"큰 자라"}]},{id:3572,hanja:"雄",strokes:"12",def:{en:["male of species","hero","manly"],kr:["웅장할","웅"]},hunum:[{kor:"웅",def:"수컷"}]},{id:3573,hanja:"螞",strokes:"16",def:{en:["ant","leech"],kr:["말거머리","마"]},hunum:[{kor:"마",def:"말거머리"}]},{id:3574,hanja:"廻",strokes:"9",def:{en:["circle around","return","curving"],kr:["돌","회"]},hunum:[{kor:"회",def:"돌"}]},{id:3575,hanja:"渡",strokes:"12",def:{en:["cross","ferry over","ferry"],kr:["건널","도"]},hunum:[{kor:"도",def:"건널"}]},{id:3576,hanja:"妍",strokes:"9",def:{en:["beautiful","handsome","seductive"],kr:["姸과","同字"]},hunum:[{kor:"연",def:"고울"}]},{id:3577,hanja:"鰳",strokes:"22",def:{en:["Chinese herring","shad"],kr:["준치","륵"]},hunum:[{kor:"륵",def:"준치"}]},{id:3578,hanja:"雅",strokes:"12",def:{en:["elegant","graceful","refined"],kr:["아담할","아"]},hunum:[{kor:"아",def:"아담할"}]},{id:3579,hanja:"螟",strokes:"16",def:{en:["kind of caterpillar","larva"],kr:["마디충","명"]},hunum:[{kor:"명",def:"마디충"}]},{id:3580,hanja:"集",strokes:"12",def:{en:["assemble","collect together"],kr:["모일","집"]},hunum:[{kor:"집",def:"모일"}]},{id:3581,hanja:"廼",strokes:"9",def:{en:["then","thereupon","only then"],kr:["迺의","俗字"]},hunum:[{kor:"내",def:"이에"}]},{id:3582,hanja:"廽",strokes:"10",def:{en:["return","turn around","a time"],kr:["돌","회"]},hunum:[{kor:"회",def:"돌"}]},{id:3583,hanja:"絉",strokes:"11",def:{en:[]},hunum:[{kor:"술",def:"끈"}]},{id:3584,hanja:"渣",strokes:"12",def:{en:["refuse","dregs","lees","sediment"],kr:["찌끼","사"]},hunum:[{kor:"사",def:"찌끼"}]},{id:3585,hanja:"鰵",strokes:"22",def:{en:["codfish"],kr:["대구","민"]},hunum:[{kor:"민",def:"대구"}]},{id:3586,hanja:"雇",strokes:"12",def:{en:["employ","to hire"],kr:["새","이름","호"]},hunum:[{kor:"고",def:"새이름"},{kor:"호",def:"새 이름"}]},{id:3587,hanja:"螢",strokes:"16",def:{en:["glow","luminous insect"],kr:["개똥벌레","형"]},hunum:[{kor:"형",def:"개똥벌레"}]},{id:3588,hanja:"渤",strokes:"12",def:{en:["swelling","name of a sea gulf"],kr:["바다이름","발"]},hunum:[{kor:"발",def:"바다이름"}]},{id:3589,hanja:"硼",strokes:"13",def:{en:["borax","boron"],kr:["평돌","평"]},hunum:[{kor:"붕",def:"붕산"},{kor:"평",def:"평돌"}]},{id:3590,hanja:"妑",strokes:"7",def:{en:[],kr:["갈래머리","파"]},hunum:[{kor:"파",def:"새앙머리"}]},{id:3591,hanja:"雉",strokes:"13",def:{en:["pheasant","crenellated wall"],kr:["목맬","치"]},hunum:[{kor:"치",def:"꿩"}]},{id:3592,hanja:"揩",strokes:"12",def:{en:["rub and wipe","dust","clean"],kr:["문질러","훔칠","개"]},hunum:[{kor:"개",def:"문지를"}]},{id:3593,hanja:"渥",strokes:"12",def:{en:["moisten","soak","great","deep","dye","to enrich"],kr:["두터울","악"]},hunum:[{kor:"악",def:"두터울"}]},{id:3594,hanja:"廿",strokes:"4",def:{en:["twenty","twentieth"],kr:["스물","입"]},hunum:[{kor:"입",def:"스물"}]},{id:3595,hanja:"鰷",strokes:"22",def:{en:["minnow"],kr:["피라미","조"]},hunum:[{kor:"조",def:"피라미"}]},{id:3596,hanja:"螣",strokes:"16",def:{en:["mythological wingless dragon of"],kr:["등사","등"]},hunum:[{kor:"등",def:"등사"}]},{id:3597,hanja:"妒",strokes:"7",def:{en:["jealous","envious"],kr:["부러워할","투"]},hunum:[{kor:"투",def:"투기할"}]},{id:3598,hanja:"経",strokes:"11",def:{en:["classic works","pass through"],kr:["날","경"]},hunum:[{kor:"경",def:"날"}]},{id:3599,hanja:"渦",strokes:"12",def:{en:["swirl","whirlpool","eddy"],kr:["시끄러울","와"]},hunum:[{kor:"와",def:"소용돌이"}]},{id:3600,hanja:"揫",strokes:"13",def:{en:["grasp with hand","pinch"],kr:["모을","추"]},hunum:[{kor:"추",def:"묶을"}]},{id:3601,hanja:"雋",strokes:"13",def:{en:["superior","outstanding","talented"],kr:["儁·俊과","同字"]},hunum:[{kor:"준",def:"영특할"}]},{id:3602,hanja:"絍",strokes:"12",def:{en:["to lay the warp","to weave"],kr:["길쌈할","임"]},hunum:[{kor:"임",def:"짤"}]},{id:3603,hanja:"妓",strokes:"7",def:{en:["prostitute"],kr:["기생","기"]},hunum:[{kor:"기",def:"기생"}]},{id:3604,hanja:"鰹",strokes:"22",def:{en:["skipjack","bonito"],kr:["강고도리","견"]},hunum:[{kor:"견",def:"큰 가물치"}]},{id:3605,hanja:"渨",strokes:"12",def:{en:["a cove","a bay","a bend or nook in the hills","the curve of a bow"],kr:["더러울","외"]},hunum:[{kor:"외",def:"더러울"}]},{id:3606,hanja:"鰺",strokes:"22",def:{en:["a horse mackerel"],kr:["비린내","소의","譌字"]},hunum:[{kor:"소",def:"비린내 소의 譌"}]},{id:3607,hanja:"雌",strokes:"13",def:{en:["female","feminine","gentle","soft"],kr:["암컷","자"]},hunum:[{kor:"자",def:"암컷"}]},{id:3608,hanja:"螦",strokes:"16",def:{en:[]},hunum:[{kor:"소",def:"배좀"}]},{id:3609,hanja:"猓",strokes:"11",def:{en:["monkey"],kr:["긴","꼬리","원숭이","과"]},hunum:[{kor:"과",def:"긴 꼬리 원숭이"}]},{id:3610,hanja:"揭",strokes:"12",def:{en:["raise","lift up","surname"],kr:["등에","질","게"]},hunum:[{kor:"갈",def:"높이 들"},{kor:"게",def:"높이 들"}]},{id:3611,hanja:"温",strokes:"12",def:{en:["lukewarm"],kr:["溫의","俗字"]},hunum:[{kor:"온",def:"따뜻할"}]},{id:3612,hanja:"釿",strokes:"12",def:{en:[],kr:["대패","근"]},hunum:[{kor:"근",def:"대패"}]},{id:3613,hanja:"鰻",strokes:"22",def:{en:["eel"],kr:["뱀장어","만"]},hunum:[{kor:"만",def:"뱀장어"}]},{id:3614,hanja:"雍",strokes:"13",def:{en:["harmony","union","harmonious"],kr:["학교","옹"]},hunum:[{kor:"옹",def:"조화로울"}]},{id:3615,hanja:"揮",strokes:"12",def:{en:["direct","wipe away","squander"],kr:["휘두를","휘"]},hunum:[{kor:"휘",def:"휘두를"}]},{id:3616,hanja:"雎",strokes:"13",def:{en:["osprey","fishhawk","hold back"],kr:["원앙","저"]},hunum:[{kor:"저",def:"저구"}]},{id:3617,hanja:"妖",strokes:"7",def:{en:["strange","weird","supernatural"],kr:["생긋생긋","웃는","모양","요"]},hunum:[{kor:"요",def:"요괴로울"}]},{id:3618,hanja:"結",strokes:"12",def:{en:["knot","tie","join","connect"],kr:["몫","결"]},hunum:[{kor:"결",def:"맺을"}]},{id:3619,hanja:"渫",strokes:"12",def:{en:["beating of ocean","surging of wate"],kr:["물결","출렁출렁할","접"]},hunum:[{kor:"설",def:"칠"},{kor:"접",def:"물결 출렁출렁할"}]},{id:3620,hanja:"妗",strokes:"7",def:{en:["wife of mother"],kr:["외숙모","금"]},hunum:[{kor:"금",def:"외숙모"}]},{id:3621,hanja:"鰾",strokes:"22",def:{en:["swimming bladder of fish"],kr:["부레","표"]},hunum:[{kor:"표",def:"부레"}]},{id:3622,hanja:"測",strokes:"12",def:{en:["measure","estimate","conjecture"],kr:["날카로울","측"]},hunum:[{kor:"측",def:"측량할"}]},{id:3623,hanja:"猖",strokes:"11",def:{en:["mad","wild","reckless","unruly"],kr:["미쳐","날뛸","창"]},hunum:[{kor:"창",def:"미쳐 날뛸"}]},{id:3624,hanja:"雑",strokes:"14",def:{en:["mixed","blended","mix","mingle"],kr:["雜의","俗字"]},hunum:[{kor:"잡",def:"섞일"}]},{id:3625,hanja:"猗",strokes:"11",def:{en:["exclamation of admiration"],kr:["길","의"]},hunum:[{kor:"아",def:"부드러울"},{kor:"의",def:"불 깐 개"}]},{id:3626,hanja:"渭",strokes:"12",def:{en:["name of a river in Shanxi"],kr:["속","끓일","위"]},hunum:[{kor:"위",def:"물 이름"}]},{id:3627,hanja:"妙",strokes:"7",def:{en:["mysterious","subtle","exquisite"],kr:["묘할","묘"]},hunum:[{kor:"묘",def:"묘할"}]},{id:3628,hanja:"佀",strokes:"7",def:{en:["resemble"],kr:["같을","사"]},hunum:[{kor:"사",def:"같을"}]},{id:3629,hanja:"猘",strokes:"11",def:{en:["fierce dog","furious","frenzied"],kr:["미친개","제"]},hunum:[{kor:"제",def:"미친개"}]},{id:3630,hanja:"揲",strokes:"12",def:{en:["to sort out the stalks used in divination","to fold"],kr:["셀","설"]},hunum:[{kor:"설",def:"셀"}]},{id:3631,hanja:"佁",strokes:"7",def:{en:[],kr:["미련스러울","이"]},hunum:[{kor:"이",def:"미련스러울"}]},{id:3632,hanja:"港",strokes:"12",def:{en:["port","harbor","small stream","bay"],kr:["뱃길","항"]},hunum:[{kor:"항",def:"물 갈라질"}]},{id:3633,hanja:"佂",strokes:"7",def:{en:[],kr:["두려워할","정"]},hunum:[{kor:"정",def:"두려워할"}]},{id:3634,hanja:"猙",strokes:"11",def:{en:["fierce","ferocious"],kr:["짐승이름","쟁"]},hunum:[{kor:"쟁",def:"밉살스럴"}]},{id:3635,hanja:"雒",strokes:"14",def:{en:["black horse with white mane"],kr:["수리부엉이","락"]},hunum:[{kor:"락",def:"수리부엉이"}]},{id:3636,hanja:"螭",strokes:"17",def:{en:["a dragon whose horns have not grown","cruel"],kr:["교륭","리"]},hunum:[{kor:"리",def:"교륭"}]},{id:3637,hanja:"絕",strokes:"12",def:{en:["cut","sever","break off","terminate"],kr:["그칠","절"]},hunum:[{kor:"절",def:"끊을"}]},{id:3638,hanja:"佃",strokes:"7",def:{en:["tenant farmer","be a tenant farmer"],kr:["사냥할","전"]},hunum:[{kor:"전",def:"밭 맬"}]},{id:3639,hanja:"艀",strokes:"13",def:{en:["a sampan","lighter","barge"],kr:["작은","배","부"]},hunum:[{kor:"부",def:"작은 배"}]},{id:3640,hanja:"援",strokes:"12",def:{en:["aid","assist","lead","cite"],kr:["구원할","원"]},hunum:[{kor:"원",def:"당길"}]},{id:3641,hanja:"妝",strokes:"7",def:{en:["to adorn oneself","dress up","use make"],kr:["꾸밀","장"]},hunum:[{kor:"장",def:"꾸밀"}]},{id:3642,hanja:"猛",strokes:"11",def:{en:["violent","savage","cruel","bold"],kr:["사나울","맹"]},hunum:[{kor:"맹",def:"사나울"}]},{id:3643,hanja:"絖",strokes:"12",def:{en:["fine silks","floss"],kr:["솜","광"]},hunum:[{kor:"광",def:"솜"}]},{id:3644,hanja:"揵",strokes:"12",def:{en:["carry"],kr:["들","건"]},hunum:[{kor:"건",def:"멜"}]},{id:3645,hanja:"雕",strokes:"16",def:{en:["engrave","inlay","carve","exhaust","used for U","vulture"],kr:["鵰"]},hunum:[{kor:"조",def:"독수리"}]},{id:3646,hanja:"猜",strokes:"11",def:{en:["guess","conjecture","suppose","feel"],kr:["사나울","시"]},hunum:[{kor:"시",def:"의심낼"}]},{id:3647,hanja:"揶",strokes:"12",def:{en:["make fun of","ridicule"],kr:["희롱할","야"]},hunum:[{kor:"야",def:"희롱할"}]},{id:3648,hanja:"猝",strokes:"11",def:{en:["abruptly","suddenly","abrupt"],kr:["갑자기","졸"]},hunum:[{kor:"졸",def:"갑자기"}]},{id:3649,hanja:"揷",strokes:"12",def:{en:["insert"],kr:["꽂을","삽"]},hunum:[{kor:"삽",def:"꽂을"}]},{id:3650,hanja:"渲",strokes:"12",def:{en:["add repeated washes of color"],kr:["바림","선"]},hunum:[{kor:"선",def:"바림"}]},{id:3651,hanja:"棄",strokes:"12",def:{en:["reject","abandon","discard"],kr:["버릴","기"]},hunum:[{kor:"기",def:"버릴"}]},{id:3652,hanja:"但",strokes:"7",def:{en:["only","but","however","yet","still"],kr:["다만","단"]},hunum:[{kor:"단",def:"다만"}]},{id:3653,hanja:"雖",strokes:"17",def:{en:["although","even if"],kr:["벌레이름","수"]},hunum:[{kor:"수",def:"비록"}]},{id:3654,hanja:"絙",strokes:"12",def:{en:[],kr:["끈목","환"]},hunum:[{kor:"환",def:"끈목"}]},{id:3655,hanja:"佇",strokes:"7",def:{en:["wait","look towards","turn one"],kr:["잠깐","머물","저"]},hunum:[{kor:"저",def:"오래 설"}]},{id:3656,hanja:"棅",strokes:"12",def:{en:["handle","lever","knob","authority"],kr:["柄과","同字"]},hunum:[{kor:"병",def:"자루"}]},{id:3657,hanja:"佈",strokes:"7",def:{en:["spread","publicize","announce"],kr:["펼칠","포"]},hunum:[{kor:"포",def:"펼칠"}]},{id:3658,hanja:"渴",strokes:"12",def:{en:["thirsty","parched","yearn","pine"],kr:["물","잦을","걸"]},hunum:[{kor:"갈",def:"목마를"},{kor:"걸",def:"물 잦을"}]},{id:3659,hanja:"螳",strokes:"17",def:{en:["mantis"],kr:["버마","재비","당"]},hunum:[{kor:"당",def:"버마 재비"}]},{id:3660,hanja:"螴",strokes:"17",def:{en:[],kr:["설렐","진"]},hunum:[{kor:"진",def:"설렐"}]},{id:3661,hanja:"絛",strokes:"13",def:{en:["silk braid","sash"],kr:["끈","조"]},hunum:[{kor:"조",def:"끈"}]},{id:3662,hanja:"猠",strokes:"11",def:{en:[]},hunum:[{kor:"전",def:"염소"}]},{id:3663,hanja:"艅",strokes:"13",def:{en:["a despatch boat"],kr:["나룻배","여"]},hunum:[{kor:"여",def:"나룻배"}]},{id:3664,hanja:"佉",strokes:"7",def:{en:["surname","name of a divine being","transliteration of Sanskrit"],kr:["나라","이름","구"]},hunum:[{kor:"거",def:"나라이름"},{kor:"구",def:"나라 이름"}]},{id:3665,hanja:"雙",strokes:"18",def:{en:["set of two","pair","couple","both"],kr:["짝","쌍"]},hunum:[{kor:"쌍",def:"짝"}]},{id:3666,hanja:"絜",strokes:"12",def:{en:["a marking line","ascertain","assess","measure"],kr:["묶을","혈"]},hunum:[{kor:"혈",def:"헤아릴"}]},{id:3667,hanja:"佊",strokes:"7",def:{en:[],kr:["간사할","피"]},hunum:[{kor:"피",def:"간사할"}]},{id:3668,hanja:"貂",strokes:"12",def:{en:["marten","sable","mink"],kr:["담비","초"]},hunum:[{kor:"초",def:"담비"}]},{id:3669,hanja:"渶",strokes:"12",def:{en:[],kr:["물","맑을","영"]},hunum:[{kor:"영",def:"물 맑을"}]},{id:3670,hanja:"雚",strokes:"18",def:{en:["a heron","small cup"],kr:["황새","관"]},hunum:[{kor:"관",def:"황새"}]},{id:3671,hanja:"猢",strokes:"12",def:{en:["a kind of monkey found in W"],kr:["원숭이","호"]},hunum:[{kor:"호",def:"원숭이"}]},{id:3672,hanja:"雛",strokes:"18",def:{en:["chick","fledging","infant","toddler"],kr:["어린아이","추"]},hunum:[{kor:"추",def:"새 새끼"}]},{id:3673,hanja:"艇",strokes:"13",def:{en:["small boat","dugout","punt"],kr:["작은","배","정"]},hunum:[{kor:"정",def:"거룻배"}]},{id:3674,hanja:"貃",strokes:"12",def:{en:[],kr:["오랑캐","맥"]},hunum:[{kor:"맥",def:"오랑캐"}]},{id:3675,hanja:"渷",strokes:"12",def:{en:[],kr:["물","이름","연"]},hunum:[{kor:"연",def:"물 이름"}]},{id:3676,hanja:"棉",strokes:"12",def:{en:["cotton","cotton padded"],kr:["목화","면"]},hunum:[{kor:"면",def:"목화"}]},{id:3677,hanja:"妣",strokes:"7",def:{en:["one"],kr:["죽은","어미","비"]},hunum:[{kor:"비",def:"죽은 어미"}]},{id:3678,hanja:"佋",strokes:"7",def:{en:["continue","carry on","hand down","to join"],kr:["댓수의","차례","소"]},hunum:[{kor:"소",def:"소개할"}]},{id:3679,hanja:"雜",strokes:"18",def:{en:["mixed","blended","mix","mingle"],kr:["섞일","잡"]},hunum:[{kor:"잡",def:"섞일"}]},{id:3680,hanja:"絞",strokes:"12",def:{en:["twist","wring","intertwine","winch"],kr:["목맬","교"]},hunum:[{kor:"교",def:"목맬"}]},{id:3681,hanja:"游",strokes:"12",def:{en:["to swim","float","drift","wander","roam"],kr:["깃발","유"]},hunum:[{kor:"유",def:"헤엄칠"}]},{id:3682,hanja:"棊",strokes:"12",def:{en:["chess","any game similar to chess"],kr:["棋와","同字"]},hunum:[{kor:"기",def:"바둑"}]},{id:3683,hanja:"貅",strokes:"13",def:{en:["brave","fierce","courageous"],kr:["비휴","휴"]},hunum:[{kor:"휴",def:"비휴"}]},{id:3684,hanja:"妥",strokes:"7",def:{en:["satisfactory","appropriate"],kr:["떨어질","타"]},hunum:[{kor:"타",def:"편안할"}]},{id:3685,hanja:"棋",strokes:"12",def:{en:["chess","any game similar to chess"],kr:["바둑","기"]},hunum:[{kor:"기",def:"바둑"}]},{id:3686,hanja:"位",strokes:"7",def:{en:["throne","position","post","rank","status","seat"],kr:["방위","위"]},hunum:[{kor:"위",def:"벼슬"}]},{id:3687,hanja:"雝",strokes:"18",def:{en:["marsh","pool","harmonious"],kr:["학교","옹"]},hunum:[{kor:"옹",def:"조화로울"}]},{id:3688,hanja:"棌",strokes:"12",def:{en:[],kr:["참나무","채"]},hunum:[{kor:"채",def:"참나무"}]},{id:3689,hanja:"低",strokes:"7",def:{en:["low","to lower","hang","bend","bow"],kr:["머뭇거릴","저"]},hunum:[{kor:"저",def:"낮을"}]},{id:3690,hanja:"渺",strokes:"12",def:{en:["endlessly long","boundless","vast"],kr:["아득할","묘"]},hunum:[{kor:"묘",def:"아득할"}]},{id:3691,hanja:"雞",strokes:"18",def:{en:["chickens","domestic fowl"],kr:["닭","계"]},hunum:[{kor:"계",def:"닭"}]},{id:3692,hanja:"住",strokes:"7",def:{en:["reside","live at","dwell","lodge","stop"],kr:["살","주"]},hunum:[{kor:"주",def:"살"}]},{id:3693,hanja:"猥",strokes:"12",def:{en:["vulgar","low","cheap","wanton","obscene"],kr:["개","새끼","셋","낳을","외"]},hunum:[{kor:"외",def:"더러울"}]},{id:3694,hanja:"絡",strokes:"12",def:{en:["enmesh","wrap around","web","net"],kr:["헌솜","락"]},hunum:[{kor:"락",def:"헌솜"}]},{id:3695,hanja:"棍",strokes:"12",def:{en:["stick","cudgel","scoundrel"],kr:["묶을","혼"]},hunum:[{kor:"곤",def:"몽둥이"},{kor:"혼",def:"묶을"}]},{id:3696,hanja:"妧",strokes:"7",def:{en:[],kr:["고울","완"]},hunum:[{kor:"완",def:"좋을"}]},{id:3697,hanja:"絢",strokes:"12",def:{en:["variegated","adorned","brilliant"],kr:["채색무늬","현"]},hunum:[{kor:"현",def:"채색무늬"}]},{id:3698,hanja:"佐",strokes:"7",def:{en:["assist","aid","second","subordinate"],kr:["도울","좌"]},hunum:[{kor:"좌",def:"도울"}]},{id:3699,hanja:"渼",strokes:"12",def:{en:["ripples"],kr:["내","이름","미"]},hunum:[{kor:"미",def:"물놀이"}]},{id:3700,hanja:"妨",strokes:"7",def:{en:["interfere with","impede","obstruct"],kr:["방해할","방"]},hunum:[{kor:"방",def:"방해할"}]},{id:3701,hanja:"螺",strokes:"17",def:{en:["spiral shell","conch","spiral"]},hunum:[{kor:"라",def:"소라"}]},{id:3702,hanja:"渽",strokes:"12",def:{en:[],kr:["맑을","재"]},hunum:[{kor:"재",def:"맑을"}]},{id:3703,hanja:"艍",strokes:"14",def:{en:[]},hunum:[{kor:"거",def:"거룻배"}]},{id:3704,hanja:"猧",strokes:"12",def:{en:[],kr:["와개","와"]},hunum:[{kor:"와",def:"와개"}]},{id:3705,hanja:"絣",strokes:"12",def:{en:["to baste for sewing","to connect"],kr:["먹줄","튀길","병"]},hunum:[{kor:"병",def:"무늬없는 비단"}]},{id:3706,hanja:"佑",strokes:"7",def:{en:["help","protect","bless"],kr:["도울","우"]},hunum:[{kor:"우",def:"도울"}]},{id:3707,hanja:"螻",strokes:"17",def:{en:["a mole cricket","Gryllotalpa africana"],kr:["땅강아지","루"]},hunum:[{kor:"루",def:"땅강아지"}]},{id:3708,hanja:"渾",strokes:"12",def:{en:["muddy","turbid","blend","merge","mix"],kr:["흐릴","혼"]},hunum:[{kor:"혼",def:"흐릴"}]},{id:3709,hanja:"猨",strokes:"12",def:{en:["ape"],kr:["猿과","同字"]},hunum:[{kor:"원",def:"원숭이"}]},{id:3710,hanja:"棐",strokes:"12",def:{en:["species of yew"],kr:["도지개","비"]},hunum:[{kor:"비",def:"도지개"}]},{id:3711,hanja:"佒",strokes:"7",def:{en:[],kr:["몸","거북할","앙"]},hunum:[{kor:"앙",def:"몸 거북할"}]},{id:3712,hanja:"離",strokes:"19",def:{en:["leave","depart","go away","separate"],kr:["떼","놓을","리"]},hunum:[{kor:"리",def:"떼 놓을"}]},{id:3713,hanja:"螽",strokes:"17",def:{en:["katydid"],kr:["누리","종"]},hunum:[{kor:"종",def:"누리"}]},{id:3714,hanja:"貊",strokes:"13",def:{en:["leopard","ancient tribe in northeastern China"],kr:["북방","종족","맥"]},hunum:[{kor:"맥",def:"북방 종족"}]},{id:3715,hanja:"猩",strokes:"12",def:{en:["species of orangutan"],kr:["성성이","성"]},hunum:[{kor:"성",def:"성성이"}]},{id:3716,hanja:"体",strokes:"7",def:{en:["body","group","class","body","unit","inferior"],kr:["몸","체"]},hunum:[{kor:"분",def:"용렬할"},{kor:"체",def:"몸"}]},{id:3717,hanja:"難",strokes:"19",def:{en:["difficult","arduous","hard","unable"],kr:["어려울","난"]},hunum:[{kor:"나",def:"성할"},{kor:"난",def:"어려울"}]},{id:3718,hanja:"妬",strokes:"8",def:{en:["jealous","envious"],kr:["자식","없는","계집","투"]},hunum:[{kor:"투",def:"투기할"}]},{id:3719,hanja:"佔",strokes:"7",def:{en:["occupy by force","usurp","possess"],kr:["숙일","점"]},hunum:[{kor:"점",def:"엿볼"}]},{id:3720,hanja:"猪",strokes:"11",def:{en:["pig","hog","wild boar"],kr:["豬의","俗字"]},hunum:[{kor:"저",def:"돼지"}]},{id:3721,hanja:"給",strokes:"12",def:{en:["give","by","for"],kr:["넉넉할","급"]},hunum:[{kor:"급",def:"넉넉할"}]},{id:3722,hanja:"棒",strokes:"12",def:{en:["stick","club","truncheon","hit"],kr:["몽둥이","봉"]},hunum:[{kor:"봉",def:"몽둥이"}]},{id:3723,hanja:"何",strokes:"7",def:{en:["what","why","where","which","how"],kr:["어찌","하"]},hunum:[{kor:"하",def:"어찌"}]},{id:3724,hanja:"艑",strokes:"15",def:{en:["small boat"],kr:["거룻배","편"]},hunum:[{kor:"편",def:"거룻배"}]},{id:3725,hanja:"貌",strokes:"14",def:{en:["countenance","appearance"],kr:["얼굴","모"]},hunum:[{kor:"막",def:"모뜰"},{kor:"모",def:"얼굴"}]},{id:3726,hanja:"猫",strokes:"12",def:{en:["cat"],kr:["고양이","묘"]},hunum:[{kor:"묘",def:"고양이"}]},{id:3727,hanja:"呀",strokes:"7",def:{en:["particle used to express surprise or mild emphasis"],kr:["입","벌릴","하"]},hunum:[{kor:"하",def:"입 벌릴"}]},{id:3728,hanja:"佖",strokes:"7",def:{en:[],kr:["가득할","필"]},hunum:[{kor:"필",def:"점잔피울"}]},{id:3729,hanja:"貍",strokes:"14",def:{en:["a fox"],kr:["삵","리"]},hunum:[{kor:"리",def:"삵"}]},{id:3730,hanja:"絨",strokes:"12",def:{en:["silk","cotton","or woolen fabric"],kr:["가는","베","융"]},hunum:[{kor:"융",def:"삶은 실"}]},{id:3731,hanja:"佗",strokes:"7",def:{en:["other","he","surname","a load"],kr:["짊어질","타"]},hunum:[{kor:"타",def:"다를"}]},{id:3732,hanja:"妯",strokes:"8",def:{en:["wives of one","sister"],kr:["동서","축"]},hunum:[{kor:"축",def:"동서"}]},{id:3733,hanja:"棕",strokes:"12",def:{en:["hemp palm","palm tree"],kr:["종려나무","종"]},hunum:[{kor:"종",def:"종려나무"}]},{id:3734,hanja:"絩",strokes:"12",def:{en:[],kr:["견직물","날실","수","조"]},hunum:[{kor:"조",def:"견직물 날실 수"}]},{id:3735,hanja:"棖",strokes:"12",def:{en:["door stop","door jam","touch","a prop","post"],kr:["막대","정"]},hunum:[{kor:"정",def:"문설주"}]},{id:3736,hanja:"献",strokes:"12",def:{en:["offer","present","show","display"],kr:["獻의","俗字"]},hunum:[{kor:"사",def:"술두루미"},{kor:"헌",def:"드릴"}]},{id:3737,hanja:"絪",strokes:"12",def:{en:["matting","coverlet","cloudy"],kr:["기운","인"]},hunum:[{kor:"인",def:"기운"}]},{id:3738,hanja:"呂",strokes:"7",def:{en:["surname","a musical note"],kr:["음률","려"]},hunum:[{kor:"려",def:"음률"}]},{id:3739,hanja:"佘",strokes:"7",def:{en:["surname"],kr:["산","이름","사"]},hunum:[{kor:"사",def:"산 이름"}]},{id:3740,hanja:"雨",strokes:"8",def:{en:["rain","rainy","KangXi radical"],kr:["비","우"]},hunum:[{kor:"우",def:"비"}]},{id:3741,hanja:"棗",strokes:"12",def:{en:["date tree","dates","jujubes","surname"],kr:["대추나무","조"]},hunum:[{kor:"조",def:"대추나무"}]},{id:3742,hanja:"呃",strokes:"7",def:{en:["belch","hiccup"],kr:["재채기할","애"]},hunum:[{kor:"애",def:"재채기할"}]},{id:3743,hanja:"雩",strokes:"11",def:{en:["offer sacrifice for rain"],kr:["기우제","우"]},hunum:[{kor:"우",def:"기우제"}]},{id:3744,hanja:"棘",strokes:"12",def:{en:["jujube tree","thorns","brambles"],kr:["가시나무","극"]},hunum:[{kor:"극",def:"가시나무"}]},{id:3745,hanja:"妲",strokes:"8",def:{en:["concubine of last ruler of the Shang dynasty"],kr:["계집의","이름","달"]},hunum:[{kor:"달",def:"계집의 이름"}]},{id:3746,hanja:"余",strokes:"7",def:{en:["I","my","me","surname","surplus"],kr:["남을","여"]},hunum:[{kor:"여",def:"자기"}]},{id:3747,hanja:"雪",strokes:"11",def:{en:["snow","wipe away shame","avenge"],kr:["눈","설"]},hunum:[{kor:"설",def:"눈"}]},{id:3748,hanja:"猱",strokes:"12",def:{en:["a monkey with yellow hair"],kr:["못할","노"]},hunum:[{kor:"노",def:"못할"}]},{id:3749,hanja:"呅",strokes:"7",def:{en:[],kr:["웃을","문"]},hunum:[{kor:"매",def:"웃을"},{kor:"문",def:"웃을"}]},{id:3750,hanja:"佚",strokes:"7",def:{en:["indulge in pleasures","flee"],kr:["흐릴","질"]},hunum:[{kor:"일",def:"편안할"},{kor:"질",def:"흐릴"}]},{id:3751,hanja:"庁",strokes:"5",def:{en:["hall","central room"],kr:["관청","청"]},hunum:[{kor:"청",def:"관청"}]},{id:3752,hanja:"艘",strokes:"16",def:{en:["counter for ships","vessels"],kr:["배","소"]},hunum:[{kor:"소",def:"배"}]},{id:3753,hanja:"貓",strokes:"16",def:{en:["cat"],kr:["猫와","同字"]},hunum:[{kor:"묘",def:"고양이"}]},{id:3754,hanja:"棚",strokes:"12",def:{en:["tent","awning","booth","shed"],kr:["시렁","붕"]},hunum:[{kor:"붕",def:"시렁"}]},{id:3755,hanja:"呆",strokes:"7",def:{en:["dull","dull","simple","stupid"]},hunum:[{kor:"매",def:"어리석을"},{kor:"보",def:"지킬"},{kor:"태",def:"어리석을"}]},{id:3756,hanja:"佛",strokes:"7",def:{en:["Buddha","of Buddhism","merciful percon","Buddhist image","the dead"],kr:["도울","필"]},hunum:[{kor:"불",def:"부처"},{kor:"필",def:"흥할"}]},{id:3757,hanja:"艙",strokes:"16",def:{en:["hold of ship","cabin"],kr:["선창","창"]},hunum:[{kor:"창",def:"선창"}]},{id:3758,hanja:"貔",strokes:"17",def:{en:["fox","leopard","panther"],kr:["비휴","비"]},hunum:[{kor:"비",def:"비휴"}]},{id:3759,hanja:"絮",strokes:"12",def:{en:["waste cotton","raw silk or cotton"],kr:["성씨","여"]},hunum:[{kor:"서",def:"솜"},{kor:"여",def:"성씨"}]},{id:3760,hanja:"作",strokes:"7",def:{en:["make","work","compose","write","act","perform"],kr:["원망할","주"]},hunum:[{kor:"작",def:"지을"},{kor:"주",def:"원망할"}]},{id:3761,hanja:"猴",strokes:"12",def:{en:["monkey","ape","monkey"],kr:["원숭이","후"]},hunum:[{kor:"후",def:"원숭이"}]},{id:3762,hanja:"艚",strokes:"17",def:{en:["ship"],kr:["거룻배","조"]},hunum:[{kor:"조",def:"거룻배"}]},{id:3763,hanja:"呈",strokes:"7",def:{en:["submit","show","appear","petition"],kr:["드러낼","정"]},hunum:[{kor:"정",def:"보일"}]},{id:3764,hanja:"広",strokes:"5",def:{en:["broad","wide","extensive"],kr:["廣의","略字"]},hunum:[{kor:"광",def:"넢을"}]},{id:3765,hanja:"佝",strokes:"7",def:{en:["rickets"],kr:["꼽추","구"]},hunum:[{kor:"구",def:"꼽추"}]},{id:3766,hanja:"絰",strokes:"12",def:{en:["white hempen cloth worn by mourners"],kr:["질","질"]},hunum:[{kor:"질",def:"질"}]},{id:3767,hanja:"庄",strokes:"6",def:{en:["village","hamlet","villa","manor"],kr:["장중할","장"]},hunum:[{kor:"장",def:"장중할"}]},{id:3768,hanja:"砂",strokes:"9",def:{en:["sand","pebbles","gravel","gritty"],kr:["모래","사"]},hunum:[{kor:"사",def:"모래"}]},{id:3769,hanja:"呉",strokes:"7",def:{en:["one of warring states","surname"]},hunum:[{kor:"오",def:"성씨"},{kor:"화",def:"큰소리칠"}]},{id:3770,hanja:"佞",strokes:"7",def:{en:["flattery","glib"],kr:["재주","녕"]},hunum:[{kor:"녕",def:"재주"}]},{id:3771,hanja:"雯",strokes:"12",def:{en:["cloud patterns","coloring of cloud"],kr:["구름","무늬","문"]},hunum:[{kor:"문",def:"구름 무늬"}]},{id:3772,hanja:"佟",strokes:"7",def:{en:["a name"]},hunum:[{kor:"퉁",def:"성씨"}]},{id:3773,hanja:"統",strokes:"12",def:{en:["govern","command","control","unite"],kr:["이을","통"]},hunum:[{kor:"통",def:"거느릴"}]},{id:3774,hanja:"猶",strokes:"12",def:{en:["like","similar to","just like","as"],kr:["오히려","유"]},hunum:[{kor:"유",def:"어미 원숭이"}]},{id:3775,hanja:"告",strokes:"7",def:{en:["tell","announce","inform","accuse"],kr:["청할","곡"]},hunum:[{kor:"고",def:"알릴"},{kor:"곡",def:"청할"}]},{id:3776,hanja:"雰",strokes:"12",def:{en:["atmosphere","mist","fog"],kr:["안개","분"]},hunum:[{kor:"분",def:"안개"}]},{id:3777,hanja:"貘",strokes:"18",def:{en:["the panther","the tapir"],kr:["짐승","이름","맥"]},hunum:[{kor:"맥",def:"짐승 이름"}]},{id:3778,hanja:"猷",strokes:"12",def:{en:["plan","scheme","plan","plot","way"],kr:["탄식할","유"]},hunum:[{kor:"유",def:"꾀"}]},{id:3779,hanja:"絲",strokes:"12",def:{en:["silk","fine thread","wire","strings"],kr:["실","사"]},hunum:[{kor:"사",def:"실"}]},{id:3780,hanja:"妹",strokes:"8",def:{en:["younger sister"],kr:["누이","매"]},hunum:[{kor:"매",def:"누이"}]},{id:3781,hanja:"你",strokes:"7",def:{en:["you","second person pronoun"],kr:["너","니"]},hunum:[{kor:"니",def:"너"}]},{id:3782,hanja:"醃",strokes:"15",def:{en:["marinate","pickle","salt"],kr:["김치","엄"]},hunum:[{kor:"엄",def:"절일"}]},{id:3783,hanja:"絳",strokes:"12",def:{en:["deep red","river in Shanxi provinc"],kr:["강초","강"]},hunum:[{kor:"강",def:"깊게 붉을"}]},{id:3784,hanja:"棟",strokes:"12",def:{en:["the main beams supporting a house"],kr:["용마루","동"]},hunum:[{kor:"동",def:"용마루"}]},{id:3785,hanja:"庇",strokes:"7",def:{en:["cover","shield","shelter","protect"],kr:["덮을","비"]},hunum:[{kor:"비",def:"덮을"}]},{id:3786,hanja:"妻",strokes:"8",def:{en:["wife"],kr:["아내","처"]},hunum:[{kor:"처",def:"아내"}]},{id:3787,hanja:"鯀",strokes:"18",def:{en:["giant fish","father of the emperor Yu"],kr:["물고기","이름","곤"]},hunum:[{kor:"곤",def:"물고기 이름"}]},{id:3788,hanja:"艟",strokes:"18",def:{en:["ancient warship"],kr:["배","동"]},hunum:[{kor:"동",def:"배"}]},{id:3789,hanja:"棠",strokes:"12",def:{en:["crab apple tree","wild plums"],kr:["아가위","당"]},hunum:[{kor:"당",def:"아가위"}]},{id:3790,hanja:"呌",strokes:"7",def:{en:["to call","to summon"],kr:["부르짖을","규"]},hunum:[{kor:"규",def:"부르짖을"}]},{id:3791,hanja:"雲",strokes:"12",def:{en:["clouds","Yunnan province"],kr:["하늘","운"]},hunum:[{kor:"운",def:"구름"}]},{id:3792,hanja:"鯁",strokes:"18",def:{en:["fish bones","honest","upright"],kr:["생선뼈","경"]},hunum:[{kor:"경",def:"생선뼈"}]},{id:3793,hanja:"呎",strokes:"7",def:{en:["foot"],kr:["길이","단위","척"]},hunum:[{kor:"척",def:"길이 단위"}]},{id:3794,hanja:"絶",strokes:"12",def:{en:["cut"],kr:["絕과","同字"]},hunum:[{kor:"절",def:"끊을"}]},{id:3795,hanja:"床",strokes:"7",def:{en:["bed","couch","framework","chassis"],kr:["牀의","俗字"]},hunum:[{kor:"상",def:"평상"}]},{id:3796,hanja:"貝",strokes:"7",def:{en:["sea shell","money","currency"],kr:["비단","패"]},hunum:[{kor:"패",def:"조개"}]},{id:3797,hanja:"棣",strokes:"12",def:{en:["kerria japonica plant","cherry"],kr:["산앵두나무","체"]},hunum:[{kor:"체",def:"산앵두나무"}]},{id:3798,hanja:"妾",strokes:"8",def:{en:["concubine"],kr:["첩","첩"]},hunum:[{kor:"첩",def:"첩"}]},{id:3799,hanja:"醇",strokes:"15",def:{en:["rich","good as wine","pure","unmixed"],kr:["순수할","순"]},hunum:[{kor:"순",def:"전국술"}]},{id:3800,hanja:"呏",strokes:"7",def:{en:["gallon","quart"],kr:["용량의","단위","갤런","승"]},hunum:[{kor:"승",def:"용량의 단위 갤런(gallon)"}]},{id:3801,hanja:"庋",strokes:"7",def:{en:["a cupboard or pantry to store"],kr:["시렁","기"]},hunum:[{kor:"기",def:"시렁"}]},{id:3802,hanja:"貞",strokes:"9",def:{en:["virtuous","chaste","pure","loyal"],kr:["굳을","정"]},hunum:[{kor:"정",def:"곧을"}]},{id:3803,hanja:"呐",strokes:"7",def:{en:["raise voice","yell out loud","shout","stammer"]},hunum:[{kor:"눌",def:"말 더듬을"}]},{id:3804,hanja:"零",strokes:"13",def:{en:["zero","fragment","fraction"],kr:["조용히","오는","비","령"]},hunum:[{kor:"련",def:"조용히 오는 비"},{kor:"령",def:"조용히 오는 비"}]},{id:3805,hanja:"猾",strokes:"13",def:{en:["crafty","cunning","shrewd","deceitful"],kr:["교활할","활"]},hunum:[{kor:"활",def:"교활할"}]},{id:3806,hanja:"呑",strokes:"7",def:{en:["swallow","absorb"],kr:["멸할","탄"]},hunum:[{kor:"탄",def:"삼킬"}]},{id:3807,hanja:"醉",strokes:"15",def:{en:["intoxicated","drunk","addicted to"],kr:["궤란할","취"]},hunum:[{kor:"취",def:"술취할"}]},{id:3808,hanja:"絹",strokes:"13",def:{en:["kind of thick stiff silk"],kr:["깁","견"]},hunum:[{kor:"견",def:"비단"}]},{id:3809,hanja:"雷",strokes:"13",def:{en:["thunder"],kr:["우뢰","뢰"]},hunum:[{kor:"뢰",def:"우뢰"}]},{id:3810,hanja:"絺",strokes:"13",def:{en:["fine linen","fine hemp fiber"],kr:["가는","갈포","치"]},hunum:[{kor:"치",def:"가는 칡베"}]},{id:3811,hanja:"砌",strokes:"9",def:{en:["stone steps","brick walk"],kr:["섬돌","체"]},hunum:[{kor:"체",def:"섬돌"}]},{id:3812,hanja:"艤",strokes:"19",def:{en:["to moor a boat to the bank"],kr:["배","닿을","의"]},hunum:[{kor:"의",def:"배 닿을"}]},{id:3813,hanja:"負",strokes:"9",def:{en:["load","burden","carry","bear"],kr:["질","부"]},hunum:[{kor:"부",def:"질"}]},{id:3814,hanja:"猿",strokes:"13",def:{en:["ape"],kr:["잔나비","원"]},hunum:[{kor:"원",def:"원숭이"}]},{id:3815,hanja:"鯆",strokes:"18",def:{en:["the skate or ray"],kr:["물아지","포"]},hunum:[{kor:"포",def:"매가리"}]},{id:3816,hanja:"佩",strokes:"8",def:{en:["belt ornament","pendant","wear at waist","tie to the belt","respect"],kr:["물이","흘러서","합할","패"]},hunum:[{kor:"패",def:"패옥"}]},{id:3817,hanja:"財",strokes:"10",def:{en:["wealth","valuables","riches"],kr:["보배","재"]},hunum:[{kor:"재",def:"재물"}]},{id:3818,hanja:"醋",strokes:"15",def:{en:["vinegar","jealousy","envy"],kr:["초산","초"]},hunum:[{kor:"작",def:"술잔을 돌릴"},{kor:"초",def:"초산"}]},{id:3819,hanja:"棧",strokes:"12",def:{en:["warehouse","tavern","inn"]},hunum:[{kor:"잔",def:"잔교"},{kor:"진",def:"성할"}]},{id:3820,hanja:"序",strokes:"7",def:{en:["series","serial order","sequence"],kr:["차례","서"]},hunum:[{kor:"서",def:"차례"}]},{id:3821,hanja:"雹",strokes:"13",def:{en:["hail"],kr:["누리","박"]},hunum:[{kor:"박",def:"누리"}]},{id:3822,hanja:"佪",strokes:"8",def:{en:["hesitate"],kr:["어정거릴","회"]},hunum:[{kor:"회",def:"어정거릴"}]},{id:3823,hanja:"鯇",strokes:"18",def:{en:["carp"],kr:["잉어","환"]},hunum:[{kor:"혼",def:"산천어"},{kor:"환",def:"잉어"}]},{id:3824,hanja:"艦",strokes:"20",def:{en:["warship"],kr:["싸움배","함"]},hunum:[{kor:"함",def:"싸움배"}]},{id:3825,hanja:"貢",strokes:"10",def:{en:["offer tribute","tribute","gifts"],kr:["바칠","공"]},hunum:[{kor:"공",def:"바칠"}]},{id:3826,hanja:"棨",strokes:"12",def:{en:["tally or wooden pass"],kr:["창","계"]},hunum:[{kor:"계",def:"창"}]},{id:3827,hanja:"雺",strokes:"13",def:{en:[],kr:["안개","몽"]},hunum:[{kor:"몽",def:"안개"}]},{id:3828,hanja:"醍",strokes:"16",def:{en:["essential oil of butter"],kr:["맑은","술","제"]},hunum:[{kor:"제",def:"맑은 술"}]},{id:3829,hanja:"電",strokes:"13",def:{en:["electricity","electric","lightning"],kr:["전기","전"]},hunum:[{kor:"전",def:"번개"}]},{id:3830,hanja:"砏",strokes:"9",def:{en:[],kr:["큰","소리","분"]},hunum:[{kor:"분",def:"큰 소리"}]},{id:3831,hanja:"鯉",strokes:"18",def:{en:["carp"],kr:["잉어","리"]},hunum:[{kor:"리",def:"잉어"}]},{id:3832,hanja:"艨",strokes:"20",def:{en:["long and narrow war"],kr:["싸움배","몽"]},hunum:[{kor:"몽",def:"싸움배"}]},{id:3833,hanja:"鯊",strokes:"18",def:{en:["shark"],kr:["문절망둑","사"]},hunum:[{kor:"사",def:"문절망둑"}]},{id:3834,hanja:"絿",strokes:"13",def:{en:["urgent"],kr:["급박할","구"]},hunum:[{kor:"구",def:"급박할"}]},{id:3835,hanja:"砑",strokes:"9",def:{en:["to grind","to calender","to polish","to roll with a stone roller"],kr:["갈","아"]},hunum:[{kor:"아",def:"갈"}]},{id:3836,hanja:"醐",strokes:"16",def:{en:["purest cream"],kr:["제호","호"]},hunum:[{kor:"호",def:"제호"}]},{id:3837,hanja:"鯋",strokes:"18",def:{en:["shark"],kr:["모래무지","사"]},hunum:[{kor:"사",def:"상어"}]},{id:3838,hanja:"艪",strokes:"21",def:{en:["oar","scull","row"],kr:["艫와","同字"]},hunum:[{kor:"로",def:"노"}]},{id:3839,hanja:"砒",strokes:"9",def:{en:["arsenic"],kr:["비상","비"]},hunum:[{kor:"비",def:"비상"}]},{id:3840,hanja:"棬",strokes:"12",def:{en:["bowl"],kr:["휘어만든","나무그릇","권"]},hunum:[{kor:"권",def:"휘어만든 나무그릇"}]},{id:3841,hanja:"艫",strokes:"22",def:{en:["bow or prow of boat"],kr:["뱃머리","로"]},hunum:[{kor:"로",def:"뱃머리"}]},{id:3842,hanja:"貧",strokes:"11",def:{en:["poor","impoverished","needy"],kr:["가난할","빈"]},hunum:[{kor:"빈",def:"가난할"}]},{id:3843,hanja:"佯",strokes:"8",def:{en:["pretend","feign","false","deceitful"],kr:["어정거릴","양"]},hunum:[{kor:"양",def:"거짓"}]},{id:3844,hanja:"掀",strokes:"11",def:{en:["lift","raise","stir"],kr:["치켜들","흔"]},hunum:[{kor:"흔",def:"치켜들"}]},{id:3845,hanja:"貨",strokes:"11",def:{en:["goods","commodities","products"],kr:["재화","화"]},hunum:[{kor:"화",def:"재화"}]},{id:3846,hanja:"底",strokes:"8",def:{en:["bottom","underneath","underside"],kr:["이를","지"]},hunum:[{kor:"저",def:"밑"},{kor:"지",def:"이룰"}]},{id:3847,hanja:"醒",strokes:"16",def:{en:["wake up","sober up","startle"],kr:["깨달을","성"]},hunum:[{kor:"성",def:"술 깰"}]},{id:3848,hanja:"研",strokes:"11",def:{en:["grind","rub","study","research"],kr:["硏과","同字"]},hunum:[{kor:"연",def:"갈"}]},{id:3849,hanja:"森",strokes:"12",def:{en:["forest","luxuriant vegetation"],kr:["나무빽빽할","삼"]},hunum:[{kor:"삼",def:"나무빽빽할"}]},{id:3850,hanja:"佰",strokes:"8",def:{en:["hundred"]},hunum:[{kor:"벡",def:"일백"}]},{id:3851,hanja:"庖",strokes:"8",def:{en:["kitchen","cooking","cuisine"],kr:["부엌","포"]},hunum:[{kor:"포",def:"푸줏간"}]},{id:3852,hanja:"販",strokes:"11",def:{en:["peddler","hawker","street merchant"],kr:["팔","판"]},hunum:[{kor:"판",def:"장사"}]},{id:3853,hanja:"砕",strokes:"9",def:{en:["break","smash","broken","busted"],kr:["碎와","同字"]},hunum:[{kor:"쇄",def:"부술"}]},{id:3854,hanja:"店",strokes:"8",def:{en:["shop","store","inn","hotel"],kr:["주막","점"]},hunum:[{kor:"점",def:"가게"}]},{id:3855,hanja:"艮",strokes:"6",def:{en:["seventh of eight diagrams"],kr:["괘이름","간"]},hunum:[{kor:"간",def:"괘이름"}]},{id:3856,hanja:"貪",strokes:"11",def:{en:["greedy","covet","covetous"],kr:["욕심낼","탐"]},hunum:[{kor:"탐",def:"탐할"}]},{id:3857,hanja:"良",strokes:"7",def:{en:["good","virtuous","respectable"],kr:["좋을","량"]},hunum:[{kor:"량",def:"좋을"}]},{id:3858,hanja:"掃",strokes:"11",def:{en:["sweep","clear away","exterminate"],kr:["상투","소"]},hunum:[{kor:"소",def:"쓸"}]},{id:3859,hanja:"呝",strokes:"8",def:{en:[],kr:["울","액"]},hunum:[{kor:"액",def:"울"}]},{id:3860,hanja:"佳",strokes:"8",def:{en:["good","auspicious","beautiful","delightful"],kr:["좋아할","개"]},hunum:[{kor:"가",def:"아름다울"},{kor:"개",def:"착할"}]},{id:3861,hanja:"醖",strokes:"16",def:{en:["liquor"],kr:["醞의","俗字"]},hunum:[{kor:"온",def:"술 빚을"}]},{id:3862,hanja:"貫",strokes:"11",def:{en:["a string of","to go through"],kr:["꿸","관"]},hunum:[{kor:"관",def:"꿸"}]},{id:3863,hanja:"棲",strokes:"12",def:{en:["perch","roost","stay"],kr:["살","서"]},hunum:[{kor:"서",def:"살"}]},{id:3864,hanja:"掄",strokes:"11",def:{en:["swing","brandish","flourish"],kr:["가릴","륜"]},hunum:[{kor:"륜",def:"가릴"}]},{id:3865,hanja:"佴",strokes:"8",def:{en:["a second","an assistant"],kr:["버금","이"]},hunum:[{kor:"이",def:"버금"}]},{id:3866,hanja:"呟",strokes:"8",def:{en:["to mutter","grumble","murmur"],kr:["소리","현"]},hunum:[{kor:"현",def:"소리"}]},{id:3867,hanja:"責",strokes:"11",def:{en:["one","duty"],kr:["꾸짖을","책"]},hunum:[{kor:"채",def:"꾸짖을"},{kor:"책",def:"꾸짖을"}]},{id:3868,hanja:"淀",strokes:"11",def:{en:["shallow water","swamp","swampy"],kr:["배","댈","정"]},hunum:[{kor:"정",def:"얕은 물"}]},{id:3869,hanja:"醗",strokes:"16",def:{en:["to brew for the second time"]},hunum:[{kor:"발",def:"술 괼"}]},{id:3870,hanja:"艱",strokes:"17",def:{en:["difficult","hard","distressing"],kr:["어려울","간"]},hunum:[{kor:"간",def:"어려울"}]},{id:3871,hanja:"庚",strokes:"8",def:{en:["seveth heavenly stem"],kr:["일곱째","천간","경"]},hunum:[{kor:"경",def:"일곱째 천간"}]},{id:3872,hanja:"併",strokes:"8",def:{en:["combine","annex"],kr:["倂의","俗字"]},hunum:[{kor:"병",def:"아우를"}]},{id:3873,hanja:"色",strokes:"6",def:{en:["color","tint","hue","shade","form","body","beauty","desire for beauty"],kr:["빛","색"]},hunum:[{kor:"색",def:"빛"}]},{id:3874,hanja:"佶",strokes:"8",def:{en:["strong","robust","exact","correct"],kr:["건장할","길"]},hunum:[{kor:"길",def:"건장할"}]},{id:3875,hanja:"佷",strokes:"8",def:{en:["to act contrary to"],kr:["고을이름","항"]},hunum:[{kor:"한",def:"잔인할"},{kor:"항",def:"돌아올"}]},{id:3876,hanja:"鯔",strokes:"19",def:{en:["mullet"],kr:["숭어","치"]},hunum:[{kor:"치",def:"숭어"}]},{id:3877,hanja:"掇",strokes:"11",def:{en:["collect","gather up","pick up"],kr:["주울","철"]},hunum:[{kor:"철",def:"주울"}]},{id:3878,hanja:"蝀",strokes:"14",def:{en:["rainbow"],kr:["무지개","동"]},hunum:[{kor:"동",def:"무지개"}]},{id:3879,hanja:"府",strokes:"8",def:{en:["prefecture","prefect","government"],kr:["곳집","부"]},hunum:[{kor:"부",def:"곳집"}]},{id:3880,hanja:"貯",strokes:"12",def:{en:["store","stockpile","hoard"],kr:["둘","저"]},hunum:[{kor:"저",def:"쌓을"}]},{id:3881,hanja:"艴",strokes:"11",def:{en:["the countenance changing"],kr:["발끈할","불"]},hunum:[{kor:"불",def:"발끈할"}]},{id:3882,hanja:"淃",strokes:"11",def:{en:[],kr:["물돌아","흐를","권"]},hunum:[{kor:"권",def:"물돌아 흐를"}]},{id:3883,hanja:"呢",strokes:"8",def:{en:["interrogative or emphatic final"],kr:["소근거릴","니"]},hunum:[{kor:"니",def:"소근거릴"}]},{id:3884,hanja:"佸",strokes:"8",def:{en:["meet"],kr:["힘","쓸","괄"]},hunum:[{kor:"괄",def:"힘 쓸"}]},{id:3885,hanja:"淄",strokes:"11",def:{en:["river in Shandong province"],kr:["검을","치"]},hunum:[{kor:"치",def:"물이름"}]},{id:3886,hanja:"鯖",strokes:"19",def:{en:["mackerel"],kr:["청어","청"]},hunum:[{kor:"청",def:"청어"}]},{id:3887,hanja:"貰",strokes:"12",def:{en:["borrow","pardon","loan"],kr:["세","바칠","세"]},hunum:[{kor:"세",def:"빌릴"}]},{id:3888,hanja:"授",strokes:"11",def:{en:["give to","transmit","confer"],kr:["부칠","수"]},hunum:[{kor:"수",def:"줄"}]},{id:3889,hanja:"醜",strokes:"17",def:{en:["ugly looking","homely","disgraceful"],kr:["부끄러울","추"]},hunum:[{kor:"추",def:"추할"}]},{id:3890,hanja:"艶",strokes:"19",def:{en:["beautiful","sexy","voluptuous"],kr:["얼굴","탐스러울","염"]},hunum:[{kor:"염",def:"고울"}]},{id:3891,hanja:"掉",strokes:"11",def:{en:["turn","move","shake","wag","drop down"],kr:["흔들","도"]},hunum:[{kor:"도",def:"흔들"}]},{id:3892,hanja:"淅",strokes:"11",def:{en:["water used wash rice","to wash ric"],kr:["쌀일","석"]},hunum:[{kor:"석",def:"쌀일"}]},{id:3893,hanja:"呤",strokes:"8",def:{en:[],kr:["속삭일","령"]},hunum:[{kor:"령",def:"속삭일"}]},{id:3894,hanja:"佹",strokes:"8",def:{en:["depend upon","support","go against"],kr:["포갤","궤"]},hunum:[{kor:"궤",def:"포갤"}]},{id:3895,hanja:"淆",strokes:"11",def:{en:["confused","in disarray","mixed up"],kr:["뒤섞일","효"]},hunum:[{kor:"효",def:"뒤섞일"}]},{id:3896,hanja:"佺",strokes:"8",def:{en:["fairy"],kr:["신선이름","전"]},hunum:[{kor:"전",def:"신선이름"}]},{id:3897,hanja:"艷",strokes:"24",def:{en:["beautiful","sexy","voluptuous"],kr:["艷의","本字"]},hunum:[{kor:"염",def:"고울"}]},{id:3898,hanja:"貲",strokes:"12",def:{en:["property","wealth","to count"],kr:["재물","자"]},hunum:[{kor:"자",def:"재물"}]},{id:3899,hanja:"棹",strokes:"12",def:{en:["oar","boat"],kr:["노","저을","도"]},hunum:[{kor:"도",def:"노 저을"}]},{id:3900,hanja:"掊",strokes:"11",def:{en:["to extract","injure"],kr:["그러모을","부"]},hunum:[{kor:"부",def:"그러모을"}]},{id:3901,hanja:"庠",strokes:"9",def:{en:["village school","teach"],kr:["학교","상"]},hunum:[{kor:"상",def:"학교"}]},{id:3902,hanja:"艸",strokes:"6",def:{en:["grass","KangXi radical"],kr:["풀","초"]},hunum:[{kor:"초",def:"풀"}]},{id:3903,hanja:"佻",strokes:"8",def:{en:["frivolous","unsteady","delay"],kr:["방정맞을","조"]},hunum:[{kor:"조",def:"방정맞을"}]},{id:3904,hanja:"貳",strokes:"12",def:{en:["number two"],kr:["이별할","이"]},hunum:[{kor:"이",def:"두"}]},{id:3905,hanja:"棺",strokes:"12",def:{en:["coffin"],kr:["널","관"]},hunum:[{kor:"관",def:"널"}]},{id:3906,hanja:"淇",strokes:"11",def:{en:["river in Henan province"],kr:["강","이름","기"]},hunum:[{kor:"기",def:"강 이름"}]},{id:3907,hanja:"呦",strokes:"8",def:{en:["the bleating of the deer"],kr:["새짐승","우는","소리","유"]},hunum:[{kor:"유",def:"사슴 우는 소리"}]},{id:3908,hanja:"呧",strokes:"8",def:{en:["to rebuke","to scold","slander"],kr:["비방할","제"]},hunum:[{kor:"제",def:"꾸짖을"}]},{id:3909,hanja:"掌",strokes:"12",def:{en:["palm of hand","sole of foot","paw"],kr:["손바닥","장"]},hunum:[{kor:"장",def:"손바닥"}]},{id:3910,hanja:"醞",strokes:"17",def:{en:["liquor","spirits","wine","ferment"],kr:["술","빚을","온"]},hunum:[{kor:"온",def:"술 빚을"}]},{id:3911,hanja:"貴",strokes:"12",def:{en:["expensive","costly","valuable"],kr:["높을","귀"]},hunum:[{kor:"귀",def:"높을"}]},{id:3912,hanja:"棻",strokes:"12",def:{en:["kind of wood from which perfume"]},hunum:[{kor:"분",def:"향내 나는 나무"}]},{id:3913,hanja:"淈",strokes:"11",def:{en:[],kr:["흐릴","굴"]},hunum:[{kor:"굴",def:"흐릴"}]},{id:3914,hanja:"佼",strokes:"8",def:{en:["beautiful","handsome","good"],kr:["예쁠","교"]},hunum:[{kor:"교",def:"예쁠"}]},{id:3915,hanja:"佽",strokes:"8",def:{en:["aid","help"],kr:["도울","차"]},hunum:[{kor:"차",def:"도울"}]},{id:3916,hanja:"周",strokes:"8",def:{en:["Zhou dynasty","circumference"],kr:["두루","주"]},hunum:[{kor:"주",def:"두루"}]},{id:3917,hanja:"鯛",strokes:"19",def:{en:["pagrosomus major","porgy"],kr:["도미","조"]},hunum:[{kor:"조",def:"도미"}]},{id:3918,hanja:"棼",strokes:"12",def:{en:["beams in the roof of a house confused","disordered"],kr:["마룻대","분"]},hunum:[{kor:"분",def:"마룻대"}]},{id:3919,hanja:"貶",strokes:"12",def:{en:["decrease","lower","censure","criticize"],kr:["귀양보낼","폄"]},hunum:[{kor:"폄",def:"떨어질"}]},{id:3920,hanja:"砢",strokes:"10",def:{en:["pile of stones"],kr:["돌","쌓일","라"]},hunum:[{kor:"라",def:"돌 쌓일"}]},{id:3921,hanja:"掎",strokes:"11",def:{en:["drag aside","pull","drag one foot"],kr:["끌","기"]},hunum:[{kor:"기",def:"끌"}]},{id:3922,hanja:"佾",strokes:"8",def:{en:["a row or file of dancers"],kr:["춤","일"]},hunum:[{kor:"일",def:"춤"}]},{id:3923,hanja:"呪",strokes:"8",def:{en:["curse","damn","incantation"],kr:["빌","주"]},hunum:[{kor:"주",def:"빌"}]},{id:3924,hanja:"鯝",strokes:"19",def:{en:["fish guts"],kr:["참마자","고"]},hunum:[{kor:"고",def:"참마자"}]},{id:3925,hanja:"買",strokes:"12",def:{en:["buy","purchase","bribe","persuade"],kr:["살","매"]},hunum:[{kor:"매",def:"살"}]},{id:3926,hanja:"蝉",strokes:"14",def:{en:["cicada","continuous"],kr:["蟬의","略字"]},hunum:[{kor:"선",def:"매미"}]},{id:3927,hanja:"掏",strokes:"11",def:{en:["take out","pull out","clean out"],kr:["가릴","선택","할","도"]},hunum:[{kor:"도",def:"가릴(선택)할"}]},{id:3928,hanja:"淋",strokes:"11",def:{en:["drip","soak","drench","perfectly"],kr:["물뿌릴","림"]},hunum:[{kor:"림",def:"물뿌릴"}]},{id:3929,hanja:"使",strokes:"8",def:{en:["cause","send on a mission","order","envoy","messenger","ambassador"]},hunum:[{kor:"사",def:"하여금"},{kor:"시",def:"보낼"}]},{id:3930,hanja:"醢",strokes:"17",def:{en:["minced pickled meat","mince"],kr:["젓","담그는","형벌","해"]},hunum:[{kor:"해",def:"젓"}]},{id:3931,hanja:"呫",strokes:"8",def:{en:["whisper","lick","taste","petty"],kr:["앙징할","첩"]},hunum:[{kor:"첩",def:"맛 볼"}]},{id:3932,hanja:"貸",strokes:"12",def:{en:["lend","borrow","pardon"],kr:["빌릴","특"]},hunum:[{kor:"대",def:"빌릴"},{kor:"특",def:"빌릴"}]},{id:3933,hanja:"度",strokes:"9",def:{en:["degree","system","manner","to consider"],kr:["벼슬이름","탁"]},hunum:[{kor:"도",def:"법도"},{kor:"탁",def:"꾀할"}]},{id:3934,hanja:"砥",strokes:"10",def:{en:["a whetstone","to polish"],kr:["숫돌","지"]},hunum:[{kor:"지",def:"숫돌"}]},{id:3935,hanja:"座",strokes:"10",def:{en:["seat","stand","base"],kr:["자리","좌"]},hunum:[{kor:"좌",def:"자리"}]},{id:3936,hanja:"艾",strokes:"8",def:{en:["artemisia","mugwort","translit"],kr:["쑥","애"]},hunum:[{kor:"애",def:"쑥"}]},{id:3937,hanja:"蝋",strokes:"14",def:{en:["wax","candle","waxy","glazed"]},hunum:[{kor:"랍",def:"밀"}]},{id:3938,hanja:"貺",strokes:"12",def:{en:["give","grant","bestow","surname"],kr:["줄","황"]},hunum:[{kor:"황",def:"줄"}]},{id:3939,hanja:"砦",strokes:"10",def:{en:["stockade","fort","military outpost","brothel"],kr:["울타리","채"]},hunum:[{kor:"채",def:"울타리"}]},{id:3940,hanja:"醤",strokes:"17",def:{en:["any jam"],kr:["醬의","略字"]},hunum:[{kor:"장",def:"장"}]},{id:3941,hanja:"蝌",strokes:"15",def:{en:["tadpole"],kr:["올챙이","과"]},hunum:[{kor:"과",def:"올챙이"}]},{id:3942,hanja:"排",strokes:"11",def:{en:["row","rank","line"],kr:["밀칠","배"]},hunum:[{kor:"배",def:"밀칠"}]},{id:3943,hanja:"呬",strokes:"8",def:{en:["to rest"],kr:["숨","쉴","히"]},hunum:[{kor:"령",def:"왁자할"},{kor:"희",def:"쉴"},{kor:"히",def:"숨 쉴"}]},{id:3944,hanja:"淏",strokes:"11",def:{en:[],kr:["맑을","호"]},hunum:[{kor:"호",def:"맑을"}]},{id:3945,hanja:"砧",strokes:"10",def:{en:["anvil","flat stone","exe"],kr:["다듬잇돌","침"]},hunum:[{kor:"침",def:"방칫돌"}]},{id:3946,hanja:"鯡",strokes:"19",def:{en:["herring"],kr:["곤이","비"]},hunum:[{kor:"비",def:"곤이"}]},{id:3947,hanja:"費",strokes:"12",def:{en:["expenses","expenditures","fee"],kr:["쓸","비"]},hunum:[{kor:"비",def:"쓸"}]},{id:3948,hanja:"呭",strokes:"8",def:{en:["final particle expressing consent","talkative"],kr:["말","수다스럴","예"]},hunum:[{kor:"예",def:"말 수다스럴"}]},{id:3949,hanja:"貼",strokes:"12",def:{en:["paste to","stick on","attached to"],kr:["붙을","첩"]},hunum:[{kor:"첩",def:"붙을"}]},{id:3950,hanja:"鯢",strokes:"19",def:{en:["Cryptobranchus japonicus","a salamander"],kr:["암고래","예"]},hunum:[{kor:"예",def:"암고래"}]},{id:3951,hanja:"蝎",strokes:"15",def:{en:["scorpion"],kr:["빈대","갈"]},hunum:[{kor:"갈",def:"전갈"}]},{id:3952,hanja:"呮",strokes:"8",def:{en:["to sit","merely"],kr:["도사리고","앉을","기"]},hunum:[{kor:"기",def:"도사리고 앉을"}]},{id:3953,hanja:"貽",strokes:"12",def:{en:["give to","hand down","bequeath"],kr:["줄","이"]},hunum:[{kor:"이",def:"끼칠"}]},{id:3954,hanja:"庫",strokes:"10",def:{en:["armory","treasury","storehouse"],kr:["곳집","고"]},hunum:[{kor:"고",def:"곳집"}]},{id:3955,hanja:"鯤",strokes:"19",def:{en:["spawn","roe","fy"],kr:["준마","이름","곤"]},hunum:[{kor:"곤",def:"준마 이름"}]},{id:3956,hanja:"掖",strokes:"11",def:{en:["support with the arms","stick in","tuck in","fold up"],kr:["겨드랑이에","낄","액"]},hunum:[{kor:"액",def:"겨드랑이에 낄"}]},{id:3957,hanja:"淑",strokes:"11",def:{en:["good","pure","virtuous","charming"],kr:["사모할","숙"]},hunum:[{kor:"숙",def:"맑을"}]},{id:3958,hanja:"呰",strokes:"8",def:{en:[],kr:["주차할","자"]},hunum:[{kor:"자",def:"주차할"}]},{id:3959,hanja:"淒",strokes:"11",def:{en:["bitter cold","miserable","dreary"],kr:["쓸쓸할","처"]},hunum:[{kor:"처",def:"쓸쓸할"}]},{id:3960,hanja:"庭",strokes:"10",def:{en:["courtyard","spacious hall or yard"],kr:["곧을","정"]},hunum:[{kor:"정",def:"뜰"}]},{id:3961,hanja:"貿",strokes:"12",def:{en:["trade","barter","mixed","rashly"],kr:["물건","살","무"]},hunum:[{kor:"무",def:"바꿀"}]},{id:3962,hanja:"呱",strokes:"8",def:{en:["wail","crying of child","swear at"],kr:["울","고"]},hunum:[{kor:"고",def:"울"}]},{id:3963,hanja:"醪",strokes:"18",def:{en:["unclear wine","wine with dregs"],kr:["막걸리","료"]},hunum:[{kor:"료",def:"막걸리"}]},{id:3964,hanja:"砬",strokes:"10",def:{en:["big stone"],kr:["돌","소리","립"]},hunum:[{kor:"립",def:"돌 소리"}]},{id:3965,hanja:"掘",strokes:"11",def:{en:["dig","excavate","excavate cave"],kr:["뚫을","궐"]},hunum:[{kor:"굴",def:"팔"},{kor:"궐",def:"뚫을"}]},{id:3966,hanja:"砭",strokes:"10",def:{en:["stone probe","pierce","counsel"],kr:["돌침","폄"]},hunum:[{kor:"폄",def:"돌침"}]},{id:3967,hanja:"醫",strokes:"18",def:{en:["cure","heal","doctor","medical"],kr:["병","고칠","의"]},hunum:[{kor:"의",def:"의원"}]},{id:3968,hanja:"味",strokes:"8",def:{en:["taste","smell","odor","delicacy"],kr:["뜻","미"]},hunum:[{kor:"미",def:"맛"}]},{id:3969,hanja:"鯧",strokes:"19",def:{en:["the silvery pomfret","Stromateoides argenteus"],kr:["병어","창"]},hunum:[{kor:"창",def:"병어"}]},{id:3970,hanja:"醬",strokes:"18",def:{en:["any jam"],kr:["장","장"]},hunum:[{kor:"장",def:"장"}]},{id:3971,hanja:"狀",strokes:"8",def:{en:["form","appearance","shape","official"],kr:["모양","형상","장"]},hunum:[{kor:"상",def:"형상"},{kor:"장",def:"모양 형상"}]},{id:3972,hanja:"呴",strokes:"8",def:{en:["breathe on","yawn","roar"],kr:["숨을","내쉴","구"]},hunum:[{kor:"구",def:"숨을 내쉴"}]},{id:3973,hanja:"鯨",strokes:"19",def:{en:["whale"],kr:["고래","경"]},hunum:[{kor:"경",def:"고래"}]},{id:3974,hanja:"掛",strokes:"11",def:{en:["hang","suspend","suspense"],kr:["걸","괘"]},hunum:[{kor:"괘",def:"걸"}]},{id:3975,hanja:"淖",strokes:"11",def:{en:["slush","mud"],kr:["진흙","뇨"]},hunum:[{kor:"뇨",def:"진흙"}]},{id:3976,hanja:"呵",strokes:"8",def:{en:["scold","laughing sound","yawn"],kr:["꾸짖을","가"]},hunum:[{kor:"가",def:"꾸짖을"}]},{id:3977,hanja:"砰",strokes:"10",def:{en:["sound of crashing stones","bang"],kr:["여울","물소리","팽"]},hunum:[{kor:"팽",def:"여울 물소리"}]},{id:3978,hanja:"醮",strokes:"19",def:{en:["religious service","Daoist or Buddhist ceremony"],kr:["초례","초"]},hunum:[{kor:"초",def:"초례"}]},{id:3979,hanja:"蝕",strokes:"15",def:{en:["nibble away","erode","eclipse"],kr:["월식","식"]},hunum:[{kor:"식",def:"벌레먹을"}]},{id:3980,hanja:"狂",strokes:"7",def:{en:["insane","mad","violent","wild"],kr:["미질","광"]},hunum:[{kor:"광",def:"미질"}]},{id:3981,hanja:"掜",strokes:"11",def:{en:[],kr:["당길","예"]},hunum:[{kor:"예",def:"부칠"}]},{id:3982,hanja:"呶",strokes:"8",def:{en:["talkative","clamour","hubbub"],kr:["들랠","노"]},hunum:[{kor:"노",def:"들랠"}]},{id:3983,hanja:"醯",strokes:"19",def:{en:["vinegar","pickle","acid"],kr:["위대로울","혜"]},hunum:[{kor:"혜",def:"초"}]},{id:3984,hanja:"呷",strokes:"8",def:{en:["suck","swallow","drink"],kr:["집오리","우는","소리","합"]},hunum:[{kor:"합",def:"빨아 마실"}]},{id:3985,hanja:"奄",strokes:"8",def:{en:["ere long","remain","tarry","feeble"],kr:["오랠","엄"]},hunum:[{kor:"엄",def:"문득"}]},{id:3986,hanja:"鯪",strokes:"19",def:{en:["carp"],kr:["천산갑","릉"]},hunum:[{kor:"릉",def:"천산갑"}]},{id:3987,hanja:"淘",strokes:"11",def:{en:["wash in sieve","weed out"],kr:["일","도"]},hunum:[{kor:"도",def:"일"}]},{id:3988,hanja:"庳",strokes:"11",def:{en:["a low"],kr:["집","낮을","비"]},hunum:[{kor:"비",def:"집 낮을"}]},{id:3989,hanja:"蝗",strokes:"15",def:{en:["kind of locust"],kr:["누리","황"]},hunum:[{kor:"황",def:"누리"}]},{id:3990,hanja:"砲",strokes:"10",def:{en:["gun","cannon"],kr:["돌","튀기는","화살","포"]},hunum:[{kor:"포",def:"큰 대포"}]},{id:3991,hanja:"鯫",strokes:"19",def:{en:["small fish","small","minnow"],kr:["따라지","추"]},hunum:[{kor:"추",def:"송사리"}]},{id:3992,hanja:"淙",strokes:"11",def:{en:["gurgling sound of water"],kr:["물","소리","종"]},hunum:[{kor:"종",def:"물 소리"}]},{id:3993,hanja:"呸",strokes:"8",def:{en:["expression of reprimand"],kr:["다투는","소리","비"]},hunum:[{kor:"비",def:"다투는 소리"}]},{id:3994,hanja:"掟",strokes:"11",def:{en:["law","commandments","regulations"],kr:["둘러칠","정"]},hunum:[{kor:"정",def:"둘러칠"}]},{id:3995,hanja:"狄",strokes:"7",def:{en:["tribe from northern china","surnam"],kr:["멀","적"]},hunum:[{kor:"적",def:"북방 오랑캐"}]},{id:3996,hanja:"醱",strokes:"19",def:{en:["to brew for the second time"],kr:["술","괼","발"]},hunum:[{kor:"발",def:"술 괼"}]},{id:3997,hanja:"紀",strokes:"9",def:{en:["record","annal","historical account"],kr:["벼리","기"]},hunum:[{kor:"기",def:"벼리"}]},{id:3998,hanja:"淚",strokes:"11",def:{en:["tears","weep","cry"],kr:["눈물","루"]},hunum:[{kor:"루",def:"눈물"}]},{id:3999,hanja:"呹",strokes:"8",def:{en:[],kr:["소리","질"]},hunum:[{kor:"일",def:"풀 뜯어 먹을"},{kor:"질",def:"소리"}]},{id:4000,hanja:"呺",strokes:"8",def:{en:["voice of anger vast","spacious"],kr:["큰체할","효"]},hunum:[{kor:"호",def:"큰체할"},{kor:"효",def:"큰체할"}]},{id:4001,hanja:"蝙",strokes:"15",def:{en:["bat"],kr:["박쥐","편"]},hunum:[{kor:"편",def:"박쥐"}]},{id:4002,hanja:"破",strokes:"10",def:{en:["break","ruin","destroy","rout"],kr:["갈라질","파"]},hunum:[{kor:"파",def:"깨뜨릴"}]},{id:4003,hanja:"奇",strokes:"8",def:{en:["strange","unusual","uncanny","occult"],kr:["기이할","기"]},hunum:[{kor:"기",def:"기이할"}]},{id:4004,hanja:"醲",strokes:"20",def:{en:["strong wine","dense","thick"],kr:["텁텁한","술","농"]},hunum:[{kor:"농",def:"텁텁한 술"}]},{id:4005,hanja:"掠",strokes:"11",def:{en:["rob","ransack","plunder","pass by"],kr:["볼기칠","량"]},hunum:[{kor:"략",def:"노략질할"},{kor:"량",def:"볼기칠"}]},{id:4006,hanja:"庵",strokes:"11",def:{en:["Buddhist monastery or nunnery"],kr:["초막","암"]},hunum:[{kor:"암",def:"초막"}]},{id:4007,hanja:"採",strokes:"11",def:{en:["gather","collect","pick","select"],kr:["캘","채"]},hunum:[{kor:"채",def:"캘"}]},{id:4008,hanja:"紂",strokes:"9",def:{en:["name of an emperor","saddle part"],kr:["껑거리끈","주"]},hunum:[{kor:"주",def:"껑거리끈"}]},{id:4009,hanja:"奈",strokes:"8",def:{en:["but","how","bear","stand","endure"],kr:["어찌","내"]},hunum:[{kor:"나",def:"어찌"},{kor:"내",def:"어찌"}]},{id:4010,hanja:"呻",strokes:"8",def:{en:["groan","moan","recite with intonation"],kr:["끙끙거릴","신"]},hunum:[{kor:"신",def:"읊조릴"}]},{id:4011,hanja:"庶",strokes:"11",def:{en:["numerous","various","multitude"],kr:["여러","서"]},hunum:[{kor:"서",def:"여러"}]},{id:4012,hanja:"呼",strokes:"8",def:{en:["breathe sigh","exhale","call","shout"],kr:["숨","내쉴","호"]},hunum:[{kor:"호",def:"부를"}]},{id:4013,hanja:"探",strokes:"11",def:{en:["find","locate","search","grope for"],kr:["염탐할","탐"]},hunum:[{kor:"탐",def:"더듬을"}]},{id:4014,hanja:"奉",strokes:"8",def:{en:["offer","receive","serve","respect"],kr:["받들","봉"]},hunum:[{kor:"봉",def:"받들"}]},{id:4015,hanja:"醴",strokes:"20",def:{en:["sweet wine","sweet spring"],kr:["단술","례"]},hunum:[{kor:"례",def:"단술"}]},{id:4016,hanja:"紃",strokes:"9",def:{en:["a cord"],kr:["좇을","순"]},hunum:[{kor:"순",def:"신에 실선 두를"}]},{id:4017,hanja:"淝",strokes:"11",def:{en:["name of an affluent of the Poyang Lake"],kr:["강","이름","비"]},hunum:[{kor:"비",def:"강 이름"}]},{id:4018,hanja:"康",strokes:"11",def:{en:["peaceful","quiet","happy","healthy"],kr:["다섯거리","강"]},hunum:[{kor:"강",def:"편안할"}]},{id:4019,hanja:"掣",strokes:"12",def:{en:["drag","pull","hinder by pulling back"],kr:["끌어당길","체"]},hunum:[{kor:"철",def:"끌"},{kor:"체",def:"끌어당길"}]},{id:4020,hanja:"醵",strokes:"20",def:{en:["contribute for drinks","pool money"],kr:["추렴","걷을","거"]},hunum:[{kor:"갹",def:"술추렴"},{kor:"거",def:"술추렴"}]},{id:4021,hanja:"約",strokes:"9",def:{en:["treaty","agreement","covenant"],kr:["약속할","요"]},hunum:[{kor:"약",def:"대략"},{kor:"요",def:"약속할"}]},{id:4022,hanja:"淞",strokes:"11",def:{en:["name of a river in Jiangsu"],kr:["강이름","송"]},hunum:[{kor:"송",def:"강이름"}]},{id:4023,hanja:"命",strokes:"8",def:{en:["life","destiny","fate","luck","an order","instruction"],kr:["목숨","명"]},hunum:[{kor:"명",def:"목숨"}]},{id:4024,hanja:"庸",strokes:"11",def:{en:["usual","common","ordinary","mediocre"],kr:["물도랑","용"]},hunum:[{kor:"용",def:"쓸"}]},{id:4025,hanja:"狉",strokes:"8",def:{en:["fox"],kr:["삵의","새끼","비"]},hunum:[{kor:"비",def:"삵의 새끼"}]},{id:4026,hanja:"紅",strokes:"9",def:{en:["red","vermillion","blush","flush"],kr:["붉을","홍"]},hunum:[{kor:"공",def:"상복 이름"},{kor:"홍",def:"붉을"}]},{id:4027,hanja:"呾",strokes:"8",def:{en:[],kr:["마주","꾸짖을","달"]},hunum:[{kor:"달",def:"마주 꾸짖을"}]},{id:4028,hanja:"隄",strokes:"12",def:{en:["dike","embankment"],kr:["堤와","同字"]},hunum:[{kor:"제",def:"둑"}]},{id:4029,hanja:"接",strokes:"11",def:{en:["receive","continue","catch","connect"],kr:["잇닿을","접"]},hunum:[{kor:"접",def:"사귈"}]},{id:4030,hanja:"奌",strokes:"8",def:{en:["dot","speck","spot","point","degree"],kr:["點의","略字"]},hunum:[{kor:"점",def:"점찍을"}]},{id:4031,hanja:"紆",strokes:"9",def:{en:["bend","turn","twist","distort"],kr:["굽을","우"]},hunum:[{kor:"우",def:"얽힐"}]},{id:4032,hanja:"淠",strokes:"11",def:{en:[],kr:["강","이름","비"]},hunum:[{kor:"비",def:"강 이름"}]},{id:4033,hanja:"呿",strokes:"8",def:{en:["to yawn"],kr:["입","딱","벌일","거"]},hunum:[{kor:"거",def:"입 딱 벌일"}]},{id:4034,hanja:"紇",strokes:"9",def:{en:["inferior silk","tassel","fringe"],kr:["질","낮은","명주실","흘"]},hunum:[{kor:"흘",def:"질 낮은 명주실"}]},{id:4035,hanja:"隅",strokes:"12",def:{en:["corner","nook","remote place"],kr:["기슭","우"]},hunum:[{kor:"우",def:"모퉁이"}]},{id:4036,hanja:"蝟",strokes:"15",def:{en:["hedgehog"],kr:["고슴도치","위"]},hunum:[{kor:"위",def:"고슴도치"}]},{id:4037,hanja:"淡",strokes:"11",def:{en:["weak","watery","insipid","tasteless"],kr:["물모양","담"]},hunum:[{kor:"담",def:"물모양"}]},{id:4038,hanja:"庻",strokes:"11",def:{en:["numerous","various","multitude"],kr:["庶의","略字"]},hunum:[{kor:"서",def:"여러"}]},{id:4039,hanja:"紈",strokes:"9",def:{en:["white silk","fine silk","gauze"],kr:["흰","비단","환"]},hunum:[{kor:"환",def:"흰 비단"}]},{id:4040,hanja:"奎",strokes:"9",def:{en:["stride of man","one of the twenty"],kr:["별","규"]},hunum:[{kor:"규",def:"별"}]},{id:4041,hanja:"隆",strokes:"12",def:{en:["prosperous","plentiful","abundant"],kr:["클","륭"]},hunum:[{kor:"륭",def:"클"}]},{id:4042,hanja:"蝠",strokes:"15",def:{en:["kind of bat"],kr:["박쥐","복"]},hunum:[{kor:"복",def:"박쥐"}]},{id:4043,hanja:"砺",strokes:"10",def:{en:["whetstone","sharpen"],kr:["礪의","略字"]},hunum:[{kor:"려",def:"숫돌"}]},{id:4044,hanja:"控",strokes:"11",def:{en:["accuse","charge","control"],kr:["당길","공"]},hunum:[{kor:"강",def:"칠"},{kor:"공",def:"당길"}]},{id:4045,hanja:"淢",strokes:"11",def:{en:["ditch"],kr:["빨리","흐를","역"]},hunum:[{kor:"역",def:"빨리 흐를"}]},{id:4046,hanja:"奏",strokes:"9",def:{en:["memorialize emperor","report"],kr:["아뢸","주"]},hunum:[{kor:"주",def:"아뢸"}]},{id:4047,hanja:"庽",strokes:"12",def:{en:[]},hunum:[{kor:"우",def:"부칠"}]},{id:4048,hanja:"奐",strokes:"9",def:{en:["be numerous","brilliant"],kr:["빛날","환"]},hunum:[{kor:"환",def:"빛날"}]},{id:4049,hanja:"推",strokes:"11",def:{en:["push","expel","push forward"],kr:["밀","퇴"]},hunum:[{kor:"추",def:"옮길"},{kor:"퇴",def:"밀"}]},{id:4050,hanja:"隈",strokes:"12",def:{en:["cove","bay","inlet"],kr:["모퉁이","외"]},hunum:[{kor:"외",def:"모퉁이"}]},{id:4051,hanja:"狎",strokes:"8",def:{en:["be familiar with","disrespect"],kr:["업신여길","압"]},hunum:[{kor:"압",def:"친근할"}]},{id:4052,hanja:"紊",strokes:"10",def:{en:["confused","disorder"],kr:["어지러울","문"]},hunum:[{kor:"문",def:"어지러울"}]},{id:4053,hanja:"淤",strokes:"11",def:{en:["mud","sediment","clog up","silt up"],kr:["진흙","어"]},hunum:[{kor:"어",def:"앙금"}]},{id:4054,hanja:"庾",strokes:"12",def:{en:["granary","storehouse"],kr:["곡식","셈하는","단위","휘","유"]},hunum:[{kor:"유",def:"노적"}]},{id:4055,hanja:"鯷",strokes:"20",def:{en:["anchovy"],kr:["메기","제"]},hunum:[{kor:"제",def:"메기"}]},{id:4056,hanja:"契",strokes:"9",def:{en:["deed","contract","bond","engrave"],kr:["부족","이름","글"]},hunum:[{kor:"계",def:"맺을"},{kor:"글",def:"부족 이름"}]},{id:4057,hanja:"隉",strokes:"12",def:{en:["in disorder","a dangerous condition of the State"],kr:["위태할","얼"]},hunum:[{kor:"얼",def:"위태할"}]},{id:4058,hanja:"紋",strokes:"10",def:{en:["line","streak","stripe","wrinkle"],kr:["주름","문"]},hunum:[{kor:"문",def:"무늬"}]},{id:4059,hanja:"掩",strokes:"11",def:{en:["to cover","shut","conceal","ambush"],kr:["가릴","엄"]},hunum:[{kor:"엄",def:"거둘"}]},{id:4060,hanja:"淥",strokes:"11",def:{en:["strain"],kr:["밭을","록"]},hunum:[{kor:"록",def:"밭을"}]},{id:4061,hanja:"狐",strokes:"8",def:{en:["species of fox"],kr:["여우","호"]},hunum:[{kor:"호",def:"여우"}]},{id:4062,hanja:"措",strokes:"11",def:{en:["place","collect","arrange","employ"],kr:["둘","책"]},hunum:[{kor:"조",def:"둘"},{kor:"책",def:"둘"}]},{id:4063,hanja:"隊",strokes:"12",def:{en:["team","group","army unit"],kr:["군대","대"]},hunum:[{kor:"대",def:"군대"}]},{id:4064,hanja:"蝤",strokes:"15",def:{en:[],kr:["하루살이","유"]},hunum:[{kor:"유",def:"하루살이"}]},{id:4065,hanja:"淦",strokes:"11",def:{en:["river in Jiangxi province","water leaking into a boat"]},hunum:[{kor:"검",def:"물 이름"}]},{id:4066,hanja:"奓",strokes:"9",def:{en:["extravagant"],kr:["오만할","차"]},hunum:[{kor:"차",def:"오만할"}]},{id:4067,hanja:"隋",strokes:"12",def:{en:["Sui dynasty","surname"],kr:["수나라","수"]},hunum:[{kor:"수",def:"수나라"}]},{id:4068,hanja:"蝥",strokes:"15",def:{en:["a fly which is used similarly to cantharides"],kr:["해충","모"]},hunum:[{kor:"모",def:"해충"}]},{id:4069,hanja:"蝦",strokes:"15",def:{en:["shrimp","prawn"],kr:["새우","하"]},hunum:[{kor:"하",def:"새우"}]},{id:4070,hanja:"淨",strokes:"11",def:{en:["pure","clean","unspoiled"],kr:["조촐할","정"]},hunum:[{kor:"정",def:"맑을"}]},{id:4071,hanja:"奔",strokes:"9",def:{en:["run fast","flee","rush about","run"],kr:["달릴","분"]},hunum:[{kor:"분",def:"달릴"}]},{id:4072,hanja:"狒",strokes:"8",def:{en:["baboon"],kr:["비비","비"]},hunum:[{kor:"비",def:"비비"}]},{id:4073,hanja:"納",strokes:"10",def:{en:["admit","take","receive","accept"],kr:["바칠","납"]},hunum:[{kor:"납",def:"바칠"}]},{id:4074,hanja:"掬",strokes:"11",def:{en:["to grasp or hold with both hands"],kr:["두","손으로","움킬","국"]},hunum:[{kor:"국",def:"두 손으로 움킬"}]},{id:4075,hanja:"隍",strokes:"12",def:{en:["dry ditch","dry moat"],kr:["해자","황"]},hunum:[{kor:"황",def:"해자"}]},{id:4076,hanja:"奕",strokes:"9",def:{en:["in sequence","orderly","abundant"],kr:["근심할","혁"]},hunum:[{kor:"혁",def:"아름다울"}]},{id:4077,hanja:"階",strokes:"12",def:{en:["stairs","steps","rank","degree"],kr:["섬돌","계"]},hunum:[{kor:"계",def:"섬돌"}]},{id:4078,hanja:"蝨",strokes:"15",def:{en:["louse","bed bug"],kr:["이","슬"]},hunum:[{kor:"슬",def:"이"}]},{id:4079,hanja:"淪",strokes:"11",def:{en:["be lost","sink","be submerged"],kr:["물놀이","륜"]},hunum:[{kor:"논",def:"빠질"},{kor:"륜",def:"물놀이"}]},{id:4080,hanja:"套",strokes:"10",def:{en:["case","cover","wrapper","envelope"],kr:["전례","투"]},hunum:[{kor:"토",def:"장대할"},{kor:"투",def:"전례"}]},{id:4081,hanja:"鯽",strokes:"20",def:{en:["carassius auratus","crucian carp"],kr:["붕어","즉"]},hunum:[{kor:"즉",def:"붕어"}]},{id:4082,hanja:"随",strokes:"12",def:{en:["follow","listen to","submit to"],kr:["隨의","譌字"]},hunum:[{kor:"수",def:"따를"}]},{id:4083,hanja:"紐",strokes:"10",def:{en:["knot","button","handle","knob","tie"],kr:["잡색비단","뉴"]},hunum:[{kor:"뉴",def:"잡색비단"}]},{id:4084,hanja:"淫",strokes:"11",def:{en:["obscene","licentious","lewd"],kr:["오랠","음"]},hunum:[{kor:"음",def:"방탕할"}]},{id:4085,hanja:"奘",strokes:"10",def:{en:["large","powerful","stout","thick"],kr:["클","장"]},hunum:[{kor:"장",def:"클"}]},{id:4086,hanja:"隐",strokes:"12",def:{en:["hide","conceal","hidden","secret"],kr:["隱과","同字"]},hunum:[{kor:"은",def:"숨을"}]},{id:4087,hanja:"淬",strokes:"11",def:{en:["temper","dye","soak","change","alter"],kr:["범할","쉬"]},hunum:[{kor:"쉬",def:"칼 담글"}]},{id:4088,hanja:"鯿",strokes:"20",def:{en:["bream"],kr:["병어","편"]},hunum:[{kor:"편",def:"병어"}]},{id:4089,hanja:"伀",strokes:"6",def:{en:["excited"],kr:["두려워할","종"]},hunum:[{kor:"종",def:"두려워할"}]},{id:4090,hanja:"狗",strokes:"8",def:{en:["dog","canis familiaris"],kr:["개","구"]},hunum:[{kor:"구",def:"개"}]},{id:4091,hanja:"淮",strokes:"11",def:{en:["river in Anhui province"],kr:["강","이름","회"]},hunum:[{kor:"회",def:"강 이름"}]},{id:4092,hanja:"奚",strokes:"10",def:{en:["where","servant"],kr:["큰","배","해"]},hunum:[{kor:"해",def:"어찌"}]},{id:4093,hanja:"企",strokes:"6",def:{en:["plan a project","stand on tiptoe"],kr:["꾀할","기"]},hunum:[{kor:"기",def:"꾀할"}]},{id:4094,hanja:"隑",strokes:"13",def:{en:[],kr:["사닥다리","기"]},hunum:[{kor:"기",def:"사닥다리"}]},{id:4095,hanja:"紓",strokes:"10",def:{en:["loosen","relax","relieve","extricate"],kr:["느슨할","서"]},hunum:[{kor:"서",def:"느슨할"}]},{id:4096,hanja:"掲",strokes:"12",def:{en:["to set","to install","equip","to lay"],kr:["揭와","同字"]},hunum:[{kor:"갈",def:"질"},{kor:"게",def:"높이 들"}]},{id:4097,hanja:"狙",strokes:"8",def:{en:["an ape","monkey","to spy","watch for","to lie"],kr:["원숭이","처"]},hunum:[{kor:"저",def:"원숭이"},{kor:"처",def:"원숭이"}]},{id:4098,hanja:"純",strokes:"10",def:{en:["pure","clean","simple"],kr:["선으로","두를","준"]},hunum:[{kor:"순",def:"실"},{kor:"준",def:"선으로 두를"}]},{id:4099,hanja:"梁",strokes:"11",def:{en:["bridge","beam","rafters","surname"],kr:["푸조나무","량"]},hunum:[{kor:"량",def:"푸조나무"}]},{id:4100,hanja:"伃",strokes:"6",def:{en:["handsome"],kr:["아름다울","여"]},hunum:[{kor:"여",def:"궁녀 벼슬이름"}]},{id:4101,hanja:"蝮",strokes:"15",def:{en:["venomous snake","viper"],kr:["살무사","복"]},hunum:[{kor:"복",def:"살무사"}]},{id:4102,hanja:"紕",strokes:"10",def:{en:["spoiled silk","hem of dress","mista"],kr:["가선","비"]},hunum:[{kor:"비",def:"가선"}]},{id:4103,hanja:"隔",strokes:"13",def:{en:["separate","partition"],kr:["멀","격"]},hunum:[{kor:"격",def:"막을"}]},{id:4104,hanja:"梃",strokes:"11",def:{en:["a club","a stalk","straight"],kr:["꼿꼿할","정"]},hunum:[{kor:"정",def:"외줄기"}]},{id:4105,hanja:"伅",strokes:"6",def:{en:[],kr:["어두울","돈"]},hunum:[{kor:"돈",def:"어두울"}]},{id:4106,hanja:"隕",strokes:"13",def:{en:["fall","slip","let fall","die"],kr:["폭원","원"]},hunum:[{kor:"운",def:"떨어질"},{kor:"원",def:"폭원"}]},{id:4107,hanja:"舁",strokes:"10",def:{en:["carry on one"],kr:["마주들","여"]},hunum:[{kor:"여",def:"마주들"}]},{id:4108,hanja:"紗",strokes:"10",def:{en:["gauze","thin silk","yarn","thread"],kr:["깁","사"]},hunum:[{kor:"사",def:"깁"}]},{id:4109,hanja:"深",strokes:"11",def:{en:["deep","depth","far","very","extreme"],kr:["깊을","심"]},hunum:[{kor:"심",def:"깊을"}]},{id:4110,hanja:"舂",strokes:"11",def:{en:["grind in mortar"],kr:["해가","질","용"]},hunum:[{kor:"용",def:"방아 찧을"}]},{id:4111,hanja:"紘",strokes:"10",def:{en:["string","vast","expansive"],kr:["갓끈","굉"]},hunum:[{kor:"굉",def:"갓끈"}]},{id:4112,hanja:"紙",strokes:"10",def:{en:["paper"],kr:["종이","지"]},hunum:[{kor:"지",def:"종이"}]},{id:4113,hanja:"梅",strokes:"11",def:{en:["plums","prunes","surname"],kr:["매화나무","매"]},hunum:[{kor:"매",def:"매화나무"}]},{id:4114,hanja:"伇",strokes:"6",def:{en:[],kr:["役의","古字"]},hunum:[{kor:"역",def:"부릴"}]},{id:4115,hanja:"隗",strokes:"13",def:{en:["high","lofty","surname"],kr:["성씨","외"]},hunum:[{kor:"외",def:"높을"}]},{id:4116,hanja:"舃",strokes:"12",def:{en:["a shoe","the sole of a shoe","magpie"],kr:["신","석"]},hunum:[{kor:"석",def:"신"}]},{id:4117,hanja:"淳",strokes:"11",def:{en:["honest","simple","unsophisticated","cyanogen","ethane dinitrile"],kr:["순박할","순"]},hunum:[{kor:"순",def:"맑을"}]},{id:4118,hanja:"奠",strokes:"12",def:{en:["pay respect","settle"],kr:["정할","전"]},hunum:[{kor:"전",def:"정할"}]},{id:4119,hanja:"梆",strokes:"11",def:{en:["watchman"],kr:["목어","방"]},hunum:[{kor:"방",def:"목어"}]},{id:4120,hanja:"伈",strokes:"6",def:{en:["nervous","fearful"],kr:["두려워할","침"]},hunum:[{kor:"심",def:"두려워할"},{kor:"침",def:"두려워할"}]},{id:4121,hanja:"隘",strokes:"13",def:{en:["narrow","confined","a strategic pass"],kr:["阨과","同字"]},hunum:[{kor:"애",def:"좁을"},{kor:"액",def:"막을"}]},{id:4122,hanja:"舄",strokes:"12",def:{en:["a shoe","the sole of a shoe","magpie"],kr:["舃의","略字"]},hunum:[{kor:"석",def:"신"}]},{id:4123,hanja:"級",strokes:"10",def:{en:["level","rank","class","grade"],kr:["등급","급"]},hunum:[{kor:"급",def:"등급"}]},{id:4124,hanja:"蝴",strokes:"15",def:{en:["butterfly"]},hunum:[{kor:"호",def:"나비"}]},{id:4125,hanja:"豁",strokes:"17",def:{en:["open up","clear","exempt"],kr:["뚫린","골","활"]},hunum:[{kor:"활",def:"뚫린 골"}]},{id:4126,hanja:"伉",strokes:"6",def:{en:["compare","match","pair","spouse"],kr:["겨룰","항"]},hunum:[{kor:"항",def:"강직할"}]},{id:4127,hanja:"隙",strokes:"13",def:{en:["crack","split","fissure","grudge"],kr:["틈","극"]},hunum:[{kor:"극",def:"틈"}]},{id:4128,hanja:"舅",strokes:"13",def:{en:["mother","uncle"],kr:["외삼촌","구"]},hunum:[{kor:"구",def:"외삼촌"}]},{id:4129,hanja:"紛",strokes:"10",def:{en:["in disorder","scattered","tangled"],kr:["어지러워질","분"]},hunum:[{kor:"분",def:"어지러워질"}]},{id:4130,hanja:"淵",strokes:"11",def:{en:["gulf","abyss","deep"],kr:["모래톱","연"]},hunum:[{kor:"연",def:"못"}]},{id:4131,hanja:"奢",strokes:"12",def:{en:["extravagant","wasteful","exaggerate"],kr:["사치할","사"]},hunum:[{kor:"사",def:"사치할"}]},{id:4132,hanja:"伊",strokes:"6",def:{en:["third person pronoun","he","she","this","that"],kr:["성씨","이"]},hunum:[{kor:"이",def:"저"}]},{id:4133,hanja:"狡",strokes:"9",def:{en:["cunning","deceitful","treacherous"],kr:["교활할","교"]},hunum:[{kor:"교",def:"교활할"}]},{id:4134,hanja:"紜",strokes:"10",def:{en:["confused","in disorder","numerous"],kr:["얼크러질","운"]},hunum:[{kor:"운",def:"얼크러질"}]},{id:4135,hanja:"掻",strokes:"11",def:{en:["scratch lightly"],kr:["搔와","同字"]},hunum:[{kor:"소",def:"긁을"}]},{id:4136,hanja:"淶",strokes:"11",def:{en:["river in Hebei province","creek"],kr:["강","이름","래"]},hunum:[{kor:"래",def:"강 이름"}]},{id:4137,hanja:"狢",strokes:"9",def:{en:["animal name"],kr:["오소리","학"]},hunum:[{kor:"학",def:"오소리"}]},{id:4138,hanja:"際",strokes:"14",def:{en:["border","boundary","juncture"],kr:["사이","제"]},hunum:[{kor:"제",def:"사이"}]},{id:4139,hanja:"伋",strokes:"6",def:{en:["deceptive"],kr:["속일","급"]},hunum:[{kor:"급",def:"속일"}]},{id:4140,hanja:"與",strokes:"14",def:{en:["and","with","to","for","give","grant"],kr:["미칠","여"]},hunum:[{kor:"여",def:"너울너울할"}]},{id:4141,hanja:"混",strokes:"11",def:{en:["to mix","blend","mingle","to bumble along"],kr:["섞을","혼"]},hunum:[{kor:"곤",def:"서쪽 오랑캐"},{kor:"혼",def:"섞을"}]},{id:4142,hanja:"興",strokes:"15",def:{en:["thrive","prosper","flourish"],kr:["일","흥"]},hunum:[{kor:"흥",def:"일"}]},{id:4143,hanja:"淸",strokes:"11",def:{en:["clear"],kr:["맑을","청"]},hunum:[{kor:"청",def:"맑을"}]},{id:4144,hanja:"蝶",strokes:"15",def:{en:["butterfly"],kr:["들나비","접"]},hunum:[{kor:"접",def:"들나비"}]},{id:4145,hanja:"障",strokes:"14",def:{en:["separate","shield","barricade"],kr:["막을","장"]},hunum:[{kor:"장",def:"막을"}]},{id:4146,hanja:"奥",strokes:"12",def:{en:["mysterious","obscure","profound"],kr:["奧의","俗字"]},hunum:[{kor:"오",def:"깊을"},{kor:"욱",def:"따스할"}]},{id:4147,hanja:"伍",strokes:"6",def:{en:["five","company of five","troops"],kr:["무리","오"]},hunum:[{kor:"오",def:"다섯 사람"}]},{id:4148,hanja:"掾",strokes:"12",def:{en:["a general designation of officials"],kr:["기인할","연"]},hunum:[{kor:"연",def:"아전"}]},{id:4149,hanja:"淹",strokes:"11",def:{en:["drown","cover with liquid","steep"],kr:["오래머물","엄"]},hunum:[{kor:"엄",def:"담글"}]},{id:4150,hanja:"淺",strokes:"11",def:{en:["shallow","not deep","superficial"],kr:["얕을","천"]},hunum:[{kor:"천",def:"얕을"}]},{id:4151,hanja:"伎",strokes:"6",def:{en:["talent","skill","ability"],kr:["재주","기"]},hunum:[{kor:"기",def:"재주"}]},{id:4152,hanja:"蝸",strokes:"15",def:{en:["a snail","Eulota callizoma"],kr:["달팽이","와"]},hunum:[{kor:"와",def:"달팽이"}]},{id:4153,hanja:"舊",strokes:"18",def:{en:["old","ancient","former","past"],kr:["옛","구"]},hunum:[{kor:"구",def:"옛"}]},{id:4154,hanja:"豆",strokes:"7",def:{en:["beans","peas","bean"],kr:["콩","두"]},hunum:[{kor:"두",def:"콩"}]},{id:4155,hanja:"素",strokes:"10",def:{en:["white","plain","vegetarian","formerly","normally"],kr:["원래","소"]},hunum:[{kor:"소",def:"흴"}]},{id:4156,hanja:"添",strokes:"11",def:{en:["append","add to","increase"],kr:["더할","첨"]},hunum:[{kor:"첨",def:"더할"}]},{id:4157,hanja:"奧",strokes:"13",def:{en:["mysterious","obscure","profound"],kr:["모퉁이","욱"]},hunum:[{kor:"오",def:"속"},{kor:"욱",def:"따스할"}]},{id:4158,hanja:"伏",strokes:"6",def:{en:["crouch","crawl","lie hidden","conceal"],kr:["알","안을","부"]},hunum:[{kor:"복",def:"엎드릴"},{kor:"부",def:"알 안을"}]},{id:4159,hanja:"豇",strokes:"10",def:{en:["a small kidney bean"],kr:["광저기","강"]},hunum:[{kor:"강",def:"광저기"}]},{id:4160,hanja:"狥",strokes:"9",def:{en:["follow"],kr:["徇의","俗字"]},hunum:[{kor:"순",def:"돌"}]},{id:4161,hanja:"紡",strokes:"10",def:{en:["spin","reel","weave","reeled pongee"],kr:["자을","방"]},hunum:[{kor:"방",def:"자을"}]},{id:4162,hanja:"奨",strokes:"13",def:{en:["prize","reward","give award to"],kr:["奬의","略字"]},hunum:[{kor:"장",def:"장려할"}]},{id:4163,hanja:"伐",strokes:"6",def:{en:["cut down","subjugate","attack"],kr:["칠","벌"]},hunum:[{kor:"벌",def:"칠"}]},{id:4164,hanja:"隠",strokes:"14",def:{en:["to hide","conceal","cover","to disappear","lurk","an open secret"],kr:["隱의","俗字"]},hunum:[{kor:"은",def:"온화할"}]},{id:4165,hanja:"舌",strokes:"6",def:{en:["tongue","clapper of bell","KangXi radical"],kr:["혀","설"]},hunum:[{kor:"설",def:"혀"}]},{id:4166,hanja:"豈",strokes:"10",def:{en:["how"],kr:["어찌","기"]},hunum:[{kor:"개",def:"승전악"},{kor:"기",def:"어찌"}]},{id:4167,hanja:"索",strokes:"10",def:{en:["large rope","cable","rules","laws","to demand","to exact","to search","inquire","isolated"],kr:["찾을","색"]},hunum:[{kor:"삭",def:"동아줄"},{kor:"색",def:"찾을"}]},{id:4168,hanja:"淼",strokes:"12",def:{en:["a wide expanse of water"],kr:["물","아득할","묘"]},hunum:[{kor:"묘",def:"물 아득할"}]},{id:4169,hanja:"休",strokes:"6",def:{en:["rest","stop","retire","do not"],kr:["쉴","휴"]},hunum:[{kor:"휴",def:"쉴"}]},{id:4170,hanja:"梏",strokes:"11",def:{en:["handcuffs","manacles","fetters"],kr:["쇠고랑","곡"]},hunum:[{kor:"곡",def:"쇠고랑"}]},{id:4171,hanja:"奩",strokes:"14",def:{en:["lady","trousseau"],kr:["화장","상자","렴"]},hunum:[{kor:"렴",def:"화장 상자"}]},{id:4172,hanja:"舍",strokes:"8",def:{en:["house","dwelling","dwell","reside"],kr:["집","사"]},hunum:[{kor:"사",def:"집"}]},{id:4173,hanja:"奪",strokes:"14",def:{en:["take by force","rob","snatch"],kr:["깎을","탈"]},hunum:[{kor:"탈",def:"빼앗을"}]},{id:4174,hanja:"豉",strokes:"11",def:{en:["fermented beans"],kr:["콩자반","시"]},hunum:[{kor:"시",def:"메주"}]},{id:4175,hanja:"狨",strokes:"9",def:{en:[],kr:["원숭이","융"]},hunum:[{kor:"융",def:"원숭이"}]},{id:4176,hanja:"奫",strokes:"14",def:{en:[],kr:["물이","충충할","윤"]},hunum:[{kor:"윤",def:"물 깊을"}]},{id:4177,hanja:"隣",strokes:"15",def:{en:["neighbor","neighboring","adjacent"],kr:["鄰의","俗字"]},hunum:[{kor:"린",def:"이웃"}]},{id:4178,hanja:"豊",strokes:"13",def:{en:["abundant","lush","bountiful","plenty"],kr:["豐의","略字"]},hunum:[{kor:"례",def:"예도"},{kor:"풍",def:"풍년"}]},{id:4179,hanja:"狩",strokes:"9",def:{en:["winter hunting","imperial tour"],kr:["순행할","수"]},hunum:[{kor:"수",def:"겨울사냥"}]},{id:4180,hanja:"隤",strokes:"15",def:{en:["to fall in ruins","to collapse"],kr:["땅이름","퇴"]},hunum:[{kor:"퇴",def:"무너질"}]},{id:4181,hanja:"舐",strokes:"10",def:{en:["lick with tongue"],kr:["핥을","지"]},hunum:[{kor:"지",def:"핥을"}]},{id:4182,hanja:"奬",strokes:"14",def:{en:["prize","reward","give award to"],kr:["도울","장"]},hunum:[{kor:"장",def:"도울"}]},{id:4183,hanja:"梓",strokes:"11",def:{en:["catalpa ovata"],kr:["고향","재"]},hunum:[{kor:"재",def:"가래나무"}]},{id:4184,hanja:"奭",strokes:"15",def:{en:["red","anger","ire","surname"],kr:["성대할","학"]},hunum:[{kor:"석",def:"클"},{kor:"학",def:"성대할"}]},{id:4185,hanja:"豌",strokes:"15",def:{en:["peas"],kr:["완두","완"]},hunum:[{kor:"완",def:"동부"}]},{id:4186,hanja:"梔",strokes:"11",def:{en:["gardenia"],kr:["치자","치"]},hunum:[{kor:"치",def:"치자"}]},{id:4187,hanja:"奮",strokes:"16",def:{en:["strive","exert effort","arouse"],kr:["떨칠","분"]},hunum:[{kor:"분",def:"떨칠"}]},{id:4188,hanja:"舒",strokes:"12",def:{en:["open up","unfold","stretch out","comfortable","easy"],kr:["펼","서"]},hunum:[{kor:"서",def:"펼"}]},{id:4189,hanja:"独",strokes:"9",def:{en:["alone","single","solitary","only"],kr:["獨의","俗字"]},hunum:[{kor:"독",def:"홀로"}]},{id:4190,hanja:"吁",strokes:"6",def:{en:["interjection","to sigh"]},hunum:[{kor:"유",def:"부를"}]},{id:4191,hanja:"隧",strokes:"16",def:{en:["tunnel","underground passageway","path to a tomb"],kr:["길","수"]},hunum:[{kor:"수",def:"무덤길"}]},{id:4192,hanja:"豎",strokes:"15",def:{en:["vertical","perpendicular","upright"],kr:["더벅머리","수"]},hunum:[{kor:"수",def:"세울"}]},{id:4193,hanja:"隨",strokes:"16",def:{en:["follow","listen to","submit","to accompany","subsequently","then"],kr:["맡길","수"]},hunum:[{kor:"수",def:"따를"}]},{id:4194,hanja:"吃",strokes:"6",def:{en:["eat","drink","suffer","endure","bear"],kr:["말더듬을","흘"]},hunum:[{kor:"흘",def:"말더듬을"}]},{id:4195,hanja:"豐",strokes:"18",def:{en:["abundant","lush","bountiful","plenty"],kr:["괘","이름","풍"]},hunum:[{kor:"풍",def:"풍년"}]},{id:4196,hanja:"梗",strokes:"11",def:{en:["stem of flower","branch of plant"],kr:["대개","경"]},hunum:[{kor:"경",def:"대개"}]},{id:4197,hanja:"隩",strokes:"16",def:{en:["profound","subtle","warm"],kr:["물가","언덕","오"]},hunum:[{kor:"오",def:"감출"}]},{id:4198,hanja:"紫",strokes:"11",def:{en:["purple","violet","amethyst","surname"],kr:["자주빛","자"]},hunum:[{kor:"자",def:"자주빛"}]},{id:4199,hanja:"伙",strokes:"6",def:{en:["companion","colleague","utensils"],kr:["세간","화"]},hunum:[{kor:"화",def:"세간"}]},{id:4200,hanja:"險",strokes:"16",def:{en:["narrow pass","strategic point","dangerous"],kr:["험할","험"]},hunum:[{kor:"험",def:"험할"}]},{id:4201,hanja:"舖",strokes:"15",def:{en:["store","shop"],kr:["鋪의","俗字"]},hunum:[{kor:"포",def:"펄"}]},{id:4202,hanja:"紬",strokes:"11",def:{en:["kind of thin silk"],kr:["명주","주"]},hunum:[{kor:"주",def:"명주"}]},{id:4203,hanja:"各",strokes:"6",def:{en:["each","individually","every","all"],kr:["각각","각"]},hunum:[{kor:"각",def:"각각"}]},{id:4204,hanja:"吅",strokes:"6",def:{en:[],kr:["부르짖을","현"]},hunum:[{kor:"현",def:"부르짖을"}]},{id:4205,hanja:"幀",strokes:"12",def:{en:["picture","scroll","one of pair of"]},hunum:[{kor:"정",def:"그림족자"}]},{id:4206,hanja:"女",strokes:"3",def:{en:["woman","girl","feminine","rad"],kr:["계집","녀"]},hunum:[{kor:"녀",def:"계집"}]},{id:4207,hanja:"会",strokes:"6",def:{en:["assemble","meet together","meeting"],kr:["會의","俗字"]},hunum:[{kor:"회",def:"모일"}]},{id:4208,hanja:"奴",strokes:"5",def:{en:["slave","servant"],kr:["종","노"]},hunum:[{kor:"노",def:"종"}]},{id:4209,hanja:"吆",strokes:"6",def:{en:["bawl","yell","shout","cry out"],kr:["애통하는","소리","요"]},hunum:[{kor:"요",def:"애통하는 소리"}]},{id:4210,hanja:"舘",strokes:"16",def:{en:["a mansion","a building"],kr:["객사","관"]},hunum:[{kor:"관",def:"객사"}]},{id:4211,hanja:"伜",strokes:"6",def:{en:["deputy","vice"]},hunum:[{kor:"쉬",def:"버금"},{kor:"졸",def:"백 사람"}]},{id:4212,hanja:"紮",strokes:"11",def:{en:["tie","fasten","bind"],kr:["감을","찰"]},hunum:[{kor:"찰",def:"감을"}]},{id:4213,hanja:"梛",strokes:"11",def:{en:[],kr:["나무","이름","나"]},hunum:[{kor:"나",def:"나무 이름"}]},{id:4214,hanja:"狴",strokes:"10",def:{en:["a kind of tapir","a fierce beast depicted on the door of prisons"],kr:["들개","폐"]},hunum:[{kor:"폐",def:"짐승이름"}]},{id:4215,hanja:"伝",strokes:"6",def:{en:["summon","propagate","transmit"],kr:["傳의","略字"]},hunum:[{kor:"전",def:"전할"}]},{id:4216,hanja:"奶",strokes:"5",def:{en:["milk","woman","nurse"],kr:["젖","내"]},hunum:[{kor:"내",def:"젖"}]},{id:4217,hanja:"合",strokes:"6",def:{en:["combine","unite","join","gather"],kr:["대답할","합"]},hunum:[{kor:"갑",def:"부를"},{kor:"합",def:"합할"}]},{id:4218,hanja:"幃",strokes:"12",def:{en:["curtain that forms wall"],kr:["홑휘장","위"]},hunum:[{kor:"위",def:"향낭"}]},{id:4219,hanja:"豕",strokes:"7",def:{en:["a pig","boar","KangXi radical"],kr:["돝","시"]},hunum:[{kor:"시",def:"돼지"}]},{id:4220,hanja:"累",strokes:"11",def:{en:["tired","implicate","involve","bother"],kr:["묶을","루"]},hunum:[{kor:"루",def:"묶을"}]},{id:4221,hanja:"豖",strokes:"8",def:{en:["a shackled pig"],kr:["발","얽은","돼지걸음","축"]},hunum:[{kor:"축",def:"발 얽은 돼지걸음"}]},{id:4222,hanja:"舛",strokes:"6",def:{en:["oppose","deviate","be contrary to"],kr:["어그러질","천"]},hunum:[{kor:"천",def:"어그러질"}]},{id:4223,hanja:"吉",strokes:"6",def:{en:["lucky","propitious","good"],kr:["길할","길"]},hunum:[{kor:"길",def:"길할"}]},{id:4224,hanja:"幄",strokes:"12",def:{en:["tent","mosquito net"],kr:["장막","악"]},hunum:[{kor:"악",def:"장막"}]},{id:4225,hanja:"細",strokes:"11",def:{en:["fine","tiny","slender","thin"],kr:["좀놈","세"]},hunum:[{kor:"세",def:"가늘"}]},{id:4226,hanja:"幅",strokes:"12",def:{en:["piece","strip","breadth of","hem"],kr:["겉치레할","폭"]},hunum:[{kor:"폭",def:"폭"}]},{id:4227,hanja:"條",strokes:"11",def:{en:["clause","condition","string","stripe"],kr:["가지","조"]},hunum:[{kor:"조",def:"가지"}]},{id:4228,hanja:"吊",strokes:"6",def:{en:["condole","mourn","pity","hang"],kr:["弔의","俗字"]},hunum:[{kor:"적",def:"이를"}]},{id:4229,hanja:"矃",strokes:"19",def:{en:[]},hunum:[{kor:"녕",def:"볼"},{kor:"영",def:"볼"}]},{id:4230,hanja:"奸",strokes:"6",def:{en:["crafty","villainous","false"],kr:["간악할","간"]},hunum:[{kor:"간",def:"범할"}]},{id:4231,hanja:"隰",strokes:"17",def:{en:["low","damp land","marsh","swamp"],kr:["진펄","습"]},hunum:[{kor:"습",def:"진펄"}]},{id:4232,hanja:"舜",strokes:"12",def:{en:["legendary ruler"],kr:["무궁화","순"]},hunum:[{kor:"순",def:"순임금"}]},{id:4233,hanja:"紱",strokes:"11",def:{en:["ribbon or cord used attach ornaments"],kr:["인끈","불"]},hunum:[{kor:"불",def:"인끈"}]},{id:4234,hanja:"狷",strokes:"10",def:{en:["rash","impetuous","impulsive"],kr:["편협할","견"]},hunum:[{kor:"견",def:"고집스러울"}]},{id:4235,hanja:"紲",strokes:"11",def:{en:["bridle","halter"],kr:["고삐","설"]},hunum:[{kor:"설",def:"고삐"}]},{id:4236,hanja:"梟",strokes:"11",def:{en:["owl thus","something evil"],kr:["올배미","효"]},hunum:[{kor:"효",def:"올배미"}]},{id:4237,hanja:"吋",strokes:"6",def:{en:["inch"],kr:["인치","촌"]},hunum:[{kor:"촌",def:"인치(inch)"}]},{id:4238,hanja:"幇",strokes:"12",def:{en:["help","assist","defend","shoe upper"],kr:["幫과","同字"]},hunum:[{kor:"방",def:"도울"}]},{id:4239,hanja:"隱",strokes:"17",def:{en:["hide","conceal","hidden","secret"],kr:["쌓을","은"]},hunum:[{kor:"은",def:"숨을"}]},{id:4240,hanja:"舞",strokes:"14",def:{en:["dance","posture","prance","brandish"],kr:["춤출","무"]},hunum:[{kor:"무",def:"춤출"}]},{id:4241,hanja:"狸",strokes:"10",def:{en:["fox"],kr:["貍와","同字"]},hunum:[{kor:"리",def:"삵"}]},{id:4242,hanja:"紳",strokes:"11",def:{en:["girdle","tie","bind","gentry"],kr:["벼슬아치","신"]},hunum:[{kor:"신",def:"큰 띠"}]},{id:4243,hanja:"狹",strokes:"10",def:{en:["narrow","limited","narrow","to pinch"],kr:["좁을","협"]},hunum:[{kor:"협",def:"좁을"}]},{id:4244,hanja:"鮀",strokes:"16",def:{en:["snakefish"],kr:["모래무지","타"]},hunum:[{kor:"타",def:"모래무지"}]},{id:4245,hanja:"舟",strokes:"6",def:{en:["boat","ship","KangXi radical"],kr:["배","주"]},hunum:[{kor:"주",def:"배"}]},{id:4246,hanja:"梠",strokes:"11",def:{en:["a small beam supporting the rafters at the eaves"],kr:["평고대","려"]},hunum:[{kor:"려",def:"평고대"}]},{id:4247,hanja:"同",strokes:"6",def:{en:["same","similar","together with"],kr:["같을","동"]},hunum:[{kor:"동",def:"같을"}]},{id:4248,hanja:"豚",strokes:"11",def:{en:["small pig","suckling pig","suffle"],kr:["돼지","돈"]},hunum:[{kor:"돈",def:"돼지"}]},{id:4249,hanja:"隳",strokes:"18",def:{en:["to destroy","to overthrow"],kr:["무너뜨릴","휴"]},hunum:[{kor:"휴",def:"무너뜨릴"}]},{id:4250,hanja:"伣",strokes:"6",def:{en:["like"],kr:["俔과","同字"]},hunum:[{kor:"현",def:"염탐할"}]},{id:4251,hanja:"紵",strokes:"11",def:{en:["ramie","sack cloth"],kr:["모시","저"]},hunum:[{kor:"저",def:"모시"}]},{id:4252,hanja:"梡",strokes:"11",def:{en:["tray for carrying sacrificial meat"],kr:["토막나무","완"]},hunum:[{kor:"완",def:"네 발 도마"}]},{id:4253,hanja:"名",strokes:"6",def:{en:["name","rank","title","position"],kr:["이름","명"]},hunum:[{kor:"명",def:"이름"}]},{id:4254,hanja:"狺",strokes:"10",def:{en:["the snarling of dogs"],kr:["뭇","개","짖는","소리","은"]},hunum:[{kor:"은",def:"뭇 개 짖는 소리"}]},{id:4255,hanja:"矇",strokes:"19",def:{en:["stupid","ignorant","blind"],kr:["소경","몽"]},hunum:[{kor:"몽",def:"소경"}]},{id:4256,hanja:"后",strokes:"6",def:{en:["queen","empress","sovereign"],kr:["임금","후"]},hunum:[{kor:"후",def:"임금"}]},{id:4257,hanja:"好",strokes:"6",def:{en:["good","excellent","fine","well"],kr:["옳을","호"]},hunum:[{kor:"호",def:"좋을"}]},{id:4258,hanja:"梢",strokes:"11",def:{en:["pointed tip of something long like a branch","rudder"],kr:["나무","끝","초"]},hunum:[{kor:"초",def:"나무 끝"}]},{id:4259,hanja:"隴",strokes:"19",def:{en:["mountain located between Shanxi"],kr:["고개","이름","롱"]},hunum:[{kor:"롱",def:"고개 이름"}]},{id:4260,hanja:"狻",strokes:"10",def:{en:["a fabulous beast"],kr:["사자","산"]},hunum:[{kor:"산",def:"사자"}]},{id:4261,hanja:"鮃",strokes:"16",def:{en:["a flatfish","flounder"],kr:["가자미","평"]},hunum:[{kor:"평",def:"가자미"}]},{id:4262,hanja:"梣",strokes:"11",def:{en:[],kr:["물푸레나무","심"]},hunum:[{kor:"심",def:"물푸레나무"}]},{id:4263,hanja:"吏",strokes:"6",def:{en:["government official","magistrate"],kr:["벼슬아치","리"]},hunum:[{kor:"리",def:"벼슬아치"}]},{id:4264,hanja:"舡",strokes:"9",def:{en:["boat","ship"],kr:["오나라","배","강"]},hunum:[{kor:"강",def:"오나라 배"}]},{id:4265,hanja:"狼",strokes:"10",def:{en:["wolf"],kr:["이리","랑"]},hunum:[{kor:"랑",def:"이리"}]},{id:4266,hanja:"矉",strokes:"19",def:{en:["an angry glare","to open the eyes with anger"],kr:["찡그릴","빈"]},hunum:[{kor:"빈",def:"찡그릴"}]},{id:4267,hanja:"幌",strokes:"13",def:{en:["curtain","cloth screen"],kr:["휘장","황"]},hunum:[{kor:"황",def:"휘장"}]},{id:4268,hanja:"狽",strokes:"10",def:{en:["a legendary animal with short forelegs which rode a wolf"],kr:["이리","패"]},hunum:[{kor:"패",def:"이리"}]},{id:4269,hanja:"吐",strokes:"6",def:{en:["vomit","spew out","cough up"],kr:["펼","토"]},hunum:[{kor:"토",def:"토할"}]},{id:4270,hanja:"隶",strokes:"8",def:{en:["subservient","servant","rad"],kr:["밑","이"]},hunum:[{kor:"이",def:"밑"}]},{id:4271,hanja:"酈",strokes:"22",def:{en:["place in today"],kr:["땅","이름","력"]},hunum:[{kor:"력",def:"땅 이름"}]},{id:4272,hanja:"向",strokes:"6",def:{en:["toward","direction","trend"],kr:["기울어질","향"]},hunum:[{kor:"상",def:"성"},{kor:"향",def:"향할"}]},{id:4273,hanja:"隷",strokes:"16",def:{en:["be subservient to","servant"],kr:["隸와","同字"]},hunum:[{kor:"례",def:"종"}]},{id:4274,hanja:"酉",strokes:"7",def:{en:["tenth terrestrial branch","a wine vessel"],kr:["나아갈","유"]},hunum:[{kor:"유",def:"별"}]},{id:4275,hanja:"紹",strokes:"11",def:{en:["continue","carry on","hand down","to join"],kr:["소개할","소"]},hunum:[{kor:"소",def:"이을"}]},{id:4276,hanja:"吒",strokes:"6",def:{en:["shout","roar","bellow","scold"],kr:["조롱할","탁"]},hunum:[{kor:"타",def:"꾸짖을"},{kor:"탁",def:"조롱할"}]},{id:4277,hanja:"酊",strokes:"9",def:{en:["drunk","intoxicated"],kr:["비틀거릴","정"]},hunum:[{kor:"정",def:"비틀거릴"}]},{id:4278,hanja:"幎",strokes:"13",def:{en:["cover","cover with cloth"],kr:["덮을","멱"]},hunum:[{kor:"멱",def:"덮을"}]},{id:4279,hanja:"隸",strokes:"17",def:{en:["be subservient to","servant"],kr:["붙을","례"]},hunum:[{kor:"례",def:"붙을"}]},{id:4280,hanja:"紺",strokes:"11",def:{en:["dark blue or reddish color"],kr:["보랏빛","감"]},hunum:[{kor:"감",def:"아청"}]},{id:4281,hanja:"矍",strokes:"20",def:{en:["look about in fright or alarm"],kr:["두리번거릴","확"]},hunum:[{kor:"확",def:"두리번거릴"}]},{id:4282,hanja:"隹",strokes:"8",def:{en:["bird","KangXi radical"],kr:["새","추"]},hunum:[{kor:"추",def:"새"}]},{id:4283,hanja:"酋",strokes:"9",def:{en:["chief of tribe","chieftain"],kr:["끝날","추"]},hunum:[{kor:"추",def:"괴수"}]},{id:4284,hanja:"梧",strokes:"11",def:{en:["Sterculia platanifolia"],kr:["버틸","오"]},hunum:[{kor:"오",def:"머귀나무"}]},{id:4285,hanja:"伩",strokes:"6",def:{en:["trust","believe","letter"],kr:["信과","同字"]},hunum:[{kor:"신",def:"믿을"}]},{id:4286,hanja:"象",strokes:"12",def:{en:["elephant","ivory","figure","image"],kr:["코끼리","상"]},hunum:[{kor:"상",def:"코끼리"}]},{id:4287,hanja:"豢",strokes:"13",def:{en:["domestic animals","feed","raise"],kr:["기를","환"]},hunum:[{kor:"환",def:"기를"}]},{id:4288,hanja:"梨",strokes:"11",def:{en:["pear","opera","cut","slash"],kr:["태나무","리"]},hunum:[{kor:"리",def:"태나무"}]},{id:4289,hanja:"酌",strokes:"10",def:{en:["serve wine","feast","deliberate"],kr:["따를","작"]},hunum:[{kor:"작",def:"따를"}]},{id:4290,hanja:"隻",strokes:"10",def:{en:["single","one of pair","lone"],kr:["새","한","마리","척"]},hunum:[{kor:"척",def:"새 한 마리"}]},{id:4291,hanja:"吕",strokes:"6",def:{en:["surname","a musical note"]},hunum:[{kor:"려",def:"성씨"}]},{id:4292,hanja:"配",strokes:"10",def:{en:["match","pair","equal","blend"],kr:["아내","배"]},hunum:[{kor:"배",def:"아내"}]},{id:4293,hanja:"豣",strokes:"13",def:{en:["pig of"],kr:["노루","연"]},hunum:[{kor:"견",def:"큰 돼지"},{kor:"연",def:"노루"}]},{id:4294,hanja:"隼",strokes:"10",def:{en:["aquiline","a falcon"],kr:["새매","준"]},hunum:[{kor:"준",def:"새매"}]},{id:4295,hanja:"酎",strokes:"10",def:{en:["double","vintage wine"],kr:["세","번","빚은","술","주"]},hunum:[{kor:"주",def:"세 번 빚은 술"}]},{id:4296,hanja:"航",strokes:"10",def:{en:["sail","navigate","ship","boat"],kr:["배질할","항"]},hunum:[{kor:"항",def:"쌍배"}]},{id:4297,hanja:"吘",strokes:"7",def:{en:[],kr:["부를","우"]},hunum:[{kor:"우",def:"부를"}]},{id:4298,hanja:"梭",strokes:"11",def:{en:["weaver","go to and fro"],kr:["북","사"]},hunum:[{kor:"사",def:"북"}]},{id:4299,hanja:"幔",strokes:"14",def:{en:["curtain","screen","tent"],kr:["막","만"]},hunum:[{kor:"만",def:"막"}]},{id:4300,hanja:"伯",strokes:"7",def:{en:["older brother","father","senior male","feudal rank"],kr:["으뜸","패"]},hunum:[{kor:"백",def:"맏"},{kor:"패",def:"우두머리"}]},{id:4301,hanja:"舫",strokes:"10",def:{en:["fancy boat","yacht"],kr:["배","방"]},hunum:[{kor:"방",def:"배"}]},{id:4302,hanja:"豨",strokes:"14",def:{en:["pig","hog"],kr:["멧돼지","희"]},hunum:[{kor:"희",def:"멧돼지"}]},{id:4303,hanja:"酒",strokes:"10",def:{en:["wine","spirits","liquor","alcoholic beverage"],kr:["술","주"]},hunum:[{kor:"주",def:"술"}]},{id:4304,hanja:"吚",strokes:"7",def:{en:["used to represent sound"],kr:["신음할","의"]},hunum:[{kor:"의",def:"탄식할"}]},{id:4305,hanja:"幕",strokes:"14",def:{en:["curtain","screen","tent"],kr:["막","막"]},hunum:[{kor:"막",def:"막"}]},{id:4306,hanja:"估",strokes:"7",def:{en:["merchant","estimate","guess","presume"],kr:["값","고"]},hunum:[{kor:"고",def:"값"}]},{id:4307,hanja:"般",strokes:"10",def:{en:["sort","manner","kind","category"],kr:["옮길","반"]},hunum:[{kor:"반",def:"옮길"}]},{id:4308,hanja:"梯",strokes:"11",def:{en:["ladder","steps","stairs","lean"],kr:["사다리","제"]},hunum:[{kor:"제",def:"사다리"}]},{id:4309,hanja:"鮎",strokes:"16",def:{en:["sheatfish","parasilurus asotus"],kr:["메기","점"]},hunum:[{kor:"점",def:"메기"}]},{id:4310,hanja:"君",strokes:"7",def:{en:["sovereign","monarch","ruler","chief","prince"],kr:["임금","군"]},hunum:[{kor:"군",def:"임금"}]},{id:4311,hanja:"械",strokes:"11",def:{en:["weapons","implements","instruments"],kr:["형틀","계"]},hunum:[{kor:"계",def:"형틀"}]},{id:4312,hanja:"捂",strokes:"10",def:{en:["resist"],kr:["거스릴","오"]},hunum:[{kor:"오",def:"부닥칠"}]},{id:4313,hanja:"豪",strokes:"14",def:{en:["brave","heroic","chivalrous"],kr:["귀인","호"]},hunum:[{kor:"호",def:"호걸"}]},{id:4314,hanja:"鮐",strokes:"16",def:{en:["blowfish","globefish","tetraodon"],kr:["늙은이","등에","복","무늬","날","태"]},hunum:[{kor:"태",def:"복"}]},{id:4315,hanja:"矗",strokes:"24",def:{en:["straight","upright","erect","lofty"],kr:["우뚝","솟을","촉"]},hunum:[{kor:"촉",def:"곧을"}]},{id:4316,hanja:"幘",strokes:"14",def:{en:["turban","conical cap"],kr:["건","책"]},hunum:[{kor:"책",def:"건"}]},{id:4317,hanja:"梱",strokes:"11",def:{en:["doorsill","doorjamb"],kr:["문지방","곤"]},hunum:[{kor:"곤",def:"문지방"}]},{id:4318,hanja:"捃",strokes:"10",def:{en:[],kr:["주울","군"]},hunum:[{kor:"군",def:"주울"}]},{id:4319,hanja:"吝",strokes:"7",def:{en:["stingy","miserly","parsimonious"],kr:["아낄","린"]},hunum:[{kor:"린",def:"아낄"}]},{id:4320,hanja:"鮑",strokes:"16",def:{en:["abalone","dried fish","surname"],kr:["성씨","포"]},hunum:[{kor:"포",def:"절인 생선"}]},{id:4321,hanja:"酖",strokes:"11",def:{en:["wine with bird poison added"],kr:["술","즐길","탐"]},hunum:[{kor:"탐",def:"술 즐길"}]},{id:4322,hanja:"吞",strokes:"7",def:{en:["swallow","absorb","annex","engulf"],kr:["呑과","同字"]},hunum:[{kor:"탄",def:"삼킬"}]},{id:4323,hanja:"捄",strokes:"10",def:{en:["long and curved"],kr:["흙파올릴","구"]},hunum:[{kor:"구",def:"흙파올릴"}]},{id:4324,hanja:"伴",strokes:"7",def:{en:["companion","comrade","partner","accompany"],kr:["짝","반"]},hunum:[{kor:"반",def:"짝"}]},{id:4325,hanja:"豫",strokes:"16",def:{en:["beforehand"],kr:["미리","예"]},hunum:[{kor:"예",def:"기쁠"}]},{id:4326,hanja:"酗",strokes:"11",def:{en:["drunk","to become violent under the influence of alcohol"],kr:["주정할","후"]},hunum:[{kor:"후",def:"주정할"}]},{id:4327,hanja:"豬",strokes:"16",def:{en:["pig","hog"],kr:["못이름","저"]},hunum:[{kor:"저",def:"돼지"}]},{id:4328,hanja:"吟",strokes:"7",def:{en:["sing","hum","recite","type of poetry"],kr:["울","음"]},hunum:[{kor:"음",def:"읊을"}]},{id:4329,hanja:"幚",strokes:"15",def:{en:["help","assist","defend","shoe upper"]},hunum:[{kor:"방",def:"도울"}]},{id:4330,hanja:"鮒",strokes:"16",def:{en:["carp","carassicus auratus"],kr:["붕어","부"]},hunum:[{kor:"부",def:"붕어"}]},{id:4331,hanja:"梳",strokes:"11",def:{en:["comb","brush"],kr:["얼레빗","소"]},hunum:[{kor:"소",def:"얼레빗"}]},{id:4332,hanja:"吠",strokes:"7",def:{en:["bark"],kr:["땅이름","폐"]},hunum:[{kor:"폐",def:"짖을"}]},{id:4333,hanja:"捆",strokes:"10",def:{en:["tie up","bind","truss up","bundle"],kr:["두드릴","곤"]},hunum:[{kor:"곤",def:"두드릴"}]},{id:4334,hanja:"伶",strokes:"7",def:{en:["lonely","solitary","actor"],kr:["광대","령"]},hunum:[{kor:"령",def:"영리할"}]},{id:4335,hanja:"鮓",strokes:"16",def:{en:["minced and salted fish","to preserve"],kr:["젓","자"]},hunum:[{kor:"자",def:"젓"}]},{id:4336,hanja:"矙",strokes:"25",def:{en:["view"]},hunum:[{kor:"검",def:"엿볼"}]},{id:4337,hanja:"吡",strokes:"7",def:{en:["blame"],kr:["새소리","필"]},hunum:[{kor:"필",def:"새소리"}]},{id:4338,hanja:"舳",strokes:"11",def:{en:["stern of ship"],kr:["배","꼬리","축"]},hunum:[{kor:"축",def:"고물"}]},{id:4339,hanja:"蜀",strokes:"13",def:{en:["name of an ancient state"],kr:["큰","닭","촉"]},hunum:[{kor:"촉",def:"촉규화벌레"}]},{id:4340,hanja:"矚",strokes:"26",def:{en:["watch carefully","stare at","focus on"],kr:["볼","촉"]},hunum:[{kor:"촉",def:"볼"}]},{id:4341,hanja:"涂",strokes:"10",def:{en:["surname","name of certain rivers"],kr:["길","도"]},hunum:[{kor:"도",def:"길"}]},{id:4342,hanja:"梵",strokes:"11",def:{en:["Buddhist","Sanskrit"],kr:["범어","범"]},hunum:[{kor:"범",def:"범어"}]},{id:4343,hanja:"吢",strokes:"7",def:{en:["vomiting of a dog"],kr:["개가","토할","심"]},hunum:[{kor:"심",def:"개가 토할"}]},{id:4344,hanja:"矛",strokes:"5",def:{en:["spear","lance","KangXi radical"],kr:["창","모"]},hunum:[{kor:"모",def:"창"}]},{id:4345,hanja:"梶",strokes:"11",def:{en:["oar","shaft"],kr:["나무","끝","미"]},hunum:[{kor:"미",def:"나무 끝"}]},{id:4346,hanja:"舵",strokes:"11",def:{en:["rudder","helm"],kr:["키","타"]},hunum:[{kor:"타",def:"키"}]},{id:4347,hanja:"幞",strokes:"15",def:{en:["turban"],kr:["건","복"]},hunum:[{kor:"복",def:"건"}]},{id:4348,hanja:"伸",strokes:"7",def:{en:["extend","stretch out","open up","trust"],kr:["기지개","신"]},hunum:[{kor:"신",def:"펼"}]},{id:4349,hanja:"蜂",strokes:"13",def:{en:["bee","wasp","hornet"],kr:["벌","봉"]},hunum:[{kor:"봉",def:"벌"}]},{id:4350,hanja:"矜",strokes:"9",def:{en:["pity","feel sorry for","show sympat"],kr:["불쌍히","여길","긍"]},hunum:[{kor:"근",def:"창자루"},{kor:"긍",def:"불쌍히 여길"}]},{id:4351,hanja:"幟",strokes:"15",def:{en:["flag","pennant","sign","fasten"],kr:["깃대","치"]},hunum:[{kor:"치",def:"깃대"}]},{id:4352,hanja:"捉",strokes:"10",def:{en:["grasp","clutch","catch","seize"],kr:["잡을","착"]},hunum:[{kor:"착",def:"잡을"}]},{id:4353,hanja:"涅",strokes:"10",def:{en:["blacken","black mud","slime","tatto"],kr:["죽을","녈"]},hunum:[{kor:"날",def:"앙금 흙"},{kor:"녈",def:"죽을"}]},{id:4354,hanja:"鮗",strokes:"16",def:{en:[],kr:["전어","동"]},hunum:[{kor:"동",def:"전어"}]},{id:4355,hanja:"舶",strokes:"11",def:{en:["large","ocean"],kr:["배","박"]},hunum:[{kor:"박",def:"배"}]},{id:4356,hanja:"蜃",strokes:"13",def:{en:["marine monster which can change its shape","water spouts","clams"],kr:["술잔","신"]},hunum:[{kor:"신",def:"큰 조개"}]},{id:4357,hanja:"舷",strokes:"11",def:{en:["the sides of a boat","bulwarks","a gunwale"],kr:["뱃전","현"]},hunum:[{kor:"현",def:"뱃전"}]},{id:4358,hanja:"伺",strokes:"7",def:{en:["serve","wait upon","attend","examine"],kr:["엿볼","사"]},hunum:[{kor:"사",def:"엿볼"}]},{id:4359,hanja:"矞",strokes:"12",def:{en:["bore with awl","bright","charming"],kr:["귀신이름","율"]},hunum:[{kor:"율",def:"송곳질할"}]},{id:4360,hanja:"伻",strokes:"7",def:{en:["messenger","emissary","send emissary"],kr:["좇을","팽"]},hunum:[{kor:"팽",def:"부릴"}]},{id:4361,hanja:"涇",strokes:"10",def:{en:["name of a river"],kr:["통할","경"]},hunum:[{kor:"경",def:"통할"}]},{id:4362,hanja:"否",strokes:"7",def:{en:["not","no","negative","final particle"],kr:["악할","비"]},hunum:[{kor:"부",def:"아닐"},{kor:"비",def:"막힐"}]},{id:4363,hanja:"幡",strokes:"15",def:{en:["pennant","banner","streamer","flag"],kr:["기","번"]},hunum:[{kor:"번",def:"기"}]},{id:4364,hanja:"舸",strokes:"11",def:{en:["large boat","barge"],kr:["큰","배","가"]},hunum:[{kor:"가",def:"큰 배"}]},{id:4365,hanja:"豳",strokes:"17",def:{en:["a Zhou"],kr:["나라","이름","빈"]},hunum:[{kor:"빈",def:"나라 이름"}]},{id:4366,hanja:"蜆",strokes:"13",def:{en:["a variety of bivalves"],kr:["호수이름","현"]},hunum:[{kor:"현",def:"가막조개"}]},{id:4367,hanja:"捌",strokes:"10",def:{en:["break open","split open","an accounting version of the numeral eight"],kr:["칠","팔"]},hunum:[{kor:"팔",def:"깨뜨릴"}]},{id:4368,hanja:"吧",strokes:"7",def:{en:["emphatic final particle"],kr:["아이","다툴","파"]},hunum:[{kor:"파",def:"아이 다툴"}]},{id:4369,hanja:"消",strokes:"10",def:{en:["vanish","die out","melt away"],kr:["해어질","소"]},hunum:[{kor:"소",def:"다할"}]},{id:4370,hanja:"幢",strokes:"15",def:{en:["carriage curtain","sun screen"],kr:["기","당"]},hunum:[{kor:"당",def:"기"}]},{id:4371,hanja:"似",strokes:"7",def:{en:["resemble","similar to","as if","seem"],kr:["같을","사"]},hunum:[{kor:"사",def:"같을"}]},{id:4372,hanja:"鮚",strokes:"17",def:{en:["clam","oyster"],kr:["대합","길"]},hunum:[{kor:"길",def:"대합"}]},{id:4373,hanja:"船",strokes:"11",def:{en:["ship","boat","vessel"],kr:["배","선"]},hunum:[{kor:"선",def:"배"}]},{id:4374,hanja:"矡",strokes:"25",def:{en:[],kr:["호미","확"]},hunum:[{kor:"확",def:"호미"}]},{id:4375,hanja:"捍",strokes:"10",def:{en:["ward off","guard against","defend"],kr:["막을","한"]},hunum:[{kor:"한",def:"막을"}]},{id:4376,hanja:"幣",strokes:"15",def:{en:["currency","coins","legal tender"],kr:["돈","폐"]},hunum:[{kor:"폐",def:"폐백"}]},{id:4377,hanja:"涉",strokes:"10",def:{en:["ford stream","wade across"],kr:["돌아다닐","섭"]},hunum:[{kor:"섭",def:"물 건널"}]},{id:4378,hanja:"吨",strokes:"7",def:{en:["metric ton","gibberish"],kr:["말","분명치","못할","둔"]},hunum:[{kor:"둔",def:"말 분명치 못할"}]},{id:4379,hanja:"伽",strokes:"7",def:{en:["transcription of sanskrit","etc","attending","entertainer","tample","in Chinese this character is not used alone"],kr:["절","가"]},hunum:[{kor:"가",def:"절"}]},{id:4380,hanja:"捎",strokes:"10",def:{en:["to select","to take","to carry"],kr:["버릴","소"]},hunum:[{kor:"소",def:"덜"}]},{id:4381,hanja:"吩",strokes:"7",def:{en:["order","command","instruct"],kr:["뿜을","분"]},hunum:[{kor:"분",def:"뿜을"}]},{id:4382,hanja:"伾",strokes:"7",def:{en:["mighty"],kr:["힘셀","비"]},hunum:[{kor:"비",def:"힘셀"}]},{id:4383,hanja:"蜈",strokes:"13",def:{en:["centipede"],kr:["지네","오"]},hunum:[{kor:"오",def:"지네"}]},{id:4384,hanja:"矢",strokes:"5",def:{en:["arrow","dart","vow","swear"],kr:["똥","시"]},hunum:[{kor:"시",def:"살"}]},{id:4385,hanja:"捏",strokes:"10",def:{en:["pick with fingers","knead","mold"],kr:["이길","날"]},hunum:[{kor:"날",def:"이길"}]},{id:4386,hanja:"吪",strokes:"7",def:{en:["move"],kr:["사투리","와"]},hunum:[{kor:"와",def:"움직일"}]},{id:4387,hanja:"鮝",strokes:"17",def:{en:["dried fish"],kr:["건어","상"]},hunum:[{kor:"상",def:"건어"}]},{id:4388,hanja:"蜉",strokes:"13",def:{en:["mayfly","kind of large insect"],kr:["하루살이","부"]},hunum:[{kor:"부",def:"하루살이"}]},{id:4389,hanja:"矣",strokes:"7",def:{en:["particle of completed action"],kr:["말","그칠","의"]},hunum:[{kor:"의",def:"말 그칠"}]},{id:4390,hanja:"豸",strokes:"7",def:{en:["radical","legless insects","a legendary beast"],kr:["해치양","치"]},hunum:[{kor:"치",def:"발 없는 벌레"}]},{id:4391,hanja:"捐",strokes:"10",def:{en:["contribute","give up","renounce"],kr:["병들어","죽을","연"]},hunum:[{kor:"연",def:"버릴"}]},{id:4392,hanja:"涌",strokes:"10",def:{en:["surge up","bubble up","gush forth"],kr:["날칠","용"]},hunum:[{kor:"용",def:"물 넘칠"}]},{id:4393,hanja:"酢",strokes:"12",def:{en:["toast one","to express juice by pressing"],kr:["초","초"]},hunum:[{kor:"작",def:"초"},{kor:"초",def:"초"}]},{id:4394,hanja:"鮞",strokes:"17",def:{en:["roe"],kr:["곤이","알","이"]},hunum:[{kor:"이",def:"곤이 알"}]},{id:4395,hanja:"舽",strokes:"12",def:{en:[],kr:["배","방"]},hunum:[{kor:"방",def:"배"}]},{id:4396,hanja:"蜊",strokes:"13",def:{en:["clam"],kr:["참조개","리"]},hunum:[{kor:"리",def:"참조개"}]},{id:4397,hanja:"涍",strokes:"10",def:{en:[],kr:["성","효"]},hunum:[{kor:"효",def:"성"}]},{id:4398,hanja:"含",strokes:"7",def:{en:["hold in mouth","cherish","contain"],kr:["머금을","함"]},hunum:[{kor:"함",def:"머금을"}]},{id:4399,hanja:"豹",strokes:"10",def:{en:["leopard","panther","surname"],kr:["아롱범","표"]},hunum:[{kor:"표",def:"표범"}]},{id:4400,hanja:"知",strokes:"8",def:{en:["know","perceive","comprehend"],kr:["알","지"]},hunum:[{kor:"지",def:"알"}]},{id:4401,hanja:"酣",strokes:"12",def:{en:["enjoy intoxicants"]},hunum:[{kor:"검",def:"흥겨울"}]},{id:4402,hanja:"鮟",strokes:"17",def:{en:["anglerfish"],kr:["아귀","안"]},hunum:[{kor:"안",def:"아귀"}]},{id:4403,hanja:"蜋",strokes:"13",def:{en:["mantis","dung beetle","insect"],kr:["사마귀","랑"]},hunum:[{kor:"랑",def:"사마귀"}]},{id:4404,hanja:"幨",strokes:"16",def:{en:["curtain"],kr:["휘장","첨"]},hunum:[{kor:"첨",def:"휘장"}]},{id:4405,hanja:"涎",strokes:"10",def:{en:["saliva"],kr:["물","졸졸","흐를","연"]},hunum:[{kor:"연",def:"침"}]},{id:4406,hanja:"听",strokes:"7",def:{en:["hear","understand","obey","comply"],kr:["입이","큰","모양","은"]},hunum:[{kor:"은",def:"벙긋거릴"}]},{id:4407,hanja:"酤",strokes:"12",def:{en:["to deal in spirits"],kr:["계명주","고"]},hunum:[{kor:"고",def:"계명주"}]},{id:4408,hanja:"豺",strokes:"10",def:{en:["wolf","cruel","wicked","mean"],kr:["늑대","시"]},hunum:[{kor:"시",def:"승냥이"}]},{id:4409,hanja:"吭",strokes:"7",def:{en:["throat"],kr:["새","목구멍","항"]},hunum:[{kor:"항",def:"목구멍"}]},{id:4410,hanja:"酥",strokes:"12",def:{en:["butter","flaky","crispy","light","fluffy"],kr:["타락죽","소"]},hunum:[{kor:"소",def:"타락죽"}]},{id:4411,hanja:"矧",strokes:"9",def:{en:["much more","still more","the gums"],kr:["잇속","드러날","신"]},hunum:[{kor:"신",def:"하물며"}]},{id:4412,hanja:"吮",strokes:"7",def:{en:["suck with mouth","sip","lick"],kr:["빨","전"]},hunum:[{kor:"전",def:"빨"}]},{id:4413,hanja:"幪",strokes:"17",def:{en:["cover","shelter","screen","protect"],kr:["덮을","몽"]},hunum:[{kor:"몽",def:"덮을"}]},{id:4414,hanja:"酦",strokes:"13",def:{en:["fermentation","brewing"],kr:["술기운","발"]},hunum:[{kor:"발",def:"술기운"}]},{id:4415,hanja:"捕",strokes:"10",def:{en:["arrest","catch","seize"],kr:["사로잡을","포"]},hunum:[{kor:"포",def:"사로잡을"}]},{id:4416,hanja:"启",strokes:"7",def:{en:["open","begin","commence","explain"],kr:["啓와","同字"]},hunum:[{kor:"계",def:"열"}]},{id:4417,hanja:"幫",strokes:"17",def:{en:["to help","assist","to defend","shoe upper"],kr:["도울","방"]},hunum:[{kor:"방",def:"도울"}]},{id:4418,hanja:"矩",strokes:"10",def:{en:["carpenter","ruler","rule"],kr:["곡척","구"]},hunum:[{kor:"구",def:"곡척"}]},{id:4419,hanja:"幬",strokes:"17",def:{en:["cover up","curtain"],kr:["휘장","주"]},hunum:[{kor:"주",def:"휘장"}]},{id:4420,hanja:"涑",strokes:"10",def:{en:["river in Shansi province"]},hunum:[{kor:"소",def:"행굴"},{kor:"속",def:"헹굴"}]},{id:4421,hanja:"捗",strokes:"10",def:{en:["make progress"],kr:["거둘","척"]},hunum:[{kor:"척",def:"거둘"}]},{id:4422,hanja:"吱",strokes:"7",def:{en:["chirping","squeaking","hissing"],kr:["가는","소리","지"]},hunum:[{kor:"지",def:"가는 소리"}]},{id:4423,hanja:"酩",strokes:"13",def:{en:["drunk","intoxicated","tipsy"],kr:["술","취할","명"]},hunum:[{kor:"명",def:"술 취할"}]},{id:4424,hanja:"蜑",strokes:"13",def:{en:["egg"],kr:["오랑캐","이름","단"]},hunum:[{kor:"단",def:"오랑캐 이름"}]},{id:4425,hanja:"涓",strokes:"10",def:{en:["brook","stream","select","pure"],kr:["조촐할","연"]},hunum:[{kor:"연",def:"물방울 떨어질"}]},{id:4426,hanja:"吲",strokes:"7",def:{en:["smile at","sneer at"],kr:["비웃을","신"]},hunum:[{kor:"신",def:"비웃을"}]},{id:4427,hanja:"酪",strokes:"13",def:{en:["cream","cheese","koumiss"],kr:["진한","유즙","락"]},hunum:[{kor:"락",def:"진한 유즙"}]},{id:4428,hanja:"涔",strokes:"10",def:{en:["river in Shaanxi","murky torrent"],kr:["괸물","잠"]},hunum:[{kor:"잠",def:"괸물"}]},{id:4429,hanja:"吳",strokes:"7",def:{en:["one of warring states","surname"]},hunum:[{kor:"오",def:"오나라"},{kor:"화",def:"큰소리칠"}]},{id:4430,hanja:"短",strokes:"12",def:{en:["short","brief","deficient","lacking"],kr:["짧을","단"]},hunum:[{kor:"단",def:"짧을"}]},{id:4431,hanja:"幰",strokes:"19",def:{en:["curtain at front of carriage"],kr:["휘장","헌"]},hunum:[{kor:"헌",def:"수레 안장"}]},{id:4432,hanja:"涕",strokes:"10",def:{en:["tear","snivel","nasal mucus"],kr:["눈물","체"]},hunum:[{kor:"체",def:"눈물"}]},{id:4433,hanja:"犀",strokes:"12",def:{en:["rhinoceros","sharp","well"],kr:["무소","서"]},hunum:[{kor:"서",def:"무소"}]},{id:4434,hanja:"吴",strokes:"7",def:{en:["name of warring state","surname"],kr:["吳와","同字"]},hunum:[{kor:"오",def:"성씨"}]},{id:4435,hanja:"酬",strokes:"13",def:{en:["toast","reward","recompense"],kr:["갚을","수"]},hunum:[{kor:"수",def:"술 권할"}]},{id:4436,hanja:"鮧",strokes:"17",def:{en:["the sheat fish"],kr:["복","제"]},hunum:[{kor:"이",def:"창자젓"},{kor:"제",def:"복"}]},{id:4437,hanja:"矮",strokes:"13",def:{en:["short","dwarf","low"],kr:["난장이","왜"]},hunum:[{kor:"왜",def:"난장이"}]},{id:4438,hanja:"鮨",strokes:"17",def:{en:["seasoned rice mixed with fish or vegetables"],kr:["젓갈","지"]},hunum:[{kor:"지",def:"젓갈"}]},{id:4439,hanja:"犁",strokes:"11",def:{en:["plow"],kr:["얼룩소","리"]},hunum:[{kor:"리",def:"얼룩소"}]},{id:4440,hanja:"涖",strokes:"10",def:{en:["river in Hebei province","creek"],kr:["다다를","리"]},hunum:[{kor:"리",def:"다다를"}]},{id:4441,hanja:"吵",strokes:"7",def:{en:["argue","dispute","disturb","annoy"],kr:["지저궐","초"]},hunum:[{kor:"묘",def:"지저귈"},{kor:"초",def:"지저궐"}]},{id:4442,hanja:"幱",strokes:"20",def:{en:["official dress"],kr:["내리다지","란"]},hunum:[{kor:"란",def:"내리다지"}]},{id:4443,hanja:"矯",strokes:"17",def:{en:["correct","rectify","straighten out"],kr:["바로잡을","교"]},hunum:[{kor:"교",def:"바로잡을"}]},{id:4444,hanja:"矰",strokes:"17",def:{en:["arrow with attached silk cord"],kr:["주살","증"]},hunum:[{kor:"증",def:"주살"}]},{id:4445,hanja:"吶",strokes:"7",def:{en:["raise voice","yell out loud","shout","stammer"],kr:["함성","지를","열"]},hunum:[{kor:"눌",def:"말 더듬을"},{kor:"열",def:"말 느리게 할"}]},{id:4446,hanja:"干",strokes:"3",def:{en:["oppose","offend","invade","dried"],kr:["생강","강"]},hunum:[{kor:"간",def:"방패"},{kor:"강",def:"생강"}]},{id:4447,hanja:"蜕",strokes:"13",def:{en:["molt"],kr:["蛻와","同字"]},hunum:[{kor:"세",def:"허물"},{kor:"태",def:"허물"}]},{id:4448,hanja:"蜖",strokes:"13",def:{en:["tapeworm"]},hunum:[{kor:"회",def:"회충"}]},{id:4449,hanja:"吷",strokes:"7",def:{en:[],kr:["작은소리","혈"]},hunum:[{kor:"혈",def:"마실"}]},{id:4450,hanja:"平",strokes:"5",def:{en:["flat","level","even","peaceful"],kr:["재관관","평"]},hunum:[{kor:"편",def:"편편할"},{kor:"평",def:"평탄할"}]},{id:4451,hanja:"鮪",strokes:"17",def:{en:["kind of sturgeon","tuna"],kr:["상어","유"]},hunum:[{kor:"유",def:"상어"}]},{id:4452,hanja:"吸",strokes:"7",def:{en:["inhale","suck in","absorb","attract"],kr:["숨","들이쉴","흡"]},hunum:[{kor:"흡",def:"숨 들이쉴"}]},{id:4453,hanja:"涙",strokes:"11",def:{en:["tears","weep"]},hunum:[{kor:"루",def:"눈물"}]},{id:4454,hanja:"鮫",strokes:"17",def:{en:["shark"],kr:["상어","교"]},hunum:[{kor:"교",def:"상어"}]},{id:4455,hanja:"吹",strokes:"7",def:{en:["blow","puff","brag","boast"],kr:["충동할","취"]},hunum:[{kor:"취",def:"불"}]},{id:4456,hanja:"蜘",strokes:"14",def:{en:["spider"],kr:["거미","지"]},hunum:[{kor:"지",def:"거미"}]},{id:4457,hanja:"酱",strokes:"13",def:{en:["any jam"]},hunum:[{kor:"장",def:"장"}]},{id:4458,hanja:"年",strokes:"6",def:{en:["year","new","person"],kr:["해","년"]},hunum:[{kor:"년",def:"해"}]},{id:4459,hanja:"夆",strokes:"7",def:{en:["resist"],kr:["끌","봉"]},hunum:[{kor:"봉",def:"끌"}]},{id:4460,hanja:"石",strokes:"5",def:{en:["stone","rock","mineral","rad"],kr:["돌","석"]},hunum:[{kor:"석",def:"돌"}]},{id:4461,hanja:"鮭",strokes:"17",def:{en:["salmon","spheroides vermicularis"],kr:["복","해"]},hunum:[{kor:"해",def:"어채"}]},{id:4462,hanja:"酲",strokes:"14",def:{en:["hangover","uncomfortable"],kr:["술","깰","정"]},hunum:[{kor:"정",def:"술병"}]},{id:4463,hanja:"吺",strokes:"7",def:{en:[],kr:["말","많을","두"]},hunum:[{kor:"두",def:"말 많을"}]},{id:4464,hanja:"陀",strokes:"8",def:{en:["steep bank","rough terrain"],kr:["땅이름","타"]},hunum:[{kor:"타",def:"비탈"}]},{id:4465,hanja:"夈",strokes:"9",def:{en:[]},hunum:[{kor:"재",def:"재계할"}]},{id:4466,hanja:"涜",strokes:"10",def:{en:["ditch","sluice","gutter","drain"]},hunum:[{kor:"독",def:"도랑"}]},{id:4467,hanja:"吻",strokes:"7",def:{en:["kiss","the lips","coinciding"],kr:["입가","문"]},hunum:[{kor:"문",def:"입술"}]},{id:4468,hanja:"并",strokes:"8",def:{en:["combine","annex","also","what"],kr:["幷의","俗字"]},hunum:[{kor:"병",def:"아우를"}]},{id:4469,hanja:"鮮",strokes:"17",def:{en:["fresh","new","delicious","rare","few"],kr:["고울","선"]},hunum:[{kor:"선",def:"고울"}]},{id:4470,hanja:"蜚",strokes:"14",def:{en:["cockroach"],kr:["바퀴","비"]},hunum:[{kor:"비",def:"바퀴"}]},{id:4471,hanja:"吼",strokes:"7",def:{en:["roar","shout","bark","howl"],kr:["울","후"]},hunum:[{kor:"후",def:"울"}]},{id:4472,hanja:"换",strokes:"10",def:{en:["change"],kr:["換과","同字"]},hunum:[{kor:"환",def:"바꿀"}]},{id:4473,hanja:"犇",strokes:"12",def:{en:["run fast","flee","rush about","run"],kr:["달아날","분"]},hunum:[{kor:"분",def:"달아날"}]},{id:4474,hanja:"変",strokes:"9",def:{en:["change","transform","alter","rebel"],kr:["變의","俗字"]},hunum:[{kor:"변",def:"변할"}]},{id:4475,hanja:"酴",strokes:"14",def:{en:["leaven","yeast","wine"],kr:["두번","빚은","술","도"]},hunum:[{kor:"도",def:"두번 빚은 술"}]},{id:4476,hanja:"酵",strokes:"14",def:{en:["yeast","leaven"],kr:["술밑","효"]},hunum:[{kor:"효",def:"술밑"}]},{id:4477,hanja:"幸",strokes:"8",def:{en:["luck","favor","fortunately"],kr:["바랄","행"]},hunum:[{kor:"행",def:"다행할"}]},{id:4478,hanja:"陂",strokes:"8",def:{en:["dam","embankment","reservoir"],kr:["치우칠","피"]},hunum:[{kor:"피",def:"기울어질"}]},{id:4479,hanja:"吽",strokes:"7",def:{en:["bellow","stupid"]},hunum:[{kor:"우",def:"개 싸울"},{kor:"음",def:"소 울"},{kor:"후",def:"짖을"}]},{id:4480,hanja:"蜜",strokes:"14",def:{en:["honey","sweet","nectar"],kr:["꿀","밀"]},hunum:[{kor:"밀",def:"꿀"}]},{id:4481,hanja:"糅",strokes:"15",def:{en:["blend","mix","mixed"],kr:["잡곡밥","유"]},hunum:[{kor:"유",def:"섞일"}]},{id:4482,hanja:"吾",strokes:"7",def:{en:["i","my","our","resist","impede"],kr:["아들","오"]},hunum:[{kor:"오",def:"자기"}]},{id:4483,hanja:"幹",strokes:"13",def:{en:["trunk of tree or of human body"],kr:["우물난간","간"]},hunum:[{kor:"간",def:"줄기"}]},{id:4484,hanja:"酶",strokes:"14",def:{en:["enzymes"],kr:["술밑","매"]},hunum:[{kor:"매",def:"술밑"}]},{id:4485,hanja:"蜝",strokes:"14",def:{en:[],kr:["방계","기"]},hunum:[{kor:"기",def:"방계"}]},{id:4486,hanja:"酷",strokes:"14",def:{en:["strong","stimulating","very"],kr:["독할","혹"]},hunum:[{kor:"혹",def:"독할"}]},{id:4487,hanja:"糆",strokes:"15",def:{en:[],kr:["麪과","同字"]},hunum:[{kor:"면",def:"밀가루"}]},{id:4488,hanja:"吿",strokes:"7",def:{en:["tell","announce","inform","accuse"],kr:["告과","同字"]},hunum:[{kor:"고",def:"고할"},{kor:"곡",def:"청할"}]},{id:4489,hanja:"幺",strokes:"3",def:{en:["one","tiny","small"],kr:["어릴","요"]},hunum:[{kor:"요",def:"작을"}]},{id:4490,hanja:"附",strokes:"8",def:{en:["adhere to","append","rely on near to"],kr:["붙을","부"]},hunum:[{kor:"부",def:"붙을"}]},{id:4491,hanja:"幻",strokes:"4",def:{en:["illusion","fantasy","mirage"],kr:["변할","환"]},hunum:[{kor:"환",def:"변할"}]},{id:4492,hanja:"酸",strokes:"14",def:{en:["tart","sour","acid","stiff","spoiled"],kr:["초","산"]},hunum:[{kor:"산",def:"초"}]},{id:4493,hanja:"矺",strokes:"8",def:{en:[],kr:["나무이름","탁"]},hunum:[{kor:"탁",def:"나무이름"}]},{id:4494,hanja:"幼",strokes:"5",def:{en:["infant","young child","immature"],kr:["사랑할","유"]},hunum:[{kor:"유",def:"어릴"}]},{id:4495,hanja:"酹",strokes:"14",def:{en:["to pour out a libation","to sprinkle"],kr:["부을","뢰"]},hunum:[{kor:"뢰",def:"부을"}]},{id:4496,hanja:"涣",strokes:"10",def:{en:["scatter","scattered"],kr:["渙과","同字"]},hunum:[{kor:"환",def:"흩어질"}]},{id:4497,hanja:"夏",strokes:"10",def:{en:["summer","great","grand","big"],kr:["여름","하"]},hunum:[{kor:"하",def:"여름"}]},{id:4498,hanja:"犍",strokes:"13",def:{en:["a bullock","a fabulous monster"],kr:["촉나라","고을이름","건"]},hunum:[{kor:"건",def:"불친 소"}]},{id:4499,hanja:"捧",strokes:"11",def:{en:["hold up in two hands"],kr:["받들","봉"]},hunum:[{kor:"봉",def:"받들"}]},{id:4500,hanja:"幽",strokes:"9",def:{en:["quiet","secluded","tranquil","dark"],kr:["저승","유"]},hunum:[{kor:"유",def:"숨을"}]},{id:4501,hanja:"蜡",strokes:"14",def:{en:["wax","candle","waxy","glazed","maggot","as a non","meaning imperial harvest"],kr:["䄍"]},hunum:[{kor:"사",def:"납향"}]},{id:4502,hanja:"矻",strokes:"8",def:{en:["toil","slave away","busy"],kr:["돌","골"]},hunum:[{kor:"골",def:"돌"}]},{id:4503,hanja:"糊",strokes:"15",def:{en:["paste","stick on with paste"],kr:["끈끈할","호"]},hunum:[{kor:"호",def:"풀"}]},{id:4504,hanja:"夐",strokes:"14",def:{en:["long","faraway","pre"],kr:["바라보는","모양","형"]},hunum:[{kor:"형",def:"멀"}]},{id:4505,hanja:"捨",strokes:"11",def:{en:["discard","give up willingly","give alms"],kr:["버릴","사"]},hunum:[{kor:"사",def:"버릴"}]},{id:4506,hanja:"幾",strokes:"12",def:{en:["how many","a few","some"],kr:["기미","기"]},hunum:[{kor:"기",def:"기미"}]},{id:4507,hanja:"矼",strokes:"8",def:{en:["stone bridge","stepping stones"],kr:["성실할","강"]},hunum:[{kor:"강",def:"돌다리"}]},{id:4508,hanja:"捩",strokes:"11",def:{en:["twist with hands","snap","tear"],kr:["비틀","렬"]},hunum:[{kor:"렬",def:"비틀"}]},{id:4509,hanja:"广",strokes:"3",def:{en:["wide","extensive","broad","rad"],kr:["바윗집","엄"]},hunum:[{kor:"엄",def:"바윗집"}]},{id:4510,hanja:"矽",strokes:"8",def:{en:["silicon"],kr:["석비레","석"]},hunum:[{kor:"석",def:"석비레"}]},{id:4511,hanja:"捫",strokes:"11",def:{en:["stoke","pat","feel by hand","grope"],kr:["쓰다듬을","문"]},hunum:[{kor:"문",def:"어루만질"}]},{id:4512,hanja:"鮹",strokes:"18",def:{en:["an octopus","devilfish"],kr:["낙지","소"]},hunum:[{kor:"소",def:"문어"}]},{id:4513,hanja:"陋",strokes:"9",def:{en:["narrow","crude","coarse","ugly"],kr:["줍을","루"]},hunum:[{kor:"루",def:"줍을"}]},{id:4514,hanja:"蜥",strokes:"14",def:{en:["lizard"],kr:["도마뱀","석"]},hunum:[{kor:"석",def:"도마뱀"}]},{id:4515,hanja:"犒",strokes:"14",def:{en:["entertain victorious soldiers"],kr:["호궤할","호"]},hunum:[{kor:"호",def:"호궤할"}]},{id:4516,hanja:"夔",strokes:"22",def:{en:["one","walrus"],kr:["조심할","기"]},hunum:[{kor:"기",def:"조심할"}]},{id:4517,hanja:"陌",strokes:"9",def:{en:["foot path between rice fields"],kr:["두렁","맥"]},hunum:[{kor:"맥",def:"두렁"}]},{id:4518,hanja:"夕",strokes:"3",def:{en:["evening","night","dusk","slanted"],kr:["저녁","석"]},hunum:[{kor:"사",def:"한 움큼"},{kor:"석",def:"저녁"}]},{id:4519,hanja:"降",strokes:"9",def:{en:["descend","fall","drop","lower","down"],kr:["항복할","항"]},hunum:[{kor:"강",def:"내릴"},{kor:"항",def:"항복할"}]},{id:4520,hanja:"蜨",strokes:"14",def:{en:["butterfly"],kr:["나비","접"]},hunum:[{kor:"접",def:"나비"}]},{id:4521,hanja:"据",strokes:"11",def:{en:["to occupy","take possession of","a base","position"],kr:["손병","거"]},hunum:[{kor:"거",def:"가질"}]},{id:4522,hanja:"涪",strokes:"11",def:{en:["river in Sichuan province"],kr:["물거품","부"]},hunum:[{kor:"부",def:"물거품"}]},{id:4523,hanja:"外",strokes:"5",def:{en:["out","outside","external","foreign"],kr:["아버지","외"]},hunum:[{kor:"외",def:"바깥"}]},{id:4524,hanja:"蜩",strokes:"14",def:{en:["cicada","broad locust"],kr:["매미","조"]},hunum:[{kor:"조",def:"매미"}]},{id:4525,hanja:"涫",strokes:"11",def:{en:[],kr:["끓을","관"]},hunum:[{kor:"관",def:"끓을"}]},{id:4526,hanja:"陏",strokes:"9",def:{en:[],kr:["풀열매","라"]},hunum:[{kor:"라",def:"오이"}]},{id:4527,hanja:"犖",strokes:"14",def:{en:["brindled ox","brindled in color"],kr:["얼룩소","락"]},hunum:[{kor:"락",def:"얼룩소"}]},{id:4528,hanja:"限",strokes:"9",def:{en:["boundary","limit","line"],kr:["한정할","한"]},hunum:[{kor:"한",def:"한정할"}]},{id:4529,hanja:"捱",strokes:"11",def:{en:["put off","procrastinate","endure"],kr:["막을","애"]},hunum:[{kor:"애",def:"막을"}]},{id:4530,hanja:"夙",strokes:"6",def:{en:["early in morning","dawn","previous"],kr:["일찍","일어날","숙"]},hunum:[{kor:"숙",def:"이를"}]},{id:4531,hanja:"什",strokes:"4",def:{en:["file of ten soldiers","mixed","miscellaneous"],kr:["세간","집"]},hunum:[{kor:"십",def:"열 사람"},{kor:"집",def:"세간"}]},{id:4532,hanja:"捲",strokes:"11",def:{en:["curl","roll up","curly","rolled up"],kr:["거둘","권"]},hunum:[{kor:"권",def:"거둘"}]},{id:4533,hanja:"多",strokes:"6",def:{en:["much","many","more than","over"],kr:["많을","다"]},hunum:[{kor:"다",def:"많을"}]},{id:4534,hanja:"仁",strokes:"4",def:{en:["humaneness","benevolence","kindness"],kr:["어질","인"]},hunum:[{kor:"인",def:"어질"}]},{id:4535,hanja:"涯",strokes:"11",def:{en:["shore","bank","water"],kr:["물이름","의"]},hunum:[{kor:"애",def:"물가"},{kor:"의",def:"물가 언덕"}]},{id:4536,hanja:"桀",strokes:"10",def:{en:["chicken roost","ancient emperor"],kr:["왕이름","걸"]},hunum:[{kor:"걸",def:"찢을"}]},{id:4537,hanja:"仂",strokes:"4",def:{en:["surplus or excess","remainder"],kr:["나머지","륵"]},hunum:[{kor:"륵",def:"나머지"}]},{id:4538,hanja:"桁",strokes:"10",def:{en:["cross"],kr:["마개","형"]},hunum:[{kor:"항",def:"수갑"},{kor:"형",def:"시렁"}]},{id:4539,hanja:"糕",strokes:"16",def:{en:["cakes","pastry"],kr:["떡","고"]},hunum:[{kor:"고",def:"떡"}]},{id:4540,hanja:"夜",strokes:"8",def:{en:["night","dark","in night","by night"],kr:["밤","야"]},hunum:[{kor:"야",def:"밤"}]},{id:4541,hanja:"陔",strokes:"9",def:{en:["a step","a terrace","a grade a ledge"],kr:["변방","해"]},hunum:[{kor:"해",def:"층 뜰"}]},{id:4542,hanja:"仄",strokes:"4",def:{en:["slanting","oblique","oblique tones"],kr:["돈","이름","측"]},hunum:[{kor:"측",def:"기울"}]},{id:4543,hanja:"臀",strokes:"17",def:{en:["buttocks"],kr:["볼기","둔"]},hunum:[{kor:"둔",def:"볼기"}]},{id:4544,hanja:"糖",strokes:"16",def:{en:["sugar","candy","sweets"]},hunum:[{kor:"당",def:"엿"}]},{id:4545,hanja:"桂",strokes:"10",def:{en:["cassia or cinnamon"],kr:["계수나무","계"]},hunum:[{kor:"계",def:"계수나무"}]},{id:4546,hanja:"捶",strokes:"11",def:{en:["strike with stick","lash","beat"],kr:["짓찧을","추"]},hunum:[{kor:"추",def:"종아리 칠"}]},{id:4547,hanja:"犜",strokes:"16",def:{en:[],kr:["돈피","돈"]},hunum:[{kor:"돈",def:"돈피"}]},{id:4548,hanja:"糗",strokes:"16",def:{en:["parched wheat or rice","broken grain"],kr:["마른밥가루","구"]},hunum:[{kor:"구",def:"마른밥가루"}]},{id:4549,hanja:"桃",strokes:"10",def:{en:["peach","marriage","surname"],kr:["복숭아","나무","도"]},hunum:[{kor:"도",def:"복숭아 나무"}]},{id:4550,hanja:"夞",strokes:"10",def:{en:[]},hunum:[{kor:"욋",def:"땅 이름"}]},{id:4551,hanja:"捷",strokes:"11",def:{en:["win","victory","triumph"],kr:["이길","첩"]},hunum:[{kor:"첩",def:"이길"}]},{id:4552,hanja:"臂",strokes:"17",def:{en:["arm"],kr:["팔","비"]},hunum:[{kor:"비",def:"팔"}]},{id:4553,hanja:"液",strokes:"11",def:{en:["sap","juice","liquid","fluid"],kr:["즙","액"]},hunum:[{kor:"액",def:"즙"}]},{id:4554,hanja:"桄",strokes:"10",def:{en:["a coir"],kr:["광랑나무","광"]},hunum:[{kor:"광",def:"광랑나무"}]},{id:4555,hanja:"仆",strokes:"4",def:{en:["fall forward","lie prostrate","prone","servant"],kr:["엎드릴","부"]},hunum:[{kor:"부",def:"엎드릴"}]},{id:4556,hanja:"糙",strokes:"17",def:{en:["coarse","harsh","rough","unpolished rice"],kr:["매조미쌀","조"]},hunum:[{kor:"조",def:"매조미쌀"}]},{id:4557,hanja:"仇",strokes:"4",def:{en:["enemy","hate","hatred","enmity"],kr:["짝","구"]},hunum:[{kor:"구",def:"짝"}]},{id:4558,hanja:"陘",strokes:"10",def:{en:["defile","mountain pass","gorge"],kr:["비탈","형"]},hunum:[{kor:"형",def:"지레목"}]},{id:4559,hanja:"糚",strokes:"17",def:{en:[],kr:["妝과","同字"]},hunum:[{kor:"장",def:"단장할"}]},{id:4560,hanja:"涴",strokes:"11",def:{en:["daub"],kr:["진흙","묻을","완"]},hunum:[{kor:"완",def:"물 굽이쳐 흐를"}]},{id:4561,hanja:"框",strokes:"10",def:{en:["frame","framework","door frame"],kr:["문테","광"]},hunum:[{kor:"광",def:"문테"}]},{id:4562,hanja:"涵",strokes:"11",def:{en:["soak","wet","tolerate","be lenient"],kr:["젖을","함"]},hunum:[{kor:"함",def:"젖을"}]},{id:4563,hanja:"捺",strokes:"11",def:{en:["to press down heavily with the fingers"],kr:["누를","날"]},hunum:[{kor:"날",def:"누를"}]},{id:4564,hanja:"蜴",strokes:"14",def:{en:["lizard"],kr:["도마뱀","척"]},hunum:[{kor:"척",def:"도마뱀"}]},{id:4565,hanja:"臆",strokes:"17",def:{en:["chest","breast","bosom","thought"],kr:["가득할","억"]},hunum:[{kor:"억",def:"가슴"}]},{id:4566,hanja:"糜",strokes:"17",def:{en:["rice gruel","congee","mashed"],kr:["싸라기","미"]},hunum:[{kor:"미",def:"죽"}]},{id:4567,hanja:"捻",strokes:"11",def:{en:["to twist or nip with the fingers"],kr:["비틀","녑"]},hunum:[{kor:"념",def:"비틀"},{kor:"녑",def:"비틀"}]},{id:4568,hanja:"案",strokes:"10",def:{en:["table","bench","legal case"],kr:["생각할","안"]},hunum:[{kor:"안",def:"책상"}]},{id:4569,hanja:"夢",strokes:"14",def:{en:["dream","visionary","wishful"],kr:["꿈","몽"]},hunum:[{kor:"몽",def:"꿈"}]},{id:4570,hanja:"今",strokes:"4",def:{en:["now","today","modern era"],kr:["이제","금"]},hunum:[{kor:"금",def:"이제"}]},{id:4571,hanja:"陛",strokes:"10",def:{en:["steps leading throne","throne"],kr:["대궐","섬돌","폐"]},hunum:[{kor:"폐",def:"대궐 섬돌"}]},{id:4572,hanja:"犢",strokes:"19",def:{en:["calf","victim of sacrifice"],kr:["송아지","독"]},hunum:[{kor:"독",def:"송아지"}]},{id:4573,hanja:"糝",strokes:"17",def:{en:["scattered","mixed"],kr:["나물죽","삼"]},hunum:[{kor:"삼",def:"나물죽"}]},{id:4574,hanja:"涷",strokes:"11",def:{en:["rainstorm"],kr:["마룻대","동"]},hunum:[{kor:"동",def:"마룻대"}]},{id:4575,hanja:"桉",strokes:"10",def:{en:[],kr:["案과","同字"]},hunum:[{kor:"안",def:"안석"}]},{id:4576,hanja:"介",strokes:"4",def:{en:["forerunner","herald","harbinger","to lie between","sea shell","to wear armor"],kr:["중매할","개"]},hunum:[{kor:"개",def:"낄"}]},{id:4577,hanja:"蜵",strokes:"14",def:{en:[],kr:["벌레","이름","연"]},hunum:[{kor:"연",def:"우렁찰"}]},{id:4578,hanja:"陜",strokes:"10",def:{en:["narrow","mountain pass"],kr:["좁을","협"]},hunum:[{kor:"합",def:"땅이름"},{kor:"협",def:"좁을"}]},{id:4579,hanja:"涸",strokes:"11",def:{en:["dried up","exhausted","tired","dry"],kr:["물","마를","후"]},hunum:[{kor:"학",def:"마를"},{kor:"후",def:"물 마를"}]},{id:4580,hanja:"糞",strokes:"17",def:{en:["manure","dung","night soil"],kr:["똥","분"]},hunum:[{kor:"분",def:"똥"}]},{id:4581,hanja:"夤",strokes:"14",def:{en:["distant place","remote","deep"],kr:["조심할","인"]},hunum:[{kor:"인",def:"조심할"}]},{id:4582,hanja:"糟",strokes:"17",def:{en:["sediment","dregs","pickle"],kr:["지게미","조"]},hunum:[{kor:"조",def:"지게미"}]},{id:4583,hanja:"夥",strokes:"14",def:{en:["companion","partner","assistant"],kr:["동무","해"]},hunum:[{kor:"과",def:"많을"},{kor:"해",def:"많을"}]},{id:4584,hanja:"仍",strokes:"4",def:{en:["yet","still","as ever","again","keep","continuing"],kr:["인할","잉"]},hunum:[{kor:"잉",def:"인할"}]},{id:4585,hanja:"陝",strokes:"10",def:{en:["mountain pass","Shaanxi province"],kr:["고을이름","섬"]},hunum:[{kor:"섬",def:"고을이름"}]},{id:4586,hanja:"蜷",strokes:"14",def:{en:["creep like worm","curl one"],kr:["움추러질","권"]},hunum:[{kor:"권",def:"움추러질"}]},{id:4587,hanja:"从",strokes:"4",def:{en:["from","by","since","whence","through"],kr:["從의","古字"]},hunum:[{kor:"종",def:"좆을"}]},{id:4588,hanja:"臊",strokes:"17",def:{en:["rank","rancid","frowzy","fetid","bashful"],kr:["누릴","조"]},hunum:[{kor:"조",def:"누릴"}]},{id:4589,hanja:"糠",strokes:"17",def:{en:["chaff","bran","husks","poor"],kr:["번쇄할","강"]},hunum:[{kor:"강",def:"겨"}]},{id:4590,hanja:"捿",strokes:"11",def:{en:["perch","roost","stay"],kr:["깃들일","서"]},hunum:[{kor:"서",def:"깃들일"}]},{id:4591,hanja:"陞",strokes:"10",def:{en:["promote","rise","ascend"],kr:["올릴","승"]},hunum:[{kor:"승",def:"오를"}]},{id:4592,hanja:"陟",strokes:"10",def:{en:["climb","scale","ascend","proceed"],kr:["오를","척"]},hunum:[{kor:"척",def:"오를"}]},{id:4593,hanja:"大",strokes:"3",def:{en:["big","great","vast","large","high"],kr:["굵을","태"]},hunum:[{kor:"대",def:"클"},{kor:"태",def:"클"}]},{id:4594,hanja:"仏",strokes:"4",def:{en:["Buddha"],kr:["佛의","古字"]},hunum:[{kor:"불",def:"부처"}]},{id:4595,hanja:"桎",strokes:"10",def:{en:["fetters","shackles","handcuffs"],kr:["차꼬","질"]},hunum:[{kor:"질",def:"차꼬"}]},{id:4596,hanja:"糢",strokes:"17",def:{en:["rice snacks"],kr:["模의","俗字"]},hunum:[{kor:"모",def:"본뜰"}]},{id:4597,hanja:"涼",strokes:"11",def:{en:["cool","cold","disheartened"],kr:["서늘할","량"]},hunum:[{kor:"량",def:"서늘할"}]},{id:4598,hanja:"蜺",strokes:"14",def:{en:["reflection of rainbow"],kr:["암무지개","예"]},hunum:[{kor:"예",def:"말매미"}]},{id:4599,hanja:"蜻",strokes:"14",def:{en:["dragonfly"],kr:["귀뚜라미","청"]},hunum:[{kor:"청",def:"귀뚜라미"}]},{id:4600,hanja:"天",strokes:"4",def:{en:["sky","heaven","god","celestial"],kr:["하늘","천"]},hunum:[{kor:"천",def:"하늘"}]},{id:4601,hanja:"臍",strokes:"18",def:{en:["abdominal area of crab","navel"],kr:["배꼽","제"]},hunum:[{kor:"제",def:"배꼽"}]},{id:4602,hanja:"犧",strokes:"20",def:{en:["sacrifice","give up","sacrificial"],kr:["희생","희"]},hunum:[{kor:"사",def:"술그릇"},{kor:"희",def:"희생"}]},{id:4603,hanja:"陡",strokes:"10",def:{en:["steep","sloping","abruptly","sudden"],kr:["절벽","두"]},hunum:[{kor:"두",def:"절벽"}]},{id:4604,hanja:"太",strokes:"4",def:{en:["very","too","much","big","extreme"],kr:["콩","태"]},hunum:[{kor:"태",def:"클"}]},{id:4605,hanja:"糤",strokes:"18",def:{en:["fried round cakes of wheat flour"]},hunum:[{kor:"산",def:"산자"}]},{id:4606,hanja:"桐",strokes:"10",def:{en:["name applied various trees"],kr:["오동나무","동"]},hunum:[{kor:"동",def:"오동나무"}]},{id:4607,hanja:"仒",strokes:"4",def:{en:["kwukyel"]},hunum:[{kor:"어",def:"구결자"}]},{id:4608,hanja:"院",strokes:"10",def:{en:["courtyard","yard","court","school"],kr:["학교","원"]},hunum:[{kor:"원",def:"원집"}]},{id:4609,hanja:"涿",strokes:"11",def:{en:["drip","dribble","trickle"],kr:["땅이름","탁"]},hunum:[{kor:"탁",def:"물방울 떨어질"}]},{id:4610,hanja:"陣",strokes:"10",def:{en:["column","row or file of troops"],kr:["줄","진"]},hunum:[{kor:"진",def:"줄"}]},{id:4611,hanja:"臏",strokes:"18",def:{en:["the kneecap"],kr:["종지뼈","빈"]},hunum:[{kor:"빈",def:"종지뼈"}]},{id:4612,hanja:"糥",strokes:"18",def:{en:[],kr:["糯와","同字"]},hunum:[{kor:"나",def:"찰벼"}]},{id:4613,hanja:"桑",strokes:"10",def:{en:["mulberry tree","surname"],kr:["뽕나무","상"]},hunum:[{kor:"상",def:"뽕나무"}]},{id:4614,hanja:"夫",strokes:"4",def:{en:["man","male adult","husband","those"],kr:["지아비","부"]},hunum:[{kor:"부",def:"지아비"}]},{id:4615,hanja:"夬",strokes:"4",def:{en:["parted","fork","certain"],kr:["괘","이름","쾌"]},hunum:[{kor:"쾌",def:"결단할"}]},{id:4616,hanja:"除",strokes:"10",def:{en:["eliminate","remove","except"],kr:["섬돌","제"]},hunum:[{kor:"제",def:"섬돌"}]},{id:4617,hanja:"仔",strokes:"5",def:{en:["small thing","child","young animal"],kr:["자세할","자"]},hunum:[{kor:"자",def:"자세할"}]},{id:4618,hanja:"桓",strokes:"10",def:{en:["variety of tree","surname"],kr:["푯말","환"]},hunum:[{kor:"환",def:"푯말"}]},{id:4619,hanja:"陥",strokes:"10",def:{en:["submerge","sink","plunge","trap"],kr:["빠질","함"]},hunum:[{kor:"함",def:"빠질"}]},{id:4620,hanja:"臑",strokes:"18",def:{en:["soft"],kr:["팔마디","노"]},hunum:[{kor:"노",def:"팔마디"}]},{id:4621,hanja:"糧",strokes:"18",def:{en:["food","grain","provisions"],kr:["양식","량"]},hunum:[{kor:"량",def:"양식"}]},{id:4622,hanja:"夭",strokes:"4",def:{en:["young","fresh","die young"],kr:["끊어","죽일","요"]},hunum:[{kor:"오",def:"끊어 죽일"},{kor:"요",def:"어여쁠"}]},{id:4623,hanja:"仕",strokes:"5",def:{en:["official","serve government"],kr:["벼슬할","사"]},hunum:[{kor:"사",def:"벼슬할"}]},{id:4624,hanja:"蜿",strokes:"14",def:{en:["creep","crawl"],kr:["굼틀거릴","원"]},hunum:[{kor:"원",def:"굼틀거릴"}]},{id:4625,hanja:"他",strokes:"5",def:{en:["other","another","he","she","it"],kr:["간사할","타"]},hunum:[{kor:"타",def:"다를"}]},{id:4626,hanja:"犬",strokes:"4",def:{en:["dog","radical number"],kr:["큰","개","견"]},hunum:[{kor:"견",def:"큰 개"}]},{id:4627,hanja:"桔",strokes:"10",def:{en:["Chinese bellflower","well","the inner fibers of corn"],kr:["도라지","길"]},hunum:[{kor:"길",def:"도라지"}]},{id:4628,hanja:"央",strokes:"5",def:{en:["center","conclude","run out","beg"],kr:["가운데","앙"]},hunum:[{kor:"앙",def:"가운데"}]},{id:4629,hanja:"夯",strokes:"5",def:{en:["heavy load","burden","lift up"],kr:["다질","항"]},hunum:[{kor:"항",def:"멜"}]},{id:4630,hanja:"臓",strokes:"18",def:{en:["internal organs","viscera"]},hunum:[{kor:"장",def:"창자"}]},{id:4631,hanja:"叁",strokes:"8",def:{en:["bank form of numeral"],kr:["參의","略字"]},hunum:[{kor:"삼",def:"석"}]},{id:4632,hanja:"仗",strokes:"5",def:{en:["rely upon","protector","fight","war","weaponry"],kr:["병장기","장"]},hunum:[{kor:"장",def:"병장기"}]},{id:4633,hanja:"参",strokes:"8",def:{en:["take part in","intervene","ginseng"],kr:["간여할","참"]},hunum:[{kor:"삼",def:"석"},{kor:"참",def:"간여할"}]},{id:4634,hanja:"犯",strokes:"5",def:{en:["commit crime","violate","criminal"],kr:["범할","범"]},hunum:[{kor:"범",def:"범할"}]},{id:4635,hanja:"失",strokes:"5",def:{en:["lose","make mistake","neglect"],kr:["그르칠","실"]},hunum:[{kor:"실",def:"잃을"}]},{id:4636,hanja:"參",strokes:"11",def:{en:["take part in","intervene","ginseng"],kr:["간여할","참"]},hunum:[{kor:"삼",def:"석"},{kor:"참",def:"간여할"}]},{id:4637,hanja:"付",strokes:"5",def:{en:["give","deliver","pay","hand over","entrust"],kr:["줄","부"]},hunum:[{kor:"부",def:"줄"}]},{id:4638,hanja:"叄",strokes:"11",def:{en:["take part in","intervene","ginseng"],kr:["간여할","참"]},hunum:[{kor:"삼",def:"석"},{kor:"참",def:"간여할"}]},{id:4639,hanja:"仙",strokes:"5",def:{en:["Taoist super","transcendent","immortal"],kr:["신선","선"]},hunum:[{kor:"선",def:"신선"}]},{id:4640,hanja:"陪",strokes:"11",def:{en:["accompany","be with","keep company"],kr:["쌓아올릴","배"]},hunum:[{kor:"배",def:"쌓아올릴"}]},{id:4641,hanja:"仚",strokes:"5",def:{en:["to fly"],kr:["날듯할","헌"]},hunum:[{kor:"헌",def:"날듯할"}]},{id:4642,hanja:"叅",strokes:"12",def:{en:["to counel","to consult together","to take part in","to intervene"],kr:["의논할","참"]},hunum:[{kor:"참",def:"의논할"}]},{id:4643,hanja:"陬",strokes:"11",def:{en:["corner","cranny","nook","niche"],kr:["마을","추"]},hunum:[{kor:"추",def:"벼루"}]},{id:4644,hanja:"仛",strokes:"5",def:{en:["young girl","strange","different"],kr:["다를","탁"]},hunum:[{kor:"차",def:"위탁할"},{kor:"탁",def:"부칠"}]},{id:4645,hanja:"臘",strokes:"19",def:{en:["year end sacrifice","dried meat"],kr:["납향","랍"]},hunum:[{kor:"랍",def:"납향"}]},{id:4646,hanja:"臙",strokes:"20",def:{en:["rouge","cosmetics"],kr:["연지","연"]},hunum:[{kor:"연",def:"목구멍"}]},{id:4647,hanja:"犳",strokes:"6",def:{en:[],kr:["아롱","짐승","작"]},hunum:[{kor:"작",def:"아롱 짐승"}]},{id:4648,hanja:"市",strokes:"5",def:{en:["market","fair","city","town","trade"],kr:["집","많은","동리","시"]},hunum:[{kor:"시",def:"저자"}]},{id:4649,hanja:"布",strokes:"5",def:{en:["cotton cloth","textiles","linen"],kr:["베풀","포"]},hunum:[{kor:"포",def:"베"}]},{id:4650,hanja:"臚",strokes:"20",def:{en:["arrange in order","display"],kr:["살갗","려"]},hunum:[{kor:"려",def:"살갗"}]},{id:4651,hanja:"犴",strokes:"6",def:{en:["a wild dog","a not very large lock"],kr:["들개","안"]},hunum:[{kor:"안",def:"들개"}]},{id:4652,hanja:"糯",strokes:"20",def:{en:["glutinous rice","glutinous","sticky"],kr:["찰벼","나"]},hunum:[{kor:"나",def:"찰벼"}]},{id:4653,hanja:"又",strokes:"2",def:{en:["and","also","again","in addition"],kr:["용서할","우"]},hunum:[{kor:"우",def:"또"}]},{id:4654,hanja:"仝",strokes:"5",def:{en:["together","same","surname"],kr:["同의","古字"]},hunum:[{kor:"동",def:"한가지"}]},{id:4655,hanja:"犵",strokes:"6",def:{en:["resolute"],kr:["오랑캐이름","힐"]},hunum:[{kor:"힐",def:"오랑캐이름"}]},{id:4656,hanja:"叉",strokes:"3",def:{en:["crotch","fork","prong"],kr:["깍지낄","차"]},hunum:[{kor:"차",def:"깍지낄"}]},{id:4657,hanja:"糰",strokes:"20",def:{en:["rice ball"],kr:["경단","단"]},hunum:[{kor:"단",def:"경단"}]},{id:4658,hanja:"桜",strokes:"10",def:{en:["cherry","cherry blossom"],kr:["벚나무","앵"]},hunum:[{kor:"앵",def:"벚나무"}]},{id:4659,hanja:"夷",strokes:"6",def:{en:["ancient barbarian tribes"],kr:["괘","이름","이"]},hunum:[{kor:"이",def:"동쪽 오랑캐"}]},{id:4660,hanja:"仞",strokes:"5",def:{en:["ancient unit of measure"],kr:["길","인"]},hunum:[{kor:"인",def:"길"}]},{id:4661,hanja:"仟",strokes:"5",def:{en:["one thousand","leader of one thousand men"],kr:["일천","천"]},hunum:[{kor:"천",def:"일천"}]},{id:4662,hanja:"状",strokes:"6",def:{en:["form","appearance","shape","official"],kr:["狀의","俗字"]},hunum:[{kor:"상",def:"형상"},{kor:"장",def:"문서"}]},{id:4663,hanja:"夸",strokes:"6",def:{en:["extravagant","luxurious","handsome"],kr:["자랑할","과"]},hunum:[{kor:"과",def:"자랑할"}]},{id:4664,hanja:"鄂",strokes:"12",def:{en:["Hubei province","startled"],kr:["나라이름","악"]},hunum:[{kor:"악",def:"나라이름"}]},{id:4665,hanja:"臝",strokes:"21",def:{en:["be bare","nude"],kr:["벌거벗을","라"]},hunum:[{kor:"라",def:"벌거벗을"}]},{id:4666,hanja:"糲",strokes:"21",def:{en:["unpolished rice","brown rice"],kr:["현미","려"]},hunum:[{kor:"려",def:"현미"}]},{id:4667,hanja:"及",strokes:"4",def:{en:["extend","reach","come up to","and"],kr:["미칠","급"]},hunum:[{kor:"급",def:"미칠"}]},{id:4668,hanja:"帆",strokes:"6",def:{en:["sail","boat"],kr:["돛","범"]},hunum:[{kor:"범",def:"돛"}]},{id:4669,hanja:"陰",strokes:"11",def:{en:["dark","secret"],kr:["세월","음"]},hunum:[{kor:"음",def:"음기"}]},{id:4670,hanja:"仡",strokes:"5",def:{en:["strong","valiant"],kr:["날랠","흘"]},hunum:[{kor:"흘",def:"날랠"}]},{id:4671,hanja:"友",strokes:"4",def:{en:["friend","companion","fraternity"],kr:["합할","우"]},hunum:[{kor:"우",def:"벗"}]},{id:4672,hanja:"糴",strokes:"22",def:{en:["purchase grains","store grain"],kr:["빠를","적"]},hunum:[{kor:"적",def:"쌀 사들일"}]},{id:4673,hanja:"夻",strokes:"6",def:{en:["fish name"],kr:["대구","구"]},hunum:[{kor:"구",def:"대구"}]},{id:4674,hanja:"双",strokes:"4",def:{en:["set of two","pair","couple","both"],kr:["雙의","略字"]},hunum:[{kor:"쌍",def:"짝"}]},{id:4675,hanja:"仢",strokes:"5",def:{en:[],kr:["외나무","다리","작"]},hunum:[{kor:"작",def:"외나무 다리"}]},{id:4676,hanja:"陲",strokes:"11",def:{en:["frontier","border"],kr:["위태할","수"]},hunum:[{kor:"수",def:"변방"}]},{id:4677,hanja:"陳",strokes:"11",def:{en:["exhibit","display","plead","surname"],kr:["늘어놓을","진"]},hunum:[{kor:"진",def:"늘어놓을"}]},{id:4678,hanja:"臟",strokes:"22",def:{en:["internal organs","viscera"],kr:["오장","장"]},hunum:[{kor:"장",def:"오장"}]},{id:4679,hanja:"魁",strokes:"14",def:{en:["chief","leader","best","monstrous"],kr:["으뜸","괴"]},hunum:[{kor:"괴",def:"으뜸"}]},{id:4680,hanja:"反",strokes:"4",def:{en:["reverse","opposite","contrary","anti"],kr:["되돌릴","번"]},hunum:[{kor:"반",def:"돌이킬"},{kor:"번",def:"되돌릴"}]},{id:4681,hanja:"帉",strokes:"7",def:{en:[],kr:["행주","분"]},hunum:[{kor:"분",def:"걸레"}]},{id:4682,hanja:"代",strokes:"5",def:{en:["replace","replacement","era","generation"],kr:["대신할","대"]},hunum:[{kor:"대",def:"대신할"}]},{id:4683,hanja:"魂",strokes:"14",def:{en:["soul","spirit"],kr:["넋","혼"]},hunum:[{kor:"혼",def:"넋"}]},{id:4684,hanja:"糶",strokes:"25",def:{en:["sell grains"],kr:["쌀","내어","팔","조"]},hunum:[{kor:"조",def:"쌀 내어 팔"}]},{id:4685,hanja:"臠",strokes:"25",def:{en:["small lump of meat","sliced meat"],kr:["저민고기","련"]},hunum:[{kor:"련",def:"저민고기"}]},{id:4686,hanja:"令",strokes:"5",def:{en:["command","order","magistrate","allow","cause"],kr:["시킬","령"]},hunum:[{kor:"령",def:"명령"}]},{id:4687,hanja:"陴",strokes:"11",def:{en:["a parapet on a city wall"],kr:["성가퀴","비"]},hunum:[{kor:"비",def:"성가퀴"}]},{id:4688,hanja:"夾",strokes:"7",def:{en:["be wedged or inserted between"],kr:["가까울","협"]},hunum:[{kor:"협",def:"곁"}]},{id:4689,hanja:"魃",strokes:"15",def:{en:["drought demon"],kr:["가물","귀신","발"]},hunum:[{kor:"발",def:"가물 귀신"}]},{id:4690,hanja:"叏",strokes:"5",def:{en:[],kr:["나누어","가를","괘"]},hunum:[{kor:"괘",def:"나누어 가를"}]},{id:4691,hanja:"以",strokes:"5",def:{en:["by means of","thereby","therefore","consider as","in order to"],kr:["거느릴","이"]},hunum:[{kor:"이",def:"써"}]},{id:4692,hanja:"陵",strokes:"11",def:{en:["hill","mound","mausoleum"],kr:["큰","언덕","릉"]},hunum:[{kor:"릉",def:"큰 언덕"}]},{id:4693,hanja:"希",strokes:"7",def:{en:["rare","hope","expect","strive for"],kr:["바랄","희"]},hunum:[{kor:"희",def:"바랄"}]},{id:4694,hanja:"谞",strokes:"11",def:{en:["knowledge","discrimination","treachery"],kr:["諝의","略字"]},hunum:[{kor:"서",def:"슬기"}]},{id:4695,hanja:"糸",strokes:"6",def:{en:["silk","KangXi radical"],kr:["가는","실","사"]},hunum:[{kor:"사",def:"가는 실"}]},{id:4696,hanja:"陶",strokes:"11",def:{en:["pottery","ceramics"],kr:["순임금의","신하","요"]},hunum:[{kor:"도",def:"질 그도"},{kor:"요",def:"화락할"}]},{id:4697,hanja:"鄉",strokes:"12",def:{en:["country","rural","village"],kr:["鄕과","同字"]},hunum:[{kor:"향",def:"시골"}]},{id:4698,hanja:"陷",strokes:"11",def:{en:["submerge","sink","plunge","trap"],kr:["빠질","함"]},hunum:[{kor:"함",def:"빠질"}]},{id:4699,hanja:"瞋",strokes:"15",def:{en:["glare with anger"],kr:["부릅뜰","진"]},hunum:[{kor:"진",def:"부릅뜰"}]},{id:4700,hanja:"魄",strokes:"15",def:{en:["vigor","body","dark part of moon"],kr:["넋","백"]},hunum:[{kor:"백",def:"넋"}]},{id:4701,hanja:"臣",strokes:"6",def:{en:["minister","statesman","official"],kr:["두려울","신"]},hunum:[{kor:"신",def:"신하"}]},{id:4702,hanja:"魅",strokes:"15",def:{en:["kind of forest demon","elf"],kr:["도깨비","매"]},hunum:[{kor:"매",def:"도깨비"}]},{id:4703,hanja:"糺",strokes:"7",def:{en:["to collaborate","to band together"],kr:["거둘","규"]},hunum:[{kor:"규",def:"거둘"}]},{id:4704,hanja:"叒",strokes:"6",def:{en:["obedient","united"],kr:["동방귀신나무","약"]},hunum:[{kor:"약",def:"동방귀신나무"}]},{id:4705,hanja:"陸",strokes:"11",def:{en:["land","continental","army","an accounting form of U"],kr:["六"]},hunum:[{kor:"륙",def:"뭍"}]},{id:4706,hanja:"臥",strokes:"8",def:{en:["lie down","crouch"],kr:["쉴","와"]},hunum:[{kor:"와",def:"누울"}]},{id:4707,hanja:"系",strokes:"7",def:{en:["system","line","link","connection"],kr:["이을","계"]},hunum:[{kor:"계",def:"이을"}]},{id:4708,hanja:"瞍",strokes:"15",def:{en:["blind","no pupil in the eye"],kr:["판수","수"]},hunum:[{kor:"수",def:"소경"}]},{id:4709,hanja:"叓",strokes:"7",def:{en:["affair","matter","work"],kr:["事의","古字"]},hunum:[{kor:"사",def:"일"}]},{id:4710,hanja:"険",strokes:"11",def:{en:["narrow pass","strategic point"],kr:["險의","略字"]},hunum:[{kor:"험",def:"험할"}]},{id:4711,hanja:"瞎",strokes:"15",def:{en:["blind","reckless","rash"],kr:["애꾸눈","할"]},hunum:[{kor:"할",def:"애꾸눈"}]},{id:4712,hanja:"叔",strokes:"8",def:{en:["father"],kr:["끝","숙"]},hunum:[{kor:"숙",def:"아재비"}]},{id:4713,hanja:"叕",strokes:"8",def:{en:[],kr:["잇댈","철"]},hunum:[{kor:"철",def:"이을"}]},{id:4714,hanja:"臧",strokes:"14",def:{en:["good","right","generous","command"],kr:["착할","장"]},hunum:[{kor:"장",def:"착할"}]},{id:4715,hanja:"魈",strokes:"17",def:{en:["mischevious","one footed spirit that dwells in the mountains"],kr:["산도깨비","소"]},hunum:[{kor:"소",def:"산도깨비"}]},{id:4716,hanja:"帑",strokes:"8",def:{en:["a treasury","public funds"],kr:["나라","곳집","탕"]},hunum:[{kor:"노",def:"처자식"},{kor:"탕",def:"나라 곳집"}]},{id:4717,hanja:"取",strokes:"8",def:{en:["take","receive","obtain","select"],kr:["장가들","취"]},hunum:[{kor:"취",def:"거둘"}]},{id:4718,hanja:"陼",strokes:"12",def:{en:["islet"],kr:["언덕","저"]},hunum:[{kor:"저",def:"모래섬"}]},{id:4719,hanja:"臨",strokes:"17",def:{en:["draw near","approach","descend"],kr:["임할","림"]},hunum:[{kor:"림",def:"임할"}]},{id:4720,hanja:"糾",strokes:"8",def:{en:["investigate","inspect"],kr:["삼합노","규"]},hunum:[{kor:"교",def:"맺힐"},{kor:"규",def:"삼합노"}]},{id:4721,hanja:"瞑",strokes:"15",def:{en:["close eyes"],kr:["눈","감을","명"]},hunum:[{kor:"면",def:"눈 감을"},{kor:"명",def:"눈 감을"}]},{id:4722,hanja:"受",strokes:"8",def:{en:["receive","accept","get","bear","stand"],kr:["받을","수"]},hunum:[{kor:"수",def:"이을"}]},{id:4723,hanja:"仭",strokes:"5",def:{en:["ancient unit of measure"],kr:["깊을","인"]},hunum:[{kor:"인",def:"길"}]},{id:4724,hanja:"陽",strokes:"12",def:{en:["light","sun"],kr:["거짓","양"]},hunum:[{kor:"양",def:"볕"}]},{id:4725,hanja:"魋",strokes:"18",def:{en:["bear"],kr:["북상투","추"]},hunum:[{kor:"추",def:"북상투"}]},{id:4726,hanja:"自",strokes:"6",def:{en:["self","private","personal","from"],kr:["스스로","자"]},hunum:[{kor:"자",def:"스스로"}]},{id:4727,hanja:"变",strokes:"8",def:{en:["change","transform","alter","rebel"]},hunum:[{kor:"변",def:"변할"}]},{id:4728,hanja:"仮",strokes:"6",def:{en:["falsehood","deception","vacation"],kr:["反과","同字"]},hunum:[{kor:"가",def:"거짓"},{kor:"반",def:"돌이킬"}]},{id:4729,hanja:"桭",strokes:"11",def:{en:[],kr:["평고대","진"]},hunum:[{kor:"진",def:"평고대"}]},{id:4730,hanja:"叙",strokes:"9",def:{en:["express","state","relate","narrate"],kr:["敍의","俗字"]},hunum:[{kor:"서",def:"펼"}]},{id:4731,hanja:"鄒",strokes:"13",def:{en:["name of an ancient state","surname"],kr:["추나라","추"]},hunum:[{kor:"추",def:"추나라"}]},{id:4732,hanja:"魍",strokes:"18",def:{en:["demons","mountain spirits"],kr:["도깨비","망"]},hunum:[{kor:"망",def:"도깨비"}]},{id:4733,hanja:"臬",strokes:"10",def:{en:["law","rule","door post"],kr:["과녁","얼"]},hunum:[{kor:"얼",def:"법"}]},{id:4734,hanja:"叚",strokes:"9",def:{en:["false"],kr:["빌","가"]},hunum:[{kor:"가",def:"빌"}]},{id:4735,hanja:"帕",strokes:"8",def:{en:["turban","kerchief","veil","wrap"],kr:["머리","동이수건","파"]},hunum:[{kor:"말",def:"머리띠"},{kor:"파",def:"머리 동이수건"}]},{id:4736,hanja:"仰",strokes:"6",def:{en:["raise the head to look","look up to","rely on","admire"],kr:["우러를","앙"]},hunum:[{kor:"앙",def:"우러를"}]},{id:4737,hanja:"臭",strokes:"10",def:{en:["smell","stink","emit foul odor"],kr:["고약한","이름","취"]},hunum:[{kor:"취",def:"냄새"}]},{id:4738,hanja:"帖",strokes:"8",def:{en:["invitation card","notice"],kr:["표제","체"]},hunum:[{kor:"첩",def:"표제"},{kor:"체",def:"표제"}]},{id:4739,hanja:"持",strokes:"9",def:{en:["sustain","support","hold","grasp"],kr:["가질","지"]},hunum:[{kor:"지",def:"가질"}]},{id:4740,hanja:"桯",strokes:"11",def:{en:["table"],kr:["걸상","정"]},hunum:[{kor:"정",def:"서안"}]},{id:4741,hanja:"魎",strokes:"18",def:{en:["a kind of monster"],kr:["도깨비","량"]},hunum:[{kor:"량",def:"도깨비"}]},{id:4742,hanja:"叛",strokes:"9",def:{en:["rebel","rebellion","rebellious"],kr:["배반할","반"]},hunum:[{kor:"반",def:"배반할"}]},{id:4743,hanja:"仲",strokes:"6",def:{en:["middle brother","go between","mediator","surname"],kr:["버금","중"]},hunum:[{kor:"중",def:"버금"}]},{id:4744,hanja:"鄔",strokes:"13",def:{en:["various place names","surname","transliteration of Sanskrit"],kr:["성","이름","오"]},hunum:[{kor:"오",def:"성 이름"}]},{id:4745,hanja:"魏",strokes:"18",def:{en:["kingdom of Wei","surname"],kr:["우뚝할","위"]},hunum:[{kor:"위",def:"위나라"}]},{id:4746,hanja:"瞖",strokes:"16",def:{en:["a cataract or film over the eye"],kr:["눈에","백태","낄","예"]},hunum:[{kor:"예",def:"눈에 백태 낄"}]},{id:4747,hanja:"挂",strokes:"9",def:{en:["hang","suspend","suspense"],kr:["그림족자","괘"]},hunum:[{kor:"괘",def:"그림족자"}]},{id:4748,hanja:"鄕",strokes:"13",def:{en:["country","rural","village"],kr:["고향","향"]},hunum:[{kor:"향",def:"시골"}]},{id:4749,hanja:"帘",strokes:"8",def:{en:["flag"],kr:["주막기","렴"]},hunum:[{kor:"렴",def:"주막기"}]},{id:4750,hanja:"仳",strokes:"6",def:{en:["separate","part company"],kr:["떠날","비"]},hunum:[{kor:"비",def:"떠날"}]},{id:4751,hanja:"帙",strokes:"8",def:{en:["book cover","satchel or bag"],kr:["책갑","질"]},hunum:[{kor:"절",def:"책권 차례"},{kor:"질",def:"책갑"}]},{id:4752,hanja:"魑",strokes:"21",def:{en:["a mountain demon resembling a tiger"],kr:["도깨비","리"]},hunum:[{kor:"리",def:"도깨비"}]},{id:4753,hanja:"叞",strokes:"10",def:{en:[],kr:["다리미","위"]},hunum:[{kor:"위",def:"안위할"}]},{id:4754,hanja:"帚",strokes:"8",def:{en:["broom","broomstick"],kr:["털","추"]},hunum:[{kor:"추",def:"비"}]},{id:4755,hanja:"叟",strokes:"10",def:{en:["old man","elder"],kr:["쌀","씻는","소리","수"]},hunum:[{kor:"수",def:"어른"}]},{id:4756,hanja:"仵",strokes:"6",def:{en:["similar"],kr:["같을","오"]},hunum:[{kor:"오",def:"짝"}]},{id:4757,hanja:"瞙",strokes:"16",def:{en:[],kr:["눈","흐릴","막"]},hunum:[{kor:"막",def:"눈 흐릴"}]},{id:4758,hanja:"桴",strokes:"11",def:{en:["raft","drum stick","ridge pole"],kr:["마룻대","부"]},hunum:[{kor:"부",def:"마룻대"}]},{id:4759,hanja:"流",strokes:"9",def:{en:["flow","circulate","drift","class"],kr:["흐를","류"]},hunum:[{kor:"류",def:"흐를"}]},{id:4760,hanja:"帛",strokes:"8",def:{en:["silks","fabrics","wealth","property"],kr:["비단","백"]},hunum:[{kor:"백",def:"비단"}]},{id:4761,hanja:"件",strokes:"6",def:{en:["numerary adjunct for article","matter"],kr:["나눌","건"]},hunum:[{kor:"건",def:"조건"}]},{id:4762,hanja:"至",strokes:"6",def:{en:["reach","arrive","extremely","very"],kr:["이를","지"]},hunum:[{kor:"지",def:"이를"}]},{id:4763,hanja:"蛀",strokes:"11",def:{en:["insects that eat books","clothes"],kr:["나무좀","주"]},hunum:[{kor:"주",def:"나무좀"}]},{id:4764,hanja:"鄙",strokes:"14",def:{en:["mean","low"],kr:["다라울","비"]},hunum:[{kor:"비",def:"다라울"}]},{id:4765,hanja:"魔",strokes:"21",def:{en:["demon","evil spirits","magic power"],kr:["마귀","마"]},hunum:[{kor:"마",def:"마귀"}]},{id:4766,hanja:"叡",strokes:"16",def:{en:["astute","profound","shrewd"],kr:["어질","예"]},hunum:[{kor:"예",def:"밝을"}]},{id:4767,hanja:"致",strokes:"9",def:{en:["send","deliver","present","cause"],kr:["연구할","치"]},hunum:[{kor:"치",def:"이를"}]},{id:4768,hanja:"叢",strokes:"18",def:{en:["bush","shrub","thicket","collection"],kr:["번잡할","총"]},hunum:[{kor:"총",def:"떨기"}]},{id:4769,hanja:"指",strokes:"9",def:{en:["finger","toe","point","indicate"],kr:["손가락","지"]},hunum:[{kor:"지",def:"손가락"}]},{id:4770,hanja:"帝",strokes:"9",def:{en:["supreme ruler","emperor","god"],kr:["임금","제"]},hunum:[{kor:"제",def:"임금"}]},{id:4771,hanja:"桶",strokes:"11",def:{en:["pail","bucket","tub","cask","keg"],kr:["엿되들이","통","통"]},hunum:[{kor:"용",def:"곡식 셈하는 단위 휘"},{kor:"통",def:"엿되들이 통"}]},{id:4772,hanja:"价",strokes:"6",def:{en:["price","value"],kr:["사신","개"]},hunum:[{kor:"개",def:"착할"}]},{id:4773,hanja:"桷",strokes:"11",def:{en:["rafter","malus toringo"],kr:["서까래","각"]},hunum:[{kor:"각",def:"서까래"}]},{id:4774,hanja:"挈",strokes:"10",def:{en:["assist","help","lead by hand"],kr:["손에들","설"]},hunum:[{kor:"계",def:"끊을"},{kor:"설",def:"손에들"}]},{id:4775,hanja:"口",strokes:"3",def:{en:["mouth","open end","entrance","gate"],kr:["입","구"]},hunum:[{kor:"구",def:"입"}]},{id:4776,hanja:"臶",strokes:"12",def:{en:[],kr:["거듭","천"]},hunum:[{kor:"천",def:"거듭"}]},{id:4777,hanja:"浅",strokes:"9",def:{en:["shallow","not deep","superficial"],kr:["얕을","천"]},hunum:[{kor:"천",def:"얕을"}]},{id:4778,hanja:"按",strokes:"9",def:{en:["put hand on","press down with hand"],kr:["막을","알"]},hunum:[{kor:"안",def:"살필"},{kor:"알",def:"막을"}]},{id:4779,hanja:"古",strokes:"5",def:{en:["old","classic","ancient"],kr:["옛","고"]},hunum:[{kor:"고",def:"옛"}]},{id:4780,hanja:"魘",strokes:"24",def:{en:["nightmare","bad dreams"],kr:["잠꼬대할","염"]},hunum:[{kor:"염",def:"잠꼬대할"}]},{id:4781,hanja:"瞞",strokes:"16",def:{en:["deceive","lie","eyes half"],kr:["속일","만"]},hunum:[{kor:"만",def:"속일"}]},{id:4782,hanja:"句",strokes:"5",def:{en:["sentence"],kr:["글귀","귀"]},hunum:[{kor:"구",def:"글귀절"},{kor:"귀",def:"글귀"}]},{id:4783,hanja:"蛅",strokes:"11",def:{en:["a caterpillar"]},hunum:[{kor:"점",def:"쐐기"}]},{id:4784,hanja:"另",strokes:"5",def:{en:["another","separate","other"],kr:["헤어질","령"]},hunum:[{kor:"령",def:"나눌"}]},{id:4785,hanja:"任",strokes:"6",def:{en:["trust to","rely on","appoint","to bear","duty","office","allow"],kr:["맡길","임"]},hunum:[{kor:"임",def:"맡길"}]},{id:4786,hanja:"蛆",strokes:"11",def:{en:["maggots"],kr:["지네","저"]},hunum:[{kor:"저",def:"구더기"}]},{id:4787,hanja:"鄞",strokes:"14",def:{en:["county in Zhejiang province"],kr:["땅이름","은"]},hunum:[{kor:"은",def:"땅이름"}]},{id:4788,hanja:"魚",strokes:"11",def:{en:["fish","surname","KangXi radical"],kr:["물고기","어"]},hunum:[{kor:"어",def:"물고기"}]},{id:4789,hanja:"瞠",strokes:"16",def:{en:["look at","stare at","gaze at"],kr:["똑바로","볼","쟁"]},hunum:[{kor:"당",def:"바로볼"},{kor:"쟁",def:"똑바로 볼"}]},{id:4790,hanja:"挌",strokes:"9",def:{en:["fight"],kr:["들","격"]},hunum:[{kor:"격",def:"칠"}]},{id:4791,hanja:"臺",strokes:"14",def:{en:["tower","lookout","stage","platform"],kr:["능","대"]},hunum:[{kor:"대",def:"능"}]},{id:4792,hanja:"蛇",strokes:"11",def:{en:["snake"],kr:["든든할","이"]},hunum:[{kor:"사",def:"뱀"},{kor:"이",def:"든든할"}]},{id:4793,hanja:"叨",strokes:"5",def:{en:["talkative","quarrelous"],kr:["탐할","도"]},hunum:[{kor:"도",def:"탐할"}]},{id:4794,hanja:"份",strokes:"6",def:{en:["portion","part","duty"],kr:["빛날","빈"]},hunum:[{kor:"빈",def:"빛날"}]},{id:4795,hanja:"臻",strokes:"16",def:{en:["reach","arrive","utmost","superior"],kr:["이를","진"]},hunum:[{kor:"진",def:"이를"}]},{id:4796,hanja:"魜",strokes:"13",def:{en:["mermaid","manatee"],kr:["인어","인"]},hunum:[{kor:"인",def:"인어"}]},{id:4797,hanja:"瞢",strokes:"16",def:{en:["eyesight obscured","to feel ashamed"],kr:["어두울","몽"]},hunum:[{kor:"몽",def:"어두울"}]},{id:4798,hanja:"叩",strokes:"5",def:{en:["knock","ask","kowtow","bow"],kr:["두드릴","고"]},hunum:[{kor:"고",def:"두드릴"}]},{id:4799,hanja:"臼",strokes:"6",def:{en:["mortar","bone joint socket"],kr:["절구","구"]},hunum:[{kor:"구",def:"절구"}]},{id:4800,hanja:"谷",strokes:"7",def:{en:["valley","gorge","ravine"],kr:["나라이름","욕"]},hunum:[{kor:"곡",def:"골짜기"},{kor:"욕",def:"성씨"}]},{id:4801,hanja:"蛉",strokes:"11",def:{en:["dragonfly","libellulidae"],kr:["장자리","령"]},hunum:[{kor:"령",def:"장자리"}]},{id:4802,hanja:"帥",strokes:"9",def:{en:["commander","commander"],kr:["장수","수"]},hunum:[{kor:"솔",def:"거느릴"},{kor:"수",def:"주장할"}]},{id:4803,hanja:"仿",strokes:"6",def:{en:["imitate","copy","as if"],kr:["헤멜","방"]},hunum:[{kor:"방",def:"헤멜"}]},{id:4804,hanja:"只",strokes:"5",def:{en:["only","just","simply"],kr:["다만","지"]},hunum:[{kor:"지",def:"다만"}]},{id:4805,hanja:"鄢",strokes:"14",def:{en:["name of a district in Honan"],kr:["땅이름","언"]},hunum:[{kor:"언",def:"땅이름"}]},{id:4806,hanja:"桾",strokes:"11",def:{en:[],kr:["고욤나무","군"]},hunum:[{kor:"군",def:"고욤나무"}]},{id:4807,hanja:"挐",strokes:"10",def:{en:["drag"],kr:["이끌","녀"]},hunum:[{kor:"나",def:"붙잡을"},{kor:"녀",def:"이끌"}]},{id:4808,hanja:"浌",strokes:"9",def:{en:[]},hunum:[{kor:"벌",def:"물 이름"}]},{id:4809,hanja:"带",strokes:"9",def:{en:["belt","girdle","band","strap","zone"],kr:["띠","대"]},hunum:[{kor:"대",def:"띠"}]},{id:4810,hanja:"桿",strokes:"11",def:{en:["pole","stick","club","pole as unit"],kr:["막대기","한"]},hunum:[{kor:"한",def:"막대기"}]},{id:4811,hanja:"鄣",strokes:"14",def:{en:["name of an ancient city in N","near Shandong"],kr:["나라이름","장"]},hunum:[{kor:"장",def:"나라이름"}]},{id:4812,hanja:"臾",strokes:"8",def:{en:["moment","instant","short while"],kr:["활이","뒤로","젖혀질","유"]},hunum:[{kor:"유",def:"잠간"}]},{id:4813,hanja:"蛋",strokes:"11",def:{en:["eggs","term of abuse"],kr:["오랑캐","이름","단"]},hunum:[{kor:"단",def:"오랑캐 이름"}]},{id:4814,hanja:"瞥",strokes:"17",def:{en:["take fleeting glance at"],kr:["언뜻","볼","별"]},hunum:[{kor:"별",def:"언뜻 볼"}]},{id:4815,hanja:"挑",strokes:"9",def:{en:["a load carried on the shoulders","to carry"],kr:["돋울","조"]},hunum:[{kor:"도",def:"돋을"},{kor:"조",def:"돋울"}]},{id:4816,hanja:"叫",strokes:"5",def:{en:["cry","shout","hail","greet","call"],kr:["부를","규"]},hunum:[{kor:"규",def:"부를"}]},{id:4817,hanja:"挒",strokes:"9",def:{en:[]},hunum:[{kor:"렬",def:"비틀"}]},{id:4818,hanja:"召",strokes:"5",def:{en:["imperial decree","summon"],kr:["대추","조"]},hunum:[{kor:"소",def:"부를"},{kor:"조",def:"대추"}]},{id:4819,hanja:"帨",strokes:"10",def:{en:["handkerchief","kerchief","shawl"],kr:["손수건","세"]},hunum:[{kor:"세",def:"차는 수건"}]},{id:4820,hanja:"蛍",strokes:"11",def:{en:["glow","luminous insect"],kr:["螢과","同字"]},hunum:[{kor:"형",def:"반딧불이"}]},{id:4821,hanja:"叭",strokes:"5",def:{en:["trumpet"],kr:["입","벌릴","팔"]},hunum:[{kor:"팔",def:"나팔"}]},{id:4822,hanja:"叮",strokes:"5",def:{en:["exhort or enjoin repeatedly"],kr:["정성스러울","정"]},hunum:[{kor:"정",def:"단단히 부탁할"}]},{id:4823,hanja:"鄧",strokes:"15",def:{en:["surname"],kr:["나라","이름","등"]},hunum:[{kor:"등",def:"나라 이름"}]},{id:4824,hanja:"可",strokes:"5",def:{en:["may","can","possibly"],kr:["오랑캐","임금","이름","극"]},hunum:[{kor:"가",def:"옳을"},{kor:"극",def:"오랑캐 임금 이름"}]},{id:4825,hanja:"師",strokes:"10",def:{en:["teacher","master","specialist","multitude","troops"],kr:["스승","사"]},hunum:[{kor:"사",def:"스승"}]},{id:4826,hanja:"瞪",strokes:"17",def:{en:["stare at"],kr:["바로","볼","징"]},hunum:[{kor:"징",def:"바로 볼"}]},{id:4827,hanja:"台",strokes:"5",def:{en:["platform","unit","term of address"],kr:["늙을","태"]},hunum:[{kor:"이",def:"자신"},{kor:"태",def:"별"}]},{id:4828,hanja:"叱",strokes:"5",def:{en:["scold","shout at","bawl out"],kr:["꾸짖을","질"]},hunum:[{kor:"질",def:"꾸짖을"}]},{id:4829,hanja:"谿",strokes:"17",def:{en:["valley","gorge","mountain stream"],kr:["시내","계"]},hunum:[{kor:"계",def:"시내"}]},{id:4830,hanja:"席",strokes:"10",def:{en:["seat","mat","take seat","banquet"],kr:["자리","석"]},hunum:[{kor:"석",def:"자리"}]},{id:4831,hanja:"瞬",strokes:"17",def:{en:["wink","blink","in a wink","a flash"],kr:["잠깐","순"]},hunum:[{kor:"순",def:"눈 깜작일"}]},{id:4832,hanja:"史",strokes:"5",def:{en:["history","chronicle","annals"],kr:["역사","사"]},hunum:[{kor:"사",def:"역사"}]},{id:4833,hanja:"魦",strokes:"15",def:{en:["shark family","including some rays and skates"],kr:["鯊와","同字"]},hunum:[{kor:"사",def:"문절망둑"}]},{id:4834,hanja:"瞭",strokes:"17",def:{en:["bright","clear","clear"],kr:["밝을","료"]},hunum:[{kor:"료",def:"밝을"}]},{id:4835,hanja:"右",strokes:"5",def:{en:["right","west","right"],kr:["도울","우"]},hunum:[{kor:"우",def:"오른쪽"}]},{id:4836,hanja:"帯",strokes:"10",def:{en:["belt"]},hunum:[{kor:"대",def:"띠"}]},{id:4837,hanja:"壁",strokes:"16",def:{en:["partition wall","walls of a house"],kr:["벽","벽"]},hunum:[{kor:"벽",def:"벽"}]},{id:4838,hanja:"牀",strokes:"8",def:{en:["bed","couch","bench","chassis"],kr:["평상","상"]},hunum:[{kor:"상",def:"평상"}]},{id:4839,hanja:"叴",strokes:"5",def:{en:["a three"],kr:["소리","높일","구"]},hunum:[{kor:"구",def:"소리 높일"}]},{id:4840,hanja:"帰",strokes:"10",def:{en:["return","return to","revert to"],kr:["歸의","俗字"]},hunum:[{kor:"귀",def:"돌아갈"}]},{id:4841,hanja:"蛔",strokes:"12",def:{en:["tapeworm"],kr:["거위","회"]},hunum:[{kor:"회",def:"거위"}]},{id:4842,hanja:"叵",strokes:"5",def:{en:["cannot","be unable do","improbable","thereupon"],kr:["술잔","파"]},hunum:[{kor:"파",def:"못할"}]},{id:4843,hanja:"鄭",strokes:"15",def:{en:["state in today","surname"],kr:["성씨","정"]},hunum:[{kor:"정",def:"나라이름"}]},{id:4844,hanja:"叶",strokes:"5",def:{en:["to harmonize","to rhyme","to unite"],kr:["화합할","협"]},hunum:[{kor:"협",def:"화합할"}]},{id:4845,hanja:"壃",strokes:"16",def:{en:[],kr:["疆과","同字"]},hunum:[{kor:"강",def:"지경"}]},{id:4846,hanja:"瞰",strokes:"17",def:{en:["watch","spy","overlook","look down"],kr:["내려다","볼","감"]},hunum:[{kor:"감",def:"굽어볼"}]},{id:4847,hanja:"号",strokes:"5",def:{en:["mark","sign","symbol","number"],kr:["號의","略字"]},hunum:[{kor:"호",def:"이름"}]},{id:4848,hanja:"牂",strokes:"10",def:{en:["female sheep","ewe"],kr:["암양","장"]},hunum:[{kor:"장",def:"암양"}]},{id:4849,hanja:"浙",strokes:"10",def:{en:["Zhejiang province","river"],kr:["물이름","절"]},hunum:[{kor:"절",def:"쌀 씻을"}]},{id:4850,hanja:"帳",strokes:"11",def:{en:["tent","screen","mosquito net"],kr:["휘장","장막","장"]},hunum:[{kor:"장",def:"휘장 장막"}]},{id:4851,hanja:"壅",strokes:"16",def:{en:["to obstruct"],kr:["북돋울","옹"]},hunum:[{kor:"옹",def:"막을"}]},{id:4852,hanja:"鄰",strokes:"15",def:{en:["neighbor","neighborhood"],kr:["이웃","린"]},hunum:[{kor:"린",def:"이웃"}]},{id:4853,hanja:"司",strokes:"5",def:{en:["take charge of","control","manage","officer"],kr:["맡을","사"]},hunum:[{kor:"사",def:"맡을"}]},{id:4854,hanja:"鄱",strokes:"15",def:{en:["county and lake in Jiangxi"],kr:["땅이름","파"]},hunum:[{kor:"파",def:"땅이름"}]},{id:4855,hanja:"浚",strokes:"10",def:{en:["dredge"],kr:["깊을","준"]},hunum:[{kor:"준",def:"깊을"}]},{id:4856,hanja:"瞳",strokes:"17",def:{en:["pupil of eye"],kr:["눈동자","동"]},hunum:[{kor:"동",def:"눈동자"}]},{id:4857,hanja:"粁",strokes:"9",def:{en:["km"],kr:["킬로메트르","천"]},hunum:[{kor:"천",def:"킬로메트르"}]},{id:4858,hanja:"壇",strokes:"16",def:{en:["altar","arena","examination hall"],kr:["제터","단"]},hunum:[{kor:"단",def:"제터"}]},{id:4859,hanja:"鄲",strokes:"15",def:{en:["county in Hebei province"],kr:["조나라","서울","단"]},hunum:[{kor:"단",def:"조나라 서울"}]},{id:4860,hanja:"蛙",strokes:"12",def:{en:["frog"],kr:["음란한","소리","왜"]},hunum:[{kor:"와",def:"개구리"},{kor:"왜",def:"개구리"}]},{id:4861,hanja:"叺",strokes:"5",def:{en:["a straw bag","a tobacco pouch"],kr:["가마니","입"]},hunum:[{kor:"입",def:"가마니"}]},{id:4862,hanja:"牆",strokes:"17",def:{en:["wall"],kr:["담","장"]},hunum:[{kor:"장",def:"담"}]},{id:4863,hanja:"浜",strokes:"10",def:{en:["creek","stream","beach","sea coast"],kr:["물가","빈"]},hunum:[{kor:"빈",def:"물가"}]},{id:4864,hanja:"帶",strokes:"11",def:{en:["belt","girdle","band","strap","zone"],kr:["띠","대"]},hunum:[{kor:"대",def:"띠"}]},{id:4865,hanja:"片",strokes:"4",def:{en:["slice","splinter","strip","rad"],kr:["성씨","편"]},hunum:[{kor:"편",def:"조각"}]},{id:4866,hanja:"蛛",strokes:"12",def:{en:["spider"],kr:["거미","주"]},hunum:[{kor:"주",def:"거미"}]},{id:4867,hanja:"鄴",strokes:"16",def:{en:["place in today"],kr:["성씨","업"]},hunum:[{kor:"업",def:"땅이름"}]},{id:4868,hanja:"魯",strokes:"15",def:{en:["foolish","stupid","rash","vulgar"],kr:["노둔할","로"]},hunum:[{kor:"로",def:"노둔할"}]},{id:4869,hanja:"粃",strokes:"10",def:{en:["empty husks of grain"],kr:["쭉정이","비"]},hunum:[{kor:"비",def:"쭉정이"}]},{id:4870,hanja:"帷",strokes:"11",def:{en:["tent","curtain","screen"],kr:["휘장","유"]},hunum:[{kor:"유",def:"휘장"}]},{id:4871,hanja:"版",strokes:"8",def:{en:["printing blocks","edition"],kr:["인쇄할","판"]},hunum:[{kor:"판",def:"조각"}]},{id:4872,hanja:"常",strokes:"11",def:{en:["common","normal","frequent","regular"],kr:["항상","상"]},hunum:[{kor:"상",def:"항상"}]},{id:4873,hanja:"鄶",strokes:"16",def:{en:["state in today"],kr:["나라이름","회"]},hunum:[{kor:"회",def:"나라이름"}]},{id:4874,hanja:"蛞",strokes:"12",def:{en:["snail","slug","mole cricket"],kr:["괄태충","활"]},hunum:[{kor:"활",def:"괄태충"}]},{id:4875,hanja:"壌",strokes:"16",def:{en:["soil","loam","earth","rich"],kr:["壤의","略字"]},hunum:[{kor:"양",def:"흙"}]},{id:4876,hanja:"牋",strokes:"12",def:{en:["memorandum","official note"],kr:["문체이름","전"]},hunum:[{kor:"전",def:"글"}]},{id:4877,hanja:"蛟",strokes:"12",def:{en:["scaly dragon with four legs"],kr:["교룡","교"]},hunum:[{kor:"교",def:"교룡"}]},{id:4878,hanja:"瞹",strokes:"18",def:{en:["clouded","obscure"],kr:["흐릿할","애"]},hunum:[{kor:"애",def:"흐릿할"}]},{id:4879,hanja:"浡",strokes:"10",def:{en:["burst forth","rise","vigorous"],kr:["일어날","발"]},hunum:[{kor:"발",def:"일어날"}]},{id:4880,hanja:"壎",strokes:"17",def:{en:["instrument"],kr:["진나팔","훈"]},hunum:[{kor:"훈",def:"진나팔"}]},{id:4881,hanja:"魴",strokes:"15",def:{en:["bream"],kr:["방어","방"]},hunum:[{kor:"방",def:"방어"}]},{id:4882,hanja:"牌",strokes:"12",def:{en:["signboard","placard"],kr:["방패","패"]},hunum:[{kor:"배",def:"배지"},{kor:"패",def:"방 붙일"}]},{id:4883,hanja:"瞻",strokes:"18",def:{en:["look","look out for","respect"],kr:["볼","첨"]},hunum:[{kor:"첨",def:"볼"}]},{id:4884,hanja:"鄺",strokes:"18",def:{en:["surname"],kr:["성","광"]},hunum:[{kor:"광",def:"성"}]},{id:4885,hanja:"粉",strokes:"10",def:{en:["powder","face powder","plaster"],kr:["가루","분"]},hunum:[{kor:"분",def:"가루"}]},{id:4886,hanja:"浣",strokes:"10",def:{en:["to wash","to rinse"],kr:["씻을","완"]},hunum:[{kor:"완",def:"옷 빨"}]},{id:4887,hanja:"帽",strokes:"12",def:{en:["hat","cap","cap"],kr:["모자","모"]},hunum:[{kor:"모",def:"모자"}]},{id:4888,hanja:"瞼",strokes:"18",def:{en:["eyelid"],kr:["눈시울","검"]},hunum:[{kor:"검",def:"눈시울"}]},{id:4889,hanja:"挨",strokes:"10",def:{en:["near","close by","next to","towards","against","to wait","to lean on"],kr:["밀칠","애"]},hunum:[{kor:"애",def:"밀칠"}]},{id:4890,hanja:"浤",strokes:"10",def:{en:["beating of ocean","surging of wate"],kr:["용솟음할","굉"]},hunum:[{kor:"굉",def:"용솟음할"}]},{id:4891,hanja:"帿",strokes:"12",def:{en:["marquis","lord","target in archery"],kr:["과녁","후"]},hunum:[{kor:"후",def:"과녁"}]},{id:4892,hanja:"壑",strokes:"17",def:{en:["bed of torrent","narrow ravine"],kr:["골짜기","학"]},hunum:[{kor:"학",def:"골짜기"}]},{id:4893,hanja:"蛣",strokes:"12",def:{en:[],kr:["장구벌레","길"]},hunum:[{kor:"길",def:"장구벌레"}]},{id:4894,hanja:"瞽",strokes:"18",def:{en:["blind","blind musician","stupid"],kr:["소경","고"]},hunum:[{kor:"고",def:"소경"}]},{id:4895,hanja:"浥",strokes:"10",def:{en:["moist","wet","dampen"],kr:["흠치르르할","읍"]},hunum:[{kor:"읍",def:"젖을"}]},{id:4896,hanja:"蛤",strokes:"12",def:{en:["clam"],kr:["조개","합"]},hunum:[{kor:"합",def:"조개"}]},{id:4897,hanja:"浦",strokes:"10",def:{en:["bank of river","shore","surname"],kr:["갯가","포"]},hunum:[{kor:"포",def:"물가"}]},{id:4898,hanja:"挪",strokes:"10",def:{en:["move","shift on one side"],kr:["옮길","나"]},hunum:[{kor:"나",def:"옮길"}]},{id:4899,hanja:"挫",strokes:"10",def:{en:["push down","chop down","grind"],kr:["꺽을","좌"]},hunum:[{kor:"좌",def:"꺽을"}]},{id:4900,hanja:"鄽",strokes:"18",def:{en:[],kr:["가게","전"]},hunum:[{kor:"전",def:"가게"}]},{id:4901,hanja:"壓",strokes:"17",def:{en:["press","oppress","crush","pressure"],kr:["누를","압"]},hunum:[{kor:"압",def:"누를"}]},{id:4902,hanja:"瞿",strokes:"18",def:{en:["surname"],kr:["놀라서","볼","구"]},hunum:[{kor:"구",def:"놀라서 볼"}]},{id:4903,hanja:"浧",strokes:"10",def:{en:[],kr:["앙금","영"]},hunum:[{kor:"영",def:"잠길"}]},{id:4904,hanja:"牒",strokes:"13",def:{en:["documents","records","dispatch"],kr:["글씨판","첩"]},hunum:[{kor:"첩",def:"글씨판"}]},{id:4905,hanja:"壔",strokes:"17",def:{en:["a mound","a tumulus"],kr:["작은","성","도"]},hunum:[{kor:"도",def:"작은 성"}]},{id:4906,hanja:"粍",strokes:"10",def:{en:["mm"],kr:["밀리메트로","모"]},hunum:[{kor:"모",def:"밀리메트로"}]},{id:4907,hanja:"浩",strokes:"10",def:{en:["great","numerous","vast","abundant"],kr:["클","호"]},hunum:[{kor:"호",def:"클"}]},{id:4908,hanja:"壕",strokes:"17",def:{en:["trench","ditch","channel","moat"],kr:["해자","호"]},hunum:[{kor:"호",def:"해자"}]},{id:4909,hanja:"牓",strokes:"14",def:{en:["tablet","public notice","register"],kr:["패","방"]},hunum:[{kor:"방",def:"패"}]},{id:4910,hanja:"牔",strokes:"14",def:{en:["gable"],kr:["박공","박"]},hunum:[{kor:"박",def:"박공"}]},{id:4911,hanja:"浪",strokes:"10",def:{en:["wave","wasteful","reckless"],kr:["물결","랑"]},hunum:[{kor:"랑",def:"물결"}]},{id:4912,hanja:"振",strokes:"10",def:{en:["raise","excite","arouse action"],kr:["떨칠","진"]},hunum:[{kor:"진",def:"떨칠"}]},{id:4913,hanja:"蛩",strokes:"12",def:{en:["cricket","locust","anxious"],kr:["메뚜기","공"]},hunum:[{kor:"공",def:"메뚜기"}]},{id:4914,hanja:"壘",strokes:"18",def:{en:["rampart","military wall"]},hunum:[{kor:"루",def:"진"}]},{id:4915,hanja:"牖",strokes:"15",def:{en:["window","lead enlightenment"],kr:["인도할","유"]},hunum:[{kor:"유",def:"엇살창"}]},{id:4916,hanja:"浬",strokes:"10",def:{en:["nautical mile"],kr:["해리","리"]},hunum:[{kor:"리",def:"해리"}]},{id:4917,hanja:"壙",strokes:"18",def:{en:["tomb","grave","open wilderness"],kr:["광","광"]},hunum:[{kor:"광",def:"광"}]},{id:4918,hanja:"亀",strokes:"11",def:{en:["turtle or tortoise","cuckold"],kr:["龜의","略字"]},hunum:[{kor:"귀",def:"거북"},{kor:"균",def:"터질"}]},{id:4919,hanja:"粒",strokes:"11",def:{en:["grain","small particle"],kr:["알","립"]},hunum:[{kor:"립",def:"알"}]},{id:4920,hanja:"壚",strokes:"19",def:{en:["black clods of earth","shop","hut"],kr:["흑토","로"]},hunum:[{kor:"로",def:"흑토"}]},{id:4921,hanja:"亁",strokes:"12",def:{en:["dry","dried","as opposed to fresh"],kr:["乾과","同字"]},hunum:[{kor:"간",def:"마를"},{kor:"건",def:"마를"}]},{id:4922,hanja:"蛬",strokes:"12",def:{en:[],kr:["귀뚜라미","공"]},hunum:[{kor:"공",def:"귀뚜라미"}]},{id:4923,hanja:"牘",strokes:"19",def:{en:["writing tablet","documents","books"],kr:["편지","독"]},hunum:[{kor:"독",def:"편지"}]},{id:4924,hanja:"浮",strokes:"10",def:{en:["to float","drift","waft","to exceed","superfluous"],kr:["뜰","부"]},hunum:[{kor:"부",def:"뜰"}]},{id:4925,hanja:"蛭",strokes:"12",def:{en:["leech"],kr:["거머리","질"]},hunum:[{kor:"질",def:"거머리"}]},{id:4926,hanja:"亂",strokes:"13",def:{en:["confusion","state of chaos","create chaos","revolt"],kr:["어지러울","란"]},hunum:[{kor:"란",def:"어지러울"}]},{id:4927,hanja:"牙",strokes:"4",def:{en:["tooth","molars","teeth","serrated"],kr:["대장","기","아"]},hunum:[{kor:"아",def:"어금니"}]},{id:4928,hanja:"牚",strokes:"12",def:{en:[]},hunum:[{kor:"탱",def:"버틸"}]},{id:4929,hanja:"壜",strokes:"19",def:{en:["earthen jar or jug"],kr:["술병","담"]},hunum:[{kor:"담",def:"술병"}]},{id:4930,hanja:"蛮",strokes:"12",def:{en:["barbarians","barbarous","savage"],kr:["蠻의","略字"]},hunum:[{kor:"만",def:"오랑캐"}]},{id:4931,hanja:"粕",strokes:"11",def:{en:["lees","dregs","sediments left after distilling liquor"],kr:["지게미","박"]},hunum:[{kor:"박",def:"지게미"}]},{id:4932,hanja:"壝",strokes:"19",def:{en:["a mound","an embankment the earthen altar to the god of the soil"],kr:["단","둘러쌓은","담","유"]},hunum:[{kor:"유",def:"토담"}]},{id:4933,hanja:"亄",strokes:"13",def:{en:["greedy","stingy"],kr:["아낄","의"]},hunum:[{kor:"의",def:"탐할"}]},{id:4934,hanja:"膀",strokes:"14",def:{en:["upper arm","shoulder","wing"],kr:["쌍배","방"]},hunum:[{kor:"방",def:"쌍배"}]},{id:4935,hanja:"牛",strokes:"4",def:{en:["cow","ox","bull","KangXi radical"],kr:["별","이름","우"]},hunum:[{kor:"우",def:"소"}]},{id:4936,hanja:"栃",strokes:"9",def:{en:["type of oak","stable"],kr:["상수리나무","회"]},hunum:[{kor:"회",def:"상수리나무"}]},{id:4937,hanja:"粗",strokes:"11",def:{en:["rough","thick","course","rude"],kr:["거칠","조"]},hunum:[{kor:"조",def:"거칠"}]},{id:4938,hanja:"亅",strokes:"1",def:{en:["hook","KangXi radical"],kr:["갈고리","궐"]},hunum:[{kor:"궐",def:"갈고리"}]},{id:4939,hanja:"粘",strokes:"11",def:{en:["viscous","mucous","glutinous"],kr:["끈끈할","점"]},hunum:[{kor:"점",def:"붙일"}]},{id:4940,hanja:"栄",strokes:"9",def:{en:["glory","honor","flourish","prosper"],kr:["榮과","同字"]},hunum:[{kor:"영",def:"영화"}]},{id:4941,hanja:"壞",strokes:"19",def:{en:["bad","spoil","ruin","destroy"],kr:["혹","회"]},hunum:[{kor:"괴",def:"무너질"},{kor:"회",def:"혹"}]},{id:4942,hanja:"了",strokes:"2",def:{en:["to finish","particle of completed action"],kr:["마칠","료"]},hunum:[{kor:"료",def:"마칠"}]},{id:4943,hanja:"膂",strokes:"14",def:{en:["backbone","spinal column"],kr:["등골","뼈","려"]},hunum:[{kor:"려",def:"등골 뼈"}]},{id:4944,hanja:"牝",strokes:"6",def:{en:["female of species","deep gorge"],kr:["암컷","빈"]},hunum:[{kor:"빈",def:"암컷"}]},{id:4945,hanja:"栅",strokes:"9",def:{en:["fence","palisade","grid"],kr:["울짱","책"]},hunum:[{kor:"책",def:"울짱"}]},{id:4946,hanja:"壟",strokes:"19",def:{en:["grave","mound","ridge in field"],kr:["언덕","롱"]},hunum:[{kor:"롱",def:"언덕"}]},{id:4947,hanja:"亇",strokes:"3",def:{en:["kwukyel hammer"],kr:["망치","마"]},hunum:[{kor:"마",def:"망치"}]},{id:4948,hanja:"膃",strokes:"14",def:{en:["fat"],kr:["살찔","올"]},hunum:[{kor:"올",def:"해구"}]},{id:4949,hanja:"予",strokes:"4",def:{en:["I","me","to give"],kr:["자기","여"]},hunum:[{kor:"여",def:"자기"}]},{id:4950,hanja:"膄",strokes:"14",def:{en:["to become emaciated"],kr:["파리할","수"]},hunum:[{kor:"수",def:"파리할"}]},{id:4951,hanja:"牟",strokes:"6",def:{en:["make","seek","get","barley","low"],kr:["소","우는","소리","모"]},hunum:[{kor:"모",def:"소 우는 소리"}]},{id:4952,hanja:"挹",strokes:"10",def:{en:["to bale out","to decant liquids"],kr:["잔질할","읍"]},hunum:[{kor:"읍",def:"잡아당길"}]},{id:4953,hanja:"浴",strokes:"10",def:{en:["bathe","wash","bath"],kr:["못","이름","욕"]},hunum:[{kor:"욕",def:"깨끗이할"}]},{id:4954,hanja:"挺",strokes:"10",def:{en:["to stand upright","straighten","rigid"],kr:["향초이름","정"]},hunum:[{kor:"정",def:"빼어날"}]},{id:4955,hanja:"亊",strokes:"7",def:{en:["affair","matter","business","to serve","accident","incident"]},hunum:[{kor:"사",def:"일"}]},{id:4956,hanja:"膆",strokes:"14",def:{en:["the corp of a bird or fowl","fat"],kr:["멀떠구니","소"]},hunum:[{kor:"소",def:"살찔"}]},{id:4957,hanja:"牡",strokes:"7",def:{en:["male of animals","bolt of door"],kr:["수컷","모"]},hunum:[{kor:"모",def:"수컷"}]},{id:4958,hanja:"挻",strokes:"10",def:{en:[],kr:["손바닥으로","칠","연"]},hunum:[{kor:"연",def:"당길"}]},{id:4959,hanja:"海",strokes:"10",def:{en:["sea","ocean","maritime"],kr:["세계","해"]},hunum:[{kor:"해",def:"바다"}]},{id:4960,hanja:"事",strokes:"8",def:{en:["affair","matter","business","to serve","accident","incident"],kr:["일","사"]},hunum:[{kor:"사",def:"일"}]},{id:4961,hanja:"浸",strokes:"10",def:{en:["soak","immerse","dip","percolate"],kr:["빠질","침"]},hunum:[{kor:"침",def:"적실"}]},{id:4962,hanja:"壤",strokes:"20",def:{en:["soil","loam","earth","rich"],kr:["풍년들","양"]},hunum:[{kor:"양",def:"흙"}]},{id:4963,hanja:"二",strokes:"2",def:{en:["two","twice"],kr:["의심할","이"]},hunum:[{kor:"이",def:"두"}]},{id:4964,hanja:"阜",strokes:"8",def:{en:["mound","abundant","ample","numerous"],kr:["언덕","부"]},hunum:[{kor:"부",def:"언덕"}]},{id:4965,hanja:"膈",strokes:"14",def:{en:["diaphragm"],kr:["명치","격"]},hunum:[{kor:"격",def:"명치"}]},{id:4966,hanja:"牢",strokes:"7",def:{en:["prison","stable","pen","secure"],kr:["우리","뢰"]},hunum:[{kor:"로",def:"우리"},{kor:"뢰",def:"우리"}]},{id:4967,hanja:"挽",strokes:"10",def:{en:["pull","pull back","draw back"],kr:["당길","만"]},hunum:[{kor:"만",def:"당길"}]},{id:4968,hanja:"浹",strokes:"10",def:{en:["saturate","drench","damp","wet"],kr:["둘릴","협"]},hunum:[{kor:"협",def:"사무칠"}]},{id:4969,hanja:"挾",strokes:"10",def:{en:["clasp under arm","hold to bosom"],kr:["품을","협"]},hunum:[{kor:"협",def:"낄"}]},{id:4970,hanja:"亍",strokes:"3",def:{en:["to take small steps","Korean place name"],kr:["겨우","디딜","촉"]},hunum:[{kor:"마",def:"땅 이름"},{kor:"촉",def:"자축거릴"}]},{id:4971,hanja:"阝",strokes:"3",def:{en:["place","KangXi radical"],kr:["언덕","부"]},hunum:[{kor:"부",def:"언덕"}]},{id:4972,hanja:"粟",strokes:"12",def:{en:["unhusked millet","grain"],kr:["겉곡식","속"]},hunum:[{kor:"속",def:"좁쌀"}]},{id:4973,hanja:"于",strokes:"3",def:{en:["in","on","at","go to","surname"],kr:["탄식의","어조사","우"]},hunum:[{kor:"우",def:"갈"}]},{id:4974,hanja:"蛸",strokes:"13",def:{en:["long legged spider","octopus","chrysalis of mantis"],kr:["연가시","알집","소"]},hunum:[{kor:"소",def:"거미알"}]},{id:4975,hanja:"膊",strokes:"14",def:{en:["shoulders","upper arms"],kr:["포","박"]},hunum:[{kor:"박",def:"포"}]},{id:4976,hanja:"栍",strokes:"9",def:{en:["a lot","a label","a slip of bamboo engraved with signs"],kr:["찌","생"]},hunum:[{kor:"생",def:"찌"}]},{id:4977,hanja:"亏",strokes:"3",def:{en:["lose","fail","damage","deficient"]},hunum:[{kor:"우",def:"어조사"},{kor:"휴",def:"이지러질"}]},{id:4978,hanja:"蛹",strokes:"13",def:{en:["chrysalis","larva"],kr:["번데기","용"]},hunum:[{kor:"용",def:"번데기"}]},{id:4979,hanja:"膋",strokes:"14",def:{en:["fat"],kr:["발기름","료"]},hunum:[{kor:"료",def:"발기름"}]},{id:4980,hanja:"亐",strokes:"3",def:{en:[]},hunum:[{kor:"울",def:"땅 이름"}]},{id:4981,hanja:"粢",strokes:"12",def:{en:["grain offered in ritual sacrifice","millet"],kr:["피","자"]},hunum:[{kor:"자",def:"피"}]},{id:4982,hanja:"壩",strokes:"24",def:{en:["embankment","dam"],kr:["둑","파"]},hunum:[{kor:"파",def:"방죽"}]},{id:4983,hanja:"阡",strokes:"6",def:{en:["footpaths between fields","paths"],kr:["두렁","천"]},hunum:[{kor:"천",def:"두렁"}]},{id:4984,hanja:"云",strokes:"4",def:{en:["say","speak","clouds"],kr:["돌아갈","운"]},hunum:[{kor:"운",def:"이를"}]},{id:4985,hanja:"蛻",strokes:"13",def:{en:["molt","exuviate","shed"],kr:["매미","허물","세"]},hunum:[{kor:"세",def:"매미 허물"}]},{id:4986,hanja:"牧",strokes:"8",def:{en:["tend cattle","shepherd"],kr:["칠","목"]},hunum:[{kor:"목",def:"칠"}]},{id:4987,hanja:"互",strokes:"4",def:{en:["mutually","reciprocally"],kr:["함께","호"]},hunum:[{kor:"호",def:"서로"}]},{id:4988,hanja:"阢",strokes:"6",def:{en:[],kr:["험할","올"]},hunum:[{kor:"올",def:"험할"}]},{id:4989,hanja:"粤",strokes:"12",def:{en:["Guangdong and Guangxi provinces","initial particle"],kr:["나라이름","월"]},hunum:[{kor:"월",def:"말 내킬"}]},{id:4990,hanja:"浿",strokes:"10",def:{en:[],kr:["물가","패"]},hunum:[{kor:"패",def:"물이름"}]},{id:4991,hanja:"士",strokes:"3",def:{en:["scholar","gentleman","soldier"],kr:["선비","사"]},hunum:[{kor:"사",def:"선비"}]},{id:4992,hanja:"亓",strokes:"4",def:{en:["her","its","their","that"],kr:["其의","古字"]},hunum:[{kor:"기",def:"그"}]},{id:4993,hanja:"膏",strokes:"14",def:{en:["grease","fat","paste","ointment"],kr:["살찔","고"]},hunum:[{kor:"고",def:"살찔"}]},{id:4994,hanja:"物",strokes:"8",def:{en:["thing","substance","creature"],kr:["무리","물"]},hunum:[{kor:"물",def:"만물"}]},{id:4995,hanja:"粥",strokes:"12",def:{en:["rice gruel","congee"],kr:["죽","죽"]},hunum:[{kor:"육",def:"팔"},{kor:"죽",def:"죽"}]},{id:4996,hanja:"阤",strokes:"6",def:{en:["hill"],kr:["사태날","치"]},hunum:[{kor:"치",def:"떨어질"}]},{id:4997,hanja:"栒",strokes:"10",def:{en:["cross bar"],kr:["순나무","순"]},hunum:[{kor:"순",def:"경쇠걸이"}]},{id:4998,hanja:"壬",strokes:"4",def:{en:["ninth heavenly stem"],kr:["아홉째천간","임"]},hunum:[{kor:"임",def:"아홉째천간"}]},{id:4999,hanja:"五",strokes:"4",def:{en:["five","surname"],kr:["다섯","오"]},hunum:[{kor:"오",def:"다섯"}]},{id:5000,hanja:"蛾",strokes:"13",def:{en:["moth"],kr:["누에나방","아"]},hunum:[{kor:"아",def:"누에나방"}]},{id:5001,hanja:"粦",strokes:"12",def:{en:["phosphorus"],kr:["도깨비","불","린"]},hunum:[{kor:"린",def:"도깨비 불"}]},{id:5002,hanja:"井",strokes:"4",def:{en:["well","mine shaft","pit"],kr:["저자","정"]},hunum:[{kor:"정",def:"우물"}]},{id:5003,hanja:"栓",strokes:"10",def:{en:["wooden peg","post or stick"],kr:["말뚝","전"]},hunum:[{kor:"전",def:"말뚝"}]},{id:5004,hanja:"粧",strokes:"12",def:{en:["toilet","make","dress up","adorn"],kr:["단장할","장"]},hunum:[{kor:"장",def:"단장할"}]},{id:5005,hanja:"壮",strokes:"6",def:{en:["big","large","robust","name of tribe"],kr:["씩씩할","장"]},hunum:[{kor:"장",def:"씩씩할"}]},{id:5006,hanja:"厀",strokes:"13",def:{en:[],kr:["膝의","本字"]},hunum:[{kor:"슬",def:"무릎"}]},{id:5007,hanja:"粨",strokes:"12",def:{en:["hm"],kr:["힉터메트르","백"]},hunum:[{kor:"백",def:"헥터메트르"}]},{id:5008,hanja:"壯",strokes:"7",def:{en:["big","large","robust","name of tribe"],kr:["씩씩할","장"]},hunum:[{kor:"장",def:"씩씩할"}]},{id:5009,hanja:"栖",strokes:"10",def:{en:["perch","roost","stay"],kr:["깃들일","서"]},hunum:[{kor:"서",def:"깃들일"}]},{id:5010,hanja:"声",strokes:"7",def:{en:["sound","voice","noise","tone","music"],kr:["聲의","俗字"]},hunum:[{kor:"성",def:"소리"}]},{id:5011,hanja:"厂",strokes:"2",def:{en:["factory","workshop","radical"],kr:["사람","이름","한"]},hunum:[{kor:"엄",def:"굴바위"},{kor:"한",def:"사람 이름"}]},{id:5012,hanja:"阨",strokes:"7",def:{en:["in distress","adverse","strategic"],kr:["막힐","액"]},hunum:[{kor:"애",def:"험할"},{kor:"액",def:"막힐"}]},{id:5013,hanja:"栗",strokes:"10",def:{en:["chestnut tree","chestnuts","surname"],kr:["밤나무","률"]},hunum:[{kor:"률",def:"밤나무"}]},{id:5014,hanja:"壱",strokes:"7",def:{en:["number one"],kr:["壹의","略字"]},hunum:[{kor:"일",def:"한"}]},{id:5015,hanja:"厃",strokes:"4",def:{en:["to look upward"],kr:["우러러","볼","점"]},hunum:[{kor:"위",def:"우러러 볼"},{kor:"점",def:"우러러 볼"}]},{id:5016,hanja:"亘",strokes:"6",def:{en:["extend across","through","from"],kr:["굳셀","환"]},hunum:[{kor:"선",def:"구할"},{kor:"환",def:"굳셀"}]},{id:5017,hanja:"牯",strokes:"9",def:{en:["cow","bull","ox"],kr:["암소","고"]},hunum:[{kor:"고",def:"암소"}]},{id:5018,hanja:"阪",strokes:"7",def:{en:["hillside farmland","slope"],kr:["언덕","판"]},hunum:[{kor:"판",def:"산비탈"}]},{id:5019,hanja:"売",strokes:"7",def:{en:["sell","shell","husk"],kr:["賣의","略字"]},hunum:[{kor:"매",def:"팔"}]},{id:5020,hanja:"厄",strokes:"4",def:{en:["adversity","difficulty","distress"],kr:["재앙","액"]},hunum:[{kor:"액",def:"재앙"}]},{id:5021,hanja:"亙",strokes:"6",def:{en:["extend across","through","from"],kr:["뻗칠","긍"]},hunum:[{kor:"긍",def:"뻗칠"}]},{id:5022,hanja:"膘",strokes:"15",def:{en:["fat","rump"],kr:["부레","표"]},hunum:[{kor:"표",def:"허구리살"}]},{id:5023,hanja:"些",strokes:"7",def:{en:["little","few","rather","somewhat"],kr:["적을","사"]},hunum:[{kor:"사",def:"적을"}]},{id:5024,hanja:"牲",strokes:"9",def:{en:["sacrificial animal","animal"],kr:["희생","생"]},hunum:[{kor:"생",def:"희생"}]},{id:5025,hanja:"厇",strokes:"5",def:{en:[],kr:["찢을","책"]},hunum:[{kor:"책",def:"찢을"}]},{id:5026,hanja:"着",strokes:"11",def:{en:["make move","take action"],kr:["붙을","착"]},hunum:[{kor:"착",def:"붙을"}]},{id:5027,hanja:"亜",strokes:"7",def:{en:["Asia","second"],kr:["亞의","略字"]},hunum:[{kor:"아",def:"버금"}]},{id:5028,hanja:"粮",strokes:"13",def:{en:["food","grain","provisions"],kr:["糧과","同字"]},hunum:[{kor:"량",def:"양식"}]},{id:5029,hanja:"亝",strokes:"8",def:{en:["even","regular","uniform all alike","to arrange"],kr:["재계할","제"]},hunum:[{kor:"제",def:"재계할"}]},{id:5030,hanja:"牴",strokes:"9",def:{en:["gore","butt","resist"],kr:["당할","저"]},hunum:[{kor:"저",def:"찌를"}]},{id:5031,hanja:"阮",strokes:"7",def:{en:["ancient musical instrument"],kr:["성씨","원"]},hunum:[{kor:"완",def:"성씨"},{kor:"원",def:"원나라"}]},{id:5032,hanja:"膚",strokes:"15",def:{en:["skin","superficial","shallow"],kr:["살갗","부"]},hunum:[{kor:"부",def:"살갗"}]},{id:5033,hanja:"亞",strokes:"8",def:{en:["Asia","second","used as a prefix to names"],kr:["버금","아"]},hunum:[{kor:"아",def:"버금"}]},{id:5034,hanja:"阯",strokes:"7",def:{en:["foundation","site","address"],kr:["터","지"]},hunum:[{kor:"지",def:"터"}]},{id:5035,hanja:"厉",strokes:"5",def:{en:["whetstone","grind","sharpen","whet"],kr:["厲의","略字"]},hunum:[{kor:"려",def:"갈"}]},{id:5036,hanja:"亟",strokes:"8",def:{en:["urgently","immediately","extremely"],kr:["자주","기"]},hunum:[{kor:"극",def:"빠를"},{kor:"기",def:"자주"}]},{id:5037,hanja:"郁",strokes:"9",def:{en:["sweet smelling","rich in aroma","hit"],kr:["자욱할","욱"]},hunum:[{kor:"욱",def:"문채날"}]},{id:5038,hanja:"膜",strokes:"15",def:{en:["membrane","to kneel and worship"],kr:["무릎","꿇을","모"]},hunum:[{kor:"막",def:"막"},{kor:"모",def:"무릎 꿇을"}]},{id:5039,hanja:"粱",strokes:"13",def:{en:["better varieties of millet"],kr:["기장","량"]},hunum:[{kor:"량",def:"기장"}]},{id:5040,hanja:"栝",strokes:"10",def:{en:["a builder"],kr:["노송나무","괄"]},hunum:[{kor:"괄",def:"노송나무"}]},{id:5041,hanja:"粲",strokes:"13",def:{en:["polish","bright","radiant","smiling"],kr:["정미","찬"]},hunum:[{kor:"찬",def:"정미"}]},{id:5042,hanja:"壹",strokes:"12",def:{en:["number one"],kr:["한","일"]},hunum:[{kor:"일",def:"한"}]},{id:5043,hanja:"厊",strokes:"6",def:{en:[],kr:["어긋날","아"]},hunum:[{kor:"아",def:"어긋날"}]},{id:5044,hanja:"亠",strokes:"2",def:{en:["head","KangXi radical"],kr:["뜻","없는","토","두"]},hunum:[{kor:"두",def:"뜻 없는 토"}]},{id:5045,hanja:"膝",strokes:"15",def:{en:["knee"],kr:["치슬말","슬"]},hunum:[{kor:"슬",def:"무릎"}]},{id:5046,hanja:"栞",strokes:"10",def:{en:["publication","periodical","publish"],kr:["도표","간"]},hunum:[{kor:"간",def:"도표"}]},{id:5047,hanja:"壺",strokes:"12",def:{en:["jar","pot","jug","vase","surname"],kr:["단지","호"]},hunum:[{kor:"호",def:"병"}]},{id:5048,hanja:"郃",strokes:"9",def:{en:["county in Shanxi province"],kr:["땅이름","합"]},hunum:[{kor:"합",def:"땅이름"}]},{id:5049,hanja:"阱",strokes:"7",def:{en:["pitfall","trap","snare"],kr:["함정","정"]},hunum:[{kor:"정",def:"함정"}]},{id:5050,hanja:"压",strokes:"6",def:{en:["press","oppress","crush","pressure"]},hunum:[{kor:"압",def:"누를"}]},{id:5051,hanja:"亡",strokes:"3",def:{en:["death","destroyed","lose","perish"],kr:["없을","무"]},hunum:[{kor:"망",def:"망할"},{kor:"무",def:"없을"}]},{id:5052,hanja:"牸",strokes:"10",def:{en:["the female of certain animals","to bring forth young of animals"],kr:["암컷","자"]},hunum:[{kor:"자",def:"암컷"}]},{id:5053,hanja:"粳",strokes:"13",def:{en:["non"],kr:["메벼","갱"]},hunum:[{kor:"갱",def:"메벼"}]},{id:5054,hanja:"睆",strokes:"12",def:{en:["bright"],kr:["가득","차","있는","모양","환"]},hunum:[{kor:"환",def:"가득 차 있는 모양"}]},{id:5055,hanja:"亢",strokes:"4",def:{en:["high","proud","violent","excessive","skilled","name"],kr:["가릴","항"]},hunum:[{kor:"항",def:"목"}]},{id:5056,hanja:"特",strokes:"10",def:{en:["special","unique","distinguished"],kr:["세","살","먹은","짐승","특"]},hunum:[{kor:"특",def:"우뚝할"}]},{id:5057,hanja:"膞",strokes:"15",def:{en:[],kr:["질그릇","만드는","틀","전"]},hunum:[{kor:"전",def:"썰"}]},{id:5058,hanja:"壻",strokes:"12",def:{en:["son","husband"],kr:["사위","서"]},hunum:[{kor:"서",def:"사위"}]},{id:5059,hanja:"防",strokes:"7",def:{en:["defend","prevent","embankment"],kr:["둑","방"]},hunum:[{kor:"방",def:"둑"}]},{id:5060,hanja:"郄",strokes:"9",def:{en:["surname"],kr:["隙과","同字"]},hunum:[{kor:"극",def:"틈"}]},{id:5061,hanja:"壼",strokes:"13",def:{en:["palace corridor or passageway"]},hunum:[{kor:"곤",def:"대궐 안길"}]},{id:5062,hanja:"巉",strokes:"20",def:{en:["steep","rugged","jagged","precipitous"],kr:["가파를","참"]},hunum:[{kor:"참",def:"가파를"}]},{id:5063,hanja:"郅",strokes:"9",def:{en:["to go up to"],kr:["고을","이름","질"]},hunum:[{kor:"질",def:"고을 이름"}]},{id:5064,hanja:"睇",strokes:"12",def:{en:["look at","glance at","stare at"],kr:["흘끗","볼","제"]},hunum:[{kor:"제",def:"흘끗 볼"}]},{id:5065,hanja:"粵",strokes:"13",def:{en:["Guangdong and Guangxi provinces","initial particle"],kr:["粤과","同字"]},hunum:[{kor:"월",def:"말 내킬"}]},{id:5066,hanja:"校",strokes:"10",def:{en:["school","military field officer"],kr:["학궁","효"]},hunum:[{kor:"교",def:"학교"},{kor:"효",def:"학궁"}]},{id:5067,hanja:"厎",strokes:"7",def:{en:["settle"],kr:["숫돌","지"]},hunum:[{kor:"지",def:"숫돌"}]},{id:5068,hanja:"壽",strokes:"14",def:{en:["old age","long life","lifespan"],kr:["축복할","수"]},hunum:[{kor:"수",def:"목숨"}]},{id:5069,hanja:"交",strokes:"6",def:{en:["mix","intersect","exchange","communicate","deliver"],kr:["사귈","교"]},hunum:[{kor:"교",def:"사귈"}]},{id:5070,hanja:"鬂",strokes:"17",def:{en:["the hair on the temples"],kr:["鬢의","俗字"]},hunum:[{kor:"빈",def:"살쩍"}]},{id:5071,hanja:"膠",strokes:"15",def:{en:["glue","gum","resin","rubber"],kr:["아교","교"]},hunum:[{kor:"교",def:"아교"}]},{id:5072,hanja:"栢",strokes:"10",def:{en:["cypress","cedar"],kr:["柏의","俗字"]},hunum:[{kor:"백",def:"측백"}]},{id:5073,hanja:"亥",strokes:"6",def:{en:["twelfth terrestrial branch"],kr:["돼지","해"]},hunum:[{kor:"해",def:"열 둘째 지지"}]},{id:5074,hanja:"巋",strokes:"20",def:{en:["grand","stately","secure","lasting"],kr:["높고","험준할","규"]},hunum:[{kor:"규",def:"높고 험준할"}]},{id:5075,hanja:"亦",strokes:"6",def:{en:["also","too","likewise"],kr:["모두","역"]},hunum:[{kor:"역",def:"또"}]},{id:5076,hanja:"牽",strokes:"11",def:{en:["drag","pull","lead by hand"],kr:["볏줄","견"]},hunum:[{kor:"견",def:"당길"}]},{id:5077,hanja:"膣",strokes:"15",def:{en:["vagina"],kr:["새살","날","질"]},hunum:[{kor:"질",def:"새살 날"}]},{id:5078,hanja:"巍",strokes:"21",def:{en:["high","lofty","majestic","eminent"],kr:["높고","튼","모양","외"]},hunum:[{kor:"외",def:"높을"}]},{id:5079,hanja:"粹",strokes:"14",def:{en:["pure","unadulterated","select"],kr:["순수할","수"]},hunum:[{kor:"수",def:"정할"}]},{id:5080,hanja:"亨",strokes:"7",def:{en:["smoothly","progressing","no trouble"],kr:["제사","형"]},hunum:[{kor:"팽",def:"삶을"},{kor:"형",def:"형통할"}]},{id:5081,hanja:"郊",strokes:"9",def:{en:["suburbs","waste land","open spaces"],kr:["성","밖","교"]},hunum:[{kor:"교",def:"성 밖"}]},{id:5082,hanja:"鬅",strokes:"18",def:{en:["unkempt hair","loose","flowing hair","to be slovenly dressed"],kr:["鬅鬠"]},hunum:[{kor:"불",def:"머리 흐트러질"}]},{id:5083,hanja:"睍",strokes:"12",def:{en:["to look at fearfully","overly cautious"],kr:["고울","현"]},hunum:[{kor:"현",def:"물끄러미 볼"}]},{id:5084,hanja:"厓",strokes:"8",def:{en:["precipice","shore","bank","surname"],kr:["물가","애"]},hunum:[{kor:"애",def:"언덕"}]},{id:5085,hanja:"鬆",strokes:"18",def:{en:["lax","loose","loosen","relax"],kr:["터럭","더부룩할","송"]},hunum:[{kor:"송",def:"터럭 더부룩할"}]},{id:5086,hanja:"厔",strokes:"8",def:{en:["stop","hinder","place near water"],kr:["막을","질"]},hunum:[{kor:"질",def:"막을"}]},{id:5087,hanja:"粼",strokes:"14",def:{en:[],kr:["물","맑을","린"]},hunum:[{kor:"린",def:"물 맑을"}]},{id:5088,hanja:"享",strokes:"8",def:{en:["enjoy"],kr:["흠향할","향"]},hunum:[{kor:"향",def:"드릴"}]},{id:5089,hanja:"巑",strokes:"22",def:{en:[],kr:["높이","솟을","찬"]},hunum:[{kor:"찬",def:"높이 솟을"}]},{id:5090,hanja:"粽",strokes:"14",def:{en:["dumpling made of glutinous rice"],kr:["주악","종"]},hunum:[{kor:"종",def:"주악"}]},{id:5091,hanja:"阻",strokes:"8",def:{en:["impede","hinder","obstruct","oppose"],kr:["험할","조"]},hunum:[{kor:"조",def:"험할"}]},{id:5092,hanja:"鬈",strokes:"18",def:{en:["fine growth of hair curly hair"],kr:["수염좋을","권"]},hunum:[{kor:"권",def:"수염좋을"}]},{id:5093,hanja:"膨",strokes:"16",def:{en:["to swell","swollen","bloated","inflated"],kr:["배","불룩할","팽"]},hunum:[{kor:"팽",def:"배 불룩할"}]},{id:5094,hanja:"株",strokes:"10",def:{en:["numerary adjunct for trees","root"],kr:["그루","주"]},hunum:[{kor:"주",def:"그루"}]},{id:5095,hanja:"阼",strokes:"8",def:{en:["the steps leading to the eastern door"],kr:["동편","층계","조"]},hunum:[{kor:"조",def:"동편 층계"}]},{id:5096,hanja:"精",strokes:"14",def:{en:["essence","semen","spirit"],kr:["신령","정"]},hunum:[{kor:"정",def:"정교할"}]},{id:5097,hanja:"厖",strokes:"9",def:{en:["bulky","thick and large","confused"],kr:["클","방"]},hunum:[{kor:"방",def:"클"}]},{id:5098,hanja:"京",strokes:"8",def:{en:["capital city"],kr:["서울","경"]},hunum:[{kor:"경",def:"서울"}]},{id:5099,hanja:"郎",strokes:"9",def:{en:["gentleman","young man","husband"],kr:["남편","랑"]},hunum:[{kor:"랑",def:"남편"}]},{id:5100,hanja:"亭",strokes:"9",def:{en:["pavilion","erect"],kr:["고를","정"]},hunum:[{kor:"정",def:"정자"}]},{id:5101,hanja:"阽",strokes:"8",def:{en:[],kr:["낭비탈","점"]},hunum:[{kor:"점",def:"낭떠러지"}]},{id:5102,hanja:"巒",strokes:"22",def:{en:["mountain range","pointed mountain"],kr:["뫼","만"]},hunum:[{kor:"만",def:"뫼"}]},{id:5103,hanja:"鬊",strokes:"19",def:{en:[],kr:["머리","풀어헤칠","순"]},hunum:[{kor:"순",def:"머리 풀어헤칠"}]},{id:5104,hanja:"膩",strokes:"16",def:{en:["greasy","oily","dirty","smooth"],kr:["살찔","니"]},hunum:[{kor:"니",def:"살찔"}]},{id:5105,hanja:"鬋",strokes:"19",def:{en:["forelock","bangs"],kr:["귀밑","털","드릴","전"]},hunum:[{kor:"전",def:"수염 깎을"}]},{id:5106,hanja:"巓",strokes:"22",def:{en:["summit of mountain"],kr:["산","꼭대기","전"]},hunum:[{kor:"전",def:"산꼭대기"}]},{id:5107,hanja:"厘",strokes:"9",def:{en:["thousandth part of tael"],kr:["터전","전"]},hunum:[{kor:"리",def:"다스릴"},{kor:"전",def:"전방"}]},{id:5108,hanja:"亮",strokes:"9",def:{en:["bright","brilliant","radiant","light"],kr:["밝을","량"]},hunum:[{kor:"량",def:"밝을"}]},{id:5109,hanja:"睒",strokes:"13",def:{en:["to glance at","to peep","glittering","to shine"],kr:["번개빛","섬"]},hunum:[{kor:"섬",def:"번개빛"}]},{id:5110,hanja:"巔",strokes:"22",def:{en:["summit of mountain","mountain top"],kr:["巓과","同字"]},hunum:[{kor:"전",def:"산꼭대기"}]},{id:5111,hanja:"阿",strokes:"8",def:{en:["prefix for people","used in transliteration"],kr:["누구","옥"]},hunum:[{kor:"아",def:"언덕"},{kor:"옥",def:"누구"}]},{id:5112,hanja:"厚",strokes:"9",def:{en:["thick","substantial","greatly"],kr:["두터울","후"]},hunum:[{kor:"후",def:"두터울"}]},{id:5113,hanja:"鬍",strokes:"19",def:{en:["beard","mustache","whiskers"],kr:["수염","호"]},hunum:[{kor:"호",def:"수염"}]},{id:5114,hanja:"亰",strokes:"9",def:{en:["capital city"],kr:["서울","경"]},hunum:[{kor:"경",def:"서울"}]},{id:5115,hanja:"栮",strokes:"10",def:{en:[],kr:["느타리","이"]},hunum:[{kor:"이",def:"버섯"}]},{id:5116,hanja:"巖",strokes:"23",def:{en:["cliff","precipice","cave","grotto"],kr:["높을","엄"]},hunum:[{kor:"암",def:"바위"},{kor:"엄",def:"높을"}]},{id:5117,hanja:"亱",strokes:"9",def:{en:["night","dark","in night","by night"]},hunum:[{kor:"야",def:"밤"}]},{id:5118,hanja:"栯",strokes:"10",def:{en:[],kr:["산앵두","욱"]},hunum:[{kor:"욱",def:"산앵두"}]},{id:5119,hanja:"拂",strokes:"8",def:{en:["shake off","brush away","dust"],kr:["도울","필"]},hunum:[{kor:"불",def:"떨"},{kor:"필",def:"도울"}]},{id:5120,hanja:"厝",strokes:"10",def:{en:["cut or engrave","a grave or tombstone"],kr:["措와","同字"]},hunum:[{kor:"조",def:"둘"}]},{id:5121,hanja:"亳",strokes:"10",def:{en:["name of district in Anhui","capital of Yin"],kr:["땅이름","박"]},hunum:[{kor:"박",def:"땅이름"}]},{id:5122,hanja:"鬐",strokes:"20",def:{en:["horse","fins"],kr:["갈기","기"]},hunum:[{kor:"기",def:"갈기"}]},{id:5123,hanja:"栱",strokes:"10",def:{en:["large peg","stake","post","pillar"],kr:["두공","공"]},hunum:[{kor:"공",def:"두공"}]},{id:5124,hanja:"拄",strokes:"8",def:{en:["lean on","post","prod","ridicule"],kr:["떠받칠","주"]},hunum:[{kor:"주",def:"떠받칠"}]},{id:5125,hanja:"厞",strokes:"10",def:{en:[],kr:["더러울","비"]},hunum:[{kor:"비",def:"더러울"}]},{id:5126,hanja:"亴",strokes:"12",def:{en:[]},hunum:[{kor:"유",def:"날"}]},{id:5127,hanja:"膰",strokes:"16",def:{en:["to cook meat for a sacrifice or offering"],kr:["제사","고기","번"]},hunum:[{kor:"번",def:"제사 고기"}]},{id:5128,hanja:"栲",strokes:"10",def:{en:["mangrove"],kr:["북나무","고"]},hunum:[{kor:"고",def:"북나무"}]},{id:5129,hanja:"巚",strokes:"23",def:{en:[],kr:["시루봉","헌"]},hunum:[{kor:"헌",def:"봉우리"}]},{id:5130,hanja:"鬒",strokes:"20",def:{en:["black","glossy hair"],kr:["숱","많을","진"]},hunum:[{kor:"진",def:"숱 많을"}]},{id:5131,hanja:"原",strokes:"10",def:{en:["source","origin","beginning"],kr:["들판","원"]},hunum:[{kor:"원",def:"근본"}]},{id:5132,hanja:"厠",strokes:"11",def:{en:["mingle with","toilet","lavatory"],kr:["섞일","측"]},hunum:[{kor:"측",def:"뒷간"}]},{id:5133,hanja:"栴",strokes:"10",def:{en:["sandalwood"],kr:["향나무","전"]},hunum:[{kor:"전",def:"향나무"}]},{id:5134,hanja:"担",strokes:"8",def:{en:["carry","bear","undertake"],kr:["원숭이","같은","짐승","단"]},hunum:[{kor:"단",def:"원숭이 같은 짐승"}]},{id:5135,hanja:"拆",strokes:"8",def:{en:["to break up","split apart","rip open","to destroy"],kr:["열릴","탁"]},hunum:[{kor:"탁",def:"터질"}]},{id:5136,hanja:"亶",strokes:"13",def:{en:["sincere","real","true","truth"],kr:["믿을","단"]},hunum:[{kor:"단",def:"믿을"}]},{id:5137,hanja:"膳",strokes:"16",def:{en:["meals","provisions","board"],kr:["반찬","선"]},hunum:[{kor:"선",def:"반찬"}]},{id:5138,hanja:"睚",strokes:"13",def:{en:["corner of eye","stare"],kr:["눈흘길","애"]},hunum:[{kor:"애",def:"눈흘길"}]},{id:5139,hanja:"川",strokes:"3",def:{en:["stream","river","flow","boil"],kr:["내","천"]},hunum:[{kor:"천",def:"내"}]},{id:5140,hanja:"睛",strokes:"13",def:{en:["eyeball","pupil of eye"],kr:["눈동자","정"]},hunum:[{kor:"정",def:"눈 검은자위"}]},{id:5141,hanja:"拇",strokes:"8",def:{en:["thumb","big toe"],kr:["엄지손가락","무"]},hunum:[{kor:"무",def:"엄지손가락"}]},{id:5142,hanja:"亷",strokes:"13",def:{en:["upright","honorable","honest"]},hunum:[{kor:"렴",def:"청렴할"}]},{id:5143,hanja:"膴",strokes:"16",def:{en:["fine"],kr:["크게","저민","고기","무"]},hunum:[{kor:"무",def:"포"}]},{id:5144,hanja:"洄",strokes:"9",def:{en:["a back","an eddy a whirlpool"],kr:["거슬러","올라","갈","회"]},hunum:[{kor:"회",def:"거슬러 올라 갈"}]},{id:5145,hanja:"膵",strokes:"16",def:{en:["pancreas"],kr:["지라","췌"]},hunum:[{kor:"췌",def:"첩육경"}]},{id:5146,hanja:"州",strokes:"6",def:{en:["administrative division","state"],kr:["고을","주"]},hunum:[{kor:"주",def:"고을"}]},{id:5147,hanja:"拈",strokes:"8",def:{en:["pick up with fingers","draw lots"],kr:["집을","념"]},hunum:[{kor:"념",def:"집을"}]},{id:5148,hanja:"鬖",strokes:"21",def:{en:["wild hair"],kr:["헝클어질","삼"]},hunum:[{kor:"삼",def:"헝클어질"}]},{id:5149,hanja:"核",strokes:"10",def:{en:["seed","kernel","core","nut","atom"],kr:["씨","홀"]},hunum:[{kor:"핵",def:"실과"},{kor:"홀",def:"씨"}]},{id:5150,hanja:"拉",strokes:"8",def:{en:["pull","drag","seize","hold","lengthen"],kr:["꺽을","랍"]},hunum:[{kor:"랍",def:"꺽을"}]},{id:5151,hanja:"厤",strokes:"12",def:{en:["to calculate","the calendar"],kr:["다스릴","력"]},hunum:[{kor:"력",def:"다스릴"}]},{id:5152,hanja:"亹",strokes:"21",def:{en:["progress","busy","untiring","exert"],kr:["문채가","있는","모양","미"]},hunum:[{kor:"문",def:"땅이름"},{kor:"미",def:"힘쓸"}]},{id:5153,hanja:"拊",strokes:"8",def:{en:["slap","pat","tap","handle of a vessel"],kr:["어루만질","부"]},hunum:[{kor:"부",def:"어루만질"}]},{id:5154,hanja:"厥",strokes:"12",def:{en:["personal pronoun he","she","it"],kr:["그","궐"]},hunum:[{kor:"굴",def:"나라이름"},{kor:"궐",def:"그"}]},{id:5155,hanja:"人",strokes:"2",def:{en:["man","people","mankind","someone else"],kr:["사람","인"]},hunum:[{kor:"인",def:"사람"}]},{id:5156,hanja:"郜",strokes:"10",def:{en:["name of fief in Shantong bestowed on the eldest son of Wen Wang"],kr:["나라이름","고"]},hunum:[{kor:"고",def:"나라이름"}]},{id:5157,hanja:"鬘",strokes:"21",def:{en:["beautiful hair"],kr:["머리장식","만"]},hunum:[{kor:"만",def:"머리장식"}]},{id:5158,hanja:"根",strokes:"10",def:{en:["root","base","foundation"],kr:["뿌리","근"]},hunum:[{kor:"근",def:"뿌리"}]},{id:5159,hanja:"郝",strokes:"10",def:{en:["surname","place in modern Shanxi"],kr:["고을","이름","학"]},hunum:[{kor:"학",def:"고을 이름"}]},{id:5160,hanja:"厦",strokes:"12",def:{en:["big building","mansion"],kr:["큰","집","하"]},hunum:[{kor:"하",def:"큰 집"}]},{id:5161,hanja:"拋",strokes:"8",def:{en:["throw","abandon","reject"],kr:["돌소뇌","포"]},hunum:[{kor:"포",def:"던질"}]},{id:5162,hanja:"洇",strokes:"9",def:{en:[],kr:["湮과","同字"]},hunum:[{kor:"인",def:"빠질"}]},{id:5163,hanja:"巡",strokes:"7",def:{en:["patrol","go on circuit","cruise"],kr:["두루","순"]},hunum:[{kor:"순",def:"돌"}]},{id:5164,hanja:"鬙",strokes:"22",def:{en:["matted hair"],kr:["터럭","더부룩할","승"]},hunum:[{kor:"승",def:"터럭 더부룩할"}]},{id:5165,hanja:"膸",strokes:"17",def:{en:[],kr:["髓와","同字"]},hunum:[{kor:"수",def:"골수"}]},{id:5166,hanja:"睟",strokes:"13",def:{en:["clear"],kr:["윤택할","수"]},hunum:[{kor:"수",def:"똑바로 볼"}]},{id:5167,hanja:"拌",strokes:"8",def:{en:["mix"],kr:["버릴","반"]},hunum:[{kor:"반",def:"버릴"}]},{id:5168,hanja:"巢",strokes:"11",def:{en:["nest","living quarter in tree"],kr:["채소이름","소"]},hunum:[{kor:"소",def:"새집"}]},{id:5169,hanja:"郞",strokes:"10",def:{en:["gentleman"],kr:["사나이","랑"]},hunum:[{kor:"랑",def:"사나이"}]},{id:5170,hanja:"鬚",strokes:"22",def:{en:["beard","whiskers","whisker"],kr:["아랫수염","수"]},hunum:[{kor:"수",def:"턱수염"}]},{id:5171,hanja:"膹",strokes:"17",def:{en:[],kr:["고기","삶은","국","분"]},hunum:[{kor:"분",def:"고기 삶은 국"}]},{id:5172,hanja:"睠",strokes:"13",def:{en:["to care for","love"],kr:["眷과","同字"]},hunum:[{kor:"권",def:"돌볼"}]},{id:5173,hanja:"厨",strokes:"12",def:{en:["kitchen","closet","cupboard"],kr:["廚의","俗字"]},hunum:[{kor:"주",def:"부엌"}]},{id:5174,hanja:"拍",strokes:"8",def:{en:["clap","tap","beat","beat or rhythm"],kr:["칠","박"]},hunum:[{kor:"박",def:"칠"}]},{id:5175,hanja:"亽",strokes:"3",def:{en:["kwukyel"]},hunum:[{kor:"라",def:"구결자"}]},{id:5176,hanja:"郟",strokes:"10",def:{en:["county in Henan province","surname"],kr:["그을","이름","겹"]},hunum:[{kor:"겹",def:"그을 이름"}]},{id:5177,hanja:"膺",strokes:"17",def:{en:["breast","chest","undertake","bear"],kr:["받을","응"]},hunum:[{kor:"응",def:"가슴"}]},{id:5178,hanja:"睡",strokes:"13",def:{en:["sleep","doze"],kr:["잠","수"]},hunum:[{kor:"수",def:"졸음"}]},{id:5179,hanja:"栻",strokes:"10",def:{en:["tree"],kr:["점판","식"]},hunum:[{kor:"식",def:"점판"}]},{id:5180,hanja:"洊",strokes:"9",def:{en:["flowing water"],kr:["이를","천"]},hunum:[{kor:"천",def:"이를"}]},{id:5181,hanja:"亾",strokes:"3",def:{en:["death","destroyed","lose","perish"]},hunum:[{kor:"망",def:"망할"},{kor:"무",def:"없을"}]},{id:5182,hanja:"睢",strokes:"13",def:{en:["gaze at","stare at","uninhibited"],kr:["물이름","수"]},hunum:[{kor:"수",def:"물이름"}]},{id:5183,hanja:"格",strokes:"10",def:{en:["pattern","standard","form","style"],kr:["막힐","락"]},hunum:[{kor:"격",def:"이를"},{kor:"낙",def:"막힐"}]},{id:5184,hanja:"栽",strokes:"10",def:{en:["to cultivate","plant","to care for plants"],kr:["심을","재"]},hunum:[{kor:"재",def:"심을"}]},{id:5185,hanja:"拏",strokes:"9",def:{en:["take","bring","grasp","hold","arrest"],kr:["붙잡을","나"]},hunum:[{kor:"나",def:"붙잡을"}]},{id:5186,hanja:"洋",strokes:"9",def:{en:["ocean","sea","foreign","western"],kr:["넘칠","양"]},hunum:[{kor:"양",def:"큰 바다"}]},{id:5187,hanja:"厩",strokes:"11",def:{en:["stable","barnyard"],kr:["마구","구"]},hunum:[{kor:"구",def:"마구"}]},{id:5188,hanja:"工",strokes:"3",def:{en:["labor","work","worker","laborer"],kr:["장인","공"]},hunum:[{kor:"공",def:"장인"}]},{id:5189,hanja:"郡",strokes:"10",def:{en:["administrative division"],kr:["고을","군"]},hunum:[{kor:"군",def:"고을"}]},{id:5190,hanja:"督",strokes:"13",def:{en:["supervise","oversee","direct"],kr:["감독할","독"]},hunum:[{kor:"독",def:"감독할"}]},{id:5191,hanja:"左",strokes:"5",def:{en:["left","east","unorthodox","improper"],kr:["왼","좌"]},hunum:[{kor:"좌",def:"왼"}]},{id:5192,hanja:"拐",strokes:"8",def:{en:["kidnap","abduct","turn"],kr:["속일","괴"]},hunum:[{kor:"괴",def:"속일"}]},{id:5193,hanja:"洌",strokes:"9",def:{en:["clear"],kr:["맑을","렬"]},hunum:[{kor:"렬",def:"맑을"}]},{id:5194,hanja:"厪",strokes:"13",def:{en:["a hut","careful"],kr:["적을","근"]},hunum:[{kor:"근",def:"적을"}]},{id:5195,hanja:"郢",strokes:"10",def:{en:["state in today"],kr:["땅이름","영"]},hunum:[{kor:"영",def:"땅이름"}]},{id:5196,hanja:"膽",strokes:"17",def:{en:["gall bladder","bravery","courage"],kr:["쓸개","담"]},hunum:[{kor:"담",def:"쓸개"}]},{id:5197,hanja:"蚊",strokes:"10",def:{en:["mosquito","gnat"],kr:["모기","문"]},hunum:[{kor:"문",def:"모기"}]},{id:5198,hanja:"鬟",strokes:"23",def:{en:["dress hair in coiled knot","maid"],kr:["쪽찐","머리","환"]},hunum:[{kor:"환",def:"쪽찐 머리"}]},{id:5199,hanja:"拑",strokes:"8",def:{en:["to clamp","tie down or pin down"],kr:["자갈","먹일","겸"]},hunum:[{kor:"겸",def:"자갈 먹일"}]},{id:5200,hanja:"巧",strokes:"5",def:{en:["skillful","ingenious","clever"],kr:["공교할","교"]},hunum:[{kor:"교",def:"공교할"}]},{id:5201,hanja:"蚋",strokes:"10",def:{en:["gnat","mosquito"],kr:["모기","예"]},hunum:[{kor:"예",def:"모기"}]},{id:5202,hanja:"睥",strokes:"13",def:{en:["look askance at","glare at"],kr:["흘겨볼","비"]},hunum:[{kor:"비",def:"흘겨볼"}]},{id:5203,hanja:"膾",strokes:"17",def:{en:["minced meat or fish"],kr:["회","회"]},hunum:[{kor:"회",def:"회"}]},{id:5204,hanja:"拒",strokes:"8",def:{en:["ward off with hand","defend"],kr:["진이름","구"]},hunum:[{kor:"거",def:"막을"},{kor:"구",def:"진이름"}]},{id:5205,hanja:"厬",strokes:"14",def:{en:[],kr:["목마를","궤"]},hunum:[{kor:"궤",def:"목마를"}]},{id:5206,hanja:"巨",strokes:"5",def:{en:["large","great","enormous","chief"],kr:["억","거"]},hunum:[{kor:"거",def:"클"}]},{id:5207,hanja:"郤",strokes:"10",def:{en:["crack","opening","surname"],kr:["틈","극"]},hunum:[{kor:"극",def:"틈"}]},{id:5208,hanja:"鬠",strokes:"23",def:{en:["to make a top knot","to be slovenly dressed"],kr:["鬅鬠"]},hunum:[{kor:"괄",def:"결발할"}]},{id:5209,hanja:"蚌",strokes:"10",def:{en:["oysters","mussels","mother"],kr:["방합","방"]},hunum:[{kor:"방",def:"방합"}]},{id:5210,hanja:"睦",strokes:"13",def:{en:["friendly","amiable","peaceful"],kr:["화목할","목"]},hunum:[{kor:"목",def:"화목할"}]},{id:5211,hanja:"拓",strokes:"8",def:{en:["expand","open up","support or push"],kr:["밀칠","탁"]},hunum:[{kor:"척",def:"주울"},{kor:"탁",def:"물리칠"}]},{id:5212,hanja:"厭",strokes:"14",def:{en:["dislike","detest","reject","satiate"],kr:["숨길","엽"]},hunum:[{kor:"염",def:"넉넉할"},{kor:"엽",def:"제사할"}]},{id:5213,hanja:"膿",strokes:"17",def:{en:["pus"],kr:["고름","농"]},hunum:[{kor:"농",def:"고름"}]},{id:5214,hanja:"蚍",strokes:"10",def:{en:["mussels","various shellfish"],kr:["왕개미","비"]},hunum:[{kor:"비",def:"왕개미"}]},{id:5215,hanja:"拔",strokes:"8",def:{en:["uproot","pull out"],kr:["휘어","꺾을","패"]},hunum:[{kor:"발",def:"뺄"},{kor:"패",def:"밋밋할"}]},{id:5216,hanja:"厮",strokes:"14",def:{en:["servant","to make a disturbance"],kr:["나눌","시"]},hunum:[{kor:"시",def:"부릴"}]},{id:5217,hanja:"巪",strokes:"6",def:{en:["person"],kr:["사람","이름자","걱"]},hunum:[{kor:"걱",def:"사람 이름자"}]},{id:5218,hanja:"鬢",strokes:"24",def:{en:["hair on temples"],kr:["살쩍","빈"]},hunum:[{kor:"빈",def:"살쩍"}]},{id:5219,hanja:"睨",strokes:"13",def:{en:["look askance at","glare at","squint"],kr:["해","기울어질","예"]},hunum:[{kor:"예",def:"흘겨볼"}]},{id:5220,hanja:"拕",strokes:"8",def:{en:["to drag after","to drag out","from which comes","to delay","to implicate"],kr:["당길","타"]},hunum:[{kor:"타",def:"끌"}]},{id:5221,hanja:"巫",strokes:"7",def:{en:["wizard","sorcerer","witch","shaman"],kr:["산","이름","무"]},hunum:[{kor:"무",def:"무당"}]},{id:5222,hanja:"拖",strokes:"8",def:{en:["drag","tow","haul","delay","prolong"],kr:["拕와","同字"]},hunum:[{kor:"타",def:"끌"}]},{id:5223,hanja:"洑",strokes:"9",def:{en:["whirlpool","undercurrent"],kr:["보","보"]},hunum:[{kor:"보",def:"보"}]},{id:5224,hanja:"巬",strokes:"9",def:{en:[]},hunum:[{kor:"부",def:"일꾼"}]},{id:5225,hanja:"部",strokes:"11",def:{en:["part","division","section"],kr:["거느릴","부"]},hunum:[{kor:"부",def:"거느릴"}]},{id:5226,hanja:"鬣",strokes:"25",def:{en:["horse","fin","human whiskers"],kr:["갈기","렵"]},hunum:[{kor:"렵",def:"갈기"}]},{id:5227,hanja:"睫",strokes:"13",def:{en:["eyelashes"],kr:["속눈썹","첩"]},hunum:[{kor:"첩",def:"속눈썹"}]},{id:5228,hanja:"拗",strokes:"8",def:{en:["to pull","drag","break off","to pluck","bent","warped","perverse","obstinate"],kr:["고집스러울","요"]},hunum:[{kor:"요",def:"고집스러울"}]},{id:5229,hanja:"洒",strokes:"9",def:{en:["sprinkle","scatter","pour","to wipe away","to shiver"],kr:["설치할","세"]},hunum:[{kor:"세",def:"씻을"}]},{id:5230,hanja:"厱",strokes:"15",def:{en:[],kr:["언덕","비탈","엄"]},hunum:[{kor:"엄",def:"언덕 비탈"}]},{id:5231,hanja:"巭",strokes:"9",def:{en:["study"],kr:["공부할","부"]},hunum:[{kor:"부",def:"공부할"}]},{id:5232,hanja:"郪",strokes:"12",def:{en:["name of a stream in Sichuan province"],kr:["고을","이름","처"]},hunum:[{kor:"처",def:"고을 이름"}]},{id:5233,hanja:"睬",strokes:"13",def:{en:["notice","pay attention to"],kr:["주목할","채"]},hunum:[{kor:"채",def:"주목할"}]},{id:5234,hanja:"差",strokes:"10",def:{en:["to differ","different","wrong","nearly","almost","an officer"],kr:["구분지을","치"]},hunum:[{kor:"차",def:"어긋날"},{kor:"치",def:"어긋날"}]},{id:5235,hanja:"拘",strokes:"8",def:{en:["restrain","seize","detain"],kr:["잡을","구"]},hunum:[{kor:"구",def:"잡을"}]},{id:5236,hanja:"厲",strokes:"15",def:{en:["whetstone","grind","sharpen","whet"],kr:["갈","려"]},hunum:[{kor:"려",def:"갈"}]},{id:5237,hanja:"墀",strokes:"14",def:{en:["porch","courtyard","steps leading"],kr:["계단","위의","공지","지"]},hunum:[{kor:"지",def:"계단 위의 공지"}]},{id:5238,hanja:"拙",strokes:"8",def:{en:["stupid","clumsy","crude","convention"],kr:["서툴","졸"]},hunum:[{kor:"졸",def:"서툴"}]},{id:5239,hanja:"厳",strokes:"17",def:{en:["strict","rigorous","rigid","stern"],kr:["嚴과","同字"]},hunum:[{kor:"엄",def:"엄할"}]},{id:5240,hanja:"郫",strokes:"11",def:{en:[],kr:["고을","이름","비"]},hunum:[{kor:"비",def:"고을 이름"}]},{id:5241,hanja:"爀",strokes:"18",def:{en:[],kr:["빛날","혁"]},hunum:[{kor:"혁",def:"불빛"}]},{id:5242,hanja:"墁",strokes:"14",def:{en:["to plaster","to pave"],kr:["흙손","만"]},hunum:[{kor:"만",def:"흙손"}]},{id:5243,hanja:"鬧",strokes:"15",def:{en:["quarrel","dispute hotly"],kr:["시끄러울","료"]},hunum:[{kor:"뇨",def:"시끄러울"},{kor:"료",def:"시끄러울"}]},{id:5244,hanja:"蚓",strokes:"10",def:{en:["earthworm"],kr:["지렁이","인"]},hunum:[{kor:"인",def:"지렁이"}]},{id:5245,hanja:"鬨",strokes:"16",def:{en:["boisterous","clamor","noise"],kr:["싸울","홍"]},hunum:[{kor:"항",def:"싸움소리"},{kor:"홍",def:"싸울"}]},{id:5246,hanja:"招",strokes:"8",def:{en:["beckon","summon","recruit","levy"],kr:["부를","초"]},hunum:[{kor:"교",def:"들"},{kor:"초",def:"부를"}]},{id:5247,hanja:"厵",strokes:"30",def:{en:["a spring","source"],kr:["源과","同字"]},hunum:[{kor:"원",def:"근원"}]},{id:5248,hanja:"己",strokes:"3",def:{en:["self","oneself","personal","private","sixth heavenly stem"],kr:["자기","기"]},hunum:[{kor:"기",def:"자기"}]},{id:5249,hanja:"郭",strokes:"11",def:{en:["outer part","surname"],kr:["성곽","곽"]},hunum:[{kor:"곽",def:"성곽"}]},{id:5250,hanja:"鬩",strokes:"18",def:{en:["feud","fight","quarrel"],kr:["싸울","혁"]},hunum:[{kor:"혁",def:"송사할"}]},{id:5251,hanja:"蚕",strokes:"10",def:{en:["silkworms"],kr:["지렁이","천"]},hunum:[{kor:"잠",def:"누에"},{kor:"천",def:"지렁이"}]},{id:5252,hanja:"拜",strokes:"9",def:{en:["do obeisance","bow","kowtow"],kr:["절","배"]},hunum:[{kor:"배",def:"절"}]},{id:5253,hanja:"洗",strokes:"9",def:{en:["wash","rinse","clean","purify"],kr:["세수","그릇","세"]},hunum:[{kor:"선",def:"조촐할"},{kor:"세",def:"씻을"}]},{id:5254,hanja:"厶",strokes:"2",def:{en:["private","secret","KangXi radical"],kr:["사사","사"]},hunum:[{kor:"사",def:"사사"}]},{id:5255,hanja:"境",strokes:"14",def:{en:["boundary","frontier","area","region"],kr:["지경","경"]},hunum:[{kor:"경",def:"지경"}]},{id:5256,hanja:"鬪",strokes:"20",def:{en:["struggle","fight","compete","contend"],kr:["싸움","투"]},hunum:[{kor:"투",def:"싸움"}]},{id:5257,hanja:"厷",strokes:"4",def:{en:["the fore","most Chinese","round"],kr:["둥글","굉"]},hunum:[{kor:"굉",def:"둥글"}]},{id:5258,hanja:"已",strokes:"3",def:{en:["already","finished","stop"],kr:["너무","이"]},hunum:[{kor:"이",def:"이미"}]},{id:5259,hanja:"郯",strokes:"11",def:{en:["name of a small ancient principality which was situated in what is now part of Shantung and Kiangsu"],kr:["나라이름","담"]},hunum:[{kor:"담",def:"나라이름"}]},{id:5260,hanja:"洙",strokes:"9",def:{en:["name of a river in Shandong"],kr:["물읾","수"]},hunum:[{kor:"수",def:"물가"}]},{id:5261,hanja:"厸",strokes:"4",def:{en:[],kr:["鄰의","古字"]},hunum:[{kor:"린",def:"이웃"}]},{id:5262,hanja:"巳",strokes:"3",def:{en:["the hours from","sixth terrestrial branch"],kr:["여섯째","지지","사"]},hunum:[{kor:"사",def:"여섯째 지지"}]},{id:5263,hanja:"墅",strokes:"14",def:{en:["villa","country house"],kr:["농막","서"]},hunum:[{kor:"서",def:"농막"}]},{id:5264,hanja:"巴",strokes:"4",def:{en:["greatly desire","anxiously hope"],kr:["땅이름","파"]},hunum:[{kor:"파",def:"꼬리"}]},{id:5265,hanja:"厹",strokes:"4",def:{en:["spear","tribe"],kr:["세모창","구"]},hunum:[{kor:"구",def:"세모창"}]},{id:5266,hanja:"巵",strokes:"7",def:{en:["measuring cup","wine container"],kr:["연지","치"]},hunum:[{kor:"치",def:"잔"}]},{id:5267,hanja:"拠",strokes:"8",def:{en:["to occupy","take possession of","a base","position"],kr:["據의","俗字"]},hunum:[{kor:"거",def:"근거"}]},{id:5268,hanja:"洛",strokes:"9",def:{en:["river in Shanxi province","city"],kr:["강이름","락"]},hunum:[{kor:"락",def:"강이름"}]},{id:5269,hanja:"厺",strokes:"5",def:{en:["to go","depart"],kr:["去의","本字"]},hunum:[{kor:"거",def:"갈"}]},{id:5270,hanja:"爆",strokes:"19",def:{en:["crackle","pop","burst","explode"],kr:["불터질","폭"]},hunum:[{kor:"박",def:"지질"},{kor:"폭",def:"불터질"}]},{id:5271,hanja:"拡",strokes:"8",def:{en:["expand","enlarge","stretch"],kr:["擴의","略字"]},hunum:[{kor:"광",def:"넓힐"},{kor:"확",def:"넓힐"}]},{id:5272,hanja:"去",strokes:"5",def:{en:["go away","leave","depart"],kr:["감출","거"]},hunum:[{kor:"거",def:"갈"}]},{id:5273,hanja:"鬮",strokes:"27",def:{en:["lots","draw lots"],kr:["제비뽑을","구"]},hunum:[{kor:"구",def:"제비뽑을"}]},{id:5274,hanja:"巷",strokes:"9",def:{en:["alley","lane"],kr:["내시","항"]},hunum:[{kor:"항",def:"거리"}]},{id:5275,hanja:"郴",strokes:"11",def:{en:["county in Hunan province","surname"],kr:["땅이름","침"]},hunum:[{kor:"침",def:"땅이름"}]},{id:5276,hanja:"鬯",strokes:"10",def:{en:["sacrificial wine","unhindered"],kr:["울창주","청"]},hunum:[{kor:"청",def:"울창주"}]},{id:5277,hanja:"爇",strokes:"19",def:{en:["burn"],kr:["불사를","설"]},hunum:[{kor:"설",def:"불사를"}]},{id:5278,hanja:"籃",strokes:"20",def:{en:["basket"],kr:["바구니","람"]},hunum:[{kor:"람",def:"바구니"}]},{id:5279,hanja:"厼",strokes:"5",def:{en:["kwukyel"]},hunum:[{kor:"며",def:"구결자"},{kor:"이",def:"구결자"}]},{id:5280,hanja:"墉",strokes:"14",def:{en:["wall","fortified wall","small wall"],kr:["담벽","용"]},hunum:[{kor:"용",def:"작은 성"}]},{id:5281,hanja:"墊",strokes:"14",def:{en:["advance money","pay for another"],kr:["축축할","점"]},hunum:[{kor:"점",def:"빠질"}]},{id:5282,hanja:"洞",strokes:"9",def:{en:["cave","grotto","ravine","hole"],kr:["밝을","통"]},hunum:[{kor:"동",def:"마을"},{kor:"통",def:"구렁"}]},{id:5283,hanja:"厽",strokes:"6",def:{en:[],kr:["흙을","쌓아서","담","쌀","참"]},hunum:[{kor:"뤼",def:"흙을 쌓아서 담 쌓을"},{kor:"참",def:"흙을 쌓아서 담 쌀"}]},{id:5284,hanja:"郵",strokes:"11",def:{en:["postal","mail","post office"],kr:["우편","우"]},hunum:[{kor:"우",def:"역말"}]},{id:5285,hanja:"鬰",strokes:"27",def:{en:["luxuriant","dense","thick","moody"],kr:["鬱과","同字"]},hunum:[{kor:"울",def:"답답할"}]},{id:5286,hanja:"洟",strokes:"9",def:{en:["snivel","mucus from nose"],kr:["못이름","이"]},hunum:[{kor:"이",def:"콧물"}]},{id:5287,hanja:"巹",strokes:"9",def:{en:[],kr:["받들","근"]},hunum:[{kor:"근",def:"받들"}]},{id:5288,hanja:"鬱",strokes:"29",def:{en:["luxuriant","dense","thick","moody"],kr:["향기로운","풀","울"]},hunum:[{kor:"울",def:"향기로운 풀"}]},{id:5289,hanja:"闃",strokes:"17",def:{en:["alone","quiet","still"],kr:["고요할","격"]},hunum:[{kor:"격",def:"고요할"}]},{id:5290,hanja:"睷",strokes:"24",def:{en:[],kr:["눈으로","세어볼","건"]},hunum:[{kor:"건",def:"눈으로 세어볼"}]},{id:5291,hanja:"郷",strokes:"11",def:{en:["country","rural","village"],kr:["鄕과","同字"]},hunum:[{kor:"향",def:"시골"}]},{id:5292,hanja:"巺",strokes:"9",def:{en:["fifth of the","South","mild","modest","obedient"],kr:["巽과","同字"]},hunum:[{kor:"손",def:"부드러울"}]},{id:5293,hanja:"鬲",strokes:"10",def:{en:["type of caldron with three hollow legs","name of a state","KangXi radical number"],kr:["땅이름","격"]},hunum:[{kor:"격",def:"오지병"}]},{id:5294,hanja:"爋",strokes:"20",def:{en:[],kr:["불에","말릴","훈"]},hunum:[{kor:"훈",def:"불에 말릴"}]},{id:5295,hanja:"巻",strokes:"9",def:{en:["scroll","curl","make a comeback"],kr:["卷의","俗字"]},hunum:[{kor:"권",def:"말"}]},{id:5296,hanja:"墍",strokes:"14",def:{en:["paint","decorate"],kr:["맥질할","기"]},hunum:[{kor:"기",def:"맥질할"}]},{id:5297,hanja:"睹",strokes:"14",def:{en:["look at","gaze at","observe"],kr:["볼","도"]},hunum:[{kor:"도",def:"볼"}]},{id:5298,hanja:"巼",strokes:"10",def:{en:["place name"],kr:["땅이름","팟"]},hunum:[{kor:"팟",def:"땅이름"}]},{id:5299,hanja:"爌",strokes:"19",def:{en:[],kr:["불","빛","환할","광"]},hunum:[{kor:"광",def:"불 빛 환할"}]},{id:5300,hanja:"爍",strokes:"19",def:{en:["shine","glitter","sparkle"],kr:["빛날","삭"]},hunum:[{kor:"삭",def:"빛날"}]},{id:5301,hanja:"巽",strokes:"12",def:{en:["fifth of the","South","mild","modest","obedient"],kr:["동과","남의","사이방향","손"]},hunum:[{kor:"손",def:"사양할"}]},{id:5302,hanja:"闇",strokes:"17",def:{en:["close","shut","dark","dismal"],kr:["어리석을","암"]},hunum:[{kor:"암",def:"어두울"}]},{id:5303,hanja:"拨",strokes:"8",def:{en:["move","dispel","distribute"]},hunum:[{kor:"발",def:"다스릴"}]},{id:5304,hanja:"巾",strokes:"3",def:{en:["kerchief","towel","turban","KangXi radical number"],kr:["덮을","건"]},hunum:[{kor:"건",def:"수건"}]},{id:5305,hanja:"墐",strokes:"14",def:{en:["to build with soil","plaster over with mud"],kr:["진흙","근"]},hunum:[{kor:"근",def:"진흙"}]},{id:5306,hanja:"闈",strokes:"17",def:{en:["gate","door","living quarters"],kr:["대궐안의","문","위"]},hunum:[{kor:"위",def:"대궐안의 문"}]},{id:5307,hanja:"津",strokes:"9",def:{en:["ferry","saliva","ford"],kr:["나루","진"]},hunum:[{kor:"진",def:"나루"}]},{id:5308,hanja:"蚣",strokes:"10",def:{en:["centipede"],kr:["지네","공"]},hunum:[{kor:"공",def:"지네"}]},{id:5309,hanja:"睽",strokes:"14",def:{en:["staring"],kr:["어그러질","규"]},hunum:[{kor:"규",def:"어그러질"}]},{id:5310,hanja:"闊",strokes:"17",def:{en:["broad","ample","wide","be apart"],kr:["트일","활"]},hunum:[{kor:"활",def:"트일"}]},{id:5311,hanja:"蚤",strokes:"10",def:{en:["flea","louse"],kr:["벼룩","조"]},hunum:[{kor:"조",def:"벼룩"}]},{id:5312,hanja:"爐",strokes:"20",def:{en:["fireplace","stove","oven","furnace"],kr:["화로","로"]},hunum:[{kor:"로",def:"화로"}]},{id:5313,hanja:"睾",strokes:"14",def:{en:["testicle"],kr:["못","고"]},hunum:[{kor:"고",def:"못"}]},{id:5314,hanja:"籌",strokes:"20",def:{en:["chip","tally","token","raise money"],kr:["투호","살","주"]},hunum:[{kor:"주",def:"투호 살"}]},{id:5315,hanja:"洧",strokes:"9",def:{en:["name of a river in honan"],kr:["물이름","유"]},hunum:[{kor:"유",def:"물이름"}]},{id:5316,hanja:"墓",strokes:"14",def:{en:["grave","tomb"],kr:["무덤","묘"]},hunum:[{kor:"묘",def:"무덤"}]},{id:5317,hanja:"都",strokes:"12",def:{en:["metropolis","capital","all","the whole","elegant","refined"],kr:["도읍","도"]},hunum:[{kor:"도",def:"도읍"}]},{id:5318,hanja:"闋",strokes:"17",def:{en:["close","shut","watch tower"],kr:["문","닫을","결"]},hunum:[{kor:"결",def:"쉴"}]},{id:5319,hanja:"睿",strokes:"14",def:{en:["shrewd","astute","clever","keen"],kr:["통할","예"]},hunum:[{kor:"예",def:"슬기로울"}]},{id:5320,hanja:"籍",strokes:"20",def:{en:["record","register","list","census"],kr:["임금이","가는","밭","적"]},hunum:[{kor:"적",def:"문서"}]},{id:5321,hanja:"括",strokes:"9",def:{en:["include","embrace","enclose"],kr:["묶을","괄"]},hunum:[{kor:"괄",def:"묶을"}]},{id:5322,hanja:"鬺",strokes:"21",def:{en:[],kr:["삶을","상"]},hunum:[{kor:"상",def:"삶을"}]},{id:5323,hanja:"闌",strokes:"17",def:{en:["door screen","railing fence"],kr:["가막을","란"]},hunum:[{kor:"란",def:"가막을"}]},{id:5324,hanja:"拭",strokes:"9",def:{en:["wipe away stains with cloth"],kr:["다듬을","식"]},hunum:[{kor:"식",def:"닦을"}]},{id:5325,hanja:"洩",strokes:"9",def:{en:["leak","drip","vent or release"],kr:["날개","훨훨칠","예"]},hunum:[{kor:"설",def:"샐"},{kor:"예",def:"퍼질"}]},{id:5326,hanja:"闍",strokes:"17",def:{en:["tower over city gate"],kr:["성문","층대","도"]},hunum:[{kor:"도",def:"성문 층대"}]},{id:5327,hanja:"爔",strokes:"20",def:{en:[],kr:["불","희"]},hunum:[{kor:"희",def:"불"}]},{id:5328,hanja:"洪",strokes:"9",def:{en:["vast","immense","flood","deluge"],kr:["큰물","홍"]},hunum:[{kor:"홍",def:"큰물"}]},{id:5329,hanja:"拮",strokes:"9",def:{en:["laboring hard","occupied","pursue"],kr:["일할","길"]},hunum:[{kor:"결",def:"길거할"},{kor:"길",def:"일할"}]},{id:5330,hanja:"鬼",strokes:"10",def:{en:["ghost","spirit of dead","devil"],kr:["귀신","귀"]},hunum:[{kor:"귀",def:"귀신"}]},{id:5331,hanja:"蚨",strokes:"10",def:{en:["a kind of water","then dollars and money generally"],kr:["파랑강충이","부"]},hunum:[{kor:"부",def:"파랑강충이"}]},{id:5332,hanja:"洫",strokes:"9",def:{en:["to ditch","a moat"],kr:["봇도랑","혁"]},hunum:[{kor:"혁",def:"넘칠"}]},{id:5333,hanja:"蚩",strokes:"10",def:{en:["worm","ignorant","rustic","laugh"],kr:["업신여길","치"]},hunum:[{kor:"치",def:"치벌레"}]},{id:5334,hanja:"拯",strokes:"9",def:{en:["help","save","aid","lift","raise"],kr:["건질","증"]},hunum:[{kor:"증",def:"건질"}]},{id:5335,hanja:"増",strokes:"14",def:{en:["increase"],kr:["더할","증"]},hunum:[{kor:"증",def:"더할"}]},{id:5336,hanja:"籐",strokes:"21",def:{en:["climbing plants","vines","cane"],kr:["대","기구","등"]},hunum:[{kor:"등",def:"대 기구"}]},{id:5337,hanja:"闏",strokes:"17",def:{en:[]},hunum:[{kor:"풍",def:"문바람"}]},{id:5338,hanja:"洬",strokes:"9",def:{en:[]},hunum:[{kor:"속",def:"비 올"}]},{id:5339,hanja:"蚪",strokes:"10",def:{en:["tadpole"],kr:["올챙이","두"]},hunum:[{kor:"두",def:"올챙이"}]},{id:5340,hanja:"籒",strokes:"21",def:{en:[],kr:["주문","주"]},hunum:[{kor:"주",def:"주문"}]},{id:5341,hanja:"爗",strokes:"20",def:{en:[],kr:["번쩍번쩍할","엽"]},hunum:[{kor:"엽",def:"불 이글글할"}]},{id:5342,hanja:"拱",strokes:"9",def:{en:["fold hands on breast","bow","salute"],kr:["두","손","맞잡을","공"]},hunum:[{kor:"공",def:"두 손 맞잡을"}]},{id:5343,hanja:"乀",strokes:"1",def:{en:["stretch"],kr:["파임","불"]},hunum:[{kor:"불",def:"파임"}]},{id:5344,hanja:"籔",strokes:"21",def:{en:["bamboo basket"],kr:["또아리","수"]},hunum:[{kor:"수",def:"조리"}]},{id:5345,hanja:"拳",strokes:"10",def:{en:["fist","various forms of boxing"],kr:["주먹","권"]},hunum:[{kor:"권",def:"주먹"}]},{id:5346,hanja:"洮",strokes:"9",def:{en:["cleanse","river in Gansu province"],kr:["달아날","도"]},hunum:[{kor:"도",def:"달아날"}]},{id:5347,hanja:"乂",strokes:"2",def:{en:["govern","control","manage","nurture"],kr:["다스릴","예"]},hunum:[{kor:"예",def:"풀 벨"}]},{id:5348,hanja:"柁",strokes:"9",def:{en:["large tie"],kr:["키","타"]},hunum:[{kor:"타",def:"키"}]},{id:5349,hanja:"墜",strokes:"15",def:{en:["fall down","drop","sink","go to ruin"],kr:["잃을","추"]},hunum:[{kor:"추",def:"떨어질"}]},{id:5350,hanja:"爚",strokes:"21",def:{en:["bright","fiery"],kr:["스러질","약"]},hunum:[{kor:"약",def:"스러질"}]},{id:5351,hanja:"乃",strokes:"2",def:{en:["then","really","indeed","as it turned out","after all","namely"],kr:["이에","내"]},hunum:[{kor:"내",def:"이에"}]},{id:5352,hanja:"闓",strokes:"18",def:{en:["open","peaceful"],kr:["활깍지","개"]},hunum:[{kor:"개",def:"열"}]},{id:5353,hanja:"闔",strokes:"18",def:{en:["close","whole","entire","all","leaf"],kr:["닫을","합"]},hunum:[{kor:"합",def:"문짝"}]},{id:5354,hanja:"拵",strokes:"9",def:{en:["to make","prepare","manufacture","workmanship","an arrangement"],kr:["꽂을","존"]},hunum:[{kor:"존",def:"꽂을"}]},{id:5355,hanja:"爛",strokes:"21",def:{en:["rotten","spoiled","decayed"],kr:["문드러질","란"]},hunum:[{kor:"란",def:"문드러질"}]},{id:5356,hanja:"蚯",strokes:"11",def:{en:["earthworm"],kr:["지렁이","구"]},hunum:[{kor:"구",def:"지렁이"}]},{id:5357,hanja:"拶",strokes:"9",def:{en:["press","squeeze hard","force"],kr:["핍박할","찰"]},hunum:[{kor:"찰",def:"핍박할"}]},{id:5358,hanja:"腁",strokes:"12",def:{en:["callus"],kr:["살갗","틀","변"]},hunum:[{kor:"변",def:"살갗 틀"}]},{id:5359,hanja:"墝",strokes:"15",def:{en:["stony"],kr:["자갈","땅","요"]},hunum:[{kor:"요",def:"메마른 밭"}]},{id:5360,hanja:"久",strokes:"3",def:{en:["long time","time passage","grow late"],kr:["오랠","구"]},hunum:[{kor:"구",def:"오랠"}]},{id:5361,hanja:"闕",strokes:"18",def:{en:["watch tower","palace"],kr:["대궐","궐"]},hunum:[{kor:"궐",def:"대궐"}]},{id:5362,hanja:"蚰",strokes:"11",def:{en:["millipede"],kr:["땅지네","유"]},hunum:[{kor:"유",def:"노래기"}]},{id:5363,hanja:"闖",strokes:"18",def:{en:["rush in","burst in","charge in"]},hunum:[{kor:"틈",def:"엿볼"}]},{id:5364,hanja:"蚱",strokes:"11",def:{en:["grasshopper","cicada"],kr:["벼메뚜기","책"]},hunum:[{kor:"책",def:"벼메뚜기"}]},{id:5365,hanja:"增",strokes:"15",def:{en:["increase","add to","augment"],kr:["불을","증"]},hunum:[{kor:"증",def:"불을"}]},{id:5366,hanja:"洲",strokes:"9",def:{en:["continent","island","islet"],kr:["섬","주"]},hunum:[{kor:"주",def:"섬"}]},{id:5367,hanja:"拷",strokes:"9",def:{en:["torture and interrogate","hit"],kr:["가질","고"]},hunum:[{kor:"고",def:"가질"}]},{id:5368,hanja:"柄",strokes:"9",def:{en:["handle","lever","knob","authority"],kr:["자루","병"]},hunum:[{kor:"병",def:"자루"}]},{id:5369,hanja:"乆",strokes:"3",def:{en:["long time","time passage","grow late"],kr:["久의","俗字"]},hunum:[{kor:"구",def:"오랠"}]},{id:5370,hanja:"墟",strokes:"15",def:{en:["high mound","hilly countryside","wasteland"],kr:["큰","두덕","허"]},hunum:[{kor:"허",def:"옛 터"}]},{id:5371,hanja:"乇",strokes:"3",def:{en:["to depend on","to entrust with"],kr:["풀잎","적"]},hunum:[{kor:"적",def:"풀잎"}]},{id:5372,hanja:"柅",strokes:"9",def:{en:["flourish"],kr:["얼레자루","니"]},hunum:[{kor:"니",def:"얼레자루"}]},{id:5373,hanja:"闗",strokes:"18",def:{en:["a frontier pass or gate to shut or close","a custom","suburbs of a city"],kr:["關의","俗字"]},hunum:[{kor:"관",def:"빗장"},{kor:"완",def:"당길"}]},{id:5374,hanja:"讀",strokes:"22",def:{en:["read","study","pronounce"],kr:["귀절","두"]},hunum:[{kor:"독",def:"읽을"},{kor:"두",def:"귀절"}]},{id:5375,hanja:"爟",strokes:"22",def:{en:["fire"],kr:["봉화","관"]},hunum:[{kor:"관",def:"봉화"}]},{id:5376,hanja:"么",strokes:"3",def:{en:["interrogative particle","repetition of a tune small","tender"],kr:["幺의","俗字"]},hunum:[{kor:"요",def:"작을"}]},{id:5377,hanja:"籛",strokes:"22",def:{en:["surname"],kr:["성씨","전"]},hunum:[{kor:"전",def:"성씨"}]},{id:5378,hanja:"洵",strokes:"9",def:{en:["true","real","truly","really"],kr:["멀","현"]},hunum:[{kor:"순",def:"웅덩이물"},{kor:"현",def:"멀"}]},{id:5379,hanja:"墡",strokes:"15",def:{en:[],kr:["백토","선"]},hunum:[{kor:"선",def:"백토"}]},{id:5380,hanja:"洶",strokes:"9",def:{en:["the rush of water","turbulent","noisy","restless"],kr:["물살세찰","흉"]},hunum:[{kor:"흉",def:"물살세찰"}]},{id:5381,hanja:"籜",strokes:"22",def:{en:["bamboo sheath","bamboo shoots"],kr:["대","껍질","탁"]},hunum:[{kor:"탁",def:"대 껍질"}]},{id:5382,hanja:"腆",strokes:"12",def:{en:["prosperous","good","protruding"],kr:["많이","차려놓을","전"]},hunum:[{kor:"전",def:"두터울"}]},{id:5383,hanja:"闚",strokes:"19",def:{en:["flash","flashing","steal look"],kr:["갸웃이","볼","규"]},hunum:[{kor:"규",def:"갸웃이 볼"}]},{id:5384,hanja:"蚴",strokes:"11",def:{en:[],kr:["굼틀거릴","유"]},hunum:[{kor:"유",def:"굼틀거릴"}]},{id:5385,hanja:"拼",strokes:"9",def:{en:["join together","link","incorporate"],kr:["좇을","평"]},hunum:[{kor:"평",def:"좇을"}]},{id:5386,hanja:"讃",strokes:"22",def:{en:["praise","commend","eulogize"],kr:["기릴","찬"]},hunum:[{kor:"찬",def:"기릴"}]},{id:5387,hanja:"之",strokes:"4",def:{en:["it","him her","them","go to"],kr:["갈","지"]},hunum:[{kor:"지",def:"갈"}]},{id:5388,hanja:"墣",strokes:"15",def:{en:[],kr:["흙덩이","복"]},hunum:[{kor:"복",def:"흙덩이"}]},{id:5389,hanja:"柊",strokes:"9",def:{en:["holly"],kr:["방망이","종"]},hunum:[{kor:"종",def:"방망이"}]},{id:5390,hanja:"拽",strokes:"9",def:{en:["drag","tow","throw","twist"],kr:["당길","예"]},hunum:[{kor:"예",def:"당길"}]},{id:5391,hanja:"洸",strokes:"9",def:{en:["sparkle","glitter"],kr:["물","용솟음할","광"]},hunum:[{kor:"광",def:"물 용솟음할"}]},{id:5392,hanja:"關",strokes:"19",def:{en:["frontier pass","close","relation"],kr:["빗장","완"]},hunum:[{kor:"관",def:"빗장"},{kor:"완",def:"화살 먹일"}]},{id:5393,hanja:"籟",strokes:"22",def:{en:["bamboo flute","pipe","various sound"],kr:["세","구멍","퉁소","뢰"]},hunum:[{kor:"뢰",def:"세 구멍 퉁소"}]},{id:5394,hanja:"拾",strokes:"9",def:{en:["pick up","collect","tidy up","accounting form of the numeral ten"],kr:["十의","갖은자"]},hunum:[{kor:"습",def:"주울"},{kor:"십",def:"十의 갖은"}]},{id:5395,hanja:"洹",strokes:"9",def:{en:["river in Henan province"],kr:["물","이름","원"]},hunum:[{kor:"원",def:"흐를"}]},{id:5396,hanja:"乍",strokes:"5",def:{en:["first time","for the first time"],kr:["잠깐","사"]},hunum:[{kor:"사",def:"잠깐"}]},{id:5397,hanja:"乎",strokes:"5",def:{en:["interrogative or exclamatory final particle"],kr:["인가","호"]},hunum:[{kor:"호",def:"인가"}]},{id:5398,hanja:"闞",strokes:"20",def:{en:["glance","peep","roar","growl"],kr:["범","소리","함"]},hunum:[{kor:"함",def:"범 소리"}]},{id:5399,hanja:"腊",strokes:"12",def:{en:["year end sacrifice","dried meat"],kr:["포","석"]},hunum:[{kor:"석",def:"포"}]},{id:5400,hanja:"籠",strokes:"22",def:{en:["cage","cage"],kr:["대그릇","롱"]},hunum:[{kor:"롱",def:"대그릇"}]},{id:5401,hanja:"拿",strokes:"10",def:{en:["take","hold","grasp","bring","with"],kr:["붙잡을","나"]},hunum:[{kor:"나",def:"붙잡을"}]},{id:5402,hanja:"洺",strokes:"9",def:{en:["river in Hebei province"],kr:["강","이름","명"]},hunum:[{kor:"명",def:"강 이름"}]},{id:5403,hanja:"乏",strokes:"5",def:{en:["lack","poor"],kr:["다할","핍"]},hunum:[{kor:"핍",def:"없을"}]},{id:5404,hanja:"爥",strokes:"25",def:{en:["simmer","cook over slow fire"],kr:["비칠","촉"]},hunum:[{kor:"촉",def:"비칠"}]},{id:5405,hanja:"腋",strokes:"12",def:{en:["armpit"],kr:["겨드랑이","액"]},hunum:[{kor:"액",def:"겨드랑이"}]},{id:5406,hanja:"活",strokes:"9",def:{en:["live","exist","survive","lively"],kr:["살","활"]},hunum:[{kor:"괄",def:"물 소리"},{kor:"활",def:"살"}]},{id:5407,hanja:"洼",strokes:"9",def:{en:["hollow","pit","depression","swamp"],kr:["물","이름","와"]},hunum:[{kor:"와",def:"물 이름"}]},{id:5408,hanja:"墨",strokes:"15",def:{en:["ink","writing"],kr:["형벌","이름","묵"]},hunum:[{kor:"묵",def:"먹"}]},{id:5409,hanja:"闠",strokes:"20",def:{en:["gate of a market"],kr:["저자문","궤"]},hunum:[{kor:"궤",def:"저자문"}]},{id:5410,hanja:"洽",strokes:"9",def:{en:["to blend with","be in harmony","to penetrate","to cover","a river in Shenxi"],kr:["윤태하게","할","흡"]},hunum:[{kor:"흡",def:"윤태하게 할"}]},{id:5411,hanja:"闡",strokes:"20",def:{en:["explain","clarify","elucidate"],kr:["열","천"]},hunum:[{kor:"천",def:"열"}]},{id:5412,hanja:"柏",strokes:"9",def:{en:["cypress","cedar"],kr:["나무","이름","백"]},hunum:[{kor:"백",def:"나무 이름"}]},{id:5413,hanja:"墩",strokes:"15",def:{en:["heap","mound","block of stone"],kr:["돈대","돈"]},hunum:[{kor:"돈",def:"돈대"}]},{id:5414,hanja:"乑",strokes:"6",def:{en:["stand side by side"],kr:["기어","오를","임"]},hunum:[{kor:"임",def:"나란히 설"}]},{id:5415,hanja:"派",strokes:"9",def:{en:["school of thought","sect","branch"],kr:["파벌","파"]},hunum:[{kor:"파",def:"물 갈래"}]},{id:5416,hanja:"籤",strokes:"23",def:{en:["tally","lot","marker"],kr:["제비","첨"]},hunum:[{kor:"첨",def:"제비"}]},{id:5417,hanja:"爨",strokes:"29",def:{en:["oven","cooking stove","cook"],kr:["불땔","찬"]},hunum:[{kor:"찬",def:"불땔"}]},{id:5418,hanja:"腎",strokes:"12",def:{en:["kidneys","testes","gizzard"],kr:["자지","신"]},hunum:[{kor:"신",def:"콩팥"}]},{id:5419,hanja:"讉",strokes:"23",def:{en:[],kr:["성낼","유"]},hunum:[{kor:"유",def:"성낼"}]},{id:5420,hanja:"某",strokes:"9",def:{en:["certain thing or person"],kr:["아무","모"]},hunum:[{kor:"매",def:"매화나무"},{kor:"모",def:"아무"}]},{id:5421,hanja:"闢",strokes:"21",def:{en:["open","settle","develop","open up"],kr:["열","벽"]},hunum:[{kor:"벽",def:"열"}]},{id:5422,hanja:"墫",strokes:"15",def:{en:["cup"],kr:["樽·罇과","同字"]},hunum:[{kor:"준",def:"술그릇"}]},{id:5423,hanja:"變",strokes:"23",def:{en:["change","transform","alter","rebel"],kr:["변할","변"]},hunum:[{kor:"변",def:"변할"}]},{id:5424,hanja:"籥",strokes:"23",def:{en:["key","woodwind instrument"],kr:["잠글","약"]},hunum:[{kor:"약",def:"피리"}]},{id:5425,hanja:"柑",strokes:"9",def:{en:["tangerine","loose"]},hunum:[{kor:"감",def:"감귤"},{kor:"검",def:"귤"}]},{id:5426,hanja:"柒",strokes:"9",def:{en:["number seven"],kr:["漆의","俗字"]},hunum:[{kor:"칠",def:"일곱"}]},{id:5427,hanja:"爪",strokes:"4",def:{en:["claw","nail","talon","animal feet"],kr:["손톱","조"]},hunum:[{kor:"조",def:"손톱"}]},{id:5428,hanja:"腐",strokes:"14",def:{en:["rot","decay","spoil","rotten"],kr:["썩을","부"]},hunum:[{kor:"부",def:"썩을"}]},{id:5429,hanja:"腑",strokes:"12",def:{en:["bowels","entrails","internal organs"],kr:["장부","부"]},hunum:[{kor:"부",def:"장부"}]},{id:5430,hanja:"讌",strokes:"23",def:{en:["a feast","banquet","to entertain","feast"],kr:["모여","말할","연"]},hunum:[{kor:"연",def:"잔치"}]},{id:5431,hanja:"籧",strokes:"23",def:{en:["crude bamboo mat"],kr:["양잠기","거"]},hunum:[{kor:"거",def:"대자리"}]},{id:5432,hanja:"染",strokes:"9",def:{en:["dye","be contagious","infect"],kr:["물들일","염"]},hunum:[{kor:"염",def:"꼭두서니"}]},{id:5433,hanja:"闥",strokes:"21",def:{en:["door","gate"],kr:["대문","달"]},hunum:[{kor:"달",def:"대문"}]},{id:5434,hanja:"爬",strokes:"8",def:{en:["crawl","creep","climb","scramble"],kr:["기어다닐","파"]},hunum:[{kor:"파",def:"긁을"}]},{id:5435,hanja:"墮",strokes:"15",def:{en:["fall","sink","let fall","degenerate"],kr:["잃을","타"]},hunum:[{kor:"타",def:"떨어질"}]},{id:5436,hanja:"腒",strokes:"12",def:{en:["game"],kr:["꿩","포","거"]},hunum:[{kor:"거",def:"건치"}]},{id:5437,hanja:"柔",strokes:"9",def:{en:["soft","gentle","pliant"],kr:["복종할","유"]},hunum:[{kor:"유",def:"부드러울"}]},{id:5438,hanja:"區",strokes:"11",def:{en:["area","district","region","ward","surname"],kr:["숨길","우"]},hunum:[{kor:"구",def:"감출"},{kor:"우",def:"경계"}]},{id:5439,hanja:"爭",strokes:"8",def:{en:["to dispute","fight","contend","strive"],kr:["분별할","쟁"]},hunum:[{kor:"쟁",def:"다툴"}]},{id:5440,hanja:"腓",strokes:"12",def:{en:["calf","avoid","be ill","wither"],kr:["장딴지","비"]},hunum:[{kor:"비",def:"장딴지"}]},{id:5441,hanja:"讎",strokes:"23",def:{en:["enemy","rival","opponent"],kr:["갚을","수"]},hunum:[{kor:"수",def:"짝"}]},{id:5442,hanja:"籩",strokes:"25",def:{en:["bamboo container for food"],kr:["제기","이름","변"]},hunum:[{kor:"변",def:"제기 이름"}]},{id:5443,hanja:"十",strokes:"2",def:{en:["ten","tenth","complete","perfect"],kr:["전부","십"]},hunum:[{kor:"십",def:"열"}]},{id:5444,hanja:"乖",strokes:"8",def:{en:["rebel","crafty","shrewd"],kr:["어그러질","괴"]},hunum:[{kor:"괴",def:"어그러질"}]},{id:5445,hanja:"腔",strokes:"12",def:{en:["chest cavity","hollow in body"],kr:["말","허구리","강"]},hunum:[{kor:"강",def:"창자"}]},{id:5446,hanja:"墰",strokes:"15",def:{en:["an earthenware jar","a jug"],kr:["목긴","술병","담"]},hunum:[{kor:"담",def:"목긴 술병"}]},{id:5447,hanja:"卂",strokes:"3",def:{en:["to fly rapidly"],kr:["급히","날","신"]},hunum:[{kor:"신",def:"빠를"}]},{id:5448,hanja:"乗",strokes:"9",def:{en:["ride","ascend","avail oneself of","numerary adjunct for vehicles"],kr:["乘의","俗字"]},hunum:[{kor:"승",def:"오를"}]},{id:5449,hanja:"千",strokes:"3",def:{en:["thousand","many","numerous","very","swindler"],kr:["일천","천"]},hunum:[{kor:"천",def:"일천"}]},{id:5450,hanja:"腕",strokes:"12",def:{en:["wrist"],kr:["팔뚝","완"]},hunum:[{kor:"완",def:"팔뚝"}]},{id:5451,hanja:"讐",strokes:"23",def:{en:["enemy","rival","opponent"],kr:["讎와","同字"]},hunum:[{kor:"수",def:"원수"}]},{id:5452,hanja:"柗",strokes:"9",def:{en:[],kr:["松과","同字"]},hunum:[{kor:"송",def:"소나무"}]},{id:5453,hanja:"墱",strokes:"15",def:{en:[],kr:["자드락길","등"]},hunum:[{kor:"등",def:"자드락길"}]},{id:5454,hanja:"乘",strokes:"10",def:{en:["ride","ascend","avail oneself of","numerary adjunct for vehicles"],kr:["같은","물건","네","개","승"]},hunum:[{kor:"승",def:"오를"}]},{id:5455,hanja:"爰",strokes:"9",def:{en:["lead on to","therefore","then"],kr:["가로되","원"]},hunum:[{kor:"원",def:"당길"}]},{id:5456,hanja:"柘",strokes:"9",def:{en:["a thorny tree","sugarcane"],kr:["산뽕나무","자"]},hunum:[{kor:"자",def:"산뽕나무"}]},{id:5457,hanja:"卄",strokes:"3",def:{en:["twenty","twentieth"],kr:["스물","입"]},hunum:[{kor:"입",def:"스물"}]},{id:5458,hanja:"乙",strokes:"1",def:{en:["second","second heavenly stem"],kr:["모모","을"]},hunum:[{kor:"을",def:"새"}]},{id:5459,hanja:"讒",strokes:"24",def:{en:["slander","defame","misrepresent"],kr:["참소할","참"]},hunum:[{kor:"참",def:"참소할"}]},{id:5460,hanja:"籬",strokes:"25",def:{en:["bamboo or wooden fence","hedge"],kr:["울타리","리"]},hunum:[{kor:"리",def:"울타리"}]},{id:5461,hanja:"墳",strokes:"15",def:{en:["grave","mound","bulge","bulging"],kr:["무덤","분"]},hunum:[{kor:"분",def:"무덤"}]},{id:5462,hanja:"卅",strokes:"4",def:{en:["thirty","thirtieth"],kr:["서른","삽"]},hunum:[{kor:"삽",def:"서른"}]},{id:5463,hanja:"柙",strokes:"9",def:{en:["cage","pen for wild animals"],kr:["향나무","합"]},hunum:[{kor:"합",def:"우리"}]},{id:5464,hanja:"卆",strokes:"4",def:{en:["soldier","servant","at last","finally"],kr:["卒과","同字"]},hunum:[{kor:"졸",def:"군사"}]},{id:5465,hanja:"讓",strokes:"24",def:{en:["allow","permit","yield","concede"],kr:["사양할","양"]},hunum:[{kor:"양",def:"사양할"}]},{id:5466,hanja:"爲",strokes:"12",def:{en:["do","handle","govern","act","be"],kr:["이룰","위"]},hunum:[{kor:"위",def:"할"}]},{id:5467,hanja:"嶁",strokes:"14",def:{en:["Goulou mountain peak in Hunan"],kr:["봉우리","루"]},hunum:[{kor:"루",def:"봉우리"}]},{id:5468,hanja:"嶂",strokes:"14",def:{en:["cliff","mountain barrier"],kr:["높고","가파른","산","장"]},hunum:[{kor:"장",def:"높고 가파른 산"}]},{id:5469,hanja:"柚",strokes:"9",def:{en:["pomelo","grapefruit"],kr:["북","축"]},hunum:[{kor:"유",def:"유자"},{kor:"축",def:"북"}]},{id:5470,hanja:"升",strokes:"4",def:{en:["arise","go up","hoist","advance"],kr:["괘","이름","승"]},hunum:[{kor:"승",def:"되"}]},{id:5471,hanja:"乜",strokes:"2",def:{en:["to squint","what"],kr:["사팔","뜨기","먀"]},hunum:[{kor:"먀",def:"사팔 뜨기"}]},{id:5472,hanja:"省",strokes:"9",def:{en:["province","save","economize"],kr:["살필","성"]},hunum:[{kor:"생",def:"덜"},{kor:"성",def:"살필"}]},{id:5473,hanja:"九",strokes:"2",def:{en:["nine"],kr:["모을","규"]},hunum:[{kor:"구",def:"아홉"},{kor:"규",def:"모을"}]},{id:5474,hanja:"讖",strokes:"24",def:{en:["prophecy","hint","omen"],kr:["참서","참"]},hunum:[{kor:"참",def:"참서"}]},{id:5475,hanja:"嶄",strokes:"14",def:{en:["high","steep","precipitous","new"],kr:["높을","참"]},hunum:[{kor:"참",def:"높을"}]},{id:5476,hanja:"邀",strokes:"17",def:{en:["invite","welcome","meet","intercept"],kr:["부를","요"]},hunum:[{kor:"요",def:"맞을"}]},{id:5477,hanja:"爵",strokes:"18",def:{en:["feudal title or rank"],kr:["벼슬","작"]},hunum:[{kor:"작",def:"벼슬"}]},{id:5478,hanja:"午",strokes:"4",def:{en:["noon","seventh terrestrial branch"],kr:["말","오"]},hunum:[{kor:"오",def:"낮"}]},{id:5479,hanja:"乞",strokes:"3",def:{en:["beg","request"],kr:["줄","기"]},hunum:[{kor:"걸",def:"구걸할"},{kor:"기",def:"줄"}]},{id:5480,hanja:"卉",strokes:"5",def:{en:["general term for plants","myriads"],kr:["풀","훼"]},hunum:[{kor:"훼",def:"풀"}]},{id:5481,hanja:"柝",strokes:"9",def:{en:["watchman"],kr:["목탁","탁"]},hunum:[{kor:"탁",def:"쪼갤"}]},{id:5482,hanja:"邁",strokes:"17",def:{en:["take a big stride","pass by"],kr:["갈","매"]},hunum:[{kor:"매",def:"갈"}]},{id:5483,hanja:"父",strokes:"4",def:{en:["father","KangXi radical"],kr:["아비","부"]},hunum:[{kor:"보",def:"남자 미칭"},{kor:"부",def:"아비"}]},{id:5484,hanja:"也",strokes:"3",def:{en:["also","classical final particle of strong affirmation or identity"],kr:["단정의","어조사","야"]},hunum:[{kor:"야",def:"단정의 어조사"}]},{id:5485,hanja:"邂",strokes:"17",def:{en:["unexpected meeting","encounter by"],kr:["우연히","만날","해"]},hunum:[{kor:"해",def:"우연히 만날"}]},{id:5486,hanja:"籲",strokes:"32",def:{en:["appeal","request","implore"],kr:["부르짖을","유"]},hunum:[{kor:"유",def:"부르짖을"}]},{id:5487,hanja:"眄",strokes:"9",def:{en:["to look askance","looking dull"],kr:["애꾸눈","면"]},hunum:[{kor:"면",def:"애꾸눈"}]},{id:5488,hanja:"柞",strokes:"9",def:{en:["oak","spinous evergreen tree","to clear away trees"],kr:["나무","이름","책"]},hunum:[{kor:"작",def:"나무이름"},{kor:"책",def:"나무 이름"}]},{id:5489,hanja:"半",strokes:"5",def:{en:["half"],kr:["반","반"]},hunum:[{kor:"반",def:"반"}]},{id:5490,hanja:"讙",strokes:"25",def:{en:["cheer","noise","noisy"],kr:["시끄러울","훤"]},hunum:[{kor:"환",def:"시끄러울"},{kor:"훤",def:"시끄러울"}]},{id:5491,hanja:"爸",strokes:"8",def:{en:["father","papa"],kr:["아비","파"]},hunum:[{kor:"파",def:"아비"}]},{id:5492,hanja:"邃",strokes:"17",def:{en:["profound","detailed","deep"],kr:["깊숙할","수"]},hunum:[{kor:"수",def:"깊숙할"}]},{id:5493,hanja:"米",strokes:"6",def:{en:["hulled or husked uncooked rice"],kr:["쌀","미"]},hunum:[{kor:"미",def:"쌀"}]},{id:5494,hanja:"柟",strokes:"9",def:{en:["Machilus nanmu","variety of evergreen"],kr:["枏의","俗字"]},hunum:[{kor:"남",def:"녹나무"}]},{id:5495,hanja:"墺",strokes:"16",def:{en:["four walls"],kr:["물가","언덕","옥"]},hunum:[{kor:"오",def:"방 구들"},{kor:"옥",def:"방 구들"}]},{id:5496,hanja:"卋",strokes:"6",def:{en:["same as","generation","world","era"],kr:["世"]},hunum:[{kor:"세",def:"인간"}]},{id:5497,hanja:"嶇",strokes:"14",def:{en:["steep","sheer","rugged","rough"],kr:["산험준할","구"]},hunum:[{kor:"구",def:"산험준할"}]},{id:5498,hanja:"讚",strokes:"26",def:{en:["praise","commend","eulogize"],kr:["기릴","찬"]},hunum:[{kor:"찬",def:"기릴"}]},{id:5499,hanja:"墻",strokes:"16",def:{en:["wall"],kr:["牆과","同字"]},hunum:[{kor:"장",def:"담"}]},{id:5500,hanja:"還",strokes:"17",def:{en:["still","yet","also","besides"],kr:["돌아올","환"]},hunum:[{kor:"선",def:"돌"},{kor:"환",def:"돌아올"}]},{id:5501,hanja:"髀",strokes:"18",def:{en:["buttocks","thigh","thigh bone"],kr:["볼기짝","폐"]},hunum:[{kor:"비",def:"넓적다리"},{kor:"폐",def:"볼기짝"}]},{id:5502,hanja:"爹",strokes:"10",def:{en:["father","daddy"],kr:["아비","다"]},hunum:[{kor:"다",def:"아비"}]},{id:5503,hanja:"卌",strokes:"5",def:{en:[],kr:["사십","십"]},hunum:[{kor:"십",def:"사십"}]},{id:5504,hanja:"腟",strokes:"13",def:{en:["vagina"],kr:["膣과","同字"]},hunum:[{kor:"질",def:"음도"}]},{id:5505,hanja:"邅",strokes:"17",def:{en:["hesitant","faltering"],kr:["머뭇거릴","전"]},hunum:[{kor:"전",def:"머뭇거릴"}]},{id:5506,hanja:"髁",strokes:"18",def:{en:["thigh bone","hipbone","kneecap"],kr:["넓적다리뼈","화"]},hunum:[{kor:"과",def:"넓적다리뼈"},{kor:"화",def:"넓적다리뼈"}]},{id:5507,hanja:"爺",strokes:"13",def:{en:["father","grandfather"],kr:["노인","야"]},hunum:[{kor:"야",def:"아비"}]},{id:5508,hanja:"眇",strokes:"9",def:{en:["blind in one eye","minute","minuscule"],kr:["애꾸눈","묘"]},hunum:[{kor:"묘",def:"애꾸눈"}]},{id:5509,hanja:"卍",strokes:"6",def:{en:["swastika fourth of auspicious"],kr:["만자","만"]},hunum:[{kor:"만",def:"만자"}]},{id:5510,hanja:"乣",strokes:"4",def:{en:[],kr:["糺의","譌字"]},hunum:[{kor:"규",def:"모을"}]},{id:5511,hanja:"爻",strokes:"4",def:{en:["diagrams for divination"],kr:["효","효"]},hunum:[{kor:"효",def:"효"}]},{id:5512,hanja:"乤",strokes:"4",def:{en:["first character of Korean place name"],kr:["고을","이름","할"]},hunum:[{kor:"할",def:"고을 이름"}]},{id:5513,hanja:"眈",strokes:"9",def:{en:["gloat","stare at","to delay","to loiter","to hinder"],kr:["즐길","탐"]},hunum:[{kor:"탐",def:"노려볼"}]},{id:5514,hanja:"腠",strokes:"13",def:{en:["between the skin and the flesh"],kr:["살결","주"]},hunum:[{kor:"주",def:"살결"}]},{id:5515,hanja:"柢",strokes:"9",def:{en:["root","base","bottom of object"],kr:["뿌리","저"]},hunum:[{kor:"저",def:"뿌리"}]},{id:5516,hanja:"讜",strokes:"27",def:{en:["counsel","advice","speak out"],kr:["곧은","말","당"]},hunum:[{kor:"당",def:"곧은 말"}]},{id:5517,hanja:"邇",strokes:"18",def:{en:["be near","be close","recently"],kr:["가까울","이"]},hunum:[{kor:"이",def:"가까울"}]},{id:5518,hanja:"髂",strokes:"19",def:{en:["the pelvis"],kr:["허리뼈","가"]},hunum:[{kor:"가",def:"허리뼈"}]},{id:5519,hanja:"眉",strokes:"9",def:{en:["eyebrows","upper margin of book"],kr:["노인","미"]},hunum:[{kor:"미",def:"눈썹"}]},{id:5520,hanja:"嶋",strokes:"14",def:{en:["island"],kr:["섬","도"]},hunum:[{kor:"도",def:"섬"}]},{id:5521,hanja:"邈",strokes:"18",def:{en:["far","distant","remote","slight"],kr:["멀","막"]},hunum:[{kor:"막",def:"멀"}]},{id:5522,hanja:"讞",strokes:"27",def:{en:["to decide","judge","a verdict","decision"],kr:["죄","의논할","언"]},hunum:[{kor:"언",def:"죄 의논할"}]},{id:5523,hanja:"爽",strokes:"11",def:{en:["happy","cheerful","refreshing"],kr:["시원할","상"]},hunum:[{kor:"상",def:"시원할"}]},{id:5524,hanja:"眊",strokes:"9",def:{en:["dim","dull","bewildered"],kr:["눈","흐릴","모"]},hunum:[{kor:"모",def:"눈 흐릴"}]},{id:5525,hanja:"墾",strokes:"16",def:{en:["cultivate","reclaim","to farm land"],kr:["따비질할","간"]},hunum:[{kor:"간",def:"따비질할"}]},{id:5526,hanja:"卐",strokes:"6",def:{en:["swastika fourth of auspicious"]},hunum:[{kor:"만",def:"만자"}]},{id:5527,hanja:"爾",strokes:"14",def:{en:["you","that","those","final particle"],kr:["오직","이"]},hunum:[{kor:"이",def:"너"}]},{id:5528,hanja:"看",strokes:"9",def:{en:["look","see","examine","scrutinize"],kr:["볼","간"]},hunum:[{kor:"간",def:"볼"}]},{id:5529,hanja:"查",strokes:"9",def:{en:["investigate","examine","seek into"]},hunum:[{kor:"사",def:"조사할"}]},{id:5530,hanja:"卑",strokes:"8",def:{en:["humble","low","inferior","despise"],kr:["낮을","비"]},hunum:[{kor:"비",def:"낮을"}]},{id:5531,hanja:"乧",strokes:"5",def:{en:[],kr:["음역자","둘"]},hunum:[{kor:"둘",def:"음역자"}]},{id:5532,hanja:"県",strokes:"9",def:{en:["county","district","subdivision"],kr:["지방","현"]},hunum:[{kor:"현",def:"고을"}]},{id:5533,hanja:"卒",strokes:"8",def:{en:["soldier","servant","at last","finally"],kr:["군사","졸"]},hunum:[{kor:"졸",def:"군사"}]},{id:5534,hanja:"邊",strokes:"19",def:{en:["edge","margin","side","border"],kr:["가","변"]},hunum:[{kor:"변",def:"가"}]},{id:5535,hanja:"腤",strokes:"13",def:{en:[],kr:["고기","삶을","암"]},hunum:[{kor:"암",def:"고기 삶을"}]},{id:5536,hanja:"乨",strokes:"6",def:{en:["the beginning","to start","to begin","to be the first"]},hunum:[{kor:"시",def:"처음"}]},{id:5537,hanja:"卓",strokes:"8",def:{en:["profound","brilliant","lofty"],kr:["성씨","탁"]},hunum:[{kor:"탁",def:"높을"}]},{id:5538,hanja:"髆",strokes:"20",def:{en:["shoulder blade"],kr:["어깨쭉지","박"]},hunum:[{kor:"박",def:"어깨쭉지"}]},{id:5539,hanja:"腥",strokes:"13",def:{en:["raw meat","rank","strong"],kr:["날고기","성"]},hunum:[{kor:"성",def:"비린내"}]},{id:5540,hanja:"类",strokes:"9",def:{en:["class","group","kind","category"],kr:["나눌","류"]},hunum:[{kor:"류",def:"나눌"}]},{id:5541,hanja:"乩",strokes:"6",def:{en:["to divine"],kr:["점칠","계"]},hunum:[{kor:"계",def:"점칠"}]},{id:5542,hanja:"協",strokes:"8",def:{en:["be united","cooperate"],kr:["도울","협"]},hunum:[{kor:"협",def:"조화할"}]},{id:5543,hanja:"邌",strokes:"19",def:{en:["to walk slowly","to parade"],kr:["천천히","걸을","려"]},hunum:[{kor:"려",def:"천천히 걸을"}]},{id:5544,hanja:"腦",strokes:"13",def:{en:["brain"],kr:["머리","뇌"]},hunum:[{kor:"뇌",def:"머리"}]},{id:5545,hanja:"柩",strokes:"9",def:{en:["coffin which contains corpse"],kr:["관","구"]},hunum:[{kor:"구",def:"관"}]},{id:5546,hanja:"单",strokes:"8",def:{en:["single","individual","only","lone"],kr:["單의","簡體字"]},hunum:[{kor:"단",def:"홀로"},{kor:"선",def:"오랑캐 이름"}]},{id:5547,hanja:"乫",strokes:"6",def:{en:["used in Korean place names"],kr:["땅이름","갈"]},hunum:[{kor:"갈",def:"땅이름"}]},{id:5548,hanja:"籾",strokes:"9",def:{en:["unhulled rice"],kr:["벼","인"]},hunum:[{kor:"인",def:"벼"}]},{id:5549,hanja:"乬",strokes:"6",def:{en:["to hang"],kr:["갈","걸"]},hunum:[{kor:"걸",def:"갈"}]},{id:5550,hanja:"嶒",strokes:"15",def:{en:["towering","lofty","steep"],kr:["산","높고","험할","증"]},hunum:[{kor:"증",def:"산 높고 험할"}]},{id:5551,hanja:"邏",strokes:"23",def:{en:["patrol","inspect","watch"],kr:["순행할","라"]},hunum:[{kor:"라",def:"순행할"}]},{id:5552,hanja:"南",strokes:"9",def:{en:["South","Southern part","Southward"],kr:["남녘","남"]},hunum:[{kor:"남",def:"남녘"}]},{id:5553,hanja:"乭",strokes:"6",def:{en:["rock","used in Korean names"],kr:["이름","돌"]},hunum:[{kor:"돌",def:"이름"}]},{id:5554,hanja:"邐",strokes:"23",def:{en:["meandering","winding"],kr:["이어질","리"]},hunum:[{kor:"리",def:"이어질"}]},{id:5555,hanja:"柬",strokes:"9",def:{en:["letter","invitation","choose"],kr:["가릴","간"]},hunum:[{kor:"간",def:"가릴"}]},{id:5556,hanja:"単",strokes:"9",def:{en:["same as","single","individual","only","lone"],kr:["單"]},hunum:[{kor:"단",def:"홀로"},{kor:"선",def:"오랑캐 이름"}]},{id:5557,hanja:"卙",strokes:"11",def:{en:[],kr:["많을","집"]},hunum:[{kor:"집",def:"많을"}]},{id:5558,hanja:"腫",strokes:"13",def:{en:["swell","swollen","swelling"],kr:["부스럼","종"]},hunum:[{kor:"종",def:"부스럼"}]},{id:5559,hanja:"邑",strokes:"7",def:{en:["area","district","city","state"],kr:["답답할","읍"]},hunum:[{kor:"읍",def:"고을"}]},{id:5560,hanja:"嶔",strokes:"15",def:{en:["lofty","towering"],kr:["높고","험할","금"]},hunum:[{kor:"금",def:"높고 험할"}]},{id:5561,hanja:"乯",strokes:"6",def:{en:[]},hunum:[{kor:"올",def:"음역자"}]},{id:5562,hanja:"嶕",strokes:"15",def:{en:[],kr:["높을","초"]},hunum:[{kor:"초",def:"높을"}]},{id:5563,hanja:"技",strokes:"7",def:{en:["skill","ability","talent","ingenuity"],kr:["재주","기"]},hunum:[{kor:"기",def:"재주"}]},{id:5564,hanja:"博",strokes:"12",def:{en:["gamble","play games","wide","broad"],kr:["넓을","박"]},hunum:[{kor:"박",def:"넓을"}]},{id:5565,hanja:"腭",strokes:"13",def:{en:["palate","roof of mouth"],kr:["잇몸","악"]},hunum:[{kor:"악",def:"잇몸"}]},{id:5566,hanja:"柯",strokes:"9",def:{en:["axe","stalk","bough","surname"],kr:["가지","가"]},hunum:[{kor:"가",def:"가지"}]},{id:5567,hanja:"乱",strokes:"7",def:{en:["confusion","state of chaos","revolt"],kr:["어지러울","란"]},hunum:[{kor:"란",def:"어지러울"}]},{id:5568,hanja:"髏",strokes:"21",def:{en:["skull","skeleton"],kr:["해굴","루"]},hunum:[{kor:"루",def:"해굴"}]},{id:5569,hanja:"柰",strokes:"9",def:{en:["crab","endure","bear"],kr:["능금나무","내"]},hunum:[{kor:"내",def:"능금나무"}]},{id:5570,hanja:"卜",strokes:"2",def:{en:["fortune telling","prophesy"],kr:["점","복"]},hunum:[{kor:"복",def:"점"}]},{id:5571,hanja:"乲",strokes:"7",def:{en:[],kr:["봉호","잘"]},hunum:[{kor:"잘",def:"봉호"}]},{id:5572,hanja:"柱",strokes:"9",def:{en:["pillar","post","support","lean on"],kr:["기둥","주"]},hunum:[{kor:"주",def:"기둥"}]},{id:5573,hanja:"邕",strokes:"10",def:{en:["former or literary name for Nanning"],kr:["사람이름","옹"]},hunum:[{kor:"옹",def:"막힐"}]},{id:5574,hanja:"抃",strokes:"7",def:{en:["to clap hands","to cheer"],kr:["손뼉칠","변"]},hunum:[{kor:"변",def:"손뼉칠"}]},{id:5575,hanja:"卝",strokes:"4",def:{en:["hair style","ore"],kr:["丱과","同字"]},hunum:[{kor:"관",def:"쌍상투"}]},{id:5576,hanja:"乳",strokes:"8",def:{en:["breast","nipples","milk","suckle"],kr:["기를","유"]},hunum:[{kor:"유",def:"젖"}]},{id:5577,hanja:"髑",strokes:"23",def:{en:["skull"],kr:["해골","촉"]},hunum:[{kor:"촉",def:"해골"}]},{id:5578,hanja:"腰",strokes:"13",def:{en:["waist","kidney"],kr:["허리","요"]},hunum:[{kor:"요",def:"허리"}]},{id:5579,hanja:"卞",strokes:"4",def:{en:["to be impatient","in a hurry","excitable"],kr:["조급할","변"]},hunum:[{kor:"변",def:"조급할"}]},{id:5580,hanja:"嶙",strokes:"15",def:{en:["precipitous"],kr:["가파를","린"]},hunum:[{kor:"린",def:"가파를"}]},{id:5581,hanja:"邗",strokes:"6",def:{en:["an ancient place in the state of Wu"],kr:["고을","이름","한"]},hunum:[{kor:"한",def:"고을 이름"}]},{id:5582,hanja:"讬",strokes:"5",def:{en:["entrust","rely on","commission"],kr:["託과","同字"]},hunum:[{kor:"탁",def:"맡길"}]},{id:5583,hanja:"抄",strokes:"7",def:{en:["copy","confiscate","seize"],kr:["베낄","초"]},hunum:[{kor:"초",def:"베낄"}]},{id:5584,hanja:"髒",strokes:"23",def:{en:["dirty","firm","fat"],kr:["몸","뚱뚱할","장"]},hunum:[{kor:"장",def:"몸 뚱뚱할"}]},{id:5585,hanja:"腱",strokes:"13",def:{en:["tendons"],kr:["힘줄","건"]},hunum:[{kor:"건",def:"힘줄"}]},{id:5586,hanja:"柳",strokes:"9",def:{en:["willow tree","pleasure"],kr:["버들","류"]},hunum:[{kor:"류",def:"버들"}]},{id:5587,hanja:"卟",strokes:"5",def:{en:["a chemical compound","divination","to consider"],kr:["생각할","게"]},hunum:[{kor:"게",def:"점칠"}]},{id:5588,hanja:"況",strokes:"8",def:{en:["condition","situation","furthermore"],kr:["하물며","황"]},hunum:[{kor:"황",def:"하물며"}]},{id:5589,hanja:"占",strokes:"5",def:{en:["divine","observe","versify"],kr:["점령할","점"]},hunum:[{kor:"점",def:"점칠"}]},{id:5590,hanja:"髓",strokes:"23",def:{en:["bone marrow","essences","substances"],kr:["마음속","수"]},hunum:[{kor:"수",def:"뼛속 기름"}]},{id:5591,hanja:"柴",strokes:"9",def:{en:["firewood","faggots","fuel"],kr:["섶","채"]},hunum:[{kor:"시",def:"섶"},{kor:"채",def:"섶"}]},{id:5592,hanja:"泂",strokes:"8",def:{en:["clear and deep","wide"],kr:["차가운","형"]},hunum:[{kor:"형",def:"멀"}]},{id:5593,hanja:"乶",strokes:"8",def:{en:["Korean place name Pholha"],kr:["땅이름","폴"]},hunum:[{kor:"폴",def:"땅이름"}]},{id:5594,hanja:"體",strokes:"23",def:{en:["body","group","class","body","unit"],kr:["몸","체"]},hunum:[{kor:"체",def:"몸"}]},{id:5595,hanja:"柵",strokes:"9",def:{en:["fence","palisade","grid"],kr:["울짱","책"]},hunum:[{kor:"책",def:"울짱"}]},{id:5596,hanja:"卡",strokes:"5",def:{en:["card","punch card","calorie"],kr:["관","잡"]},hunum:[{kor:"잡",def:"관"}]},{id:5597,hanja:"眚",strokes:"10",def:{en:["disease of the eyes","crime","fault"],kr:["눈에백태낄","생"]},hunum:[{kor:"생",def:"눈에백태낄"}]},{id:5598,hanja:"抆",strokes:"7",def:{en:["wipe","rub off"],kr:["문지를","문"]},hunum:[{kor:"문",def:"닦을"}]},{id:5599,hanja:"邙",strokes:"6",def:{en:["mountain in Henan province"],kr:["산","이름","망"]},hunum:[{kor:"망",def:"산 이름"}]},{id:5600,hanja:"髕",strokes:"24",def:{en:["kneecap"],kr:["종지뼈","빈"]},hunum:[{kor:"빈",def:"종지뼈"}]},{id:5601,hanja:"腴",strokes:"13",def:{en:["fat","fertile","rich","plump","soft"],kr:["아랫배","살찔","유"]},hunum:[{kor:"유",def:"아랫배 살찔"}]},{id:5602,hanja:"虁",strokes:"25",def:{en:[],kr:["夔와","同字"]},hunum:[{kor:"기",def:"조심할"}]},{id:5603,hanja:"眛",strokes:"10",def:{en:["dim","dark","obscure","blind"],kr:["어두울","매"]},hunum:[{kor:"매",def:"어두울"}]},{id:5604,hanja:"柶",strokes:"9",def:{en:["ladle"],kr:["수저","사"]},hunum:[{kor:"사",def:"수저"}]},{id:5605,hanja:"嶝",strokes:"15",def:{en:["path leading up a mountain"],kr:["고개","등"]},hunum:[{kor:"등",def:"고개"}]},{id:5606,hanja:"乷",strokes:"8",def:{en:[],kr:["음역자","살"]},hunum:[{kor:"살",def:"음역자"}]},{id:5607,hanja:"柷",strokes:"9",def:{en:["instrument"],kr:["축풍류","축"]},hunum:[{kor:"축",def:"축풍류"}]},{id:5608,hanja:"髖",strokes:"25",def:{en:["hipbone","hip"],kr:["허리뼈","관"]},hunum:[{kor:"관",def:"허리뼈"}]},{id:5609,hanja:"泄",strokes:"8",def:{en:["leak","vent","flow","reveal"],kr:["흩을","예"]},hunum:[{kor:"설",def:"샐"},{kor:"예",def:"내칠"}]},{id:5610,hanja:"卣",strokes:"7",def:{en:["wine pot"],kr:["중술통","유"]},hunum:[{kor:"유",def:"중술통"}]},{id:5611,hanja:"邛",strokes:"6",def:{en:["in distress","a mound"],kr:["언덕","공"]},hunum:[{kor:"공",def:"언덕"}]},{id:5612,hanja:"髗",strokes:"26",def:{en:["the skull","the forehead"],kr:["해골","로"]},hunum:[{kor:"로",def:"해골"}]},{id:5613,hanja:"腶",strokes:"13",def:{en:["meat"],kr:["약포","단"]},hunum:[{kor:"단",def:"약포"}]},{id:5614,hanja:"抉",strokes:"7",def:{en:["choose","select","gouge","pluck out"],kr:["당길","결"]},hunum:[{kor:"결",def:"긁을"}]},{id:5615,hanja:"泅",strokes:"8",def:{en:["swim","float","wade"]},hunum:[{kor:"수",def:"헤엄칠"}]},{id:5616,hanja:"腷",strokes:"13",def:{en:[],kr:["닭","홰치는","소리","픽"]},hunum:[{kor:"픽",def:"뜩 막힐"}]},{id:5617,hanja:"把",strokes:"7",def:{en:["hold","take","guard","regard as"],kr:["헤칠","파"]},hunum:[{kor:"파",def:"잡을"}]},{id:5618,hanja:"眞",strokes:"10",def:{en:["real","actual","true","genuine"],kr:["참","진"]},hunum:[{kor:"진",def:"참"}]},{id:5619,hanja:"高",strokes:"10",def:{en:["high","tall","lofty","elevated"],kr:["높을","고"]},hunum:[{kor:"고",def:"높을"}]},{id:5620,hanja:"虄",strokes:"26",def:{en:[]},hunum:[{kor:"산",def:"화살"}]},{id:5621,hanja:"泆",strokes:"8",def:{en:["licentious","libertine","dissipated"],kr:["끊을","일"]},hunum:[{kor:"일",def:"끊을"}]},{id:5622,hanja:"嶠",strokes:"15",def:{en:["high pointed mountain"],kr:["뾰족하게","높을","교"]},hunum:[{kor:"교",def:"뾰족하게 높을"}]},{id:5623,hanja:"乺",strokes:"9",def:{en:["painting tool place name"],kr:["땅이름","솔"]},hunum:[{kor:"솔",def:"솔"}]},{id:5624,hanja:"腸",strokes:"13",def:{en:["intestines","emotions","sausage"],kr:["창자","장"]},hunum:[{kor:"장",def:"창자"}]},{id:5625,hanja:"髙",strokes:"10",variant:"高",def:{en:["variant of","high","tall","lofty","elevated"],kr:["高"]},hunum:[{kor:"고",def:"높을"}]},{id:5626,hanja:"柹",strokes:"9",def:{en:["persimmon"],kr:["감","시"]},hunum:[{kor:"시",def:"감"}]},{id:5627,hanja:"卦",strokes:"8",def:{en:["fortune telling","tell fortunes"],kr:["걸","괘"]},hunum:[{kor:"괘",def:"걸"}]},{id:5628,hanja:"乻",strokes:"9",def:{en:[]},hunum:[{kor:"얼",def:"땅 이름"}]},{id:5629,hanja:"乼",strokes:"9",def:{en:["rope"],kr:["줄","줄"]},hunum:[{kor:"줄",def:"줄"}]},{id:5630,hanja:"腹",strokes:"13",def:{en:["stomach","belly","abdomen","inside"],kr:["배","복"]},hunum:[{kor:"복",def:"배"}]},{id:5631,hanja:"眠",strokes:"10",def:{en:["close eyes","sleep","hibernate"],kr:["잠잘","면"]},hunum:[{kor:"면",def:"잠잘"}]},{id:5632,hanja:"嶢",strokes:"15",def:{en:["high or tall"],kr:["높을","요"]},hunum:[{kor:"요",def:"높을"}]},{id:5633,hanja:"泉",strokes:"9",def:{en:["spring","fountain","wealth","money"],kr:["샘","천"]},hunum:[{kor:"천",def:"샘"}]},{id:5634,hanja:"腺",strokes:"13",def:{en:["gland"],kr:["샘","선"]},hunum:[{kor:"선",def:"샘"}]},{id:5635,hanja:"査",strokes:"9",def:{en:["investigate","examine","seek into"],kr:["사실할","사"]},hunum:[{kor:"사",def:"사실할"}]},{id:5636,hanja:"邠",strokes:"7",def:{en:["county in Shaanxi province"],kr:["나라","이름","빈"]},hunum:[{kor:"빈",def:"나라 이름"}]},{id:5637,hanja:"泊",strokes:"8",def:{en:["anchor vessel","lie at anchor"],kr:["머무를","박"]},hunum:[{kor:"박",def:"머무를"}]},{id:5638,hanja:"卨",strokes:"11",def:{en:[],kr:["사람이름","설"]},hunum:[{kor:"설",def:"사람이름"}]},{id:5639,hanja:"乾",strokes:"11",def:{en:["dry","first hexagram","warming principle of the sun","penetrating and fertilizing","heavenly generative principle"],kr:["임금","건"]},hunum:[{kor:"간",def:"마를"},{kor:"건",def:"하늘"}]},{id:5640,hanja:"卩",strokes:"2",def:{en:["seal","KangXi radical"],kr:["병부","절"]},hunum:[{kor:"절",def:"몸기"}]},{id:5641,hanja:"邡",strokes:"7",def:{en:[],kr:["고을","이름","방"]},hunum:[{kor:"방",def:"고을 이름"}]},{id:5642,hanja:"邢",strokes:"7",def:{en:["surname","state in today"],kr:["땅","이름","형"]},hunum:[{kor:"형",def:"나라 이름"}]},{id:5643,hanja:"柾",strokes:"9",def:{en:["straight grain"],kr:["나무결","바를","정"]},hunum:[{kor:"구",def:"관"},{kor:"정",def:"나무결 바를"}]},{id:5644,hanja:"泌",strokes:"8",def:{en:["to seep out","excrete"],kr:["개천물","필"]},hunum:[{kor:"비",def:"샘물 흐르는 모양"},{kor:"필",def:"도랑물"}]},{id:5645,hanja:"髟",strokes:"10",def:{en:["hair","KangXi radical"],kr:["머리","늘일","표"]},hunum:[{kor:"표",def:"머리털 희뜩희뜩할"}]},{id:5646,hanja:"那",strokes:"7",def:{en:["that","that one","those"],kr:["어찌","나"]},hunum:[{kor:"나",def:"어찌"}]},{id:5647,hanja:"眥",strokes:"10",def:{en:["eye sockets","corner of the eyes"],kr:["흘길","자"]},hunum:[{kor:"자",def:"흘길"}]},{id:5648,hanja:"柿",strokes:"9",def:{en:["persimmon"],kr:["柹의","俗字"]},hunum:[{kor:"시",def:"감나무"}]},{id:5649,hanja:"抑",strokes:"7",def:{en:["press down","repress","curb","hinder"],kr:["억울할","억"]},hunum:[{kor:"억",def:"누를"}]},{id:5650,hanja:"嶧",strokes:"16",def:{en:["a range of peaks in Shandong and Jiangsu","the name of a mountain"],kr:["연달아","있는","산","역"]},hunum:[{kor:"역",def:"연달아 있는 산"}]},{id:5651,hanja:"腾",strokes:"13",def:{en:["fly","gallop","run","prance","rise"]},hunum:[{kor:"등",def:"오를"}]},{id:5652,hanja:"眦",strokes:"10",def:{en:["corner of the eyes","eyesockets"],kr:["眥와","同字"]},hunum:[{kor:"자",def:"흘길"}]},{id:5653,hanja:"抒",strokes:"7",def:{en:["express","eliminate","relieve"],kr:["북","저"]},hunum:[{kor:"서",def:"풀"},{kor:"저",def:"당길"}]},{id:5654,hanja:"卬",strokes:"4",def:{en:["lofty","high","raise","high"],kr:["자기","앙"]},hunum:[{kor:"앙",def:"자기"}]},{id:5655,hanja:"腿",strokes:"14",def:{en:["legs","thighs"],kr:["넓적다리","퇴"]},hunum:[{kor:"퇴",def:"넓적다리"}]},{id:5656,hanja:"抓",strokes:"7",def:{en:["scratch","clutch","seize","grab"],kr:["긁을","조"]},hunum:[{kor:"조",def:"긁을"}]},{id:5657,hanja:"髡",strokes:"13",def:{en:["to shear tree","ancient punishment"],kr:["머리","깍을","곤"]},hunum:[{kor:"곤",def:"머리 깍을"}]},{id:5658,hanja:"卭",strokes:"5",def:{en:["high"],kr:["병될","공"]},hunum:[{kor:"공",def:"병될"}]},{id:5659,hanja:"虎",strokes:"6",def:{en:["tiger","brave","fierce","surname"],kr:["범","호"]},hunum:[{kor:"호",def:"범"}]},{id:5660,hanja:"卮",strokes:"5",def:{en:["measuring cup","wine container"],kr:["연지","치"]},hunum:[{kor:"치",def:"술잔"}]},{id:5661,hanja:"眨",strokes:"10",def:{en:["wink"],kr:["눈","깜작일","잡"]},hunum:[{kor:"잡",def:"눈 깜작일"}]},{id:5662,hanja:"邦",strokes:"7",def:{en:["nation","country","state"],kr:["나라","방"]},hunum:[{kor:"방",def:"나라"}]},{id:5663,hanja:"抔",strokes:"7",def:{en:["take or hold up in both hands"],kr:["움킬","부"]},hunum:[{kor:"부",def:"움킬"}]},{id:5664,hanja:"嶪",strokes:"16",def:{en:[],kr:["산이","높고","웅장할","업"]},hunum:[{kor:"업",def:"산이 높고 웅장할"}]},{id:5665,hanja:"眩",strokes:"10",def:{en:["to confuse","dizzy","dazed","disoriented"],kr:["요술","환"]},hunum:[{kor:"현",def:"아찔할"},{kor:"환",def:"요술"}]},{id:5666,hanja:"投",strokes:"7",def:{en:["throw","cast","fling","pitch","jump"],kr:["의탁할","투"]},hunum:[{kor:"투",def:"던질"}]},{id:5667,hanja:"泐",strokes:"8",def:{en:["to write","to indite","veins in minerals"],kr:["돌","갈라질","륵"]},hunum:[{kor:"륵",def:"돌 갈라질"}]},{id:5668,hanja:"卯",strokes:"5",def:{en:["fourth terrestrial branch","period from"],kr:["토끼","묘"]},hunum:[{kor:"묘",def:"토끼"}]},{id:5669,hanja:"嶫",strokes:"16",def:{en:[],kr:["嶪과","同字"]},hunum:[{kor:"업",def:"험춘할"}]},{id:5670,hanja:"虐",strokes:"7",def:{en:["cruel","harsh","oppressive"],kr:["사나울","학"]},hunum:[{kor:"학",def:"사나울"}]},{id:5671,hanja:"邨",strokes:"7",def:{en:["village","hamlet","rustic"],kr:["村과","同字"]},hunum:[{kor:"촌",def:"마을"}]},{id:5672,hanja:"髣",strokes:"14",def:{en:["similar to","like"],kr:["비슷할","방"]},hunum:[{kor:"방",def:"비슷할"}]},{id:5673,hanja:"抖",strokes:"7",def:{en:["tremble","shake","rouse","give shake"],kr:["퍼주거릴","두"]},hunum:[{kor:"두",def:"퍼주거릴"}]},{id:5674,hanja:"泑",strokes:"8",def:{en:["the vitreous glaze on china","porcelain","etc"],kr:["물이름","유"]},hunum:[{kor:"유",def:"물빛이 검을"}]},{id:5675,hanja:"印",strokes:"6",def:{en:["print","seal","stamp","chop","mark"],kr:["도장","인"]},hunum:[{kor:"인",def:"도장"}]},{id:5676,hanja:"抗",strokes:"7",def:{en:["resist","oppose","defy","reject"],kr:["겨룰","항"]},hunum:[{kor:"항",def:"막을"}]},{id:5677,hanja:"危",strokes:"6",def:{en:["dangerous","precarious","high"],kr:["별","이름","위"]},hunum:[{kor:"위",def:"위태할"}]},{id:5678,hanja:"泓",strokes:"8",def:{en:["clear","deep pool of water"],kr:["깊을","홍"]},hunum:[{kor:"홍",def:"깊을"}]},{id:5679,hanja:"嶮",strokes:"16",def:{en:["high","steep","precipitous"],kr:["산","가파를","험"]},hunum:[{kor:"험",def:"산 가파를"}]},{id:5680,hanja:"折",strokes:"7",def:{en:["break off","snap","bend"],kr:["천천히","할","제"]},hunum:[{kor:"절",def:"꺾을"},{kor:"제",def:"천천히 할"}]},{id:5681,hanja:"邪",strokes:"7",def:{en:["wrong","evil","depraved","vicious","perverse","heterodox"],kr:["희롱할","야"]},hunum:[{kor:"사",def:"간사할"},{kor:"야",def:"의문의 어조사"}]},{id:5682,hanja:"髥",strokes:"14",def:{en:["beard","mustache"],kr:["구레나룻","염"]},hunum:[{kor:"염",def:"구레나룻"}]},{id:5683,hanja:"卲",strokes:"7",def:{en:["eminent","lofty","beautiful","surname"],kr:["성씨","소"]},hunum:[{kor:"소",def:"높을"}]},{id:5684,hanja:"即",strokes:"7",def:{en:["promptly","quickly","immediately"],kr:["卽의","俗字"]},hunum:[{kor:"즉",def:"곧"}]},{id:5685,hanja:"塀",strokes:"12",def:{en:["wall","fence"],kr:["담","병"]},hunum:[{kor:"병",def:"담"}]},{id:5686,hanja:"髦",strokes:"14",def:{en:["flowing hair of young child"],kr:["다팔머리","모"]},hunum:[{kor:"모",def:"다팔머리"}]},{id:5687,hanja:"泔",strokes:"8",def:{en:["water from washing rice to boil thick","as gruel"]},hunum:[{kor:"검",def:"뜨물"}]},{id:5688,hanja:"虓",strokes:"8",def:{en:["roar"],kr:["울부짖을","효"]},hunum:[{kor:"효",def:"울부짖을"}]},{id:5689,hanja:"嶰",strokes:"16",def:{en:["gorge"],kr:["골","이름","해"]},hunum:[{kor:"해",def:"골짝 사이"}]},{id:5690,hanja:"法",strokes:"8",def:{en:["law","rule","regulation","statute","France","French"],kr:["법","법"]},hunum:[{kor:"법",def:"법"}]},{id:5691,hanja:"却",strokes:"7",def:{en:["still","but","decline","retreat"],kr:["물리칠","각"]},hunum:[{kor:"각",def:"물리칠"}]},{id:5692,hanja:"抛",strokes:"7",def:{en:["throw"],kr:["拋와","同字"]},hunum:[{kor:"포",def:"던질"}]},{id:5693,hanja:"虔",strokes:"8",def:{en:["act with reverence","reverent"],kr:["죽일","건"]},hunum:[{kor:"건",def:"정성"}]},{id:5694,hanja:"卵",strokes:"7",def:{en:["egg","ovum","roe","spawn"],kr:["알","란"]},hunum:[{kor:"란",def:"알"}]},{id:5695,hanja:"處",strokes:"9",def:{en:["place","locale","department"],kr:["살","처"]},hunum:[{kor:"처",def:"살"}]},{id:5696,hanja:"燁",strokes:"16",def:{en:["bright","glorious","splendid","flame"],kr:["번쩍번쩍할","엽"]},hunum:[{kor:"엽",def:"불 이글글할"}]},{id:5697,hanja:"抜",strokes:"7",def:{en:["uproot","pull out"],kr:["拔와","同字"]},hunum:[{kor:"발",def:"뽑을"},{kor:"패",def:"무성할"}]},{id:5698,hanja:"泗",strokes:"8",def:{en:["mucous","nasal flow","sniffle","river in Shandong"],kr:["물","이름","사"]},hunum:[{kor:"사",def:"물 이름"}]},{id:5699,hanja:"卶",strokes:"8",def:{en:[],kr:["크게","경사스러울","시"]},hunum:[{kor:"시",def:"크게 경사스러울"}]},{id:5700,hanja:"邯",strokes:"8",def:{en:["city in Hebei province","various"],kr:["고을","이름","함"]},hunum:[{kor:"한",def:"고을 이름"},{kor:"함",def:"고을 이름"}]},{id:5701,hanja:"卷",strokes:"8",def:{en:["scroll","curl","make a comeback"],kr:["굽을","권"]},hunum:[{kor:"권",def:"굽을"}]},{id:5702,hanja:"泙",strokes:"8",def:{en:["roar"],kr:["물결","셀","평"]},hunum:[{kor:"평",def:"물소리"}]},{id:5703,hanja:"択",strokes:"7",def:{en:["select","choose","pick out"],kr:["擇의","略字"]},hunum:[{kor:"택",def:"가릴"}]},{id:5704,hanja:"邰",strokes:"8",def:{en:["surname","state in modern Shanxi"],kr:["태나라","태"]},hunum:[{kor:"태",def:"태나라"}]},{id:5705,hanja:"髫",strokes:"15",def:{en:["children","a youngster"],kr:["다박머리","초"]},hunum:[{kor:"초",def:"다박머리"}]},{id:5706,hanja:"燃",strokes:"16",def:{en:["burn","light fire","ignite"],kr:["연등절","연"]},hunum:[{kor:"연",def:"불사를"}]},{id:5707,hanja:"卸",strokes:"8",def:{en:["lay down","retire from office"],kr:["풀","사"]},hunum:[{kor:"사",def:"풀"}]},{id:5708,hanja:"卹",strokes:"8",def:{en:["sympathy","pity","comfort"],kr:["가엾이","여길","휼"]},hunum:[{kor:"휼",def:"가엾이 여길"}]},{id:5709,hanja:"簀",strokes:"17",def:{en:["bed mat","mat"],kr:["살평상","책"]},hunum:[{kor:"책",def:"살평상"}]},{id:5710,hanja:"邱",strokes:"8",def:{en:["surname","hill","mound","grave"],kr:["언덕","구"]},hunum:[{kor:"구",def:"언덕"}]},{id:5711,hanja:"泚",strokes:"9",def:{en:["clear","bright and brilliant","swea"],kr:["맑을","자"]},hunum:[{kor:"자",def:"맑을"}]},{id:5712,hanja:"髭",strokes:"15",def:{en:["mustache"],kr:["코밑수염","자"]},hunum:[{kor:"자",def:"코밑수염"}]},{id:5713,hanja:"眴",strokes:"11",def:{en:["dazzled"],kr:["눈짓할","순"]},hunum:[{kor:"순",def:"눈짓할"}]},{id:5714,hanja:"泛",strokes:"8",def:{en:["to drift","float","careless","reckless"],kr:["엎을","봉"]},hunum:[{kor:"범",def:"뜰"},{kor:"봉",def:"엎을"}]},{id:5715,hanja:"卺",strokes:"8",def:{en:[],kr:["합환주잔","근"]},hunum:[{kor:"근",def:"합환주잔"}]},{id:5716,hanja:"虚",strokes:"9",def:{en:["false"],kr:["虛의","俗字"]},hunum:[{kor:"허",def:"빌"}]},{id:5717,hanja:"泜",strokes:"8",def:{en:["a river in Hebei province"],kr:["강","이름","지"]},hunum:[{kor:"지",def:"강 이름"}]},{id:5718,hanja:"邳",strokes:"8",def:{en:["a department in the State of Lu","in what is now Shantung or N"],kr:["클","비"]},hunum:[{kor:"비",def:"클"}]},{id:5719,hanja:"髮",strokes:"15",def:{en:["hair"],kr:["터럭","발"]},hunum:[{kor:"발",def:"터럭"}]},{id:5720,hanja:"門",strokes:"8",def:{en:["gate","door","entrance","opening"],kr:["문","문"]},hunum:[{kor:"문",def:"문"}]},{id:5721,hanja:"卻",strokes:"9",def:{en:["still","but","decline","retreat"],kr:["却의","本字"]},hunum:[{kor:"각",def:"물리칠"}]},{id:5722,hanja:"虛",strokes:"10",def:{en:["false","worthless","empty","hollow"],kr:["하늘","허"]},hunum:[{kor:"허",def:"빌"}]},{id:5723,hanja:"塉",strokes:"13",def:{en:[],kr:["메마른","땅","척"]},hunum:[{kor:"척",def:"메마른 땅"}]},{id:5724,hanja:"邴",strokes:"8",def:{en:["name of a city in the ancient state of Song","in what is now Shandong","pleased"],kr:["고을","이름","병"]},hunum:[{kor:"병",def:"고을 이름"}]},{id:5725,hanja:"髯",strokes:"15",def:{en:["beard","mustache"],kr:["髥의","俗字"]},hunum:[{kor:"염",def:"구레나룻"}]},{id:5726,hanja:"泝",strokes:"8",def:{en:["go upstream","trace source","formerly"],kr:["흘러갈","소"]},hunum:[{kor:"소",def:"거슬러 올라갈"}]},{id:5727,hanja:"卼",strokes:"9",def:{en:["unsteady","dangerous"],kr:["위태할","올"]},hunum:[{kor:"올",def:"위태할"}]},{id:5728,hanja:"嶷",strokes:"17",def:{en:["a range of mountains in Hunan province"],kr:["산이름","의"]},hunum:[{kor:"의",def:"산이름"}]},{id:5729,hanja:"髰",strokes:"15",def:{en:[]},hunum:[{kor:"체",def:"머리 깎을"}]},{id:5730,hanja:"卽",strokes:"9",def:{en:["promptly"],kr:["곧","즉"]},hunum:[{kor:"즉",def:"곧"}]},{id:5731,hanja:"塊",strokes:"13",def:{en:["piece","lump","dollar"],kr:["흙덩이","괴"]},hunum:[{kor:"괴",def:"흙덩이"}]},{id:5732,hanja:"邵",strokes:"8",def:{en:["surname","various place names"],kr:["성씨","소"]},hunum:[{kor:"소",def:"땅이름"}]},{id:5733,hanja:"虜",strokes:"10",def:{en:["to capture","imprison","seize","a prison"],kr:["포로","로"]},hunum:[{kor:"로",def:"포로"}]},{id:5734,hanja:"燈",strokes:"16",def:{en:["lantern","lamp"],kr:["등잔","등"]},hunum:[{kor:"등",def:"등잔"}]},{id:5735,hanja:"嶸",strokes:"17",def:{en:["high","steep","lofty","towering"],kr:["산","높을","영"]},hunum:[{kor:"영",def:"산 높을"}]},{id:5736,hanja:"邶",strokes:"8",def:{en:["place in today"],kr:["패나라","패"]},hunum:[{kor:"패",def:"패나라"}]},{id:5737,hanja:"塋",strokes:"13",def:{en:["grave","tomb","cemetery"],kr:["무덤","영"]},hunum:[{kor:"영",def:"무덤"}]},{id:5738,hanja:"閃",strokes:"10",def:{en:["flash","avoid","dodge","evade"],kr:["번쩍할","섬"]},hunum:[{kor:"섬",def:"번쩍할"}]},{id:5739,hanja:"眷",strokes:"11",def:{en:["take interest in","care for"],kr:["돌아볼","권"]},hunum:[{kor:"권",def:"돌아볼"}]},{id:5740,hanja:"燉",strokes:"16",def:{en:["heat with fire","stew"],kr:["불","성할","돈"]},hunum:[{kor:"돈",def:"불 성할"}]},{id:5741,hanja:"卾",strokes:"11",def:{en:[],kr:["윗턱","악"]},hunum:[{kor:"악",def:"윗턱"}]},{id:5742,hanja:"髲",strokes:"15",def:{en:["a wig"],kr:["첩지","피"]},hunum:[{kor:"피",def:"머리쓰개"}]},{id:5743,hanja:"塌",strokes:"13",def:{en:["fall in ruins","collapse"],kr:["떨어질","탑"]},hunum:[{kor:"탑",def:"낮은 땅"}]},{id:5744,hanja:"虞",strokes:"11",def:{en:["concerned about","anxious","worried"],kr:["우제","지낼","우"]},hunum:[{kor:"우",def:"염려할"}]},{id:5745,hanja:"眸",strokes:"11",def:{en:["pupil of eye","eye"],kr:["눈동자","모"]},hunum:[{kor:"모",def:"눈동자"}]},{id:5746,hanja:"泠",strokes:"8",def:{en:["nice and cool","mild and comfortable"],kr:["깨우칠","령"]},hunum:[{kor:"령",def:"깨우칠"}]},{id:5747,hanja:"卿",strokes:"11",def:{en:["noble","high officer"],kr:["벼슬","경"]},hunum:[{kor:"경",def:"벼슬"}]},{id:5748,hanja:"嶺",strokes:"17",def:{en:["mountain ridge","mountain peak"],kr:["재","령"]},hunum:[{kor:"령",def:"재"}]},{id:5749,hanja:"號",strokes:"11",def:{en:["mark","sign","symbol","number"],kr:["울부짖을","호"]},hunum:[{kor:"호",def:"울부짖을"}]},{id:5750,hanja:"泡",strokes:"8",def:{en:["bubbles","suds","blister","soak"],kr:["성할","포"]},hunum:[{kor:"포",def:"물거품"}]},{id:5751,hanja:"燋",strokes:"16",def:{en:["scorch","burn","scald","torch"],kr:["홰","초"]},hunum:[{kor:"초",def:"홰"}]},{id:5752,hanja:"簇",strokes:"17",def:{en:["swarm","crowd together","cluster"],kr:["모일","족"]},hunum:[{kor:"족",def:"모일"}]},{id:5753,hanja:"邸",strokes:"8",def:{en:["official residence","residence of"],kr:["병풍","저"]},hunum:[{kor:"저",def:"사처"}]},{id:5754,hanja:"塍",strokes:"13",def:{en:["a raised path between fields","a dike"]},hunum:[{kor:"승",def:"밭두둑"},{kor:"증",def:"밭두둑"}]},{id:5755,hanja:"波",strokes:"8",def:{en:["waves","breakers","undulations"],kr:["달빛","파"]},hunum:[{kor:"파",def:"물결"}]},{id:5756,hanja:"眺",strokes:"11",def:{en:["look at","gaze at","scan","survey"],kr:["바라볼","조"]},hunum:[{kor:"조",def:"바라볼"}]},{id:5757,hanja:"髴",strokes:"15",def:{en:["disheveled hair","similar to"],kr:["비슷할","불"]},hunum:[{kor:"불",def:"비슷할"}]},{id:5758,hanja:"嶼",strokes:"17",def:{en:["island"],kr:["섬","서"]},hunum:[{kor:"서",def:"섬"}]},{id:5759,hanja:"塏",strokes:"13",def:{en:["high and dry place"],kr:["시원한","땅","개"]},hunum:[{kor:"개",def:"시원한 땅"}]},{id:5760,hanja:"眻",strokes:"11",def:{en:[],kr:["눈","아름다울","양"]},hunum:[{kor:"양",def:"눈 아름다울"}]},{id:5761,hanja:"泣",strokes:"8",def:{en:["cry","sob","weep"],kr:["부글부글","끓는","소리","읍"]},hunum:[{kor:"읍",def:"눈물 줄줄 흘릴"}]},{id:5762,hanja:"嶽",strokes:"17",def:{en:["mountain peak","summit"],kr:["높은","산","악"]},hunum:[{kor:"악",def:"높은 산"}]},{id:5763,hanja:"閈",strokes:"11",def:{en:["village"],kr:["마을","문","한"]},hunum:[{kor:"한",def:"마을 문"}]},{id:5764,hanja:"抨",strokes:"8",def:{en:["impeach","censure","attack"],kr:["탄핵할","평"]},hunum:[{kor:"평",def:"탄핵할"}]},{id:5765,hanja:"簉",strokes:"17",def:{en:["deputy","subordinate","concubine"],kr:["가지런히","날","추"]},hunum:[{kor:"추",def:"버금"}]},{id:5766,hanja:"塐",strokes:"13",def:{en:["model in clay","sculpt","plastics"],kr:["塑와","同字"]},hunum:[{kor:"소",def:"흙 빚을"}]},{id:5767,hanja:"眼",strokes:"11",def:{en:["eye","eyelet","hole","opening"],kr:["눈","안"]},hunum:[{kor:"안",def:"눈"}]},{id:5768,hanja:"燎",strokes:"16",def:{en:["to burn","set afire","to illuminate","a signal lamp"],kr:["화톳불","료"]},hunum:[{kor:"료",def:"화톳불"}]},{id:5769,hanja:"塑",strokes:"13",def:{en:["model in clay","sculpt","plastics"],kr:["허수아비","소"]},hunum:[{kor:"소",def:"허수아비"}]},{id:5770,hanja:"閉",strokes:"11",def:{en:["shut","close","obstruct","block up"],kr:["가릴","폐"]},hunum:[{kor:"별",def:"막을"},{kor:"폐",def:"닫을"}]},{id:5771,hanja:"泥",strokes:"8",def:{en:["mud","mire","earth","clay","plaster"],kr:["막힐","니"]},hunum:[{kor:"니",def:"막힐"}]},{id:5772,hanja:"眾",strokes:"11",def:{en:["masses","people","multitude","crowd"],kr:["衆의","本字"]},hunum:[{kor:"중",def:"무리"}]},{id:5773,hanja:"塒",strokes:"13",def:{en:["roost"],kr:["홰","시"]},hunum:[{kor:"시",def:"홰"}]},{id:5774,hanja:"閊",strokes:"11",def:{en:["to be obstructed","blocked","to break down"],kr:["비색할","산"]},hunum:[{kor:"산",def:"비색할"}]},{id:5775,hanja:"燐",strokes:"16",def:{en:["phosphorus"],kr:["도깨비불","린"]},hunum:[{kor:"린",def:"도깨비불"}]},{id:5776,hanja:"簋",strokes:"17",def:{en:["a square basket of bamboo for holding grain used at sacrifices","feast"],kr:["대제기","궤"]},hunum:[{kor:"궤",def:"대제기"}]},{id:5777,hanja:"髹",strokes:"16",def:{en:[],kr:["옻칠할","휴"]},hunum:[{kor:"휴",def:"옻칠할"}]},{id:5778,hanja:"披",strokes:"8",def:{en:["wear","split","crack"],kr:["찢어질","피"]},hunum:[{kor:"피",def:"헤칠"}]},{id:5779,hanja:"邽",strokes:"9",def:{en:["name of a county in Han dynasty"],kr:["고을이름","규"]},hunum:[{kor:"규",def:"고을이름"}]},{id:5780,hanja:"開",strokes:"12",def:{en:["open","initiate","begin","start"],kr:["풀","개"]},hunum:[{kor:"개",def:"열"}]},{id:5781,hanja:"抬",strokes:"8",def:{en:["lift","carry"],kr:["칠","태"]},hunum:[{kor:"태",def:"칠"}]},{id:5782,hanja:"塔",strokes:"13",def:{en:["tower","spire","tall building"],kr:["탑","탑"]},hunum:[{kor:"탑",def:"탑"}]},{id:5783,hanja:"邾",strokes:"9",def:{en:["a feudal state which existed B","now in Shandong"],kr:["나라이름","주"]},hunum:[{kor:"주",def:"나라이름"}]},{id:5784,hanja:"注",strokes:"8",def:{en:["concentrate","focus","direct"],kr:["물댈","주"]},hunum:[{kor:"주",def:"물댈"}]},{id:5785,hanja:"髺",strokes:"16",def:{en:["the hair dishevelled","as in mourning"],kr:["머리","묶을","괄"]},hunum:[{kor:"괄",def:"머리 묶을"}]},{id:5786,hanja:"燒",strokes:"16",def:{en:["burn","bake","heat","roast"],kr:["불","놓을","소"]},hunum:[{kor:"소",def:"불 붙을"}]},{id:5787,hanja:"虧",strokes:"15",def:{en:["lose","fail","damage","deficient"],kr:["이지러질","휴"]},hunum:[{kor:"휴",def:"이지러질"}]},{id:5788,hanja:"髻",strokes:"16",def:{en:["hair rolled up in a bun","topknot"],kr:["상투","계"]},hunum:[{kor:"계",def:"상투"}]},{id:5789,hanja:"燔",strokes:"16",def:{en:["to roast","to burn"],kr:["구울","번"]},hunum:[{kor:"번",def:"구울"}]},{id:5790,hanja:"簏",strokes:"17",def:{en:["a box","a basket"],kr:["대","상자","록"]},hunum:[{kor:"록",def:"대 상자"}]},{id:5791,hanja:"泫",strokes:"8",def:{en:["weep","cry","shine","glisten"],kr:["눈물","줄줄","흘릴","현"]},hunum:[{kor:"현",def:"물 깊을"}]},{id:5792,hanja:"髽",strokes:"17",def:{en:["to dress the hair"],kr:["북상투","좌"]},hunum:[{kor:"좌",def:"북상투"}]},{id:5793,hanja:"塗",strokes:"13",def:{en:["smear","daub","apply","spread","paint"],kr:["바를","도"]},hunum:[{kor:"도",def:"바를"}]},{id:5794,hanja:"閎",strokes:"12",def:{en:["gate","barrier","wide","vast","expand"],kr:["마을문","굉"]},hunum:[{kor:"굉",def:"마을문"}]},{id:5795,hanja:"燕",strokes:"16",def:{en:["swallow","comfort","enjoy"],kr:["나라이름","연"]},hunum:[{kor:"연",def:"제비"}]},{id:5796,hanja:"塘",strokes:"13",def:{en:["pond","tank","dike","embankment"],kr:["연못","당"]},hunum:[{kor:"당",def:"연못"}]},{id:5797,hanja:"閏",strokes:"12",def:{en:["intercalary","extra","surplus"],kr:["윤달","륜"]},hunum:[{kor:"륜",def:"윤달"}]},{id:5798,hanja:"燖",strokes:"16",def:{en:["reheat food"],kr:["삶을","심"]},hunum:[{kor:"심",def:"삶을"}]},{id:5799,hanja:"簑",strokes:"16",def:{en:["a coat raincoat"],kr:["蓑와","同字"]},hunum:[{kor:"사",def:"도롱이"}]},{id:5800,hanja:"抱",strokes:"8",def:{en:["embrace","hold in arms","enfold"],kr:["낄","포"]},hunum:[{kor:"포",def:"안을"}]},{id:5801,hanja:"虫",strokes:"6",def:{en:["insects","worms","KangXi radical"],kr:["벌레","훼"]},hunum:[{kor:"충",def:"벌레"},{kor:"훼",def:"벌레"}]},{id:5802,hanja:"簒",strokes:"17",def:{en:["usurp"],kr:["빼앗을","찬"]},hunum:[{kor:"찬",def:"빼앗을"}]},{id:5803,hanja:"塙",strokes:"13",def:{en:["truly"],kr:["단단할","고"]},hunum:[{kor:"고",def:"단단할"}]},{id:5804,hanja:"一",strokes:"1",def:{en:["one","a","an","alone"],kr:["한","일"]},hunum:[{kor:"일",def:"한"}]},{id:5805,hanja:"閑",strokes:"12",def:{en:["fence","barrier","defend","idle time"],kr:["한가할","한"]},hunum:[{kor:"한",def:"한가할"}]},{id:5806,hanja:"塚",strokes:"13",def:{en:["cemetery","tomb","burial mound"],kr:["冢의","俗字"]},hunum:[{kor:"총",def:"무덤"}]},{id:5807,hanja:"丁",strokes:"2",def:{en:["male adult","robust","vigorous","fourth heavenly stem"],kr:["네째","천간","정"]},hunum:[{kor:"정",def:"장정"}]},{id:5808,hanja:"虬",strokes:"7",def:{en:["young dragon"],kr:["虯와","同字"]},hunum:[{kor:"규",def:"규룡"}]},{id:5809,hanja:"燙",strokes:"16",def:{en:["scald","heat","wash","iron clothes"],kr:["불에","델","탕"]},hunum:[{kor:"탕",def:"씻을"}]},{id:5810,hanja:"丂",strokes:"2",def:{en:["obstruction of breath","variant of other characters"],kr:["교묘할","교"]},hunum:[{kor:"교",def:"교묘할"}]},{id:5811,hanja:"閒",strokes:"12",def:{en:["peaceful","tranquil","calm"],kr:["한가할","한"]},hunum:[{kor:"간",def:"틈"},{kor:"한",def:"한가할"}]},{id:5812,hanja:"簔",strokes:"17",def:{en:["a coat raincoat"]},hunum:[{kor:"사",def:"도롱이"}]},{id:5813,hanja:"泮",strokes:"8",def:{en:["Zhou dynasty school","disperse","fall apart"],kr:["학교","반"]},hunum:[{kor:"반",def:"학교"}]},{id:5814,hanja:"七",strokes:"2",def:{en:["seven"],kr:["글체이름","칠"]},hunum:[{kor:"칠",def:"일곱"}]},{id:5815,hanja:"間",strokes:"12",def:{en:["interval","space","place","between"],kr:["사이","간"]},hunum:[{kor:"간",def:"틈"}]},{id:5816,hanja:"泯",strokes:"8",def:{en:["destroy","eliminate","perish"],kr:["망할","민"]},hunum:[{kor:"민",def:"망할"}]},{id:5817,hanja:"泰",strokes:"9",def:{en:["great","exalted","superior","big"],kr:["괘","이름","태"]},hunum:[{kor:"태",def:"클"}]},{id:5818,hanja:"抵",strokes:"8",def:{en:["resist","oppose","deny","off"],kr:["칠","지"]},hunum:[{kor:"저",def:"밀칠"},{kor:"지",def:"칠"}]},{id:5819,hanja:"塜",strokes:"13",def:{en:["dusty","dirt"],kr:["먼지","일","봉"]},hunum:[{kor:"봉",def:"먼지 일"}]},{id:5820,hanja:"丄",strokes:"2",def:{en:["above"]},hunum:[{kor:"상",def:"위"}]},{id:5821,hanja:"閔",strokes:"12",def:{en:["mourn","grieve","urge on","incite"],kr:["위문할","민"]},hunum:[{kor:"민",def:"위문할"}]},{id:5822,hanja:"虯",strokes:"8",def:{en:["young dragon"],kr:["뿔없는","용","규"]},hunum:[{kor:"규",def:"뿔없는 용"}]},{id:5823,hanja:"丅",strokes:"2",def:{en:["under","underneath","below","down","inferior","bring down","used to transliterate the Latin letter"],kr:["下의","簡體字"]},hunum:[{kor:"하",def:"아래"}]},{id:5824,hanja:"泱",strokes:"8",def:{en:["great","expansive","agitated"],kr:["끝없을","앙"]},hunum:[{kor:"앙",def:"끝없을"}]},{id:5825,hanja:"脂",strokes:"10",def:{en:["fat","grease","lard","grease"],kr:["기름","지"]},hunum:[{kor:"지",def:"기름"}]},{id:5826,hanja:"塞",strokes:"13",def:{en:["stop up","block","seal","cork","pass","frontier","fortress"],kr:["막힐","색"]},hunum:[{kor:"새",def:"변방"},{kor:"색",def:"막힐"}]},{id:5827,hanja:"簘",strokes:"18",def:{en:["musical instrument like pan","bamboo flute"],kr:["簫와","同字"]},hunum:[{kor:"소",def:"퉁소"}]},{id:5828,hanja:"万",strokes:"3",def:{en:["ten thousand","innumerable"],kr:["성씨","묵"]},hunum:[{kor:"만",def:"일만"},{kor:"묵",def:"성씨"}]},{id:5829,hanja:"虱",strokes:"8",def:{en:["louse","bug","parasite"],kr:["蝨과","同字"]},hunum:[{kor:"슬",def:"이"}]},{id:5830,hanja:"泳",strokes:"8",def:{en:["dive","swim"],kr:["헤엄칠","영"]},hunum:[{kor:"영",def:"헤엄칠"}]},{id:5831,hanja:"丈",strokes:"3",def:{en:["unit of length equal","gentleman","man","husband"],kr:["어른","장"]},hunum:[{kor:"장",def:"어른"}]},{id:5832,hanja:"閘",strokes:"13",def:{en:["sluice","flood gate","canal lock"],kr:["물","문","갑"]},hunum:[{kor:"갑",def:"문 빗장"}]},{id:5833,hanja:"營",strokes:"17",def:{en:["encampment","barracks","manage"],kr:["별이름","형"]},hunum:[{kor:"영",def:"지을"},{kor:"형",def:"별이름"}]},{id:5834,hanja:"抹",strokes:"8",def:{en:["smear","apply","wipe off","erase"],kr:["바랄","말"]},hunum:[{kor:"말",def:"바랄"}]},{id:5835,hanja:"譁",strokes:"19",def:{en:["noise","uproar","clamor","hubbub"],kr:["시끄러울","화"]},hunum:[{kor:"화",def:"시끄러울"}]},{id:5836,hanja:"脅",strokes:"10",def:{en:["ribs","armpits","flank","threaten"],kr:["위협할","협"]},hunum:[{kor:"협",def:"갈빗대"}]},{id:5837,hanja:"塡",strokes:"13",def:{en:["fill in","fill up","make good"],kr:["누를","진"]},hunum:[{kor:"전",def:"메울"},{kor:"진",def:"누를"}]},{id:5838,hanja:"三",strokes:"3",def:{en:["three"],kr:["석","삼"]},hunum:[{kor:"삼",def:"석"}]},{id:5839,hanja:"枇",strokes:"8",def:{en:["loquat"],kr:["비파나무","비"]},hunum:[{kor:"비",def:"비파나무"}]},{id:5840,hanja:"脆",strokes:"10",def:{en:["crisp","fragile","frail","brittle"],kr:["약할","취"]},hunum:[{kor:"취",def:"연할"}]},{id:5841,hanja:"塢",strokes:"13",def:{en:["entrenchment","bank","low wall"],kr:["마을","오"]},hunum:[{kor:"오",def:"산 언덕"}]},{id:5842,hanja:"上",strokes:"3",def:{en:["top","superior","highest","go up","send up"],kr:["위","상"]},hunum:[{kor:"상",def:"위"}]},{id:5843,hanja:"燠",strokes:"17",def:{en:["warm","warmth"],kr:["더울","욱"]},hunum:[{kor:"욱",def:"더울"}]},{id:5844,hanja:"譃",strokes:"19",def:{en:[],kr:["망녕된","말","후"]},hunum:[{kor:"후",def:"망녕된 말"}]},{id:5845,hanja:"脇",strokes:"10",def:{en:["ribs","armpits","flank","threaten"],kr:["脅과","同字"]},hunum:[{kor:"협",def:"위협할"}]},{id:5846,hanja:"下",strokes:"3",def:{en:["under","underneath","below","down","inferior","bring down"],kr:["아래","하"]},hunum:[{kor:"하",def:"아래"}]},{id:5847,hanja:"押",strokes:"8",def:{en:["mortgage","pledge","deposit","to pawn","to arrest","detain","guard"],kr:["누를","압"]},hunum:[{kor:"갑",def:"도울"},{kor:"압",def:"수결 둘"}]},{id:5848,hanja:"枉",strokes:"8",def:{en:["useless","in vain","bent","crooked"],kr:["원통할","왕"]},hunum:[{kor:"왕",def:"굽을"}]},{id:5849,hanja:"塤",strokes:"13",def:{en:["instrument"],kr:["壎과","同字"]},hunum:[{kor:"훈",def:"진나팔"}]},{id:5850,hanja:"抽",strokes:"8",def:{en:["draw out","pull out","sprout"],kr:["거둘","추"]},hunum:[{kor:"추",def:"뺄"}]},{id:5851,hanja:"丌",strokes:"3",def:{en:["table"],kr:["책상","기"]},hunum:[{kor:"기",def:"책상"}]},{id:5852,hanja:"脈",strokes:"10",def:{en:["blood vessels","veins","arteries"],kr:["맥","맥"]},hunum:[{kor:"맥",def:"맥"}]},{id:5853,hanja:"簞",strokes:"18",def:{en:["small bamboo basket for holding"],kr:["소쿠리","단"]},hunum:[{kor:"단",def:"소쿠리"}]},{id:5854,hanja:"簟",strokes:"18",def:{en:["bamboo mat"],kr:["대","이름","점"]},hunum:[{kor:"점",def:"삿자리"}]},{id:5855,hanja:"不",strokes:"4",def:{en:["no","not","un","negative prefix"],kr:["아닐","불"]},hunum:[{kor:"부",def:"아닐"},{kor:"불",def:"아닐"}]},{id:5856,hanja:"脉",strokes:"9",def:{en:["blood vessels","veins","arteries"],kr:["脈의","古字"]},hunum:[{kor:"맥",def:"맥"}]},{id:5857,hanja:"枋",strokes:"8",def:{en:["sandalwood","tree used as timber"],kr:["다목","방"]},hunum:[{kor:"방",def:"다목"}]},{id:5858,hanja:"脊",strokes:"10",def:{en:["spine","backbone","ridge"],kr:["등성마루","척"]},hunum:[{kor:"척",def:"등성마루"}]},{id:5859,hanja:"与",strokes:"4",def:{en:["and","with","to","for","give","grant"],kr:["與와","同字"]},hunum:[{kor:"여",def:"더블"}]},{id:5860,hanja:"簠",strokes:"18",def:{en:["an ancient vessel used for holding boiled grain"],kr:["제기","이름","보"]},hunum:[{kor:"보",def:"제기 이름"}]},{id:5861,hanja:"枌",strokes:"8",def:{en:["variety of elm with small seeds"],kr:["나무","이름","분"]},hunum:[{kor:"분",def:"나무 이름"}]},{id:5862,hanja:"燥",strokes:"17",def:{en:["dry","parched","arid","quick"],kr:["마를","조"]},hunum:[{kor:"조",def:"마를"}]},{id:5863,hanja:"丏",strokes:"4",def:{en:["parapet","invisible"],kr:["가릴","면"]},hunum:[{kor:"면",def:"가릴"}]},{id:5864,hanja:"閟",strokes:"13",def:{en:["hide","keep secret","hideaway"],kr:["문","닫을","비"]},hunum:[{kor:"비",def:"문 닫을"}]},{id:5865,hanja:"虹",strokes:"9",def:{en:["rainbow"],kr:["무지개","홍"]},hunum:[{kor:"강",def:"골이름"},{kor:"홍",def:"무지개"}]},{id:5866,hanja:"簡",strokes:"18",def:{en:["simple","terse","succinct","letter"],kr:["대쪽","간"]},hunum:[{kor:"간",def:"대쪽"}]},{id:5867,hanja:"虺",strokes:"9",def:{en:["large poisonous snake"],kr:["살무사","훼"]},hunum:[{kor:"훼",def:"살무사"}]},{id:5868,hanja:"燦",strokes:"17",def:{en:["vivid","illuminating","bright"],kr:["빛날","찬"]},hunum:[{kor:"찬",def:"빛날"}]},{id:5869,hanja:"丐",strokes:"4",def:{en:["beggar","beg","give"],kr:["빌","개"]},hunum:[{kor:"갈",def:"거지"},{kor:"개",def:"빌"}]},{id:5870,hanja:"丑",strokes:"4",def:{en:["clown","comedian","second terrestrial branch"],kr:["북동쪽","축"]},hunum:[{kor:"추",def:"수갑"},{kor:"축",def:"소"}]},{id:5871,hanja:"塩",strokes:"13",def:{en:["salt"],kr:["鹽의","俗字"]},hunum:[{kor:"염",def:"소금"}]},{id:5872,hanja:"虻",strokes:"9",def:{en:["horsefly","gadfly"]},hunum:[{kor:"맹",def:"등에"}]},{id:5873,hanja:"燧",strokes:"17",def:{en:["flintstone","beacon","signal fire","torch"],kr:["나무","문질러","불낼","수"]},hunum:[{kor:"수",def:"봉화"}]},{id:5874,hanja:"枏",strokes:"8",def:{en:["a variety of evergreen tree"],kr:["녹나무","남"]},hunum:[{kor:"남",def:"녹나무"}]},{id:5875,hanja:"證",strokes:"19",def:{en:["proof","evidence","testify","verify"],kr:["증거","증"]},hunum:[{kor:"증",def:"증거"}]},{id:5876,hanja:"関",strokes:"14",def:{en:["frontier pass","close","relation"],kr:["關과","同字"]},hunum:[{kor:"관",def:"쇠사슬"},{kor:"완",def:"당길"}]},{id:5877,hanja:"析",strokes:"8",def:{en:["split wood","break apart","divide"],kr:["가를","석"]},hunum:[{kor:"석",def:"가를"}]},{id:5878,hanja:"填",strokes:"13",def:{en:["fill in","fill up","make good"],kr:["塡의","俗字"]},hunum:[{kor:"전",def:"메울"},{kor:"진",def:"진정할"}]},{id:5879,hanja:"閣",strokes:"14",def:{en:["chamber","pavilion","cabinet"],kr:["문설주","각"]},hunum:[{kor:"각",def:"문설주"}]},{id:5880,hanja:"閤",strokes:"14",def:{en:["small side door","chamber"],kr:["개구리소리","합"]},hunum:[{kor:"합",def:"도장"}]},{id:5881,hanja:"簧",strokes:"18",def:{en:["reed of woodwind instrument"],kr:["혀","황"]},hunum:[{kor:"황",def:"혀"}]},{id:5882,hanja:"且",strokes:"5",def:{en:["moreover","also","about to","will soon"],kr:["또","차"]},hunum:[{kor:"저",def:"공손할"},{kor:"차",def:"또"}]},{id:5883,hanja:"閥",strokes:"14",def:{en:["powerful and influential group"],kr:["공훈","벌"]},hunum:[{kor:"벌",def:"공훈"}]},{id:5884,hanja:"譌",strokes:"19",def:{en:["false","erronious"],kr:["요사스런","말","와"]},hunum:[{kor:"와",def:"거짓"}]},{id:5885,hanja:"枓",strokes:"8",def:{en:["capital"],kr:["두공","두"]},hunum:[{kor:"두",def:"두공"}]},{id:5886,hanja:"燬",strokes:"17",def:{en:["burn down","blaze","fire"],kr:["불","훼"]},hunum:[{kor:"훼",def:"불"}]},{id:5887,hanja:"閦",strokes:"14",def:{en:["crowd","transliteration of Sanskrit","e"],kr:["아축부처","축"]},hunum:[{kor:"축",def:"무리"}]},{id:5888,hanja:"匀",strokes:"4",def:{en:["equal"],kr:["勻과","同字"]},hunum:[{kor:"균",def:"고를"},{kor:"윤",def:"나눌"}]},{id:5889,hanja:"丕",strokes:"5",def:{en:["great","grand","glorious","distinguished"],kr:["클","비"]},hunum:[{kor:"비",def:"클"}]},{id:5890,hanja:"譎",strokes:"19",def:{en:["cunning","crafty","sly","wily"],kr:["속일","휼"]},hunum:[{kor:"휼",def:"속일"}]},{id:5891,hanja:"閧",strokes:"14",def:{en:["boisterous","clamor","noise"],kr:["싸우는","소리","홍"]},hunum:[{kor:"홍",def:"싸우는 소리"}]},{id:5892,hanja:"枕",strokes:"8",def:{en:["pillow"],kr:["소말뚝","침"]},hunum:[{kor:"침",def:"베개"}]},{id:5893,hanja:"燭",strokes:"17",def:{en:["candle","taper","to shine","illuminate"],kr:["爥의","俗字"]},hunum:[{kor:"촉",def:"촛불"}]},{id:5894,hanja:"匁",strokes:"4",def:{en:["Japanese unit of weight"],kr:["몸메","문"]},hunum:[{kor:"문",def:"몸메"}]},{id:5895,hanja:"世",strokes:"5",def:{en:["generation","world","era"],kr:["백년","세"]},hunum:[{kor:"세",def:"세상"}]},{id:5896,hanja:"匂",strokes:"4",def:{en:["fragrance","smell"],kr:["향내","내"]},hunum:[{kor:"내",def:"향내"}]},{id:5897,hanja:"閨",strokes:"14",def:{en:["small entrance","women"],kr:["색시","규"]},hunum:[{kor:"규",def:"색시"}]},{id:5898,hanja:"譏",strokes:"19",def:{en:["ridicule","jeer","mock","inspect"],kr:["나무랄","기"]},hunum:[{kor:"기",def:"나무랄"}]},{id:5899,hanja:"燮",strokes:"17",def:{en:["harmonize","blend","adjust"],kr:["조화로울","섭"]},hunum:[{kor:"섭",def:"불에 익힐"}]},{id:5900,hanja:"簪",strokes:"18",def:{en:["hairpin","clasp","wear in hair"],kr:["비녀","잠"]},hunum:[{kor:"잠",def:"비녀"}]},{id:5901,hanja:"匃",strokes:"5",def:{en:["beggar","beg","give"],kr:["빌","개"]},hunum:[{kor:"개",def:"청구할"}]},{id:5902,hanja:"丘",strokes:"5",def:{en:["hill","elder","empty","a name"],kr:["언덕","구"]},hunum:[{kor:"구",def:"언덕"}]},{id:5903,hanja:"閩",strokes:"14",def:{en:["fujian province","a river","a tribe"],kr:["종족이름","민"]},hunum:[{kor:"민",def:"종족이름"}]},{id:5904,hanja:"林",strokes:"8",def:{en:["forest","grove","surname"],kr:["수풀","림"]},hunum:[{kor:"림",def:"수풀"}]},{id:5905,hanja:"匄",strokes:"5",def:{en:["to beg for alms","a beggar"],kr:["匃와","同字"]},hunum:[{kor:"갈",def:"청구할"},{kor:"개",def:"빌"}]},{id:5906,hanja:"丙",strokes:"5",def:{en:["third"],kr:["남녘","병"]},hunum:[{kor:"병",def:"남녘"}]},{id:5907,hanja:"閪",strokes:"14",def:{en:["to lose lost item"],kr:["잃을","서"]},hunum:[{kor:"서",def:"잃을"}]},{id:5908,hanja:"脖",strokes:"11",def:{en:["neck"],kr:["배꼽","발"]},hunum:[{kor:"발",def:"배꼽"}]},{id:5909,hanja:"簫",strokes:"18",def:{en:["musical instrument like pan","bamboo flute"],kr:["활고지","소"]},hunum:[{kor:"소",def:"퉁소"}]},{id:5910,hanja:"包",strokes:"5",def:{en:["wrap","pack","bundle","package"],kr:["보따리","포"]},hunum:[{kor:"포",def:"꾸릴"}]},{id:5911,hanja:"閫",strokes:"15",def:{en:["threshold","women"],kr:["문지방","곤"]},hunum:[{kor:"곤",def:"문지방"}]},{id:5912,hanja:"枘",strokes:"8",def:{en:["the handle of tools"],kr:["자루","예"]},hunum:[{kor:"예",def:"자루"}]},{id:5913,hanja:"匆",strokes:"5",def:{en:["hastily","in haste","hurriedly"],kr:["바쁠","총"]},hunum:[{kor:"총",def:"바쁠"}]},{id:5914,hanja:"嵁",strokes:"12",def:{en:["rugged"],kr:["산","험할","감"]},hunum:[{kor:"감",def:"산 험할"}]},{id:5915,hanja:"閬",strokes:"15",def:{en:["high door","high gate","high","lofty"],kr:["솟을","대문","랑"]},hunum:[{kor:"랑",def:"솟을 대문"}]},{id:5916,hanja:"脘",strokes:"11",def:{en:["internal cavity of stomach"],kr:["중완","완"]},hunum:[{kor:"완",def:"중완"}]},{id:5917,hanja:"枙",strokes:"8",def:{en:[],kr:["옹이","와"]},hunum:[{kor:"와",def:"옹이"}]},{id:5918,hanja:"塵",strokes:"14",def:{en:["dust","dirt","ashes","cinders"],kr:["띠끌","진"]},hunum:[{kor:"진",def:"띠끌"}]},{id:5919,hanja:"嵂",strokes:"12",def:{en:["lofty"],kr:["가파를","률"]},hunum:[{kor:"률",def:"가파를"}]},{id:5920,hanja:"譔",strokes:"19",def:{en:["eulogize","compose","write"],kr:["가르칠","선"]},hunum:[{kor:"선",def:"가르칠"}]},{id:5921,hanja:"枚",strokes:"8",def:{en:["stalk of shrub","trunk of tree"],kr:["줄기","매"]},hunum:[{kor:"매",def:"줄기"}]},{id:5922,hanja:"閭",strokes:"15",def:{en:["village of twenty"],kr:["이문","려"]},hunum:[{kor:"려",def:"이문"}]},{id:5923,hanja:"脚",strokes:"11",def:{en:["leg","foot","base","leg","foundation"],kr:["다리","각"]},hunum:[{kor:"각",def:"다리"}]},{id:5924,hanja:"匈",strokes:"6",def:{en:["breast","chest","thorax","clamor","the Hsiung Nu"]},hunum:[{kor:"흉",def:"오랑캐"}]},{id:5925,hanja:"譖",strokes:"19",def:{en:["to slander"],kr:["참소할","참"]},hunum:[{kor:"참",def:"참소할"}]},{id:5926,hanja:"丞",strokes:"6",def:{en:["assist","aid","rescue"],kr:["향상할","승"]},hunum:[{kor:"승",def:"이을"}]},{id:5927,hanja:"脛",strokes:"11",def:{en:["shinbone","calf of leg"],kr:["정강이","경"]},hunum:[{kor:"경",def:"정강이"}]},{id:5928,hanja:"盂",strokes:"8",def:{en:["basin","cup"],kr:["사냥하는","진","우"]},hunum:[{kor:"우",def:"바리"}]},{id:5929,hanja:"果",strokes:"8",def:{en:["fruit","result"],kr:["실과","과"]},hunum:[{kor:"과",def:"실과"}]},{id:5930,hanja:"匉",strokes:"7",def:{en:["noise of waters"],kr:["크게","소리지를","평"]},hunum:[{kor:"평",def:"크게 소리지를"}]},{id:5931,hanja:"枝",strokes:"8",def:{en:["branches","limbs","branch off"],kr:["가지","지"]},hunum:[{kor:"지",def:"가지"}]},{id:5932,hanja:"丟",strokes:"6",def:{en:["discard","reject","lose"],kr:["갈","주"]},hunum:[{kor:"주",def:"갈"}]},{id:5933,hanja:"遁",strokes:"13",def:{en:["hide","conceal oneself","escape"],kr:["달아날","둔"]},hunum:[{kor:"돈",def:"달아날"},{kor:"둔",def:"달아날"}]},{id:5934,hanja:"盃",strokes:"9",def:{en:["glass","cup"],kr:["杯의","俗字"]},hunum:[{kor:"배",def:"잔"}]},{id:5935,hanja:"塹",strokes:"14",def:{en:["moat","trench","pit","cavity"],kr:["구덩이","참"]},hunum:[{kor:"참",def:"구덩이"}]},{id:5936,hanja:"匊",strokes:"8",def:{en:["handful"],kr:["움켜","뜰","국"]},hunum:[{kor:"국",def:"움켜 뜰"}]},{id:5937,hanja:"丠",strokes:"6",def:{en:["hill","elder","empty","a name"],kr:["丘와","同字"]},hunum:[{kor:"구",def:"언덕"}]},{id:5938,hanja:"遂",strokes:"13",def:{en:["comply with","follow along","thereupon"],kr:["마침내","수"]},hunum:[{kor:"수",def:"사무칠"}]},{id:5939,hanja:"識",strokes:"19",def:{en:["recognize","understand","know"],kr:["표할","지"]},hunum:[{kor:"식",def:"알"},{kor:"지",def:"표할"}]},{id:5940,hanja:"譙",strokes:"19",def:{en:["tower","surname"],kr:["꾸짖을","초"]},hunum:[{kor:"초",def:"꾸짖을"}]},{id:5941,hanja:"匋",strokes:"8",def:{en:["pottery"],kr:["기오","굽는","가마","요"]},hunum:[{kor:"도",def:"질그릇"},{kor:"요",def:"기오 굽는 가마"}]},{id:5942,hanja:"両",strokes:"6",def:{en:["two","both","pair","couple","a tael","ounce"],kr:["兩의","俗字"]},hunum:[{kor:"량",def:"두"}]},{id:5943,hanja:"閱",strokes:"15",def:{en:["examine","inspect","review","read"],kr:["용납할","열"]},hunum:[{kor:"열",def:"겪을"}]},{id:5944,hanja:"燹",strokes:"18",def:{en:["fire","wild fires"],kr:["들불","희"]},hunum:[{kor:"희",def:"들불"}]},{id:5945,hanja:"匌",strokes:"8",def:{en:[],kr:["기운","답답할","합"]},hunum:[{kor:"합",def:"기운 답답할"}]},{id:5946,hanja:"丢",strokes:"6",def:{en:["discard"],kr:["잃어버릴","주"]},hunum:[{kor:"주",def:"잃어버릴"}]},{id:5947,hanja:"閲",strokes:"15",def:{en:["examine"],kr:["閱의","略字"]},hunum:[{kor:"열",def:"불"}]},{id:5948,hanja:"譚",strokes:"19",def:{en:["surname","to talk"],kr:["클","담"]},hunum:[{kor:"담",def:"클"}]},{id:5949,hanja:"盆",strokes:"9",def:{en:["basin","tub","pot","bowl"],kr:["동이","분"]},hunum:[{kor:"분",def:"동이"}]},{id:5950,hanja:"匍",strokes:"9",def:{en:["crawl","lie prostrate"],kr:["엎드러질","포"]},hunum:[{kor:"포",def:"엉금엉금 길"}]},{id:5951,hanja:"遅",strokes:"13",def:{en:["late","tardy","slow","delay"],kr:["더딜","지"]},hunum:[{kor:"지",def:"더딜"}]},{id:5952,hanja:"丣",strokes:"7",def:{en:["ancient form of the tenth of the twelve Terrestrial Branches","U"],kr:["酉"]},hunum:[{kor:"유",def:"닭"}]},{id:5953,hanja:"燻",strokes:"18",def:{en:["smoke","fog","vapor","smoke","cure"],kr:["연기","낄","훈"]},hunum:[{kor:"훈",def:"연기 낄"}]},{id:5954,hanja:"塼",strokes:"14",def:{en:["brick"],kr:["벽돌","전"]},hunum:[{kor:"전",def:"벽돌"}]},{id:5955,hanja:"匎",strokes:"10",def:{en:[],kr:["검약할","압"]},hunum:[{kor:"압",def:"사치스럽지 않을"}]},{id:5956,hanja:"两",strokes:"7",def:{en:["two","both","pair","couple","ounce"],kr:["쌍","량"]},hunum:[{kor:"량",def:"쌍"}]},{id:5957,hanja:"譜",strokes:"19",def:{en:["register","list","table","musical score"],kr:["계보","보"]},hunum:[{kor:"보",def:"계보"}]},{id:5958,hanja:"盈",strokes:"9",def:{en:["fill","full","overflowing","surplus"],kr:["물","흐를","영"]},hunum:[{kor:"영",def:"가득할"}]},{id:5959,hanja:"匏",strokes:"11",def:{en:["gourd","musical instrument"],kr:["퉁소","포"]},hunum:[{kor:"포",def:"박"}]},{id:5960,hanja:"簷",strokes:"19",def:{en:["eaves of house","brim"],kr:["처마","첨"]},hunum:[{kor:"첨",def:"처마"}]},{id:5961,hanja:"嵋",strokes:"12",def:{en:["Omei mountain in Sichuan"],kr:["산이름","미"]},hunum:[{kor:"미",def:"산이름"}]},{id:5962,hanja:"遇",strokes:"13",def:{en:["meet","come across","encounter"],kr:["뜻밖에","우"]},hunum:[{kor:"우",def:"만날"}]},{id:5963,hanja:"燼",strokes:"18",def:{en:["cinders","ashes","embers","remnants"],kr:["재난의","뒤","신"]},hunum:[{kor:"신",def:"깜부기불"}]},{id:5964,hanja:"塽",strokes:"14",def:{en:["plateau"],kr:["높고밝은땅","상"]},hunum:[{kor:"상",def:"높고밝은땅"}]},{id:5965,hanja:"簸",strokes:"19",def:{en:["winnower"],kr:["키","파"]},hunum:[{kor:"파",def:"까부를"}]},{id:5966,hanja:"閶",strokes:"16",def:{en:["gate of heaven","main gate of palace"],kr:["천문","청"]},hunum:[{kor:"청",def:"천문"}]},{id:5967,hanja:"匐",strokes:"11",def:{en:["fall prostrate","crawl"],kr:["길","복"]},hunum:[{kor:"복",def:"길"}]},{id:5968,hanja:"嵌",strokes:"12",def:{en:["inlay","set in","fall into","rugged"],kr:["깊은","산","감"]},hunum:[{kor:"감",def:"깊은 골"}]},{id:5969,hanja:"並",strokes:"8",def:{en:["equal to","side by side","also","what is more","both"],kr:["竝과","同字"]},hunum:[{kor:"병",def:"나란 히"}]},{id:5970,hanja:"益",strokes:"10",def:{en:["profit","benefit","advantage"],kr:["더할","익"]},hunum:[{kor:"익",def:"더할"}]},{id:5971,hanja:"塾",strokes:"14",def:{en:["village school","private tutorage"],kr:["기숙사","숙"]},hunum:[{kor:"숙",def:"사랑방"}]},{id:5972,hanja:"譟",strokes:"20",def:{en:["clamor","noise","din","slander"],kr:["시끄러울","조"]},hunum:[{kor:"조",def:"시끄러울"}]},{id:5973,hanja:"遉",strokes:"13",def:{en:["spy","reconnoiter","detective"],kr:["염탐할","정"]},hunum:[{kor:"정",def:"순라군"}]},{id:5974,hanja:"匑",strokes:"12",def:{en:[],kr:["공손할","궁"]},hunum:[{kor:"궁",def:"공손할"}]},{id:5975,hanja:"脣",strokes:"11",def:{en:["lips"],kr:["입술","순"]},hunum:[{kor:"순",def:"입술"}]},{id:5976,hanja:"燾",strokes:"18",def:{en:["shine","illuminate","cover","envelope"],kr:["비칠","도"]},hunum:[{kor:"도",def:"비칠"}]},{id:5977,hanja:"匒",strokes:"12",def:{en:[],kr:["포갤","답"]},hunum:[{kor:"답",def:"포갤"}]},{id:5978,hanja:"嵎",strokes:"12",def:{en:["mountain recess","canyon"]},hunum:[{kor:"우",def:"산굽이"}]},{id:5979,hanja:"丨",strokes:"1",def:{en:["number one","line","KangXi radical"],kr:["뚫을","곤"]},hunum:[{kor:"곤",def:"뚫을"}]},{id:5980,hanja:"遊",strokes:"13",def:{en:["wander","roam","travel"],kr:["벗","사귈","유"]},hunum:[{kor:"유",def:"놀"}]},{id:5981,hanja:"脤",strokes:"11",def:{en:["raw meat for sacrifice"],kr:["사직제","지낸","고기","신"]},hunum:[{kor:"신",def:"사직제 지낸 고기"}]},{id:5982,hanja:"燿",strokes:"18",def:{en:["shine","dazzle","brilliant","radiant"],kr:["빛날","요"]},hunum:[{kor:"요",def:"비칠"}]},{id:5983,hanja:"盌",strokes:"10",def:{en:["bowl","basin","cup"],kr:["은","바리","완"]},hunum:[{kor:"완",def:"은 바리"}]},{id:5984,hanja:"盍",strokes:"10",def:{en:["what"],kr:["어찌","아니할","합"]},hunum:[{kor:"합",def:"덮을"}]},{id:5985,hanja:"匓",strokes:"13",def:{en:[],kr:["배불러","싫을","구"]},hunum:[{kor:"구",def:"배불러 싫을"}]},{id:5986,hanja:"丩",strokes:"2",def:{en:["to join or connect the vine"],kr:["넝쿨","구"]},hunum:[{kor:"구",def:"넝쿨"}]},{id:5987,hanja:"閹",strokes:"16",def:{en:["castrate","eunuch"],kr:["내시","엄"]},hunum:[{kor:"엄",def:"고자"}]},{id:5988,hanja:"運",strokes:"13",def:{en:["luck","fortune","ship","transport"],kr:["운수","운"]},hunum:[{kor:"운",def:"움직일"}]},{id:5989,hanja:"个",strokes:"3",def:{en:["numerary adjunct","piece","single"],kr:["낱","개"]},hunum:[{kor:"개",def:"낱"}]},{id:5990,hanja:"盎",strokes:"10",def:{en:["cup","pot","bowl","abundant"],kr:["동이","앙"]},hunum:[{kor:"앙",def:"동이"}]},{id:5991,hanja:"遍",strokes:"13",def:{en:["everywhere","all over","throughout"],kr:["두루","편"]},hunum:[{kor:"편",def:"두루"}]},{id:5992,hanja:"簽",strokes:"19",def:{en:["sign","endorse","slip of paper"],kr:["농","첨"]},hunum:[{kor:"첨",def:"농"}]},{id:5993,hanja:"脧",strokes:"11",def:{en:["reduce","contract","reproductive organ of infant"]},hunum:[{kor:"죄",def:"불알"}]},{id:5994,hanja:"匕",strokes:"2",def:{en:["spoon","ladle","knife","dirk"],kr:["비수","비"]},hunum:[{kor:"비",def:"비수"}]},{id:5995,hanja:"嵐",strokes:"12",def:{en:["mountain mist","mountain haze"],kr:["남기","람"]},hunum:[{kor:"람",def:"남기"}]},{id:5996,hanja:"丫",strokes:"3",def:{en:["forked","bifurcation"],kr:["가장귀","아"]},hunum:[{kor:"아",def:"가장귀"}]},{id:5997,hanja:"閻",strokes:"16",def:{en:["village gate","surname"],kr:["저승","염"]},hunum:[{kor:"염",def:"마을"}]},{id:5998,hanja:"化",strokes:"4",def:{en:["change","convert","reform"],kr:["될","화"]},hunum:[{kor:"화",def:"될"}]},{id:5999,hanja:"閼",strokes:"16",def:{en:["block","obstruct","stop up","conceal"]},hunum:[{kor:"알",def:"가로막을"},{kor:"어",def:"한가할"},{kor:"연",def:"흉노 왕비"}]},{id:6000,hanja:"過",strokes:"13",def:{en:["pass","pass through","go across"],kr:["지날","과"]},hunum:[{kor:"과",def:"지날"}]},{id:6001,hanja:"簾",strokes:"19",def:{en:["a blind","screen","curtain"],kr:["발","렴"]},hunum:[{kor:"렴",def:"발"}]},{id:6002,hanja:"閽",strokes:"16",def:{en:["gatekeeper","gate","door"],kr:["문지기","혼"]},hunum:[{kor:"혼",def:"문지기"}]},{id:6003,hanja:"中",strokes:"4",def:{en:["central","center","middle","in the midst of","hit","attain"],kr:["가운데","중"]},hunum:[{kor:"중",def:"가운데"}]},{id:6004,hanja:"北",strokes:"5",def:{en:["north","northern","northward"],kr:["북녘","북"]},hunum:[{kor:"북",def:"북녘"}]},{id:6005,hanja:"嵒",strokes:"12",def:{en:["cliff","soar"],kr:["嵓과","同字"]},hunum:[{kor:"암",def:"바위"}]},{id:6006,hanja:"遏",strokes:"13",def:{en:["stop","suppress","curb","check","a bar"],kr:["막을","알"]},hunum:[{kor:"알",def:"막을"}]},{id:6007,hanja:"脩",strokes:"11",def:{en:["dried meat"],kr:["마를","수"]},hunum:[{kor:"수",def:"포"}]},{id:6008,hanja:"簿",strokes:"19",def:{en:["register","account book","notebook"],kr:["장부","부"]},hunum:[{kor:"박",def:"잠박"},{kor:"부",def:"장부"}]},{id:6009,hanja:"盒",strokes:"11",def:{en:["small box or case","casket"],kr:["합","합"]},hunum:[{kor:"합",def:"소반 뚜껑"}]},{id:6010,hanja:"遐",strokes:"13",def:{en:["afar","distant","old","advanced in"],kr:["멀","하"]},hunum:[{kor:"하",def:"멀"}]},{id:6011,hanja:"匘",strokes:"11",def:{en:["the brain"],kr:["살찐","모양","뇌"]},hunum:[{kor:"뇌",def:"살찐 모양"}]},{id:6012,hanja:"嵓",strokes:"12",def:{en:[],kr:["가파를","암"]},hunum:[{kor:"암",def:"바위"}]},{id:6013,hanja:"丮",strokes:"4",def:{en:["catch"],kr:["잡을","극"]},hunum:[{kor:"극",def:"잡을"}]},{id:6014,hanja:"閾",strokes:"16",def:{en:["threshold","separated","confined"],kr:["문지방","역"]},hunum:[{kor:"역",def:"문지방"}]},{id:6015,hanja:"遑",strokes:"13",def:{en:["leisure","leisurely","hurry about"],kr:["허둥거릴","황"]},hunum:[{kor:"황",def:"허둥거릴"}]},{id:6016,hanja:"脫",strokes:"11",def:{en:["take off","peel off","strip"],kr:["더딜","태"]},hunum:[{kor:"탈",def:"벗어날"},{kor:"태",def:"천천할"}]},{id:6017,hanja:"匙",strokes:"11",def:{en:["spoon","surname"],kr:["열쇠","시"]},hunum:[{kor:"시",def:"숟가락"}]},{id:6018,hanja:"嵔",strokes:"12",def:{en:[],kr:["산","높을","외"]},hunum:[{kor:"외",def:"산이름"}]},{id:6019,hanja:"警",strokes:"20",def:{en:["guard","watch","alert","alarm"],kr:["경계할","경"]},hunum:[{kor:"경",def:"경계할"}]},{id:6020,hanja:"遒",strokes:"13",def:{en:["strong","unyielding","forceful"],kr:["다가설","주"]},hunum:[{kor:"주",def:"다가설"}]},{id:6021,hanja:"所",strokes:"8",def:{en:["place","location","numerary adjunct"],kr:["얼마","소"]},hunum:[{kor:"소",def:"바"}]},{id:6022,hanja:"匚",strokes:"2",def:{en:["box","KangXi radical"],kr:["상자","방"]},hunum:[{kor:"방",def:"상자"}]},{id:6023,hanja:"丰",strokes:"4",def:{en:["abundant","lush","bountiful","plenty"],kr:["예쁠","봉"]},hunum:[{kor:"봉",def:"예쁠"}]},{id:6024,hanja:"盔",strokes:"11",def:{en:["helmet","bowl","basin"],kr:["바리","회"]},hunum:[{kor:"회",def:"바리"}]},{id:6025,hanja:"扁",strokes:"9",def:{en:["flat","tablet","signboard"],kr:["거룻배","편"]},hunum:[{kor:"변",def:"현판"},{kor:"편",def:"특별할"}]},{id:6026,hanja:"匛",strokes:"5",def:{en:[],kr:["널","구"]},hunum:[{kor:"구",def:"관"}]},{id:6027,hanja:"丱",strokes:"5",def:{en:["child","ore"],kr:["쌍상투","관"]},hunum:[{kor:"관",def:"쌍상투"}]},{id:6028,hanja:"道",strokes:"13",def:{en:["path","road","street","method","way"],kr:["길","도"]},hunum:[{kor:"도",def:"길"}]},{id:6029,hanja:"枯",strokes:"9",def:{en:["dried out","withered","decayed"],kr:["마를","고"]},hunum:[{kor:"고",def:"마를"}]},{id:6030,hanja:"枰",strokes:"9",def:{en:["smooth board","chessboard","chess"],kr:["회양목","평"]},hunum:[{kor:"평",def:"장기판"}]},{id:6031,hanja:"匜",strokes:"5",def:{en:["basin","container for wine"],kr:["술잔","이"]},hunum:[{kor:"이",def:"손대야"}]},{id:6032,hanja:"串",strokes:"7",def:{en:["string","relatives","conspire"],kr:["꿸","천"]},hunum:[{kor:"곶",def:"땅이름"},{kor:"관",def:"익힐"},{kor:"천",def:"꿸"}]},{id:6033,hanja:"達",strokes:"13",def:{en:["arrive at","reach","intelligent"],kr:["통달할","달"]},hunum:[{kor:"달",def:"통달할"}]},{id:6034,hanja:"脯",strokes:"11",def:{en:["dried meat","preserved fruits"],kr:["포","포"]},hunum:[{kor:"포",def:"포"}]},{id:6035,hanja:"丳",strokes:"8",def:{en:["spit","grill","a skewer"],kr:["꼬챙이","찬"]},hunum:[{kor:"찬",def:"꼬챙이"}]},{id:6036,hanja:"匝",strokes:"5",def:{en:["full circle","encircle"],kr:["돌","잡"]},hunum:[{kor:"잡",def:"돌"}]},{id:6037,hanja:"違",strokes:"13",def:{en:["disobey","violate","defy","be apart from"],kr:["되돌아올","위"]},hunum:[{kor:"위",def:"어길"}]},{id:6038,hanja:"盖",strokes:"11",def:{en:["cover","hide","protect"],kr:["蓋과","同字"]},hunum:[{kor:"개",def:"덮을"},{kor:"합",def:"이엉 덮을"}]},{id:6039,hanja:"枱",strokes:"9",def:{en:["a table","desk"]},hunum:[{kor:"대",def:"대"},{kor:"사",def:"쟁기"},{kor:"이",def:"쟁기"}]},{id:6040,hanja:"匞",strokes:"5",def:{en:[],kr:["匠의","本字"]},hunum:[{kor:"장",def:"장인"}]},{id:6041,hanja:"扃",strokes:"9",def:{en:["a door bar placed outside a door"],kr:["빗장","경"]},hunum:[{kor:"경",def:"빗장"}]},{id:6042,hanja:"脰",strokes:"11",def:{en:["the neck"],kr:["목","두"]},hunum:[{kor:"두",def:"목"}]},{id:6043,hanja:"譫",strokes:"20",def:{en:["talkative","incoherent talk"],kr:["헛소리","섬"]},hunum:[{kor:"섬",def:"헛소리"}]},{id:6044,hanja:"枲",strokes:"9",def:{en:["male nettle"],kr:["도꼬마리","시"]},hunum:[{kor:"시",def:"수삼"}]},{id:6045,hanja:"脱",strokes:"11",def:{en:["take off"],kr:["脫와","同字"]},hunum:[{kor:"탈",def:"벗을"},{kor:"태",def:"기뻐할"}]},{id:6046,hanja:"匟",strokes:"6",def:{en:["divan for two persons"],kr:["평상","강"]},hunum:[{kor:"강",def:"평상"}]},{id:6047,hanja:"嵚",strokes:"12",def:{en:["lofty","towering"],kr:["산","솟을","금"]},hunum:[{kor:"금",def:"산 솟을"}]},{id:6048,hanja:"譬",strokes:"20",def:{en:["metaphor","simile","example"],kr:["비유할","비"]},hunum:[{kor:"비",def:"비유할"}]},{id:6049,hanja:"枳",strokes:"9",def:{en:["trifoliate orange","hedge thorn"],kr:["탱자나무","지"]},hunum:[{kor:"기",def:"해할"},{kor:"지",def:"탱자나무"}]},{id:6050,hanja:"丵",strokes:"10",def:{en:["thick"],kr:["풀이","우거질","착"]},hunum:[{kor:"착",def:"풀이 우거질"}]},{id:6051,hanja:"匠",strokes:"6",def:{en:["craftsman","artisan","workman"],kr:["장인","장"]},hunum:[{kor:"장",def:"장인"}]},{id:6052,hanja:"沁",strokes:"7",def:{en:["soak into","seep in","percolate"],kr:["스며들","심"]},hunum:[{kor:"심",def:"스며들"}]},{id:6053,hanja:"盙",strokes:"12",def:{en:["a basket","square outside and round inside","used to hold boiled grain in State worship"],kr:["簠의","本字"]},hunum:[{kor:"보",def:"제기 이름"}]},{id:6054,hanja:"蘀",strokes:"22",def:{en:["falling leaves and barks"],kr:["마를","탁"]},hunum:[{kor:"탁",def:"떨어질"}]},{id:6055,hanja:"丶",strokes:"1",def:{en:["dot","KangXi radical"],kr:["심지","주"]},hunum:[{kor:"주",def:"심지"}]},{id:6056,hanja:"沂",strokes:"7",def:{en:["river in Southeast Shandong"],kr:["물","이름","기"]},hunum:[{kor:"기",def:"물 이름"}]},{id:6057,hanja:"匡",strokes:"6",def:{en:["correct","restore","revise"],kr:["바룰","광"]},hunum:[{kor:"광",def:"바룰"}]},{id:6058,hanja:"遘",strokes:"14",def:{en:["to meet","to come across"],kr:["만날","구"]},hunum:[{kor:"구",def:"만날"}]},{id:6059,hanja:"脳",strokes:"11",def:{en:["brain"],kr:["머리골","뇌"]},hunum:[{kor:"뇌",def:"머리골"}]},{id:6060,hanja:"丷",strokes:"2",def:{en:["kwukyel"],kr:["구결","하"]},hunum:[{kor:"하",def:"구결"}]},{id:6061,hanja:"扇",strokes:"10",def:{en:["fan","door panel"],kr:["사립문","선"]},hunum:[{kor:"선",def:"사립문"}]},{id:6062,hanja:"沃",strokes:"7",def:{en:["water","irrigate","fertile","rich"],kr:["아리따울","옥"]},hunum:[{kor:"옥",def:"기름질"}]},{id:6063,hanja:"遙",strokes:"14",def:{en:["far away","distant","remote"],kr:["노닐","요"]},hunum:[{kor:"요",def:"멀"}]},{id:6064,hanja:"骕",strokes:"11",def:{en:["name of a famous horse"],kr:["驌과","同字"]},hunum:[{kor:"숙",def:"말 이름"}]},{id:6065,hanja:"譯",strokes:"20",def:{en:["translate","decode","encode"],kr:["번역할","역"]},hunum:[{kor:"역",def:"통변할"}]},{id:6066,hanja:"盛",strokes:"12",def:{en:["abundant","flourishing","contain","fill"],kr:["많을","성"]},hunum:[{kor:"성",def:"담을"}]},{id:6067,hanja:"架",strokes:"9",def:{en:["rack","stand","prop","prop up"],kr:["시렁","가"]},hunum:[{kor:"가",def:"시렁"}]},{id:6068,hanja:"丸",strokes:"3",def:{en:["small round object","pellet","pill"],kr:["알","환"]},hunum:[{kor:"환",def:"알"}]},{id:6069,hanja:"扈",strokes:"11",def:{en:["escort","retinue","insolent"],kr:["뒤따를","호"]},hunum:[{kor:"호",def:"뒤따를"}]},{id:6070,hanja:"沄",strokes:"7",def:{en:["billows"],kr:["끓을","운"]},hunum:[{kor:"운",def:"물 콸콸 흐를"}]},{id:6071,hanja:"匣",strokes:"7",def:{en:["small box","case","coffer"],kr:["상자","갑"]},hunum:[{kor:"갑",def:"궤"}]},{id:6072,hanja:"脵",strokes:"11",def:{en:["thighs","haunches","rump","share"]},hunum:[{kor:"오",def:"오"}]},{id:6073,hanja:"議",strokes:"20",def:{en:["consult","talk over","discuss"],kr:["꾀할","의"]},hunum:[{kor:"의",def:"말할"}]},{id:6074,hanja:"蘂",strokes:"22",def:{en:["stamen or pistil"],kr:["蕊와","同字"]},hunum:[{kor:"예",def:"꽃술"}]},{id:6075,hanja:"盜",strokes:"12",def:{en:["rob","steal","thief","bandit"],kr:["도둑","도"]},hunum:[{kor:"도",def:"도둑"}]},{id:6076,hanja:"枷",strokes:"9",def:{en:["cangue scaffold"],kr:["도리깨채","가"]},hunum:[{kor:"가",def:"목칼"}]},{id:6077,hanja:"扉",strokes:"12",def:{en:["door panel"],kr:["문짝","비"]},hunum:[{kor:"비",def:"문짝"}]},{id:6078,hanja:"沅",strokes:"7",def:{en:["name of a river in western Hunan that flows into Dongting lake"],kr:["물","이름","원"]},hunum:[{kor:"원",def:"물 이름"}]},{id:6079,hanja:"丹",strokes:"4",def:{en:["cinnabar","vermilion"],kr:["붉을","단"]},hunum:[{kor:"단",def:"붉을"}]},{id:6080,hanja:"遛",strokes:"14",def:{en:["take walk","stroll"],kr:["머무를","류"]},hunum:[{kor:"류",def:"머무를"}]},{id:6081,hanja:"譱",strokes:"20",def:{en:[],kr:["善의","古字"]},hunum:[{kor:"선",def:"착할"}]},{id:6082,hanja:"沆",strokes:"7",def:{en:["a ferry","fog","flowing"],kr:["이슬","항"]},hunum:[{kor:"항",def:"큰 물"}]},{id:6083,hanja:"扊",strokes:"12",def:{en:["upright bar for fastening door"],kr:["문","빗장","염"]},hunum:[{kor:"염",def:"문 빗장"}]},{id:6084,hanja:"匥",strokes:"7",def:{en:[],kr:["대그릇","변"]},hunum:[{kor:"변",def:"관갑"}]},{id:6085,hanja:"遜",strokes:"14",def:{en:["humble","modest","yield"],kr:["사양할","손"]},hunum:[{kor:"손",def:"순할"}]},{id:6086,hanja:"蘄",strokes:"22",def:{en:["variety of artemisia seek"],kr:["풀","이름","기"]},hunum:[{kor:"기",def:"풀 이름"}]},{id:6087,hanja:"盞",strokes:"13",def:{en:["small cup or container","classifier for lamps","etc"],kr:["작은","술잔","잔"]},hunum:[{kor:"잔",def:"작은 술잔"}]},{id:6088,hanja:"枸",strokes:"9",def:{en:["kind of aspen found in Sichuan"],kr:["구기자","구"]},hunum:[{kor:"구",def:"구기자"}]},{id:6089,hanja:"主",strokes:"5",def:{en:["master","chief owner","host","lord"],kr:["주인","주"]},hunum:[{kor:"주",def:"주인"}]},{id:6090,hanja:"手",strokes:"4",def:{en:["hand"],kr:["칠","수"]},hunum:[{kor:"수",def:"손"}]},{id:6091,hanja:"沇",strokes:"7",def:{en:["flowing and engulfing","brimming"],kr:["물","졸졸","흐를","연"]},hunum:[{kor:"연",def:"물 졸졸 흐를"}]},{id:6092,hanja:"遝",strokes:"14",def:{en:["mixed","abundant","assorted"],kr:["가다가설","답"]},hunum:[{kor:"답",def:"가다가설"}]},{id:6093,hanja:"盟",strokes:"13",def:{en:["swear","oath","covenant","alliance"],kr:["맹세할","맹"]},hunum:[{kor:"맹",def:"맹세할"}]},{id:6094,hanja:"遞",strokes:"14",def:{en:["hand over","deliver","substitute"],kr:["갈마들","체"]},hunum:[{kor:"체",def:"갈마들"}]},{id:6095,hanja:"脹",strokes:"12",def:{en:["swell","inflate","expand"],kr:["배부를","창"]},hunum:[{kor:"창",def:"배부를"}]},{id:6096,hanja:"丼",strokes:"5",def:{en:["bowl of food","well"],kr:["샘","정"]},hunum:[{kor:"정",def:"우물"}]},{id:6097,hanja:"沈",strokes:"7",def:{en:["sink","submerge","addicted to","name"],kr:["고요할","침"]},hunum:[{kor:"심",def:"성씨"},{kor:"침",def:"장마물"}]},{id:6098,hanja:"譴",strokes:"21",def:{en:["reprimand","scold","abuse"],kr:["귀양갈","견"]},hunum:[{kor:"견",def:"꾸짖을"}]},{id:6099,hanja:"蘆",strokes:"22",def:{en:["rushes","reeds"],kr:["꼭두서니","려"]},hunum:[{kor:"로",def:"갈대"},{kor:"여",def:"꼭두서니"}]},{id:6100,hanja:"匧",strokes:"9",def:{en:["a trunk","a portfolio"],kr:["꿰맬","협"]},hunum:[{kor:"협",def:"옷상자"}]},{id:6101,hanja:"盡",strokes:"14",def:{en:["exhaust","use up","deplete"],kr:["다할","진"]},hunum:[{kor:"진",def:"다할"}]},{id:6102,hanja:"遟",strokes:"14",def:{en:["late","tardy","slow","delay"],kr:["더딜","지"]},hunum:[{kor:"지",def:"더딜"}]},{id:6103,hanja:"才",strokes:"3",def:{en:["talent","ability","just","only"],kr:["바탕","재"]},hunum:[{kor:"재",def:"재주"}]},{id:6104,hanja:"沉",strokes:"7",def:{en:["sink","submerge","addicted to"],kr:["沈의","俗字"]},hunum:[{kor:"심",def:"성씨"},{kor:"침",def:"잠길"}]},{id:6105,hanja:"脺",strokes:"12",def:{en:[],kr:["머리덜미","수"]},hunum:[{kor:"수",def:"얼굴 윤택할"}]},{id:6106,hanja:"蘇",strokes:"22",def:{en:["revive","resurrect","a species of thyme","transliteration of"],kr:["성씨","소"]},hunum:[{kor:"소",def:"차조기"}]},{id:6107,hanja:"扎",strokes:"4",def:{en:["pull up","pierce","struggle free"],kr:["뺄","찰"]},hunum:[{kor:"찰",def:"뺄"}]},{id:6108,hanja:"遠",strokes:"14",def:{en:["distant","remote","far","profound"],kr:["심오할","원"]},hunum:[{kor:"원",def:"멀"}]},{id:6109,hanja:"護",strokes:"21",def:{en:["protect","guard","defend","shelter"],kr:["감쌀","호"]},hunum:[{kor:"호",def:"보호할"}]},{id:6110,hanja:"丿",strokes:"1",def:{en:["line","KangXi radical"],kr:["삐침","별"]},hunum:[{kor:"별",def:"삐침"}]},{id:6111,hanja:"遡",strokes:"14",def:{en:["go upstream","trace source","formerly"],kr:["하소연할","소"]},hunum:[{kor:"소",def:"거스를"}]},{id:6112,hanja:"監",strokes:"14",def:{en:["supervise","control","direct"],kr:["감옥","감"]},hunum:[{kor:"감",def:"거느릴"}]},{id:6113,hanja:"匪",strokes:"10",def:{en:["bandits","robbers","gangsters"],kr:["대상자","비"]},hunum:[{kor:"분",def:"나눌"},{kor:"비",def:"대상자"}]},{id:6114,hanja:"蘊",strokes:"22",def:{en:["collect","gather","store","profound"],kr:["쌓일","온"]},hunum:[{kor:"온",def:"마름"}]},{id:6115,hanja:"盤",strokes:"15",def:{en:["tray","plate","dish","examine"],kr:["소반","반"]},hunum:[{kor:"반",def:"소반"}]},{id:6116,hanja:"枾",strokes:"9",def:{en:["persimmon"],kr:["柹의","本字"]},hunum:[{kor:"시",def:"감나무"}]},{id:6117,hanja:"扑",strokes:"5",def:{en:["pound","beat","strike","attack"],kr:["칠","복"]},hunum:[{kor:"복",def:"칠"}]},{id:6118,hanja:"沌",strokes:"7",def:{en:["chaotic","confused","turbid","murky"],kr:["기름","덩어리","돈"]},hunum:[{kor:"돈",def:"기름 덩어리"}]},{id:6119,hanja:"遣",strokes:"14",def:{en:["send","dispatch","send off","exile"],kr:["견전제","견"]},hunum:[{kor:"견",def:"보낼"}]},{id:6120,hanja:"蘋",strokes:"22",def:{en:["apple"],kr:["네가래","빈"]},hunum:[{kor:"빈",def:"네가래"}]},{id:6121,hanja:"盥",strokes:"16",def:{en:["wash"],kr:["대야","관"]},hunum:[{kor:"관",def:"대야"}]},{id:6122,hanja:"沍",strokes:"7",def:{en:["freezing","stopped up","closed off"],kr:["冱의","譌字"]},hunum:[{kor:"호",def:"얼"}]},{id:6123,hanja:"扒",strokes:"5",def:{en:["scratch","dig up","crawl","crouch"],kr:["뺄","배"]},hunum:[{kor:"배",def:"뺄"}]},{id:6124,hanja:"匬",strokes:"11",def:{en:[],kr:["곡식","셈하는","단위","휘","유"]},hunum:[{kor:"유",def:"곡식 셈하는 단위 휘"}]},{id:6125,hanja:"脾",strokes:"12",def:{en:["spleen","pancreas","disposition"],kr:["지라","비"]},hunum:[{kor:"비",def:"지라"}]},{id:6126,hanja:"打",strokes:"5",def:{en:["strike","hit","beat","fight","attack"],kr:["때릴","타"]},hunum:[{kor:"정",def:"칠"},{kor:"타",def:"때릴"}]},{id:6127,hanja:"匭",strokes:"11",def:{en:["small box","chest","casket"],kr:["갑","궤"]},hunum:[{kor:"궤",def:"갑"}]},{id:6128,hanja:"嵩",strokes:"13",def:{en:["high","lofty","one of the","situated in Hunan"],kr:["산이름","숭"]},hunum:[{kor:"숭",def:"높을"}]},{id:6129,hanja:"盧",strokes:"16",def:{en:["cottage","hut","surname","black"],kr:["밥그릇","로"]},hunum:[{kor:"로",def:"밥그릇"}]},{id:6130,hanja:"匯",strokes:"13",def:{en:["a concourse","to flow together","gather together"],kr:["滙"]},hunum:[{kor:"회",def:"물돌"}]},{id:6131,hanja:"払",strokes:"5",def:{en:["shake off","brush away","dust"],kr:["拂의","略字"]},hunum:[{kor:"불",def:"떨칠"},{kor:"필",def:"떨칠"}]},{id:6132,hanja:"沐",strokes:"7",def:{en:["bathe","cleanse","wash","shampoo"],kr:["머리감을","목"]},hunum:[{kor:"목",def:"머리감을"}]},{id:6133,hanja:"譽",strokes:"21",def:{en:["fame","reputation","praise"],kr:["즐길","예"]},hunum:[{kor:"예",def:"칭찬할"}]},{id:6134,hanja:"盪",strokes:"17",def:{en:["to toss about","to swing","to rock"],kr:["뭍","배질할","탕"]},hunum:[{kor:"탕",def:"씻을"}]},{id:6135,hanja:"匰",strokes:"14",def:{en:[],kr:["신주독","단"]},hunum:[{kor:"단",def:"신주독"}]},{id:6136,hanja:"嵬",strokes:"13",def:{en:["high","rugged","rocky","precipitous"],kr:["산","울뚝질뚝할","외"]},hunum:[{kor:"외",def:"산 뾰족할"}]},{id:6137,hanja:"遨",strokes:"15",def:{en:["ramble","roam","travel for pleasure"],kr:["노닐","오"]},hunum:[{kor:"오",def:"노닐"}]},{id:6138,hanja:"譿",strokes:"22",def:{en:[],kr:["슬기로울","혜"]},hunum:[{kor:"혜",def:"슬기로울"}]},{id:6139,hanja:"適",strokes:"15",def:{en:["match","comfortable","just"],kr:["갈","척"]},hunum:[{kor:"적",def:"맞갖을"},{kor:"척",def:"갈"}]},{id:6140,hanja:"扗",strokes:"6",def:{en:[]},hunum:[{kor:"재",def:"있을"}]},{id:6141,hanja:"沒",strokes:"7",def:{en:["not","have not","none","to drown","sink"],kr:["가라","앉을","몰"]},hunum:[{kor:"몰",def:"가라 앉을"}]},{id:6142,hanja:"匱",strokes:"14",def:{en:["to lack"],kr:["갑","궤"]},hunum:[{kor:"궤",def:"갑"}]},{id:6143,hanja:"托",strokes:"6",def:{en:["to hold up with palm","to support","rely on"],kr:["차반","탁"]},hunum:[{kor:"탁",def:"밀칠"}]},{id:6144,hanja:"沓",strokes:"8",def:{en:["connected","joined","repeated"],kr:["거듭","답"]},hunum:[{kor:"답",def:"거듭"}]},{id:6145,hanja:"匲",strokes:"14",def:{en:[],kr:["경대","렴"]},hunum:[{kor:"렴",def:"경대"}]},{id:6146,hanja:"盬",strokes:"18",def:{en:["salt pit","leisure","pot","drink"],kr:["염지","고"]},hunum:[{kor:"고",def:"염지"}]},{id:6147,hanja:"嵯",strokes:"13",def:{en:["high","towering","irregular","rugged"],kr:["산","울뚝질뚝할","치"]},hunum:[{kor:"차",def:"우뚝 솟을"},{kor:"치",def:"산 울뚝질뚝할"}]},{id:6148,hanja:"沔",strokes:"7",def:{en:["flood","overflowing"],kr:["물","흐를","면"]},hunum:[{kor:"면",def:"물 흐를"}]},{id:6149,hanja:"匳",strokes:"15",def:{en:["ladies toilet case with mirror"],kr:["경대","렴"]},hunum:[{kor:"렴",def:"경대"}]},{id:6150,hanja:"堀",strokes:"11",def:{en:["cave","hole"],kr:["굴뚝","굴"]},hunum:[{kor:"굴",def:"굴뚝"}]},{id:6151,hanja:"沕",strokes:"7",def:{en:["deep"],kr:["숨길","물"]},hunum:[{kor:"물",def:"아득할"}]},{id:6152,hanja:"匴",strokes:"16",def:{en:[],kr:["관상자","산"]},hunum:[{kor:"산",def:"관상자"}]},{id:6153,hanja:"遬",strokes:"15",def:{en:[],kr:["줄어들","속"]},hunum:[{kor:"속",def:"공손할"}]},{id:6154,hanja:"目",strokes:"5",def:{en:["eye","look","see","division","topic"],kr:["눈","목"]},hunum:[{kor:"목",def:"눈"}]},{id:6155,hanja:"沖",strokes:"7",def:{en:["pour","infuse","steep","wash away"],kr:["어릴","충"]},hunum:[{kor:"충",def:"깊을"}]},{id:6156,hanja:"遭",strokes:"15",def:{en:["come across","meet with","encounter"],kr:["만날","조"]},hunum:[{kor:"조",def:"만날"}]},{id:6157,hanja:"熀",strokes:"14",def:{en:["the blaze of fire","dazzling"],kr:["불빛","이글이글할","녑"]},hunum:[{kor:"엽",def:"불빛 이글이글할"}]},{id:6158,hanja:"扛",strokes:"6",def:{en:["carry on shoulders","lift"],kr:["마주","들","강"]},hunum:[{kor:"강",def:"마주 들"}]},{id:6159,hanja:"匵",strokes:"17",def:{en:["case","casket"],kr:["손궤","독"]},hunum:[{kor:"독",def:"손궤"}]},{id:6160,hanja:"堂",strokes:"11",def:{en:["hall","government office"],kr:["집","당"]},hunum:[{kor:"당",def:"집"}]},{id:6161,hanja:"骨",strokes:"10",def:{en:["bone","skeleton","frame","framework"],kr:["뼈","골"]},hunum:[{kor:"골",def:"뼈"}]},{id:6162,hanja:"遮",strokes:"15",def:{en:["cover","shield","protect"],kr:["막을","차"]},hunum:[{kor:"차",def:"막을"}]},{id:6163,hanja:"匶",strokes:"19",def:{en:[],kr:["柩의","古字"]},hunum:[{kor:"구",def:"널"}]},{id:6164,hanja:"嵱",strokes:"13",def:{en:[],kr:["봉우리","쭝굿쭝굿할","용"]},hunum:[{kor:"용",def:"봉우리 쭝굿쭝굿할"}]},{id:6165,hanja:"堃",strokes:"11",def:{en:["compliance","obedience","female"],kr:["따","곤"]},hunum:[{kor:"곤",def:"따"}]},{id:6166,hanja:"沘",strokes:"7",def:{en:["name of a river"],kr:["강","이름","비"]},hunum:[{kor:"비",def:"강 이름"}]},{id:6167,hanja:"遯",strokes:"15",def:{en:["deceive","hide","conceal","flee"],kr:["달아날","둔"]},hunum:[{kor:"둔",def:"달아날"}]},{id:6168,hanja:"骪",strokes:"13",def:{en:["crooked bones"]},hunum:[{kor:"위",def:"굽을"}]},{id:6169,hanja:"蘖",strokes:"23",def:{en:["stump","sprout"],kr:["그루터기","얼"]},hunum:[{kor:"얼",def:"그루터기"}]},{id:6170,hanja:"盱",strokes:"8",def:{en:["wide open eyes","to gaze in astonishment"]},hunum:[{kor:"우",def:"쳐다볼"}]},{id:6171,hanja:"匸",strokes:"2",def:{en:["box","KangXi radical"],kr:["덮을","혜"]},hunum:[{kor:"혜",def:"감출"}]},{id:6172,hanja:"扞",strokes:"6",def:{en:["ward off","withstand","resist"],kr:["막을","한"]},hunum:[{kor:"한",def:"막을"}]},{id:6173,hanja:"沙",strokes:"7",def:{en:["sand","gravel","pebbles","granulated"],kr:["모래","사"]},hunum:[{kor:"사",def:"모래"}]},{id:6174,hanja:"堅",strokes:"11",def:{en:["hard","strong","firm","resolute"],kr:["반드시","견"]},hunum:[{kor:"견",def:"굳을"}]},{id:6175,hanja:"骫",strokes:"13",def:{en:[]},hunum:[{kor:"위",def:"굽을"}]},{id:6176,hanja:"蘗",strokes:"23",def:{en:["stump","sprout"],kr:["황경나무","벽"]},hunum:[{kor:"벽",def:"황경나무"}]},{id:6177,hanja:"盲",strokes:"8",def:{en:["blind","unperceptive","shortsighted"],kr:["소경","맹"]},hunum:[{kor:"맹",def:"소경"}]},{id:6178,hanja:"堆",strokes:"11",def:{en:["heap","pile","crowd","pile up"],kr:["언덕","퇴"]},hunum:[{kor:"퇴",def:"흙무더기 퇴 놓을"}]},{id:6179,hanja:"沚",strokes:"7",def:{en:["islet in stream","small sandbar"],kr:["물가","지"]},hunum:[{kor:"지",def:"물가"}]},{id:6180,hanja:"節",strokes:"13",def:{en:["knot","node","joint","section"],kr:["절개","절"]},hunum:[{kor:"절",def:"마디"}]},{id:6181,hanja:"熄",strokes:"14",def:{en:["put out","extinguish","quash"],kr:["마칠","식"]},hunum:[{kor:"식",def:"불 꺼질"}]},{id:6182,hanja:"匹",strokes:"4",def:{en:["bolt of cloth","counter for horses"],kr:["무리","필"]},hunum:[{kor:"목",def:"집 오리"},{kor:"필",def:"짝"}]},{id:6183,hanja:"蘘",strokes:"23",def:{en:["a kind of wild ginger"],kr:["양하","양"]},hunum:[{kor:"양",def:"양하"}]},{id:6184,hanja:"篁",strokes:"15",def:{en:["bamboo grove","bamboo"],kr:["대숲","황"]},hunum:[{kor:"황",def:"대숲"}]},{id:6185,hanja:"沛",strokes:"7",def:{en:["abundant","full","copious","sudden"],kr:["넉넉할","패"]},hunum:[{kor:"패",def:"둥둥 뜰"}]},{id:6186,hanja:"遲",strokes:"16",def:{en:["late","tardy","slow","delay"],kr:["늦을","지"]},hunum:[{kor:"지",def:"늦을"}]},{id:6187,hanja:"熅",strokes:"14",def:{en:["smooth out","iron out"],kr:["숯불","온"]},hunum:[{kor:"온",def:"서린 연기"}]},{id:6188,hanja:"区",strokes:"4",def:{en:["area","district","region","ward"],kr:["區와","同字"]},hunum:[{kor:"구",def:"구분할"},{kor:"우",def:"숨길"}]},{id:6189,hanja:"堇",strokes:"11",def:{en:["yellow loam","clay","season","few"],kr:["노란진흙","근"]},hunum:[{kor:"근",def:"노란진흙"}]},{id:6190,hanja:"直",strokes:"8",def:{en:["straight","erect","vertical"],kr:["곧을","직"]},hunum:[{kor:"직",def:"곧을"}]},{id:6191,hanja:"医",strokes:"7",def:{en:["cure","heal","doctor","medical"],kr:["醫의","略字"]},hunum:[{kor:"예",def:"화살통"},{kor:"의",def:"의원"}]},{id:6192,hanja:"堈",strokes:"11",def:{en:["earthen jug","crock","cistern"],kr:["밭","두둑","강"]},hunum:[{kor:"강",def:"언덕"}]},{id:6193,hanja:"蘚",strokes:"23",def:{en:["moss","lichen"],kr:["이끼","선"]},hunum:[{kor:"선",def:"이끼"}]},{id:6194,hanja:"熇",strokes:"14",def:{en:["bake"],kr:["불김","효"]},hunum:[{kor:"혹",def:"뜨거울"},{kor:"효",def:"불김"}]},{id:6195,hanja:"骯",strokes:"14",def:{en:["dirty"],kr:["꼿꼿할","항"]},hunum:[{kor:"항",def:"꼿꼿할"}]},{id:6196,hanja:"匼",strokes:"8",def:{en:[]},hunum:[{kor:"갑",def:"두를"},{kor:"암",def:"아첨할"},{kor:"압",def:"두건 이름"}]},{id:6197,hanja:"堉",strokes:"11",def:{en:["ground","fertile land"],kr:["기름진","땅","육"]},hunum:[{kor:"육",def:"기름진 땅"}]},{id:6198,hanja:"熈",strokes:"14",def:{en:["bright","splendid","glorious"],kr:["熙와","同字"]},hunum:[{kor:"희",def:"빛날"}]},{id:6199,hanja:"骰",strokes:"14",def:{en:["die","dice"],kr:["주사위","투"]},hunum:[{kor:"투",def:"주사위"}]},{id:6200,hanja:"遵",strokes:"16",def:{en:["obey","comply with","follow","honor"],kr:["좇을","준"]},hunum:[{kor:"준",def:"좇을"}]},{id:6201,hanja:"範",strokes:"15",def:{en:["pattern","model","rule","law"],kr:["법","범"]},hunum:[{kor:"범",def:"법"}]},{id:6202,hanja:"匽",strokes:"9",def:{en:["to hide","to secrete","to repress","to bend"],kr:["한데","뒷간","언"]},hunum:[{kor:"언",def:"숨길"}]},{id:6203,hanja:"堊",strokes:"11",def:{en:["white earth","to daub with white mud"],kr:["흰","흙","악"]},hunum:[{kor:"악",def:"흰 흙"}]},{id:6204,hanja:"匾",strokes:"11",def:{en:["flat","round split"]},hunum:[{kor:"편",def:"납작할"}]},{id:6205,hanja:"熉",strokes:"14",def:{en:[],kr:["누른","빛","운"]},hunum:[{kor:"운",def:"누른 빛"}]},{id:6206,hanja:"扣",strokes:"6",def:{en:["knock","strike","rap","tap","button"],kr:["두드릴","구"]},hunum:[{kor:"구",def:"두드릴"}]},{id:6207,hanja:"堋",strokes:"11",def:{en:["bury"]},hunum:[{kor:"붕",def:"묻을"}]},{id:6208,hanja:"遶",strokes:"16",def:{en:["entwine","wind around","surround"],kr:["둘릴","요"]},hunum:[{kor:"요",def:"둘릴"}]},{id:6209,hanja:"遷",strokes:"16",def:{en:["move","shift","change","transfer"],kr:["옮길","천"]},hunum:[{kor:"천",def:"옮길"}]},{id:6210,hanja:"篆",strokes:"15",def:{en:["seal script","seal","official stamp"],kr:["문체이름","전"]},hunum:[{kor:"전",def:"문체이름"}]},{id:6211,hanja:"熊",strokes:"14",def:{en:["a bear","brilliant","bright","surname"],kr:["빛날","웅"]},hunum:[{kor:"웅",def:"곰"}]},{id:6212,hanja:"匿",strokes:"11",def:{en:["hide","go into hiding"],kr:["숨쉴","닉"]},hunum:[{kor:"닉",def:"숨쉴"}]},{id:6213,hanja:"相",strokes:"9",def:{en:["mutual","reciprocal","each other"],kr:["서로","상"]},hunum:[{kor:"상",def:"서로"}]},{id:6214,hanja:"篇",strokes:"15",def:{en:["chapter","section","essay","article"],kr:["편차할","편"]},hunum:[{kor:"편",def:"책"}]},{id:6215,hanja:"盹",strokes:"9",def:{en:["to doze","to nap","to nod"],kr:["졸","순"]},hunum:[{kor:"순",def:"눈 감을"}]},{id:6216,hanja:"沢",strokes:"7",def:{en:["marsh","swamp","grace","brilliance"],kr:["澤의","略字"]},hunum:[{kor:"석",def:"못"},{kor:"택",def:"못"}]},{id:6217,hanja:"選",strokes:"16",def:{en:["choose","select","elect","election"],kr:["가릴","선"]},hunum:[{kor:"선",def:"가릴"}]},{id:6218,hanja:"盻",strokes:"9",def:{en:["glare","stare"],kr:["돌아볼","혜"]},hunum:[{kor:"혜",def:"흘겨볼"}]},{id:6219,hanja:"築",strokes:"16",def:{en:["build","erect","building"],kr:["쌓을","축"]},hunum:[{kor:"축",def:"다질"}]},{id:6220,hanja:"骶",strokes:"15",def:{en:["coccyx"],kr:["궁둥이","제"]},hunum:[{kor:"저",def:"꽁무니 끝"},{kor:"제",def:"궁둥이"}]},{id:6221,hanja:"扨",strokes:"6",def:{en:["pick up with fork or pincers"],kr:["그러하나","인"]},hunum:[{kor:"인",def:"그러하나"}]},{id:6222,hanja:"遺",strokes:"16",def:{en:["lose","articles lost","omit"],kr:["끼칠","유"]},hunum:[{kor:"유",def:"잃어버릴"}]},{id:6223,hanja:"蘢",strokes:"22",def:{en:["tall grass","water"],kr:["개여뀌","롱"]},hunum:[{kor:"롱",def:"개여뀌"}]},{id:6224,hanja:"盼",strokes:"9",def:{en:["look","gaze","expect","hope for"],kr:["곁눈질","할","반"]},hunum:[{kor:"반",def:"곁눈질 할"}]},{id:6225,hanja:"熏",strokes:"14",def:{en:["smoke","fog","vapor","smoke","cure"],kr:["연기","낄","훈"]},hunum:[{kor:"훈",def:"연기 낄"}]},{id:6226,hanja:"篊",strokes:"15",def:{en:[],kr:["홈통","홍"]},hunum:[{kor:"홍",def:"홈통"}]},{id:6227,hanja:"骷",strokes:"15",def:{en:["skeleton"],kr:["해골","고"]},hunum:[{kor:"고",def:"해골"}]},{id:6228,hanja:"篋",strokes:"15",def:{en:["ratton box","suitcase","or case"],kr:["행담","협"]},hunum:[{kor:"협",def:"상자"}]},{id:6229,hanja:"骸",strokes:"16",def:{en:["skeleton","body","leg bone"],kr:["뼈","해"]},hunum:[{kor:"해",def:"뼈"}]},{id:6230,hanja:"遼",strokes:"16",def:{en:["distant","far"],kr:["멀","료"]},hunum:[{kor:"료",def:"멀"}]},{id:6231,hanja:"盾",strokes:"9",def:{en:["shield","dutch guilder","Indonesia"],kr:["벼슬이름","순"]},hunum:[{kor:"돈",def:"사람이름"},{kor:"순",def:"방패"}]},{id:6232,hanja:"篌",strokes:"15",def:{en:["ancient music instrument","harp"],kr:["공후","후"]},hunum:[{kor:"후",def:"공후"}]},{id:6233,hanja:"遽",strokes:"17",def:{en:["suddenly","unexpectedly","at once"],kr:["역말","수레","거"]},hunum:[{kor:"거",def:"급할"}]},{id:6234,hanja:"熒",strokes:"14",def:{en:["shine","shimmer","shining","dazzling"],kr:["등불","형"]},hunum:[{kor:"형",def:"등불"}]},{id:6235,hanja:"避",strokes:"17",def:{en:["avoid","turn aside","escape","hide"],kr:["싫어할","피"]},hunum:[{kor:"피",def:"숨을"}]},{id:6236,hanja:"堕",strokes:"11",def:{en:["fall","sink","let fall","degenerate"],kr:["게으를","휴"]},hunum:[{kor:"타",def:"떨어질"},{kor:"휴",def:"무너뜨릴"}]},{id:6237,hanja:"蘧",strokes:"23",def:{en:["a plant which resembles wheat but has no edible grain"],kr:["마음에","든든할","거"]},hunum:[{kor:"거",def:"패랭이꽃"}]},{id:6238,hanja:"熔",strokes:"14",def:{en:["melt","smelt","fuse","mold"],kr:["鎔의","俗字"]},hunum:[{kor:"용",def:"쇠 녹일"}]},{id:6239,hanja:"扮",strokes:"7",def:{en:["dress up","dress up as"],kr:["꾸밀","분"]},hunum:[{kor:"반",def:"꾸밀"},{kor:"분",def:"꾸밀"}]},{id:6240,hanja:"骼",strokes:"16",def:{en:["bone","skeleton","corpse"],kr:["짐승의","뼈","격"]},hunum:[{kor:"격",def:"마른 뼈"}]},{id:6241,hanja:"扯",strokes:"7",def:{en:["rip up","tear down","raise","haul"],kr:["찢어버릴","차"]},hunum:[{kor:"차",def:"찢어버릴"}]},{id:6242,hanja:"沫",strokes:"8",def:{en:["froth","foam","bubbles","suds"],kr:["거품","말"]},hunum:[{kor:"말",def:"거품"}]},{id:6243,hanja:"堗",strokes:"12",def:{en:[],kr:["굴똑","돌"]},hunum:[{kor:"돌",def:"굴똑"}]},{id:6244,hanja:"蘩",strokes:"23",def:{en:[],kr:["산흰쑥","번"]},hunum:[{kor:"번",def:"산흰쑥"}]},{id:6245,hanja:"篒",strokes:"15",def:{en:[]},hunum:[{kor:"식",def:"대밥통"}]},{id:6246,hanja:"扱",strokes:"7",def:{en:["collect","draw in","gather","receive"],kr:["깊을","삽"]},hunum:[{kor:"급",def:"미칠"},{kor:"삽",def:"거둘"}]},{id:6247,hanja:"沬",strokes:"8",def:{en:["dusk","Mei river","Zhou dynasty place","to dive"],kr:["지명","매"]},hunum:[{kor:"매",def:"지명"}]},{id:6248,hanja:"堙",strokes:"12",def:{en:["bury","dam","block up"],kr:["막을","인"]},hunum:[{kor:"인",def:"막을"}]},{id:6249,hanja:"骿",strokes:"18",def:{en:[],kr:["통갈비","변"]},hunum:[{kor:"변",def:"통갈비"}]},{id:6250,hanja:"龍",strokes:"16",def:{en:["dragon","symbolic of emperor"],kr:["잿빛","방"]},hunum:[{kor:"롱",def:"언덕"},{kor:"룡",def:"용"},{kor:"방",def:"잿빛"}]},{id:6251,hanja:"熙",strokes:"14",def:{en:["bright","splendid","glorious"],kr:["빛날","희"]},hunum:[{kor:"희",def:"빛날"}]},{id:6252,hanja:"沮",strokes:"8",def:{en:["stop","prevent","defeated","dejected"],kr:["나라이름","저"]},hunum:[{kor:"저",def:"그칠"}]},{id:6253,hanja:"篔",strokes:"16",def:{en:["tall bamboo"],kr:["왕대나무","운"]},hunum:[{kor:"운",def:"왕대나무"}]},{id:6254,hanja:"扳",strokes:"7",def:{en:["pull","drag","right itself"],kr:["끌","반"]},hunum:[{kor:"반",def:"끌"}]},{id:6255,hanja:"蘭",strokes:"23",def:{en:["orchid","elegant","graceful"],kr:["난초","란"]},hunum:[{kor:"란",def:"난초"}]},{id:6256,hanja:"熛",strokes:"15",def:{en:["blaze"],kr:["빛날","표"]},hunum:[{kor:"표",def:"불똥 튈"}]},{id:6257,hanja:"蘯",strokes:"23",def:{en:["to toss about","to swing","to rock"],kr:["盪과","同字"]},hunum:[{kor:"탕",def:"쓸"}]},{id:6258,hanja:"沰",strokes:"8",def:{en:["to let drop"],kr:["떨어질","탁"]},hunum:[{kor:"탁",def:"떨어뜨릴"}]},{id:6259,hanja:"龐",strokes:"19",def:{en:["disorderly","messy","huge","big"],kr:["어지러울","방"]},hunum:[{kor:"농",def:"통통하게 살질"},{kor:"방",def:"어지러울"}]},{id:6260,hanja:"沱",strokes:"8",def:{en:["rivers","streams","waterways","flow"],kr:["눈물이","흐를","타"]},hunum:[{kor:"타",def:"물이 갈래질"}]},{id:6261,hanja:"扶",strokes:"7",def:{en:["support","help","protect","hold on"],kr:["도울","부"]},hunum:[{kor:"부",def:"도울"}]},{id:6262,hanja:"堝",strokes:"12",def:{en:["crucible"],kr:["도가니","과"]},hunum:[{kor:"과",def:"도가니"}]},{id:6263,hanja:"堞",strokes:"12",def:{en:["plate"],kr:["성가퀴","첩"]},hunum:[{kor:"첩",def:"성가퀴"}]},{id:6264,hanja:"龒",strokes:"21",def:{en:[],kr:["龍의","古字"]},hunum:[{kor:"룡",def:"용"}]},{id:6265,hanja:"河",strokes:"8",def:{en:["river","stream","yellow river"],kr:["물","하"]},hunum:[{kor:"하",def:"물"}]},{id:6266,hanja:"胃",strokes:"9",def:{en:["stomach","gizzard of fowl"],kr:["성씨","위"]},hunum:[{kor:"위",def:"밥통"}]},{id:6267,hanja:"篙",strokes:"16",def:{en:["pole used punt boat"],kr:["상앗대","고"]},hunum:[{kor:"고",def:"상앗대"}]},{id:6268,hanja:"杅",strokes:"7",def:{en:["tub"]},hunum:[{kor:"우",def:"사발"}]},{id:6269,hanja:"堠",strokes:"12",def:{en:["battlements","battlemented walls"],kr:["봉화대","후"]},hunum:[{kor:"후",def:"봉화대"}]},{id:6270,hanja:"胄",strokes:"9",def:{en:["helmet","headpiece","descendant"],kr:["후사","주"]},hunum:[{kor:"주",def:"후사"}]},{id:6271,hanja:"謀",strokes:"16",def:{en:["plan","scheme","strategem"],kr:["꾀할","모"]},hunum:[{kor:"모",def:"꾀할"}]},{id:6272,hanja:"批",strokes:"7",def:{en:["comment","criticize","wholesale"],kr:["칠","비"]},hunum:[{kor:"별",def:"거스를"},{kor:"비",def:"칠"}]},{id:6273,hanja:"杆",strokes:"7",def:{en:["pole","shaft of spear"],kr:["나무이름","간"]},hunum:[{kor:"간",def:"지레"}]},{id:6274,hanja:"龔",strokes:"22",def:{en:["give","present","reverential"],kr:["공손할","공"]},hunum:[{kor:"공",def:"공손할"}]},{id:6275,hanja:"扺",strokes:"7",def:{en:[],kr:["손바닥","지"]},hunum:[{kor:"지",def:"손바닥"}]},{id:6276,hanja:"謁",strokes:"16",def:{en:["visit","pay respects to"],kr:["뵈올","알"]},hunum:[{kor:"알",def:"아뢸"}]},{id:6277,hanja:"熟",strokes:"15",def:{en:["well","ripe","familiar with"],kr:["풍년들","숙"]},hunum:[{kor:"숙",def:"익힐"}]},{id:6278,hanja:"篛",strokes:"16",def:{en:["cuticle of bamboo plant"],kr:["죽순","약"]},hunum:[{kor:"약",def:"죽순"}]},{id:6279,hanja:"堡",strokes:"12",def:{en:["fort","fortress","town","village"],kr:["작은","성","보"]},hunum:[{kor:"보",def:"작은 성"}]},{id:6280,hanja:"胆",strokes:"9",def:{en:["gall bladder","bravery","courage"],kr:["침비깨","단"]},hunum:[{kor:"단",def:"침비깨"}]},{id:6281,hanja:"謂",strokes:"16",def:{en:["say","tell","call","name","be called"],kr:["이를","위"]},hunum:[{kor:"위",def:"고할"}]},{id:6282,hanja:"熠",strokes:"15",def:{en:["bright and sparkling"],kr:["반딧불","반짝거릴","습"]},hunum:[{kor:"습",def:"환할"}]},{id:6283,hanja:"龕",strokes:"22",def:{en:["niche","shrine"],kr:["감실","감"]},hunum:[{kor:"감",def:"취할"}]},{id:6284,hanja:"篝",strokes:"16",def:{en:["bamboo basket","bamboo frame"],kr:["불덮개","구"]},hunum:[{kor:"구",def:"불덮개"}]},{id:6285,hanja:"扼",strokes:"7",def:{en:["grasp","clutch","choke","strangle"],kr:["움켜쥘","액"]},hunum:[{kor:"액",def:"움켜쥘"}]},{id:6286,hanja:"杉",strokes:"7",def:{en:["various species of pine and fir"],kr:["삼나무","삼"]},hunum:[{kor:"삼",def:"삼나무"}]},{id:6287,hanja:"堣",strokes:"12",def:{en:[]},hunum:[{kor:"유",def:"모퉁이"}]},{id:6288,hanja:"堤",strokes:"12",def:{en:["dike"],kr:["둑","제"]},hunum:[{kor:"제",def:"둑"}]},{id:6289,hanja:"熢",strokes:"15",def:{en:[],kr:["연기","자욱할","봉"]},hunum:[{kor:"봉",def:"연기 자욱할"}]},{id:6290,hanja:"沸",strokes:"8",def:{en:["boil","bubble up","gush"],kr:["끓을","비"]},hunum:[{kor:"불",def:"용솟음할"},{kor:"비",def:"끓을"}]},{id:6291,hanja:"找",strokes:"7",def:{en:["search","seek","look for","find"],kr:["채울","조"]},hunum:[{kor:"조",def:"채울"}]},{id:6292,hanja:"謄",strokes:"17",def:{en:["copy","transcribe"],kr:["베낄","등"]},hunum:[{kor:"등",def:"베낄"}]},{id:6293,hanja:"油",strokes:"8",def:{en:["oil","fat","grease","lard","paints"],kr:["공손할","유"]},hunum:[{kor:"유",def:"기름"}]},{id:6294,hanja:"胊",strokes:"9",def:{en:["yoke"],kr:["포","얇게","저미어서","말린","고기","구"]},hunum:[{kor:"구",def:"포(얇게 저미어서 말린 고기)"}]},{id:6295,hanja:"熤",strokes:"15",def:{en:[],kr:["사람이름","익"]},hunum:[{kor:"익",def:"빛날"}]},{id:6296,hanja:"篠",strokes:"16",def:{en:["dwarf bamboo","diminutive in person"],kr:["가는","대","소"]},hunum:[{kor:"소",def:"가는 대"}]},{id:6297,hanja:"承",strokes:"8",def:{en:["inherit","receive","succeed"],kr:["차례","승"]},hunum:[{kor:"승",def:"받들"}]},{id:6298,hanja:"堦",strokes:"12",def:{en:["stairs","a flight of steps","a degree","a class","a rank or step"],kr:["섬돌","계"]},hunum:[{kor:"계",def:"섬돌"}]},{id:6299,hanja:"治",strokes:"8",def:{en:["govern","regulate","administer"],kr:["치료할","치"]},hunum:[{kor:"치",def:"다스릴"}]},{id:6300,hanja:"篡",strokes:"16",def:{en:["usurp"],kr:["빼앗을","찬"]},hunum:[{kor:"찬",def:"빼앗을"}]},{id:6301,hanja:"堧",strokes:"12",def:{en:["adjoin"],kr:["빈","땅","연"]},hunum:[{kor:"연",def:"빈 땅"}]},{id:6302,hanja:"背",strokes:"9",def:{en:["back","back side","behind","betray"],kr:["배반할","패"]},hunum:[{kor:"배",def:"등"},{kor:"패",def:"버릴"}]},{id:6303,hanja:"謇",strokes:"17",def:{en:["stutter","speak out boldly"],kr:["바른말할","건"]},hunum:[{kor:"건",def:"말 더듬거릴"}]},{id:6304,hanja:"沼",strokes:"8",def:{en:["lake","fishpond","swamps"],kr:["늪","소"]},hunum:[{kor:"소",def:"못"}]},{id:6305,hanja:"李",strokes:"7",def:{en:["plum","judge","surname"],kr:["오얏","리"]},hunum:[{kor:"리",def:"오얏"}]},{id:6306,hanja:"杏",strokes:"7",def:{en:["apricot","almond"],kr:["은행","행"]},hunum:[{kor:"행",def:"살구"}]},{id:6307,hanja:"沽",strokes:"8",def:{en:["buy and sell","inferior in quality"],kr:["팔","고"]},hunum:[{kor:"고",def:"팔"}]},{id:6308,hanja:"龜",strokes:"16",def:{en:["turtle or tortoise","cuckold"],kr:["피부가","틀","균"]},hunum:[{kor:"구",def:"나라 이름"},{kor:"귀",def:"거북"},{kor:"균",def:"(피부가)틀"}]},{id:6309,hanja:"胎",strokes:"9",def:{en:["unborn child","embryo","fetus"],kr:["시작","태"]},hunum:[{kor:"태",def:"아이 밸"}]},{id:6310,hanja:"龝",strokes:"21",def:{en:["autumn","fall","year"],kr:["秋의","古字"]},hunum:[{kor:"추",def:"가을"}]},{id:6311,hanja:"沾",strokes:"8",def:{en:["moisten","wet","soak","touch"],kr:["더할","첨"]},hunum:[{kor:"첨",def:"더할"}]},{id:6312,hanja:"材",strokes:"7",def:{en:["material","stuff","timber","talent"],kr:["재주","재"]},hunum:[{kor:"재",def:"재목"}]},{id:6313,hanja:"熨",strokes:"15",def:{en:["iron","press"],kr:["고약","붙일","위"]},hunum:[{kor:"위",def:"다리미"}]},{id:6314,hanja:"篤",strokes:"16",def:{en:["deep","true","sincere","genuine"],kr:["도타울","독"]},hunum:[{kor:"독",def:"도타울"}]},{id:6315,hanja:"堪",strokes:"12",def:{en:["adequately capable of","worthy of"],kr:["산","모양이","기괴할","감"]},hunum:[{kor:"감",def:"견딜"}]},{id:6316,hanja:"蘼",strokes:"25",def:{en:[],kr:["천궁","미"]},hunum:[{kor:"미",def:"장미"}]},{id:6317,hanja:"村",strokes:"7",def:{en:["village","hamlet","uncouth","vulgar"],kr:["시골","촌"]},hunum:[{kor:"촌",def:"마을"}]},{id:6318,hanja:"篥",strokes:"16",def:{en:["bulgle"],kr:["대","이름","률"]},hunum:[{kor:"률",def:"대 이름"}]},{id:6319,hanja:"沿",strokes:"8",def:{en:["follow course","go along"],kr:["좇을","연"]},hunum:[{kor:"연",def:"물 따라 내려갈"}]},{id:6320,hanja:"龞",strokes:"28",def:{en:["turtle"]},hunum:[{kor:"별",def:"자라"}]},{id:6321,hanja:"篦",strokes:"16",def:{en:["fine","comb hair"],kr:["빗치개","비"]},hunum:[{kor:"비",def:"빗치개"}]},{id:6322,hanja:"謌",strokes:"17",def:{en:["slander","defame"],kr:["歌와","同字"]},hunum:[{kor:"가",def:"노래"}]},{id:6323,hanja:"杓",strokes:"7",def:{en:["handle of cup","ladle","spoon","name of a constellation"],kr:["북두자루","표"]},hunum:[{kor:"작",def:"구기"},{kor:"표",def:"북두자루"}]},{id:6324,hanja:"龠",strokes:"17",def:{en:["flute","pipe","ancient measure"],kr:["피리","약"]},hunum:[{kor:"약",def:"피리"}]},{id:6325,hanja:"蘿",strokes:"25",def:{en:["type of creeping plant","turnip"],kr:["무","라"]},hunum:[{kor:"라",def:"무"}]},{id:6326,hanja:"龡",strokes:"21",def:{en:["to blow","exhale"],kr:["불","취"]},hunum:[{kor:"취",def:"불"}]},{id:6327,hanja:"熬",strokes:"15",def:{en:["cook down","to boil","endure"],kr:["애","끓는","소리","오"]},hunum:[{kor:"오",def:"볶을"}]},{id:6328,hanja:"勀",strokes:"9",def:{en:[],kr:["이길","극"]},hunum:[{kor:"극",def:"이길"}]},{id:6329,hanja:"龢",strokes:"22",def:{en:["in harmony","calm","peaceful"],kr:["풍류","조화될","화"]},hunum:[{kor:"화",def:"풍류 조화될"}]},{id:6330,hanja:"謎",strokes:"17",def:{en:["riddle","conundrum","puzzle"],kr:["수수께끼","미"]},hunum:[{kor:"미",def:"수수께끼"}]},{id:6331,hanja:"堯",strokes:"12",def:{en:["a legendary ancient emperor"],kr:["요임금","요"]},hunum:[{kor:"요",def:"높을"}]},{id:6332,hanja:"勁",strokes:"9",def:{en:["strong","unyielding","tough","powerful"],kr:["굳셀","경"]},hunum:[{kor:"경",def:"굳셀"}]},{id:6333,hanja:"杖",strokes:"7",def:{en:["cane","walking stick"],kr:["지팡이","장"]},hunum:[{kor:"장",def:"지팡이"}]},{id:6334,hanja:"篩",strokes:"16",def:{en:["sieve","filter","screen","sift"],kr:["체","사"]},hunum:[{kor:"사",def:"체"}]},{id:6335,hanja:"堰",strokes:"12",def:{en:["dam","embankment","dike","bank"],kr:["방죽","언"]},hunum:[{kor:"언",def:"방죽"}]},{id:6336,hanja:"龤",strokes:"26",def:{en:["to harmonize","to accord with","to agree"],kr:["노래의","가락이","조화될","해"]},hunum:[{kor:"해",def:"노래의 가락이 조화될"}]},{id:6337,hanja:"篪",strokes:"16",def:{en:["a bamboo flute with seven holes"],kr:["저","이름","지"]},hunum:[{kor:"지",def:"저 이름"}]},{id:6338,hanja:"胕",strokes:"9",def:{en:[],kr:["장부","부"]},hunum:[{kor:"부",def:"장부"}]},{id:6339,hanja:"謐",strokes:"17",def:{en:["calm","quiet","still","cautious"],kr:["고요할","밀"]},hunum:[{kor:"밀",def:"고요할"}]},{id:6340,hanja:"熯",strokes:"15",def:{en:["by fire"],kr:["공경할","선"]},hunum:[{kor:"선",def:"불 이글이글할"}]},{id:6341,hanja:"報",strokes:"12",def:{en:["report","tell","announce"],kr:["나아갈","부"]},hunum:[{kor:"보",def:"갚을"},{kor:"부",def:"나아갈"}]},{id:6342,hanja:"勃",strokes:"9",def:{en:["suddenly","sudden","quick"],kr:["갑작스러울","발"]},hunum:[{kor:"발",def:"갑작스러울"}]},{id:6343,hanja:"謑",strokes:"17",def:{en:["shame","disgrace"],kr:["창피줄","혜"]},hunum:[{kor:"혜",def:"창피줄"}]},{id:6344,hanja:"胖",strokes:"9",def:{en:["fat","obese","fatty"],kr:["희생","반"]},hunum:[{kor:"반",def:"희생"}]},{id:6345,hanja:"龥",strokes:"26",def:{en:["beg","appeal for help"],kr:["부르짖을","유"]},hunum:[{kor:"유",def:"부르짖을"}]},{id:6346,hanja:"勅",strokes:"9",def:{en:["imperial degree","daoist magic"],kr:["칙령","칙"]},hunum:[{kor:"칙",def:"신칙할"}]},{id:6347,hanja:"熱",strokes:"15",def:{en:["hot","heat","fever","restless","zeal"],kr:["쏠릴","열"]},hunum:[{kor:"열",def:"뜨거울"}]},{id:6348,hanja:"場",strokes:"12",def:{en:["open space","field","market"],kr:["마당","장"]},hunum:[{kor:"장",def:"마당"}]},{id:6349,hanja:"熲",strokes:"15",def:{en:["bright"],kr:["빛날","경"]},hunum:[{kor:"경",def:"빛날"}]},{id:6350,hanja:"篭",strokes:"16",def:{en:["cage","cage"],kr:["籠과","同字"]},hunum:[{kor:"롱",def:"대그릇"}]},{id:6351,hanja:"謔",strokes:"17",def:{en:["jeer"],kr:["희롱할","학"]},hunum:[{kor:"학",def:"희롱할"}]},{id:6352,hanja:"胙",strokes:"9",def:{en:["meat offered in sacrifice to one"],kr:["복","조"]},hunum:[{kor:"조",def:"복"}]},{id:6353,hanja:"皀",strokes:"7",def:{en:["kernel","seed","enjoy","feast"],kr:["고소할","급"]},hunum:[{kor:"급",def:"고소할"}]},{id:6354,hanja:"堵",strokes:"12",def:{en:["wall","stop","prevent","stop up"],kr:["담","도"]},hunum:[{kor:"도",def:"담"}]},{id:6355,hanja:"皁",strokes:"7",def:{en:["black","police runners","from the black clothes formerly worn by them"],kr:["하인","조"]},hunum:[{kor:"조",def:"하인"}]},{id:6356,hanja:"胚",strokes:"9",def:{en:["embryo","unfinished things"],kr:["아이","밸","배"]},hunum:[{kor:"배",def:"아이 밸"}]},{id:6357,hanja:"勇",strokes:"9",def:{en:["brave","courageous","fierce"],kr:["용맹할","용"]},hunum:[{kor:"용",def:"날랠"}]},{id:6358,hanja:"崄",strokes:"10",def:{en:["high","steep","precipitous"],kr:["嶮과","同字"]},hunum:[{kor:"험",def:"험할"}]},{id:6359,hanja:"退",strokes:"10",def:{en:["step back","retreat","withdraw"],kr:["물리칠","퇴"]},hunum:[{kor:"퇴",def:"물러갈"}]},{id:6360,hanja:"謖",strokes:"17",def:{en:["rise up","raise up"]},hunum:[{kor:"소",def:"일어날"}]},{id:6361,hanja:"杜",strokes:"7",def:{en:["stop","prevent","restrict","surname"],kr:["막을","두"]},hunum:[{kor:"두",def:"막을"}]},{id:6362,hanja:"送",strokes:"10",def:{en:["see off","send off","dispatch","give"],kr:["줄","송"]},hunum:[{kor:"송",def:"보낼"}]},{id:6363,hanja:"胛",strokes:"9",def:{en:["the shoulder","shoulder blade"],kr:["어깻죽지","갑"]},hunum:[{kor:"갑",def:"어깻죽지"}]},{id:6364,hanja:"謗",strokes:"17",def:{en:["slander","libel"],kr:["헐뜯을","방"]},hunum:[{kor:"방",def:"헐뜯을"}]},{id:6365,hanja:"皃",strokes:"7",def:{en:["countenance","appearance"],kr:["貌와","同字"]},hunum:[{kor:"모",def:"모양"}]},{id:6366,hanja:"勉",strokes:"9",def:{en:["endeavor","make effort","urge"],kr:["힘쓸","면"]},hunum:[{kor:"면",def:"힘쓸"}]},{id:6367,hanja:"的",strokes:"8",def:{en:["possessive","adjectival suffix"],kr:["밝을","적"]},hunum:[{kor:"적",def:"과녁"}]},{id:6368,hanja:"适",strokes:"10",def:{en:["go","reach","appropriate","suitable"],kr:["빠를","괄"]},hunum:[{kor:"괄",def:"빠를"}]},{id:6369,hanja:"杞",strokes:"7",def:{en:["willow","medlar tree","a small feudal state"],kr:["나무","이름","기"]},hunum:[{kor:"기",def:"나무 이름"}]},{id:6370,hanja:"崆",strokes:"11",def:{en:["Kongtong mountain"],kr:["산이름","공"]},hunum:[{kor:"공",def:"산이름"}]},{id:6371,hanja:"篳",strokes:"17",def:{en:["wicker","bamboo"],kr:["나무","실은","수레","필"]},hunum:[{kor:"필",def:"대 사립문"}]},{id:6372,hanja:"逃",strokes:"10",def:{en:["escape","flee","abscond","dodge"],kr:["달아날","도"]},hunum:[{kor:"도",def:"달아날"}]},{id:6373,hanja:"謙",strokes:"17",def:{en:["humble","modest"],kr:["괘","이름","겸"]},hunum:[{kor:"겸",def:"사양할"}]},{id:6374,hanja:"束",strokes:"7",def:{en:["bind","control","restrain","bale"],kr:["비단","다섯끝","속"]},hunum:[{kor:"속",def:"묶을"}]},{id:6375,hanja:"堺",strokes:"12",def:{en:["person"],kr:["界와","同字"]},hunum:[{kor:"계",def:"지경"}]},{id:6376,hanja:"崇",strokes:"11",def:{en:["esteem","honor","revere","venerate"],kr:["산이름","숭"]},hunum:[{kor:"숭",def:"높을"}]},{id:6377,hanja:"熹",strokes:"16",def:{en:["dim light","glimmer","warm","bright"],kr:["성할","희"]},hunum:[{kor:"희",def:"성할"}]},{id:6378,hanja:"胞",strokes:"9",def:{en:["womb","placenta","fetal membrane"],kr:["동포","포"]},hunum:[{kor:"포",def:"태보"}]},{id:6379,hanja:"謚",strokes:"17",def:{en:["to confer posthumous titles"],kr:["웃을","익"]},hunum:[{kor:"익",def:"웃을"}]},{id:6380,hanja:"皆",strokes:"9",def:{en:["all","every","everybody"],kr:["같을","개"]},hunum:[{kor:"개",def:"모두"}]},{id:6381,hanja:"杠",strokes:"7",def:{en:["lever","pole","crowbar","sharpen"],kr:["올릴","강"]},hunum:[{kor:"강",def:"외나무 다리"}]},{id:6382,hanja:"勌",strokes:"10",def:{en:["to labor","tired"],kr:["倦과","同字"]},hunum:[{kor:"권",def:"게으를"}]},{id:6383,hanja:"熺",strokes:"16",def:{en:["dim light","glimmer","warm"],kr:["熹와","同字"]},hunum:[{kor:"희",def:"빛날"}]},{id:6384,hanja:"逅",strokes:"10",def:{en:["meet unexpectedly"],kr:["만날","후"]},hunum:[{kor:"후",def:"만날"}]},{id:6385,hanja:"条",strokes:"7",def:{en:["clause","condition","string","stripe"],kr:["條의","略字"]},hunum:[{kor:"조",def:"가지"}]},{id:6386,hanja:"驀",strokes:"21",def:{en:["suddenly","quickly","abruptly"],kr:["말탈","맥"]},hunum:[{kor:"맥",def:"말탈"}]},{id:6387,hanja:"講",strokes:"17",def:{en:["explain","discuss","talk"],kr:["강화할","강"]},hunum:[{kor:"강",def:"강론할"}]},{id:6388,hanja:"皇",strokes:"9",def:{en:["royal","imperial","ruler","superior"],kr:["임금","황"]},hunum:[{kor:"왕",def:"엄숙할"},{kor:"황",def:"임금"}]},{id:6389,hanja:"勍",strokes:"10",def:{en:["strong","powerful","mighty","violent"],kr:["셀","경"]},hunum:[{kor:"경",def:"셀"}]},{id:6390,hanja:"逆",strokes:"10",def:{en:["disobey","rebel","rebel","traitor"],kr:["거스를","역"]},hunum:[{kor:"역",def:"거스를"}]},{id:6391,hanja:"驁",strokes:"21",def:{en:["wild horse","mustang","wild"],kr:["깔볼","오"]},hunum:[{kor:"오",def:"준마"}]},{id:6392,hanja:"胠",strokes:"9",def:{en:["open","throw away"],kr:["갈비","거"]},hunum:[{kor:"거",def:"열"}]},{id:6393,hanja:"謜",strokes:"17",def:{en:[],kr:["기꺼울","원"]},hunum:[{kor:"원",def:"천천히 말할"}]},{id:6394,hanja:"胡",strokes:"9",def:{en:["recklessly","foolishly","wildly"],kr:["턱밑살","호"]},hunum:[{kor:"호",def:"턱밑살"}]},{id:6395,hanja:"驂",strokes:"21",def:{en:["two outside ones in three horse"],kr:["곁마","참"]},hunum:[{kor:"참",def:"곁마"}]},{id:6396,hanja:"逇",strokes:"10",def:{en:[],kr:["구덩이","지"]},hunum:[{kor:"지",def:"구덩이"}]},{id:6397,hanja:"謝",strokes:"17",def:{en:["thank","decline"],kr:["사례할","사"]},hunum:[{kor:"사",def:"사례할"}]},{id:6398,hanja:"篷",strokes:"17",def:{en:["awning","covering","sail","boat"],kr:["뜸","봉"]},hunum:[{kor:"봉",def:"뜸"}]},{id:6399,hanja:"逈",strokes:"10",def:{en:["distant","far","separated","different"],kr:["빛날","형"]},hunum:[{kor:"형",def:"멀"}]},{id:6400,hanja:"驃",strokes:"21",def:{en:["charger","steed","swift","valiant"],kr:["누런","말","표"]},hunum:[{kor:"표",def:"날쌜"}]},{id:6401,hanja:"熾",strokes:"16",def:{en:["burning","intense","to burn","blaze","splendid","illustrious"],kr:["불","활활","붙을","치"]},hunum:[{kor:"치",def:"불 활활 붙을"}]},{id:6402,hanja:"驄",strokes:"21",def:{en:["horse with a bluish white color"],kr:["총이말","총"]},hunum:[{kor:"총",def:"총이말"}]},{id:6403,hanja:"長",strokes:"8",def:{en:["long","length","excel in","leader"],kr:["길","장"]},hunum:[{kor:"장",def:"길"}]},{id:6404,hanja:"皋",strokes:"10",def:{en:["the high land along a river"],kr:["못","고"]},hunum:[{kor:"고",def:"못"}]},{id:6405,hanja:"勑",strokes:"10",def:{en:["reward","sincere"],kr:["다스릴","칙"]},hunum:[{kor:"래",def:"위로할"},{kor:"칙",def:"바를"}]},{id:6406,hanja:"崍",strokes:"11",def:{en:["mountain in Sichuan province"],kr:["산","이름","래"]},hunum:[{kor:"래",def:"산 이름"}]},{id:6407,hanja:"驅",strokes:"21",def:{en:["spur a horse on","expel","drive away"],kr:["몰","구"]},hunum:[{kor:"구",def:"몰"}]},{id:6408,hanja:"胤",strokes:"9",def:{en:["heir","successor","progeny","posterity"],kr:["익힐","윤"]},hunum:[{kor:"윤",def:"맏아들"}]},{id:6409,hanja:"謠",strokes:"17",def:{en:["sing","folksong","ballad","rumor"],kr:["소문","요"]},hunum:[{kor:"요",def:"노래"}]},{id:6410,hanja:"勒",strokes:"11",def:{en:["strangle","tighten"],kr:["굴레","륵"]},hunum:[{kor:"륵",def:"굴레"}]},{id:6411,hanja:"崎",strokes:"11",def:{en:["rough","uneven","jagged","rugged"],kr:["험할","기"]},hunum:[{kor:"기",def:"험할"}]},{id:6412,hanja:"逋",strokes:"11",def:{en:["flee","run away","leave debt unsettled"],kr:["포흠할","포"]},hunum:[{kor:"포",def:"달아날"}]},{id:6413,hanja:"胥",strokes:"9",def:{en:["all","together","mutually"],kr:["서로","서"]},hunum:[{kor:"서",def:"서로"}]},{id:6414,hanja:"逌",strokes:"11",def:{en:["please","smiling","complacent"],kr:["빙그레할","유"]},hunum:[{kor:"유",def:"빙그레할"}]},{id:6415,hanja:"皎",strokes:"11",def:{en:["white","bright","brilliant","clear"],kr:["달빛","교"]},hunum:[{kor:"교",def:"달빛"}]},{id:6416,hanja:"勔",strokes:"11",def:{en:["endeavor","make effort","urge"],kr:["힘쓸","민"]},hunum:[{kor:"민",def:"권면할"}]},{id:6417,hanja:"逍",strokes:"11",def:{en:["ramble","stroll","jaunt","loiter"],kr:["거닐","소"]},hunum:[{kor:"소",def:"노닐"}]},{id:6418,hanja:"謣",strokes:"18",def:{en:[],kr:["망령되게","말할","우"]},hunum:[{kor:"우",def:"망령되게 말할"}]},{id:6419,hanja:"動",strokes:"11",def:{en:["move","happen","movement","action"],kr:["움직일","동"]},hunum:[{kor:"동",def:"움직일"}]},{id:6420,hanja:"崐",strokes:"11",def:{en:["Kunlun mountains in Jiangsu"],kr:["곤륜산","곤"]},hunum:[{kor:"곤",def:"곤륜산"}]},{id:6421,hanja:"杪",strokes:"8",def:{en:["tip of twig","top of tree","twig"],kr:["끝","초"]},hunum:[{kor:"초",def:"끝"}]},{id:6422,hanja:"篾",strokes:"17",def:{en:["bamboo splints or slats"],kr:["대","껍질","멸"]},hunum:[{kor:"멸",def:"대 껍질"}]},{id:6423,hanja:"皐",strokes:"11",def:{en:["the high land along a river"],kr:["부를","호"]},hunum:[{kor:"고",def:"부르는 소리"},{kor:"호",def:"부를"}]},{id:6424,hanja:"勖",strokes:"11",def:{en:["enjoin","advise","preach to"],kr:["힘쓸","욱"]},hunum:[{kor:"욱",def:"힘쓸"}]},{id:6425,hanja:"崑",strokes:"11",def:{en:["Kunlun mountains in Jiang Su province"],kr:["산이름","곤"]},hunum:[{kor:"곤",def:"산이름"}]},{id:6426,hanja:"驊",strokes:"22",def:{en:["an excellent horse"],kr:["준마","화"]},hunum:[{kor:"화",def:"준마"}]},{id:6427,hanja:"透",strokes:"11",def:{en:["penetrate","pass through"],kr:["지나칠","투"]},hunum:[{kor:"투",def:"통할"}]},{id:6428,hanja:"勗",strokes:"11",def:{en:["enjoin","advise","excite"],kr:["勖의","譌字"]},hunum:[{kor:"욱",def:"힘쓸"}]},{id:6429,hanja:"逐",strokes:"11",def:{en:["chase","expel","one by one"],kr:["물리칠","축"]},hunum:[{kor:"적",def:"달리는 모양"},{kor:"축",def:"쫓을"}]},{id:6430,hanja:"杬",strokes:"8",def:{en:[],kr:["나무이름","원"]},hunum:[{kor:"원",def:"몸 주무를"}]},{id:6431,hanja:"勘",strokes:"11",def:{en:["investigate","compare","collate"],kr:["정할","감"]},hunum:[{kor:"감",def:"마감할"}]},{id:6432,hanja:"杭",strokes:"8",def:{en:["cross stream","navigate"],kr:["고을이름","항"]},hunum:[{kor:"항",def:"건널"}]},{id:6433,hanja:"崔",strokes:"11",def:{en:["high","lofty","towering","surname"],kr:["성씨","최"]},hunum:[{kor:"최",def:"산 우뚝할"}]},{id:6434,hanja:"逑",strokes:"11",def:{en:["collect","unite","match","pair"],kr:["짝","구"]},hunum:[{kor:"구",def:"짝"}]},{id:6435,hanja:"驌",strokes:"22",def:{en:["name of a famous horse"],kr:["숙상말","숙"]},hunum:[{kor:"숙",def:"좋은말"}]},{id:6436,hanja:"謦",strokes:"18",def:{en:["t speak softly"],kr:["기침","경"]},hunum:[{kor:"경",def:"기침"}]},{id:6437,hanja:"務",strokes:"11",def:{en:["affairs","business","must","should"],kr:["권장할","무"]},hunum:[{kor:"무",def:"일"}]},{id:6438,hanja:"驍",strokes:"22",def:{en:["excellent horse","brave","valiant"],kr:["날랠","효"]},hunum:[{kor:"효",def:"날랠"}]},{id:6439,hanja:"皓",strokes:"12",def:{en:["bright","luminous","clear","hoary"],kr:["깨끗할","호"]},hunum:[{kor:"호",def:"흴"}]},{id:6440,hanja:"杮",strokes:"8",def:{en:["wood shavings"],kr:["대패밥","폐"]},hunum:[{kor:"폐",def:"대패밥"}]},{id:6441,hanja:"戀",strokes:"23",def:{en:["love","long for","yearn for","love"],kr:["사모할","련"]},hunum:[{kor:"련",def:"사모할"}]},{id:6442,hanja:"崕",strokes:"11",def:{en:["cliff","precipice","precipitous"],kr:["崖와","同字"]},hunum:[{kor:"애",def:"낭떠러지"}]},{id:6443,hanja:"勛",strokes:"12",def:{en:["meritorious deed","merits","rank"],kr:["勳의","古字"]},hunum:[{kor:"훈",def:"공"}]},{id:6444,hanja:"驎",strokes:"22",def:{en:[],kr:["워라말","린"]},hunum:[{kor:"린",def:"워라말"}]},{id:6445,hanja:"謨",strokes:"18",def:{en:["scheme","plan","plan","be without"],kr:["꾀","모"]},hunum:[{kor:"모",def:"꾀"}]},{id:6446,hanja:"杯",strokes:"8",def:{en:["cup","glass"],kr:["잔","배"]},hunum:[{kor:"배",def:"잔"}]},{id:6447,hanja:"崖",strokes:"11",def:{en:["cliff","precipice","precipitous"],kr:["언덕","의"]},hunum:[{kor:"애",def:"낭떠러지"},{kor:"의",def:"언덕"}]},{id:6448,hanja:"途",strokes:"11",def:{en:["way","road","path","journey","course"],kr:["길","도"]},hunum:[{kor:"도",def:"길"}]},{id:6449,hanja:"驏",strokes:"22",def:{en:["horse without saddle"],kr:["안장","얹지","않은","말","잔"]},hunum:[{kor:"잔",def:"안장 얹지 않은 말"}]},{id:6450,hanja:"杰",strokes:"8",def:{en:["hero","heroic","outstanding"],kr:["傑의","俗字"]},hunum:[{kor:"걸",def:"뛰어날"}]},{id:6451,hanja:"崗",strokes:"11",def:{en:["post","position"],kr:["岡의","俗字"]},hunum:[{kor:"강",def:"언덕"}]},{id:6452,hanja:"皖",strokes:"12",def:{en:["Anhui province"],kr:["샛별","환"]},hunum:[{kor:"환",def:"샛별"}]},{id:6453,hanja:"逕",strokes:"11",def:{en:["pass by","approach","direct"],kr:["소로","경"]},hunum:[{kor:"경",def:"소로"}]},{id:6454,hanja:"胯",strokes:"10",def:{en:["pelvis","groin","thighs"],kr:["사타구니","과"]},hunum:[{kor:"고",def:"사타구니"},{kor:"과",def:"사타구니"}]},{id:6455,hanja:"東",strokes:"8",def:{en:["east","eastern","eastward"],kr:["동녘","동"]},hunum:[{kor:"동",def:"동녘"}]},{id:6456,hanja:"勝",strokes:"12",def:{en:["victory","excel","be better than"],kr:["가질","승"]},hunum:[{kor:"승",def:"이길"}]},{id:6457,hanja:"逖",strokes:"11",def:{en:["far","distant","keep at distance"],kr:["멀","적"]},hunum:[{kor:"적",def:"멀"}]},{id:6458,hanja:"謫",strokes:"18",def:{en:["charge","blame","disgrace","demote","punish"],kr:["꾸짖을","적"]},hunum:[{kor:"적",def:"귀양갈"}]},{id:6459,hanja:"杲",strokes:"8",def:{en:["bright sun","brilliant","high"],kr:["밝을","고"]},hunum:[{kor:"고",def:"밝을"}]},{id:6460,hanja:"勞",strokes:"12",def:{en:["labor","toil","do manual work"],kr:["일할","로"]},hunum:[{kor:"로",def:"일할"}]},{id:6461,hanja:"崙",strokes:"11",def:{en:["Kunlun mountains in Jiangsu"],kr:["산","이름","륜"]},hunum:[{kor:"륜",def:"산 이름"}]},{id:6462,hanja:"驒",strokes:"22",def:{en:["dappled"],kr:["돈짝무늬총이말","탄"]},hunum:[{kor:"탄",def:"돈짝무늬총이말"}]},{id:6463,hanja:"汀",strokes:"5",def:{en:["sandbar","beach","bank","shore"],kr:["수렁","정"]},hunum:[{kor:"정",def:"물가"}]},{id:6464,hanja:"胱",strokes:"10",def:{en:["bladder"],kr:["오줌통","광"]},hunum:[{kor:"광",def:"오줌통"}]},{id:6465,hanja:"謬",strokes:"18",def:{en:["error","exaggeration","erroneous"]},hunum:[{kor:"류",def:"그릇될"}]},{id:6466,hanja:"杳",strokes:"8",def:{en:["obscure","dark","mysterious","deep"]},hunum:[{kor:"묘",def:"어두울"}]},{id:6467,hanja:"募",strokes:"13",def:{en:["levy","raise","summon","recruit"],kr:["모을","모"]},hunum:[{kor:"모",def:"모을"}]},{id:6468,hanja:"汁",strokes:"5",def:{en:["juice","liquor","fluid","sap","gravy","sauce"],kr:["국","집"]},hunum:[{kor:"즙",def:"즙"},{kor:"집",def:"진액"}]},{id:6469,hanja:"謭",strokes:"18",def:{en:["shallow","stupid"],kr:["얕을","전"]},hunum:[{kor:"전",def:"얕을"}]},{id:6470,hanja:"逗",strokes:"11",def:{en:["tempt","allure","arouse","stir"],kr:["머무를","두"]},hunum:[{kor:"두",def:"머무를"}]},{id:6471,hanja:"勠",strokes:"13",def:{en:["join forces","unite"],kr:["협력할","륙"]},hunum:[{kor:"륙",def:"협력할"}]},{id:6472,hanja:"崛",strokes:"11",def:{en:["towering","eminent","rise abruptly"],kr:["산","높을","굴"]},hunum:[{kor:"굴",def:"산 높을"}]},{id:6473,hanja:"勡",strokes:"13",def:{en:[],kr:["겁박할","표"]},hunum:[{kor:"표",def:"겁탈할"}]},{id:6474,hanja:"杵",strokes:"8",def:{en:["pestle","baton used beat clothes"],kr:["혜성","저"]},hunum:[{kor:"저",def:"공이"}]},{id:6475,hanja:"皚",strokes:"15",def:{en:["brilliant white"],kr:["흴","애"]},hunum:[{kor:"애",def:"흴"}]},{id:6476,hanja:"求",strokes:"6",def:{en:["seek","demand","request","beseech"],kr:["찾을","구"]},hunum:[{kor:"구",def:"찾을"}]},{id:6477,hanja:"皛",strokes:"15",def:{en:[],kr:["나타날","효"]},hunum:[{kor:"효",def:"나타날"}]},{id:6478,hanja:"汃",strokes:"5",def:{en:[]},hunum:[{kor:"팔",def:"물결치는 소리"}]},{id:6479,hanja:"這",strokes:"11",def:{en:["this","the","here"],kr:["여기","저"]},hunum:[{kor:"언",def:"맞이할"},{kor:"저",def:"맞을"}]},{id:6480,hanja:"驕",strokes:"22",def:{en:["spirited horse","haughty"],kr:["부리","짧은","사냥개","효"]},hunum:[{kor:"교",def:"교만할"},{kor:"효",def:"부리 짧은 사냥개"}]},{id:6481,hanja:"胴",strokes:"10",def:{en:["the large intestine","the body"],kr:["큰","창자","동"]},hunum:[{kor:"동",def:"큰 창자"}]},{id:6482,hanja:"藁",strokes:"20",def:{en:["straw","hay","dry","withered"],kr:["마른","나무","고"]},hunum:[{kor:"고",def:"마른 나무"}]},{id:6483,hanja:"戇",strokes:"28",def:{en:["stupid","simple","simple"],kr:["어리석을","당"]},hunum:[{kor:"당",def:"어리석을"}]},{id:6484,hanja:"勢",strokes:"13",def:{en:["power","force","tendency"],kr:["기회","세"]},hunum:[{kor:"세",def:"권세"}]},{id:6485,hanja:"皜",strokes:"15",def:{en:["white","bright","clear","pure"],kr:["흰","모양","호"]},hunum:[{kor:"호",def:"흴"}]},{id:6486,hanja:"通",strokes:"11",def:{en:["pass through","common","communicate"],kr:["간음할","통"]},hunum:[{kor:"통",def:"뚫릴"}]},{id:6487,hanja:"勣",strokes:"13",def:{en:["achievements","conduct deserving"],kr:["사업","적"]},hunum:[{kor:"적",def:"공적"}]},{id:6488,hanja:"戈",strokes:"4",def:{en:["halberd","spear","lance","rad"],kr:["창","과"]},hunum:[{kor:"과",def:"창"}]},{id:6489,hanja:"驗",strokes:"23",def:{en:["test","examine","inspect","verify"],kr:["보람","험"]},hunum:[{kor:"험",def:"시험할"}]},{id:6490,hanja:"杷",strokes:"8",def:{en:["loquat"],kr:["악기이름","파"]},hunum:[{kor:"파",def:"비파나무"}]},{id:6491,hanja:"勤",strokes:"13",def:{en:["industrious","diligent","attentive"],kr:["부지런할","근"]},hunum:[{kor:"근",def:"부지런할"}]},{id:6492,hanja:"崟",strokes:"11",def:{en:["cliffs"],kr:["산","높을","음"]},hunum:[{kor:"음",def:"멧부리"}]},{id:6493,hanja:"胷",strokes:"10",def:{en:["breast","chest","thorax","clamor"],kr:["胸과","同字"]},hunum:[{kor:"흉",def:"가슴"}]},{id:6494,hanja:"皞",strokes:"15",def:{en:["bright","brilliant"],kr:["흴","호"]},hunum:[{kor:"호",def:"밝을"}]},{id:6495,hanja:"驘",strokes:"23",def:{en:["mule"],kr:["옹","솥","라"]},hunum:[{kor:"라",def:"옹 솥"}]},{id:6496,hanja:"戊",strokes:"5",def:{en:["fifth heavenly stem"],kr:["무성할","무"]},hunum:[{kor:"무",def:"다섯째 천간"}]},{id:6497,hanja:"胸",strokes:"10",def:{en:["breast","bosom","chest","thorax"],kr:["가슴","흉"]},hunum:[{kor:"흉",def:"가슴"}]},{id:6498,hanja:"逝",strokes:"11",def:{en:["pass away","die"],kr:["갈","서"]},hunum:[{kor:"서",def:"갈"}]},{id:6499,hanja:"謳",strokes:"18",def:{en:["to sing","songs"],kr:["읊조릴","구"]},hunum:[{kor:"구",def:"읊조릴"}]},{id:6500,hanja:"勦",strokes:"13",def:{en:["destroy","exterminate","annihilate"],kr:["수고롭게","할","초"]},hunum:[{kor:"초",def:"수고롭게 할"}]},{id:6501,hanja:"崢",strokes:"11",def:{en:["high","lofty","noble","steep","perilous"],kr:["산","높을","쟁"]},hunum:[{kor:"쟁",def:"가파를"}]},{id:6502,hanja:"逞",strokes:"11",def:{en:["indulge oneself","brag","show off"],kr:["굳셀","령"]},hunum:[{kor:"령",def:"굳셀"}]},{id:6503,hanja:"驚",strokes:"23",def:{en:["frighten","surprise","startle"],kr:["놀랄","경"]},hunum:[{kor:"경",def:"놀랄"}]},{id:6504,hanja:"戌",strokes:"6",def:{en:["eleventh terrestrial branch"],kr:["때려","부술","술"]},hunum:[{kor:"술",def:"개"}]},{id:6505,hanja:"速",strokes:"11",def:{en:["quick","prompt","speedy"],kr:["사슴","발자취","속"]},hunum:[{kor:"속",def:"빠를"}]},{id:6506,hanja:"驛",strokes:"23",def:{en:["relay station"],kr:["역말집","역"]},hunum:[{kor:"역",def:"잇닿을"}]},{id:6507,hanja:"杻",strokes:"8",def:{en:["ligustrum sinenese","tree"],kr:["조막손이","추"]},hunum:[{kor:"뉴",def:"옷 부드러울"},{kor:"추",def:"수갑"}]},{id:6508,hanja:"戍",strokes:"6",def:{en:["defend borders","guard frontiers"],kr:["집","수"]},hunum:[{kor:"수",def:"수자리"}]},{id:6509,hanja:"勧",strokes:"13",def:{en:["recommend","advise","urge"],kr:["勸의","略字"]},hunum:[{kor:"권",def:"권할"}]},{id:6510,hanja:"崤",strokes:"11",def:{en:["mountain in Henan"],kr:["산","이름","효"]},hunum:[{kor:"효",def:"산 이름"}]},{id:6511,hanja:"造",strokes:"11",def:{en:["construct","build","make","begin","prepare"],kr:["지을","조"]},hunum:[{kor:"조",def:"지을"}]},{id:6512,hanja:"杼",strokes:"8",def:{en:["shuttle of loom","narrow","long","a scrub oak","thin"],kr:["도토리","저"]},hunum:[{kor:"저",def:"북"}]},{id:6513,hanja:"戎",strokes:"6",def:{en:["arms","armaments","military affair"],kr:["서쪽","오랑캐","융"]},hunum:[{kor:"융",def:"병장기"}]},{id:6514,hanja:"勨",strokes:"14",def:{en:[],kr:["움직일","양"]},hunum:[{kor:"상",def:"느즈러질"},{kor:"양",def:"느즈러질"}]},{id:6515,hanja:"逡",strokes:"11",def:{en:["retreat","withdraw","fall back"],kr:["뒷걸음칠","준"]},hunum:[{kor:"준",def:"뒷걸음칠"}]},{id:6516,hanja:"謷",strokes:"18",def:{en:["slander","to revile","huge","big"],kr:["거만할","오"]},hunum:[{kor:"오",def:"중얼거릴"}]},{id:6517,hanja:"藉",strokes:"20",def:{en:["mat","pad","rely on","pretext"],kr:["임금이","가는","밭","적"]},hunum:[{kor:"자",def:"깔개"},{kor:"적",def:"어수선할"}]},{id:6518,hanja:"勩",strokes:"14",def:{en:["work hard","belabored","toil"],kr:["수고로울","이"]},hunum:[{kor:"예",def:"수고로울"},{kor:"이",def:"수고로울"}]},{id:6519,hanja:"皤",strokes:"17",def:{en:["white","grey","corpulent"],kr:["귀","밑에","희끗희끗할","파"]},hunum:[{kor:"파",def:"흴"}]},{id:6520,hanja:"逢",strokes:"11",def:{en:["come upon","happen meet","flatter"],kr:["만날","봉"]},hunum:[{kor:"봉",def:"만날"}]},{id:6521,hanja:"胼",strokes:"10",def:{en:["callus","calluses"],kr:["腁의","俗字"]},hunum:[{kor:"변",def:"살갗 틀"}]},{id:6522,hanja:"松",strokes:"8",def:{en:["pine tree","fir tree"],kr:["땅이름","송"]},hunum:[{kor:"송",def:"소나무"}]},{id:6523,hanja:"成",strokes:"7",def:{en:["completed","finished","fixed"],kr:["화목할","성"]},hunum:[{kor:"성",def:"이룰"}]},{id:6524,hanja:"汋",strokes:"6",def:{en:["to pour"],kr:["삶을","작"]},hunum:[{kor:"작",def:"삶을"}]},{id:6525,hanja:"崦",strokes:"11",def:{en:["a mountain in Kansu","where there is a cave into which the sun is said to sink at night"],kr:["해","지는","산","이름","엄"]},hunum:[{kor:"엄",def:"해 지는 산 이름"}]},{id:6526,hanja:"板",strokes:"8",def:{en:["plank","board","iron or tin plate"],kr:["풍류이름","판"]},hunum:[{kor:"판",def:"널조각"}]},{id:6527,hanja:"驟",strokes:"24",def:{en:["procedure","gallop","sudden"],kr:["별안간","취"]},hunum:[{kor:"취",def:"몰아갈"}]},{id:6528,hanja:"連",strokes:"11",def:{en:["join","connect","continuous","even"],kr:["잇닿을","련"]},hunum:[{kor:"련",def:"잇닿을"}]},{id:6529,hanja:"能",strokes:"10",def:{en:["to be able","can","permitted to","ability"],kr:["능할","능"]},hunum:[{kor:"내",def:"세 발 자라"},{kor:"능",def:"능할"}]},{id:6530,hanja:"謹",strokes:"18",def:{en:["prudent","cautious","attentive"],kr:["삼갈","근"]},hunum:[{kor:"근",def:"삼갈"}]},{id:6531,hanja:"我",strokes:"7",def:{en:["our","us","i","me","my","we"],kr:["자기","아"]},hunum:[{kor:"아",def:"자기"}]},{id:6532,hanja:"崧",strokes:"11",def:{en:["high mountain","lofty","eminent"],kr:["산이름","숭"]},hunum:[{kor:"숭",def:"산 불끈 솟을"}]},{id:6533,hanja:"胾",strokes:"12",def:{en:["minced meat","to cut meat into pieces"],kr:["고깃점","자"]},hunum:[{kor:"자",def:"고깃점"}]},{id:6534,hanja:"戒",strokes:"7",def:{en:["warn","caution","admonish"],kr:["경계할","계"]},hunum:[{kor:"계",def:"경계할"}]},{id:6535,hanja:"逥",strokes:"11",def:{en:["return","turn around","a time"]},hunum:[{kor:"회",def:"돌"}]},{id:6536,hanja:"藍",strokes:"20",def:{en:["blue","indigo plant","surname"],kr:["쪽","람"]},hunum:[{kor:"람",def:"쪽"}]},{id:6537,hanja:"汎",strokes:"6",def:{en:["float","drift","afloat","careless"],kr:["뜰","봉"]},hunum:[{kor:"범",def:"뜰"},{kor:"봉",def:"뜰"}]},{id:6538,hanja:"崩",strokes:"11",def:{en:["rupture","split apart","collapse"],kr:["무너질","붕"]},hunum:[{kor:"붕",def:"무너질"}]},{id:6539,hanja:"藎",strokes:"20",def:{en:["a kind of weed","faithfulness"],kr:["남을","신"]},hunum:[{kor:"신",def:"갈골"}]},{id:6540,hanja:"戔",strokes:"8",def:{en:["small","narrow","tiny","little"],kr:["쌓일","잔"]},hunum:[{kor:"잔",def:"쌓일"}]},{id:6541,hanja:"汏",strokes:"6",def:{en:[],kr:["씻을","대"]},hunum:[{kor:"대",def:"씻을"}]},{id:6542,hanja:"勮",strokes:"15",def:{en:[],kr:["두려울","거"]},hunum:[{kor:"거",def:"부지런히 힘쓸"}]},{id:6543,hanja:"戕",strokes:"8",def:{en:["kill","slay","wound","injure","hurt"],kr:["죽일","장"]},hunum:[{kor:"장",def:"죽일"}]},{id:6544,hanja:"驢",strokes:"26",def:{en:["donkey","ass"],kr:["나귀","려"]},hunum:[{kor:"려",def:"나귀"}]},{id:6545,hanja:"汐",strokes:"6",def:{en:["night tides","evening ebb tide"],kr:["조수","석"]},hunum:[{kor:"석",def:"조수"}]},{id:6546,hanja:"勯",strokes:"15",def:{en:["exhausted"],kr:["힘다할","단"]},hunum:[{kor:"단",def:"힘다할"}]},{id:6547,hanja:"或",strokes:"8",def:{en:["or","either","else","perhaps","maybe"],kr:["혹","혹"]},hunum:[{kor:"혹",def:"혹"}]},{id:6548,hanja:"勰",strokes:"15",def:{en:["peaceful","harmonious"],kr:["조화할","협"]},hunum:[{kor:"협",def:"생각할"}]},{id:6549,hanja:"藏",strokes:"20",def:{en:["hide","conceal","hoard","store up"],kr:["감출","장"]},hunum:[{kor:"장",def:"감출"}]},{id:6550,hanja:"謾",strokes:"18",def:{en:["deceive","insult"],kr:["속일","만"]},hunum:[{kor:"만",def:"속일"}]},{id:6551,hanja:"驤",strokes:"27",def:{en:["gallop about with head uplifted"],kr:["날뛰는","말","양"]},hunum:[{kor:"양",def:"날뛰는 말"}]},{id:6552,hanja:"藐",strokes:"20",def:{en:["disregard","slight","disdain"],kr:["작을","묘"]},hunum:[{kor:"묘",def:"작을"}]},{id:6553,hanja:"汒",strokes:"6",def:{en:[],kr:["황급할","망"]},hunum:[{kor:"망",def:"황급할"}]},{id:6554,hanja:"勱",strokes:"15",def:{en:["put forth effort","strive forward"],kr:["힘쓸","매"]},hunum:[{kor:"매",def:"힘쓸"}]},{id:6555,hanja:"勲",strokes:"15",def:{en:["meritorious deed","merits","rank"],kr:["勳의","俗字"]},hunum:[{kor:"훈",def:"공"}]},{id:6556,hanja:"皬",strokes:"21",def:{en:[],kr:["흴","학"]},hunum:[{kor:"학",def:"흴"}]},{id:6557,hanja:"驥",strokes:"27",def:{en:["thoroughbred horse","refined and"],kr:["천리마","기"]},hunum:[{kor:"기",def:"천리마"}]},{id:6558,hanja:"汔",strokes:"6",def:{en:[],kr:["거의","흘"]},hunum:[{kor:"흘",def:"거의"}]},{id:6559,hanja:"勳",strokes:"16",def:{en:["meritorious deed","merits","rank"],kr:["공","훈"]},hunum:[{kor:"훈",def:"공"}]},{id:6560,hanja:"皮",strokes:"5",def:{en:["skin","hide","fur","feather","outer"],kr:["성씨","피"]},hunum:[{kor:"피",def:"가죽"}]},{id:6561,hanja:"戚",strokes:"11",def:{en:["relative","be related to","sad"],kr:["겨레","척"]},hunum:[{kor:"척",def:"겨레"}]},{id:6562,hanja:"汕",strokes:"6",def:{en:["basket for catching fish","bamboo","Swatow"],kr:["오구","산"]},hunum:[{kor:"산",def:"오구"}]},{id:6563,hanja:"勴",strokes:"17",def:{en:[],kr:["마음으로","도울","려"]},hunum:[{kor:"려",def:"마음으로 도울"}]},{id:6564,hanja:"勵",strokes:"17",def:{en:["strive","encourage"],kr:["힘쓸","려"]},hunum:[{kor:"려",def:"힘쓸"}]},{id:6565,hanja:"驩",strokes:"28",def:{en:["happy","pleased","glad","joy","to enjoy"],kr:["기뻐할","환"]},hunum:[{kor:"환",def:"기뻐할"}]},{id:6566,hanja:"汗",strokes:"6",def:{en:["perspiration","sweat"],kr:["땀","한"]},hunum:[{kor:"한",def:"땀"}]},{id:6567,hanja:"逮",strokes:"12",def:{en:["seize","catch","reach","arrive"],kr:["쫓을","태"]},hunum:[{kor:"체",def:"미칠"},{kor:"태",def:"미칠"}]},{id:6568,hanja:"勶",strokes:"17",def:{en:[],kr:["사무칠","철"]},hunum:[{kor:"철",def:"버릴"}]},{id:6569,hanja:"埃",strokes:"10",def:{en:["fine dust","dirt"],kr:["속세","애"]},hunum:[{kor:"애",def:"티끌"}]},{id:6570,hanja:"藕",strokes:"21",def:{en:["lotus root"],kr:["연뿌리","우"]},hunum:[{kor:"우",def:"연뿌리"}]},{id:6571,hanja:"戝",strokes:"11",def:{en:["pirate","thief"]},hunum:[{kor:"적",def:"도둑"}]},{id:6572,hanja:"驪",strokes:"29",def:{en:["a pure black horse","a pair of horses"],kr:["가라말","려"]},hunum:[{kor:"려",def:"가라말"}]},{id:6573,hanja:"勷",strokes:"19",def:{en:["urgent","in haste","hurriedly","help"],kr:["급할","양"]},hunum:[{kor:"양",def:"급할"}]},{id:6574,hanja:"逰",strokes:"12",def:{en:["wander","roam","travel"],kr:["遊의","俗字"]},hunum:[{kor:"유",def:"놀"}]},{id:6575,hanja:"戞",strokes:"12",def:{en:["lance","tap or strike lightly"],kr:["창","알"]},hunum:[{kor:"알",def:"창"}]},{id:6576,hanja:"汙",strokes:"6",def:{en:["filthy","dirty","impure","polluted"],kr:["汚와","同字"]},hunum:[{kor:"오",def:"더러울"}]},{id:6577,hanja:"勸",strokes:"19",def:{en:["recommend","advise","urge"],kr:["권할","권"]},hunum:[{kor:"권",def:"권할"}]},{id:6578,hanja:"勹",strokes:"2",def:{en:["wrap","KangXi radical"],kr:["쌀","포"]},hunum:[{kor:"포",def:"꾸릴"}]},{id:6579,hanja:"週",strokes:"12",def:{en:["week","turn","cycle","anniversary"],kr:["돌","주"]},hunum:[{kor:"주",def:"돌"}]},{id:6580,hanja:"埆",strokes:"10",def:{en:["stony"],kr:["메마를","각"]},hunum:[{kor:"각",def:"메마를"}]},{id:6581,hanja:"戟",strokes:"12",def:{en:["halberd with crescent blade"],kr:["갈래진","창","극"]},hunum:[{kor:"극",def:"갈래진 창"}]},{id:6582,hanja:"汚",strokes:"6",def:{en:["filthy","dirty","impure","polluted"],kr:["웅덩이","오"]},hunum:[{kor:"오",def:"더러울"}]},{id:6583,hanja:"崴",strokes:"12",def:{en:["high","lofty","precipitous"],kr:["평평치","아니할","외"]},hunum:[{kor:"외",def:"평평치 아니할"}]},{id:6584,hanja:"進",strokes:"12",def:{en:["advance","make progress","enter"],kr:["나아갈","진"]},hunum:[{kor:"진",def:"나아갈"}]},{id:6585,hanja:"埇",strokes:"10",def:{en:["name of bridge"],kr:["길","돋울","용"]},hunum:[{kor:"용",def:"골목길"}]},{id:6586,hanja:"汛",strokes:"6",def:{en:["high water","flood tides"],kr:["물뿌릴","신"]},hunum:[{kor:"신",def:"물뿌릴"}]},{id:6587,hanja:"勺",strokes:"3",def:{en:["spoon","ladle","unit of volume"],kr:["구기","작"]},hunum:[{kor:"작",def:"구기"}]},{id:6588,hanja:"煆",strokes:"13",def:{en:["raging fire"],kr:["불사를","하"]},hunum:[{kor:"하",def:"불사를"}]},{id:6589,hanja:"皴",strokes:"12",def:{en:["chapped","cracked"],kr:["주름","준"]},hunum:[{kor:"준",def:"주름"}]},{id:6590,hanja:"埈",strokes:"10",def:{en:["high","steep","towering","stern"],kr:["가파를","준"]},hunum:[{kor:"준",def:"가파를"}]},{id:6591,hanja:"戡",strokes:"13",def:{en:["subjugate","subdue","quell","kill"],kr:["죽일","감"]},hunum:[{kor:"감",def:"찌를"}]},{id:6592,hanja:"汜",strokes:"6",def:{en:["a stream which leaves the main branch then later returns"],kr:["지류","사"]},hunum:[{kor:"사",def:"지류"}]},{id:6593,hanja:"勻",strokes:"4",def:{en:["equal","impartially","uniform","even"],kr:["적을","윤"]},hunum:[{kor:"균",def:"고를"},{kor:"윤",def:"가지런할"}]},{id:6594,hanja:"煇",strokes:"13",def:{en:["weld","solder"],kr:["빛날","휘"]},hunum:[{kor:"훈",def:"지질"},{kor:"휘",def:"빛날"}]},{id:6595,hanja:"埉",strokes:"10",def:{en:[]},hunum:[{kor:"협",def:"물가"}]},{id:6596,hanja:"逴",strokes:"12",def:{en:["argue","quarrel","squabble","far"],kr:["뛰어날","탁"]},hunum:[{kor:"탁",def:"멀"}]},{id:6597,hanja:"汝",strokes:"6",def:{en:["you"],kr:["물에","젖을","여"]},hunum:[{kor:"여",def:"물 이름"}]},{id:6598,hanja:"勼",strokes:"4",def:{en:[],kr:["모을","구"]},hunum:[{kor:"구",def:"모을"}]},{id:6599,hanja:"汞",strokes:"7",def:{en:["element mercury"],kr:["수은","홍"]},hunum:[{kor:"홍",def:"수은"}]},{id:6600,hanja:"戢",strokes:"13",def:{en:["to put away","to cease","store up"],kr:["그칠","집"]},hunum:[{kor:"집",def:"그칠"}]},{id:6601,hanja:"逵",strokes:"12",def:{en:["thoroughfare","crossroads"],kr:["구거리","규"]},hunum:[{kor:"규",def:"구거리"}]},{id:6602,hanja:"藜",strokes:"21",def:{en:["chenopodium album","pigweed"],kr:["나라","이름","려"]},hunum:[{kor:"려",def:"나라 이름"}]},{id:6603,hanja:"皶",strokes:"14",def:{en:[]},hunum:[{kor:"사",def:"여드름"}]},{id:6604,hanja:"勽",strokes:"4",def:{en:["to incubate","to brood","to hatch"],kr:["덮을","문"]},hunum:[{kor:"문",def:"덮을"}]},{id:6605,hanja:"埋",strokes:"10",def:{en:["bury","secrete","conceal"],kr:["묻을","매"]},hunum:[{kor:"매",def:"묻을"}]},{id:6606,hanja:"逶",strokes:"12",def:{en:["winding","curving","swagger"],kr:["비틀거릴","위"]},hunum:[{kor:"위",def:"비틀거릴"}]},{id:6607,hanja:"藝",strokes:"21",def:{en:["art","talent","ability","craft"],kr:["심을","예"]},hunum:[{kor:"예",def:"재주"}]},{id:6608,hanja:"煉",strokes:"13",def:{en:["smelt","refine","distill","condense"],kr:["불릴","련"]},hunum:[{kor:"련",def:"불릴"}]},{id:6609,hanja:"江",strokes:"6",def:{en:["large river","yangzi","surname"],kr:["물","강"]},hunum:[{kor:"강",def:"가람"}]},{id:6610,hanja:"勾",strokes:"4",def:{en:["hook","join","connect","entice"],kr:["句와","同字"]},hunum:[{kor:"구",def:"글귀절"},{kor:"귀",def:"글귀"}]},{id:6611,hanja:"煊",strokes:"13",def:{en:["warm"],kr:["따뜻할","훤"]},hunum:[{kor:"훤",def:"따뜻할"}]},{id:6612,hanja:"池",strokes:"6",def:{en:["pool","pond","moat","cistern"],kr:["물이름","타"]},hunum:[{kor:"지",def:"못"},{kor:"타",def:"물이름"}]},{id:6613,hanja:"驲",strokes:"7",def:{en:["post horse","relay horse"]},hunum:[{kor:"일",def:"역말"}]},{id:6614,hanja:"皸",strokes:"14",def:{en:["crack","chap"],kr:["얼어터질","군"]},hunum:[{kor:"군",def:"얼어터질"}]},{id:6615,hanja:"勿",strokes:"4",def:{en:["must not","do not","without","never"],kr:["깃발","물"]},hunum:[{kor:"몰",def:"없을"},{kor:"물",def:"말"}]},{id:6616,hanja:"污",strokes:"6",def:{en:["filthy","dirty","impure","polluted"],kr:["汚와","同字"]},hunum:[{kor:"오",def:"더러울"}]},{id:6617,hanja:"煌",strokes:"13",def:{en:["bright","shining","luminous"],kr:["빛날","황"]},hunum:[{kor:"황",def:"빛날"}]},{id:6618,hanja:"皺",strokes:"15",def:{en:["wrinkles","creases","folds"],kr:["쭈그러질","추"]},hunum:[{kor:"추",def:"쭈그러질"}]},{id:6619,hanja:"戦",strokes:"12",def:{en:["war","fighting","battle"],kr:["戰과","同字"]},hunum:[{kor:"전",def:"싸움"}]},{id:6620,hanja:"城",strokes:"9",def:{en:["castle","city","town","municipality"],kr:["서울","성"]},hunum:[{kor:"성",def:"보루"}]},{id:6621,hanja:"逸",strokes:"12",def:{en:["flee","escape","break loose"],kr:["달아날","일"]},hunum:[{kor:"일",def:"달아날"}]},{id:6622,hanja:"箇",strokes:"14",def:{en:["numerary adjunct","piece","single"],kr:["개수","개"]},hunum:[{kor:"개",def:"낱"}]},{id:6623,hanja:"戧",strokes:"14",def:{en:["support"],kr:["다칠","창"]},hunum:[{kor:"창",def:"다칠"}]},{id:6624,hanja:"崽",strokes:"12",def:{en:["a child","a servant","a diminutive"],kr:["저","재"]},hunum:[{kor:"재",def:"자식"}]},{id:6625,hanja:"埏",strokes:"10",def:{en:["a boundary","a limit"],kr:["땅","가장자리","연"]},hunum:[{kor:"연",def:"땅 가장자리"}]},{id:6626,hanja:"煎",strokes:"13",def:{en:["fry in fat or oil","boil in water"],kr:["불에","말릴","전"]},hunum:[{kor:"전",def:"달일"}]},{id:6627,hanja:"逺",strokes:"12",def:{en:["distant","remote","far","profound"],kr:["遠과","同字"]},hunum:[{kor:"원",def:"멀"}]},{id:6628,hanja:"埑",strokes:"10",def:{en:[],kr:["밝을","철"]},hunum:[{kor:"철",def:"밝을"}]},{id:6629,hanja:"齄",strokes:"23",def:{en:["red sores on nose"],kr:["코가","붉게","부을","차"]},hunum:[{kor:"차",def:"코가 붉게 부을"}]},{id:6630,hanja:"戩",strokes:"14",def:{en:["exterminate","destroy","blessing"]},hunum:[{kor:"전",def:"다할"}]},{id:6631,hanja:"逼",strokes:"13",def:{en:["compel","pressure","force","bother"],kr:["핍박학","핍"]},hunum:[{kor:"핍",def:"가까울"}]},{id:6632,hanja:"截",strokes:"14",def:{en:["cut off","stop","obstruct","intersect"],kr:["말","잘할","절"]},hunum:[{kor:"절",def:"끊을"}]},{id:6633,hanja:"箋",strokes:"14",def:{en:["note","memo","stationery","comments"],kr:["글","전"]},hunum:[{kor:"전",def:"기록할"}]},{id:6634,hanja:"埒",strokes:"10",def:{en:["enclosure","dike","embankment"],kr:["바자울","랄"]},hunum:[{kor:"랄",def:"바자울"}]},{id:6635,hanja:"藤",strokes:"21",def:{en:["rattan","cane","creeper plant"],kr:["등나무","등"]},hunum:[{kor:"등",def:"등나무"}]},{id:6636,hanja:"煐",strokes:"13",def:{en:[],kr:["빛날","영"]},hunum:[{kor:"영",def:"빛날"}]},{id:6637,hanja:"藥",strokes:"21",def:{en:["drugs","pharmaceuticals","medicine"],kr:["약","약"]},hunum:[{kor:"약",def:"약"}]},{id:6638,hanja:"皿",strokes:"5",def:{en:["shallow container","rad"],kr:["그릇","명"]},hunum:[{kor:"명",def:"그릇"}]},{id:6639,hanja:"煑",strokes:"13",def:{en:["cook"]},hunum:[{kor:"자",def:"삶을"}]},{id:6640,hanja:"逾",strokes:"13",def:{en:["go over","pass over","exceed"],kr:["지날","유"]},hunum:[{kor:"유",def:"갈"}]},{id:6641,hanja:"煒",strokes:"13",def:{en:["brilliant red","glowing"],kr:["환할","위"]},hunum:[{kor:"위",def:"벌그레할"}]},{id:6642,hanja:"箍",strokes:"14",def:{en:["hoop","bind","surround"],kr:["테","고"]},hunum:[{kor:"고",def:"테"}]},{id:6643,hanja:"汨",strokes:"7",def:{en:["Mi","to sink","used"],kr:["汩"]},hunum:[{kor:"골",def:"빠질"},{kor:"멱",def:"물이름"}]},{id:6644,hanja:"箎",strokes:"14",def:{en:["ancient woodwind instrument"],kr:["긴","대","호"]},hunum:[{kor:"호",def:"긴 대"}]},{id:6645,hanja:"汩",strokes:"7",def:{en:["run swiftly"],kr:["걸을","율"]},hunum:[{kor:"율",def:"물 흐를"}]},{id:6646,hanja:"箏",strokes:"14",def:{en:["stringed musical instrument","kite"],kr:["풍경","쟁"]},hunum:[{kor:"쟁",def:"쟁"}]},{id:6647,hanja:"戮",strokes:"15",def:{en:["kill","massacre","oppress"],kr:["죽일","륙"]},hunum:[{kor:"륙",def:"죽일"}]},{id:6648,hanja:"汪",strokes:"7",def:{en:["vast","extensive","deep","surname"],kr:["연못","왕"]},hunum:[{kor:"왕",def:"물 출렁출렁할"}]},{id:6649,hanja:"煕",strokes:"13",def:{en:["bright","splendid","glorious"],kr:["熙와","同字"]},hunum:[{kor:"희",def:"빛날"}]},{id:6650,hanja:"戯",strokes:"15",def:{en:["theatrical play","show"],kr:["戲의","俗字"]},hunum:[{kor:"휘",def:"기"},{kor:"희",def:"희롱할"}]},{id:6651,hanja:"齊",strokes:"14",def:{en:["even","uniform","of equal length"],kr:["가지런할","제"]},hunum:[{kor:"자",def:"상옷 아랫단할"},{kor:"제",def:"가지런할"}]},{id:6652,hanja:"藩",strokes:"21",def:{en:["fence","boundary","outlying border"],kr:["덮을","번"]},hunum:[{kor:"번",def:"덮을"}]},{id:6653,hanja:"戰",strokes:"16",def:{en:["war","fighting","battle"],kr:["경쟁할","전"]},hunum:[{kor:"전",def:"싸움"}]},{id:6654,hanja:"齋",strokes:"17",def:{en:["vegetarian diet","study","to fast","abstain"],kr:["집","재"]},hunum:[{kor:"재",def:"재계할"}]},{id:6655,hanja:"藪",strokes:"21",def:{en:["marsh","swamp","wild country","clump of trees or bushes"],kr:["똬리","수"]},hunum:[{kor:"수",def:"큰 늪"}]},{id:6656,hanja:"煖",strokes:"13",def:{en:["warm","genial"],kr:["따뜻할","난"]},hunum:[{kor:"난",def:"따뜻할"}]},{id:6657,hanja:"戱",strokes:"15",def:{en:["theatrical play"],kr:["戲의","俗字"]},hunum:[{kor:"휘",def:"기"},{kor:"희",def:"희롱할"}]},{id:6658,hanja:"箒",strokes:"14",def:{en:["broom"],kr:["비","추"]},hunum:[{kor:"추",def:"비"}]},{id:6659,hanja:"煗",strokes:"13",def:{en:[],kr:["터울","난"]},hunum:[{kor:"난",def:"터울"}]},{id:6660,hanja:"戲",strokes:"17",def:{en:["theatrical play","show"],kr:["탄식할","희"]},hunum:[{kor:"희",def:"탄식할"}]},{id:6661,hanja:"汭",strokes:"7",def:{en:["confluence of two streams","bend"],kr:["물","굽이","예"]},hunum:[{kor:"예",def:"물 이름"}]},{id:6662,hanja:"最",strokes:"12",def:{en:["most","extremely","exceedingly"],kr:["넉넉할","최"]},hunum:[{kor:"최",def:"가장"}]},{id:6663,hanja:"戳",strokes:"18",def:{en:["prick","stab","stamp","seal","chop"],kr:["창으로","찌를","착"]},hunum:[{kor:"착",def:"창으로 찌를"}]},{id:6664,hanja:"齎",strokes:"21",def:{en:["take in both hands and offer to"],kr:["가질","재"]},hunum:[{kor:"재",def:"탄식할"}]},{id:6665,hanja:"煙",strokes:"13",def:{en:["smoke","soot","opium","tobacco","cigarettes"],kr:["숯","그을음","인"]},hunum:[{kor:"연",def:"연기"},{kor:"인",def:"김"}]},{id:6666,hanja:"箔",strokes:"14",def:{en:["reed screen","frame for growing silkworms"],kr:["발","박"]},hunum:[{kor:"박",def:"발"}]},{id:6667,hanja:"齏",strokes:"23",def:{en:["break or smash into pieces","pulverize","hash"],kr:["회","제"]},hunum:[{kor:"제",def:"회"}]},{id:6668,hanja:"箕",strokes:"14",def:{en:["sieve","dust pan","garbage bag"],kr:["키","기"]},hunum:[{kor:"기",def:"키"}]},{id:6669,hanja:"戴",strokes:"18",def:{en:["wear on top","support"],kr:["받들","대"]},hunum:[{kor:"대",def:"받들"}]},{id:6670,hanja:"汰",strokes:"7",def:{en:["excessive","scour","wash out"],kr:["사치할","태"]},hunum:[{kor:"태",def:"미끄러울"}]},{id:6671,hanja:"戵",strokes:"22",def:{en:["a halberd"],kr:["창","구"]},hunum:[{kor:"구",def:"창"}]},{id:6672,hanja:"埜",strokes:"11",def:{en:["open country","field","wilderness"],kr:["들판","야"]},hunum:[{kor:"야",def:"들판"}]},{id:6673,hanja:"戶",strokes:"4",def:{en:["door","family","household"],kr:["지게","호"]},hunum:[{kor:"호",def:"지게"}]},{id:6674,hanja:"煜",strokes:"13",def:{en:["bright","shining","brilliant"],kr:["불빛","비칠","읍"]},hunum:[{kor:"욱",def:"비칠"},{kor:"읍",def:"비칠"}]},{id:6675,hanja:"算",strokes:"14",def:{en:["count","calculate","figure","plan"],kr:["셀","산"]},hunum:[{kor:"산",def:"셀"}]},{id:6676,hanja:"會",strokes:"13",def:{en:["to assemble","meet together","a meeting","an organization"],kr:["모일","회"]},hunum:[{kor:"괴",def:"그림"},{kor:"회",def:"모일"}]},{id:6677,hanja:"户",strokes:"4",def:{en:["door","family"]},hunum:[{kor:"호",def:"집"}]},{id:6678,hanja:"齒",strokes:"15",def:{en:["teeth","gears","cogs","age","KangXi radical"],kr:["같을","치"]},hunum:[{kor:"치",def:"이"}]},{id:6679,hanja:"汲",strokes:"7",def:{en:["draw water from well","imbibe"],kr:["길을","급"]},hunum:[{kor:"급",def:"길을"}]},{id:6680,hanja:"戸",strokes:"4",def:{en:["door","family"]},hunum:[{kor:"호",def:"집"}]},{id:6681,hanja:"箙",strokes:"14",def:{en:["quiver"],kr:["전동","복"]},hunum:[{kor:"복",def:"전동"}]},{id:6682,hanja:"朅",strokes:"14",def:{en:["brave"],kr:["갈","걸"]},hunum:[{kor:"걸",def:"갈"}]},{id:6683,hanja:"域",strokes:"11",def:{en:["district","region","boundary","land"],kr:["범위","역"]},hunum:[{kor:"역",def:"경계"}]},{id:6684,hanja:"汴",strokes:"7",def:{en:["name of a river in Henan","Henan"]},hunum:[{kor:"변",def:"물 이름"},{kor:"판",def:"물 이름"}]},{id:6685,hanja:"箚",strokes:"14",def:{en:["brief note","official communique"],kr:["차자","차"]},hunum:[{kor:"차",def:"차자"}]},{id:6686,hanja:"肄",strokes:"13",def:{en:["learn","practice","study","toil"],kr:["곁가지","이"]},hunum:[{kor:"이",def:"익힐"}]},{id:6687,hanja:"煞",strokes:"13",def:{en:["malignant deity","baleful","noxious","strike dead"],kr:["죽일","살"]},hunum:[{kor:"살",def:"죽일"}]},{id:6688,hanja:"戹",strokes:"5",def:{en:["In difficulty","distressed"],kr:["좁을","액"]},hunum:[{kor:"액",def:"좁을"}]},{id:6689,hanja:"埠",strokes:"11",def:{en:["port city"],kr:["선창","부"]},hunum:[{kor:"부",def:"선창"}]},{id:6690,hanja:"齔",strokes:"17",def:{en:["lose baby teeth and get adult teeth"],kr:["어릴","친"]},hunum:[{kor:"친",def:"이 갈"}]},{id:6691,hanja:"肅",strokes:"13",def:{en:["pay respects","reverently"],kr:["경계할","숙"]},hunum:[{kor:"숙",def:"공손할"}]},{id:6692,hanja:"齕",strokes:"18",def:{en:["gnaw","bite","nibble"],kr:["깨물","흘"]},hunum:[{kor:"흘",def:"깨물"}]},{id:6693,hanja:"諂",strokes:"15",def:{en:["flatter","truckle","toady"],kr:["아첨할","첨"]},hunum:[{kor:"첨",def:"아첨할"}]},{id:6694,hanja:"藴",strokes:"21",def:{en:["collect"],kr:["蘊의","俗字"]},hunum:[{kor:"온",def:"쌓을"}]},{id:6695,hanja:"肆",strokes:"13",def:{en:["indulge","excess","numeral four","particle meaning now","therefore","shop"],kr:["방자할","사"]},hunum:[{kor:"사",def:"방자할"}]},{id:6696,hanja:"箜",strokes:"14",def:{en:["ancient string music instrument"],kr:["공후","공"]},hunum:[{kor:"공",def:"공후"}]},{id:6697,hanja:"戻",strokes:"7",def:{en:["perverse"]},hunum:[{kor:"려",def:"수레 옆문"},{kor:"렬",def:"돌릴"},{kor:"태",def:"어그러질"}]},{id:6698,hanja:"汶",strokes:"7",def:{en:["a river in Shandong province"],kr:["수치","문"]},hunum:[{kor:"문",def:"내 이름"}]},{id:6699,hanja:"月",strokes:"4",def:{en:["moon","month","KangXi radical"],kr:["달","월"]},hunum:[{kor:"월",def:"달"}]},{id:6700,hanja:"肇",strokes:"14",def:{en:["begin","commence","originate"],kr:["비롯할","조"]},hunum:[{kor:"조",def:"비롯할"}]},{id:6701,hanja:"箝",strokes:"14",def:{en:["tweezers","pliers","tongs","pincers"],kr:["목","잠글","겸"]},hunum:[{kor:"겸",def:"재갈"}]},{id:6702,hanja:"有",strokes:"6",def:{en:["have","own","possess","exist"],kr:["또","유"]},hunum:[{kor:"유",def:"있을"}]},{id:6703,hanja:"锜",strokes:"13",def:{en:["a kind of pen","a kind of chisel"],kr:["錡와","同字"]},hunum:[{kor:"기",def:"세발 가마"},{kor:"의",def:"쇠뇌 틀"}]},{id:6704,hanja:"齗",strokes:"19",def:{en:["gums","to dispute"],kr:["미워할","은"]},hunum:[{kor:"은",def:"잇몸"}]},{id:6705,hanja:"煢",strokes:"13",def:{en:["alone","no friends or relatives"],kr:["외로울","경"]},hunum:[{kor:"경",def:"외로울"}]},{id:6706,hanja:"埤",strokes:"11",def:{en:["add","increase","attach","low fence"],kr:["더할","비"]},hunum:[{kor:"비",def:"더할"}]},{id:6707,hanja:"藷",strokes:"22",def:{en:["yam","tuber","potato"],kr:["감자","저"]},hunum:[{kor:"저",def:"마"}]},{id:6708,hanja:"肉",strokes:"6",def:{en:["flesh","meat","KangXi radical"],kr:["몸","육"]},hunum:[{kor:"유",def:"둘레"},{kor:"육",def:"고기"}]},{id:6709,hanja:"諄",strokes:"15",def:{en:["patient","earnest","earnestly"],kr:["지극할","순"]},hunum:[{kor:"순",def:"거듭 일러줄"}]},{id:6710,hanja:"戾",strokes:"8",def:{en:["perverse","recalcitrant","rebellious"],kr:["휘어질","렬"]},hunum:[{kor:"려",def:"여그러질"},{kor:"렬",def:"어그러질"}]},{id:6711,hanja:"朋",strokes:"8",def:{en:["friend","pal","acquaintance"],kr:["벗","붕"]},hunum:[{kor:"붕",def:"벗"}]},{id:6712,hanja:"齙",strokes:"20",def:{en:["projecting teeth"],kr:["이","드러날","포"]},hunum:[{kor:"포",def:"이 드러날"}]},{id:6713,hanja:"箠",strokes:"14",def:{en:["horse whip","flog"],kr:["볼기채","추"]},hunum:[{kor:"추",def:"채찍"}]},{id:6714,hanja:"煤",strokes:"13",def:{en:["coal","coke","charcoal","carbon"],kr:["그을음","매"]},hunum:[{kor:"매",def:"그을음"}]},{id:6715,hanja:"房",strokes:"8",def:{en:["house","building","room"],kr:["방","방"]},hunum:[{kor:"방",def:"방"}]},{id:6716,hanja:"決",strokes:"7",def:{en:["decide","determine","judge"],kr:["이별할","결"]},hunum:[{kor:"결",def:"결단할"}]},{id:6717,hanja:"朌",strokes:"8",def:{en:["distribute","large head"],kr:["頒과","同字"]},hunum:[{kor:"반",def:"구실"},{kor:"분",def:"머리 클"}]},{id:6718,hanja:"煥",strokes:"13",def:{en:["shining","brilliant","lustrous"],kr:["불꽃","환"]},hunum:[{kor:"환",def:"불꽃"}]},{id:6719,hanja:"藹",strokes:"22",def:{en:["lush","affable","friendly"],kr:["화기로울","애"]},hunum:[{kor:"애",def:"화기로울"}]},{id:6720,hanja:"肋",strokes:"6",def:{en:["ribs","chest"],kr:["갈비","륵"]},hunum:[{kor:"륵",def:"갈비"}]},{id:6721,hanja:"管",strokes:"14",def:{en:["pipe","tube","duct","woodwind music"],kr:["피리","관"]},hunum:[{kor:"관",def:"피리"}]},{id:6722,hanja:"服",strokes:"8",def:{en:["clothes","wear","dress"],kr:["옷","복"]},hunum:[{kor:"복",def:"옷"}]},{id:6723,hanja:"煦",strokes:"13",def:{en:["kind","gentle","gracious","genial"],kr:["따뜻하게","할","후"]},hunum:[{kor:"후",def:"따뜻하게 할"}]},{id:6724,hanja:"藺",strokes:"22",def:{en:["rush used in making mats","surname"],kr:["골풀","린"]},hunum:[{kor:"린",def:"골풀"}]},{id:6725,hanja:"肌",strokes:"6",def:{en:["muscle tissue","meat on bones"],kr:["살","기"]},hunum:[{kor:"기",def:"살"}]},{id:6726,hanja:"談",strokes:"15",def:{en:["talk","conversation","surname"],kr:["말씀","담"]},hunum:[{kor:"담",def:"말씀"}]},{id:6727,hanja:"藻",strokes:"22",def:{en:["splendid","magnificent","algae"],kr:["조류","조"]},hunum:[{kor:"조",def:"조류"}]},{id:6728,hanja:"照",strokes:"13",def:{en:["shine","illumine","reflect"],kr:["비출","조"]},hunum:[{kor:"조",def:"비출"}]},{id:6729,hanja:"齜",strokes:"20",def:{en:["to show the teeth","crooked teeth"],kr:["이를","갈","차"]},hunum:[{kor:"재",def:"이 갈"},{kor:"차",def:"이를 갈"}]},{id:6730,hanja:"汽",strokes:"7",def:{en:["steam","vapor","gas"],kr:["汔과","同字"]},hunum:[{kor:"기",def:"김"},{kor:"흘",def:"거의"}]},{id:6731,hanja:"諉",strokes:"15",def:{en:["pass buck","lay blame on others"],kr:["버릴","위"]},hunum:[{kor:"위",def:"핑계할"}]},{id:6732,hanja:"煨",strokes:"13",def:{en:["to stew","simmer"],kr:["사람이름","외"]},hunum:[{kor:"외",def:"불에 묻어 구울"}]},{id:6733,hanja:"汾",strokes:"7",def:{en:["river in Shanxi province"],kr:["클","분"]},hunum:[{kor:"분",def:"클"}]},{id:6734,hanja:"藽",strokes:"22",def:{en:[]},hunum:[{kor:"친",def:"무궁화"}]},{id:6735,hanja:"煩",strokes:"13",def:{en:["bother","vex","trouble","troublesome"],kr:["괴로워할","번"]},hunum:[{kor:"번",def:"괴로워할"}]},{id:6736,hanja:"請",strokes:"15",def:{en:["ask","request","invite","please"],kr:["청할","청"]},hunum:[{kor:"청",def:"청할"}]},{id:6737,hanja:"齟",strokes:"20",def:{en:["irregular teeth","discord"],kr:["이","어긋날","저"]},hunum:[{kor:"저",def:"이 어긋날"}]},{id:6738,hanja:"埭",strokes:"11",def:{en:["a dam","a jock","inclined plane on a canal","where boats can be hauled up or down"],kr:["보뚝","태"]},hunum:[{kor:"태",def:"보뚝"}]},{id:6739,hanja:"齠",strokes:"20",def:{en:["lose baby teeth and get adult teeth"],kr:["이를","갈","초"]},hunum:[{kor:"초",def:"이를 갈"}]},{id:6740,hanja:"藿",strokes:"22",def:{en:["lophanthus rugosus","betony"],kr:["콩잎","곽"]},hunum:[{kor:"곽",def:"콩잎"}]},{id:6741,hanja:"諍",strokes:"15",def:{en:["to expostulate","to remonstrate"],kr:["간할","쟁"]},hunum:[{kor:"쟁",def:"간할"}]},{id:6742,hanja:"劀",strokes:"14",def:{en:[],kr:["궂은","살을","잘라낼","괄"]},hunum:[{kor:"괄",def:"궂은 살을 잘라낼"}]},{id:6743,hanja:"齡",strokes:"20",def:{en:["age","years"],kr:["나이","령"]},hunum:[{kor:"령",def:"나이"}]},{id:6744,hanja:"煬",strokes:"13",def:{en:["roast","scorch","melt","flame"],kr:["구울","양"]},hunum:[{kor:"양",def:"구울"}]},{id:6745,hanja:"朔",strokes:"10",def:{en:["first day of lunar month","the north"],kr:["초하루","삭"]},hunum:[{kor:"삭",def:"초하루"}]},{id:6746,hanja:"肓",strokes:"7",def:{en:["region between heart and diaphragm"],kr:["명치","끝","황"]},hunum:[{kor:"황",def:"명치 끝"}]},{id:6747,hanja:"朕",strokes:"10",def:{en:["pronoun"],kr:["나","짐"]},hunum:[{kor:"짐",def:"나"}]},{id:6748,hanja:"諏",strokes:"15",def:{en:["consult","confer","select","choose"],kr:["물을","추"]},hunum:[{kor:"추",def:"꾀할"}]},{id:6749,hanja:"齣",strokes:"20",def:{en:["act","stanza","time","occasion"],kr:["단락","척"]},hunum:[{kor:"척",def:"단락"}]},{id:6750,hanja:"埰",strokes:"11",def:{en:["fief"],kr:["영지","채"]},hunum:[{kor:"채",def:"영지"}]},{id:6751,hanja:"劂",strokes:"14",def:{en:["chisel for engraving","engrave"]},hunum:[{kor:"궤",def:"새김칼"}]},{id:6752,hanja:"煮",strokes:"12",def:{en:["cook"],kr:["삶을","자"]},hunum:[{kor:"자",def:"삶을"}]},{id:6753,hanja:"劃",strokes:"14",def:{en:["divide","mark off","lay boundary"],kr:["쪼갤","획"]},hunum:[{kor:"획",def:"쪼갤"}]},{id:6754,hanja:"箪",strokes:"14",def:{en:["small bamboo basket for holding"],kr:["밥그릇","단"]},hunum:[{kor:"단",def:"밥그릇"}]},{id:6755,hanja:"諑",strokes:"15",def:{en:["slander","gossip","rumors"],kr:["헐뜯을","착"]},hunum:[{kor:"착",def:"헐뜯을"}]},{id:6756,hanja:"劄",strokes:"14",def:{en:["brief note","official communique"],kr:["차자","차"]},hunum:[{kor:"차",def:"차자"}]},{id:6757,hanja:"肖",strokes:"7",def:{en:["look like","resemble","be like"],kr:["닮을","초"]},hunum:[{kor:"소",def:"쇠약할"},{kor:"초",def:"닮을"}]},{id:6758,hanja:"朗",strokes:"11",def:{en:["clear","bright","distinct"],kr:["밝을","랑"]},hunum:[{kor:"랑",def:"밝을"}]},{id:6759,hanja:"峀",strokes:"8",def:{en:["mountain peak","cave","cavern"],kr:["岫와","同字"]},hunum:[{kor:"수",def:"산굴"}]},{id:6760,hanja:"齦",strokes:"21",def:{en:["gums"],kr:["물을","간"]},hunum:[{kor:"간",def:"물을"}]},{id:6761,hanja:"諒",strokes:"15",def:{en:["excuse","forgive","guess","presume"],kr:["믿을","량"]},hunum:[{kor:"량",def:"믿을"}]},{id:6762,hanja:"埳",strokes:"11",def:{en:["a pit","a hole","a snare","a danger","a crisis","a mortar"],kr:["구덩이","감"]},hunum:[{kor:"감",def:"구덩이"}]},{id:6763,hanja:"肘",strokes:"7",def:{en:["the elbow","help a person shoulder a load"],kr:["팔꿈치","주"]},hunum:[{kor:"주",def:"팔꿈치"}]},{id:6764,hanja:"箭",strokes:"15",def:{en:["arrow","type of bamboo"],kr:["약이름","전"]},hunum:[{kor:"전",def:"화살"}]},{id:6765,hanja:"齧",strokes:"21",def:{en:["bite","gnaw","wear down","erode"],kr:["물","설"]},hunum:[{kor:"설",def:"물"}]},{id:6766,hanja:"埴",strokes:"11",def:{en:["soil with large clay content"],kr:["흙","이길","치"]},hunum:[{kor:"식",def:"찰진흙"},{kor:"치",def:"찰진흙"}]},{id:6767,hanja:"劇",strokes:"15",def:{en:["theatrical plays","opera","drama"],kr:["심할","극"]},hunum:[{kor:"극",def:"심할"}]},{id:6768,hanja:"望",strokes:"11",def:{en:["to look at","look forward","to hope","expect"],kr:["바랄","망"]},hunum:[{kor:"망",def:"바랄"}]},{id:6769,hanja:"齪",strokes:"22",def:{en:["narrow","small","dirty"],kr:["악착할","착"]},hunum:[{kor:"착",def:"악착할"}]},{id:6770,hanja:"執",strokes:"11",def:{en:["hold in hand","keep","carry out"],kr:["잡을","집"]},hunum:[{kor:"집",def:"잡을"}]},{id:6771,hanja:"劈",strokes:"15",def:{en:["cut apart","split","chop"],kr:["쪼갤","벽"]},hunum:[{kor:"벽",def:"쪼갤"}]},{id:6772,hanja:"肚",strokes:"7",def:{en:["belly","abdomen","bowels"],kr:["밥통","두"]},hunum:[{kor:"두",def:"밥통"}]},{id:6773,hanja:"論",strokes:"15",def:{en:["debate","discuss","discourse"],kr:["차례","륜"]},hunum:[{kor:"론",def:"말할"},{kor:"윤",def:"차례"}]},{id:6774,hanja:"療",strokes:"17",def:{en:["be healed","cured","recover"],kr:["병고칠","료"]},hunum:[{kor:"료",def:"병고칠"}]},{id:6775,hanja:"肛",strokes:"7",def:{en:["anus"],kr:["배","뚱뚱할","항"]},hunum:[{kor:"항",def:"똥구멍"}]},{id:6776,hanja:"朝",strokes:"12",def:{en:["dynasty","morning"],kr:["아침","조"]},hunum:[{kor:"조",def:"아침"}]},{id:6777,hanja:"劉",strokes:"15",def:{en:["surname","kill","destroy"],kr:["죽일","류"]},hunum:[{kor:"류",def:"죽일"}]},{id:6778,hanja:"齫",strokes:"22",def:{en:[],kr:["이","빠질","곤"]},hunum:[{kor:"곤",def:"이 빠질"}]},{id:6779,hanja:"諗",strokes:"15",def:{en:["consult carefully with","counsel"],kr:["꾀할","심"]},hunum:[{kor:"심",def:"고할"}]},{id:6780,hanja:"箱",strokes:"15",def:{en:["case","box","chest","trunk"],kr:["상자","상"]},hunum:[{kor:"상",def:"상자"}]},{id:6781,hanja:"癃",strokes:"17",def:{en:["weakness","infirmity retention of urine"],kr:["느른할","륭"]},hunum:[{kor:"륭",def:"느른할"}]},{id:6782,hanja:"劊",strokes:"15",def:{en:["amputate","cut off"],kr:["끊을","회"]},hunum:[{kor:"회",def:"끊을"}]},{id:6783,hanja:"齬",strokes:"22",def:{en:["uneven teeth","to disagree"],kr:["이","어긋날","어"]},hunum:[{kor:"어",def:"이 어긋날"}]},{id:6784,hanja:"朞",strokes:"12",def:{en:["full year","anniversary"],kr:["돌","기"]},hunum:[{kor:"기",def:"돌"}]},{id:6785,hanja:"培",strokes:"11",def:{en:["bank up with dirt","cultivate"],kr:["무덤","부"]},hunum:[{kor:"배",def:"북돋을"},{kor:"부",def:"무덤"}]},{id:6786,hanja:"劋",strokes:"15",def:{en:[],kr:["끊을","조"]},hunum:[{kor:"조",def:"끊을"}]},{id:6787,hanja:"肝",strokes:"7",def:{en:["liver"],kr:["간","간"]},hunum:[{kor:"간",def:"간"}]},{id:6788,hanja:"期",strokes:"12",def:{en:["period of time","date","time limit"],kr:["기약할","기"]},hunum:[{kor:"기",def:"기약할"}]},{id:6789,hanja:"箴",strokes:"15",def:{en:["needle","probe","admon"],kr:["바늘","잠"]},hunum:[{kor:"잠",def:"바늘"}]},{id:6790,hanja:"劌",strokes:"15",def:{en:["to cut","injure","stab","stick on"],kr:["상할","귀"]},hunum:[{kor:"귀",def:"상할"}]},{id:6791,hanja:"癆",strokes:"17",def:{en:["consumption","tuberculosis"],kr:["종독","로"]},hunum:[{kor:"로",def:"종독"}]},{id:6792,hanja:"基",strokes:"11",def:{en:["foundation","base"],kr:["터","기"]},hunum:[{kor:"기",def:"터"}]},{id:6793,hanja:"埻",strokes:"11",def:{en:[],kr:["과녘","준"]},hunum:[{kor:"준",def:"과녘"}]},{id:6794,hanja:"劍",strokes:"15",def:{en:["sword","dagger","saber"],kr:["칼","쓰는법","검"]},hunum:[{kor:"검",def:"칼"}]},{id:6795,hanja:"锳",strokes:"14",def:{en:[],kr:["鍈과","同字"]},hunum:[{kor:"영",def:"밥울 소리"}]},{id:6796,hanja:"諛",strokes:"16",def:{en:["flatter","truckle"],kr:["아첨할","유"]},hunum:[{kor:"유",def:"아첨할"}]},{id:6797,hanja:"癈",strokes:"17",def:{en:["abrogate","terminate","discard"],kr:["고질병","폐"]},hunum:[{kor:"폐",def:"고질병"}]},{id:6798,hanja:"諜",strokes:"16",def:{en:["an intelligence report","to spy","spying"],kr:["염탐할","첩"]},hunum:[{kor:"첩",def:"염탐할"}]},{id:6799,hanja:"劎",strokes:"15",def:{en:["sword","dagger"],kr:["劍과","同字"]},hunum:[{kor:"검",def:"칼"}]},{id:6800,hanja:"騁",strokes:"17",def:{en:["gallop horse","hasten","hurry"],kr:["달리다","빙"]},hunum:[{kor:"빙",def:"달리다"}]},{id:6801,hanja:"埼",strokes:"11",def:{en:["headland"],kr:["崎와","同字"]},hunum:[{kor:"기",def:"갑"}]},{id:6802,hanja:"峋",strokes:"9",def:{en:["ranges of hills stretching on beyond another irregular peaks"],kr:["후미질","순"]},hunum:[{kor:"순",def:"후미질"}]},{id:6803,hanja:"騂",strokes:"17",def:{en:["red","brown","bay","neat","harmonious"],kr:["활","물쩡물쩡할","성"]},hunum:[{kor:"성",def:"붉은 소"}]},{id:6804,hanja:"股",strokes:"8",def:{en:["thighs","haunches","rump","share"],kr:["넓적다리","고"]},hunum:[{kor:"고",def:"넓적다리"}]},{id:6805,hanja:"諝",strokes:"16",def:{en:["knowledge","discrimination","treachery"],kr:["슬기","서"]},hunum:[{kor:"서",def:"슬기"}]},{id:6806,hanja:"癉",strokes:"17",def:{en:["to hate bitterly","drought","dry"],kr:["황달","단"]},hunum:[{kor:"단",def:"황달"}]},{id:6807,hanja:"朣",strokes:"16",def:{en:["the rising moon"],kr:["달","뜰","동"]},hunum:[{kor:"동",def:"달 뜰"}]},{id:6808,hanja:"埽",strokes:"11",def:{en:["broom","to sweep","clear away"],kr:["언덕","소"]},hunum:[{kor:"소",def:"쓸"}]},{id:6809,hanja:"劐",strokes:"16",def:{en:["destroy"],kr:["끊을","확"]},hunum:[{kor:"확",def:"끊을"}]},{id:6810,hanja:"諞",strokes:"16",def:{en:["brag","boast","quibble"],kr:["공교한","말","편"]},hunum:[{kor:"편",def:"공교한 말"}]},{id:6811,hanja:"肢",strokes:"8",def:{en:["human limbs","animal feet"],kr:["사지","지"]},hunum:[{kor:"지",def:"사지"}]},{id:6812,hanja:"箸",strokes:"15",def:{en:["chopsticks"],kr:["젓가락","저"]},hunum:[{kor:"저",def:"젓가락"}]},{id:6813,hanja:"齲",strokes:"24",def:{en:["tooth decay"],kr:["충치","우"]},hunum:[{kor:"우",def:"충치"}]},{id:6814,hanja:"騃",strokes:"17",def:{en:["stupid","foolish"],kr:["말달릴","애"]},hunum:[{kor:"애",def:"어리석을"}]},{id:6815,hanja:"煽",strokes:"14",def:{en:["stir up","incite","agitate","provoke"],kr:["부칠","선"]},hunum:[{kor:"선",def:"부칠"}]},{id:6816,hanja:"劑",strokes:"16",def:{en:["medicinal preparation"],kr:["약","지을","제"]},hunum:[{kor:"제",def:"약 지을"}]},{id:6817,hanja:"騄",strokes:"18",def:{en:["name of a legendary swift horse"],kr:["말이름","록"]},hunum:[{kor:"록",def:"말이름"}]},{id:6818,hanja:"諟",strokes:"16",def:{en:["to examine","to consider","honest"],kr:["다스릴","시"]},hunum:[{kor:"시",def:"이"}]},{id:6819,hanja:"諠",strokes:"16",def:{en:["noisy","uproarious","forget"],kr:["잊을","훤"]},hunum:[{kor:"훤",def:"잊을"}]},{id:6820,hanja:"騅",strokes:"18",def:{en:["piebald horse"],kr:["청부루말","추"]},hunum:[{kor:"추",def:"청부루말"}]},{id:6821,hanja:"劒",strokes:"16",def:{en:["sword","dagger","saber"],kr:["劎의","譌字"]},hunum:[{kor:"검",def:"칼"}]},{id:6822,hanja:"癌",strokes:"17",def:{en:["cancer","marmoset"],kr:["종양","암"]},hunum:[{kor:"암",def:"종양"}]},{id:6823,hanja:"朦",strokes:"18",def:{en:["condition or appearance of moon"],kr:["풍부할","몽"]},hunum:[{kor:"몽",def:"풍부할"}]},{id:6824,hanja:"劓",strokes:"16",def:{en:["cut off nose"],kr:["베일","의"]},hunum:[{kor:"의",def:"코 베일"}]},{id:6825,hanja:"肥",strokes:"8",def:{en:["fat","plump","obese","fertile"],kr:["살찔","비"]},hunum:[{kor:"비",def:"살찔"}]},{id:6826,hanja:"諡",strokes:"16",def:{en:["posthumous name","posthumous title"],kr:["시호","시"]},hunum:[{kor:"시",def:"행장"}]},{id:6827,hanja:"朧",strokes:"20",def:{en:["condition or appearance of moon"],kr:["흐릿할","롱"]},hunum:[{kor:"롱",def:"흐릿할"}]},{id:6828,hanja:"锺",strokes:"14",def:{en:["cup","glass","goblet","surname"],kr:["술병","종"]},hunum:[{kor:"종",def:"술병"}]},{id:6829,hanja:"劔",strokes:"16",def:{en:["sword","dagger","saber"],kr:["劎의","俗字"]},hunum:[{kor:"검",def:"칼"}]},{id:6830,hanja:"肦",strokes:"8",def:{en:["large head","many","high","to divide","to distribute"],kr:["머리","클","분"]},hunum:[{kor:"반",def:"나눌"},{kor:"분",def:"머리 클"}]},{id:6831,hanja:"諢",strokes:"16",def:{en:["jokes","obscene jests","joke"],kr:["농담","원"]},hunum:[{kor:"원",def:"농담"}]},{id:6832,hanja:"癎",strokes:"17",def:{en:["epilepsy","convulsions"],kr:["경풍","간"]},hunum:[{kor:"간",def:"경풍"}]},{id:6833,hanja:"木",strokes:"4",def:{en:["tree","wood","lumber","wooden"],kr:["나무","목"]},hunum:[{kor:"모",def:"나무에 서화를 새길"},{kor:"목",def:"나무"}]},{id:6834,hanja:"齶",strokes:"24",def:{en:["palate","roof of mouth"],kr:["잇몸","악"]},hunum:[{kor:"악",def:"잇몸"}]},{id:6835,hanja:"騈",strokes:"18",def:{en:["team of horses","associate"],kr:["나란히","할","병"]},hunum:[{kor:"변",def:"나란히 할"},{kor:"병",def:"나란히 할"}]},{id:6836,hanja:"朩",strokes:"4",def:{en:["kwukyel","grade","wait","equal"]},hunum:[{kor:"빈",def:"삼줄기 껍질"}]},{id:6837,hanja:"劖",strokes:"19",def:{en:["make into mince","cut"],kr:["새길","참"]},hunum:[{kor:"참",def:"새길"}]},{id:6838,hanja:"齷",strokes:"24",def:{en:["narrow","small","dirty"],kr:["악착할","악"]},hunum:[{kor:"악",def:"악착할"}]},{id:6839,hanja:"箾",strokes:"15",def:{en:["musical instrument like pan","bamboo flute"],kr:["상소","소"]},hunum:[{kor:"소",def:"상소"}]},{id:6840,hanja:"未",strokes:"5",def:{en:["not yet","eigth terrestrial branch"],kr:["아닐","미"]},hunum:[{kor:"미",def:"아닐"}]},{id:6841,hanja:"劗",strokes:"21",def:{en:[],kr:["끊을","찬"]},hunum:[{kor:"찬",def:"끊을"}]},{id:6842,hanja:"峒",strokes:"9",def:{en:["mountain in Gansu province"],kr:["산이름","동"]},hunum:[{kor:"동",def:"산이름"}]},{id:6843,hanja:"锽",strokes:"14",def:{en:["weapon"],kr:["쇠북소리","굉"]},hunum:[{kor:"굉",def:"쇠북소리"}]},{id:6844,hanja:"肩",strokes:"8",def:{en:["shoulders","to shoulder","bear"],kr:["세","살","된","짐승","견"]},hunum:[{kor:"견",def:"어깨"}]},{id:6845,hanja:"諤",strokes:"16",def:{en:["honest speech","straightforward"],kr:["직언할","악"]},hunum:[{kor:"악",def:"직언할"}]},{id:6846,hanja:"末",strokes:"5",def:{en:["final","last","end","insignificant"],kr:["끝","말"]},hunum:[{kor:"말",def:"끝"}]},{id:6847,hanja:"劘",strokes:"21",def:{en:["make into mince"],kr:["깍을","마"]},hunum:[{kor:"마",def:"깍을"}]},{id:6848,hanja:"騋",strokes:"18",def:{en:["tall"],kr:["큰","말","래"]},hunum:[{kor:"래",def:"큰 말"}]},{id:6849,hanja:"肪",strokes:"8",def:{en:["animal fat"],kr:["기름","방"]},hunum:[{kor:"방",def:"기름"}]},{id:6850,hanja:"本",strokes:"5",def:{en:["root","origin","source","basis"],kr:["밑","본"]},hunum:[{kor:"본",def:"밑"}]},{id:6851,hanja:"諦",strokes:"16",def:{en:["careful","attentive"],kr:["살필","체"]},hunum:[{kor:"체",def:"살필"}]},{id:6852,hanja:"札",strokes:"5",def:{en:["letter","note","correspondence"],kr:["패","찰"]},hunum:[{kor:"찰",def:"패"}]},{id:6853,hanja:"劙",strokes:"23",def:{en:["a divide","to partition"],kr:["가를","리"]},hunum:[{kor:"례",def:"가를"},{kor:"리",def:"가를"}]},{id:6854,hanja:"肫",strokes:"8",def:{en:["the gizzard of a fowl","honest","sincere"],kr:["정성스러울","순"]},hunum:[{kor:"순",def:"광대뼈"}]},{id:6855,hanja:"癒",strokes:"18",def:{en:["get well","recover"],kr:["병들","유"]},hunum:[{kor:"유",def:"병 나을"}]},{id:6856,hanja:"諧",strokes:"16",def:{en:["harmonize","agree","joke","jest"],kr:["고를","해"]},hunum:[{kor:"해",def:"조화할"}]},{id:6857,hanja:"朮",strokes:"5",def:{en:["skill","art","method","trick","device"],kr:["삽주뿌리","출"]},hunum:[{kor:"출",def:"삽주뿌리"}]},{id:6858,hanja:"劚",strokes:"23",def:{en:["cut"],kr:["깎을","촉"]},hunum:[{kor:"촉",def:"깎을"}]},{id:6859,hanja:"騍",strokes:"18",def:{en:["mother horse"],kr:["암말","과"]},hunum:[{kor:"과",def:"암말"}]},{id:6860,hanja:"术",strokes:"5",def:{en:["art","skill","special feat","method","technique"]},hunum:[{kor:"출",def:"차조"}]},{id:6861,hanja:"力",strokes:"2",def:{en:["power","capability","influence"],kr:["힘","력"]},hunum:[{kor:"력",def:"힘"}]},{id:6862,hanja:"騎",strokes:"18",def:{en:["ride horseback","mount","cavalry"],kr:["말탈","기"]},hunum:[{kor:"기",def:"말탈"}]},{id:6863,hanja:"肭",strokes:"8",def:{en:["fat","seal"],kr:["물개","눌"]},hunum:[{kor:"눌",def:"물개"}]},{id:6864,hanja:"騏",strokes:"18",def:{en:["piebald horse","excellent horse"],kr:["털총이","기"]},hunum:[{kor:"기",def:"털총이"}]},{id:6865,hanja:"癕",strokes:"18",def:{en:["loss of the sense of smell"],kr:["등창","옹"]},hunum:[{kor:"옹",def:"등창"}]},{id:6866,hanja:"朱",strokes:"6",def:{en:["cinnabar","vermilion","surname"],kr:["붉을","주"]},hunum:[{kor:"주",def:"붉을"}]},{id:6867,hanja:"諪",strokes:"16",def:{en:[]},hunum:[{kor:"정",def:"조정할"}]},{id:6868,hanja:"肯",strokes:"8",def:{en:["willing","consent to","permit"],kr:["옳이","여길","긍"]},hunum:[{kor:"긍",def:"옳이 여길"}]},{id:6869,hanja:"癖",strokes:"18",def:{en:["craving","weakness for","indigestion"],kr:["적취","벽"]},hunum:[{kor:"벽",def:"적취"}]},{id:6870,hanja:"峙",strokes:"9",def:{en:["stand erect","stand up","pile up"],kr:["쌓을","치"]},hunum:[{kor:"치",def:"산이 우뚝 솟을"}]},{id:6871,hanja:"懃",strokes:"16",def:{en:["courteous","cordial","zealous"],kr:["은근할","근"]},hunum:[{kor:"근",def:"은근할"}]},{id:6872,hanja:"騑",strokes:"18",def:{en:["horse","run"],kr:["곁마","비"]},hunum:[{kor:"비",def:"곁마"}]},{id:6873,hanja:"諫",strokes:"16",def:{en:["remonstrate","admonish"],kr:["간할","간"]},hunum:[{kor:"간",def:"간할"}]},{id:6874,hanja:"朳",strokes:"6",def:{en:["tree"]},hunum:[{kor:"팔",def:"고무래"}]},{id:6875,hanja:"功",strokes:"5",def:{en:["achievement","merit","good result"],kr:["공","공"]},hunum:[{kor:"공",def:"공"}]},{id:6876,hanja:"騒",strokes:"18",def:{en:["harass","bother","annoy","disturb"],kr:["騷와","同字"]},hunum:[{kor:"소",def:"떠들"}]},{id:6877,hanja:"肱",strokes:"8",def:{en:["forearm"],kr:["팔뚝","굉"]},hunum:[{kor:"굉",def:"팔뚝"}]},{id:6878,hanja:"癘",strokes:"18",def:{en:["a sore","ulcer","pestilence"],kr:["창질","려"]},hunum:[{kor:"려",def:"창질"}]},{id:6879,hanja:"験",strokes:"18",def:{en:["test","examine","inspect","verify"],kr:["驗의","略字"]},hunum:[{kor:"험",def:"시험"}]},{id:6880,hanja:"加",strokes:"5",def:{en:["add to","increase","augment"],kr:["더할","가"]},hunum:[{kor:"가",def:"더할"}]},{id:6881,hanja:"育",strokes:"8",def:{en:["produce","give birth to","educate"],kr:["자랄","육"]},hunum:[{kor:"육",def:"기를"}]},{id:6882,hanja:"諭",strokes:"16",def:{en:["proclaim","instruct","edict"],kr:["비유할","유"]},hunum:[{kor:"유",def:"고할"}]},{id:6883,hanja:"朴",strokes:"6",def:{en:["simple","unadorned","sincere","surname","a tree"],kr:["나무껍질","박"]},hunum:[{kor:"박",def:"나무껍질"}]},{id:6884,hanja:"朵",strokes:"6",def:{en:["cluster of flowers","earlobe"],kr:["朶와","同字"]},hunum:[{kor:"타",def:"늘어질"}]},{id:6885,hanja:"懆",strokes:"16",def:{en:["anxious","apprehensive"],kr:["근심할","조"]},hunum:[{kor:"조",def:"근심할"}]},{id:6886,hanja:"諮",strokes:"16",def:{en:["consult","confer","communicate in"],kr:["물을","자"]},hunum:[{kor:"자",def:"물을"}]},{id:6887,hanja:"薀",strokes:"19",def:{en:["the hippuris or mare"],kr:["쌓일","온"]},hunum:[{kor:"온",def:"마름"}]},{id:6888,hanja:"肴",strokes:"8",def:{en:["cooked or prepared meat"],kr:["안주","효"]},hunum:[{kor:"효",def:"안주"}]},{id:6889,hanja:"懇",strokes:"16",def:{en:["sincere","earnest","cordial"],kr:["정성","간"]},hunum:[{kor:"간",def:"정성"}]},{id:6890,hanja:"懈",strokes:"16",def:{en:["idle","relaxed","remiss"],kr:["게으를","해"]},hunum:[{kor:"해",def:"게으를"}]},{id:6891,hanja:"朶",strokes:"6",def:{en:["cluster of flowers","earlobe"],kr:["움킬","타"]},hunum:[{kor:"타",def:"나무가지 휘늘어질"}]},{id:6892,hanja:"癜",strokes:"18",def:{en:["erythema"],kr:["어루러기","전"]},hunum:[{kor:"전",def:"어루러기"}]},{id:6893,hanja:"劣",strokes:"6",def:{en:["bad","inferior","slightly"],kr:["못할","렬"]},hunum:[{kor:"렬",def:"못할"}]},{id:6894,hanja:"騖",strokes:"19",def:{en:["gallop","rush about","pursue","run"],kr:["질주할","무"]},hunum:[{kor:"무",def:"달릴"}]},{id:6895,hanja:"肵",strokes:"8",def:{en:["table"],kr:["적대","기"]},hunum:[{kor:"기",def:"적대"}]},{id:6896,hanja:"諰",strokes:"16",def:{en:[],kr:["곧은말","시"]},hunum:[{kor:"시",def:"눈 휘둥글할"}]},{id:6897,hanja:"諱",strokes:"16",def:{en:["conceal","shun","regard as taboo"],kr:["꺼릴","휘"]},hunum:[{kor:"휘",def:"꺼릴"}]},{id:6898,hanja:"氅",strokes:"16",def:{en:["overcoat","down feathers"],kr:["새털","창"]},hunum:[{kor:"창",def:"새털"}]},{id:6899,hanja:"應",strokes:"16",def:{en:["should","ought to","must"],kr:["대답할","응"]},hunum:[{kor:"응",def:"응당"}]},{id:6900,hanja:"劤",strokes:"6",def:{en:["strong"],kr:["힘많을","근"]},hunum:[{kor:"근",def:"힘많을"}]},{id:6901,hanja:"騘",strokes:"19",def:{en:["a piebald horse"],kr:["驄과","同字"]},hunum:[{kor:"총",def:"총이말"}]},{id:6902,hanja:"懊",strokes:"16",def:{en:["vexed","worried","nervous","regret"],kr:["번뇌할","오"]},hunum:[{kor:"오",def:"원망할"}]},{id:6903,hanja:"峠",strokes:"9",def:{en:["mountain pass","crisis","climax"],kr:["고개","상"]},hunum:[{kor:"상",def:"고개"}]},{id:6904,hanja:"薄",strokes:"19",def:{en:["thin","slight","weak","poor","stingy"],kr:["숲","박"]},hunum:[{kor:"박",def:"숲"}]},{id:6905,hanja:"騙",strokes:"19",def:{en:["swindle","cheat out of","defraud"],kr:["말에","뛰어","오를","편"]},hunum:[{kor:"편",def:"속일"}]},{id:6906,hanja:"懋",strokes:"17",def:{en:["splendid","grand","majestic"],kr:["노력할","무"]},hunum:[{kor:"무",def:"힘쓸"}]},{id:6907,hanja:"諳",strokes:"16",def:{en:["versed in","fully acquainted with"],kr:["욀","암"]},hunum:[{kor:"암",def:"욀"}]},{id:6908,hanja:"迀",strokes:"7",def:{en:[],kr:["권할","간"]},hunum:[{kor:"간",def:"구할"}]},{id:6909,hanja:"劦",strokes:"6",def:{en:[],kr:["힘을","합할","협"]},hunum:[{kor:"협",def:"힘을 합할"}]},{id:6910,hanja:"諴",strokes:"16",def:{en:["in harmony","in agreement","incere"],kr:["화할","함"]},hunum:[{kor:"함",def:"화할"}]},{id:6911,hanja:"氈",strokes:"17",def:{en:["felt","rug","carpet"],kr:["전방석","전"]},hunum:[{kor:"전",def:"단자리"}]},{id:6912,hanja:"懌",strokes:"16",def:{en:["enjoy","be glad","be pleased"],kr:["기꺼울","역"]},hunum:[{kor:"역",def:"기꺼울"}]},{id:6913,hanja:"薆",strokes:"19",def:{en:["to cover","to hide","to conceal"],kr:["숨겨질","애"]},hunum:[{kor:"애",def:"숨겨질"}]},{id:6914,hanja:"机",strokes:"6",def:{en:["desk","machine","moment"],kr:["느티나무","궤"]},hunum:[{kor:"궤",def:"느티나무"}]},{id:6915,hanja:"癡",strokes:"19",def:{en:["silly","foolish","idiotic"],kr:["주근깨","치"]},hunum:[{kor:"치",def:"어리석을"}]},{id:6916,hanja:"峣",strokes:"9",def:{en:["high or tall"],kr:["嶢와","同字"]},hunum:[{kor:"요",def:"높을"}]},{id:6917,hanja:"騛",strokes:"19",def:{en:[],kr:["빠른","말","비"]},hunum:[{kor:"비",def:"빠른 말"}]},{id:6918,hanja:"薇",strokes:"19",def:{en:["Osmunda regalis","a species of fern"],kr:["고삐","미"]},hunum:[{kor:"미",def:"고삐"}]},{id:6919,hanja:"迂",strokes:"7",def:{en:["doctrinaire","abstruse","unrealistic"],kr:["멀","우"]},hunum:[{kor:"오",def:"굽을"},{kor:"우",def:"굽을"}]},{id:6920,hanja:"肺",strokes:"8",def:{en:["lungs"],kr:["마음속","폐"]},hunum:[{kor:"패",def:"성할"},{kor:"폐",def:"허파"}]},{id:6921,hanja:"諶",strokes:"16",def:{en:["sincere","faithful","surname"],kr:["참","심"]},hunum:[{kor:"심",def:"참"}]},{id:6922,hanja:"迃",strokes:"7",def:{en:[]},hunum:[{kor:"오",def:"굽을"}]},{id:6923,hanja:"癢",strokes:"20",def:{en:["itch"],kr:["가려울","양"]},hunum:[{kor:"양",def:"가려울"}]},{id:6924,hanja:"迄",strokes:"7",def:{en:["extend","reach","until","till"],kr:["이를","흘"]},hunum:[{kor:"흘",def:"이를"}]},{id:6925,hanja:"朽",strokes:"6",def:{en:["decayed","rotten","rot","decay"],kr:["섞을","후"]},hunum:[{kor:"후",def:"섞을"}]},{id:6926,hanja:"諷",strokes:"16",def:{en:["recite","incant","satirize"],kr:["외울","풍"]},hunum:[{kor:"풍",def:"비유로 간할"}]},{id:6927,hanja:"助",strokes:"7",def:{en:["help","aid","assist"],kr:["도울","조"]},hunum:[{kor:"조",def:"도울"}]},{id:6928,hanja:"薉",strokes:"19",def:{en:["dirty","unclean","immoral","obscene"],kr:["더러울","예"]},hunum:[{kor:"예",def:"더러울"}]},{id:6929,hanja:"諸",strokes:"16",def:{en:["several","various"],kr:["모든","제"]},hunum:[{kor:"제",def:"모든"}]},{id:6930,hanja:"癤",strokes:"20",def:{en:["pimple","sore","boil"],kr:["부스럼","절"]},hunum:[{kor:"절",def:"멍울"}]},{id:6931,hanja:"努",strokes:"7",def:{en:["to exert","strive","make an effort","to pout"],kr:["힘쓸","노"]},hunum:[{kor:"노",def:"힘쓸"}]},{id:6932,hanja:"薊",strokes:"19",def:{en:["circium","thistles","surname"],kr:["삽주","계"]},hunum:[{kor:"계",def:"삽주"}]},{id:6933,hanja:"迅",strokes:"7",def:{en:["quick","hasty","rapid","sudden"],kr:["억셀","신"]},hunum:[{kor:"신",def:"빠를"}]},{id:6934,hanja:"癥",strokes:"20",def:{en:["obstruction of bowels"],kr:["적취","징"]},hunum:[{kor:"징",def:"적취"}]},{id:6935,hanja:"劫",strokes:"7",def:{en:["take by force","coerce","disaster"],kr:["화재","겁"]},hunum:[{kor:"겁",def:"위협할"}]},{id:6936,hanja:"薌",strokes:"19",def:{en:["fragrant smell of grain","aromatic"],kr:["기장","향"]},hunum:[{kor:"향",def:"곡기"}]},{id:6937,hanja:"劬",strokes:"7",def:{en:["be diligent","toil","endeavor"],kr:["수고로울","구"]},hunum:[{kor:"구",def:"수고로울"}]},{id:6938,hanja:"峨",strokes:"10",def:{en:["lofty"],kr:["산","높을","아"]},hunum:[{kor:"아",def:"산 높을"}]},{id:6939,hanja:"諺",strokes:"16",def:{en:["proverb","maxim"],kr:["상말","언"]},hunum:[{kor:"안",def:"용맹스러울"},{kor:"언",def:"상말"}]},{id:6940,hanja:"劭",strokes:"7",def:{en:["encourage","to excel","excellent"],kr:["힘쓸","초"]},hunum:[{kor:"초",def:"힘쓸"}]},{id:6941,hanja:"峩",strokes:"10",def:{en:["lofty"],kr:["峨와","同字"]},hunum:[{kor:"아",def:"높을"}]},{id:6942,hanja:"癧",strokes:"21",def:{en:["scrofulous lumps or swellings"],kr:["연주창","력"]},hunum:[{kor:"력",def:"연주창"}]},{id:6943,hanja:"諼",strokes:"16",def:{en:["forget","lie","cheat","deceive"],kr:["속일","훤"]},hunum:[{kor:"훤",def:"속일"}]},{id:6944,hanja:"氏",strokes:"4",def:{en:["clan","family","mister"],kr:["나라이름","지"]},hunum:[{kor:"씨",def:"성"},{kor:"지",def:"나라이름"}]},{id:6945,hanja:"劮",strokes:"7",def:{en:[],kr:["기쁠","일"]},hunum:[{kor:"일",def:"기쁠"}]},{id:6946,hanja:"癨",strokes:"21",def:{en:["quickly","suddenly","surname"],kr:["곽란","곽"]},hunum:[{kor:"곽",def:"곽란"}]},{id:6947,hanja:"氐",strokes:"5",def:{en:["name of an ancient tribe"],kr:["별이름","저"]},hunum:[{kor:"저",def:"낮을"}]},{id:6948,hanja:"懕",strokes:"18",def:{en:["satiated","contented"],kr:["편안할","염"]},hunum:[{kor:"염",def:"편안할"}]},{id:6949,hanja:"癩",strokes:"21",def:{en:["leprosy","scabies","mange","shoddy"],kr:["약물","중독","라"]},hunum:[{kor:"라",def:"약물 중독"}]},{id:6950,hanja:"民",strokes:"5",def:{en:["people","subjects","citizens"],kr:["백성","민"]},hunum:[{kor:"민",def:"백성"}]},{id:6951,hanja:"諾",strokes:"16",def:{en:["promise","assent","approve"],kr:["대답할","락"]},hunum:[{kor:"낙",def:"대답할"},{kor:"락",def:"대답할"}]},{id:6952,hanja:"薏",strokes:"19",def:{en:["seed of job","lotus seed"],kr:["율무","의"]},hunum:[{kor:"의",def:"연밥"}]},{id:6953,hanja:"迋",strokes:"8",def:{en:["travel","go to","deceive","scare"],kr:["두려울","왕"]},hunum:[{kor:"왕",def:"갈"}]},{id:6954,hanja:"懗",strokes:"17",def:{en:[],kr:["속일","하"]},hunum:[{kor:"하",def:"속일"}]},{id:6955,hanja:"峭",strokes:"10",def:{en:["steep","precipitous","rugged"],kr:["가파를","초"]},hunum:[{kor:"초",def:"가파를"}]},{id:6956,hanja:"励",strokes:"7",def:{en:["strive","encourage"],kr:["勵의","略字"]},hunum:[{kor:"려",def:"힘쓸"}]},{id:6957,hanja:"氓",strokes:"8",def:{en:["people","subjects","vassals"],kr:["백성","맹"]},hunum:[{kor:"맹",def:"백성"}]},{id:6958,hanja:"薑",strokes:"19",def:{en:["ginger"],kr:["생강","강"]},hunum:[{kor:"강",def:"생강"}]},{id:6959,hanja:"迍",strokes:"8",def:{en:["falter","hesitate"],kr:["머뭇거릴","둔"]},hunum:[{kor:"둔",def:"머뭇거릴"}]},{id:6960,hanja:"癬",strokes:"22",def:{en:["ringworms"],kr:["옴","선"]},hunum:[{kor:"선",def:"옴"}]},{id:6961,hanja:"迎",strokes:"8",def:{en:["receive","welcome","greet"],kr:["맞을","영"]},hunum:[{kor:"영",def:"맞을"}]},{id:6962,hanja:"癭",strokes:"22",def:{en:["swelling","goiter"],kr:["목","혹","영"]},hunum:[{kor:"영",def:"목 혹"}]},{id:6963,hanja:"労",strokes:"7",def:{en:["labor","toil","do manual work"],kr:["勞의","略字"]},hunum:[{kor:"로",def:"일할"}]},{id:6964,hanja:"峯",strokes:"10",def:{en:["peak","summit","hump of camel"],kr:["봉우리","봉"]},hunum:[{kor:"봉",def:"봉우리"}]},{id:6965,hanja:"癮",strokes:"22",def:{en:["rash","addiction","craving","habit"],kr:["두드러기","은"]},hunum:[{kor:"은",def:"두드러기"}]},{id:6966,hanja:"劵",strokes:"8",def:{en:["certificate","ticket","title deeds"],kr:["수고로울","권"]},hunum:[{kor:"권",def:"게으를"}]},{id:6967,hanja:"峰",strokes:"10",def:{en:["peak","summit","hump of camel"],kr:["峯과","同字"]},hunum:[{kor:"봉",def:"峯과 同"}]},{id:6968,hanja:"垂",strokes:"8",def:{en:["let down","suspend","hand","down"],kr:["남길","수"]},hunum:[{kor:"수",def:"드리울"}]},{id:6969,hanja:"薔",strokes:"19",def:{en:["rose"],kr:["물여뀌","장"]},hunum:[{kor:"색",def:"아낄"},{kor:"장",def:"물여뀌"}]},{id:6970,hanja:"癯",strokes:"23",def:{en:["thin","emaciated","worn","tired"],kr:["여윌","구"]},hunum:[{kor:"구",def:"여윌"}]},{id:6971,hanja:"気",strokes:"6",def:{en:["air","gas","steam","vapor","spirit"],kr:["氣의","略字"]},hunum:[{kor:"기",def:"기운"}]},{id:6972,hanja:"劶",strokes:"8",def:{en:[],kr:["부지런할","구"]},hunum:[{kor:"구",def:"부지런할"}]},{id:6973,hanja:"峱",strokes:"10",def:{en:["name of a mountain"],kr:["산이름","노"]},hunum:[{kor:"노",def:"산이름"}]},{id:6974,hanja:"近",strokes:"8",def:{en:["near","close","approach","intimate"],kr:["가까울","근"]},hunum:[{kor:"근",def:"가까울"}]},{id:6975,hanja:"癰",strokes:"23",def:{en:["carbuncle","sore","ulcer","abscess"]},hunum:[{kor:"옹",def:"악창"}]},{id:6976,hanja:"癱",strokes:"24",def:{en:["paralysis","palsy","numbness"],kr:["사지","틀릴","탄"]},hunum:[{kor:"탄",def:"중풍증"}]},{id:6977,hanja:"懞",strokes:"17",def:{en:[],kr:["어두울","몽"]},hunum:[{kor:"몽",def:"어두울"}]},{id:6978,hanja:"騫",strokes:"20",def:{en:["raise","hold high","fly","soar"],kr:["휙","뛰어","나아갈","건"]},hunum:[{kor:"건",def:"말 배 앓을"}]},{id:6979,hanja:"薗",strokes:"19",def:{en:["garden","park","orchard"],kr:["園과","同字"]},hunum:[{kor:"원",def:"동산"}]},{id:6980,hanja:"迓",strokes:"8",def:{en:["to go to meet","to receive","as a guest"],kr:["마중할","아"]},hunum:[{kor:"아",def:"마중할"}]},{id:6981,hanja:"焄",strokes:"11",def:{en:["rising flames or fumes","aroma"],kr:["연기에","그을릴","훈"]},hunum:[{kor:"훈",def:"연기에 그을릴"}]},{id:6982,hanja:"効",strokes:"8",def:{en:["efficacious","effectiveness","to toil","to serve in the army"],kr:["效의","俗字"]},hunum:[{kor:"효",def:"본받을"}]},{id:6983,hanja:"峴",strokes:"10",def:{en:["steep hill","mountain in Hubei"],kr:["산이름","현"]},hunum:[{kor:"현",def:"고개"}]},{id:6984,hanja:"癲",strokes:"24",def:{en:["crazy","mad","madness","mania","insanity"],kr:["미칠","전"]},hunum:[{kor:"전",def:"미칠"}]},{id:6985,hanja:"懟",strokes:"18",def:{en:["hate","abhor","hatred","resentment"],kr:["원망할","대"]},hunum:[{kor:"대",def:"원망할"}]},{id:6986,hanja:"返",strokes:"8",def:{en:["return","revert to","restore"],kr:["돌이킬","반"]},hunum:[{kor:"반",def:"돌이킬"}]},{id:6987,hanja:"薙",strokes:"19",def:{en:["weed","shave"],kr:["풀","깎을","치"]},hunum:[{kor:"치",def:"풀 깎을"}]},{id:6988,hanja:"騭",strokes:"20",def:{en:["stallion","promote"],kr:["수말","즐"]},hunum:[{kor:"즐",def:"수말"}]},{id:6989,hanja:"氛",strokes:"8",def:{en:["gas","vapor","air"],kr:["기운","분"]},hunum:[{kor:"분",def:"기운"}]},{id:6990,hanja:"迕",strokes:"8",def:{en:["obstinate","perverse"],kr:["어길","오"]},hunum:[{kor:"오",def:"만날"}]},{id:6991,hanja:"劻",strokes:"8",def:{en:["flurried","be in flurry","zealous"],kr:["급할","광"]},hunum:[{kor:"광",def:"급할"}]},{id:6992,hanja:"島",strokes:"10",def:{en:["island"],kr:["섬","도"]},hunum:[{kor:"도",def:"섬"}]},{id:6993,hanja:"垈",strokes:"8",def:{en:[],kr:["터","대"]},hunum:[{kor:"대",def:"터"}]},{id:6994,hanja:"劼",strokes:"8",def:{en:["be discreet","prudent","cautious"],kr:["삼갈","할"]},hunum:[{kor:"할",def:"삼갈"}]},{id:6995,hanja:"薛",strokes:"19",def:{en:["kind of marsh grass","feudal state"],kr:["맑은대쑥","설"]},hunum:[{kor:"설",def:"맑은대쑥"}]},{id:6996,hanja:"騰",strokes:"20",def:{en:["fly","gallop","run","prance","rise"],kr:["오를","등"]},hunum:[{kor:"등",def:"오를"}]},{id:6997,hanja:"薜",strokes:"19",def:{en:["evergreen shrubs","ligusticum"],kr:["돌삼","폐"]},hunum:[{kor:"벽",def:"승검초"},{kor:"폐",def:"승검초"}]},{id:6998,hanja:"型",strokes:"9",def:{en:["pattern","model","type","law","mold"],kr:["본보기","형"]},hunum:[{kor:"형",def:"거푸집"}]},{id:6999,hanja:"劾",strokes:"8",def:{en:["examine into","impeach","charge"],kr:["핵실할","핵"]},hunum:[{kor:"해",def:"안찰할"},{kor:"핵",def:"캐물을"}]},{id:7000,hanja:"焉",strokes:"11",def:{en:["thereupon","then","how"],kr:["의심쩍을","언"]},hunum:[{kor:"언",def:"어찌"}]},{id:7001,hanja:"筅",strokes:"12",def:{en:["bamboo brush","halberd"],kr:["솔","선"]},hunum:[{kor:"선",def:"솔"}]},{id:7002,hanja:"懣",strokes:"18",def:{en:["be sick at heart","sorrowful","sad"],kr:["번거로울","문"]},hunum:[{kor:"문",def:"번거로울"}]},{id:7003,hanja:"薝",strokes:"19",def:{en:[],kr:["치자나무","담"]},hunum:[{kor:"담",def:"치자나무"}]},{id:7004,hanja:"垌",strokes:"9",def:{en:[],kr:["항아리","동"]},hunum:[{kor:"동",def:"항아리"}]},{id:7005,hanja:"癸",strokes:"9",def:{en:["tenth heavenly stem"],kr:["열째","천간","계"]},hunum:[{kor:"계",def:"열째 천간"}]},{id:7006,hanja:"筆",strokes:"12",def:{en:["writing brush","write","stroke"],kr:["오랑캐","이름","필"]},hunum:[{kor:"필",def:"붓"}]},{id:7007,hanja:"鼀",strokes:"18",def:{en:[],kr:["두꺼비","축"]},hunum:[{kor:"축",def:"두꺼비"}]},{id:7008,hanja:"峻",strokes:"10",def:{en:["high","steep","towering","stern"],kr:["높을","준"]},hunum:[{kor:"준",def:"높을"}]},{id:7009,hanja:"焌",strokes:"11",def:{en:["to light"],kr:["굽을","준"]},hunum:[{kor:"준",def:"굽을"}]},{id:7010,hanja:"懦",strokes:"17",def:{en:["weak","timid","cowardly"],kr:["나약할","유"]},hunum:[{kor:"나",def:"나약할"},{kor:"유",def:"만만할"}]},{id:7011,hanja:"発",strokes:"9",def:{en:["issue","dispatch","send out","emit"],kr:["일어날","발"]},hunum:[{kor:"발",def:"일어날"}]},{id:7012,hanja:"峽",strokes:"10",def:{en:["gorge","strait","ravine","isthmus"],kr:["산이름","협"]},hunum:[{kor:"협",def:"물 낀 두메"}]},{id:7013,hanja:"鼂",strokes:"18",def:{en:["a kind of sea turtle","surname"],kr:["朝와","同字"]},hunum:[{kor:"조",def:"아침"}]},{id:7014,hanja:"筈",strokes:"12",def:{en:["arrow end"],kr:["하눌타리","괄"]},hunum:[{kor:"괄",def:"하눌타리"}]},{id:7015,hanja:"氣",strokes:"10",def:{en:["air","gas","steam","vapor","spirit"],kr:["기운","기"]},hunum:[{kor:"기",def:"기운"}]},{id:7016,hanja:"騵",strokes:"20",def:{en:["bay"],kr:["배","희고","갈기","검은","말","원"]},hunum:[{kor:"원",def:"배 희고 갈기 검은 말"}]},{id:7017,hanja:"登",strokes:"12",def:{en:["rise","mount","board","climb"],kr:["오를","등"]},hunum:[{kor:"등",def:"오를"}]},{id:7018,hanja:"騶",strokes:"20",def:{en:["mounted escort","groom"],kr:["짐승이름","추"]},hunum:[{kor:"추",def:"거덜"}]},{id:7019,hanja:"等",strokes:"12",def:{en:["rank","grade","wait","equal"],kr:["가지런할","등"]},hunum:[{kor:"등",def:"가지런할"}]},{id:7020,hanja:"氤",strokes:"10",def:{en:["hanging fog","misty"],kr:["기운성할","인"]},hunum:[{kor:"인",def:"기운성할"}]},{id:7021,hanja:"發",strokes:"12",def:{en:["issue","dispatch","send out","emit"],kr:["쏠","발"]},hunum:[{kor:"발",def:"쏠"}]},{id:7022,hanja:"鼄",strokes:"19",def:{en:["the spider"],kr:["거미","주"]},hunum:[{kor:"주",def:"거미"}]},{id:7023,hanja:"騷",strokes:"20",def:{en:["harass","bother","annoy","disturb","agitate","sad","grieved"],kr:["처량할","소"]},hunum:[{kor:"소",def:"근심스러울"}]},{id:7024,hanja:"白",strokes:"5",def:{en:["white","pure","unblemished","bright"],kr:["흰","백"]},hunum:[{kor:"배",def:"땅이름"},{kor:"백",def:"흰"}]},{id:7025,hanja:"薤",strokes:"19",def:{en:["allium bakeri","shallots","scallion"],kr:["부추","해"]},hunum:[{kor:"해",def:"염교"}]},{id:7026,hanja:"筋",strokes:"12",def:{en:["muscles","tendons"],kr:["힘줄","근"]},hunum:[{kor:"근",def:"힘줄"}]},{id:7027,hanja:"騸",strokes:"20",def:{en:["geld","castrate"],kr:["불깔","선"]},hunum:[{kor:"선",def:"불깔"}]},{id:7028,hanja:"百",strokes:"6",def:{en:["one hundred","numerous","many"],kr:["일백","백"]},hunum:[{kor:"맥",def:"힘쓸"},{kor:"백",def:"일백"}]},{id:7029,hanja:"垓",strokes:"9",def:{en:["border","boundary","frontier"],kr:["계단","해"]},hunum:[{kor:"해",def:"땅 가장자리"}]},{id:7030,hanja:"薥",strokes:"19",def:{en:[],kr:["자귀밥","촉"]},hunum:[{kor:"촉",def:"촉규화"}]},{id:7031,hanja:"筌",strokes:"12",def:{en:["bamboo fish trap"],kr:["통발","전"]},hunum:[{kor:"전",def:"통발"}]},{id:7032,hanja:"薦",strokes:"19",def:{en:["offer","present","recommend"],kr:["천거할","천"]},hunum:[{kor:"천",def:"천거할"}]},{id:7033,hanja:"筍",strokes:"12",def:{en:["bamboo shoot","joint","tendon"],kr:["대싹","순"]},hunum:[{kor:"순",def:"죽순"}]},{id:7034,hanja:"鼇",strokes:"23",def:{en:["huge sea turtle"],kr:["매우","큰","자라","오"]},hunum:[{kor:"오",def:"매우 큰 자라"}]},{id:7035,hanja:"垕",strokes:"9",def:{en:["used in place names"],kr:["厚의","古字"]},hunum:[{kor:"후",def:"두터울"}]},{id:7036,hanja:"迢",strokes:"9",def:{en:["far","distant"],kr:["멀","초"]},hunum:[{kor:"초",def:"멀"}]},{id:7037,hanja:"鼈",strokes:"25",def:{en:["a fresh","Trionyx sinensis"],kr:["자라","별"]},hunum:[{kor:"별",def:"자라"}]},{id:7038,hanja:"薨",strokes:"19",def:{en:["death of prince","swarming"],kr:["죽을","훙"]},hunum:[{kor:"횡",def:"많을"},{kor:"훙",def:"죽을"}]},{id:7039,hanja:"鼉",strokes:"25",def:{en:["large reptile","water lizard"],kr:["자라","타"]},hunum:[{kor:"타",def:"자라"}]},{id:7040,hanja:"焔",strokes:"12",def:{en:["flame","blaze","glowing","blazing"]},hunum:[{kor:"염",def:"불꽃"}]},{id:7041,hanja:"筏",strokes:"12",def:{en:["raft"],kr:["떼","벌"]},hunum:[{kor:"벌",def:"떼"}]},{id:7042,hanja:"焕",strokes:"11",def:{en:["shining"],kr:["빛날","환"]},hunum:[{kor:"환",def:"빛날"}]},{id:7043,hanja:"筐",strokes:"12",def:{en:["bamboo basket or chest"],kr:["광주리","광"]},hunum:[{kor:"광",def:"광주리"}]},{id:7044,hanja:"鼊",strokes:"26",def:{en:[],kr:["거북","벽"]},hunum:[{kor:"벽",def:"거북"}]},{id:7045,hanja:"薩",strokes:"20",def:{en:["transliteration of"],kr:["보살","살"]},hunum:[{kor:"살",def:"보살"}]},{id:7046,hanja:"迤",strokes:"9",def:{en:["wind","walk out of straight path"],kr:["어정거릴","타"]},hunum:[{kor:"이",def:"든든할"},{kor:"타",def:"어정거릴"}]},{id:7047,hanja:"迥",strokes:"9",def:{en:["distant","far","separated","different"],kr:["차단할","형"]},hunum:[{kor:"형",def:"막을"}]},{id:7048,hanja:"筑",strokes:"12",def:{en:["ancient lute","build"],kr:["비파","축"]},hunum:[{kor:"축",def:"비파"}]},{id:7049,hanja:"騾",strokes:"21",def:{en:["mule"],kr:["노새","라"]},hunum:[{kor:"라",def:"노새"}]},{id:7050,hanja:"薪",strokes:"19",def:{en:["fuel","firewood","salary"],kr:["성씨","신"]},hunum:[{kor:"신",def:"섶"}]},{id:7051,hanja:"薫",strokes:"19",def:{en:["a medicinal herb","to cauterize"],kr:["향내","훈"]},hunum:[{kor:"훈",def:"향내"}]},{id:7052,hanja:"筒",strokes:"12",def:{en:["thick piece of bamboo","pipe"],kr:["통","통"]},hunum:[{kor:"통",def:"사통대"}]},{id:7053,hanja:"迦",strokes:"9",def:{en:["character for transliteration"],kr:["부처이름","가"]},hunum:[{kor:"가",def:"부처이름"}]},{id:7054,hanja:"懲",strokes:"19",def:{en:["punish","reprimand","warn"],kr:["혼날","징"]},hunum:[{kor:"징",def:"혼날"}]},{id:7055,hanja:"筓",strokes:"12",def:{en:["a hairpin on which the hair is bound at the back of the head"],kr:["비녀","계"]},hunum:[{kor:"계",def:"비녀"}]},{id:7056,hanja:"薬",strokes:"19",def:{en:["drugs","pharmaceuticals","medicine"],kr:["藥의","略字"]},hunum:[{kor:"약",def:"약"}]},{id:7057,hanja:"迨",strokes:"9",def:{en:["until","when","seize","arrest"],kr:["미칠","태"]},hunum:[{kor:"태",def:"미칠"}]},{id:7058,hanja:"鼎",strokes:"13",def:{en:["large","three"],kr:["새로울","정"]},hunum:[{kor:"정",def:"솥"}]},{id:7059,hanja:"焙",strokes:"12",def:{en:["dry over slow fire","bake","roast"],kr:["불에","쬘","배"]},hunum:[{kor:"배",def:"불에 쬘"}]},{id:7060,hanja:"答",strokes:"12",def:{en:["answer","reply","return","assent to"],kr:["젖을","답"]},hunum:[{kor:"답",def:"젖을"}]},{id:7061,hanja:"曀",strokes:"16",def:{en:["stormy","cloudy","misty","dim"],kr:["가리울","에"]},hunum:[{kor:"에",def:"음산할"}]},{id:7062,hanja:"焚",strokes:"12",def:{en:["burn"],kr:["불사를","분"]},hunum:[{kor:"분",def:"불사를"}]},{id:7063,hanja:"曁",strokes:"16",def:{en:["and","attain"],kr:["및","기"]},hunum:[{kor:"기",def:"및"}]},{id:7064,hanja:"迩",strokes:"9",def:{en:["be near","be close","recently"],kr:["邇의","俗字"]},hunum:[{kor:"이",def:"가까울"}]},{id:7065,hanja:"策",strokes:"12",def:{en:["scheme","plan","to whip","urge"],kr:["채찍","책"]},hunum:[{kor:"책",def:"채찍"}]},{id:7066,hanja:"迪",strokes:"9",def:{en:["enlighten","advance","progress"],kr:["열어줄","적"]},hunum:[{kor:"적",def:"나아갈"}]},{id:7067,hanja:"鼐",strokes:"15",def:{en:["incense tripod"],kr:["가마솥","내"]},hunum:[{kor:"내",def:"가마솥"}]},{id:7068,hanja:"焜",strokes:"12",def:{en:["fire","flames","bright","shining"],kr:["빛날","혼"]},hunum:[{kor:"혼",def:"빛날"}]},{id:7069,hanja:"懶",strokes:"19",def:{en:["lazy","languid","listless"],kr:["게으를","란"]},hunum:[{kor:"라",def:"게으를"},{kor:"란",def:"게으를"}]},{id:7070,hanja:"薯",strokes:"20",def:{en:["yam","tuber","potato"],kr:["참마","서"]},hunum:[{kor:"서",def:"참마"}]},{id:7071,hanja:"迫",strokes:"9",def:{en:["coerce","force","compel","urgent"],kr:["닥칠","박"]},hunum:[{kor:"박",def:"닥칠"}]},{id:7072,hanja:"薰",strokes:"20",def:{en:["a medicinal herb","to cauterize"],kr:["향불","훈"]},hunum:[{kor:"훈",def:"향불"}]},{id:7073,hanja:"懷",strokes:"19",def:{en:["bosom","breast","carry in bosom"],kr:["품을","회"]},hunum:[{kor:"회",def:"품을"}]},{id:7074,hanja:"垞",strokes:"9",def:{en:["small mound","place name","hillock"]},hunum:[{kor:"타",def:"언덕"}]},{id:7075,hanja:"氲",strokes:"14",def:{en:["life giving influences of nature","spirit of harmony","prosperity"],kr:["氳의","俗字"]},hunum:[{kor:"온",def:"기운 어릴"}]},{id:7076,hanja:"曄",strokes:"16",def:{en:["bright","radiant","thriving"],kr:["번개","번쩍거릴","엽"]},hunum:[{kor:"엽",def:"빛날"}]},{id:7077,hanja:"迬",strokes:"8",def:{en:["go"],kr:["往과","同字"]},hunum:[{kor:"왕",def:"갈"}]},{id:7078,hanja:"懸",strokes:"20",def:{en:["hang","suspend","hoist","be hung"],kr:["멀","현"]},hunum:[{kor:"현",def:"매달"}]},{id:7079,hanja:"迭",strokes:"9",def:{en:["repeatedly","frequently"],kr:["갈마들","질"]},hunum:[{kor:"질",def:"갈마들"}]},{id:7080,hanja:"聃",strokes:"11",def:{en:["ears without rims","a personal name"],kr:["노자이름","담"]},hunum:[{kor:"담",def:"노자이름"}]},{id:7081,hanja:"氳",strokes:"14",def:{en:["life giving influences of nature","spirit of harmony","prosperity"],kr:["기운","성할","온"]},hunum:[{kor:"온",def:"기운 어릴"}]},{id:7082,hanja:"曅",strokes:"16",def:{en:["bright","flourishing"],kr:["曄과","同字"]},hunum:[{kor:"엽",def:"빛날"}]},{id:7083,hanja:"焞",strokes:"12",def:{en:["dim"],kr:["귀갑","지지는","불","돈"]},hunum:[{kor:"돈",def:"귀갑 지지는 불"}]},{id:7084,hanja:"水",strokes:"4",def:{en:["water","liquid","lot","juice"],kr:["고를","수"]},hunum:[{kor:"수",def:"물"}]},{id:7085,hanja:"曆",strokes:"16",def:{en:["calendar","era"],kr:["책력","력"]},hunum:[{kor:"력",def:"책력"}]},{id:7086,hanja:"垠",strokes:"9",def:{en:["boundary","bank of stream or river"],kr:["경계","은"]},hunum:[{kor:"은",def:"언덕"}]},{id:7087,hanja:"鼓",strokes:"13",def:{en:["drum","beat","top","strike"],kr:["북","고"]},hunum:[{kor:"고",def:"북"}]},{id:7088,hanja:"懺",strokes:"20",def:{en:["regret","repent","confess sins"],kr:["뉘우칠","참"]},hunum:[{kor:"참",def:"뉘우칠"}]},{id:7089,hanja:"曇",strokes:"16",def:{en:["become cloudy","overcast"],kr:["날","흐릴","담"]},hunum:[{kor:"담",def:"날 흐릴"}]},{id:7090,hanja:"聆",strokes:"11",def:{en:["listen","hear"],kr:["들을","령"]},hunum:[{kor:"령",def:"들을"}]},{id:7091,hanja:"焠",strokes:"12",def:{en:["temper","burn"],kr:["태울","쉬"]},hunum:[{kor:"쉬",def:"물들일"}]},{id:7092,hanja:"垢",strokes:"9",def:{en:["dirt","filth","stains","dirty"],kr:["더러울","구"]},hunum:[{kor:"구",def:"때"}]},{id:7093,hanja:"鼕",strokes:"18",def:{en:["rattle of drums"],kr:["북소리","동"]},hunum:[{kor:"동",def:"북소리"}]},{id:7094,hanja:"述",strokes:"9",def:{en:["narrate","state","express"],kr:["밝힐","술"]},hunum:[{kor:"술",def:"이을"}]},{id:7095,hanja:"曉",strokes:"16",def:{en:["dawn","daybreak","clear","explicit"],kr:["새벽","효"]},hunum:[{kor:"효",def:"새벽"}]},{id:7096,hanja:"誂",strokes:"13",def:{en:["tempt"],kr:["꾈","조"]},hunum:[{kor:"조",def:"꾈"}]},{id:7097,hanja:"無",strokes:"12",def:{en:["negative","no","not","lack","have no"],kr:["없을","무"]},hunum:[{kor:"무",def:"없을"}]},{id:7098,hanja:"懼",strokes:"21",def:{en:["fear","be afraid of","dread"],kr:["두려워할","구"]},hunum:[{kor:"구",def:"두려워할"}]},{id:7099,hanja:"氷",strokes:"5",def:{en:["ice","frost","icicles","cold"],kr:["얼음","빙"]},hunum:[{kor:"빙",def:"얼음"}]},{id:7100,hanja:"垣",strokes:"9",def:{en:["low wall"],kr:["별","이름","원"]},hunum:[{kor:"원",def:"낮은 담"}]},{id:7101,hanja:"懽",strokes:"21",def:{en:["happy","pleased","glad","joyous"],kr:["기뻐할","환"]},hunum:[{kor:"환",def:"기뻐할"}]},{id:7102,hanja:"垤",strokes:"9",def:{en:["ant","small mound","hill"],kr:["개밋둑","질"]},hunum:[{kor:"질",def:"개밋둑"}]},{id:7103,hanja:"永",strokes:"5",def:{en:["long","perpetual","eternal","forever"],kr:["오랠","영"]},hunum:[{kor:"영",def:"길"}]},{id:7104,hanja:"鼗",strokes:"19",def:{en:["small revolving drum with knobs"],kr:["땡땡이","도"]},hunum:[{kor:"도",def:"땡땡이"}]},{id:7105,hanja:"迲",strokes:"9",def:{en:[]},hunum:[{kor:"겁",def:"자래"}]},{id:7106,hanja:"誄",strokes:"13",def:{en:["eulogize","praise the dead"],kr:["뇌사","뢰"]},hunum:[{kor:"뢰",def:"뇌사"}]},{id:7107,hanja:"筟",strokes:"13",def:{en:[],kr:["대청","부"]},hunum:[{kor:"부",def:"대청"}]},{id:7108,hanja:"懾",strokes:"21",def:{en:["afraid","scared","fearful"],kr:["두려울","섭"]},hunum:[{kor:"섭",def:"무서울"}]},{id:7109,hanja:"迴",strokes:"10",def:{en:["revolve","rotate","curving","zigzag"],kr:["回와","同字"]},hunum:[{kor:"회",def:"돌아올"}]},{id:7110,hanja:"誅",strokes:"13",def:{en:["execute","kill","put to death","punish"],kr:["벨","주"]},hunum:[{kor:"주",def:"벨"}]},{id:7111,hanja:"聊",strokes:"11",def:{en:["somewhat","slightly","at least"],kr:["귀","울","료"]},hunum:[{kor:"료",def:"귀 울"}]},{id:7112,hanja:"筠",strokes:"13",def:{en:["bamboo skin","bamboo"],kr:["대껍질","균"]},hunum:[{kor:"균",def:"대껍질"}]},{id:7113,hanja:"懿",strokes:"22",def:{en:["virtuous","admirable","esteemed"],kr:["클","의"]},hunum:[{kor:"의",def:"아름다울"}]},{id:7114,hanja:"鼙",strokes:"21",def:{en:["drum carried on horseback"],kr:["마상북","비"]},hunum:[{kor:"비",def:"마상북"}]},{id:7115,hanja:"誆",strokes:"13",def:{en:["cheat","swindle","lie"],kr:["속일","광"]},hunum:[{kor:"광",def:"속일"}]},{id:7116,hanja:"焦",strokes:"12",def:{en:["burned","scorched","anxious","vexed"],kr:["그슬릴","초"]},hunum:[{kor:"초",def:"그슬릴"}]},{id:7117,hanja:"薺",strokes:"20",def:{en:["water","caltrop"],kr:["냉이","제"]},hunum:[{kor:"제",def:"냉이"}]},{id:7118,hanja:"誇",strokes:"13",def:{en:["exaggerate","brag","boast","flaunt"],kr:["자랑할","과"]},hunum:[{kor:"과",def:"자랑할"}]},{id:7119,hanja:"氽",strokes:"6",def:{en:["to float","to deep fry"],kr:["헤엄칠","탄"]},hunum:[{kor:"탄",def:"뜰"}]},{id:7120,hanja:"垩",strokes:"9",def:{en:["holy","sacred","sage","simplification of","daub with white mud"],kr:["Ü"]},hunum:[{kor:"성",def:"성인"},{kor:"악",def:"흰흙"}]},{id:7121,hanja:"誉",strokes:"13",def:{en:["fame","reputation","praise"],kr:["誉와","同字"]},hunum:[{kor:"예",def:"기릴"}]},{id:7122,hanja:"氾",strokes:"5",def:{en:["overflow","flood","inundate"],kr:["넘칠","범"]},hunum:[{kor:"범",def:"넘칠"}]},{id:7123,hanja:"迷",strokes:"10",def:{en:["bewitch","charm","infatuate"],kr:["전념할","미"]},hunum:[{kor:"미",def:"미혹할"}]},{id:7124,hanja:"筥",strokes:"13",def:{en:["round"],kr:["볏단","거"]},hunum:[{kor:"거",def:"쌀 담는 광주리"}]},{id:7125,hanja:"氿",strokes:"5",def:{en:["spring"],kr:["물가","궤"]},hunum:[{kor:"궤",def:"물가"}]},{id:7126,hanja:"迸",strokes:"12",def:{en:["gush out","burst forth","split"],kr:["달아날","병"]},hunum:[{kor:"병",def:"달아날"}]},{id:7127,hanja:"迹",strokes:"10",def:{en:["traces","impressions","footprints"],kr:["뒤따를","적"]},hunum:[{kor:"적",def:"발자국"}]},{id:7128,hanja:"曓",strokes:"17",def:{en:[],kr:["창졸","포"]},hunum:[{kor:"포",def:"급할"}]},{id:7129,hanja:"誌",strokes:"14",def:{en:["write down","record","magazine"],kr:["기록할","지"]},hunum:[{kor:"지",def:"기록할"}]},{id:7130,hanja:"筦",strokes:"13",def:{en:["a key","to be in charge","a pipe"],kr:["피리","관"]},hunum:[{kor:"관",def:"피리"}]},{id:7131,hanja:"鼠",strokes:"13",def:{en:["rat","mouse","KangXi radical"],kr:["쥐","서"]},hunum:[{kor:"서",def:"쥐"}]},{id:7132,hanja:"迺",strokes:"10",def:{en:["then","thereupon","only then"],kr:["이에","내"]},hunum:[{kor:"내",def:"이에"}]},{id:7133,hanja:"聒",strokes:"12",def:{en:["clamor","din","hubbub"],kr:["떠들석할","괄"]},hunum:[{kor:"괄",def:"떠들석할"}]},{id:7134,hanja:"認",strokes:"14",def:{en:["recognize","know","understand"],kr:["알","인"]},hunum:[{kor:"인",def:"알"}]},{id:7135,hanja:"筧",strokes:"13",def:{en:["bamboo water pipe"],kr:["대","홈통","견"]},hunum:[{kor:"견",def:"대 홈통"}]},{id:7136,hanja:"焭",strokes:"12",def:{en:["orphan","alone","desolate"],kr:["근싱할","경"]},hunum:[{kor:"경",def:"근싱할"}]},{id:7137,hanja:"鼢",strokes:"17",def:{en:["a variety of mole"],kr:["두더지","분"]},hunum:[{kor:"분",def:"두더지"}]},{id:7138,hanja:"焮",strokes:"12",def:{en:["heat","radiate heat","broil","cauterize"],kr:["불사를","흔"]},hunum:[{kor:"흔",def:"불사를"}]},{id:7139,hanja:"筩",strokes:"13",def:{en:["bamboo pipe","fish hook"],kr:["낚시","통"]},hunum:[{kor:"통",def:"대나무통"}]},{id:7140,hanja:"追",strokes:"10",def:{en:["pursue","chase after","expel"],kr:["쇠북","꼭지","퇴"]},hunum:[{kor:"추",def:"쫓을"},{kor:"퇴",def:"옥 다듬을"}]},{id:7141,hanja:"聕",strokes:"13",def:{en:[],kr:["긴","귀","호"]},hunum:[{kor:"호",def:"들릴"}]},{id:7142,hanja:"剃",strokes:"9",def:{en:["shave"],kr:["머리","깎을","체"]},hunum:[{kor:"체",def:"머리 깎을"}]},{id:7143,hanja:"焯",strokes:"12",def:{en:[],kr:["밝을","작"]},hunum:[{kor:"작",def:"밝을"}]},{id:7144,hanja:"曖",strokes:"17",def:{en:["obscure","dim","ambiguous","vague"],kr:["희미할","애"]},hunum:[{kor:"애",def:"희미할"}]},{id:7145,hanja:"聖",strokes:"13",def:{en:["holy","sacred","sage"],kr:["지극할","성"]},hunum:[{kor:"성",def:"성인"}]},{id:7146,hanja:"誑",strokes:"14",def:{en:["deceive","lie","delude","cheat"],kr:["속일","광"]},hunum:[{kor:"광",def:"속일"}]},{id:7147,hanja:"焰",strokes:"12",def:{en:["flame","blaze","glowing","blazing"]},hunum:[{kor:"염",def:"불꽃"}]},{id:7148,hanja:"誒",strokes:"14",def:{en:["an exclamation of confirmation"],kr:["탄식할","희"]},hunum:[{kor:"희",def:"탄식할"}]},{id:7149,hanja:"焱",strokes:"12",def:{en:["flames"],kr:["불꽃","혁"]},hunum:[{kor:"혁",def:"불꽃"}]},{id:7150,hanja:"岀",strokes:"6",def:{en:["go out"],kr:["出과","同字"]},hunum:[{kor:"출",def:"날"}]},{id:7151,hanja:"筬",strokes:"13",def:{en:["reed of a loom"],kr:["바디","성"]},hunum:[{kor:"성",def:"바디"}]},{id:7152,hanja:"剄",strokes:"9",def:{en:["cut throat"],kr:["목","벨","경"]},hunum:[{kor:"경",def:"목 벨"}]},{id:7153,hanja:"聘",strokes:"13",def:{en:["engage","employ","betroth"],kr:["찾아가다","빙"]},hunum:[{kor:"빙",def:"찾아가다"}]},{id:7154,hanja:"誓",strokes:"14",def:{en:["swear","pledge","oath"],kr:["맹세할","서"]},hunum:[{kor:"서",def:"맹세할"}]},{id:7155,hanja:"曙",strokes:"18",def:{en:["bright","light of rising sun"],kr:["새벽","서"]},hunum:[{kor:"서",def:"새벽"}]},{id:7156,hanja:"筮",strokes:"13",def:{en:["divination with stalks of plants","divining rod"],kr:["점대","서"]},hunum:[{kor:"서",def:"점대"}]},{id:7157,hanja:"瘀",strokes:"13",def:{en:["a hematoma","contusion","extravasted blood"],kr:["어혈질","어"]},hunum:[{kor:"어",def:"어혈질"}]},{id:7158,hanja:"曚",strokes:"17",def:{en:["twilight just before sun rises"],kr:["어두울","몽"]},hunum:[{kor:"몽",def:"어두울"}]},{id:7159,hanja:"曛",strokes:"18",def:{en:["twilight","sunset"],kr:["삭양","빛","훈"]},hunum:[{kor:"훈",def:"삭양 빛"}]},{id:7160,hanja:"誕",strokes:"14",def:{en:["to bear children","give birth","birth"],kr:["방탕할","탄"]},hunum:[{kor:"탄",def:"기를"}]},{id:7161,hanja:"則",strokes:"9",def:{en:["rule","law","regulation","grades"],kr:["조목","칙"]},hunum:[{kor:"측",def:"법칙"},{kor:"칙",def:"법칙"}]},{id:7162,hanja:"瘁",strokes:"13",def:{en:["feel tired","be weary","be worn out"]},hunum:[{kor:"췌",def:"병들"}]},{id:7163,hanja:"聚",strokes:"14",def:{en:["assemble","meet together","collect"],kr:["쌓을","취"]},hunum:[{kor:"취",def:"모을"}]},{id:7164,hanja:"曜",strokes:"18",def:{en:["glorious","as sun","daylight","sunlight"],kr:["요일","요"]},hunum:[{kor:"요",def:"해 비칠"}]},{id:7165,hanja:"曝",strokes:"19",def:{en:["sun","air in sun","expose or dry in the sun"],kr:["햇볕에","말릴","폭"]},hunum:[{kor:"포",def:"볕 쬘"},{kor:"폭",def:"햇볕에 말릴"}]},{id:7166,hanja:"剉",strokes:"9",def:{en:["cut","file","trim","file"],kr:["꺽을","좌"]},hunum:[{kor:"좌",def:"꺽을"}]},{id:7167,hanja:"然",strokes:"12",def:{en:["yes","certainly","pledge","promise"],kr:["그러나","연"]},hunum:[{kor:"연",def:"불사를"}]},{id:7168,hanja:"筱",strokes:"13",def:{en:["dwarf bamboo","diminutive in person"],kr:["가는","대","소"]},hunum:[{kor:"소",def:"가는 대"}]},{id:7169,hanja:"垸",strokes:"10",def:{en:[],kr:["회","섞어","바를","완"]},hunum:[{kor:"완",def:"회 섞어 바를"}]},{id:7170,hanja:"鼫",strokes:"18",def:{en:["marmot","squirrel"],kr:["석서","석"]},hunum:[{kor:"석",def:"석서"}]},{id:7171,hanja:"誘",strokes:"14",def:{en:["persuade","entice","induce","guide"],kr:["당길","유"]},hunum:[{kor:"유",def:"꾀일"}]},{id:7172,hanja:"削",strokes:"9",def:{en:["scrape off","pare","trim"],kr:["깎을","삭"]},hunum:[{kor:"삭",def:"깎을"}]},{id:7173,hanja:"鼬",strokes:"18",def:{en:["weasel","mustela itatis"],kr:["족제비","유"]},hunum:[{kor:"유",def:"청서"}]},{id:7174,hanja:"筳",strokes:"13",def:{en:["feast"],kr:["대쪽","정"]},hunum:[{kor:"정",def:"대쪽"}]},{id:7175,hanja:"剋",strokes:"9",def:{en:["subdue","overcome","cut down"],kr:["깍일","극"]},hunum:[{kor:"극",def:"깍일"}]},{id:7176,hanja:"岈",strokes:"7",def:{en:[],kr:["휑뎅그렁할","하"]},hunum:[{kor:"하",def:"휑뎅그렁할"}]},{id:7177,hanja:"誚",strokes:"14",def:{en:["criticize","scold","blame","ridicule"],kr:["꾸짖을","초"]},hunum:[{kor:"초",def:"꾸짖을"}]},{id:7178,hanja:"聞",strokes:"14",def:{en:["hear","smell","make known","news"],kr:["들을","문"]},hunum:[{kor:"문",def:"들을"}]},{id:7179,hanja:"曠",strokes:"19",def:{en:["extensive","wide","broad","empty"],kr:["밝을","광"]},hunum:[{kor:"광",def:"밝을"}]},{id:7180,hanja:"剌",strokes:"9",def:{en:["slash","cut in two","contradict"],kr:["어그러질","랄"]},hunum:[{kor:"랄",def:"어그러질"}]},{id:7181,hanja:"瘇",strokes:"14",def:{en:["dropsy of the leg"],kr:["수종","종"]},hunum:[{kor:"종",def:"수종"}]},{id:7182,hanja:"曡",strokes:"19",def:{en:["repeat","duplicate","repeitious"]},hunum:[{kor:"첩",def:"거듭"}]},{id:7183,hanja:"前",strokes:"9",def:{en:["in front","forward","preceding"],kr:["인도할","전"]},hunum:[{kor:"전",def:"앞"}]},{id:7184,hanja:"筵",strokes:"13",def:{en:["bamboo mat","feast","banquet"],kr:["대자리","연"]},hunum:[{kor:"연",def:"대자리"}]},{id:7185,hanja:"鼯",strokes:"20",def:{en:["flying squirrel"],kr:["날다람쥐","오"]},hunum:[{kor:"오",def:"날다람쥐"}]},{id:7186,hanja:"剎",strokes:"9",def:{en:["temple"],kr:["절","찰"]},hunum:[{kor:"찰",def:"절"}]},{id:7187,hanja:"岊",strokes:"7",def:{en:["foothill"],kr:["산","모퉁이","우뚝","내밀","절"]},hunum:[{kor:"절",def:"산 모퉁이 우뚝 내밀"}]},{id:7188,hanja:"駁",strokes:"14",def:{en:["varicolored","variegated","mixed","contradict","argue","suddenly"],kr:["얼룩말","박"]},hunum:[{kor:"박",def:"얼룩말"}]},{id:7189,hanja:"瘈",strokes:"14",def:{en:["prolonged fever","chronic malaria"],kr:["미칠","계"]},hunum:[{kor:"계",def:"미칠"}]},{id:7190,hanja:"剏",strokes:"9",def:{en:["establish","create","knife cut"],kr:["비롯할","창"]},hunum:[{kor:"창",def:"비롯할"}]},{id:7191,hanja:"焼",strokes:"12",def:{en:["burn","bake","heat","roast"],kr:["燒와","同字"]},hunum:[{kor:"소",def:"燒와 同"}]},{id:7192,hanja:"瘉",strokes:"14",def:{en:["get well","recover"],kr:["癒와","同字"]},hunum:[{kor:"유",def:"병 나을"}]},{id:7193,hanja:"曣",strokes:"20",def:{en:[],kr:["청명할","연"]},hunum:[{kor:"연",def:"더울"}]},{id:7194,hanja:"垽",strokes:"10",def:{en:["precipitate"],kr:["찌끼","은"]},hunum:[{kor:"은",def:"해감"}]},{id:7195,hanja:"語",strokes:"14",def:{en:["language","words","saying","expression"],kr:["말씀","어"]},hunum:[{kor:"어",def:"말씀"}]},{id:7196,hanja:"岌",strokes:"7",def:{en:["perilous","hazardous","high","steep"],kr:["높을","급"]},hunum:[{kor:"급",def:"높을"}]},{id:7197,hanja:"瘋",strokes:"14",def:{en:["crazy","insane","mentally ill"],kr:["미치광이","풍"]},hunum:[{kor:"풍",def:"두풍"}]},{id:7198,hanja:"駄",strokes:"14",def:{en:["a horse load","a pack"],kr:["馱의","俗字"]},hunum:[{kor:"타",def:"실을"},{kor:"태",def:"실을"}]},{id:7199,hanja:"曦",strokes:"20",def:{en:["sunlight","sunshine","early dawn"],kr:["햇빛","희"]},hunum:[{kor:"희",def:"햇빛"}]},{id:7200,hanja:"駅",strokes:"14",def:{en:["relay station"],kr:["驛의","略字"]},hunum:[{kor:"역",def:"역"}]},{id:7201,hanja:"誠",strokes:"14",def:{en:["sincere","honest","true","real"],kr:["진실","성"]},hunum:[{kor:"성",def:"미쁠"}]},{id:7202,hanja:"剒",strokes:"10",def:{en:[],kr:["벨","착"]},hunum:[{kor:"작",def:"건목칠"},{kor:"착",def:"벨"}]},{id:7203,hanja:"駆",strokes:"14",def:{en:["spur a horse on","expel","drive away"],kr:["驅의","略字"]},hunum:[{kor:"구",def:"몰"}]},{id:7204,hanja:"誡",strokes:"14",def:{en:["warn","admonish","warning"],kr:["경계할","계"]},hunum:[{kor:"계",def:"경계할"}]},{id:7205,hanja:"瘍",strokes:"14",def:{en:["ulcers","sores","infection"],kr:["종기","양"]},hunum:[{kor:"양",def:"머리헐"}]},{id:7206,hanja:"剓",strokes:"10",def:{en:[],kr:["뱃길","리"]},hunum:[{kor:"리",def:"뱃길"}]},{id:7207,hanja:"鼴",strokes:"22",def:{en:["a kind of insectivorous rodent"],kr:["소","같은","큰","쥐","언"]},hunum:[{kor:"언",def:"두더쥐"}]},{id:7208,hanja:"剔",strokes:"10",def:{en:["pick out","scrape off","scrape meat"],kr:["바를","척"]},hunum:[{kor:"척",def:"바를"}]},{id:7209,hanja:"曨",strokes:"20",def:{en:["vague","dim","twilight"],kr:["어스레할","롱"]},hunum:[{kor:"롱",def:"어스레할"}]},{id:7210,hanja:"岏",strokes:"7",def:{en:[],kr:["산","뾰족할","완"]},hunum:[{kor:"완",def:"산 뾰족할"}]},{id:7211,hanja:"誢",strokes:"14",def:{en:[]},hunum:[{kor:"현",def:"말다툼할"}]},{id:7212,hanja:"駈",strokes:"15",def:{en:["spur a horse on","expel","drive away"],kr:["驅와","同字"]},hunum:[{kor:"구",def:"몰"}]},{id:7213,hanja:"筽",strokes:"13",def:{en:[],kr:["버들","고리","오"]},hunum:[{kor:"오",def:"버들 고리"}]},{id:7214,hanja:"曩",strokes:"21",def:{en:["in ancient times","of old","former"],kr:["접때","낭"]},hunum:[{kor:"낭",def:"접때"}]},{id:7215,hanja:"剕",strokes:"10",def:{en:[],kr:["발","벨","비"]},hunum:[{kor:"비",def:"발 벨"}]},{id:7216,hanja:"岐",strokes:"7",def:{en:["high","majestic","fork in road"],kr:["갈림길","기"]},hunum:[{kor:"기",def:"갈림길"}]},{id:7217,hanja:"鼷",strokes:"23",def:{en:["a mouse"],kr:["새앙쥐","혜"]},hunum:[{kor:"혜",def:"새앙쥐"}]},{id:7218,hanja:"駉",strokes:"15",def:{en:["big"],kr:["목장","경"]},hunum:[{kor:"경",def:"목장"}]},{id:7219,hanja:"誣",strokes:"14",def:{en:["make false accusation","defame"],kr:["깔볼","무"]},hunum:[{kor:"무",def:"무고할"}]},{id:7220,hanja:"瘐",strokes:"14",def:{en:["to die in prison from cold and hunger","to treat with cruelty"],kr:["죄인","주려","죽을","유"]},hunum:[{kor:"유",def:"죄인 주려 죽을"}]},{id:7221,hanja:"曪",strokes:"23",def:{en:[],kr:["날","흐릴","라"]},hunum:[{kor:"라",def:"날 흐릴"}]},{id:7222,hanja:"剖",strokes:"10",def:{en:["split in two","slice","dissect"],kr:["쪼갤","부"]},hunum:[{kor:"부",def:"쪼갤"}]},{id:7223,hanja:"岑",strokes:"7",def:{en:["steep","precipitous","peak"],kr:["봉우리","잠"]},hunum:[{kor:"음",def:"기슭"},{kor:"잠",def:"봉우리"}]},{id:7224,hanja:"誤",strokes:"14",def:{en:["err","make mistake","interfere"],kr:["그릇할","오"]},hunum:[{kor:"오",def:"그릇할"}]},{id:7225,hanja:"筿",strokes:"13",def:{en:[],kr:["篠와","同字"]},hunum:[{kor:"소",def:"조릿대"}]},{id:7226,hanja:"剗",strokes:"10",def:{en:["to level off","to trim","to pare down"],kr:["깍을","잔"]},hunum:[{kor:"잔",def:"깍을"}]},{id:7227,hanja:"岒",strokes:"7",def:{en:[],kr:["산","작고","높을","겸"]},hunum:[{kor:"겸",def:"산 작고 높을"}]},{id:7228,hanja:"鼸",strokes:"23",def:{en:[],kr:["두더쥐","겸"]},hunum:[{kor:"겸",def:"두더쥐"}]},{id:7229,hanja:"誥",strokes:"14",def:{en:["inform","notify","admonish","order"],kr:["고할","고"]},hunum:[{kor:"고",def:"고할"}]},{id:7230,hanja:"曬",strokes:"23",def:{en:["dry in sun","expose to sun"]},hunum:[{kor:"쇄",def:"쬘"}]},{id:7231,hanja:"鼹",strokes:"23",def:{en:["a kind of insectivorous rodent"],kr:["鼴과","同字"]},hunum:[{kor:"언",def:"두더지"}]},{id:7232,hanja:"剙",strokes:"10",def:{en:["establish","create","knife cut"],kr:["비롯할","창"]},hunum:[{kor:"창",def:"비롯할"}]},{id:7233,hanja:"岔",strokes:"7",def:{en:["diverge","branch off","fork in road"],kr:["갈림길","차"]},hunum:[{kor:"차",def:"갈림길"}]},{id:7234,hanja:"聫",strokes:"15",def:{en:["connect","join","associate","ally"]},hunum:[{kor:"련",def:"잇닿을"}]},{id:7235,hanja:"誦",strokes:"14",def:{en:["recite","chant","repeat"],kr:["원망할","송"]},hunum:[{kor:"송",def:"풍유할"}]},{id:7236,hanja:"誧",strokes:"14",def:{en:["huge","to admonish"],kr:["간할","포"]},hunum:[{kor:"포",def:"꾀할"}]},{id:7237,hanja:"曮",strokes:"24",def:{en:[],kr:["해","다니는","길","엄"]},hunum:[{kor:"엄",def:"해 다니는 길"}]},{id:7238,hanja:"剚",strokes:"10",def:{en:["stab"],kr:["찌를","사"]},hunum:[{kor:"사",def:"찌를"}]},{id:7239,hanja:"鼻",strokes:"14",def:{en:["nose","first","KangXi radical"],kr:["코","비"]},hunum:[{kor:"비",def:"코"}]},{id:7240,hanja:"誨",strokes:"14",def:{en:["teach","instruct","encourage","urge"],kr:["가르칠","회"]},hunum:[{kor:"회",def:"가르칠"}]},{id:7241,hanja:"曯",strokes:"25",def:{en:[],kr:["비칠","촉"]},hunum:[{kor:"촉",def:"비칠"}]},{id:7242,hanja:"剛",strokes:"10",def:{en:["hard","tough","rigid","strong"],kr:["바야흐로","강"]},hunum:[{kor:"강",def:"굳을"}]},{id:7243,hanja:"瘕",strokes:"14",def:{en:["asthma","disese of the bowels"],kr:["이질","하"]},hunum:[{kor:"하",def:"이질"}]},{id:7244,hanja:"憁",strokes:"15",def:{en:[],kr:["뜻","같지","않을","총"]},hunum:[{kor:"총",def:"실심할"}]},{id:7245,hanja:"駏",strokes:"15",def:{en:["offspring of a stallion and a she"],kr:["거공벌레","거"]},hunum:[{kor:"거",def:"튀기"}]},{id:7246,hanja:"聮",strokes:"18",def:{en:["connect","join","associate","ally"],kr:["연할","련"]},hunum:[{kor:"련",def:"연할"}]},{id:7247,hanja:"曰",strokes:"4",def:{en:["say","KangXi radical"],kr:["가로되","왈"]},hunum:[{kor:"왈",def:"가로되"}]},{id:7248,hanja:"剜",strokes:"10",def:{en:["cut","cut out","pick out","scoop out"],kr:["깎을","완"]},hunum:[{kor:"완",def:"깎을"}]},{id:7249,hanja:"鼽",strokes:"16",def:{en:["clogged nose"],kr:["감기들어","코","막힐","구"]},hunum:[{kor:"구",def:"감기들어 코 막힐"}]},{id:7250,hanja:"鼾",strokes:"17",def:{en:["snore loudly"],kr:["코골","한"]},hunum:[{kor:"한",def:"코골"}]},{id:7251,hanja:"駐",strokes:"15",def:{en:["to be stationed at","reside at","to stop"],kr:["머무를","주"]},hunum:[{kor:"주",def:"머무를"}]},{id:7252,hanja:"聯",strokes:"17",def:{en:["connect","join","associate","ally"],kr:["잇달","련"]},hunum:[{kor:"련",def:"잇달"}]},{id:7253,hanja:"說",strokes:"14",def:{en:["speak","say","talk","scold","upbraid"],kr:["기꺼울","열"]},hunum:[{kor:"설",def:"말씀"},{kor:"세",def:"달랠"},{kor:"열",def:"기꺼울"}]},{id:7254,hanja:"憂",strokes:"15",def:{en:["sad","grieved","grief","melancholy"],kr:["병","우"]},hunum:[{kor:"우",def:"근심"}]},{id:7255,hanja:"剝",strokes:"10",def:{en:["peel","peel off","to shell","strip"],kr:["벗길","박"]},hunum:[{kor:"박",def:"벗길"}]},{id:7256,hanja:"聰",strokes:"17",def:{en:["intelligent","clever","bright"],kr:["민첩할","총"]},hunum:[{kor:"총",def:"귀 밝을"}]},{id:7257,hanja:"駑",strokes:"15",def:{en:["tired","old horse","old","weak"],kr:["둔할","노"]},hunum:[{kor:"노",def:"둔할"}]},{id:7258,hanja:"曲",strokes:"6",def:{en:["crooked","bent","wrong","false"],kr:["굽을","곡"]},hunum:[{kor:"곡",def:"굽을"}]},{id:7259,hanja:"憃",strokes:"15",def:{en:["foolish","stupid","dull","silly"],kr:["천치","용"]},hunum:[{kor:"용",def:"천치"}]},{id:7260,hanja:"剞",strokes:"10",def:{en:["carving or engraving knife","grave"],kr:["새김칼","기"]},hunum:[{kor:"기",def:"새김칼"}]},{id:7261,hanja:"毀",strokes:"13",def:{en:["destroy","ruin","injure","slander"],kr:["헐","훼"]},hunum:[{kor:"훼",def:"헐"}]},{id:7262,hanja:"剟",strokes:"10",def:{en:["to prick","to cut blocks","to engrave"],kr:["깎을","철"]},hunum:[{kor:"철",def:"깎을"}]},{id:7263,hanja:"駒",strokes:"15",def:{en:["colt","fleet","swift","sun","surname"],kr:["망아지","구"]},hunum:[{kor:"구",def:"망아지"}]},{id:7264,hanja:"聱",strokes:"17",def:{en:["bent and twisted","too complicated"],kr:["말","더듬거릴","오"]},hunum:[{kor:"오",def:"못 들은채 할"}]},{id:7265,hanja:"説",strokes:"14",def:{en:["speak"],kr:["說의","略字"]},hunum:[{kor:"설",def:"말씀"},{kor:"세",def:"달랠"},{kor:"열",def:"기뻐할"}]},{id:7266,hanja:"曳",strokes:"6",def:{en:["trail","tow","drag","pull"],kr:["천천히","할","예"]},hunum:[{kor:"예",def:"끌"}]},{id:7267,hanja:"毁",strokes:"13",def:{en:["destroy"],kr:["毀의","俗字"]},hunum:[{kor:"훼",def:"헐"}]},{id:7268,hanja:"聲",strokes:"17",def:{en:["sound","voice","noise","tone","music"],kr:["명예","성"]},hunum:[{kor:"성",def:"소리"}]},{id:7269,hanja:"読",strokes:"14",def:{en:["read","study","pronounce"]},hunum:[{kor:"독",def:"교활할"},{kor:"두",def:"구절"}]},{id:7270,hanja:"瘙",strokes:"15",def:{en:["itch"],kr:["종기","소"]},hunum:[{kor:"소",def:"옴"}]},{id:7271,hanja:"更",strokes:"7",def:{en:["more","still further","much more"],kr:["고칠","경"]},hunum:[{kor:"갱",def:"다시"},{kor:"경",def:"고칠"}]},{id:7272,hanja:"剠",strokes:"10",def:{en:["brand"],kr:["鯨과","同字"]},hunum:[{kor:"경",def:"자자할"},{kor:"략",def:"노략질할"},{kor:"량",def:"노략질할"}]},{id:7273,hanja:"聳",strokes:"17",def:{en:["urge on","rise up","stir","excite","to raise up","lofty"],kr:["공경할","용"]},hunum:[{kor:"용",def:"솟을"}]},{id:7274,hanja:"剡",strokes:"10",def:{en:["sharp","sharp","sharpen"],kr:["땅이름","섬"]},hunum:[{kor:"섬",def:"땅이름"}]},{id:7275,hanja:"聴",strokes:"18",def:{en:["hear","listen","understand","obey"],kr:["들을","청"]},hunum:[{kor:"청",def:"들을"}]},{id:7276,hanja:"駕",strokes:"15",def:{en:["to drive","sail","fly","a cart","carriage"],kr:["멍에","가"]},hunum:[{kor:"가",def:"멍에"}]},{id:7277,hanja:"蕁",strokes:"18",def:{en:["nettle"],kr:["말","담"]},hunum:[{kor:"담",def:"말"}]},{id:7278,hanja:"岝",strokes:"8",def:{en:["name of a mountain in Shandong"],kr:["산","높을","작"]},hunum:[{kor:"작",def:"산 높을"}]},{id:7279,hanja:"聵",strokes:"18",def:{en:["deaf"],kr:["배냇귀머거리","외"]},hunum:[{kor:"외",def:"배냇귀머거리"}]},{id:7280,hanja:"誰",strokes:"15",def:{en:["who"],kr:["무엇","수"]},hunum:[{kor:"수",def:"누구"}]},{id:7281,hanja:"毄",strokes:"14",def:{en:[],kr:["창","격"]},hunum:[{kor:"격",def:"맞부딛는 소리"}]},{id:7282,hanja:"剣",strokes:"10",def:{en:["sword","dagger","saber"],kr:["劍과","同字"]},hunum:[{kor:"검",def:"칼"}]},{id:7283,hanja:"聶",strokes:"18",def:{en:["whisper","surname"],kr:["성씨","섭"]},hunum:[{kor:"섭",def:"소곤거릴"}]},{id:7284,hanja:"蕃",strokes:"18",def:{en:["foreign things"],kr:["우거질","번"]},hunum:[{kor:"번",def:"우거질"}]},{id:7285,hanja:"曷",strokes:"9",def:{en:["why"],kr:["벌레이름","갈"]},hunum:[{kor:"갈",def:"어찌"}]},{id:7286,hanja:"毅",strokes:"15",def:{en:["resolute","decisive","firm","persist"],kr:["발끈","성낼","의"]},hunum:[{kor:"의",def:"굳셀"}]},{id:7287,hanja:"駘",strokes:"15",def:{en:["an old","tired horse","a jade","tired","exhausted"]},hunum:[{kor:"태",def:"둔마"}]},{id:7288,hanja:"職",strokes:"18",def:{en:["duty","profession","office","post"],kr:["벼슬","직"]},hunum:[{kor:"직",def:"벼슬"}]},{id:7289,hanja:"課",strokes:"15",def:{en:["lesson","course","classwork"],kr:["매길","과"]},hunum:[{kor:"과",def:"매길"}]},{id:7290,hanja:"書",strokes:"10",def:{en:["book","letter","document","writings"],kr:["쓸","서"]},hunum:[{kor:"서",def:"쓸"}]},{id:7291,hanja:"憊",strokes:"16",def:{en:["tired","weary","fatigued"],kr:["고달플","비"]},hunum:[{kor:"비",def:"고달플"}]},{id:7292,hanja:"毆",strokes:"15",def:{en:["beat","fight with fists","hit","to strike","brawl"],kr:["때릴","구"]},hunum:[{kor:"구",def:"때릴"}]},{id:7293,hanja:"曹",strokes:"11",def:{en:["ministry officials","surname"],kr:["무리","조"]},hunum:[{kor:"조",def:"무리"}]},{id:7294,hanja:"駙",strokes:"15",def:{en:["extra horse","imperial son"],kr:["곁마","부"]},hunum:[{kor:"부",def:"곁마"}]},{id:7295,hanja:"瘟",strokes:"15",def:{en:["epidemic","plague","pestilence"],kr:["온역","온"]},hunum:[{kor:"온",def:"염병"}]},{id:7296,hanja:"憋",strokes:"16",def:{en:["to suppress inner feelings","hasty"],kr:["악할","별"]},hunum:[{kor:"별",def:"악할"}]},{id:7297,hanja:"剥",strokes:"10",def:{en:["peel"]},hunum:[{kor:"박",def:"벗길"}]},{id:7298,hanja:"岡",strokes:"8",def:{en:["ridge or crest of hill"],kr:["산등성이","강"]},hunum:[{kor:"강",def:"멧동"}]},{id:7299,hanja:"蕆",strokes:"18",def:{en:["finish","complete","solve","complete"],kr:["경계할","천"]},hunum:[{kor:"천",def:"경계할"}]},{id:7300,hanja:"瘠",strokes:"15",def:{en:["thin","emaciated","barren"],kr:["파리할","척"]},hunum:[{kor:"척",def:"파리할"}]},{id:7301,hanja:"曺",strokes:"10",def:{en:[],kr:["성","조"]},hunum:[{kor:"조",def:"성"}]},{id:7302,hanja:"剦",strokes:"10",def:{en:["to castrate"]},hunum:[{kor:"엄",def:"거세할"}]},{id:7303,hanja:"瘡",strokes:"15",def:{en:["tumor","boil","sore","wound"],kr:["부스럼","창"]},hunum:[{kor:"창",def:"부스럼"}]},{id:7304,hanja:"駛",strokes:"15",def:{en:["sail","drive","pilot","fast","quick"],kr:["달릴","사"]},hunum:[{kor:"사",def:"달릴"}]},{id:7305,hanja:"憍",strokes:"15",def:{en:["be haughty","proud","arrogant"],kr:["교만할","교"]},hunum:[{kor:"교",def:"교만할"}]},{id:7306,hanja:"岣",strokes:"8",def:{en:["a hill in Hunan"],kr:["산이름","구"]},hunum:[{kor:"구",def:"산이름"}]},{id:7307,hanja:"駜",strokes:"15",def:{en:["strong horse"],kr:["살찐","말","필"]},hunum:[{kor:"필",def:"살찐 말"}]},{id:7308,hanja:"憎",strokes:"15",def:{en:["hate","detest","abhor","hatred"],kr:["미워할","증"]},hunum:[{kor:"증",def:"미워할"}]},{id:7309,hanja:"誶",strokes:"15",def:{en:["speak ill of","vilify","berate","interrogate"],kr:["꾸짖을","줄"]},hunum:[{kor:"쇄",def:"꾸짖을"},{kor:"수",def:"꾸짖을"},{kor:"신",def:"물을"},{kor:"줄",def:"몰아 세울"}]},{id:7310,hanja:"瘢",strokes:"15",def:{en:["scar","mole"],kr:["흉터","반"]},hunum:[{kor:"반",def:"흉터"}]},{id:7311,hanja:"曼",strokes:"11",def:{en:["long","extended","vast","beautiful"],kr:["끌","만"]},hunum:[{kor:"만",def:"끌"}]},{id:7312,hanja:"剨",strokes:"11",def:{en:["sound of something being smashed"],kr:["자끈할","괵"]},hunum:[{kor:"괵",def:"자끈할"}]},{id:7313,hanja:"岥",strokes:"8",def:{en:[],kr:["산","비알질","파"]},hunum:[{kor:"파",def:"산 비알질"}]},{id:7314,hanja:"駝",strokes:"15",def:{en:["a camel","humpbacked","to carry on the back"],kr:["곱사등이","타"]},hunum:[{kor:"타",def:"약대"}]},{id:7315,hanja:"蕉",strokes:"18",def:{en:["banana","plantain"],kr:["파초","초"]},hunum:[{kor:"초",def:"파초"}]},{id:7316,hanja:"剩",strokes:"12",def:{en:["leftovers","residue","remains"],kr:["남을","잉"]},hunum:[{kor:"잉",def:"남을"}]},{id:7317,hanja:"聼",strokes:"20",def:{en:["hear","listen","understand","obey"],kr:["들을","청"]},hunum:[{kor:"청",def:"들을"}]},{id:7318,hanja:"曾",strokes:"12",def:{en:["already","sign of past"],kr:["일찍","증"]},hunum:[{kor:"증",def:"일찍"}]},{id:7319,hanja:"剪",strokes:"11",def:{en:["scissors","cut","divide","separate"],kr:["가위","전"]},hunum:[{kor:"전",def:"가위"}]},{id:7320,hanja:"蕊",strokes:"18",def:{en:["unopened flowers","flower buds"],kr:["꽃","예"]},hunum:[{kor:"예",def:"꽃술"}]},{id:7321,hanja:"瘤",strokes:"15",def:{en:["tumor","lump","goiter"],kr:["혹","류"]},hunum:[{kor:"류",def:"혹"}]},{id:7322,hanja:"憐",strokes:"15",def:{en:["pity","sympathize"],kr:["불쌍히","여길","련"]},hunum:[{kor:"련",def:"불쌍히 여길"}]},{id:7323,hanja:"毋",strokes:"4",def:{en:["do not","not","surname","rad"],kr:["말","무"]},hunum:[{kor:"무",def:"말"}]},{id:7324,hanja:"岦",strokes:"8",def:{en:[],kr:["산","우뚝할","립"]},hunum:[{kor:"립",def:"산 우뚝할"}]},{id:7325,hanja:"剫",strokes:"11",def:{en:[],kr:["건목칠","탁"]},hunum:[{kor:"탁",def:"쪼갤"}]},{id:7326,hanja:"駞",strokes:"15",def:{en:["camel"],kr:["駞와","同字"]},hunum:[{kor:"타",def:"곱사등이"}]},{id:7327,hanja:"岧",strokes:"8",def:{en:["peak","cliff","precipice"],kr:["산이","높을","초"]},hunum:[{kor:"초",def:"산이 높을"}]},{id:7328,hanja:"替",strokes:"12",def:{en:["change","replace","substitute for"],kr:["바꿀","체"]},hunum:[{kor:"체",def:"바꿀"}]},{id:7329,hanja:"聽",strokes:"22",def:{en:["hear","listen","understand","obey"],kr:["들을","청"]},hunum:[{kor:"청",def:"들을"}]},{id:7330,hanja:"誹",strokes:"15",def:{en:["slander","vilify","condemn"],kr:["헐뜯을","비"]},hunum:[{kor:"비",def:"헐뜯을"}]},{id:7331,hanja:"蕋",strokes:"18",def:{en:["unopened flowers","flower buds"],kr:["蕊의","俗字"]},hunum:[{kor:"예",def:"꽃술"}]},{id:7332,hanja:"憑",strokes:"16",def:{en:["lean on","depend on","rely on"],kr:["기대다","빙"]},hunum:[{kor:"빙",def:"기대다"}]},{id:7333,hanja:"岨",strokes:"8",def:{en:["uneven"],kr:["돌산에","흙","덮일","저"]},hunum:[{kor:"저",def:"돌산에 흙 덮일"}]},{id:7334,hanja:"駟",strokes:"15",def:{en:["team of four horses"],kr:["사마","사"]},hunum:[{kor:"사",def:"사마"}]},{id:7335,hanja:"聾",strokes:"22",def:{en:["deaf"],kr:["귀머거리","롱"]},hunum:[{kor:"롱",def:"귀머거리"}]},{id:7336,hanja:"瘦",strokes:"15",def:{en:["thin","emaciated","lean","meager"],kr:["가늘","수"]},hunum:[{kor:"수",def:"파리할"}]},{id:7337,hanja:"憒",strokes:"15",def:{en:["confused","troubled","muddle"],kr:["심란할","궤"]},hunum:[{kor:"궤",def:"심란할"}]},{id:7338,hanja:"母",strokes:"5",def:{en:["mother","female elders","female"],kr:["어미","모"]},hunum:[{kor:"모",def:"어미"}]},{id:7339,hanja:"剬",strokes:"11",def:{en:[],kr:["단정할","단"]},hunum:[{kor:"단",def:"단정할"}]},{id:7340,hanja:"瘧",strokes:"15",def:{en:["intermittent fever","malaria"],kr:["학질","학"]},hunum:[{kor:"학",def:"학질"}]},{id:7341,hanja:"聿",strokes:"6",def:{en:["writing brush","pencil","thereupon"],kr:["붓","율"]},hunum:[{kor:"율",def:"마침내"}]},{id:7342,hanja:"毎",strokes:"6",def:{en:["every"]},hunum:[{kor:"매",def:"매양"}]},{id:7343,hanja:"剭",strokes:"11",def:{en:[],kr:["목","벨","옥"]},hunum:[{kor:"악",def:"형벌할"},{kor:"옥",def:"목 벨"}]},{id:7344,hanja:"岩",strokes:"8",def:{en:["cliff","rocks","mountain"],kr:["巖의","俗字"]},hunum:[{kor:"암",def:"바위"}]},{id:7345,hanja:"憔",strokes:"15",def:{en:["be worn","emaciated","haggard"],kr:["수척할","초"]},hunum:[{kor:"초",def:"수척할"}]},{id:7346,hanja:"誼",strokes:"15",def:{en:["friendship","appropriate","suitable"],kr:["다스릴","의"]},hunum:[{kor:"의",def:"옳을"}]},{id:7347,hanja:"每",strokes:"7",def:{en:["every","each"],kr:["매양","매"]},hunum:[{kor:"매",def:"매양"}]},{id:7348,hanja:"剮",strokes:"11",def:{en:["cut","cut flesh from bones"],kr:["바를","과"]},hunum:[{kor:"과",def:"바를"}]},{id:7349,hanja:"岪",strokes:"8",def:{en:[],kr:["산길","불"]},hunum:[{kor:"불",def:"산길"}]},{id:7350,hanja:"駢",strokes:"16",def:{en:["team of horses","associate","join"],kr:["騈의","俗字"]},hunum:[{kor:"변",def:"나란히 할"},{kor:"병",def:"나란히 할"}]},{id:7351,hanja:"蕎",strokes:"18",def:{en:["buckwheat"],kr:["메밀","교"]},hunum:[{kor:"교",def:"메밀"}]},{id:7352,hanja:"副",strokes:"11",def:{en:["assist","supplement","assistant"],kr:["버금","부"]},hunum:[{kor:"복",def:"버금"},{kor:"부",def:"버금"}]},{id:7353,hanja:"岫",strokes:"8",def:{en:["mountain peak","cave","cavern"],kr:["바위구멍","수"]},hunum:[{kor:"수",def:"바위구멍"}]},{id:7354,hanja:"誾",strokes:"15",def:{en:["speak gently","respectful"],kr:["화평할","은"]},hunum:[{kor:"은",def:"화평할"}]},{id:7355,hanja:"憖",strokes:"16",def:{en:["cautious","willing","but","moreover"],kr:["서러워할","은"]},hunum:[{kor:"은",def:"물을"}]},{id:7356,hanja:"岬",strokes:"8",def:{en:["cape","promontory","headland"],kr:["줄이","느런할","갑"]},hunum:[{kor:"갑",def:"산 허구리"}]},{id:7357,hanja:"調",strokes:"15",def:{en:["transfer","move","change","tune"],kr:["아침","주"]},hunum:[{kor:"조",def:"고를"},{kor:"주",def:"아침"}]},{id:7358,hanja:"毒",strokes:"8",def:{en:["poison","venom","poisonous"],kr:["독","독"]},hunum:[{kor:"독",def:"독"}]},{id:7359,hanja:"憘",strokes:"15",def:{en:["like","love","enjoy","joyful thing"],kr:["憙의","古字"]},hunum:[{kor:"희",def:"기쁠"}]},{id:7360,hanja:"割",strokes:"12",def:{en:["cut","divide","partition","cede"],kr:["벨","할"]},hunum:[{kor:"할",def:"벨"}]},{id:7361,hanja:"毓",strokes:"13",def:{en:["give birth to","bring up","educate"],kr:["많을","육"]},hunum:[{kor:"육",def:"기를"}]},{id:7362,hanja:"岭",strokes:"8",def:{en:["mountain ridge","mountain peak"],kr:["산","이름","령"]},hunum:[{kor:"령",def:"산 이름"}]},{id:7363,hanja:"憙",strokes:"16",def:{en:["like","love","enjoy","joyful thing"],kr:["성할","희"]},hunum:[{kor:"희",def:"성할"}]},{id:7364,hanja:"剳",strokes:"12",def:{en:["brief note","official communique"],kr:["낫","차"]},hunum:[{kor:"차",def:"낫"}]},{id:7365,hanja:"址",strokes:"7",def:{en:["site","location","land for house"],kr:["터","지"]},hunum:[{kor:"지",def:"터"}]},{id:7366,hanja:"比",strokes:"4",def:{en:["to compare","liken","comparison","than"],kr:["견줄","비"]},hunum:[{kor:"비",def:"견줄"}]},{id:7367,hanja:"憚",strokes:"15",def:{en:["dread","shrink from","shirk","fear"],kr:["꺼릴","탄"]},hunum:[{kor:"탄",def:"수고로울"}]},{id:7368,hanja:"蕓",strokes:"18",def:{en:["rue","an herb used keep insects away"],kr:["평지","운"]},hunum:[{kor:"운",def:"운풀"}]},{id:7369,hanja:"剴",strokes:"12",def:{en:["sharpen","carefully","thorough"],kr:["간절할","개"]},hunum:[{kor:"개",def:"낫"}]},{id:7370,hanja:"坂",strokes:"7",def:{en:["hillside","inconvenient places"],kr:["순나라","서울이름","판"]},hunum:[{kor:"판",def:"언덕"}]},{id:7371,hanja:"創",strokes:"12",def:{en:["establish","create","knife cut"],kr:["비롯할","창"]},hunum:[{kor:"창",def:"비롯할"}]},{id:7372,hanja:"瘯",strokes:"16",def:{en:["itch"],kr:["피부병","이름","족"]},hunum:[{kor:"족",def:"피부병 이름"}]},{id:7373,hanja:"駨",strokes:"16",def:{en:[]},hunum:[{kor:"순",def:"말이 달리는 모양"}]},{id:7374,hanja:"毖",strokes:"9",def:{en:["guard against","take care","caution"],kr:["삼갈","비"]},hunum:[{kor:"비",def:"삼갈"}]},{id:7375,hanja:"蕕",strokes:"18",def:{en:["caryopteris divaricata"],kr:["유풀","유"]},hunum:[{kor:"유",def:"냄새나는 풀"}]},{id:7376,hanja:"瘰",strokes:"16",def:{en:["scrofula","swellings"],kr:["연주창","라"]},hunum:[{kor:"라",def:"연주창"}]},{id:7377,hanja:"毗",strokes:"9",def:{en:["help","assist","connect","adjoin"],kr:["도울","비"]},hunum:[{kor:"비",def:"도울"}]},{id:7378,hanja:"岱",strokes:"8",def:{en:["Daishan","one of the Five Sacred Mountains in China"],kr:["태산","대"]},hunum:[{kor:"대",def:"태산"}]},{id:7379,hanja:"駪",strokes:"16",def:{en:["crowd"],kr:["빨리","걸을","신"]},hunum:[{kor:"신",def:"말 우물거릴"}]},{id:7380,hanja:"蕖",strokes:"18",def:{en:[],kr:["연꽃","거"]},hunum:[{kor:"거",def:"연꽃"}]},{id:7381,hanja:"毘",strokes:"9",def:{en:["help","assist","connect","adjoin"],kr:["毗와","同字"]},hunum:[{kor:"비",def:"도울"}]},{id:7382,hanja:"剷",strokes:"13",def:{en:["to level off","cut off","pare down","raze"],kr:["깎을","산"]},hunum:[{kor:"산",def:"깎을"}]},{id:7383,hanja:"剸",strokes:"13",def:{en:["cut"],kr:["저밀","전"]},hunum:[{kor:"단",def:"끊을"},{kor:"전",def:"오로지"}]},{id:7384,hanja:"岳",strokes:"8",def:{en:["mountain peak","surname"],kr:["큰","산","악"]},hunum:[{kor:"악",def:"큰 산"}]},{id:7385,hanja:"毚",strokes:"17",def:{en:["cunning","greedy","crafty"],kr:["토끼","참"]},hunum:[{kor:"참",def:"토끼"}]},{id:7386,hanja:"蕘",strokes:"18",def:{en:["fuel","firewood","stubble"],kr:["거칠","요"]},hunum:[{kor:"요",def:"나무할"}]},{id:7387,hanja:"剹",strokes:"13",def:{en:[],kr:["깎을","륙"]},hunum:[{kor:"륙",def:"깎을"}]},{id:7388,hanja:"岵",strokes:"8",def:{en:["hill"],kr:["산","호"]},hunum:[{kor:"호",def:"산"}]},{id:7389,hanja:"蕙",strokes:"18",def:{en:["species of fragrant orchid"],kr:["혜초","혜"]},hunum:[{kor:"혜",def:"혜초"}]},{id:7390,hanja:"駭",strokes:"16",def:{en:["terrify","frighten","scare","shock"],kr:["북","울릴","해"]},hunum:[{kor:"해",def:"놀랄"}]},{id:7391,hanja:"瘳",strokes:"16",def:{en:["to be healed","to reform"],kr:["덜릴","추"]},hunum:[{kor:"추",def:"병 나을"}]},{id:7392,hanja:"毛",strokes:"4",def:{en:["hair","fur","feathers","coarse"],kr:["털","모"]},hunum:[{kor:"모",def:"털"}]},{id:7393,hanja:"剺",strokes:"13",def:{en:["mark"],kr:["벗길","리"]},hunum:[{kor:"리",def:"벗길"}]},{id:7394,hanja:"均",strokes:"7",def:{en:["equal","even","fair","all","also"],kr:["고를","균"]},hunum:[{kor:"균",def:"고를"}]},{id:7395,hanja:"瘴",strokes:"16",def:{en:["malaria pestilential vapors"],kr:["장기","장"]},hunum:[{kor:"장",def:"장기"}]},{id:7396,hanja:"駮",strokes:"16",def:{en:["a kind of fierce animal","join","argue","transfer","piebald horse","variegated"],kr:["짐승이름","박"]},hunum:[{kor:"박",def:"짐승이름"}]},{id:7397,hanja:"岷",strokes:"8",def:{en:["min mountain","min river"],kr:["산이름","민"]},hunum:[{kor:"민",def:"산이름"}]},{id:7398,hanja:"剽",strokes:"13",def:{en:["rob","plunder","slice off","fast"],kr:["빠를","표"]},hunum:[{kor:"표",def:"표독할"}]},{id:7399,hanja:"烈",strokes:"10",def:{en:["fiery","violent","vehement","ardent"],kr:["세찰","렬"]},hunum:[{kor:"렬",def:"세찰"}]},{id:7400,hanja:"岸",strokes:"8",def:{en:["bank","shore","beach","coast"],kr:["물가","언덕","안"]},hunum:[{kor:"안",def:"물가 언덕"}]},{id:7401,hanja:"坊",strokes:"7",def:{en:["neighborhood","urban subdivision"],kr:["동네","방"]},hunum:[{kor:"방",def:"동네"}]},{id:7402,hanja:"烉",strokes:"10",def:{en:["shining","brilliant","lustrous"],kr:["煥의","俗字"]},hunum:[{kor:"환",def:"빛날"}]},{id:7403,hanja:"駱",strokes:"16",def:{en:["a white horse with black mane","a camel"],kr:["낙타","락"]},hunum:[{kor:"락",def:"낙타"}]},{id:7404,hanja:"剿",strokes:"13",def:{en:["destroy","exterminate","annihilate"],kr:["죽일","초"]},hunum:[{kor:"초",def:"죽일"}]},{id:7405,hanja:"蕞",strokes:"18",def:{en:["little","small","tiny","petty"],kr:["작은","모양","체"]},hunum:[{kor:"체",def:"작은 모양"}]},{id:7406,hanja:"烊",strokes:"10",def:{en:["to smelt","to melt"],kr:["녹일","양"]},hunum:[{kor:"양",def:"구울"}]},{id:7407,hanja:"憤",strokes:"15",def:{en:["resent","hate","indignant"],kr:["결낼","분"]},hunum:[{kor:"분",def:"결낼"}]},{id:7408,hanja:"岺",strokes:"8",def:{en:["mountain ridge","mountain peak"],kr:["재","령"]},hunum:[{kor:"령",def:"재"}]},{id:7409,hanja:"坌",strokes:"7",def:{en:["dust","earth","a bank of earth","to dig","to bring together"],kr:["먼지","분"]},hunum:[{kor:"분",def:"먼지"}]},{id:7410,hanja:"烋",strokes:"10",def:{en:["boast"],kr:["경사로울","휴"]},hunum:[{kor:"효",def:"거들거릴"},{kor:"휴",def:"경사로울"}]},{id:7411,hanja:"笆",strokes:"10",def:{en:["bamboo fence"],kr:["울타리","파"]},hunum:[{kor:"파",def:"가시 대"}]},{id:7412,hanja:"坍",strokes:"7",def:{en:["collapse","landslide"],kr:["물이","언덕","찰","담"]},hunum:[{kor:"담",def:"물이 언덕 찰"}]},{id:7413,hanja:"辛",strokes:"7",def:{en:["bitter","toilsome","laborious","eigth heavenly stem"],kr:["여덟째","천간","신"]},hunum:[{kor:"신",def:"매울"}]},{id:7414,hanja:"坎",strokes:"7",def:{en:["pit","hole","snare","trap","crisis"],kr:["불우하여","뜻을","이루지","못할","감"]},hunum:[{kor:"감",def:"구덩이"}]},{id:7415,hanja:"蕡",strokes:"18",def:{en:["hemp seeds","plant with abundant"],kr:["들깨","분"]},hunum:[{kor:"분",def:"들깨"}]},{id:7416,hanja:"辜",strokes:"12",def:{en:["crime","criminal offense"],kr:["허물","고"]},hunum:[{kor:"고",def:"허물"}]},{id:7417,hanja:"瘻",strokes:"16",def:{en:["fistula","sore","ulcer","goiter"],kr:["부스럼","루"]},hunum:[{kor:"루",def:"부스럼"}]},{id:7418,hanja:"笈",strokes:"10",def:{en:["bamboo box used carry books"],kr:["책상자","급"]},hunum:[{kor:"급",def:"책상자"}]},{id:7419,hanja:"憧",strokes:"15",def:{en:["irresolute","indecisive","yearn for"],kr:["동경할","동"]},hunum:[{kor:"동",def:"동경할"}]},{id:7420,hanja:"坏",strokes:"7",def:{en:["rotten","spoilt","bad","broken down"],kr:["언덕","배"]},hunum:[{kor:"배",def:"언덕"}]},{id:7421,hanja:"黃",strokes:"12",def:{en:["yellow","surname"],kr:["누를","황"]},hunum:[{kor:"황",def:"누를"}]},{id:7422,hanja:"坐",strokes:"7",def:{en:["sit","seat","ride","travel by"],kr:["앉을","좌"]},hunum:[{kor:"좌",def:"앉을"}]},{id:7423,hanja:"岾",strokes:"8",def:{en:["mountain pass"],kr:["고개","점"]},hunum:[{kor:"점",def:"고개"}]},{id:7424,hanja:"憨",strokes:"16",def:{en:["foolish","silly","coquettish"],kr:["미련할","감"]},hunum:[{kor:"감",def:"어리석을"}]},{id:7425,hanja:"黄",strokes:"12",def:{en:["yellow","surname"],kr:["누를","황"]},hunum:[{kor:"황",def:"누를"}]},{id:7426,hanja:"笊",strokes:"10",def:{en:["ladle","bamboo skimmer"],kr:["조리","조"]},hunum:[{kor:"조",def:"조리"}]},{id:7427,hanja:"蕣",strokes:"18",def:{en:["hibiscus"],kr:["무궁화","순"]},hunum:[{kor:"순",def:"무궁화"}]},{id:7428,hanja:"辞",strokes:"13",def:{en:["words","speech","expression","phrase"],kr:["辭의","俗字"]},hunum:[{kor:"사",def:"말씀"}]},{id:7429,hanja:"烏",strokes:"10",def:{en:["crow","rook","raven","black","dark"],kr:["탄식할","오"]},hunum:[{kor:"오",def:"까마귀"}]},{id:7430,hanja:"憩",strokes:"16",def:{en:["rest","take rest"],kr:["쉴","게"]},hunum:[{kor:"게",def:"쉴"}]},{id:7431,hanja:"坑",strokes:"7",def:{en:["pit","hole","bury","trap","harry"],kr:["구덩이","갱"]},hunum:[{kor:"갱",def:"빠질"}]},{id:7432,hanja:"駸",strokes:"17",def:{en:["galloping","speeding"],kr:["말","몰아","달릴","침"]},hunum:[{kor:"침",def:"말 몰아 달릴"}]},{id:7433,hanja:"黅",strokes:"16",def:{en:[],kr:["누른","빛","금"]},hunum:[{kor:"금",def:"누른 빛"}]},{id:7434,hanja:"蕤",strokes:"18",def:{en:["drooping leaves","fringe soft","delicate"],kr:["더북할","유"]},hunum:[{kor:"유",def:"더북할"}]},{id:7435,hanja:"辟",strokes:"13",def:{en:["law","rule","open up","develop"],kr:["피할","피"]},hunum:[{kor:"벽",def:"임금"},{kor:"피",def:"피할"}]},{id:7436,hanja:"笋",strokes:"10",def:{en:["bamboo shoots"],kr:["초목","성할","순"]},hunum:[{kor:"순",def:"초목 성할"}]},{id:7437,hanja:"笌",strokes:"10",def:{en:[],kr:["대싹","아"]},hunum:[{kor:"아",def:"대싹"}]},{id:7438,hanja:"憫",strokes:"15",def:{en:["pity","sympathize with","grieve for"],kr:["불쌍히","여길","민"]},hunum:[{kor:"민",def:"불쌍히 여길"}]},{id:7439,hanja:"憬",strokes:"15",def:{en:["rouse","awaken","become conscious"],kr:["깨달을","경"]},hunum:[{kor:"경",def:"깨달을"}]},{id:7440,hanja:"駻",strokes:"17",def:{en:["to rage","run wild"],kr:["사나운","말","한"]},hunum:[{kor:"한",def:"사나운 말"}]},{id:7441,hanja:"辢",strokes:"14",def:{en:["bitter","pungent","acrid"],kr:["辣과","同字"]},hunum:[{kor:"랄",def:"매울"}]},{id:7442,hanja:"烓",strokes:"10",def:{en:["stove"],kr:["화덕","계"]},hunum:[{kor:"계",def:"화덕"}]},{id:7443,hanja:"笏",strokes:"10",def:{en:["tablet held by someone having authority"],kr:["홀","홀"]},hunum:[{kor:"홀",def:"홀"}]},{id:7444,hanja:"蕨",strokes:"18",def:{en:["pteris aquilina","common bracken"],kr:["고사리","궐"]},hunum:[{kor:"궐",def:"고사리"}]},{id:7445,hanja:"辣",strokes:"14",def:{en:["peppery","pungent","hot","cruel"],kr:["매울","랄"]},hunum:[{kor:"랄",def:"매울"}]},{id:7446,hanja:"憮",strokes:"15",def:{en:["regretful","disappointed"],kr:["애무할","무"]},hunum:[{kor:"무",def:"어루만질"}]},{id:7447,hanja:"駽",strokes:"17",def:{en:["grey"],kr:["철총이","현"]},hunum:[{kor:"현",def:"돗총이"}]},{id:7448,hanja:"蕩",strokes:"18",def:{en:["pond","pool","wash away","cleanse"],kr:["소탕할","탕"]},hunum:[{kor:"탕",def:"넓고 클"}]},{id:7449,hanja:"憯",strokes:"15",def:{en:["sorrowful","sad","already","nevertheless"],kr:["슬퍼할","참"]},hunum:[{kor:"참",def:"슬퍼할"}]},{id:7450,hanja:"毫",strokes:"11",def:{en:["fine hair","measure of length"],kr:["가는","털","호"]},hunum:[{kor:"호",def:"가는 털"}]},{id:7451,hanja:"蕪",strokes:"18",def:{en:["luxurious growth of weeds"],kr:["거친풀","무"]},hunum:[{kor:"무",def:"거칠어질"}]},{id:7452,hanja:"笑",strokes:"10",def:{en:["smile","laugh","giggle","snicker"],kr:["웃음","소"]},hunum:[{kor:"소",def:"웃음"}]},{id:7453,hanja:"黌",strokes:"25",def:{en:["school"],kr:["글방","횡"]},hunum:[{kor:"횡",def:"글방"}]},{id:7454,hanja:"辦",strokes:"16",def:{en:["manage","do","handle","deal with"],kr:["갖출","판"]},hunum:[{kor:"판",def:"힘들일"}]},{id:7455,hanja:"蕫",strokes:"18",def:{en:[],kr:["황모","동"]},hunum:[{kor:"동",def:"황모"}]},{id:7456,hanja:"笒",strokes:"10",def:{en:[],kr:["첨대","금"]},hunum:[{kor:"금",def:"첨대"}]},{id:7457,hanja:"毬",strokes:"11",def:{en:["ball","anything round","sphere"],kr:["제기","구"]},hunum:[{kor:"구",def:"제기"}]},{id:7458,hanja:"烘",strokes:"10",def:{en:["bake","roast","dry by fire"],kr:["횃불","홍"]},hunum:[{kor:"홍",def:"횃불"}]},{id:7459,hanja:"憲",strokes:"15",def:{en:["constitution","statute","law"],kr:["기뻐할","헌"]},hunum:[{kor:"헌",def:"법"}]},{id:7460,hanja:"駿",strokes:"17",def:{en:["excellent horse","noble steed"],kr:["준마","준"]},hunum:[{kor:"순",def:"준마"},{kor:"준",def:"준마"}]},{id:7461,hanja:"钑",strokes:"8",def:{en:["spear"],kr:["鈒의","略字"]},hunum:[{kor:"삽",def:"창"}]},{id:7462,hanja:"黍",strokes:"12",def:{en:["glutinous millet","KangXi radical number"],kr:["기장","서"]},hunum:[{kor:"서",def:"기장"}]},{id:7463,hanja:"黎",strokes:"15",def:{en:["surname","numerous","many","black"],kr:["검을","려"]},hunum:[{kor:"려",def:"검을"}]},{id:7464,hanja:"辨",strokes:"16",def:{en:["distinguish","discriminate"],kr:["분별할","변"]},hunum:[{kor:"변",def:"분별할"}]},{id:7465,hanja:"烙",strokes:"10",def:{en:["brand","burn","branding iron"],kr:["지질","락"]},hunum:[{kor:"락",def:"지질"}]},{id:7466,hanja:"暁",strokes:"12",def:{en:["dawn","daybreak","clear","explicit"],kr:["曉와","同字"]},hunum:[{kor:"효",def:"새벽"}]},{id:7467,hanja:"黏",strokes:"17",def:{en:["stick to","glutinous","sticky","glue"],kr:["풀","점"]},hunum:[{kor:"점",def:"붙일"}]},{id:7468,hanja:"蕭",strokes:"18",def:{en:["common artemisia","soughing of wind","dejected"],kr:["바람소리","소"]},hunum:[{kor:"소",def:"쑥"}]},{id:7469,hanja:"毯",strokes:"12",def:{en:["rug","carpet","blanket"],kr:["담자리","담"]},hunum:[{kor:"담",def:"담자리"}]},{id:7470,hanja:"黐",strokes:"22",def:{en:["to stick","sticky"],kr:["끈끈이","리"]},hunum:[{kor:"리",def:"끈끈이"}]},{id:7471,hanja:"耀",strokes:"20",def:{en:["shine","sparkle","dazzle","glory"],kr:["빛날","요"]},hunum:[{kor:"요",def:"빛날"}]},{id:7472,hanja:"黑",strokes:"12",def:{en:["black","dark","evil","sinister"],kr:["검을","흑"]},hunum:[{kor:"흑",def:"검을"}]},{id:7473,hanja:"老",strokes:"6",def:{en:["old","aged","experienced"],kr:["늙은이","로"]},hunum:[{kor:"로",def:"늙은이"}]},{id:7474,hanja:"憶",strokes:"16",def:{en:["remember","reflect upon","memory"],kr:["생각","억"]},hunum:[{kor:"억",def:"생각"}]},{id:7475,hanja:"烜",strokes:"10",def:{en:["light of the sun","to dry in the sun"],kr:["마를","훤"]},hunum:[{kor:"훤",def:"마를"}]},{id:7476,hanja:"暄",strokes:"13",def:{en:["warm","comfortable","warm","genial"],kr:["따뜻할","훤"]},hunum:[{kor:"훤",def:"따뜻할"}]},{id:7477,hanja:"笘",strokes:"11",def:{en:[]},hunum:[{kor:"점",def:"회초리"}]},{id:7478,hanja:"蕰",strokes:"18",def:{en:["the hippuris or mare"],kr:["薀의","俗字"]},hunum:[{kor:"온",def:"붕어마름"}]},{id:7479,hanja:"黒",strokes:"12",def:{en:["black","dark","evil"],kr:["黑과","同字"]},hunum:[{kor:"흑",def:"검을"}]},{id:7480,hanja:"毳",strokes:"12",def:{en:["fine hair or fur on animals"],kr:["연하고","부드러울","취"]},hunum:[{kor:"취",def:"솜털"}]},{id:7481,hanja:"烝",strokes:"10",def:{en:["rise","steam","many","numerous"],kr:["김","오를","증"]},hunum:[{kor:"증",def:"김 오를"}]},{id:7482,hanja:"辭",strokes:"19",def:{en:["words","speech","expression","phrase"],kr:["말","사"]},hunum:[{kor:"사",def:"말씀"}]},{id:7483,hanja:"考",strokes:"6",def:{en:["examine","test","investigate"],kr:["상고할","고"]},hunum:[{kor:"고",def:"상고할"}]},{id:7484,hanja:"笙",strokes:"11",def:{en:["small gourd"],kr:["생황","생"]},hunum:[{kor:"생",def:"생황"}]},{id:7485,hanja:"憸",strokes:"16",def:{en:["to flatter","crafty","having a specious tongue"],kr:["간사할","섬"]},hunum:[{kor:"섬",def:"간사할"}]},{id:7486,hanja:"辮",strokes:"20",def:{en:["braid","pigtail","plait","queue"]},hunum:[{kor:"변",def:"땋을"}]},{id:7487,hanja:"耄",strokes:"10",def:{en:["elderly person","very old","senile"],kr:["늙은이","모"]},hunum:[{kor:"모",def:"늙은이"}]},{id:7488,hanja:"坡",strokes:"8",def:{en:["slope","bank","hillside"],kr:["제방","파"]},hunum:[{kor:"파",def:"언덕"}]},{id:7489,hanja:"笛",strokes:"11",def:{en:["bamboo flute","whistle"],kr:["날라리","적"]},hunum:[{kor:"적",def:"피리"}]},{id:7490,hanja:"黔",strokes:"16",def:{en:["black","Guizhou"],kr:["귀신","이름","금"]},hunum:[{kor:"검",def:"검을"},{kor:"금",def:"귀신 이름"}]},{id:7491,hanja:"辯",strokes:"21",def:{en:["dispute","argue","debate","discuss"],kr:["말잘할","변"]},hunum:[{kor:"변",def:"말잘할"}]},{id:7492,hanja:"者",strokes:"10",def:{en:["that which","he who","those who"],kr:["놈","자"]},hunum:[{kor:"자",def:"놈"}]},{id:7493,hanja:"烟",strokes:"10",def:{en:["smoke","soot","opium","tobacco","cigarettes"],kr:["煙과","同字"]},hunum:[{kor:"연",def:"연기"}]},{id:7494,hanja:"憺",strokes:"16",def:{en:["peace"],kr:["고요할","담"]},hunum:[{kor:"담",def:"고요할"}]},{id:7495,hanja:"暇",strokes:"13",def:{en:["leisure","relaxation","spare time"],kr:["겨를","가"]},hunum:[{kor:"가",def:"겨를"}]},{id:7496,hanja:"憻",strokes:"17",def:{en:[],kr:["坦과","同字"]},hunum:[{kor:"탄",def:"평탄할"}]},{id:7497,hanja:"辰",strokes:"7",def:{en:["early morning","fifth terrestrial branch"],kr:["다섯째지지","진"]},hunum:[{kor:"신",def:"날"},{kor:"진",def:"다섯째지지"}]},{id:7498,hanja:"耆",strokes:"10",def:{en:["man of sixty","aged","old"]},hunum:[{kor:"기",def:"늙은이"},{kor:"지",def:"이룰"}]},{id:7499,hanja:"詁",strokes:"12",def:{en:["exegesis","explanation","explain"],kr:["주석","고"]},hunum:[{kor:"고",def:"주석"}]},{id:7500,hanja:"暈",strokes:"13",def:{en:["halo in sky","fog","dizzy","faint"],kr:["무리","훈"]},hunum:[{kor:"운",def:"무리"},{kor:"훈",def:"무리"}]},{id:7501,hanja:"暉",strokes:"13",def:{en:["sunshine","light","bright","radiant"],kr:["빛","휘"]},hunum:[{kor:"휘",def:"빛"}]},{id:7502,hanja:"黖",strokes:"16",def:{en:[],kr:["물건","생겨날","기"]},hunum:[{kor:"기",def:"물건 생겨날"}]},{id:7503,hanja:"辱",strokes:"10",def:{en:["humiliate","insult","abuse"],kr:["굽힐","욕"]},hunum:[{kor:"욕",def:"욕될"}]},{id:7504,hanja:"耇",strokes:"11",def:{en:["wrinkled face of the elderly"],kr:["명길","구"]},hunum:[{kor:"구",def:"명길"}]},{id:7505,hanja:"憼",strokes:"17",def:{en:[],kr:["공경할","경"]},hunum:[{kor:"경",def:"공경할"}]},{id:7506,hanja:"笞",strokes:"11",def:{en:["bamboo rod used for beatings"],kr:["볼기칠","태"]},hunum:[{kor:"태",def:"볼기칠"}]},{id:7507,hanja:"農",strokes:"13",def:{en:["agriculture","farming","farmer"],kr:["농사","농"]},hunum:[{kor:"농",def:"농사"}]},{id:7508,hanja:"耈",strokes:"11",def:{en:["old age"],kr:["耇와","同字"]},hunum:[{kor:"구",def:"늙을"}]},{id:7509,hanja:"坤",strokes:"8",def:{en:["earth","feminine","female"],kr:["땅","곤"]},hunum:[{kor:"곤",def:"땅"}]},{id:7510,hanja:"烣",strokes:"10",def:{en:[],kr:["넓힐","회"]},hunum:[{kor:"회",def:"넓힐"}]},{id:7511,hanja:"默",strokes:"16",def:{en:["silent","quiet","still","dark"],kr:["고요할","묵"]},hunum:[{kor:"묵",def:"묵묵할"}]},{id:7512,hanja:"耉",strokes:"11",def:{en:["old age"],kr:["늙을","구"]},hunum:[{kor:"구",def:"늙을"}]},{id:7513,hanja:"憾",strokes:"16",def:{en:["to regret","remorse","dissatisfied"],kr:["한혐할","감"]},hunum:[{kor:"감",def:"섭섭할"}]},{id:7514,hanja:"暋",strokes:"13",def:{en:["strong","robust","tough"],kr:["굳셀","민"]},hunum:[{kor:"민",def:"굳셀"}]},{id:7515,hanja:"坦",strokes:"8",def:{en:["flat","smooth","self"],kr:["넓을","탄"]},hunum:[{kor:"탄",def:"너그러울"}]},{id:7516,hanja:"笠",strokes:"11",def:{en:["bamboo hat","bamboo covering"],kr:["우리","립"]},hunum:[{kor:"립",def:"우리"}]},{id:7517,hanja:"暌",strokes:"13",def:{en:["in opposition","distant from","separated"],kr:["해질","규"]},hunum:[{kor:"규",def:"해질"}]},{id:7518,hanja:"坧",strokes:"8",def:{en:[],kr:["기지","척"]},hunum:[{kor:"척",def:"기지"}]},{id:7519,hanja:"詆",strokes:"12",def:{en:["slander","condemn","reproach"],kr:["비방할","저"]},hunum:[{kor:"저",def:"꾸짖을"}]},{id:7520,hanja:"黚",strokes:"17",def:{en:[],kr:["얕은","금향빛","겸"]},hunum:[{kor:"겸",def:"얕은 금향빛"}]},{id:7521,hanja:"蕺",strokes:"19",def:{en:[],kr:["삼백초","즙"]},hunum:[{kor:"즙",def:"삼백초"}]},{id:7522,hanja:"黛",strokes:"17",def:{en:["blacken eyebrows","black"],kr:["새파랄","대"]},hunum:[{kor:"대",def:"눈썹 그릴"}]},{id:7523,hanja:"而",strokes:"6",def:{en:["and","and then","and yet","but"],kr:["이에","이"]},hunum:[{kor:"이",def:"순접의 어조사"}]},{id:7524,hanja:"暎",strokes:"13",def:{en:["sun beginning decline","reflect"],kr:["비칠","영"]},hunum:[{kor:"영",def:"비칠"}]},{id:7525,hanja:"坨",strokes:"8",def:{en:[]},hunum:[{kor:"이",def:"땅 이름"}]},{id:7526,hanja:"黜",strokes:"17",def:{en:["dismiss","demote","downgrade"],kr:["물리칠","출"]},hunum:[{kor:"출",def:"내칠"}]},{id:7527,hanja:"坩",strokes:"8",def:{en:["earthenware","earthenware vessel"],kr:["도가니","감"]},hunum:[{kor:"감",def:"도가니"}]},{id:7528,hanja:"坪",strokes:"8",def:{en:["level ground","Japanese measure"],kr:["평평할","평"]},hunum:[{kor:"평",def:"벌판"}]},{id:7529,hanja:"黝",strokes:"17",def:{en:["black"],kr:["검은칠할","유"]},hunum:[{kor:"유",def:"검푸를"}]},{id:7530,hanja:"暐",strokes:"13",def:{en:["the bright shining of the sun"],kr:["빛","환할","위"]},hunum:[{kor:"위",def:"햇빛"}]},{id:7531,hanja:"點",strokes:"17",def:{en:["dot","speck","spot","point","degree"],kr:["검은","점","점"]},hunum:[{kor:"점",def:"더러울"}]},{id:7532,hanja:"坫",strokes:"8",def:{en:["a stand on which to replace goblets after drinking"],kr:["담","점"]},hunum:[{kor:"점",def:"병풍"}]},{id:7533,hanja:"毿",strokes:"15",def:{en:["long feathers","scraggy"],kr:["털긴","삼"]},hunum:[{kor:"삼",def:"털긴"}]},{id:7534,hanja:"暑",strokes:"12",def:{en:["hot"],kr:["더울","서"]},hunum:[{kor:"서",def:"더울"}]},{id:7535,hanja:"詋",strokes:"12",def:{en:["to curse","to swear an oath incantations"],kr:["呪와","同字"]},hunum:[{kor:"주",def:"방자"}]},{id:7536,hanja:"黟",strokes:"18",def:{en:["black and shining","ebony"],kr:["고을이름","이"]},hunum:[{kor:"이",def:"검을"}]},{id:7537,hanja:"蕾",strokes:"19",def:{en:["buds","unopened flowers"],kr:["꽃봉오리","뢰"]},hunum:[{kor:"뢰",def:"꽃봉오리"}]},{id:7538,hanja:"边",strokes:"6",def:{en:["edge","margin","side","border"]},hunum:[{kor:"변",def:"가"}]},{id:7539,hanja:"耐",strokes:"9",def:{en:["endure","bear","resist","patient"],kr:["견딜","내"]},hunum:[{kor:"내",def:"견딜"}]},{id:7540,hanja:"笥",strokes:"11",def:{en:["a hamper","wicker basket"],kr:["상자","사"]},hunum:[{kor:"사",def:"상자"}]},{id:7541,hanja:"黠",strokes:"18",def:{en:["sly","cunning","shrewd","artful"],kr:["약을","힐"]},hunum:[{kor:"힐",def:"약을"}]},{id:7542,hanja:"辺",strokes:"6",def:{en:["edge","margin","side","border"],kr:["邊의","俗字"]},hunum:[{kor:"변",def:"가"}]},{id:7543,hanja:"耑",strokes:"9",def:{en:["specialized","concentrated"],kr:["시초","단"]},hunum:[{kor:"단",def:"시초"}]},{id:7544,hanja:"符",strokes:"11",def:{en:["i","tally","symbol","charm"],kr:["부신","부"]},hunum:[{kor:"부",def:"부신"}]},{id:7545,hanja:"笧",strokes:"11",def:{en:["to entwine around","check"],kr:["책","상자","책"]},hunum:[{kor:"책",def:"책 상자"}]},{id:7546,hanja:"刀",strokes:"2",def:{en:["knife","old coin","measure"],kr:["칼","도"]},hunum:[{kor:"도",def:"칼"}]},{id:7547,hanja:"辻",strokes:"6",def:{en:["crossroads","street"],kr:["네거리","십"]},hunum:[{kor:"십",def:"네거리"}]},{id:7548,hanja:"耒",strokes:"6",def:{en:["handle of plow","plow","rad"],kr:["쟁기","뢰"]},hunum:[{kor:"뢰",def:"쟁기"}]},{id:7549,hanja:"坮",strokes:"8",def:{en:["platform","unit","term of address"],kr:["들","대"]},hunum:[{kor:"대",def:"들"}]},{id:7550,hanja:"刁",strokes:"2",def:{en:["tricky","sly","crafty","cunning"],kr:["바라","조"]},hunum:[{kor:"조",def:"바라"}]},{id:7551,hanja:"込",strokes:"6",def:{en:["crowd into","go into"],kr:["담을","입"]},hunum:[{kor:"입",def:"담을"}]},{id:7552,hanja:"詎",strokes:"12",def:{en:["interjection used to express surprise"],kr:["모를","거"]},hunum:[{kor:"거",def:"어찌"}]},{id:7553,hanja:"笨",strokes:"11",def:{en:["foolish","stupid","dull","awkward"],kr:["거칠","분"]},hunum:[{kor:"분",def:"거칠"}]},{id:7554,hanja:"坯",strokes:"8",def:{en:["dam","embankment","weir"],kr:["坏와","同字"]},hunum:[{kor:"배",def:"언덕"}]},{id:7555,hanja:"刂",strokes:"2",def:{en:["knife","radical number"],kr:["刀와","同字"]},hunum:[{kor:"도",def:"칼"}]},{id:7556,hanja:"耔",strokes:"9",def:{en:["to hoe up the earth around plants"],kr:["복돋을","자"]},hunum:[{kor:"자",def:"복돋을"}]},{id:7557,hanja:"坰",strokes:"8",def:{en:["wilds"],kr:["들","경"]},hunum:[{kor:"경",def:"들"}]},{id:7558,hanja:"耕",strokes:"10",def:{en:["plow","cultivate"],kr:["밭갈","경"]},hunum:[{kor:"경",def:"밭갈"}]},{id:7559,hanja:"詐",strokes:"12",def:{en:["cheat","defraud","swindle","trick","to feign"],kr:["속일","사"]},hunum:[{kor:"사",def:"속일"}]},{id:7560,hanja:"暖",strokes:"13",def:{en:["warm","genial"],kr:["부드러울","훤"]},hunum:[{kor:"난",def:"따뜻할"},{kor:"훤",def:"부드러울"}]},{id:7561,hanja:"坱",strokes:"8",def:{en:["dust"],kr:["티끌","앙"]},hunum:[{kor:"앙",def:"티끌"}]},{id:7562,hanja:"耖",strokes:"10",def:{en:[],kr:["밭","거듭","갈","초"]},hunum:[{kor:"초",def:"밭 거듭 갈"}]},{id:7563,hanja:"辿",strokes:"7",def:{en:["follow","pursue"],kr:["천천히","걸을","천"]},hunum:[{kor:"천",def:"천천히 걸을"}]},{id:7564,hanja:"刃",strokes:"3",def:{en:["edged tool","cutlery","knife edge"],kr:["칼날","인"]},hunum:[{kor:"인",def:"칼날"}]},{id:7565,hanja:"黥",strokes:"20",def:{en:["tattooing face"],kr:["묵형할","경"]},hunum:[{kor:"경",def:"묵형할"}]},{id:7566,hanja:"詑",strokes:"12",def:{en:["cheat"],kr:["자랑할","이"]},hunum:[{kor:"이",def:"자랑할"}]},{id:7567,hanja:"暗",strokes:"13",def:{en:["dark","obscure","in secret","covert"],kr:["어리석을","암"]},hunum:[{kor:"암",def:"어두울"}]},{id:7568,hanja:"第",strokes:"11",def:{en:["sequence","number","grade","degree"],kr:["집","제"]},hunum:[{kor:"제",def:"집"}]},{id:7569,hanja:"刄",strokes:"3",def:{en:["edged tool","cutlery","knife edge"],kr:["刃의","俗字"]},hunum:[{kor:"인",def:"칼날"}]},{id:7570,hanja:"局",strokes:"7",def:{en:["bureau","office","circumstance"],kr:["부분","국"]},hunum:[{kor:"국",def:"부분"}]},{id:7571,hanja:"耗",strokes:"10",def:{en:["consume","use up","waste","squander"],kr:["줄","모"]},hunum:[{kor:"모",def:"줄"}]},{id:7572,hanja:"詒",strokes:"12",def:{en:["bequeath","pass on to future generations"],kr:["속일","태"]},hunum:[{kor:"이",def:"줄"},{kor:"태",def:"속일"}]},{id:7573,hanja:"烱",strokes:"11",def:{en:["bright","brilliant","clear","hot"],kr:["빛날","경"]},hunum:[{kor:"경",def:"빛날"}]},{id:7574,hanja:"暘",strokes:"13",def:{en:["rising sun","sunshine"],kr:["해","돋을","양"]},hunum:[{kor:"양",def:"해 돋을"}]},{id:7575,hanja:"坳",strokes:"8",def:{en:["a hollow in the ground","a cavity","depression","undulating","depressed"],kr:["凹와","同字"]},hunum:[{kor:"요",def:"우묵할"}]},{id:7576,hanja:"刅",strokes:"4",def:{en:["to create","to make to invent","to begin"],kr:["해칠","창"]},hunum:[{kor:"창",def:"해칠"}]},{id:7577,hanja:"屁",strokes:"7",def:{en:["break wind","fart","buttocks"],kr:["방귀","비"]},hunum:[{kor:"비",def:"방귀"}]},{id:7578,hanja:"黧",strokes:"20",def:{en:["a dark","sallow colour"],kr:["검을","리"]},hunum:[{kor:"래",def:"검을"},{kor:"려",def:"검을"},{kor:"리",def:"검을"}]},{id:7579,hanja:"笭",strokes:"11",def:{en:["bamboo screen"],kr:["도꼬마리","령"]},hunum:[{kor:"령",def:"도꼬마리"}]},{id:7580,hanja:"詔",strokes:"12",def:{en:["decree","proclaim","imperial decree"],kr:["고할","조"]},hunum:[{kor:"조",def:"고할"}]},{id:7581,hanja:"分",strokes:"4",def:{en:["divide","small unit of time etc"],kr:["세는","단위","푼"]},hunum:[{kor:"분",def:"나눌"},{kor:"푼",def:"세는 단위"}]},{id:7582,hanja:"黨",strokes:"20",def:{en:["political party","gang","faction"],kr:["무리","당"]},hunum:[{kor:"당",def:"무리"}]},{id:7583,hanja:"耘",strokes:"10",def:{en:["weed"],kr:["길","맬","운"]},hunum:[{kor:"운",def:"길 맬"}]},{id:7584,hanja:"痀",strokes:"10",def:{en:["to crouch","a hunchback"],kr:["곱사등이","구"]},hunum:[{kor:"구",def:"곱사등이"}]},{id:7585,hanja:"坵",strokes:"8",def:{en:["earthenware","earthenware vessel"],kr:["丘의","俗字"]},hunum:[{kor:"구",def:"언덕"}]},{id:7586,hanja:"評",strokes:"12",def:{en:["appraise","criticize","evaluate"],kr:["기롱할","평"]},hunum:[{kor:"평",def:"평론할"}]},{id:7587,hanja:"耙",strokes:"10",def:{en:["rake"],kr:["쇠시랑","파"]},hunum:[{kor:"파",def:"쇠시랑"}]},{id:7588,hanja:"切",strokes:"4",def:{en:["cut","mince","slice","carve"],kr:["온통","체"]},hunum:[{kor:"절",def:"끊을"},{kor:"체",def:"온통"}]},{id:7589,hanja:"笯",strokes:"11",def:{en:["a bird"],kr:["새장","노"]},hunum:[{kor:"노",def:"새장"}]},{id:7590,hanja:"詖",strokes:"12",def:{en:["argue","biased","one"],kr:["알소할","피"]},hunum:[{kor:"피",def:"말 잘할"}]},{id:7591,hanja:"刈",strokes:"4",def:{en:["cut off","reap","mow","sickle"],kr:["죽일","예"]},hunum:[{kor:"예",def:"풀 벨"}]},{id:7592,hanja:"痂",strokes:"10",def:{en:["scab"],kr:["헌데","딱지","가"]},hunum:[{kor:"가",def:"헌데 딱지"}]},{id:7593,hanja:"坷",strokes:"8",def:{en:["clod of earth","lump of soil"],kr:["험할","가"]},hunum:[{kor:"가",def:"험할"}]},{id:7594,hanja:"詗",strokes:"12",def:{en:["to spy","to give information","shrewd"],kr:["구할","형"]},hunum:[{kor:"형",def:"염탐할"}]},{id:7595,hanja:"痃",strokes:"10",def:{en:["indigestion","buboes","lymphatic inflammation"],kr:["적병","현"]},hunum:[{kor:"현",def:"힘줄 당기는 병"}]},{id:7596,hanja:"居",strokes:"8",def:{en:["live","dwell","reside","sit"],kr:["어조사","기"]},hunum:[{kor:"거",def:"살"},{kor:"기",def:"어조사"}]},{id:7597,hanja:"暝",strokes:"14",def:{en:["dark","obscure"],kr:["어두울","명"]},hunum:[{kor:"명",def:"어두울"}]},{id:7598,hanja:"刊",strokes:"5",def:{en:["publication","periodical","publish"],kr:["책","펴낼","간"]},hunum:[{kor:"간",def:"책 펴낼"}]},{id:7599,hanja:"屆",strokes:"8",def:{en:["numerary adjunct for time","term"],kr:["이를","계"]},hunum:[{kor:"계",def:"이를"}]},{id:7600,hanja:"詘",strokes:"12",def:{en:["bend","stoop","crouch","to yield"],kr:["굽을","굴"]},hunum:[{kor:"굴",def:"굽을"}]},{id:7601,hanja:"暞",strokes:"14",def:{en:[],kr:["밝을","교"]},hunum:[{kor:"교",def:"밝을"}]},{id:7602,hanja:"坸",strokes:"8",def:{en:[],kr:["垢와","同字"]},hunum:[{kor:"구",def:"때"}]},{id:7603,hanja:"刋",strokes:"5",def:{en:["publication","periodical","publish"],kr:["끊을","천"]},hunum:[{kor:"천",def:"끊을"}]},{id:7604,hanja:"屇",strokes:"8",def:{en:["cave","hole"],kr:["구멍","전"]},hunum:[{kor:"전",def:"구멍"}]},{id:7605,hanja:"笳",strokes:"11",def:{en:["a reed leaf whistle"],kr:["갈잎피리","가"]},hunum:[{kor:"가",def:"갈잎피리"}]},{id:7606,hanja:"病",strokes:"10",def:{en:["illness","sickness","disease"],kr:["병","병"]},hunum:[{kor:"병",def:"병"}]},{id:7607,hanja:"烹",strokes:"11",def:{en:["boil","cook","quick fry","stir fry"],kr:["요리","팽"]},hunum:[{kor:"팽",def:"삶을"}]},{id:7608,hanja:"刌",strokes:"5",def:{en:[],kr:["끊을","촌"]},hunum:[{kor:"촌",def:"끊을"}]},{id:7609,hanja:"屈",strokes:"8",def:{en:["bend","flex","bent","crooked","crouch"],kr:["굽을","굴"]},hunum:[{kor:"굴",def:"굽을"}]},{id:7610,hanja:"黮",strokes:"21",def:{en:["black","dark","unclear","private"],kr:["검을","담"]},hunum:[{kor:"담",def:"검을"}]},{id:7611,hanja:"耞",strokes:"11",def:{en:["flail"],kr:["도리깨","가"]},hunum:[{kor:"가",def:"도리깨"}]},{id:7612,hanja:"暠",strokes:"14",def:{en:["daybreak","bright and brilliant"],kr:["흴","호"]},hunum:[{kor:"고",def:"흴"},{kor:"호",def:"흴"}]},{id:7613,hanja:"坻",strokes:"8",def:{en:["an islet","a rock in a river","an embankment","to stop"],kr:["모래섬","지"]},hunum:[{kor:"지",def:"모래섬"}]},{id:7614,hanja:"症",strokes:"10",def:{en:["disease","illness","ailment"],kr:["증세","증"]},hunum:[{kor:"증",def:"증세"}]},{id:7615,hanja:"詛",strokes:"12",def:{en:["curse","swear","pledge"]},hunum:[{kor:"저",def:"저주할"}]},{id:7616,hanja:"黯",strokes:"21",def:{en:["dark","black","sullen","dreary"],kr:["어두울","암"]},hunum:[{kor:"암",def:"어두울"}]},{id:7617,hanja:"笵",strokes:"11",def:{en:["a bamboo form","a model"],kr:["법","범"]},hunum:[{kor:"범",def:"법"}]},{id:7618,hanja:"坼",strokes:"8",def:{en:["split","tear","open"],kr:["싹","트일","탁"]},hunum:[{kor:"탁",def:"찢을"}]},{id:7619,hanja:"暢",strokes:"14",def:{en:["smoothly","freely","unrestrained"],kr:["펼","창"]},hunum:[{kor:"창",def:"펼"}]},{id:7620,hanja:"刎",strokes:"6",def:{en:["behead","cut throat"],kr:["끊을","문"]},hunum:[{kor:"문",def:"목 벨"}]},{id:7621,hanja:"刏",strokes:"6",def:{en:[],kr:["찌를","기"]},hunum:[{kor:"기",def:"찌를"}]},{id:7622,hanja:"屋",strokes:"9",def:{en:["house","room","building","shelter"],kr:["거북","덮개","옥"]},hunum:[{kor:"옥",def:"집"}]},{id:7623,hanja:"耡",strokes:"13",def:{en:["hoe"],kr:["구실이름","서"]},hunum:[{kor:"서",def:"구실이름"}]},{id:7624,hanja:"暣",strokes:"14",def:{en:[],kr:["볕기운","기"]},hunum:[{kor:"기",def:"볕기운"}]},{id:7625,hanja:"痊",strokes:"11",def:{en:["be healed","be cured","recover"],kr:["병","나을","전"]},hunum:[{kor:"전",def:"병 나을"}]},{id:7626,hanja:"詞",strokes:"12",def:{en:["words","phrase","expression"],kr:["말씀","사"]},hunum:[{kor:"사",def:"말씀"}]},{id:7627,hanja:"刑",strokes:"6",def:{en:["punishment","penalty","law"],kr:["죽일","형"]},hunum:[{kor:"형",def:"형벌"}]},{id:7628,hanja:"黲",strokes:"23",def:{en:["grey black"],kr:["검푸르죽죽할","참"]},hunum:[{kor:"참",def:"검푸르죽죽할"}]},{id:7629,hanja:"烽",strokes:"11",def:{en:["signal fire","tower where signal"],kr:["봉화","봉"]},hunum:[{kor:"봉",def:"봉화"}]},{id:7630,hanja:"笹",strokes:"11",def:{en:["small bamboo"],kr:["가는","대","세"]},hunum:[{kor:"세",def:"가는 대"}]},{id:7631,hanja:"划",strokes:"6",def:{en:["to row or paddle boat","to scratch"],kr:["삿대","화"]},hunum:[{kor:"화",def:"삿대"}]},{id:7632,hanja:"屍",strokes:"9",def:{en:["corpse","carcass"],kr:["송장","시"]},hunum:[{kor:"시",def:"주검"}]},{id:7633,hanja:"詠",strokes:"12",def:{en:["sing","hum","chant"],kr:["읊을","영"]},hunum:[{kor:"영",def:"읊을"}]},{id:7634,hanja:"刓",strokes:"6",def:{en:["trim"],kr:["깎을","완"]},hunum:[{kor:"완",def:"깎을"}]},{id:7635,hanja:"屎",strokes:"9",def:{en:["excrement","dung"],kr:["똥","시"]},hunum:[{kor:"시",def:"똥"}]},{id:7636,hanja:"黴",strokes:"23",def:{en:["mold","mildew","bacteria","fungi"],kr:["썪을","미"]},hunum:[{kor:"미",def:"곰팡이"}]},{id:7637,hanja:"笻",strokes:"11",def:{en:[],kr:["대이름","공"]},hunum:[{kor:"공",def:"대이름"}]},{id:7638,hanja:"痍",strokes:"11",def:{en:["wound","bruise","sore"],kr:["흠집","이"]},hunum:[{kor:"이",def:"상할"}]},{id:7639,hanja:"詡",strokes:"13",def:{en:["boast","brag","popular","well known","to flatter"],kr:["자랑할","후"]},hunum:[{kor:"후",def:"자랑할"}]},{id:7640,hanja:"痎",strokes:"11",def:{en:[],kr:["하루거리","해"]},hunum:[{kor:"해",def:"학질"}]},{id:7641,hanja:"刔",strokes:"6",def:{en:["scoop out","gouge"],kr:["抉과","同字"]},hunum:[{kor:"결",def:"도려낼"}]},{id:7642,hanja:"屏",strokes:"9",def:{en:["folding screen","shield"],kr:["屛의","俗字"]},hunum:[{kor:"병",def:"병풍"}]},{id:7643,hanja:"黵",strokes:"25",def:{en:[],kr:["문신할","담"]},hunum:[{kor:"담",def:"문신할"}]},{id:7644,hanja:"耦",strokes:"15",def:{en:["plow side by side","team of two"],kr:["짝","맞을","우"]},hunum:[{kor:"우",def:"쟁기"}]},{id:7645,hanja:"暨",strokes:"14",def:{en:["and","attain","reach","confines"]},hunum:[{kor:"기",def:"및"}]},{id:7646,hanja:"刕",strokes:"6",def:{en:[],kr:["벨","리"]},hunum:[{kor:"리",def:"벨"}]},{id:7647,hanja:"屐",strokes:"10",def:{en:["wooden shoes","clogs"],kr:["나막신","극"]},hunum:[{kor:"극",def:"나막신"}]},{id:7648,hanja:"黶",strokes:"26",def:{en:["mole","scar","blemish"],kr:["검은","사마귀","염"]},hunum:[{kor:"염",def:"검은 사마귀"}]},{id:7649,hanja:"詢",strokes:"13",def:{en:["inquire into","ask about","consult"],kr:["믿을","순"]},hunum:[{kor:"순",def:"꾀할"}]},{id:7650,hanja:"刖",strokes:"6",def:{en:["cutting off feet as form of punishment"],kr:["발꿈치","자를","월"]},hunum:[{kor:"월",def:"발꿈치 자를"}]},{id:7651,hanja:"屑",strokes:"10",def:{en:["bits","scraps","crumbs","fragments"],kr:["가루","설"]},hunum:[{kor:"설",def:"가루"}]},{id:7652,hanja:"黷",strokes:"27",def:{en:["to dishonor","defile","corrupt","soiled"],kr:["더러울","독"]},hunum:[{kor:"독",def:"더러울"}]},{id:7653,hanja:"耨",strokes:"16",def:{en:["hoe","rake","weed"],kr:["김맬","누"]},hunum:[{kor:"누",def:"김맬"}]},{id:7654,hanja:"詣",strokes:"13",def:{en:["reach","achievement","accomplishment"],kr:["학문","통달할","예"]},hunum:[{kor:"예",def:"이를"}]},{id:7655,hanja:"暫",strokes:"15",def:{en:["temporary"],kr:["잠시","잠"]},hunum:[{kor:"잠",def:"잠시"}]},{id:7656,hanja:"列",strokes:"6",def:{en:["a line","to arrange in order","classify"],kr:["줄","렬"]},hunum:[{kor:"렬",def:"줄"}]},{id:7657,hanja:"刘",strokes:"6",def:{en:["surname","kill","destroy"],kr:["劉의","略字"]},hunum:[{kor:"류",def:"죽일"}]},{id:7658,hanja:"暬",strokes:"15",def:{en:[],kr:["설만할","설"]},hunum:[{kor:"설",def:"설만할"}]},{id:7659,hanja:"黺",strokes:"16",def:{en:[],kr:["옷에","오색","수","놓을","분"]},hunum:[{kor:"분",def:"옷에 오색 수 놓을"}]},{id:7660,hanja:"試",strokes:"13",def:{en:["test","try","experiment"],kr:["비교할","시"]},hunum:[{kor:"시",def:"시험할"}]},{id:7661,hanja:"痒",strokes:"11",def:{en:["itch"],kr:["옴","양"]},hunum:[{kor:"양",def:"가려울"}]},{id:7662,hanja:"痓",strokes:"11",def:{en:[],kr:["악할","치"]},hunum:[{kor:"치",def:"풍병"}]},{id:7663,hanja:"展",strokes:"10",def:{en:["open","unfold","stretch","extend"],kr:["살필","전"]},hunum:[{kor:"전",def:"펼칠"}]},{id:7664,hanja:"黻",strokes:"17",def:{en:["special pattern of embroidery"],kr:["수","불"]},hunum:[{kor:"불",def:"수"}]},{id:7665,hanja:"耬",strokes:"17",def:{en:["drill for sowing grain"],kr:["씨","뿌리는","기구","루"]},hunum:[{kor:"루",def:"씨 뿌리는 기구"}]},{id:7666,hanja:"暮",strokes:"15",def:{en:["evening","dusk","sunset","ending"],kr:["저물","모"]},hunum:[{kor:"모",def:"저물"}]},{id:7667,hanja:"痔",strokes:"11",def:{en:["hemorrhoids","piles"],kr:["치질","치"]},hunum:[{kor:"치",def:"치질"}]},{id:7668,hanja:"黼",strokes:"19",def:{en:["embroidered official or sacrificial robe"],kr:["수","보"]},hunum:[{kor:"보",def:"수"}]},{id:7669,hanja:"耭",strokes:"18",def:{en:["plow","cultivate"],kr:["갈","기"]},hunum:[{kor:"기",def:"갈"}]},{id:7670,hanja:"痕",strokes:"11",def:{en:["scar","mark","trace"],kr:["흉터","흔"]},hunum:[{kor:"흔",def:"흉터"}]},{id:7671,hanja:"刜",strokes:"7",def:{en:["chop"],kr:["칠","불"]},hunum:[{kor:"불",def:"칠"}]},{id:7672,hanja:"黽",strokes:"13",def:{en:["to strive","to endeavor"],kr:["힘쓸","민"]},hunum:[{kor:"민",def:"힘쓸"}]},{id:7673,hanja:"詩",strokes:"13",def:{en:["poetry","poem","verse","ode"],kr:["받들","시"]},hunum:[{kor:"시",def:"귀글"}]},{id:7674,hanja:"初",strokes:"7",def:{en:["beginning","initial","primary"],kr:["처음","초"]},hunum:[{kor:"초",def:"처음"}]},{id:7675,hanja:"慂",strokes:"14",def:{en:["urge","incite","egg"],kr:["거들어","말할","용"]},hunum:[{kor:"용",def:"권할"}]},{id:7676,hanja:"暱",strokes:"15",def:{en:["intimate","close","approach"],kr:["칠근할","닐"]},hunum:[{kor:"닐",def:"칠근할"}]},{id:7677,hanja:"詫",strokes:"13",def:{en:["to brag","exaggerated","to wonder at"],kr:["신통할","타"]},hunum:[{kor:"타",def:"자랑할"}]},{id:7678,hanja:"暲",strokes:"15",def:{en:[],kr:["햇발이","돋아올","장"]},hunum:[{kor:"장",def:"햇발이 돋아올"}]},{id:7679,hanja:"黿",strokes:"17",def:{en:["large turtle","sea turtle"],kr:["큰","자라","원"]},hunum:[{kor:"원",def:"큰 자라"}]},{id:7680,hanja:"耰",strokes:"21",def:{en:["toothless rake for drawing earth over newly sown grain"],kr:["곰방메","우"]},hunum:[{kor:"우",def:"고무래"}]},{id:7681,hanja:"暳",strokes:"15",def:{en:[]},hunum:[{kor:"혜",def:"별 반짝일"}]},{id:7682,hanja:"慄",strokes:"13",def:{en:["shiver","shudder","tremble","tremble"],kr:["두려워할","률"]},hunum:[{kor:"률",def:"두려워할"}]},{id:7683,hanja:"殀",strokes:"8",def:{en:["die young","die prematurely"],kr:["단명할","요"]},hunum:[{kor:"요",def:"단명할"}]},{id:7684,hanja:"詬",strokes:"13",def:{en:["abuse","scold","berate","insult"],kr:["꾸짖을","구"]},hunum:[{kor:"구",def:"꾸짖을"}]},{id:7685,hanja:"痘",strokes:"12",def:{en:["smallpox"],kr:["마마","두"]},hunum:[{kor:"두",def:"마마"}]},{id:7686,hanja:"殁",strokes:"8",def:{en:["die","death","dead"]},hunum:[{kor:"몰",def:"죽을"}]},{id:7687,hanja:"删",strokes:"7",def:{en:["to cut","delete"],kr:["刪의","略字"]},hunum:[{kor:"산",def:"깎을"}]},{id:7688,hanja:"屛",strokes:"11",def:{en:["folding screen"],kr:["병풍","병"]},hunum:[{kor:"병",def:"병풍"}]},{id:7689,hanja:"馓",strokes:"15",def:{en:["fried round cakes of wheat flour"]},hunum:[{kor:"산",def:"산자"}]},{id:7690,hanja:"詭",strokes:"13",def:{en:["deceive","cheat","defraud","sly"],kr:["속일","궤"]},hunum:[{kor:"궤",def:"속일"}]},{id:7691,hanja:"痙",strokes:"12",def:{en:["convulsions","fits"],kr:["심줄","땅길","경"]},hunum:[{kor:"경",def:"심줄 땅길"}]},{id:7692,hanja:"暴",strokes:"15",def:{en:["violent","brutal","tyrannical"],kr:["드러날","폭"]},hunum:[{kor:"포",def:"사나울"},{kor:"폭",def:"햇빛 쪼일"}]},{id:7693,hanja:"殂",strokes:"9",def:{en:["to die"],kr:["죽을","조"]},hunum:[{kor:"조",def:"죽을"}]},{id:7694,hanja:"詮",strokes:"13",def:{en:["explain","expound","comment on"],kr:["갖출","전"]},hunum:[{kor:"전",def:"평론할"}]},{id:7695,hanja:"慆",strokes:"13",def:{en:["excessive","dissolute","delighted"],kr:["기뻐할","도"]},hunum:[{kor:"도",def:"기뻐할"}]},{id:7696,hanja:"耳",strokes:"6",def:{en:["ear","merely","only","handle"],kr:["여덟대","손자","이"]},hunum:[{kor:"이",def:"귀"}]},{id:7697,hanja:"蔀",strokes:"17",def:{en:["screen"],kr:["빈지문","부"]},hunum:[{kor:"부",def:"빈지문"}]},{id:7698,hanja:"暵",strokes:"15",def:{en:["dry by exposing sun"],kr:["말릴","한"]},hunum:[{kor:"한",def:"말릴"}]},{id:7699,hanja:"痛",strokes:"12",def:{en:["pain","ache","sorry","sad","bitter"],kr:["몹시","통"]},hunum:[{kor:"통",def:"아플"}]},{id:7700,hanja:"慇",strokes:"14",def:{en:["careful","anxious","attentive"],kr:["간절할","은"]},hunum:[{kor:"은",def:"은근할"}]},{id:7701,hanja:"殃",strokes:"9",def:{en:["misfortune","disaster","calamity"],kr:["재앙","앙"]},hunum:[{kor:"앙",def:"재앙"}]},{id:7702,hanja:"詰",strokes:"13",def:{en:["question","interrogate"],kr:["물을","힐"]},hunum:[{kor:"힐",def:"물을"}]},{id:7703,hanja:"殄",strokes:"9",def:{en:["to end","to exterminate"],kr:["끊어질","진"]},hunum:[{kor:"진",def:"끊어질"}]},{id:7704,hanja:"慈",strokes:"14",def:{en:["kind","charitable","benevolent"],kr:["사랑할","자"]},hunum:[{kor:"자",def:"사랑할"}]},{id:7705,hanja:"属",strokes:"12",def:{en:["class","category","type","belong to"],kr:["屬의","俗字"]},hunum:[{kor:"속",def:"무리"},{kor:"촉",def:"이을"}]},{id:7706,hanja:"首",strokes:"9",def:{en:["head","first","leader","chief","a poem"],kr:["자백할","수"]},hunum:[{kor:"수",def:"머리"}]},{id:7707,hanja:"話",strokes:"13",def:{en:["speech","talk","language","dialect"],kr:["말할","화"]},hunum:[{kor:"화",def:"말할"}]},{id:7708,hanja:"馗",strokes:"11",def:{en:["cheekbone","path","road","intersection"],kr:["아홉거리","규"]},hunum:[{kor:"규",def:"아홉거리"}]},{id:7709,hanja:"耶",strokes:"9",def:{en:["used in transliteration"],kr:["아비","야"]},hunum:[{kor:"야",def:"의문의 어조야"}]},{id:7710,hanja:"該",strokes:"13",def:{en:["should","ought to","need to"],kr:["마땅할","해"]},hunum:[{kor:"해",def:"갖출"}]},{id:7711,hanja:"判",strokes:"7",def:{en:["judge","discriminate","conclude"],kr:["맡을","판"]},hunum:[{kor:"판",def:"판단할"}]},{id:7712,hanja:"殆",strokes:"9",def:{en:["dangerous","perilous","endanger"],kr:["비롯할","태"]},hunum:[{kor:"태",def:"위태할"}]},{id:7713,hanja:"慊",strokes:"13",def:{en:["to resent","contended","satisfied"],kr:["족할","협"]},hunum:[{kor:"겸",def:"앙심먹을"},{kor:"협",def:"족할"}]},{id:7714,hanja:"屠",strokes:"12",def:{en:["butcher","slaughter","massacre"],kr:["흉노왕의","이름","저"]},hunum:[{kor:"도",def:"잡을"},{kor:"저",def:"흉노왕의 이름"}]},{id:7715,hanja:"馘",strokes:"17",def:{en:["cut off left ear","tally dead enemy"],kr:["벨","괵"]},hunum:[{kor:"괵",def:"벨"}]},{id:7716,hanja:"痞",strokes:"12",def:{en:["dyspepsia","spleen infection"],kr:["뱃속","결릴","비"]},hunum:[{kor:"비",def:"뱃속 결릴"}]},{id:7717,hanja:"暸",strokes:"16",def:{en:["bright","clear"],kr:["밝을","료"]},hunum:[{kor:"료",def:"밝을"}]},{id:7718,hanja:"香",strokes:"9",def:{en:["fragrant","sweet smelling","incense"],kr:["약이름","향"]},hunum:[{kor:"향",def:"향내"}]},{id:7719,hanja:"態",strokes:"14",def:{en:["manner","bearing","attitude"],kr:["뜻","태"]},hunum:[{kor:"태",def:"모양"}]},{id:7720,hanja:"別",strokes:"7",def:{en:["separate","other","do not"],kr:["나눌","별"]},hunum:[{kor:"별",def:"나눌"}]},{id:7721,hanja:"詳",strokes:"13",def:{en:["detailed","complete","thorough"],kr:["거짓","양"]},hunum:[{kor:"상",def:"자세할"},{kor:"양",def:"거짓"}]},{id:7722,hanja:"轀",strokes:"17",def:{en:["hearse"],kr:["온량차","온"]},hunum:[{kor:"온",def:"온량차"}]},{id:7723,hanja:"暹",strokes:"16",def:{en:["rise","advance","go forward"],kr:["해돋을","섬"]},hunum:[{kor:"섬",def:"해돋을"}]},{id:7724,hanja:"慌",strokes:"13",def:{en:["nervous","panicky","frantic"],kr:["어렴풋할","황"]},hunum:[{kor:"황",def:"어렴풋할"}]},{id:7725,hanja:"刦",strokes:"7",def:{en:["take by force","coerce","disaster"],kr:["구속할","겁"]},hunum:[{kor:"겁",def:"겁탈할"}]},{id:7726,hanja:"屢",strokes:"14",def:{en:["frequently","often","again and again"],kr:["창","루"]},hunum:[{kor:"루",def:"창"}]},{id:7727,hanja:"蔆",strokes:"17",def:{en:["water","water caltrop"],kr:["마름","릉"]},hunum:[{kor:"릉",def:"마름"}]},{id:7728,hanja:"慍",strokes:"13",def:{en:["angry","indignant","resentful"],kr:["병","온"]},hunum:[{kor:"온",def:"성낼"}]},{id:7729,hanja:"刧",strokes:"7",def:{en:["disaster","misfortune","coerce"],kr:["刦의","俗字"]},hunum:[{kor:"겁",def:"겁탈할"}]},{id:7730,hanja:"詵",strokes:"13",def:{en:["inquire","question","numerous"],kr:["많을","선"]},hunum:[{kor:"선",def:"많을"}]},{id:7731,hanja:"轂",strokes:"17",def:{en:["hub of wheel"],kr:["바퀴","곡"]},hunum:[{kor:"곡",def:"바퀴"}]},{id:7732,hanja:"暻",strokes:"16",def:{en:["bright"],kr:["밝을","경"]},hunum:[{kor:"경",def:"밝을"}]},{id:7733,hanja:"刨",strokes:"7",def:{en:["carpenter","plane","level"],kr:["깎을","포"]},hunum:[{kor:"포",def:"깎을"}]},{id:7734,hanja:"層",strokes:"15",def:{en:["storey","layer","floor","stratum"],kr:["층층대","층"]},hunum:[{kor:"층",def:"겹"}]},{id:7735,hanja:"殉",strokes:"10",def:{en:["die for cause","be martyr for"],kr:["좇을","순"]},hunum:[{kor:"순",def:"죽은 사람을 따라 죽을"}]},{id:7736,hanja:"痢",strokes:"12",def:{en:["dysentery"],kr:["설사","리"]},hunum:[{kor:"리",def:"설사"}]},{id:7737,hanja:"轄",strokes:"17",def:{en:["linchpin of wheel","control"],kr:["다스릴","할"]},hunum:[{kor:"할",def:"다스릴"}]},{id:7738,hanja:"耻",strokes:"10",def:{en:["shame","humiliation","ashamed"],kr:["恥의","俗字"]},hunum:[{kor:"치",def:"부끄러울"}]},{id:7739,hanja:"痣",strokes:"12",def:{en:["spots","moles","birthmark"],kr:["사마귀","지"]},hunum:[{kor:"지",def:"사마귀"}]},{id:7740,hanja:"殊",strokes:"10",def:{en:["different","special","unusual"],kr:["지나갈","수"]},hunum:[{kor:"수",def:"죽을"}]},{id:7741,hanja:"利",strokes:"7",def:{en:["gains","advantage","profit","merit"],kr:["날카로울","리"]},hunum:[{kor:"리",def:"날카로울"}]},{id:7742,hanja:"履",strokes:"15",def:{en:["footwear","shoes","walk on","tread"],kr:["신","리"]},hunum:[{kor:"리",def:"신"}]},{id:7743,hanja:"馝",strokes:"14",def:{en:["fragrance"],kr:["향내날","필"]},hunum:[{kor:"필",def:"향내날"}]},{id:7744,hanja:"痤",strokes:"12",def:{en:["a swelling of the lymph nodes"],kr:["뾰루지","좌"]},hunum:[{kor:"좌",def:"뾰루지"}]},{id:7745,hanja:"残",strokes:"10",def:{en:["injure","spoil","oppress","broken"],kr:["해칠","잔"]},hunum:[{kor:"잔",def:"해칠"}]},{id:7746,hanja:"刪",strokes:"7",def:{en:["to cut","delete","erase","to geld"],kr:["깎을","산"]},hunum:[{kor:"산",def:"깎을"}]},{id:7747,hanja:"轅",strokes:"17",def:{en:["axle","magistrate","surname"],kr:["별","이름","원"]},hunum:[{kor:"원",def:"진문"}]},{id:7748,hanja:"暾",strokes:"16",def:{en:["morning sun","sunrise"],kr:["아침해","돈"]},hunum:[{kor:"돈",def:"아침해"}]},{id:7749,hanja:"暿",strokes:"16",def:{en:[],kr:["웃을","희"]},hunum:[{kor:"희",def:"웃을"}]},{id:7750,hanja:"耽",strokes:"10",def:{en:["indulge in","be negligent"],kr:["깊고","멀","탐"]},hunum:[{kor:"탐",def:"즐길"}]},{id:7751,hanja:"詹",strokes:"13",def:{en:["surname","talk too much","verbose"],kr:["이를","첨"]},hunum:[{kor:"첨",def:"이를"}]},{id:7752,hanja:"别",strokes:"7",def:{en:["separate","other","do not"],kr:["別의","俗字"]},hunum:[{kor:"별",def:"나눌"}]},{id:7753,hanja:"轆",strokes:"18",def:{en:["windlass","pulley","capstan","wheel"],kr:["도르래","록"]},hunum:[{kor:"록",def:"도르래"}]},{id:7754,hanja:"殍",strokes:"11",def:{en:["to starve to death"],kr:["굶어","죽을","표"]},hunum:[{kor:"표",def:"굶어 죽을"}]},{id:7755,hanja:"慒",strokes:"14",def:{en:[],kr:["생각할","종"]},hunum:[{kor:"종",def:"생각할"}]},{id:7756,hanja:"屨",strokes:"17",def:{en:["straw sandals","tread on"],kr:["삼으로","짠","신","구"]},hunum:[{kor:"구",def:"삼으로 짠 신"}]},{id:7757,hanja:"慓",strokes:"14",def:{en:[],kr:["급할","표"]},hunum:[{kor:"표",def:"급할"}]},{id:7758,hanja:"耿",strokes:"10",def:{en:["bright","shining","have guts"],kr:["빛날","경"]},hunum:[{kor:"경",def:"빛날"}]},{id:7759,hanja:"痧",strokes:"12",def:{en:["cholera","colic"],kr:["쥐통","사"]},hunum:[{kor:"사",def:"쥐통"}]},{id:7760,hanja:"詼",strokes:"13",def:{en:["tease","joke with","ridicule","mock"],kr:["조롱할","회"]},hunum:[{kor:"회",def:"조롱할"}]},{id:7761,hanja:"轉",strokes:"18",def:{en:["shift","move","turn"],kr:["굴릴","전"]},hunum:[{kor:"전",def:"구를"}]},{id:7762,hanja:"刮",strokes:"8",def:{en:["shave","pare off","scrape"],kr:["깍을","괄"]},hunum:[{kor:"괄",def:"깍을"}]},{id:7763,hanja:"慕",strokes:"15",def:{en:["long for","desire","admire"],kr:["그리워할","모"]},hunum:[{kor:"모",def:"그리워할"}]},{id:7764,hanja:"痩",strokes:"12",def:{en:["thin","emaciated","lean","meager"],kr:["瘦와","同字"]},hunum:[{kor:"수",def:"여윌"}]},{id:7765,hanja:"殑",strokes:"11",def:{en:["swoon"],kr:["까무라칠","긍"]},hunum:[{kor:"긍",def:"까무라칠"}]},{id:7766,hanja:"到",strokes:"8",def:{en:["go to","arrive","been to"],kr:["이를","도"]},hunum:[{kor:"도",def:"이를"}]},{id:7767,hanja:"馣",strokes:"17",def:{en:[],kr:["향기로울","암"]},hunum:[{kor:"암",def:"향기로울"}]},{id:7768,hanja:"刱",strokes:"8",def:{en:["establish","create","knife cut"],kr:["비롯할","창"]},hunum:[{kor:"창",def:"비롯할"}]},{id:7769,hanja:"屬",strokes:"21",def:{en:["class","category","type","to belong to"],kr:["조심할","촉"]},hunum:[{kor:"속",def:"무리"},{kor:"촉",def:"이을"}]},{id:7770,hanja:"詿",strokes:"13",def:{en:["error","mistake","deceive","mislead"],kr:["그르칠","괘"]},hunum:[{kor:"괘",def:"그르칠"}]},{id:7771,hanja:"轍",strokes:"19",def:{en:["wagon ruts","wheel tracks"],kr:["바퀴","자국","철"]},hunum:[{kor:"철",def:"바퀴 자국"}]},{id:7772,hanja:"慘",strokes:"14",def:{en:["sad","pitiful","wretched","cruel"]},hunum:[{kor:"참",def:"참혹할"},{kor:"침",def:"참혹할"}]},{id:7773,hanja:"刲",strokes:"8",def:{en:["cut","slice off"],kr:["찌를","규"]},hunum:[{kor:"규",def:"찌를"}]},{id:7774,hanja:"馥",strokes:"18",def:{en:["fragrance","scent","aroma"],kr:["향기","복"]},hunum:[{kor:"복",def:"향기"}]},{id:7775,hanja:"蔑",strokes:"17",def:{en:["disdain","disregard","slight"],kr:["업신여길","멸"]},hunum:[{kor:"멸",def:"업신여길"}]},{id:7776,hanja:"慙",strokes:"15",def:{en:["ashamed","humiliated","shameful"],kr:["부끄러울","참"]},hunum:[{kor:"참",def:"부끄러울"}]},{id:7777,hanja:"刳",strokes:"8",def:{en:["cut out","dig","rip up","scoop out"],kr:["가를","고"]},hunum:[{kor:"고",def:"가를"}]},{id:7778,hanja:"圀",strokes:"9",def:{en:["nation","country","nation"],kr:["國의","古字"]},hunum:[{kor:"국",def:"나라"}]},{id:7779,hanja:"轎",strokes:"19",def:{en:["sedan","palanquin"],kr:["가마","교"]},hunum:[{kor:"교",def:"가마"}]},{id:7780,hanja:"刴",strokes:"8",def:{en:["chop by pounding","mince","hash"],kr:["꺾을","타"]},hunum:[{kor:"타",def:"찍을"}]},{id:7781,hanja:"慚",strokes:"14",def:{en:["ashamed","humiliated","shameful"],kr:["부끄러울","참"]},hunum:[{kor:"참",def:"부끄러울"}]},{id:7782,hanja:"屯",strokes:"4",def:{en:["village","hamlet","camp","station"],kr:["어려울","준"]},hunum:[{kor:"둔",def:"진칠"},{kor:"준",def:"어려울"}]},{id:7783,hanja:"圁",strokes:"10",def:{en:[],kr:["물이름","은"]},hunum:[{kor:"은",def:"물이름"}]},{id:7784,hanja:"蔓",strokes:"17",def:{en:["creeping plants","tendrils","vines"],kr:["덩굴","만"]},hunum:[{kor:"만",def:"덩굴"}]},{id:7785,hanja:"圂",strokes:"10",def:{en:["pig","privy"],kr:["뒷간","혼"]},hunum:[{kor:"혼",def:"뒷간"}]},{id:7786,hanja:"馨",strokes:"20",def:{en:["fragrant","aromatic","distant fragrance"],kr:["향기","형"]},hunum:[{kor:"형",def:"향기"}]},{id:7787,hanja:"殖",strokes:"12",def:{en:["breed","spawn","increase","prosper"],kr:["성할","식"]},hunum:[{kor:"식",def:"날"}]},{id:7788,hanja:"刵",strokes:"8",def:{en:["punishment by cutting off ears"],kr:["귀","베일","이"]},hunum:[{kor:"이",def:"귀 베일"}]},{id:7789,hanja:"蔔",strokes:"17",def:{en:["radish"],kr:["무우","복"]},hunum:[{kor:"복",def:"무우"}]},{id:7790,hanja:"圃",strokes:"10",def:{en:["garden","cultivated field"],kr:["산이름","포"]},hunum:[{kor:"포",def:"채마밭"}]},{id:7791,hanja:"蔕",strokes:"17",def:{en:["peduncle or stem of plants"],kr:["작은","가시","체"]},hunum:[{kor:"체",def:"작은 가시"}]},{id:7792,hanja:"制",strokes:"8",def:{en:["system","establish","overpower"],kr:["억제할","제"]},hunum:[{kor:"제",def:"억제할"}]},{id:7793,hanja:"炁",strokes:"8",def:{en:["breath","air","steam","gas"],kr:["기운","기"]},hunum:[{kor:"기",def:"기운"}]},{id:7794,hanja:"山",strokes:"3",def:{en:["mountain","hill","peak"],kr:["뫼","산"]},hunum:[{kor:"산",def:"뫼"}]},{id:7795,hanja:"慝",strokes:"15",def:{en:["do evil in secret","evil","vice"],kr:["더러울","특"]},hunum:[{kor:"특",def:"간악할"}]},{id:7796,hanja:"殘",strokes:"12",def:{en:["injure","spoil","oppress","broken"],kr:["해칠","잔"]},hunum:[{kor:"잔",def:"해칠"}]},{id:7797,hanja:"刷",strokes:"8",def:{en:["brush","clean with brush","scrub"],kr:["문지를","쇄"]},hunum:[{kor:"쇄",def:"긁을"}]},{id:7798,hanja:"圄",strokes:"10",def:{en:["prison","jail"],kr:["가둘","어"]},hunum:[{kor:"어",def:"가둘"}]},{id:7799,hanja:"轒",strokes:"19",def:{en:["chariot"],kr:["병거","분"]},hunum:[{kor:"분",def:"병거"}]},{id:7800,hanja:"痰",strokes:"13",def:{en:["phlegm","mucus","spittle"],kr:["가래","담"]},hunum:[{kor:"담",def:"가래"}]},{id:7801,hanja:"圅",strokes:"10",def:{en:["correspondence","a case","a box"],kr:["담을","함"]},hunum:[{kor:"함",def:"담을"}]},{id:7802,hanja:"券",strokes:"8",def:{en:["certificate","ticket","title deeds"],kr:["엄쪽","어음을","쪼갠","한","쪽","권"]},hunum:[{kor:"권",def:"엄쪽(어음을 쪼갠 한 쪽)"}]},{id:7803,hanja:"屳",strokes:"5",def:{en:[],kr:["날","선"]},hunum:[{kor:"선",def:"날"}]},{id:7804,hanja:"蔗",strokes:"17",def:{en:["sugar cane"],kr:["사탕수수","자"]},hunum:[{kor:"자",def:"사탕수수"}]},{id:7805,hanja:"刹",strokes:"8",def:{en:["temple","shrine","monastary"],kr:["절","찰"]},hunum:[{kor:"찰",def:"절"}]},{id:7806,hanja:"馬",strokes:"10",def:{en:["horse","surname","KangXi radical"],kr:["말","마"]},hunum:[{kor:"마",def:"말"}]},{id:7807,hanja:"蔘",strokes:"17",def:{en:["ginseng","huge"],kr:["인삼","삼"]},hunum:[{kor:"삼",def:"인삼"}]},{id:7808,hanja:"轔",strokes:"19",def:{en:["rumbling of vehicles","threshold"],kr:["수레","소리","린"]},hunum:[{kor:"린",def:"수레 소리"}]},{id:7809,hanja:"痲",strokes:"13",def:{en:["pock","leprosy","measles"],kr:["저릴","마"]},hunum:[{kor:"마",def:"저릴"}]},{id:7810,hanja:"慟",strokes:"14",def:{en:["sadness","grief","mourn","be moved"],kr:["서러울","통"]},hunum:[{kor:"통",def:"서러울"}]},{id:7811,hanja:"炅",strokes:"8",def:{en:["brilliance"],kr:["빛날","경"]},hunum:[{kor:"경",def:"빛날"}]},{id:7812,hanja:"刺",strokes:"8",def:{en:["stab","prick","irritate","prod"],kr:["찌를","척"]},hunum:[{kor:"자",def:"찌를"},{kor:"척",def:"찌를"}]},{id:7813,hanja:"圇",strokes:"11",def:{en:["all","complete","entire"],kr:["완전할","륜"]},hunum:[{kor:"륜",def:"완전할"}]},{id:7814,hanja:"馭",strokes:"12",def:{en:["drive","ride","manage","control"],kr:["말","부릴","어"]},hunum:[{kor:"어",def:"말 부릴"}]},{id:7815,hanja:"痳",strokes:"13",def:{en:["pock","leprosy","measles"],kr:["임질","림"]},hunum:[{kor:"림",def:"임질"}]},{id:7816,hanja:"馮",strokes:"12",def:{en:["surname","gallop","by dint of"],kr:["고을이름","풍"]},hunum:[{kor:"풍",def:"벼슬이름"}]},{id:7817,hanja:"痴",strokes:"13",def:{en:["foolish","stupid","dumb","silly"],kr:["癡의","俗字"]},hunum:[{kor:"치",def:"어리석을"}]},{id:7818,hanja:"炆",strokes:"8",def:{en:["cook over a slow fire"],kr:["따뜻할","문"]},hunum:[{kor:"문",def:"따뜻할"}]},{id:7819,hanja:"慠",strokes:"14",def:{en:[],kr:["거만할","오"]},hunum:[{kor:"오",def:"거만할"}]},{id:7820,hanja:"刻",strokes:"8",def:{en:["carve","engrave","quarter hour"],kr:["새길","각"]},hunum:[{kor:"각",def:"새길"}]},{id:7821,hanja:"圈",strokes:"11",def:{en:["to circle","a circle","corral"],kr:["둥글","권"]},hunum:[{kor:"권",def:"둥글"}]},{id:7822,hanja:"蔚",strokes:"17",def:{en:["luxuriant","thick","ornamental"],kr:["잔무늬","위"]},hunum:[{kor:"울",def:"고을이름"},{kor:"위",def:"제비쑥"}]},{id:7823,hanja:"圉",strokes:"11",def:{en:["stable","corral","enclosure","frontier","border"],kr:["변방","어"]},hunum:[{kor:"어",def:"마부"}]},{id:7824,hanja:"鑂",strokes:"22",def:{en:[],kr:["금빛","투색할","훈"]},hunum:[{kor:"훈",def:"금빛 투색할"}]},{id:7825,hanja:"圊",strokes:"11",def:{en:["rest room"],kr:["뒷간","청"]},hunum:[{kor:"청",def:"뒷간"}]},{id:7826,hanja:"馰",strokes:"13",def:{en:[],kr:["소태성","적"]},hunum:[{kor:"적",def:"별배기"}]},{id:7827,hanja:"慢",strokes:"14",def:{en:["slow","leisurely","sluggish"],kr:["게으를","만"]},hunum:[{kor:"만",def:"게으를"}]},{id:7828,hanja:"殞",strokes:"14",def:{en:["die","perish","vanish","fall"],kr:["떨어질","운"]},hunum:[{kor:"운",def:"죽을"}]},{id:7829,hanja:"轗",strokes:"20",def:{en:["fail"]},hunum:[{kor:"검",def:"가기 힘들"}]},{id:7830,hanja:"屹",strokes:"6",def:{en:["to rise high","to stand erect"],kr:["산","우뚝솟을","흘"]},hunum:[{kor:"흘",def:"산 우뚝솟을"}]},{id:7831,hanja:"轘",strokes:"20",def:{en:["tear asunder between chariots"],kr:["환형","환"]},hunum:[{kor:"환",def:"환형"}]},{id:7832,hanja:"馱",strokes:"12",def:{en:["carry on back"],kr:["짐","실을","타"]},hunum:[{kor:"타",def:"탈"}]},{id:7833,hanja:"竄",strokes:"18",def:{en:["run away","revise","edit","expel"],kr:["숨을","찬"]},hunum:[{kor:"찬",def:"숨을"}]},{id:7834,hanja:"炉",strokes:"8",def:{en:["fireplace","stove","oven","furnace"],kr:["爐의","略字"]},hunum:[{kor:"로",def:"화로"}]},{id:7835,hanja:"慣",strokes:"14",def:{en:["habit","custom","habitually","usually"],kr:["버릇","관"]},hunum:[{kor:"관",def:"버릇"}]},{id:7836,hanja:"國",strokes:"11",def:{en:["nation","country","nation"],kr:["나라","국"]},hunum:[{kor:"국",def:"나라"}]},{id:7837,hanja:"炊",strokes:"8",def:{en:["cook","meal"],kr:["밥","지을","취"]},hunum:[{kor:"취",def:"불 지필"}]},{id:7838,hanja:"圌",strokes:"12",def:{en:["fence"],kr:["둥근","대그릇","천"]},hunum:[{kor:"천",def:"둥근 대그릇"}]},{id:7839,hanja:"鑄",strokes:"22",def:{en:["melt","cast","coin","mint"],kr:["쇠","부어","만들","주"]},hunum:[{kor:"주",def:"쇠 부어 만들"}]},{id:7840,hanja:"竅",strokes:"18",def:{en:["hole","opening","aperture"],kr:["구멍","규"]},hunum:[{kor:"규",def:"구멍"}]},{id:7841,hanja:"慤",strokes:"15",def:{en:["sincerity","honesty","modest"],kr:["삼갈","각"]},hunum:[{kor:"각",def:"삼갈"}]},{id:7842,hanja:"屺",strokes:"6",def:{en:["a hill with trees or grass"],kr:["민둥산","기"]},hunum:[{kor:"기",def:"민둥산"}]},{id:7843,hanja:"蔞",strokes:"17",def:{en:["Artemisia stelleriana"],kr:["쑥","루"]},hunum:[{kor:"루",def:"쑥"}]},{id:7844,hanja:"馳",strokes:"13",def:{en:["go quickly or swiftly","hurry"],kr:["전할","치"]},hunum:[{kor:"치",def:"달릴"}]},{id:7845,hanja:"蔟",strokes:"17",def:{en:["frame on which silkworms spin"],kr:["태주","주"]},hunum:[{kor:"주",def:"태주"}]},{id:7846,hanja:"圍",strokes:"12",def:{en:["surround","encircle","corral"],kr:["지킬","위"]},hunum:[{kor:"위",def:"둘레"}]},{id:7847,hanja:"麀",strokes:"13",def:{en:["female deer","doe"],kr:["암사슴","우"]},hunum:[{kor:"우",def:"암사슴"}]},{id:7848,hanja:"痹",strokes:"13",def:{en:["paralysis","numbness"],kr:["저릴","비"]},hunum:[{kor:"비",def:"저릴"}]},{id:7849,hanja:"殢",strokes:"15",def:{en:["be in great difficulty","greatly"],kr:["나른할","체"]},hunum:[{kor:"체",def:"나른할"}]},{id:7850,hanja:"竇",strokes:"20",def:{en:["surname","hole","burrow","corrupt"],kr:["구멍","두"]},hunum:[{kor:"두",def:"구멍"}]},{id:7851,hanja:"圎",strokes:"12",def:{en:["circle","round","circular","complete"],kr:["圓의","俗字"]},hunum:[{kor:"원",def:"둥글"}]},{id:7852,hanja:"馴",strokes:"13",def:{en:["tame","docile","obedient"],kr:["가르칠","훈"]},hunum:[{kor:"순",def:"길들일"},{kor:"훈",def:"가르칠"}]},{id:7853,hanja:"痺",strokes:"13",def:{en:["paralysis","numbness"],kr:["암메추라기","비"]},hunum:[{kor:"비",def:"암메추라기"}]},{id:7854,hanja:"慧",strokes:"15",def:{en:["bright","intelligent","intelligence"],kr:["총명할","혜"]},hunum:[{kor:"혜",def:"슬기로울"}]},{id:7855,hanja:"竈",strokes:"21",def:{en:["furnace","kitchen range"],kr:["부엌","조"]},hunum:[{kor:"조",def:"부엌"}]},{id:7856,hanja:"圏",strokes:"11",def:{en:["to circle","a circle","corral"],kr:["圈과","同字"]},hunum:[{kor:"권",def:"둥글"}]},{id:7857,hanja:"麂",strokes:"13",def:{en:["species of deer"],kr:["큰고라니","궤"]},hunum:[{kor:"궤",def:"큰고라니"}]},{id:7858,hanja:"蔡",strokes:"17",def:{en:["surname","species of tortoise"],kr:["거북","채"]},hunum:[{kor:"살",def:"내칠"},{kor:"채",def:"거북"}]},{id:7859,hanja:"炎",strokes:"8",def:{en:["flame","blaze","hot"],kr:["임금의","호","염"]},hunum:[{kor:"염",def:"불꽃"}]},{id:7860,hanja:"慨",strokes:"12",def:{en:["sigh","regret","generous"],kr:["슬플","개"]},hunum:[{kor:"개",def:"분할"}]},{id:7861,hanja:"殤",strokes:"15",def:{en:["die young","national mourning"],kr:["일찍죽을","상"]},hunum:[{kor:"상",def:"일찍죽을"}]},{id:7862,hanja:"轝",strokes:"21",def:{en:["envy","hate","dislike","resentment"],kr:["輿와","同字"]},hunum:[{kor:"여",def:"수레"}]},{id:7863,hanja:"痼",strokes:"13",def:{en:["chronic disease"],kr:["고질","고"]},hunum:[{kor:"고",def:"고질"}]},{id:7864,hanja:"轞",strokes:"21",def:{en:["a vehicle for transporting prisoners"],kr:["함거","함"]},hunum:[{kor:"함",def:"함거"}]},{id:7865,hanja:"麄",strokes:"15",def:{en:["coarse","rough","rude"]},hunum:[{kor:"추",def:"거칠"}]},{id:7866,hanja:"竊",strokes:"22",def:{en:["secretly","stealthily","steal","thief"],kr:["얕을","절"]},hunum:[{kor:"절",def:"좀도둑"}]},{id:7867,hanja:"蔣",strokes:"17",def:{en:["surname","hydropyrum latifalium"],kr:["줄","장"]},hunum:[{kor:"장",def:"줄"}]},{id:7868,hanja:"立",strokes:"5",def:{en:["stand","let stand","establish","set"],kr:["설","립"]},hunum:[{kor:"립",def:"설"}]},{id:7869,hanja:"園",strokes:"13",def:{en:["garden","park","orchard"],kr:["울타리","원"]},hunum:[{kor:"원",def:"동산"}]},{id:7870,hanja:"轟",strokes:"21",def:{en:["rumble","explosion","blast"],kr:["울릴","굉"]},hunum:[{kor:"굉",def:"울릴"}]},{id:7871,hanja:"鑊",strokes:"22",def:{en:["cauldron","large iron pot","a wok"],kr:["가마","확"]},hunum:[{kor:"확",def:"가마"}]},{id:7872,hanja:"蔥",strokes:"17",def:{en:["scallions","onions","leeks"],kr:["푸를","총"]},hunum:[{kor:"총",def:"파"}]},{id:7873,hanja:"慫",strokes:"15",def:{en:["to alarm","to instigate","arouse","incite"],kr:["권할","종"]},hunum:[{kor:"종",def:"권할"}]},{id:7874,hanja:"圓",strokes:"13",def:{en:["circle","round","circular","complete"],kr:["화폐의","단위","원"]},hunum:[{kor:"원",def:"둥글"}]},{id:7875,hanja:"馹",strokes:"14",def:{en:["post horse","relay horse"],kr:["역말","일"]},hunum:[{kor:"일",def:"역말"}]},{id:7876,hanja:"痿",strokes:"13",def:{en:["paralysis","impotence"],kr:["음위증","위"]},hunum:[{kor:"위",def:"습병"}]},{id:7877,hanja:"炒",strokes:"8",def:{en:["fry","saute","roast","boil","cook"],kr:["볶을","초"]},hunum:[{kor:"초",def:"볶을"}]},{id:7878,hanja:"蔦",strokes:"17",def:{en:["the convovulvus","parasitic plants such as mistletoe","Ribes ambiguum"],kr:["담쟁이","조"]},hunum:[{kor:"조",def:"담쟁이"}]},{id:7879,hanja:"麇",strokes:"16",def:{en:["general name for the hornless deer","to collect to band together"],kr:["노루","균"]},hunum:[{kor:"군",def:"무리"},{kor:"균",def:"노루"}]},{id:7880,hanja:"轡",strokes:"22",def:{en:["bridle of horse","reins"],kr:["고삐","비"]},hunum:[{kor:"비",def:"고삐"}]},{id:7881,hanja:"麈",strokes:"16",def:{en:["species of deer"],kr:["큰사슴","주"]},hunum:[{kor:"주",def:"큰사슴"}]},{id:7882,hanja:"鑌",strokes:"22",def:{en:["high quality iron"],kr:["강철","빈"]},hunum:[{kor:"빈",def:"강철"}]},{id:7883,hanja:"轢",strokes:"22",def:{en:["run over something with vehicle"],kr:["삐걱거릴","력"]},hunum:[{kor:"력",def:"삐걱거릴"}]},{id:7884,hanja:"慮",strokes:"15",def:{en:["be concerned","worry about"],kr:["생각할","려"]},hunum:[{kor:"려",def:"생각할"}]},{id:7885,hanja:"圖",strokes:"14",def:{en:["diagram","chart","map","picture"],kr:["그림","도"]},hunum:[{kor:"도",def:"그림"}]},{id:7886,hanja:"轣",strokes:"23",def:{en:[],kr:["갈","력"]},hunum:[{kor:"력",def:"갈"}]},{id:7887,hanja:"炕",strokes:"8",def:{en:["the brick"],kr:["구들","항"]},hunum:[{kor:"항",def:"마를"}]},{id:7888,hanja:"轤",strokes:"23",def:{en:["pulley","windlass","capstan"],kr:["고패","로"]},hunum:[{kor:"로",def:"고패"}]},{id:7889,hanja:"殫",strokes:"16",def:{en:["utmost","entirely","quite","use up"],kr:["다할","탄"]},hunum:[{kor:"탄",def:"다할"}]},{id:7890,hanja:"蔪",strokes:"17",def:{en:[],kr:["보리","팰","점"]},hunum:[{kor:"점",def:"풀 벨"}]},{id:7891,hanja:"慰",strokes:"15",def:{en:["comfort","console","calm"],kr:["위로할","위"]},hunum:[{kor:"위",def:"위로할"}]},{id:7892,hanja:"圗",strokes:"14",def:{en:["diagram","chart","map","picture"],kr:["그림","도"]},hunum:[{kor:"도",def:"그림"}]},{id:7893,hanja:"麋",strokes:"17",def:{en:["elk","surname"],kr:["부서질","미"]},hunum:[{kor:"미",def:"큰사슴"}]},{id:7894,hanja:"慱",strokes:"14",def:{en:["sad"],kr:["근심할","단"]},hunum:[{kor:"단",def:"근심할"}]},{id:7895,hanja:"團",strokes:"14",def:{en:["sphere","ball","circle","mass","lump"],kr:["둥글","단"]},hunum:[{kor:"단",def:"둥글"}]},{id:7896,hanja:"麌",strokes:"18",def:{en:["stag","herd"],kr:["숫사슴","우"]},hunum:[{kor:"우",def:"숫사슴"}]},{id:7897,hanja:"炘",strokes:"8",def:{en:["brilliant","shining","bright"],kr:["화끈거릴","흔"]},hunum:[{kor:"흔",def:"화끈거릴"}]},{id:7898,hanja:"殭",strokes:"17",def:{en:["a stiff corpse"],kr:["마른","누에","강"]},hunum:[{kor:"강",def:"죽어 썩지 않을"}]},{id:7899,hanja:"鑑",strokes:"22",def:{en:["mirror","looking glass","reflect"],kr:["경계할","감"]},hunum:[{kor:"감",def:"거울"}]},{id:7900,hanja:"炙",strokes:"8",def:{en:["roast","broil","toast","cauterize"],kr:["냄새","퍼질","적"]},hunum:[{kor:"자",def:"고기구을"},{kor:"적",def:"고기구이"}]},{id:7901,hanja:"慳",strokes:"14",def:{en:["miserly","parsimonious","stingy"],kr:["아낄","간"]},hunum:[{kor:"간",def:"아낄"}]},{id:7902,hanja:"殮",strokes:"17",def:{en:["dress corpse for burial"],kr:["염할","렴"]},hunum:[{kor:"렴",def:"염할"}]},{id:7903,hanja:"鑒",strokes:"22",def:{en:["mirror","looking glass","reflect"],kr:["鑑과","同字"]},hunum:[{kor:"감",def:"거울"}]},{id:7904,hanja:"蔬",strokes:"17",def:{en:["vegetables","greens"],kr:["나물","소"]},hunum:[{kor:"소",def:"나물"}]},{id:7905,hanja:"晁",strokes:"10",def:{en:["morning","dawn","surname"],kr:["朝의","古字"]},hunum:[{kor:"조",def:"아침"}]},{id:7906,hanja:"炚",strokes:"8",def:{en:[],kr:["햇빚","뜨거울","광"]},hunum:[{kor:"광",def:"햇빚 뜨거울"}]},{id:7907,hanja:"慴",strokes:"14",def:{en:["fear","terrified","fearful","fear"],kr:["겁낼","접"]},hunum:[{kor:"습",def:"두려워할"},{kor:"접",def:"두려울"}]},{id:7908,hanja:"殯",strokes:"18",def:{en:["encoffin","embalm","funeral"],kr:["염할","빈"]},hunum:[{kor:"빈",def:"염할"}]},{id:7909,hanja:"圛",strokes:"16",def:{en:["used in place names","stratus"],kr:["맴돌","역"]},hunum:[{kor:"역",def:"맴돌"}]},{id:7910,hanja:"麏",strokes:"18",def:{en:[],kr:["고라니","균"]},hunum:[{kor:"균",def:"고라니"}]},{id:7911,hanja:"蔭",strokes:"17",def:{en:["shade","shelter","protect"],kr:["그늘","음"]},hunum:[{kor:"음",def:"덮을"}]},{id:7912,hanja:"慵",strokes:"14",def:{en:["indolent","easy","lazy"],kr:["게으를","용"]},hunum:[{kor:"용",def:"게으를"}]},{id:7913,hanja:"時",strokes:"10",def:{en:["time","season","era","age","period"],kr:["가끔","시"]},hunum:[{kor:"시",def:"때"}]},{id:7914,hanja:"圜",strokes:"16",def:{en:["circle","surround","encircle"],kr:["두를","환"]},hunum:[{kor:"원",def:"옥담"},{kor:"환",def:"두를"}]},{id:7915,hanja:"晃",strokes:"10",def:{en:["bright","dazzling","to sway","shake"],kr:["밝을","황"]},hunum:[{kor:"황",def:"밝을"}]},{id:7916,hanja:"鑕",strokes:"23",def:{en:["tungsten","wolfram"],kr:["모루","질"]},hunum:[{kor:"질",def:"모루"}]},{id:7917,hanja:"蔯",strokes:"17",def:{en:["a variety of artemisia"],kr:["더워지기","진"]},hunum:[{kor:"진",def:"더워지기"}]},{id:7918,hanja:"竗",strokes:"9",def:{en:[],kr:["땅","이름","묘"]},hunum:[{kor:"묘",def:"땅 이름"}]},{id:7919,hanja:"慶",strokes:"14",def:{en:["congratulate","celebrate"],kr:["경사","경"]},hunum:[{kor:"강",def:"복"},{kor:"경",def:"경사"}]},{id:7920,hanja:"圝",strokes:"22",def:{en:["entire"],kr:["둥글","란"]},hunum:[{kor:"란",def:"둥글"}]},{id:7921,hanja:"晄",strokes:"10",def:{en:["bright","dazzling","to sway","shake"],kr:["晃과","同字"]},hunum:[{kor:"황",def:"밝을"}]},{id:7922,hanja:"慷",strokes:"14",def:{en:["ardent","generous","magnanimous"],kr:["강개할","강"]},hunum:[{kor:"강",def:"강개할"}]},{id:7923,hanja:"殲",strokes:"21",def:{en:["annihilate","wipe out","kill off"],kr:["다죽일","섬"]},hunum:[{kor:"섬",def:"다죽일"}]},{id:7924,hanja:"麑",strokes:"19",def:{en:["fawn","young deer"],kr:["사자","예"]},hunum:[{kor:"예",def:"아기사슴"}]},{id:7925,hanja:"站",strokes:"10",def:{en:["stand up","a stand","station"],kr:["우두커니","설","참"]},hunum:[{kor:"참",def:"우두커니 설"}]},{id:7926,hanja:"殳",strokes:"4",def:{en:["name of old weapon","kill","rad"]},hunum:[{kor:"수",def:"몽둥이"}]},{id:7927,hanja:"土",strokes:"3",def:{en:["soil","earth","items made of earth"],kr:["뭍","토"]},hunum:[{kor:"두",def:"뿌리"},{kor:"토",def:"흙"}]},{id:7928,hanja:"麒",strokes:"19",def:{en:["legendary auspicious animal"],kr:["기린","기"]},hunum:[{kor:"기",def:"기린"}]},{id:7929,hanja:"麓",strokes:"19",def:{en:["foot of hill","foothill"],kr:["신기슭","록"]},hunum:[{kor:"록",def:"신기슭"}]},{id:7930,hanja:"言",strokes:"7",def:{en:["words","speech","speak","say"],kr:["심사","화평할","은"]},hunum:[{kor:"언",def:"말씀"},{kor:"은",def:"심사 화평할"}]},{id:7931,hanja:"慺",strokes:"14",def:{en:[],kr:["정성스러울","루"]},hunum:[{kor:"루",def:"정성스러울"}]},{id:7932,hanja:"段",strokes:"9",def:{en:["section","piece","division"],kr:["층계","단"]},hunum:[{kor:"단",def:"층계"}]},{id:7933,hanja:"竜",strokes:"10",def:{en:["dragon","symbolic of emperor"],kr:["龍의","古字"]},hunum:[{kor:"농",def:"두덕"},{kor:"룡",def:"용"}]},{id:7934,hanja:"晈",strokes:"10",def:{en:[],kr:["달","밝을","교"]},hunum:[{kor:"교",def:"달 밝을"}]},{id:7935,hanja:"慼",strokes:"15",def:{en:["sorrowful","mournful","sorrow"],kr:["근심할","척"]},hunum:[{kor:"척",def:"근심할"}]},{id:7936,hanja:"晉",strokes:"10",def:{en:["advance","increase","promote"],kr:["進과","同字"]},hunum:[{kor:"진",def:"나아갈"}]},{id:7937,hanja:"訂",strokes:"9",def:{en:["draw up agreement","arrange"],kr:["의논할","정"]},hunum:[{kor:"정",def:"바로잡을"}]},{id:7938,hanja:"炡",strokes:"9",def:{en:[],kr:["불","번쩍거릴","정"]},hunum:[{kor:"정",def:"데칠"}]},{id:7939,hanja:"蔵",strokes:"17",def:{en:["hide","conceal","hoard","store up"]},hunum:[{kor:"장",def:"감출"}]},{id:7940,hanja:"竝",strokes:"10",def:{en:["to combine","annex","also","what"],kr:["아우를","병"]},hunum:[{kor:"반",def:"짝지을"},{kor:"병",def:"아우를"}]},{id:7941,hanja:"殷",strokes:"10",def:{en:["many","great","abundant","flourishing"],kr:["천둥소리","은"]},hunum:[{kor:"안",def:"검붉을"},{kor:"은",def:"많을"}]},{id:7942,hanja:"鑛",strokes:"23",def:{en:["mine","mineral","ore"],kr:["쇳돌","광"]},hunum:[{kor:"광",def:"쇳돌"}]},{id:7943,hanja:"慽",strokes:"14",def:{en:["sorrowful","mournful","sorrow"],kr:["근심할","척"]},hunum:[{kor:"척",def:"근심할"}]},{id:7944,hanja:"訃",strokes:"9",def:{en:["obituary","give notice of death"],kr:["부고","부"]},hunum:[{kor:"부",def:"부고"}]},{id:7945,hanja:"麗",strokes:"19",def:{en:["beautiful","magnificent","elegant"],kr:["고울","리"]},hunum:[{kor:"려",def:"고울"},{kor:"리",def:"고울"}]},{id:7946,hanja:"晋",strokes:"10",def:{en:["advance","increase","promote"],kr:["晉의","俗字"]},hunum:[{kor:"진",def:"晉의 俗"}]},{id:7947,hanja:"竟",strokes:"11",def:{en:["finally","after all","at last"],kr:["다할","경"]},hunum:[{kor:"경",def:"다할"}]},{id:7948,hanja:"慾",strokes:"15",def:{en:["lust","desire","passion","appetite"],kr:["하고자할","욕"]},hunum:[{kor:"욕",def:"욕심낼"}]},{id:7949,hanja:"圥",strokes:"5",def:{en:["mushroom"],kr:["버섯","록"]},hunum:[{kor:"록",def:"버섯"}]},{id:7950,hanja:"章",strokes:"11",def:{en:["composition","chapter","section"],kr:["문채","장"]},hunum:[{kor:"장",def:"문채"}]},{id:7951,hanja:"炤",strokes:"9",def:{en:["illumine","light up","reflect"],kr:["照와","同字"]},hunum:[{kor:"소",def:"밝을"},{kor:"조",def:"비출"}]},{id:7952,hanja:"殺",strokes:"11",def:{en:["kill","slaughter","murder","hurt","to pare off","reduce","clip"]},hunum:[{kor:"살",def:"죽일"},{kor:"쇄",def:"빠를"}]},{id:7953,hanja:"晌",strokes:"10",def:{en:["noon","midday","moment","unit land measurement equal to seven mou","or the area that can be sown in one day"],kr:["畝"]},hunum:[{kor:"상",def:"정오"}]},{id:7954,hanja:"鑞",strokes:"23",def:{en:["solder","tin"],kr:["땜납","랍"]},hunum:[{kor:"랍",def:"땜납"}]},{id:7955,hanja:"殻",strokes:"11",def:{en:["casing","shell","husk","hull","skin"]},hunum:[{kor:"각",def:"껍질"}]},{id:7956,hanja:"圧",strokes:"5",def:{en:["same as","to press","to oppress","to crush","pressure"],kr:["壓"]},hunum:[{kor:"압",def:"누를"}]},{id:7957,hanja:"晎",strokes:"10",def:{en:[],kr:["날","밝으려","할","홍"]},hunum:[{kor:"홍",def:"날 밝으려 할"}]},{id:7958,hanja:"在",strokes:"6",def:{en:["be at","in","on","consist in","rest"],kr:["곳","재"]},hunum:[{kor:"재",def:"있을"}]},{id:7959,hanja:"訇",strokes:"9",def:{en:["the sound of a crash"],kr:["큰","소리","굉"]},hunum:[{kor:"굉",def:"큰 소리"}]},{id:7960,hanja:"竢",strokes:"12",def:{en:["wait for","wait until","as soon as"],kr:["기다릴","사"]},hunum:[{kor:"사",def:"기다릴"}]},{id:7961,hanja:"殼",strokes:"12",def:{en:["casing","shell","husk","hull","skin"],kr:["껍질","각"]},hunum:[{kor:"각",def:"껍질"}]},{id:7962,hanja:"鑠",strokes:"23",def:{en:["melt","smelt","shine"],kr:["녹일","삭"]},hunum:[{kor:"삭",def:"녹일"}]},{id:7963,hanja:"殽",strokes:"12",def:{en:["mixed up","confused","cooked"],kr:["섞일","효"]},hunum:[{kor:"효",def:"섞일"}]},{id:7964,hanja:"竣",strokes:"12",def:{en:["terminate","end","finish","quit"],kr:["마칠","준"]},hunum:[{kor:"전",def:"일 마칠"},{kor:"준",def:"마칠"}]},{id:7965,hanja:"計",strokes:"9",def:{en:["plan","plot","strategem","scheme"],kr:["꾀","계"]},hunum:[{kor:"계",def:"꾀"}]},{id:7966,hanja:"晏",strokes:"10",def:{en:["peaceful","quiet","clear","late in the day"],kr:["편안할","안"]},hunum:[{kor:"안",def:"늦을"}]},{id:7967,hanja:"訉",strokes:"10",def:{en:[],kr:["말","많을","범"]},hunum:[{kor:"범",def:"말 많을"}]},{id:7968,hanja:"鑢",strokes:"23",def:{en:["file","rasp","file","polish"],kr:["줄","려"]},hunum:[{kor:"려",def:"줄"}]},{id:7969,hanja:"麝",strokes:"21",def:{en:["musk deer"],kr:["사향노루","사"]},hunum:[{kor:"사",def:"사향노루"}]},{id:7970,hanja:"鑣",strokes:"23",def:{en:["bit","bridle","ride"],kr:["성할","표"]},hunum:[{kor:"표",def:"말 재갈"}]},{id:7971,hanja:"蔽",strokes:"18",def:{en:["cover","hide","conceal","shelter"],kr:["정할","폐"]},hunum:[{kor:"폐",def:"가리울"}]},{id:7972,hanja:"殿",strokes:"13",def:{en:["hall","palace","temple"],kr:["대궐","전"]},hunum:[{kor:"전",def:"대궐"}]},{id:7973,hanja:"麞",strokes:"22",def:{en:["roebuck","Moschus chinloo"],kr:["노루","장"]},hunum:[{kor:"장",def:"노루"}]},{id:7974,hanja:"訊",strokes:"10",def:{en:["inquire","ask","examine","reproach"],kr:["꾸짖을","신"]},hunum:[{kor:"신",def:"물을"}]},{id:7975,hanja:"童",strokes:"12",def:{en:["child","boy","servant boy","virgin"],kr:["아이","동"]},hunum:[{kor:"동",def:"아이"}]},{id:7976,hanja:"圬",strokes:"6",def:{en:["plaster over with layer of mud"],kr:["흙손","오"]},hunum:[{kor:"오",def:"흙손"}]},{id:7977,hanja:"麟",strokes:"23",def:{en:["female of Chinese unicorn"],kr:["기린","린"]},hunum:[{kor:"린",def:"기린"}]},{id:7978,hanja:"訌",strokes:"10",def:{en:["confusion","internal strife"],kr:["무너질","홍"]},hunum:[{kor:"홍",def:"무너질"}]},{id:7979,hanja:"炫",strokes:"9",def:{en:["shine","glitter","show off","flaunt"],kr:["불빛","현"]},hunum:[{kor:"현",def:"밝을"}]},{id:7980,hanja:"竦",strokes:"12",def:{en:["revere","respect","be in awe of"],kr:["솟을","송"]},hunum:[{kor:"송",def:"공경할"}]},{id:7981,hanja:"圭",strokes:"6",def:{en:["jade pointed at top"],kr:["서옥","규"]},hunum:[{kor:"규",def:"서옥"}]},{id:7982,hanja:"蔿",strokes:"18",def:{en:["surname","place name"],kr:["고을이름","위"]},hunum:[{kor:"위",def:"풀"}]},{id:7983,hanja:"炬",strokes:"9",def:{en:["torch"],kr:["불","땔","거"]},hunum:[{kor:"거",def:"횃불"}]},{id:7984,hanja:"圮",strokes:"6",def:{en:["destroyed","ruined","to subvert to injure"],kr:["무너질","비"]},hunum:[{kor:"비",def:"무너질"}]},{id:7985,hanja:"討",strokes:"10",def:{en:["to discuss","ask for","beg","demand","dun","marry"],kr:["꾸짖을","토"]},hunum:[{kor:"토",def:"다스릴"}]},{id:7986,hanja:"炭",strokes:"9",def:{en:["charcoal","coal","carbon"],kr:["볶일","탄"]},hunum:[{kor:"탄",def:"숯"}]},{id:7987,hanja:"凁",strokes:"9",def:{en:[],kr:["얻을","수"]},hunum:[{kor:"수",def:"싸늘할"}]},{id:7988,hanja:"炮",strokes:"9",def:{en:["large gun","cannon","artillery"],kr:["형벌","포"]},hunum:[{kor:"포",def:"그슬릴"}]},{id:7989,hanja:"地",strokes:"6",def:{en:["earth","soil","ground","region"],kr:["땅","지"]},hunum:[{kor:"지",def:"땅"}]},{id:7990,hanja:"炯",strokes:"9",def:{en:["bright","brilliant","clear","hot"],kr:["밝을","형"]},hunum:[{kor:"형",def:"빛날"}]},{id:7991,hanja:"麤",strokes:"33",def:{en:["rough","coarse","big","rough"],kr:["거칠","추"]},hunum:[{kor:"추",def:"성길"}]},{id:7992,hanja:"訐",strokes:"10",def:{en:["expose other","pry"],kr:["들추어","낼","알"]},hunum:[{kor:"알",def:"들추어 낼"}]},{id:7993,hanja:"竪",strokes:"13",def:{en:["perpendicular","vertical","erect"],kr:["더벅머리","수"]},hunum:[{kor:"수",def:"세울"}]},{id:7994,hanja:"炰",strokes:"9",def:{en:["roast","broil","bake"],kr:["까불거릴","포"]},hunum:[{kor:"포",def:"그슬"}]},{id:7995,hanja:"訑",strokes:"10",def:{en:["deceive","cheat","arrogant"],kr:["자랑할","이"]},hunum:[{kor:"이",def:"자랑할"}]},{id:7996,hanja:"麥",strokes:"11",def:{en:["wheat","barley","oats","KangXi radical number"],kr:["보리","맥"]},hunum:[{kor:"맥",def:"보리"}]},{id:7997,hanja:"凄",strokes:"10",def:{en:["bitter cold","miserable","dreary"],kr:["쓸쓸할","처"]},hunum:[{kor:"처",def:"쓸쓸할"}]},{id:7998,hanja:"鑪",strokes:"24",def:{en:["fireplace","stove","oven","furnace"],kr:["화로","로"]},hunum:[{kor:"로",def:"화로"}]},{id:7999,hanja:"麦",strokes:"11",def:{en:["wheat","barley","oats","simplified form of KangXi radical number"],kr:["麥의","俗字"]},hunum:[{kor:"맥",def:"보리"}]},{id:8000,hanja:"訓",strokes:"10",def:{en:["teach","instruct","exegesis"],kr:["가르칠","훈"]},hunum:[{kor:"훈",def:"가르칠"}]},{id:8001,hanja:"晙",strokes:"11",def:{en:[],kr:["밝을","준"]},hunum:[{kor:"준",def:"밝을"}]},{id:8002,hanja:"竭",strokes:"14",def:{en:["put forth great effort","exhaust"],kr:["마를","걸"]},hunum:[{kor:"갈",def:"다할"},{kor:"걸",def:"다할"}]},{id:8003,hanja:"凅",strokes:"10",def:{en:["dried up","exhausted","tired","dry"],kr:["얼어붙을","고"]},hunum:[{kor:"고",def:"얼어붙을"}]},{id:8004,hanja:"封",strokes:"9",def:{en:["letter","envelope","feudal"],kr:["봉할","봉"]},hunum:[{kor:"봉",def:"봉할"}]},{id:8005,hanja:"准",strokes:"10",def:{en:["approve","allow","permit","in accord"],kr:["승인할","준"]},hunum:[{kor:"준",def:"승인할"}]},{id:8006,hanja:"専",strokes:"9",def:{en:["monopolize","take sole possession"],kr:["專과","同字"]},hunum:[{kor:"전",def:"펼"}]},{id:8007,hanja:"訔",strokes:"10",def:{en:[],kr:["시비할","은"]},hunum:[{kor:"은",def:"시비할"}]},{id:8008,hanja:"炳",strokes:"9",def:{en:["bright","luminous","glorious"],kr:["밝을","병"]},hunum:[{kor:"병",def:"밝을"}]},{id:8009,hanja:"晚",strokes:"11",def:{en:["night","evening","late"]},hunum:[{kor:"만",def:"늦을"}]},{id:8010,hanja:"晛",strokes:"11",def:{en:["sunlight"],kr:["햇발","현"]},hunum:[{kor:"현",def:"햇발"}]},{id:8011,hanja:"訕",strokes:"10",def:{en:["abuse","slander","vilify","ridicule"],kr:["헐뜯을","산"]},hunum:[{kor:"산",def:"헐뜯을"}]},{id:8012,hanja:"端",strokes:"14",def:{en:["end","extreme","head","beginning"],kr:["끝","단"]},hunum:[{kor:"단",def:"끝"}]},{id:8013,hanja:"凇",strokes:"10",def:{en:["dewdrop","icicle"],kr:["산유화","송"]},hunum:[{kor:"송",def:"산유화"}]},{id:8014,hanja:"麩",strokes:"15",def:{en:["bran"],kr:["밀기울","부"]},hunum:[{kor:"부",def:"밀기울"}]},{id:8015,hanja:"訖",strokes:"10",def:{en:["finish","conclude","stop","exhaust"],kr:["이를","흘"]},hunum:[{kor:"흘",def:"이를"}]},{id:8016,hanja:"凈",strokes:"10",def:{en:["clean","pure","cleanse"],kr:["찰","정"]},hunum:[{kor:"정",def:"찰"}]},{id:8017,hanja:"炵",strokes:"9",def:{en:[],kr:["불꽃","동"]},hunum:[{kor:"동",def:"불꽃"}]},{id:8018,hanja:"射",strokes:"10",def:{en:["shoot","eject","issue forth","emit"],kr:["맞힐","석"]},hunum:[{kor:"사",def:"궁술"},{kor:"석",def:"맞힐"}]},{id:8019,hanja:"麪",strokes:"15",def:{en:["flour","noodles","dough"],kr:["밀가루","면"]},hunum:[{kor:"면",def:"밀가루"}]},{id:8020,hanja:"託",strokes:"10",def:{en:["entrust","rely on","commission"],kr:["핑계할","탁"]},hunum:[{kor:"탁",def:"맡길"}]},{id:8021,hanja:"晝",strokes:"11",def:{en:["daytime","daylight"],kr:["낮","주"]},hunum:[{kor:"주",def:"낮"}]},{id:8022,hanja:"凉",strokes:"10",def:{en:["cool","cold","disheartened"],kr:["涼의","俗字"]},hunum:[{kor:"량",def:"서늘할"}]},{id:8023,hanja:"尅",strokes:"10",def:{en:["subdue","destroy","overcome"],kr:["剋과","同字"]},hunum:[{kor:"극",def:"이길"}]},{id:8024,hanja:"晞",strokes:"11",def:{en:["dry","expose sun","dawn"],kr:["마를","희"]},hunum:[{kor:"희",def:"마를"}]},{id:8025,hanja:"凊",strokes:"10",def:{en:["surname"],kr:["서늘할","청"]},hunum:[{kor:"청",def:"서늘할"}]},{id:8026,hanja:"炷",strokes:"9",def:{en:["candle wick","lamp wick","stick of incense"],kr:["심지","주"]},hunum:[{kor:"주",def:"심지"}]},{id:8027,hanja:"将",strokes:"9",def:{en:["will","going to","future","general"],kr:["將의","略字"]},hunum:[{kor:"장",def:"장수"}]},{id:8028,hanja:"記",strokes:"10",def:{en:["record","keep in mind","remember"],kr:["기록할","기"]},hunum:[{kor:"기",def:"기록할"}]},{id:8029,hanja:"鑰",strokes:"25",def:{en:["key","lock"],kr:["자물쇠","약"]},hunum:[{kor:"약",def:"자물쇠"}]},{id:8030,hanja:"鑱",strokes:"25",def:{en:["spade","trowel"],kr:["보습","참"]},hunum:[{kor:"참",def:"보습"}]},{id:8031,hanja:"凋",strokes:"10",def:{en:["be withered","fallen","exhausted"],kr:["시들","조"]},hunum:[{kor:"조",def:"시들"}]},{id:8032,hanja:"將",strokes:"11",def:{en:["will","going to","future","general"],kr:["장차","장"]},hunum:[{kor:"장",def:"장차"}]},{id:8033,hanja:"炸",strokes:"9",def:{en:["to fry in oil","to scald","to explode"],kr:["터질","작"]},hunum:[{kor:"작",def:"터질"}]},{id:8034,hanja:"晟",strokes:"11",def:{en:["clear","bright","splendor","brightness"],kr:["햇살","퍼질","성"]},hunum:[{kor:"성",def:"밝을"}]},{id:8035,hanja:"点",strokes:"9",def:{en:["dot","speck","spot","point","degree"],kr:["點의","略字"]},hunum:[{kor:"점",def:"점"}]},{id:8036,hanja:"專",strokes:"11",def:{en:["monopolize","take sole possession"],kr:["오로지","전"]},hunum:[{kor:"전",def:"오로지"}]},{id:8037,hanja:"訚",strokes:"10",def:{en:[],kr:["誾과","同字"]},hunum:[{kor:"은",def:"온화할"}]},{id:8038,hanja:"疆",strokes:"19",def:{en:["boundary","border","frontier"],kr:["변방","강"]},hunum:[{kor:"강",def:"땅 경계"}]},{id:8039,hanja:"翁",strokes:"10",def:{en:["old man","father","father"],kr:["새","목털","아래","옹"]},hunum:[{kor:"옹",def:"늙은이"}]},{id:8040,hanja:"凌",strokes:"10",def:{en:["pure","virtuous","insult","maltreat"],kr:["능가할","릉"]},hunum:[{kor:"릉",def:"능가할"}]},{id:8041,hanja:"鑲",strokes:"25",def:{en:["insert","inlay","set","mount","fill"],kr:["거푸집","속","양"]},hunum:[{kor:"양",def:"거푸집 속"}]},{id:8042,hanja:"晡",strokes:"11",def:{en:["late afternoon"],kr:["해질","포"]},hunum:[{kor:"포",def:"신시"}]},{id:8043,hanja:"疇",strokes:"19",def:{en:["farmland","arable land","category"],kr:["밭두둑","주"]},hunum:[{kor:"주",def:"밭두둑"}]},{id:8044,hanja:"訛",strokes:"11",def:{en:["swindle","cheat","erroneous","wrong"],kr:["어긋날","와"]},hunum:[{kor:"와",def:"거짓말"}]},{id:8045,hanja:"為",strokes:"9",def:{en:["do","handle","govern","act","be"],kr:["爲와","同字"]},hunum:[{kor:"위",def:"하"}]},{id:8046,hanja:"圻",strokes:"7",def:{en:["border","boundary"],kr:["언덕","은"]},hunum:[{kor:"기",def:"경기"},{kor:"은",def:"언덕"}]},{id:8047,hanja:"凍",strokes:"10",def:{en:["freeze","cold","congeal","jelly"],kr:["얼","동"]},hunum:[{kor:"동",def:"얼"}]},{id:8048,hanja:"尉",strokes:"11",def:{en:["officer","military rank"],kr:["눌릴","위"]},hunum:[{kor:"울",def:"성씨"},{kor:"위",def:"벼슬이름"}]},{id:8049,hanja:"麯",strokes:"17",def:{en:["yeast","leaven"],kr:["麴과","同字"]},hunum:[{kor:"국",def:"누룩"}]},{id:8050,hanja:"尊",strokes:"12",def:{en:["respect","revere","venerate","honor"],kr:["樽·罇과","同字"]},hunum:[{kor:"존",def:"존귀할"},{kor:"준",def:"술그릇"}]},{id:8051,hanja:"晢",strokes:"11",def:{en:["light of stars","shine"],kr:["별이","반짝반짝","할","제"]},hunum:[{kor:"절",def:"밝을"},{kor:"제",def:"별이 반짝반짝 할"}]},{id:8052,hanja:"競",strokes:"20",def:{en:["contend","vie","compete"],kr:["겨룰","경"]},hunum:[{kor:"경",def:"겨룰"}]},{id:8053,hanja:"疈",strokes:"20",def:{en:[],kr:["가를","벽"]},hunum:[{kor:"벽",def:"가를"}]},{id:8054,hanja:"麰",strokes:"17",def:{en:["barley"],kr:["보리","모"]},hunum:[{kor:"모",def:"보리"}]},{id:8055,hanja:"饂",strokes:"19",def:{en:["Japanese noodles"],kr:["밀","국수","온"]},hunum:[{kor:"온",def:"밀 국수"}]},{id:8056,hanja:"訝",strokes:"11",def:{en:["express surprise","be surprised"],kr:["의심할","아"]},hunum:[{kor:"아",def:"맞아들일"}]},{id:8057,hanja:"减",strokes:"11",def:{en:["decrease","subtract","diminish"],kr:["減의","俗字"]},hunum:[{kor:"감",def:"덜"}]},{id:8058,hanja:"鑵",strokes:"26",def:{en:["jar","can"],kr:["두레박","관"]},hunum:[{kor:"관",def:"두레박"}]},{id:8059,hanja:"疊",strokes:"22",def:{en:["repeat","duplicate","repetitious"],kr:["포갤","첩"]},hunum:[{kor:"첩",def:"거듭"}]},{id:8060,hanja:"竸",strokes:"22",def:{en:["contend","vie","compete"],kr:["競과","同字"]},hunum:[{kor:"경",def:"다툴"}]},{id:8061,hanja:"翅",strokes:"10",def:{en:["wings","fin"],kr:["뿐","시"]},hunum:[{kor:"시",def:"날개"}]},{id:8062,hanja:"晤",strokes:"11",def:{en:["have interview with","meet"],kr:["만날","오"]},hunum:[{kor:"오",def:"밝을"}]},{id:8063,hanja:"圾",strokes:"7",def:{en:["garbage","rubbish","shaking","danger"],kr:["위태할","급"]},hunum:[{kor:"급",def:"위태할"}]},{id:8064,hanja:"尋",strokes:"12",def:{en:["seek","search","look for","ancient"],kr:["찾을","심"]},hunum:[{kor:"심",def:"찾을"}]},{id:8065,hanja:"晥",strokes:"11",def:{en:["Anhui province"],kr:["환할","환"]},hunum:[{kor:"환",def:"환할"}]},{id:8066,hanja:"竹",strokes:"6",def:{en:["bamboo","flute","KangXi radical"],kr:["대","죽"]},hunum:[{kor:"죽",def:"대"}]},{id:8067,hanja:"尌",strokes:"12",def:{en:["standing"],kr:["세울","주"]},hunum:[{kor:"주",def:"세울"}]},{id:8068,hanja:"凑",strokes:"11",def:{en:["piece together","assemble"],kr:["모일","주"]},hunum:[{kor:"주",def:"모일"}]},{id:8069,hanja:"訟",strokes:"11",def:{en:["accuse","argue","dispute","litigate"],kr:["괘","이름","송"]},hunum:[{kor:"송",def:"송사할"}]},{id:8070,hanja:"疋",strokes:"5",def:{en:["roll","bolt of cloth","foot"],kr:["끝","필"]},hunum:[{kor:"소",def:"밭"},{kor:"필",def:"짝"}]},{id:8071,hanja:"鑷",strokes:"26",def:{en:["tweezers","forceps","pincers"],kr:["쪽집게","섭"]},hunum:[{kor:"섭",def:"쪽집게"}]},{id:8072,hanja:"晦",strokes:"11",def:{en:["dark","unclear","obscure","night"],kr:["그믐","회"]},hunum:[{kor:"회",def:"그믐"}]},{id:8073,hanja:"饅",strokes:"20",def:{en:["steamed bread","steamed dumplings"],kr:["만두","만"]},hunum:[{kor:"만",def:"만두"}]},{id:8074,hanja:"竺",strokes:"8",def:{en:["India","bamboo","surname"],kr:["나라이름","축"]},hunum:[{kor:"독",def:"두터울"},{kor:"축",def:"나라이름"}]},{id:8075,hanja:"凒",strokes:"12",def:{en:[],kr:["눈서리","쌓일","의"]},hunum:[{kor:"의",def:"눈서리 쌓일"}]},{id:8076,hanja:"對",strokes:"14",def:{en:["correct","right","facing","opposed"],kr:["마주볼","대"]},hunum:[{kor:"대",def:"마주볼"}]},{id:8077,hanja:"晧",strokes:"11",def:{en:["daybreak","bright and brilliant"],kr:["빛날","호"]},hunum:[{kor:"호",def:"밝을"}]},{id:8078,hanja:"凓",strokes:"12",def:{en:["shiver","severe cold"],kr:["찬","기운","률"]},hunum:[{kor:"율",def:"찬 기운"}]},{id:8079,hanja:"導",strokes:"15",def:{en:["direct","guide","lead","conduct"],kr:["이끌","도"]},hunum:[{kor:"도",def:"이끌"}]},{id:8080,hanja:"麴",strokes:"19",def:{en:["yeast","leaven","surname"],kr:["누룩","국"]},hunum:[{kor:"국",def:"누룩"}]},{id:8081,hanja:"凔",strokes:"12",def:{en:["cold"],kr:["찰","창"]},hunum:[{kor:"창",def:"찰"}]},{id:8082,hanja:"疎",strokes:"12",def:{en:["neglect","careless","lax"],kr:["드물","소"]},hunum:[{kor:"소",def:"성길"}]},{id:8083,hanja:"晨",strokes:"11",def:{en:["early morning","daybreak"],kr:["아침을","아뢸","신"]},hunum:[{kor:"신",def:"샛별"}]},{id:8084,hanja:"小",strokes:"3",def:{en:["small","tiny","insignificant"],kr:["적게","여길","소"]},hunum:[{kor:"소",def:"작을"}]},{id:8085,hanja:"麵",strokes:"20",def:{en:["flour","dough","noodles"],kr:["麪과","同字"]},hunum:[{kor:"면",def:"밀가루"}]},{id:8086,hanja:"訢",strokes:"11",def:{en:["pleased","delighted","happy"],kr:["기뻐할","흔"]},hunum:[{kor:"흔",def:"기뻐할"}]},{id:8087,hanja:"饈",strokes:"20",def:{en:["food","meal","eat","offer"],kr:["반찬","수"]},hunum:[{kor:"수",def:"드릴"}]},{id:8088,hanja:"竽",strokes:"9",def:{en:["ancient woodwind instrument"],kr:["큰","생황","우"]},hunum:[{kor:"우",def:"큰 생황"}]},{id:8089,hanja:"翊",strokes:"11",def:{en:["flying","assist","help","respect"],kr:["도울","익"]},hunum:[{kor:"익",def:"도울"}]},{id:8090,hanja:"晩",strokes:"11",def:{en:["night"],kr:["저물","만"]},hunum:[{kor:"만",def:"저물"}]},{id:8091,hanja:"凖",strokes:"12",def:{en:["rule","guideline","standard"],kr:["準의","俗字"]},hunum:[{kor:"준",def:"準의 俗"}]},{id:8092,hanja:"饉",strokes:"20",def:{en:["time of famine or crop failure"],kr:["주릴","근"]},hunum:[{kor:"근",def:"주릴"}]},{id:8093,hanja:"訣",strokes:"11",def:{en:["take leave of","bid farewell"],kr:["비결","결"]},hunum:[{kor:"결",def:"이별할"}]},{id:8094,hanja:"疏",strokes:"12",def:{en:["neglect","careless","lax"],kr:["드물","소"]},hunum:[{kor:"소",def:"뚫릴"}]},{id:8095,hanja:"少",strokes:"4",def:{en:["few","less","inadequate"],kr:["젊을","소"]},hunum:[{kor:"소",def:"적을"}]},{id:8096,hanja:"鑼",strokes:"27",def:{en:["gong"],kr:["징","라"]},hunum:[{kor:"라",def:"징"}]},{id:8097,hanja:"晫",strokes:"12",def:{en:[],kr:["밝을","탁"]},hunum:[{kor:"탁",def:"환할"}]},{id:8098,hanja:"凗",strokes:"13",def:{en:[],kr:["눈서리","쌓일","최"]},hunum:[{kor:"최",def:"눈서리 쌓일"}]},{id:8099,hanja:"鑽",strokes:"27",def:{en:["drill","bore","pierce","diamond"],kr:["끌","찬"]},hunum:[{kor:"찬",def:"끌"}]},{id:8100,hanja:"饊",strokes:"21",def:{en:["fried round cakes of wheat flour"]},hunum:[{kor:"산",def:"산자"}]},{id:8101,hanja:"竿",strokes:"9",def:{en:["bamboo pole","penis"],kr:["횃대","간"]},hunum:[{kor:"간",def:"장대"}]},{id:8102,hanja:"翌",strokes:"11",def:{en:["bright","daybreak","dawn","the next day"],kr:["다음날","익"]},hunum:[{kor:"익",def:"다음날"}]},{id:8103,hanja:"饋",strokes:"21",def:{en:["offer food superior","send gift"],kr:["먹일","궤"]},hunum:[{kor:"궤",def:"먹일"}]},{id:8104,hanja:"訥",strokes:"11",def:{en:["slow of speech","mumble","stammer"],kr:["말","더듬거릴","눌"]},hunum:[{kor:"눌",def:"말 더듬거릴"}]},{id:8105,hanja:"疑",strokes:"14",def:{en:["doubt","question","suspect"],kr:["그럴듯할","의"]},hunum:[{kor:"응",def:"정할"},{kor:"의",def:"의심할"}]},{id:8106,hanja:"晬",strokes:"12",def:{en:["first birthday of a child"],kr:["첫","생일","쉬"]},hunum:[{kor:"수",def:"돌"},{kor:"쉬",def:"돐"}]},{id:8107,hanja:"凘",strokes:"14",def:{en:[],kr:["성에","시"]},hunum:[{kor:"시",def:"성에"}]},{id:8108,hanja:"尓",strokes:"5",def:{en:["you","that"],kr:["爾와","同字"]},hunum:[{kor:"이",def:"너"}]},{id:8109,hanja:"鑾",strokes:"27",def:{en:["bells hung on horse","bells hung"],kr:["방울","란"]},hunum:[{kor:"란",def:"방울"}]},{id:8110,hanja:"麹",strokes:"15",def:{en:["yeast","leaven","surname"],kr:["누룩","국"]},hunum:[{kor:"국",def:"누룩"}]},{id:8111,hanja:"饌",strokes:"21",def:{en:["feed","support","provide for","food","fine meats","delicacies"],kr:["반찬","찬"]},hunum:[{kor:"찬",def:"반찬"}]},{id:8112,hanja:"鑿",strokes:"27",def:{en:["chisel","bore","pierce"],kr:["뚫을","착"]},hunum:[{kor:"조",def:"뚫을"},{kor:"착",def:"뚫을"}]},{id:8113,hanja:"翎",strokes:"11",def:{en:["feather","plume","wing"],kr:["깃","령"]},hunum:[{kor:"령",def:"깃"}]},{id:8114,hanja:"尔",strokes:"5",def:{en:["you","that","those","final particle"],kr:["爾와","同字"]},hunum:[{kor:"이",def:"너"}]},{id:8115,hanja:"麺",strokes:"16",def:{en:["flour","dough","noodles"]},hunum:[{kor:"면",def:"밀가루"}]},{id:8116,hanja:"饍",strokes:"21",def:{en:["meals","provisions","board"],kr:["膳과","同字"]},hunum:[{kor:"선",def:"반찬"}]},{id:8117,hanja:"普",strokes:"12",def:{en:["universal","general","widespread"],kr:["널리","보"]},hunum:[{kor:"보",def:"널리"}]},{id:8118,hanja:"凚",strokes:"15",def:{en:["cold","chilly"],kr:["쌀쌀하게","추울","금"]},hunum:[{kor:"금",def:"쌀쌀하게 추울"}]},{id:8119,hanja:"麻",strokes:"11",def:{en:["hemp","jute","flax","sesame"],kr:["삼","마"]},hunum:[{kor:"마",def:"삼"}]},{id:8120,hanja:"愀",strokes:"12",def:{en:["to change one","be anxious","to blush"],kr:["정색할","초"]},hunum:[{kor:"초",def:"정색할"}]},{id:8121,hanja:"尖",strokes:"6",def:{en:["sharp","pointed","acute","keen"],kr:["뾰족할","첨"]},hunum:[{kor:"첨",def:"뾰족할"}]},{id:8122,hanja:"疔",strokes:"7",def:{en:["carbuncle","boil","ulcer"],kr:["헌데","정"]},hunum:[{kor:"정",def:"헌데"}]},{id:8123,hanja:"景",strokes:"12",def:{en:["scenery","view","conditions"],kr:["옷","영"]},hunum:[{kor:"경",def:"별"},{kor:"영",def:"그림자"}]},{id:8124,hanja:"凛",strokes:"15",def:{en:["to shiver with cold or fear"],kr:["찰","름"]},hunum:[{kor:"름",def:"찰"}]},{id:8125,hanja:"麼",strokes:"14",def:{en:["interrogative final particle","insignificant","small","tiny"],kr:["작을","마"]},hunum:[{kor:"마",def:"작을"}]},{id:8126,hanja:"晰",strokes:"12",def:{en:["clear","evident","clearly"],kr:["밝을","석"]},hunum:[{kor:"석",def:"밝을"}]},{id:8127,hanja:"愁",strokes:"13",def:{en:["anxiety","to worry about","be anxious"],kr:["탄식할","수"]},hunum:[{kor:"수",def:"근심"}]},{id:8128,hanja:"凜",strokes:"15",def:{en:["shiver with cold or fear","fearful"],kr:["찰","름"]},hunum:[{kor:"름",def:"찰"}]},{id:8129,hanja:"麽",strokes:"14",def:{en:["interrogative final particle","insignificant","small","tiny"],kr:["잘","마"]},hunum:[{kor:"마",def:"잘"}]},{id:8130,hanja:"麾",strokes:"15",def:{en:["a pennant","flag","banner","to signal to"],kr:["대장기","휘"]},hunum:[{kor:"휘",def:"대장기"}]},{id:8131,hanja:"饐",strokes:"21",def:{en:["spoiled","rotten","sour"],kr:["밥","쉴","의"]},hunum:[{kor:"의",def:"밥 쉴"}]},{id:8132,hanja:"訪",strokes:"11",def:{en:["visit","ask","inquire"],kr:["찾을","방"]},hunum:[{kor:"방",def:"찾을"}]},{id:8133,hanja:"習",strokes:"11",def:{en:["practice","flapping wings"],kr:["거듭","습"]},hunum:[{kor:"습",def:"익힐"}]},{id:8134,hanja:"凝",strokes:"16",def:{en:["coagulate","congeal","freeze"],kr:["열중할","응"]},hunum:[{kor:"응",def:"엉길"}]},{id:8135,hanja:"凞",strokes:"16",def:{en:["bright","splendid","glorious"],kr:["빛날","희"]},hunum:[{kor:"희",def:"빛날"}]},{id:8136,hanja:"饑",strokes:"21",def:{en:["starve","be hungry","famine"],kr:["주릴","기"]},hunum:[{kor:"기",def:"주릴"}]},{id:8137,hanja:"愃",strokes:"12",def:{en:["relax"],kr:["쾌할","선"]},hunum:[{kor:"선",def:"쾌할"}]},{id:8138,hanja:"尙",strokes:"8",def:{en:["still","yet","even","fairly","rather"],kr:["오히려","상"]},hunum:[{kor:"상",def:"오히려"}]},{id:8139,hanja:"麿",strokes:"18",def:{en:["I","personal name marker"],kr:["갈","마"]},hunum:[{kor:"마",def:"갈"}]},{id:8140,hanja:"饒",strokes:"21",def:{en:["bountiful","abundant","plentiful"],kr:["배부를","요"]},hunum:[{kor:"요",def:"용서할"}]},{id:8141,hanja:"翔",strokes:"12",def:{en:["soar","glide","hover","detailed"],kr:["빙빙돌아날","상"]},hunum:[{kor:"상",def:"빙빙돌아날"}]},{id:8142,hanja:"尚",strokes:"8",def:{en:["still","yet","even","fairly","rather"],kr:["尙의","略字"]},hunum:[{kor:"상",def:"오히려"}]},{id:8143,hanja:"翕",strokes:"12",def:{en:["agree"],kr:["합할","흡"]},hunum:[{kor:"흡",def:"합할"}]},{id:8144,hanja:"疙",strokes:"8",def:{en:["pimple","sore","boil","wart","pustule"],kr:["쥐부스럼","흘"]},hunum:[{kor:"흘",def:"쥐부스럼"}]},{id:8145,hanja:"設",strokes:"11",def:{en:["build","establish","display","particle of hypothesis","supposing"],kr:["베풀","설"]},hunum:[{kor:"설",def:"베풀"}]},{id:8146,hanja:"晳",strokes:"12",def:{en:["fair","white","clear","discriminate"],kr:["밝을","석"]},hunum:[{kor:"석",def:"밝을"}]},{id:8147,hanja:"几",strokes:"2",def:{en:["small table"],kr:["안석","궤"]},hunum:[{kor:"궤",def:"안석"}]},{id:8148,hanja:"翖",strokes:"12",def:{en:["ksc extension"],kr:["翕과","同字"]},hunum:[{kor:"흡",def:"합할"}]},{id:8149,hanja:"晴",strokes:"12",def:{en:["clear weather","fine weather"],kr:["갤","청"]},hunum:[{kor:"청",def:"갤"}]},{id:8150,hanja:"饔",strokes:"22",def:{en:["breakfast","eat prepared food"],kr:["아침밥","옹"]},hunum:[{kor:"옹",def:"아침밥"}]},{id:8151,hanja:"蓀",strokes:"16",def:{en:["aromatic grass","iris","flower"]},hunum:[{kor:"손",def:"향풀 이름"}]},{id:8152,hanja:"疚",strokes:"8",def:{en:["chronic disease","chronic illness","sorrow"],kr:["오랜","병","구"]},hunum:[{kor:"구",def:"오랜 병"}]},{id:8153,hanja:"愆",strokes:"13",def:{en:["a fault","mistake","error","transgression"],kr:["어기어질","건"]},hunum:[{kor:"건",def:"죄"}]},{id:8154,hanja:"凡",strokes:"3",def:{en:["all","any","every","ordinary","common"],kr:["무릇","범"]},hunum:[{kor:"범",def:"무릇"}]},{id:8155,hanja:"蓁",strokes:"16",def:{en:["abundant","luxuriant vegetation"],kr:["우거질","진"]},hunum:[{kor:"진",def:"우거질"}]},{id:8156,hanja:"饕",strokes:"22",def:{en:["gluttonous","greedy","covetous"],kr:["탐할","도"]},hunum:[{kor:"도",def:"탐할"}]},{id:8157,hanja:"歃",strokes:"13",def:{en:["smear one"],kr:["마실","삽"]},hunum:[{kor:"삽",def:"마실"}]},{id:8158,hanja:"晶",strokes:"12",def:{en:["crystal","clear","bright","radiant"],kr:["빛날","정"]},hunum:[{kor:"정",def:"수정"}]},{id:8159,hanja:"蓂",strokes:"16",def:{en:["lucky place"],kr:["명협","명"]},hunum:[{kor:"명",def:"명협"}]},{id:8160,hanja:"愈",strokes:"13",def:{en:["more and more","even more"],kr:["병","나을","유"]},hunum:[{kor:"유",def:"나을"}]},{id:8161,hanja:"凢",strokes:"3",def:{en:["all","any","every","ordinary","common"],kr:["凡의","俗字"]},hunum:[{kor:"범",def:"무릇"}]},{id:8162,hanja:"許",strokes:"11",def:{en:["allow","permit","promise","betroth"],kr:["이영차","호"]},hunum:[{kor:"허",def:"허락할"},{kor:"호",def:"이영차"}]},{id:8163,hanja:"饗",strokes:"22",def:{en:["host banquet","banquet"],kr:["흠향할","향"]},hunum:[{kor:"향",def:"잔치할"}]},{id:8164,hanja:"疝",strokes:"8",def:{en:["hernia","rupture"],kr:["산증","산"]},hunum:[{kor:"산",def:"산증"}]},{id:8165,hanja:"晷",strokes:"12",def:{en:["shadows of sun","time","sundial"],kr:["시각","귀"]},hunum:[{kor:"귀",def:"시각"}]},{id:8166,hanja:"愉",strokes:"12",def:{en:["pleasant","delightful","please"],kr:["즐거울","유"]},hunum:[{kor:"유",def:"기뻐할"}]},{id:8167,hanja:"凣",strokes:"3",def:{en:["all","common","general","every","whenever","generally"],kr:["凡의","俗字"]},hunum:[{kor:"범",def:"무릇"}]},{id:8168,hanja:"尟",strokes:"13",def:{en:["surname","fresh"],kr:["尠과","同字"]},hunum:[{kor:"선",def:"적을"}]},{id:8169,hanja:"歆",strokes:"13",def:{en:["like","admire","willingly","gladly","to quicken"],kr:["받을","흠"]},hunum:[{kor:"흠",def:"받을"}]},{id:8170,hanja:"蓄",strokes:"16",def:{en:["store","save","hoard","gather"],kr:["감출","축"]},hunum:[{kor:"축",def:"쌓을"}]},{id:8171,hanja:"晸",strokes:"12",def:{en:[]},hunum:[{kor:"정",def:"해뜨는 모양"}]},{id:8172,hanja:"尠",strokes:"13",def:{en:["very few","seldom","rarely"],kr:["적을","선"]},hunum:[{kor:"선",def:"적을"}]},{id:8173,hanja:"翚",strokes:"12",def:{en:[]},hunum:[{kor:"휘",def:"훨훨 날"}]},{id:8174,hanja:"訳",strokes:"11",def:{en:["translate","decode","encode"],kr:["譯의","略字"]},hunum:[{kor:"역",def:"번역할"}]},{id:8175,hanja:"凥",strokes:"5",def:{en:["to dwell"],kr:["居와","同字"]},hunum:[{kor:"거",def:"살"}]},{id:8176,hanja:"歇",strokes:"13",def:{en:["rest","stop","lodge"],kr:["흩어질","헐"]},hunum:[{kor:"헐",def:"쉴"}]},{id:8177,hanja:"処",strokes:"5",def:{en:["place","locale","department"],kr:["위치할","처"]},hunum:[{kor:"처",def:"위치할"}]},{id:8178,hanja:"智",strokes:"12",def:{en:["wisdom","knowledge","intelligence"],kr:["슬기","지"]},hunum:[{kor:"지",def:"슬기"}]},{id:8179,hanja:"訴",strokes:"12",def:{en:["accuse","sue","inform","narrate"],kr:["송사할","소"]},hunum:[{kor:"소",def:"하소연할"}]},{id:8180,hanja:"蓆",strokes:"16",def:{en:["straw mat","mat"],kr:["자리","석"]},hunum:[{kor:"석",def:"자리"}]},{id:8181,hanja:"翛",strokes:"13",def:{en:["look of rumpled feathers","bedraggled","hasty","rapid flight"],kr:["모지라질","소"]},hunum:[{kor:"소",def:"날개치는 소리"}]},{id:8182,hanja:"晻",strokes:"12",def:{en:[],kr:["어두울","암"]},hunum:[{kor:"암",def:"어두울"}]},{id:8183,hanja:"愍",strokes:"13",def:{en:["pity","sympathize with"],kr:["근심할","민"]},hunum:[{kor:"민",def:"근심할"}]},{id:8184,hanja:"凨",strokes:"6",def:{en:["wind","air","manners","atmosphere"],kr:["風과","同字"]},hunum:[{kor:"풍",def:"바람"}]},{id:8185,hanja:"愎",strokes:"12",def:{en:["obstinate","stubborn","headstrong"],kr:["고집할","퍅"]},hunum:[{kor:"퍅",def:"사나울"}]},{id:8186,hanja:"訶",strokes:"12",def:{en:["scold loudly","curse","abuse"],kr:["꾸짖을","가"]},hunum:[{kor:"가",def:"꾸짖을"}]},{id:8187,hanja:"較",strokes:"13",def:{en:["compare","comparatively","more"],kr:["견줄","교"]},hunum:[{kor:"각",def:"수레 귀"},{kor:"교",def:"견줄"}]},{id:8188,hanja:"歉",strokes:"14",def:{en:["deficient","lacking","insufficient"],kr:["나쁠","겸"]},hunum:[{kor:"겸",def:"흉년들"}]},{id:8189,hanja:"尤",strokes:"4",def:{en:["especially","particularly"],kr:["탓할","우"]},hunum:[{kor:"우",def:"가장"}]},{id:8190,hanja:"饜",strokes:"23",def:{en:["be satiated","eat one"],kr:["물릴","염"]},hunum:[{kor:"염",def:"싫을"}]},{id:8191,hanja:"蓉",strokes:"16",def:{en:["hibiscus","Chengdu","Sichuan"],kr:["약","이름","용"]},hunum:[{kor:"용",def:"연꽃"}]},{id:8192,hanja:"疣",strokes:"9",def:{en:["wart","tumor","goiter","papule"]},hunum:[{kor:"우",def:"흑"}]},{id:8193,hanja:"意",strokes:"13",def:{en:["thought","idea","opinion","think"],kr:["형세","의"]},hunum:[{kor:"의",def:"뜻"}]},{id:8194,hanja:"凩",strokes:"6",def:{en:["wintry wind"],kr:["찬바람","목"]},hunum:[{kor:"목",def:"찬바람"}]},{id:8195,hanja:"疤",strokes:"9",def:{en:["scar","cicatrix","birthmark"],kr:["흉터","파"]},hunum:[{kor:"파",def:"흉터"}]},{id:8196,hanja:"凪",strokes:"6",def:{en:["calm","lull"],kr:["바람이","자고","파도","그칠","지"]},hunum:[{kor:"지",def:"바람이 자고 파도 그칠"}]},{id:8197,hanja:"翟",strokes:"14",def:{en:["surname","a kind of pheasant","plumes"],kr:["꿩","책"]},hunum:[{kor:"적",def:"꿩의 깃"},{kor:"책",def:"꿩"}]},{id:8198,hanja:"蓊",strokes:"16",def:{en:["luxuriant vegetation","lush"],kr:["우거질","옹"]},hunum:[{kor:"옹",def:"옹풀"}]},{id:8199,hanja:"輅",strokes:"13",def:{en:["a chariot","carriage","a carriage pull"],kr:["맞을","핵"]},hunum:[{kor:"로",def:"수레"},{kor:"핵",def:"수레앞 가로막이 나무"}]},{id:8200,hanja:"翠",strokes:"14",def:{en:["color green","kingfisher"],kr:["푸를","취"]},hunum:[{kor:"취",def:"비취"}]},{id:8201,hanja:"饞",strokes:"26",def:{en:["gluttonous","greedy","lewd","lecherous"],kr:["탐할","참"]},hunum:[{kor:"참",def:"탐할"}]},{id:8202,hanja:"疥",strokes:"9",def:{en:["scabies","itch"],kr:["옴","개"]},hunum:[{kor:"개",def:"옴"}]},{id:8203,hanja:"歌",strokes:"14",def:{en:["song","lyrics","sing","chant","praise"],kr:["노래","가"]},hunum:[{kor:"가",def:"노래"}]},{id:8204,hanja:"診",strokes:"12",def:{en:["examine patient","diagnose"],kr:["볼","진"]},hunum:[{kor:"진",def:"볼"}]},{id:8205,hanja:"輇",strokes:"13",def:{en:["cart wheel with no spokes"],kr:["잴","전"]},hunum:[{kor:"전",def:"달"}]},{id:8206,hanja:"蓋",strokes:"16",def:{en:["cover","hide","protect"],kr:["이엉","덮을","합"]},hunum:[{kor:"개",def:"뚜껑"},{kor:"합",def:"이엉 덮을"}]},{id:8207,hanja:"翡",strokes:"14",def:{en:["kingfisher","emerald","jade"],kr:["물총새","비"]},hunum:[{kor:"비",def:"물총새"}]},{id:8208,hanja:"尨",strokes:"7",def:{en:["shaggy haired dog","variegated"],kr:["헝클어진","모양","봉"]},hunum:[{kor:"방",def:"삽살개"},{kor:"봉",def:"헝클어진 모양"}]},{id:8209,hanja:"歎",strokes:"15",def:{en:["sigh","admire"],kr:["화답할","탄"]},hunum:[{kor:"탄",def:"탄식할"}]},{id:8210,hanja:"輈",strokes:"13",def:{en:["shaft"],kr:["끌채","주"]},hunum:[{kor:"주",def:"끌채"}]},{id:8211,hanja:"註",strokes:"12",def:{en:["explain","annotate","make entry"],kr:["주낼","주"]},hunum:[{kor:"주",def:"주낼"}]},{id:8212,hanja:"凭",strokes:"8",def:{en:["lean on","depend on","rely on"],kr:["기대다","빙"]},hunum:[{kor:"빙",def:"기대다"}]},{id:8213,hanja:"凮",strokes:"8",def:{en:["wind"],kr:["風의","譌字"]},hunum:[{kor:"풍",def:"바람"}]},{id:8214,hanja:"証",strokes:"12",def:{en:["prove","confirm","verify","proof"],kr:["간할","정"]},hunum:[{kor:"정",def:"간할"}]},{id:8215,hanja:"載",strokes:"13",def:{en:["load","carry","transport","convey"],kr:["가득할","재"]},hunum:[{kor:"재",def:"실을"}]},{id:8216,hanja:"蓍",strokes:"16",def:{en:["milfoil","plant used in divination"],kr:["시초","시"]},hunum:[{kor:"시",def:"뺑대쑥"}]},{id:8217,hanja:"翣",strokes:"14",def:{en:["feathers used decorate coffin","large wooden fan"],kr:["운삽","삽"]},hunum:[{kor:"삽",def:"운삽"}]},{id:8218,hanja:"愔",strokes:"12",def:{en:["comfortable","contented","peaceful"],kr:["화평할","음"]},hunum:[{kor:"음",def:"조용할"}]},{id:8219,hanja:"疩",strokes:"9",def:{en:[]},hunum:[{kor:"췌",def:"병들"}]},{id:8220,hanja:"翤",strokes:"14",def:{en:[]},hunum:[{kor:"시",def:"날개"}]},{id:8221,hanja:"愕",strokes:"12",def:{en:["startled","alarmed","astonished"],kr:["놀랄","악"]},hunum:[{kor:"악",def:"놀랄"}]},{id:8222,hanja:"歐",strokes:"15",def:{en:["used in transliterating non","ohm","surname"],kr:["토할","구"]},hunum:[{kor:"구",def:"토할"}]},{id:8223,hanja:"凰",strokes:"11",def:{en:["female phoenix"],kr:["봉황새","황"]},hunum:[{kor:"황",def:"봉황새"}]},{id:8224,hanja:"訾",strokes:"12",def:{en:["bad","criticize","defects"],kr:["헐뜯을","자"]},hunum:[{kor:"자",def:"헐뜯을"}]},{id:8225,hanja:"尫",strokes:"7",def:{en:["lame"],kr:["천상바라기","왕"]},hunum:[{kor:"왕",def:"절름발이"}]},{id:8226,hanja:"饤",strokes:"5",def:{en:["display food for show only","sacrifice"],kr:["飣과","同字"]},hunum:[{kor:"정",def:"음식 괼"}]},{id:8227,hanja:"翦",strokes:"15",def:{en:["scissors","cut","clip","annhilate"],kr:["멸할","전"]},hunum:[{kor:"전",def:"베어 없앨"}]},{id:8228,hanja:"蓐",strokes:"16",def:{en:["straw bed mat","rushes"],kr:["가을","맡은","귀신","욕"]},hunum:[{kor:"욕",def:"새싹"}]},{id:8229,hanja:"疫",strokes:"9",def:{en:["epidemic","plague","pestilence"],kr:["염병","역"]},hunum:[{kor:"역",def:"염병"}]},{id:8230,hanja:"凱",strokes:"12",def:{en:["triumphant","triumph","victory"],kr:["좋은","사람","개"]},hunum:[{kor:"개",def:"싸움 이긴 풍류"}]},{id:8231,hanja:"歓",strokes:"15",def:{en:["happy","pleased","glad","joy","enjoy"],kr:["歡과","同字"]},hunum:[{kor:"환",def:"기뻐할"}]},{id:8232,hanja:"蓑",strokes:"16",def:{en:["rain coat made of straw","coir","etc"],kr:["도롱이","사"]},hunum:[{kor:"사",def:"도롱이"}]},{id:8233,hanja:"尭",strokes:"8",def:{en:["a legendary ancient emperor"],kr:["堯와","同字"]},hunum:[{kor:"요",def:"요임금"}]},{id:8234,hanja:"歔",strokes:"16",def:{en:["blow through nose","snort"],kr:["코로","숨","내쉴","허"]},hunum:[{kor:"허",def:"한숨 쉴"}]},{id:8235,hanja:"囀",strokes:"21",def:{en:["sing","chirp","warble","twitter"],kr:["후렴","전"]},hunum:[{kor:"전",def:"새 지저귈"}]},{id:8236,hanja:"凳",strokes:"14",def:{en:["bench","stool"],kr:["걸상","등"]},hunum:[{kor:"등",def:"걸상"}]},{id:8237,hanja:"翩",strokes:"15",def:{en:["fly","flutter"],kr:["오락가락할","편"]},hunum:[{kor:"편",def:"훌쩍 날"}]},{id:8238,hanja:"蓓",strokes:"16",def:{en:["bud"],kr:["꽃봉오리","배"]},hunum:[{kor:"배",def:"꽃봉오리"}]},{id:8239,hanja:"愚",strokes:"13",def:{en:["stupid","doltish","foolish"],kr:["업신여길","우"]},hunum:[{kor:"우",def:"어리석을"}]},{id:8240,hanja:"凴",strokes:"14",def:{en:["to rely on","depend on","evidence","proof"],kr:["凭과","同字"]},hunum:[{kor:"빙",def:"기대다"}]},{id:8241,hanja:"囁",strokes:"21",def:{en:["move lips as when speaking","hesitation"],kr:["소곤거릴","엽"]},hunum:[{kor:"섭",def:"말하려다 멈출"},{kor:"엽",def:"소곤거릴"}]},{id:8242,hanja:"囂",strokes:"21",def:{en:["be noisy","treat with contempt"],kr:["시끄럽다","효"]},hunum:[{kor:"효",def:"시끄럽다"}]},{id:8243,hanja:"愛",strokes:"13",def:{en:["love","be fond of","like"],kr:["사랑","애"]},hunum:[{kor:"애",def:"사랑"}]},{id:8244,hanja:"凵",strokes:"2",def:{en:["receptacle","KangXi radical"],kr:["위가","벌어진","그릇","감"]},hunum:[{kor:"감",def:"입 벌릴"}]},{id:8245,hanja:"凶",strokes:"4",def:{en:["culprit","murder","bad","sad"],kr:["흉할","흉"]},hunum:[{kor:"흉",def:"흉할"}]},{id:8246,hanja:"愜",strokes:"12",def:{en:["be satisfied","be comfortable"],kr:["뜻에","맞을","협"]},hunum:[{kor:"협",def:"쾌할"}]},{id:8247,hanja:"就",strokes:"12",def:{en:["just","simply","to come","go to","to approach","near"],kr:["저자","취"]},hunum:[{kor:"취",def:"좇을"}]},{id:8248,hanja:"囃",strokes:"21",def:{en:["to play","to accompany","to banter","jeer"],kr:["장단","잡을","잡"]},hunum:[{kor:"잡",def:"장단 잡을"}]},{id:8249,hanja:"翫",strokes:"15",def:{en:["careless","play","a legendary archer"],kr:["구경할","완"]},hunum:[{kor:"완",def:"익숙할"}]},{id:8250,hanja:"翬",strokes:"15",def:{en:["pheasant","variegated","to fly"],kr:["훨훨날","휘"]},hunum:[{kor:"휘",def:"훨훨 날"}]},{id:8251,hanja:"輒",strokes:"14",def:{en:["sides of chariot where weapons"],kr:["문득","첩"]},hunum:[{kor:"첩",def:"문득"}]},{id:8252,hanja:"蓖",strokes:"16",def:{en:["castor","Ricinus commumis"],kr:["아주까리","비"]},hunum:[{kor:"비",def:"아주까리"}]},{id:8253,hanja:"凷",strokes:"5",def:{en:["dirt clod","piece"],kr:["흙덩이","괴"]},hunum:[{kor:"괴",def:"흙덩이"}]},{id:8254,hanja:"歙",strokes:"16",def:{en:["to suck","a county"],kr:["줄일","흡"]},hunum:[{kor:"흡",def:"줄일"}]},{id:8255,hanja:"疱",strokes:"10",def:{en:["acne"],kr:["부르틀","포"]},hunum:[{kor:"포",def:"부풀"}]},{id:8256,hanja:"囅",strokes:"22",def:{en:["smile"],kr:["껄껄","웃을","철"]},hunum:[{kor:"천",def:"웃는 모양"},{kor:"철",def:"껄껄 웃을"}]},{id:8257,hanja:"輓",strokes:"14",def:{en:["mourn","pull","draw"],kr:["끌","만"]},hunum:[{kor:"만",def:"끌"}]},{id:8258,hanja:"凸",strokes:"5",def:{en:["protrude","bulge out","convex"],kr:["볼록할","철"]},hunum:[{kor:"돌",def:"뾰족할"},{kor:"철",def:"볼록할"}]},{id:8259,hanja:"翮",strokes:"16",def:{en:["stem of feather","quill"],kr:["칼","갓","핵"]},hunum:[{kor:"핵",def:"깃촉"}]},{id:8260,hanja:"疲",strokes:"10",def:{en:["feel tired","be exhausted","weak"],kr:["나른할","피"]},hunum:[{kor:"피",def:"피곤할"}]},{id:8261,hanja:"囆",strokes:"22",def:{en:[],kr:["사람","이름","채"]},hunum:[{kor:"채",def:"사람 이름"}]},{id:8262,hanja:"灄",strokes:"21",def:{en:["river in Hubei province"],kr:["떼","섭"]},hunum:[{kor:"섭",def:"흠치르르할"}]},{id:8263,hanja:"窀",strokes:"9",def:{en:["to bury"],kr:["광중","둔"]},hunum:[{kor:"둔",def:"광중"}]},{id:8264,hanja:"歚",strokes:"16",def:{en:["used in name of famous Korean painter Ceng Sen"],kr:["고을","선"]},hunum:[{kor:"선",def:"고을"}]},{id:8265,hanja:"凹",strokes:"5",def:{en:["concave","hollow","depressed","a pass","valley"],kr:["오목할","요"]},hunum:[{kor:"요",def:"오목할"}]},{id:8266,hanja:"出",strokes:"5",def:{en:["go out","send out","stand","produce"],kr:["생질","출"]},hunum:[{kor:"출",def:"날"}]},{id:8267,hanja:"輔",strokes:"14",def:{en:["cheek bone","protective","assist"],kr:["덧방나무","보"]},hunum:[{kor:"보",def:"덧방나무"}]},{id:8268,hanja:"疳",strokes:"10",def:{en:["childhood diseases"],kr:["종기","아플","감"]},hunum:[{kor:"감",def:"감질병"}]},{id:8269,hanja:"突",strokes:"9",def:{en:["suddenly","abruptly","unexpectedly"],kr:["부딪칠","돌"]},hunum:[{kor:"돌",def:"부딪칠"}]},{id:8270,hanja:"感",strokes:"13",def:{en:["feel","perceive","emotion"],kr:["느낄","감"]},hunum:[{kor:"감",def:"감동할"}]},{id:8271,hanja:"歛",strokes:"17",def:{en:["draw back","fold back","collect"],kr:["구걸할","검"]},hunum:[{kor:"검",def:"탐할"}]},{id:8272,hanja:"翰",strokes:"16",def:{en:["writing brush","pen","pencil"],kr:["날개","한"]},hunum:[{kor:"한",def:"날개"}]},{id:8273,hanja:"蓚",strokes:"16",def:{en:["oxalic"],kr:["기쁠","조"]},hunum:[{kor:"수",def:"수산"},{kor:"조",def:"기쁠"}]},{id:8274,hanja:"輕",strokes:"14",def:{en:["light","easy","simple","gentle"],kr:["가벼울","경"]},hunum:[{kor:"경",def:"가벼울"}]},{id:8275,hanja:"疴",strokes:"10",def:{en:["illness","sickness","disease","pain"],kr:["앓을","아"]},hunum:[{kor:"아",def:"앓을"}]},{id:8276,hanja:"窂",strokes:"9",def:{en:[],kr:["우리","로"]},hunum:[{kor:"로",def:"우리"}]},{id:8277,hanja:"愠",strokes:"12",def:{en:["angry"],kr:["慍의","俗字"]},hunum:[{kor:"온",def:"성낼"}]},{id:8278,hanja:"囈",strokes:"22",def:{en:["talk in one","somniloquy"],kr:["헛소리할","예"]},hunum:[{kor:"예",def:"잠꼬대할"}]},{id:8279,hanja:"疵",strokes:"10",def:{en:["flaw","fault","defect","disease"],kr:["흠","자"]},hunum:[{kor:"자",def:"흠"}]},{id:8280,hanja:"翱",strokes:"16",def:{en:["soar","roam"]},hunum:[{kor:"고",def:"날"}]},{id:8281,hanja:"囉",strokes:"22",def:{en:["exclamatory final particle","nag"],kr:["소리","읽힐","라"]},hunum:[{kor:"라",def:"소리 읽힐"}]},{id:8282,hanja:"函",strokes:"8",def:{en:["correspondence","a case","a box"],kr:["상자","함"]},hunum:[{kor:"함",def:"상자"}]},{id:8283,hanja:"窃",strokes:"9",def:{en:["secretly","stealthily","steal","thief"],kr:["竊의","俗字"]},hunum:[{kor:"절",def:"훔칠"}]},{id:8284,hanja:"尸",strokes:"3",def:{en:["corpse","to impersonate the dead","to preside","rad"],kr:["주검","시"]},hunum:[{kor:"시",def:"시동"}]},{id:8285,hanja:"囊",strokes:"22",def:{en:["bag","purse","sack","put in bag"],kr:["주머니","낭"]},hunum:[{kor:"낭",def:"주머니"}]},{id:8286,hanja:"凾",strokes:"9",def:{en:["correspondence","a case","a box"],kr:["상자","함"]},hunum:[{kor:"함",def:"상자"}]},{id:8287,hanja:"囋",strokes:"22",def:{en:[],kr:["기릴","찰"]},hunum:[{kor:"찬",def:"기릴"},{kor:"찰",def:"기릴"}]},{id:8288,hanja:"窄",strokes:"10",def:{en:["narrow","tight","narrow"],kr:["좁을","착"]},hunum:[{kor:"착",def:"좁을"}]},{id:8289,hanja:"鐃",strokes:"20",def:{en:["cymbals","hand bell","disturb"],kr:["작은","징","뇨"]},hunum:[{kor:"뇨",def:"작은 징"}]},{id:8290,hanja:"翳",strokes:"17",def:{en:["shade","screen","to hide","screen"],kr:["새이름","예"]},hunum:[{kor:"예",def:"어조사"}]},{id:8291,hanja:"歟",strokes:"18",def:{en:["a final particle used to express admiration","doubt","surprise","or to mark a question"],kr:["그런가할","어조사","여"]},hunum:[{kor:"여",def:"그런가할 어조사"}]},{id:8292,hanja:"尹",strokes:"4",def:{en:["govern","oversee","director"],kr:["믿을","윤"]},hunum:[{kor:"윤",def:"다스릴"}]},{id:8293,hanja:"鐄",strokes:"20",def:{en:["bell"],kr:["종","횡"]},hunum:[{kor:"횡",def:"종"}]},{id:8294,hanja:"歠",strokes:"19",def:{en:["sip","drink","suck"],kr:["마실","철"]},hunum:[{kor:"철",def:"마실"}]},{id:8295,hanja:"尺",strokes:"4",def:{en:["Chinese measure approx"],kr:["자","척"]},hunum:[{kor:"척",def:"자"}]},{id:8296,hanja:"疸",strokes:"10",def:{en:["jaundice","disorders of stomach"],kr:["황달","달"]},hunum:[{kor:"달",def:"황달"}]},{id:8297,hanja:"窅",strokes:"10",def:{en:["far","deep","sunken eyes","sad"],kr:["까마득할","요"]},hunum:[{kor:"요",def:"움펑눈"}]},{id:8298,hanja:"囍",strokes:"21",def:{en:["double happiness"],kr:["쌍희","희"]},hunum:[{kor:"희",def:"쌍희"}]},{id:8299,hanja:"歡",strokes:"22",def:{en:["happy","pleased","glad","joy","to enjoy"],kr:["기뻐할","환"]},hunum:[{kor:"환",def:"기뻐할"}]},{id:8300,hanja:"窆",strokes:"10",def:{en:["to put a coffin in a grave"],kr:["광중","폄"]},hunum:[{kor:"폄",def:"하관할"}]},{id:8301,hanja:"疹",strokes:"10",def:{en:["measles","rash","fever"],kr:["홍역","진"]},hunum:[{kor:"진",def:"홍역"}]},{id:8302,hanja:"尻",strokes:"5",def:{en:["end of spine","buttocks","sacrum"],kr:["꽁무니","고"]},hunum:[{kor:"고",def:"꽁무니"}]},{id:8303,hanja:"止",strokes:"4",def:{en:["stop","halt","desist","detain"],kr:["발","지"]},hunum:[{kor:"지",def:"발"}]},{id:8304,hanja:"輛",strokes:"15",def:{en:["numerary adjunct for vehicles"],kr:["수레","량"]},hunum:[{kor:"량",def:"수레"}]},{id:8305,hanja:"灌",strokes:"21",def:{en:["pour","water","irrigate","flood"],kr:["물","댈","관"]},hunum:[{kor:"관",def:"물 댈"}]},{id:8306,hanja:"尼",strokes:"5",def:{en:["Buddhist nun","transliteration"],kr:["그칠","닐"]},hunum:[{kor:"니",def:"여승"},{kor:"일",def:"가까울"}]},{id:8307,hanja:"輜",strokes:"15",def:{en:["a supply cart","covered wagon","dray"],kr:["휘장","친","수레","치"]},hunum:[{kor:"치",def:"짐수레"}]},{id:8308,hanja:"尽",strokes:"6",def:{en:["exhaust","use up","deplete"],kr:["盡의","俗字"]},hunum:[{kor:"진",def:"다할"}]},{id:8309,hanja:"正",strokes:"5",def:{en:["right","proper","correct"],kr:["분별할","정"]},hunum:[{kor:"정",def:"바를"}]},{id:8310,hanja:"窈",strokes:"10",def:{en:["obscure","secluded","refined"],kr:["깊을","요"]},hunum:[{kor:"요",def:"고요할"}]},{id:8311,hanja:"愧",strokes:"13",def:{en:["ashamed","conscience"],kr:["부끄러워할","괴"]},hunum:[{kor:"괴",def:"부끄러워할"}]},{id:8312,hanja:"囏",strokes:"23",def:{en:[],kr:["艱의","古字"]},hunum:[{kor:"간",def:"어려울"}]},{id:8313,hanja:"輝",strokes:"15",def:{en:["brightness","luster","brilliance"],kr:["빛날","휘"]},hunum:[{kor:"휘",def:"빛날"}]},{id:8314,hanja:"此",strokes:"6",def:{en:["this","these","in this case","then"],kr:["이","차"]},hunum:[{kor:"차",def:"이"}]},{id:8315,hanja:"囐",strokes:"23",def:{en:[],kr:["나라이름","잘"]},hunum:[{kor:"잘",def:"북소리"}]},{id:8316,hanja:"疼",strokes:"10",def:{en:["aches","pains","be fond of","love"],kr:["아플","동"]},hunum:[{kor:"동",def:"아플"}]},{id:8317,hanja:"灎",strokes:"26",def:{en:["movement of water","overflowing","billowing","wavy"],kr:["灩의","俗字"]},hunum:[{kor:"염",def:"출렁거릴"}]},{id:8318,hanja:"尾",strokes:"7",def:{en:["tail","extremity","end","stern"],kr:["등","미"]},hunum:[{kor:"미",def:"꼬리"}]},{id:8319,hanja:"囑",strokes:"24",def:{en:["order","tell","instruct","leave word"],kr:["부탁할","촉"]},hunum:[{kor:"촉",def:"부탁할"}]},{id:8320,hanja:"疽",strokes:"10",def:{en:["ulcer","carbuncle","abscess"],kr:["등창","저"]},hunum:[{kor:"저",def:"등창"}]},{id:8321,hanja:"輞",strokes:"15",def:{en:["exterior rim of wheel","felly"],kr:["바퀴테","망"]},hunum:[{kor:"망",def:"바퀴테"}]},{id:8322,hanja:"窊",strokes:"10",def:{en:["pit","vault","store in pit","the arm"],kr:["手窊"]},hunum:[{kor:"와",def:"웅덩이"}]},{id:8323,hanja:"步",strokes:"7",def:{en:["step","pace","walk","stroll"],kr:["걸을","보"]},hunum:[{kor:"보",def:"걸을"}]},{id:8324,hanja:"尿",strokes:"7",def:{en:["urine","urinate"],kr:["오줌","뇨"]},hunum:[{kor:"뇨",def:"오줌"}]},{id:8325,hanja:"灐",strokes:"21",def:{en:[],kr:["물","이름","형"]},hunum:[{kor:"형",def:"물 이름"}]},{id:8326,hanja:"輟",strokes:"15",def:{en:["stop","suspend","halt"],kr:["그칠","철"]},hunum:[{kor:"철",def:"그칠"}]},{id:8327,hanja:"疾",strokes:"10",def:{en:["illness","disease","sickness","to hate"],kr:["병","질"]},hunum:[{kor:"질",def:"병"}]},{id:8328,hanja:"翹",strokes:"18",def:{en:["turn up","lift","elevate","raise"],kr:["꼬리","긴","깃털","교"]},hunum:[{kor:"교",def:"꼬리 긴 깃털"}]},{id:8329,hanja:"武",strokes:"8",def:{en:["military","martial","warlike"],kr:["군인","무"]},hunum:[{kor:"무",def:"굳셀"}]},{id:8330,hanja:"囒",strokes:"24",def:{en:["confused talk"],kr:["거짓말","할","란"]},hunum:[{kor:"란",def:"거짓말 할"}]},{id:8331,hanja:"翺",strokes:"18",def:{en:["soar","roam"],kr:["날","고"]},hunum:[{kor:"고",def:"날"}]},{id:8332,hanja:"灑",strokes:"22",def:{en:["sprinkle","splash","scatter","throw"],kr:["깜짝","놀랄","쇄"]},hunum:[{kor:"새",def:"뿌릴"},{kor:"쇄",def:"뿌릴"}]},{id:8333,hanja:"囓",strokes:"24",def:{en:["gnaw"],kr:["齧과","同字"]},hunum:[{kor:"설",def:"물"}]},{id:8334,hanja:"翻",strokes:"18",def:{en:["flip over","upset","capsize"],kr:["날","번"]},hunum:[{kor:"번",def:"날"}]},{id:8335,hanja:"愬",strokes:"14",def:{en:["accuse","sue","inform","narrate"],kr:["알릴","소"]},hunum:[{kor:"색",def:"놀랍고두려울"},{kor:"소",def:"고할"}]},{id:8336,hanja:"歧",strokes:"8",def:{en:["fork of road","branching off"],kr:["岐와","同字"]},hunum:[{kor:"기",def:"갈림길"}]},{id:8337,hanja:"翼",strokes:"18",def:{en:["wings","fins on fish","shelter"],kr:["날개","익"]},hunum:[{kor:"익",def:"날개"}]},{id:8338,hanja:"灓",strokes:"23",def:{en:[],kr:["적실","란"]},hunum:[{kor:"란",def:"적실"}]},{id:8339,hanja:"愭",strokes:"13",def:{en:[],kr:["공손할","기"]},hunum:[{kor:"기",def:"공손할"}]},{id:8340,hanja:"歩",strokes:"8",def:{en:["step"],kr:["步의","俗字"]},hunum:[{kor:"보",def:"걸을"}]},{id:8341,hanja:"翾",strokes:"19",def:{en:["fly","to flit"],kr:["급할","현"]},hunum:[{kor:"현",def:"파뜩파뜩 날"}]},{id:8342,hanja:"歪",strokes:"9",def:{en:["slant","inclined","askewd","awry"]},hunum:[{kor:"외",def:"기을"}]},{id:8343,hanja:"愰",strokes:"13",def:{en:["clearness of mind","doubtful","uncertain"],kr:["밝을","황"]},hunum:[{kor:"황",def:"밝을"}]},{id:8344,hanja:"鐏",strokes:"20",def:{en:["cap"],kr:["창고달","준"]},hunum:[{kor:"준",def:"창고달"}]},{id:8345,hanja:"囗",strokes:"3",def:{en:["erect","proud","upright","bald"],kr:["圍의","古字"]},hunum:[{kor:"국",def:"나라"},{kor:"위",def:"에워쌀"}]},{id:8346,hanja:"窒",strokes:"11",def:{en:["stop up","obstruct"],kr:["막을","질"]},hunum:[{kor:"절",def:"막을"},{kor:"질",def:"막을"}]},{id:8347,hanja:"鐐",strokes:"20",def:{en:["fetters"],kr:["은","료"]},hunum:[{kor:"료",def:"은"}]},{id:8348,hanja:"輦",strokes:"15",def:{en:["a hand","to transport by carriage"],kr:["손수레","련"]},hunum:[{kor:"련",def:"손수레"}]},{id:8349,hanja:"灘",strokes:"22",def:{en:["bank","a sandbar","shoal","rapids"],kr:["해","이름","탄"]},hunum:[{kor:"탄",def:"여울"}]},{id:8350,hanja:"窓",strokes:"11",def:{en:["window"],kr:["창","창"]},hunum:[{kor:"창",def:"창"}]},{id:8351,hanja:"輧",strokes:"15",def:{en:["curtained carriage used by women"],kr:["거마","소리","병"]},hunum:[{kor:"병",def:"거마 소리"}]},{id:8352,hanja:"囙",strokes:"5",def:{en:[],kr:["因의","俗字"]},hunum:[{kor:"인",def:"인할"}]},{id:8353,hanja:"蓬",strokes:"17",def:{en:["type of raspberry","fairyland"],kr:["쑥","봉"]},hunum:[{kor:"봉",def:"쑥"}]},{id:8354,hanja:"輨",strokes:"15",def:{en:[],kr:["줏대","관"]},hunum:[{kor:"관",def:"줏대"}]},{id:8355,hanja:"昀",strokes:"8",def:{en:["sun light","used in personal names"]},hunum:[{kor:"윤",def:"햇빛"}]},{id:8356,hanja:"囚",strokes:"5",def:{en:["prisoner","convict","confine"],kr:["묶일","수"]},hunum:[{kor:"수",def:"가둘"}]},{id:8357,hanja:"歯",strokes:"12",def:{en:["teeth","gears","cogs","age","a form of KangXi radical"],kr:["齒의","俗字"]},hunum:[{kor:"치",def:"이"}]},{id:8358,hanja:"愴",strokes:"13",def:{en:["sad","broken","disconsolate"],kr:["슬퍼할","창"]},hunum:[{kor:"창",def:"슬퍼할"}]},{id:8359,hanja:"窕",strokes:"11",def:{en:["slender","quiet and modest","charming"],kr:["정숙할","조"]},hunum:[{kor:"조",def:"정숙할"}]},{id:8360,hanja:"鐓",strokes:"20",def:{en:["ferrule","castrate"],kr:["창고달","대"]},hunum:[{kor:"대",def:"창고달"}]},{id:8361,hanja:"蓭",strokes:"17",def:{en:[],kr:["암자","암"]},hunum:[{kor:"암",def:"암자"}]},{id:8362,hanja:"輩",strokes:"15",def:{en:["generation","lifetime","class"],kr:["무리","배"]},hunum:[{kor:"배",def:"무리"}]},{id:8363,hanja:"四",strokes:"5",def:{en:["four"],kr:["넉","사"]},hunum:[{kor:"사",def:"넉"}]},{id:8364,hanja:"鐔",strokes:"20",def:{en:["dagger","small sword"],kr:["칼날","아래","코등이","심"]},hunum:[{kor:"심",def:"칼날 아래 코등이"}]},{id:8365,hanja:"蓮",strokes:"17",def:{en:["lotus","water lily","paradise"],kr:["연밥","련"]},hunum:[{kor:"련",def:"연밥"}]},{id:8366,hanja:"輪",strokes:"15",def:{en:["wheel","revolve","turn","recur"],kr:["바퀴","륜"]},hunum:[{kor:"륜",def:"바퀴"}]},{id:8367,hanja:"昂",strokes:"8",def:{en:["rise","raise","proud","bold","upright"],kr:["높을","앙"]},hunum:[{kor:"앙",def:"높을"}]},{id:8368,hanja:"昃",strokes:"8",def:{en:["afternoon","the sun in the afternoon sky","to decline"]},hunum:[{kor:"치",def:"기울"}]},{id:8369,hanja:"蓯",strokes:"17",def:{en:["medicinal herb"],kr:["풀","더북할","총"]},hunum:[{kor:"총",def:"풀 더북할"}]},{id:8370,hanja:"窗",strokes:"12",def:{en:["window"],kr:["창","창"]},hunum:[{kor:"창",def:"창"}]},{id:8371,hanja:"囝",strokes:"6",def:{en:["baby","infant"],kr:["아이","건"]},hunum:[{kor:"건",def:"아이"}]},{id:8372,hanja:"回",strokes:"6",def:{en:["return","turn around","a time"],kr:["돌","회"]},hunum:[{kor:"회",def:"돌"}]},{id:8373,hanja:"窘",strokes:"12",def:{en:["embarrassed","hard"],kr:["군색할","군"]},hunum:[{kor:"군",def:"군색할"}]},{id:8374,hanja:"愷",strokes:"13",def:{en:["enjoy","be contented","joyful"],kr:["급할","개"]},hunum:[{kor:"개",def:"탐할"}]},{id:8375,hanja:"歲",strokes:"13",def:{en:["year","age","harvest"],kr:["풍년","세"]},hunum:[{kor:"세",def:"해"}]},{id:8376,hanja:"灝",strokes:"24",def:{en:["vast","large","grand","expansive"],kr:["콩","삶은","물","호"]},hunum:[{kor:"호",def:"넓을"}]},{id:8377,hanja:"蓱",strokes:"17",def:{en:[],kr:["개구리밥","평"]},hunum:[{kor:"평",def:"마름"}]},{id:8378,hanja:"歳",strokes:"13",def:{en:["year","age","harvest"],kr:["歲와","同字"]},hunum:[{kor:"세",def:"해"}]},{id:8379,hanja:"囟",strokes:"6",def:{en:["top of the head","skull"],kr:["정수리","신"]},hunum:[{kor:"신",def:"숨구멍"}]},{id:8380,hanja:"灞",strokes:"24",def:{en:["river in Shanxi province"],kr:["물이름","파"]},hunum:[{kor:"파",def:"물이름"}]},{id:8381,hanja:"鐘",strokes:"20",def:{en:["clock","bell"],kr:["쇠북","종"]},hunum:[{kor:"종",def:"쇠북"}]},{id:8382,hanja:"昆",strokes:"8",def:{en:["elder brother","descendants"],kr:["서쪽","오랑캐","이름","혼"]},hunum:[{kor:"곤",def:"형"},{kor:"혼",def:"덩어리"}]},{id:8383,hanja:"因",strokes:"6",def:{en:["cause","reason","by","because"],kr:["인할","인"]},hunum:[{kor:"인",def:"인할"}]},{id:8384,hanja:"輯",strokes:"16",def:{en:["gather up","collect","edit","compile"],kr:["모을","집"]},hunum:[{kor:"집",def:"모을"}]},{id:8385,hanja:"鐙",strokes:"20",def:{en:["lamp","a kind of cooking vessel"],kr:["등자","등"]},hunum:[{kor:"등",def:"등잔"}]},{id:8386,hanja:"觀",strokes:"25",def:{en:["see","observe","view","appearance"],kr:["볼","관"]},hunum:[{kor:"관",def:"볼"}]},{id:8387,hanja:"窛",strokes:"12",def:{en:[],kr:["노략질할","구"]},hunum:[{kor:"구",def:"노략질할"}]},{id:8388,hanja:"昇",strokes:"8",def:{en:["rise","ascent","peaceful","peace"],kr:["풍년들","승"]},hunum:[{kor:"승",def:"해 돋을"}]},{id:8389,hanja:"蓴",strokes:"17",def:{en:["edible water plant","bracenia"],kr:["순나물","순"]},hunum:[{kor:"순",def:"순나물"}]},{id:8390,hanja:"輰",strokes:"16",def:{en:[],kr:["상여수레","양"]},hunum:[{kor:"양",def:"상여수레"}]},{id:8391,hanja:"愼",strokes:"13",def:{en:["act with care","be cautious"],kr:["고요할","신"]},hunum:[{kor:"신",def:"삼갈"}]},{id:8392,hanja:"歷",strokes:"16",def:{en:["take place","past","history"],kr:["지낼","력"]},hunum:[{kor:"력",def:"지낼"}]},{id:8393,hanja:"昉",strokes:"8",def:{en:["bright dawn","daybreak","appear"],kr:["마침","방"]},hunum:[{kor:"방",def:"마침"}]},{id:8394,hanja:"団",strokes:"6",def:{en:["sphere","ball","circle","mass","lump"],kr:["團의","略字"]},hunum:[{kor:"단",def:"둥글"}]},{id:8395,hanja:"昊",strokes:"8",def:{en:["summer time","sky","heaven"],kr:["큰","모양","호"]},hunum:[{kor:"호",def:"하늘"}]},{id:8396,hanja:"歸",strokes:"18",def:{en:["return","return to","revert to"],kr:["돌아올","귀"]},hunum:[{kor:"궤",def:"먹일"},{kor:"귀",def:"돌아올"}]},{id:8397,hanja:"囤",strokes:"7",def:{en:["grain basket","bin for grain"],kr:["작을","곳집","돈"]},hunum:[{kor:"돈",def:"작을 곳집"}]},{id:8398,hanja:"輳",strokes:"16",def:{en:["hubs of wheel","converge around"],kr:["모일","주"]},hunum:[{kor:"주",def:"모일"}]},{id:8399,hanja:"灣",strokes:"25",def:{en:["a bay","cove","inlet","bend of stream"],kr:["물굽이","만"]},hunum:[{kor:"만",def:"물굽이"}]},{id:8400,hanja:"窟",strokes:"13",def:{en:["hole","cave","cellar","underground"],kr:["구멍","굴"]},hunum:[{kor:"굴",def:"구멍"}]},{id:8401,hanja:"歹",strokes:"4",def:{en:["bad","vicious","depraved","wicked"],kr:["살","발린","뼈","알"]},hunum:[{kor:"대",def:"거스릴"},{kor:"알",def:"뼈 앙상할"}]},{id:8402,hanja:"鹙",strokes:"14",def:{en:["large waterfowl with naked head","Garrulus glandarius"],kr:["鶖와","同字"]},hunum:[{kor:"추",def:"무수리"}]},{id:8403,hanja:"昌",strokes:"8",def:{en:["light of sun","good","proper"],kr:["창성할","창"]},hunum:[{kor:"창",def:"창성할"}]},{id:8404,hanja:"窠",strokes:"13",def:{en:["nest","hole","indention","den"],kr:["보금자리","과"]},hunum:[{kor:"과",def:"보금자리"}]},{id:8405,hanja:"愾",strokes:"13",def:{en:["anger","wrath","hatred","enmity"],kr:["한숨","희"]},hunum:[{kor:"개",def:"한숨 쉴"},{kor:"희",def:"한숨"}]},{id:8406,hanja:"囦",strokes:"7",def:{en:[],kr:["물","깊을","연"]},hunum:[{kor:"연",def:"물 깊을"}]},{id:8407,hanja:"愿",strokes:"14",def:{en:["sincere","honest","virtuous"],kr:["삼갈","원"]},hunum:[{kor:"원",def:"정성"}]},{id:8408,hanja:"死",strokes:"6",def:{en:["die","dead","death"],kr:["죽을","사"]},hunum:[{kor:"사",def:"죽을"}]},{id:8409,hanja:"囧",strokes:"7",def:{en:[],kr:["冏과","同字"]},hunum:[{kor:"경",def:"빛날"}]},{id:8410,hanja:"明",strokes:"8",def:{en:["bright","light","brilliant","clear"],kr:["밝을","명"]},hunum:[{kor:"명",def:"밝을"}]},{id:8411,hanja:"昏",strokes:"8",def:{en:["dusk","nightfall","twilight","dark"],kr:["어두울","혼"]},hunum:[{kor:"혼",def:"어두울"}]},{id:8412,hanja:"灧",strokes:"27",def:{en:["overflowing","billowing","wavy"],kr:["灩의","俗字"]},hunum:[{kor:"염",def:"출렁거릴"}]},{id:8413,hanja:"囩",strokes:"7",def:{en:[],kr:["돌릴","운"]},hunum:[{kor:"운",def:"돌릴"}]},{id:8414,hanja:"囪",strokes:"7",def:{en:["chimney","funnel"],kr:["囱과","同字"]},hunum:[{kor:"창",def:"굴뚝"},{kor:"총",def:"굴뚝"}]},{id:8415,hanja:"蓼",strokes:"17",def:{en:["smartweed","polygonum"],kr:["여뀌","료"]},hunum:[{kor:"료",def:"여뀌"}]},{id:8416,hanja:"窣",strokes:"13",def:{en:["to rush out of a den","rustling","whispering"],kr:["구멍으로","나올","솔"]},hunum:[{kor:"솔",def:"느릿느릿 걸을"}]},{id:8417,hanja:"昐",strokes:"8",def:{en:[]},hunum:[{kor:"분",def:"햇빛"}]},{id:8418,hanja:"囫",strokes:"7",def:{en:["entire","whole"],kr:["온전할","홀"]},hunum:[{kor:"홀",def:"온전할"}]},{id:8419,hanja:"蓽",strokes:"17",def:{en:["species of bean","piper longtum"],kr:["약이름","필"]},hunum:[{kor:"필",def:"휘추리"}]},{id:8420,hanja:"輸",strokes:"16",def:{en:["transport","carry","haul"],kr:["짐바리","수"]},hunum:[{kor:"수",def:"떨어뜨릴"}]},{id:8421,hanja:"灩",strokes:"31",def:{en:["overflowing","billowing","wavy"],kr:["물결","출렁거릴","염"]},hunum:[{kor:"염",def:"물 그득할"}]},{id:8422,hanja:"歿",strokes:"8",def:{en:["die","death","dead"],kr:["죽을","몰"]},hunum:[{kor:"몰",def:"죽을"}]},{id:8423,hanja:"昑",strokes:"8",def:{en:["bright"],kr:["밝을","금"]},hunum:[{kor:"금",def:"밝을"}]},{id:8424,hanja:"囬",strokes:"7",def:{en:["to return to or from"],kr:["回의","俗字"]},hunum:[{kor:"회",def:"돌"}]},{id:8425,hanja:"輹",strokes:"16",def:{en:["two pieces of wood underneath a cart"],kr:["복토","복"]},hunum:[{kor:"복",def:"복토"}]},{id:8426,hanja:"火",strokes:"4",def:{en:["fire","flame","burn","anger","rage"],kr:["불","화"]},hunum:[{kor:"화",def:"불"}]},{id:8427,hanja:"鐥",strokes:"20",def:{en:[],kr:["복자","선"]},hunum:[{kor:"선",def:"복자"}]},{id:8428,hanja:"蓿",strokes:"17",def:{en:["clover","lucerne"],kr:["거여목","숙"]},hunum:[{kor:"숙",def:"거여목"}]},{id:8429,hanja:"园",strokes:"7",def:{en:["garden","park","orchard"],kr:["둥글게","깎을","완"]},hunum:[{kor:"완",def:"둥글게 깎을"}]},{id:8430,hanja:"冀",strokes:"16",def:{en:["hope for","wish","Hebei province"],kr:["바랄","기"]},hunum:[{kor:"기",def:"바랄"}]},{id:8431,hanja:"輻",strokes:"16",def:{en:["spokes of wheel"],kr:["바퀴살통","폭"]},hunum:[{kor:"복",def:"바퀴살"},{kor:"폭",def:"바퀴살통"}]},{id:8432,hanja:"易",strokes:"8",def:{en:["change","easy"],kr:["편할","이"]},hunum:[{kor:"역",def:"바꿀"},{kor:"이",def:"쉬울"}]},{id:8433,hanja:"囮",strokes:"7",def:{en:["inveigle","decoy","cheat"],kr:["새","후릴","와"]},hunum:[{kor:"와",def:"새 후릴"}]},{id:8434,hanja:"昔",strokes:"8",def:{en:["formerly","ancient","in beginning"],kr:["옛","착"]},hunum:[{kor:"석",def:"옛"},{kor:"착",def:"옛"}]},{id:8435,hanja:"昕",strokes:"8",def:{en:["dawn","early morning","day"],kr:["아침","흔"]},hunum:[{kor:"흔",def:"아침"}]},{id:8436,hanja:"窩",strokes:"14",def:{en:["nest","cave","den","hiding place"],kr:["움집","와"]},hunum:[{kor:"와",def:"굴"}]},{id:8437,hanja:"困",strokes:"7",def:{en:["to surround","beseige","to be surrounded","difficult"],kr:["괴로울","곤"]},hunum:[{kor:"곤",def:"괴로울"}]},{id:8438,hanja:"囱",strokes:"7",def:{en:["chimney"],kr:["굴뚝","총"]},hunum:[{kor:"창",def:"천장"},{kor:"총",def:"굴뚝"}]},{id:8439,hanja:"輾",strokes:"17",def:{en:["turn over","roll"],kr:["돌아","누울","전"]},hunum:[{kor:"전",def:"돌아 누울"}]},{id:8440,hanja:"冂",strokes:"2",def:{en:["wide","KangXi radical"],kr:["먼데","경"]},hunum:[{kor:"경",def:"먼데"}]},{id:8441,hanja:"灯",strokes:"6",def:{en:["lantern","lamp"]},hunum:[{kor:"등",def:"등잔"},{kor:"정",def:"등잔"}]},{id:8442,hanja:"窪",strokes:"14",def:{en:["hollow","pit","depression","swamp"],kr:["깊을","와"]},hunum:[{kor:"와",def:"도랑"}]},{id:8443,hanja:"灰",strokes:"6",def:{en:["ashes","dust","lime","mortar"],kr:["재","회"]},hunum:[{kor:"회",def:"재"}]},{id:8444,hanja:"冃",strokes:"4",def:{en:[],kr:["어린이","머리","건","모"]},hunum:[{kor:"모",def:"어린이 머리 건"}]},{id:8445,hanja:"輿",strokes:"17",def:{en:["cart","palanquin","public opinion"],kr:["짐질","여"]},hunum:[{kor:"여",def:"수레바탕"}]},{id:8446,hanja:"囲",strokes:"7",def:{en:["surround","encircle","corral","whip"],kr:["圍의","略字"]},hunum:[{kor:"위",def:"에워쌀"}]},{id:8447,hanja:"寀",strokes:"11",def:{en:["feudal estate"],kr:["녹봉","채"]},hunum:[{kor:"채",def:"녹봉"}]},{id:8448,hanja:"冄",strokes:"4",def:{en:["tender","weak","gradually alterrrrating"],kr:["冉과","同字"]},hunum:[{kor:"염",def:"나아갈"}]},{id:8449,hanja:"鐪",strokes:"21",def:{en:[],kr:["부레","로"]},hunum:[{kor:"로",def:"부레"}]},{id:8450,hanja:"角",strokes:"7",def:{en:["horn","angle","corner","point"],kr:["사람이름","녹"]},hunum:[{kor:"각",def:"뿔"},{kor:"녹",def:"사람이름"}]},{id:8451,hanja:"窬",strokes:"14",def:{en:["a small door or window","a hole in the wall to cut through a wall"],kr:["판장문","유"]},hunum:[{kor:"유",def:"판장문"}]},{id:8452,hanja:"図",strokes:"7",def:{en:["diagram","chart","map","picture"],kr:["圖의","俗字"]},hunum:[{kor:"도",def:"그림"}]},{id:8453,hanja:"鐫",strokes:"21",def:{en:["engraving tool","carve","engrave"],kr:["새길","전"]},hunum:[{kor:"전",def:"새길"}]},{id:8454,hanja:"内",strokes:"4",def:{en:["inside"]},hunum:[{kor:"납",def:"받아들일"},{kor:"내",def:"안"}]},{id:8455,hanja:"寂",strokes:"11",def:{en:["still","silent","quiet","desolate"],kr:["쓸쓸할","적"]},hunum:[{kor:"적",def:"고요할"}]},{id:8456,hanja:"円",strokes:"4",def:{en:["yen"],kr:["圓의","俗字"]},hunum:[{kor:"옌",def:"화폐 단위"}]},{id:8457,hanja:"觔",strokes:"9",def:{en:["catty"],kr:["筋과","同字"]},hunum:[{kor:"근",def:"힘줄"}]},{id:8458,hanja:"窮",strokes:"15",def:{en:["poor","destitute","impoverished"],kr:["다할","궁"]},hunum:[{kor:"궁",def:"다할"}]},{id:8459,hanja:"畀",strokes:"8",def:{en:["to give"],kr:["줄","비"]},hunum:[{kor:"비",def:"줄"}]},{id:8460,hanja:"寃",strokes:"11",def:{en:["grievance","injustice","wrong"],kr:["죄","없을","원"]},hunum:[{kor:"원",def:"원통할"}]},{id:8461,hanja:"窯",strokes:"15",def:{en:["kiln","coal mine pit"],kr:["오지그릇","요"]},hunum:[{kor:"요",def:"기와가마"}]},{id:8462,hanja:"昛",strokes:"9",def:{en:[],kr:["밝을","거"]},hunum:[{kor:"거",def:"밝을"}]},{id:8463,hanja:"寄",strokes:"11",def:{en:["send","transmit","mail","rely on"],kr:["부칠","기"]},hunum:[{kor:"기",def:"부칠"}]},{id:8464,hanja:"觖",strokes:"11",def:{en:["to long for","dissatisfied to criticize"],kr:["바랄","결"]},hunum:[{kor:"결",def:"서운할"}]},{id:8465,hanja:"灵",strokes:"7",def:{en:["spirit","soul","spiritual world"],kr:["靈의","俗字"]},hunum:[{kor:"령",def:"신령"}]},{id:8466,hanja:"囶",strokes:"8",def:{en:[],kr:["國의","古字"]},hunum:[{kor:"국",def:"나라"}]},{id:8467,hanja:"冉",strokes:"5",def:{en:["tender","weak","proceed gradually"],kr:["침노할","염"]},hunum:[{kor:"염",def:"가는 털 늘어질"}]},{id:8468,hanja:"寅",strokes:"11",def:{en:["to respect","reverence","respectfully"],kr:["세째지지","인"]},hunum:[{kor:"이",def:"공경할"},{kor:"인",def:"세째지지"}]},{id:8469,hanja:"囷",strokes:"8",def:{en:["round"],kr:["둥근곳집","균"]},hunum:[{kor:"균",def:"둥근곳집"}]},{id:8470,hanja:"冊",strokes:"5",def:{en:["book","volume"],kr:["책","책"]},hunum:[{kor:"책",def:"책"}]},{id:8471,hanja:"密",strokes:"11",def:{en:["dense","thick","close","intimate"],kr:["빽빽할","밀"]},hunum:[{kor:"밀",def:"빽빽할"}]},{id:8472,hanja:"昞",strokes:"9",def:{en:["bright","luminous","glorious"],kr:["밝을","병"]},hunum:[{kor:"병",def:"밝을"}]},{id:8473,hanja:"寇",strokes:"11",def:{en:["bandits","thieves","enemy","invade"],kr:["도둑","구"]},hunum:[{kor:"구",def:"도둑"}]},{id:8474,hanja:"灸",strokes:"7",def:{en:["cauterize with moxa","moxibustion"],kr:["지질","구"]},hunum:[{kor:"구",def:"지질"}]},{id:8475,hanja:"窳",strokes:"15",def:{en:["dirty","useless","weak","powerless","cracked","a flaw"],kr:["짐승이름","유"]},hunum:[{kor:"유",def:"이지러질"}]},{id:8476,hanja:"星",strokes:"9",def:{en:["a star","planet","any point of light"],kr:["성시","성"]},hunum:[{kor:"성",def:"별"}]},{id:8477,hanja:"囹",strokes:"8",def:{en:["prison","enclosure"],kr:["옥","령"]},hunum:[{kor:"령",def:"옥"}]},{id:8478,hanja:"册",strokes:"5",def:{en:["book","volume","register","list"],kr:["책","책"]},hunum:[{kor:"책",def:"책"}]},{id:8479,hanja:"觚",strokes:"12",def:{en:["jug","winecup","goblet","square"],kr:["술잔","고"]},hunum:[{kor:"고",def:"술잔"}]},{id:8480,hanja:"映",strokes:"9",def:{en:["project","reflect light"],kr:["빛날","영"]},hunum:[{kor:"영",def:"비칠"}]},{id:8481,hanja:"固",strokes:"8",def:{en:["to become solid","solidify","strength"],kr:["굳을","고"]},hunum:[{kor:"고",def:"굳을"}]},{id:8482,hanja:"昡",strokes:"9",def:{en:["long day","extended","relaxed"],kr:["햇빛","현"]},hunum:[{kor:"현",def:"햇빛"}]},{id:8483,hanja:"再",strokes:"6",def:{en:["again","twice","re"],kr:["거듭","재"]},hunum:[{kor:"재",def:"두 번"}]},{id:8484,hanja:"畇",strokes:"9",def:{en:["land"],kr:["밭개간할","균"]},hunum:[{kor:"균",def:"밭개간할"}]},{id:8485,hanja:"羂",strokes:"18",def:{en:["to trap","snare"],kr:["걸릴","견"]},hunum:[{kor:"견",def:"걸"}]},{id:8486,hanja:"餁",strokes:"15",def:{en:["cooked food","cook until well done"],kr:["飪과","同字"]},hunum:[{kor:"임",def:"익힐"}]},{id:8487,hanja:"觜",strokes:"13",def:{en:["beak"],kr:["부리","취"]},hunum:[{kor:"자",def:"털뿔"},{kor:"취",def:"부리"}]},{id:8488,hanja:"窶",strokes:"16",def:{en:["poor","impoverished"],kr:["가난하여","예절없을","구"]},hunum:[{kor:"구",def:"가난하여 예절없을"}]},{id:8489,hanja:"鐵",strokes:"21",def:{en:["iron","strong","solid","firm"],kr:["쇠","철"]},hunum:[{kor:"철",def:"쇠"}]},{id:8490,hanja:"觝",strokes:"12",def:{en:["gore","butt","resist","push"],kr:["씨름","저"]},hunum:[{kor:"저",def:"찌를"}]},{id:8491,hanja:"冏",strokes:"7",def:{en:[],kr:["빛날","경"]},hunum:[{kor:"경",def:"빛날"}]},{id:8492,hanja:"国",strokes:"8",def:{en:["nation","country","nation"],kr:["國의","略字"]},hunum:[{kor:"국",def:"나라"}]},{id:8493,hanja:"鐶",strokes:"21",def:{en:["metal ring","measure of currency"],kr:["고리","환"]},hunum:[{kor:"환",def:"고리"}]},{id:8494,hanja:"冐",strokes:"8",def:{en:["risk","brave","dare"],kr:["冒의","俗字"]},hunum:[{kor:"모",def:"무릅쓸"}]},{id:8495,hanja:"餃",strokes:"15",def:{en:["stuffed dumplings"],kr:["경단","교"]},hunum:[{kor:"교",def:"경단"}]},{id:8496,hanja:"灼",strokes:"7",def:{en:["burn","broil","cauterize","bright"],kr:["사를","작"]},hunum:[{kor:"작",def:"불사를"}]},{id:8497,hanja:"畊",strokes:"9",def:{en:["plow","cultivate"],kr:["耕의","古字"]},hunum:[{kor:"경",def:"밭 갈"}]},{id:8498,hanja:"羅",strokes:"19",def:{en:["net for catching birds","gauze"],kr:["새그물","라"]},hunum:[{kor:"라",def:"새그물"}]},{id:8499,hanja:"昤",strokes:"9",def:{en:["sunshine"],kr:["날","빛","영롱할","령"]},hunum:[{kor:"령",def:"날 빛 영롱할"}]},{id:8500,hanja:"春",strokes:"9",def:{en:["spring","wanton"],kr:["온화할","춘"]},hunum:[{kor:"춘",def:"봄"}]},{id:8501,hanja:"冑",strokes:"9",def:{en:["helmet"],kr:["투구","주"]},hunum:[{kor:"주",def:"투구"}]},{id:8502,hanja:"畋",strokes:"9",def:{en:["till land","cultivate","hunt"],kr:["사냥할","전"]},hunum:[{kor:"전",def:"사냥할"}]},{id:8503,hanja:"災",strokes:"7",def:{en:["calamity","disaster","catastrophe"],kr:["횡액","재"]},hunum:[{kor:"재",def:"재앙"}]},{id:8504,hanja:"富",strokes:"12",def:{en:["abundant","ample","rich","wealthy"],kr:["가멸","부"]},hunum:[{kor:"부",def:"가멸"}]},{id:8505,hanja:"窹",strokes:"16",def:{en:[],kr:["아궁이","오"]},hunum:[{kor:"오",def:"아궁이"}]},{id:8506,hanja:"羆",strokes:"19",def:{en:["brown bear","ursus arctos"],kr:["큰","곰","비"]},hunum:[{kor:"비",def:"큰 곰"}]},{id:8507,hanja:"囿",strokes:"9",def:{en:["pen up","limit","constrain"],kr:["고루할","유"]},hunum:[{kor:"유",def:"엔담"}]},{id:8508,hanja:"鐸",strokes:"21",def:{en:["bell","surname"],kr:["목탁","탁"]},hunum:[{kor:"탁",def:"요령"}]},{id:8509,hanja:"灾",strokes:"7",def:{en:["calamity","disaster","catastrophe"],kr:["災와","同字"]},hunum:[{kor:"재",def:"재앙"}]},{id:8510,hanja:"冒",strokes:"9",def:{en:["risk","brave","dare"],kr:["무릅쓸","목"]},hunum:[{kor:"모",def:"가릴"},{kor:"목",def:"무릅쓸"}]},{id:8511,hanja:"餅",strokes:"17",def:{en:["rice","biscuits"],kr:["餠의","俗字"]},hunum:[{kor:"병",def:"떡"}]},{id:8512,hanja:"窺",strokes:"16",def:{en:["peep","watch","spy on","pry"],kr:["엿볼","규"]},hunum:[{kor:"규",def:"엿볼"}]},{id:8513,hanja:"界",strokes:"9",def:{en:["boundary","limit","domain","society","the world"],kr:["지경","계"]},hunum:[{kor:"계",def:"지경"}]},{id:8514,hanja:"羇",strokes:"22",def:{en:["inn","lodge","travel"],kr:["나그네","기"]},hunum:[{kor:"기",def:"나그네"}]},{id:8515,hanja:"窻",strokes:"16",def:{en:[],kr:["창","창"]},hunum:[{kor:"창",def:"창"}]},{id:8516,hanja:"冓",strokes:"10",def:{en:["a secluded place","secret cabinet"],kr:["재목","어긋매겨","쌓을","구"]},hunum:[{kor:"구",def:"재목 어긋매겨 쌓을"}]},{id:8517,hanja:"羈",strokes:"24",def:{en:["halter","restrain","hold","control"],kr:["굴레","기"]},hunum:[{kor:"기",def:"굴레"}]},{id:8518,hanja:"昧",strokes:"9",def:{en:["obscure","dark","darken"],kr:["새벽","매"]},hunum:[{kor:"매",def:"새벽"}]},{id:8519,hanja:"冔",strokes:"10",def:{en:["cap worn during the Yin dynasty"],kr:["관","후"]},hunum:[{kor:"후",def:"관"}]},{id:8520,hanja:"鐺",strokes:"21",def:{en:["frying pan","warming vessel"],kr:["죄인","자물쇠","당"]},hunum:[{kor:"당",def:"죄인 자물쇠"}]},{id:8521,hanja:"鹵",strokes:"11",def:{en:["saline soil","natural salt","rock"],kr:["소금","로"]},hunum:[{kor:"로",def:"소금"}]},{id:8522,hanja:"昨",strokes:"9",def:{en:["yesterday","in former times","past"],kr:["어제","작"]},hunum:[{kor:"작",def:"어제"}]},{id:8523,hanja:"冕",strokes:"11",def:{en:["crown","ceremonial cap"],kr:["면류관","면"]},hunum:[{kor:"면",def:"면류관"}]},{id:8524,hanja:"寐",strokes:"12",def:{en:["sleep","be asleep"],kr:["잠잘","매"]},hunum:[{kor:"매",def:"잠잘"}]},{id:8525,hanja:"鹶",strokes:"15",def:{en:["salty and bitter","pitiful"],kr:["짜고","쓸","긍"]},hunum:[{kor:"긍",def:"짜고 쓸"}]},{id:8526,hanja:"畎",strokes:"9",def:{en:["a drain between fields","irrigation","to flow"],kr:["산골","도랑","견"]},hunum:[{kor:"견",def:"밭 도랑"}]},{id:8527,hanja:"羊",strokes:"6",def:{en:["sheep","goat","KangXi radical"],kr:["양","양"]},hunum:[{kor:"양",def:"양"}]},{id:8528,hanja:"餉",strokes:"15",def:{en:["rations and pay for soldiers"],kr:["점심","향"]},hunum:[{kor:"향",def:"먹일"}]},{id:8529,hanja:"冖",strokes:"2",def:{en:["cover","KangXi radical"],kr:["덮을","멱"]},hunum:[{kor:"멱",def:"덮을"}]},{id:8530,hanja:"鹷",strokes:"16",def:{en:[],kr:["나이","령"]},hunum:[{kor:"령",def:"나이"}]},{id:8531,hanja:"解",strokes:"13",def:{en:["loosen","unfasten","untie","explain"],kr:["벗을","해"]},hunum:[{kor:"개",def:"벗을"},{kor:"해",def:"쪼갤"}]},{id:8532,hanja:"窾",strokes:"17",def:{en:["hole","hallow","empty"],kr:["빌","관"]},hunum:[{kor:"관",def:"빌"}]},{id:8533,hanja:"畏",strokes:"9",def:{en:["fear","dread","awe","reverence"],kr:["겁낼","외"]},hunum:[{kor:"외",def:"두려울"}]},{id:8534,hanja:"羋",strokes:"7",def:{en:["bleat of sheep","surname"],kr:["양","울","미"]},hunum:[{kor:"미",def:"양 울"}]},{id:8535,hanja:"寒",strokes:"12",def:{en:["cold","wintry","chilly"],kr:["찰","한"]},hunum:[{kor:"한",def:"찰"}]},{id:8536,hanja:"冗",strokes:"4",def:{en:["excessive","superfluous"],kr:["宂과","同字"]},hunum:[{kor:"용",def:"쓸데없을"}]},{id:8537,hanja:"養",strokes:"15",def:{en:["raise","rear","bring up","support"],kr:["봉양할","양"]},hunum:[{kor:"양",def:"기를"}]},{id:8538,hanja:"窿",strokes:"17",def:{en:["mine shaft","cavity","hole"],kr:["활꼴","륭"]},hunum:[{kor:"륭",def:"활꼴"}]},{id:8539,hanja:"羌",strokes:"8",def:{en:["Qiang nationality","surname"],kr:["말","끝낼","강"]},hunum:[{kor:"강",def:"오랑캐"}]},{id:8540,hanja:"昫",strokes:"9",def:{en:["warm"],kr:["해돋아","따뜻할","구"]},hunum:[{kor:"구",def:"해돋아 따뜻할"}]},{id:8541,hanja:"鹹",strokes:"20",def:{en:["salty","briny","salted","pickled"],kr:["짤","함"]},hunum:[{kor:"함",def:"짤"}]},{id:8542,hanja:"畑",strokes:"9",def:{en:["dry","used in Japanese names"],kr:["밭","전"]},hunum:[{kor:"전",def:"화전"}]},{id:8543,hanja:"冘",strokes:"4",def:{en:["to move on","coubtful"],kr:["갈","유"]},hunum:[{kor:"유",def:"머뭇거릴"}]},{id:8544,hanja:"寓",strokes:"12",def:{en:["residence","lodge","dwell"],kr:["빙자할","우"]},hunum:[{kor:"우",def:"살"}]},{id:8545,hanja:"觥",strokes:"13",def:{en:["a cup made of horn obstinate"],kr:["뿔잔","굉"]},hunum:[{kor:"굉",def:"뿔잔"}]},{id:8546,hanja:"触",strokes:"13",def:{en:["butt","ram","gore","touch"],kr:["觸의","俗字"]},hunum:[{kor:"촉",def:"닿을"}]},{id:8547,hanja:"写",strokes:"5",def:{en:["write","draw","sketch","compose"],kr:["冩의","略字"]},hunum:[{kor:"사",def:"베낄"}]},{id:8548,hanja:"寔",strokes:"12",def:{en:["real","true","solid","honest"],kr:["뿐","식"]},hunum:[{kor:"식",def:"이"}]},{id:8549,hanja:"餌",strokes:"15",def:{en:["bait","bait","entice","dumplings"],kr:["흰떡","이"]},hunum:[{kor:"이",def:"미끼"}]},{id:8550,hanja:"美",strokes:"9",def:{en:["beautiful","pretty","pleasing"],kr:["맛이","좋을","미"]},hunum:[{kor:"미",def:"아름다울"}]},{id:8551,hanja:"昭",strokes:"9",def:{en:["bright","luminous","illustrious"],kr:["밝을","조"]},hunum:[{kor:"소",def:"소명할"},{kor:"조",def:"밝을"}]},{id:8552,hanja:"寕",strokes:"12",def:{en:["repose","serenity","peace","peaceful"],kr:["문안할","녕"]},hunum:[{kor:"녕",def:"문안할"}]},{id:8553,hanja:"鹻",strokes:"21",def:{en:["impure carbonate of sodium of natron"],kr:["비누","검"]},hunum:[{kor:"검",def:"소금물"}]},{id:8554,hanja:"畓",strokes:"9",def:{en:["rice field"],kr:["논","답"]},hunum:[{kor:"답",def:"논"}]},{id:8555,hanja:"寖",strokes:"13",def:{en:["gradually","step by step","little"],kr:["점점","침"]},hunum:[{kor:"침",def:"젖을"}]},{id:8556,hanja:"畔",strokes:"10",def:{en:["boundary path dividing fields"],kr:["지경","반"]},hunum:[{kor:"반",def:"지경"}]},{id:8557,hanja:"是",strokes:"9",def:{en:["indeed","yes","right","to be","demonstrative pronoun","this","that"],kr:["곧을","시"]},hunum:[{kor:"시",def:"이"}]},{id:8558,hanja:"切",strokes:"4",def:{en:["cut","mince","slice","carve"],kr:["자를","체"]},hunum:[{kor:"체",def:"자를"}]},{id:8559,hanja:"寗",strokes:"13",def:{en:["a surname","peaceful","rather"],kr:["편안할","녕"]},hunum:[{kor:"녕",def:"편안할"}]},{id:8560,hanja:"鹽",strokes:"24",variant:"塩",def:{en:["variant of","salt"],kr:["塩"]},hunum:[{kor:"염",def:"소금"}]},{id:8561,hanja:"昰",strokes:"9",def:{en:["var of","name"],kr:["是와","同字"]},hunum:[{kor:"시",def:"이"},{kor:"하",def:"여름"}]},{id:8562,hanja:"度",strokes:"9",def:{en:["degree","system","manner","to consider"],kr:["벼슬이름","탁"]},hunum:[{kor:"탁",def:"꾀할"}]},{id:8563,hanja:"寘",strokes:"13",def:{en:["put aside","put down","discard"],kr:["쉴","치"]},hunum:[{kor:"치",def:"둘"}]},{id:8564,hanja:"冝",strokes:"7",def:{en:["suitable","right","fitting","proper"],kr:["宜의","俗字"]},hunum:[{kor:"의",def:"마땅할"}]},{id:8565,hanja:"餐",strokes:"16",def:{en:["eat","dine","meal","food"],kr:["먹을","찬"]},hunum:[{kor:"손",def:"먹을"},{kor:"찬",def:"먹을"}]},{id:8566,hanja:"昱",strokes:"9",def:{en:["bright light","sunlight","dazzling"],kr:["햇빛","밝을","욱"]},hunum:[{kor:"욱",def:"햇빛 밝을"}]},{id:8567,hanja:"拓",strokes:"8",def:{en:["expand","open up","support or push"],kr:["밀칠","탁"]},hunum:[{kor:"탁",def:"물리칠"}]},{id:8568,hanja:"冞",strokes:"8",def:{en:["far"],kr:["두루","다닐","미"]},hunum:[{kor:"미",def:"점점"}]},{id:8569,hanja:"鹿",strokes:"11",def:{en:["deer","surname","KangXi radical"],kr:["사슴","록"]},hunum:[{kor:"록",def:"사슴"}]},{id:8570,hanja:"觫",strokes:"14",def:{en:["to start","tremble with fear"],kr:["곱송거릴","속"]},hunum:[{kor:"속",def:"곱송거릴"}]},{id:8571,hanja:"糖",strokes:"16",def:{en:["sugar","candy","sweets"]},hunum:[{kor:"탕",def:"엿"}]},{id:8572,hanja:"惄",strokes:"12",def:{en:["long for","hungry"],kr:["마음","졸일","녁"]},hunum:[{kor:"녁",def:"마음 졸일"}]},{id:8573,hanja:"冟",strokes:"9",def:{en:[],kr:["알맞게","된","밥","석"]},hunum:[{kor:"석",def:"고룰"}]},{id:8574,hanja:"餒",strokes:"16",def:{en:["hungry","starving","famished"],kr:["굶길","뇌"]},hunum:[{kor:"뇌",def:"굶길"}]},{id:8575,hanja:"羔",strokes:"10",def:{en:["lamb","kid"],kr:["새끼양","고"]},hunum:[{kor:"고",def:"새끼양"}]},{id:8576,hanja:"宅",strokes:"6",def:{en:["residence","dwelling","home","grave"],kr:["묘","구덩이","택"]},hunum:[{kor:"택",def:"집"}]},{id:8577,hanja:"情",strokes:"11",def:{en:["feeling","sentiment","emotion"],kr:["마음속","정"]},hunum:[{kor:"정",def:"뜻"}]},{id:8578,hanja:"冠",strokes:"9",def:{en:["cap","crown","headgear"],kr:["갓","관"]},hunum:[{kor:"관",def:"갓"}]},{id:8579,hanja:"寛",strokes:"13",def:{en:["broad"],kr:["용서할","관"]},hunum:[{kor:"관",def:"용서할"}]},{id:8580,hanja:"餓",strokes:"16",def:{en:["hungry","greedy for","hunger"],kr:["주릴","아"]},hunum:[{kor:"아",def:"주릴"}]},{id:8581,hanja:"留",strokes:"10",def:{en:["stop","halt","stay","detain","keep"],kr:["머무를","류"]},hunum:[{kor:"류",def:"머무를"}]},{id:8582,hanja:"餔",strokes:"16",def:{en:["eat","dinner time","sunset"],kr:["먹을","포"]},hunum:[{kor:"포",def:"저녁 곁두리"}]},{id:8583,hanja:"洞",strokes:"9",def:{en:["cave","grotto","ravine","hole"],kr:["밝을","통"]},hunum:[{kor:"통",def:"구렁"}]},{id:8584,hanja:"惆",strokes:"11",def:{en:["distressed","regretful","sad"],kr:["섭섭할","추"]},hunum:[{kor:"추",def:"실심할"}]},{id:8585,hanja:"欂",strokes:"21",def:{en:[],kr:["주두","박"]},hunum:[{kor:"박",def:"주두"}]},{id:8586,hanja:"寜",strokes:"13",def:{en:["repose","serenity","peace","peaceful"],kr:["차라리","녕"]},hunum:[{kor:"녕",def:"차라리"}]},{id:8587,hanja:"畚",strokes:"10",def:{en:["straw basket","hamper"],kr:["삼태기","분"]},hunum:[{kor:"분",def:"삼태기"}]},{id:8588,hanja:"羖",strokes:"10",def:{en:["a black ram"],kr:["검은","암양","고"]},hunum:[{kor:"고",def:"검은 암양"}]},{id:8589,hanja:"昴",strokes:"9",def:{en:["one of the"],kr:["별자리","이름","묘"]},hunum:[{kor:"묘",def:"별자리 이름"}]},{id:8590,hanja:"暴",strokes:"15",def:{en:["violent","brutal","tyrannical"],kr:["상할","포"]},hunum:[{kor:"포",def:"사나울"}]},{id:8591,hanja:"寝",strokes:"13",def:{en:["sleep","rest","bed chamber"],kr:["寢과","同字"]},hunum:[{kor:"침",def:"寢과 同"}]},{id:8592,hanja:"欃",strokes:"21",def:{en:["sandalwood","comet"],kr:["살별","참"]},hunum:[{kor:"참",def:"살별"}]},{id:8593,hanja:"畛",strokes:"10",def:{en:["border","boundary","raised path"],kr:["두렁길","진"]},hunum:[{kor:"진",def:"두렁길"}]},{id:8594,hanja:"餕",strokes:"16",def:{en:["leftovers"],kr:["대궁","준"]},hunum:[{kor:"준",def:"대궁"}]},{id:8595,hanja:"惇",strokes:"11",def:{en:["be kind","cordial","sincere"],kr:["두터울","돈"]},hunum:[{kor:"돈",def:"두터울"}]},{id:8596,hanja:"冡",strokes:"10",def:{en:[],kr:["덮어쓸","몽"]},hunum:[{kor:"몽",def:"덮어쓸"}]},{id:8597,hanja:"昵",strokes:"9",def:{en:["intimate","close","approach"],kr:["가깝게","할","닐"]},hunum:[{kor:"녜",def:"아비사당"},{kor:"닐",def:"가깝게 할"}]},{id:8598,hanja:"輻",strokes:"16",def:{en:["spokes of wheel"],kr:["바퀴살통","폭"]},hunum:[{kor:"폭",def:"바퀴살통"}]},{id:8599,hanja:"畜",strokes:"10",def:{en:["livestock","domestic animals"],kr:["용납할","휵"]},hunum:[{kor:"축",def:"가축"},{kor:"휵",def:"기를"}]},{id:8600,hanja:"冢",strokes:"10",def:{en:["burial mound","mausoleum","grand"],kr:["무덤","총"]},hunum:[{kor:"총",def:"무덤"}]},{id:8601,hanja:"蒂",strokes:"15",def:{en:["peduncle or stem of plants"],kr:["작은","가시","체"]},hunum:[{kor:"체",def:"작은 가시"}]},{id:8602,hanja:"昶",strokes:"9",def:{en:["a long day"],kr:["밝을","창"]},hunum:[{kor:"창",def:"밝을"}]},{id:8603,hanja:"欄",strokes:"21",def:{en:["railing","balustrade","animal pan"],kr:["난간","란"]},hunum:[{kor:"란",def:"난간"}]},{id:8604,hanja:"寞",strokes:"14",def:{en:["silent","still","lonely","solitary"],kr:["쓸쓸할","막"]},hunum:[{kor:"막",def:"쓸쓸할"}]},{id:8605,hanja:"羗",strokes:"10",def:{en:["tribes in West China","strong","educated","obstinate","a particle"],kr:["羌과","同字"]},hunum:[{kor:"강",def:"오랑캐"}]},{id:8606,hanja:"行",strokes:"6",def:{en:["go","walk","move","travel","circulate"],kr:["굳셀","항"]},hunum:[{kor:"항",def:"시장"}]},{id:8607,hanja:"觱",strokes:"16",def:{en:["tartar horn","chilly wind"],kr:["대평수","필"]},hunum:[{kor:"필",def:"바람이 쌀쌀할"}]},{id:8608,hanja:"冣",strokes:"10",def:{en:[],kr:["모을","취"]},hunum:[{kor:"취",def:"쌓을"}]},{id:8609,hanja:"惉",strokes:"12",def:{en:[],kr:["팰","첨"]},hunum:[{kor:"첨",def:"팰"}]},{id:8610,hanja:"察",strokes:"14",def:{en:["examine","investigate","notice"],kr:["살필","찰"]},hunum:[{kor:"찰",def:"살필"}]},{id:8611,hanja:"羘",strokes:"10",def:{en:["ram"],kr:["수양","장"]},hunum:[{kor:"장",def:"수양"}]},{id:8612,hanja:"畝",strokes:"10",def:{en:["Chinese land measure","fields"],kr:["이랑","무"]},hunum:[{kor:"무",def:"이랑"}]},{id:8613,hanja:"昷",strokes:"9",def:{en:["to feed a prisoner"],kr:["어질","온"]},hunum:[{kor:"온",def:"어질"}]},{id:8614,hanja:"降",strokes:"9",def:{en:["descend","fall","drop","lower","down"],kr:["항복할","항"]},hunum:[{kor:"항",def:"항복할"}]},{id:8615,hanja:"冤",strokes:"10",def:{en:["grievance","injustice","wrong"],kr:["원한","원"]},hunum:[{kor:"원",def:"원통할"}]},{id:8616,hanja:"餘",strokes:"16",def:{en:["surplus","excess","remainder"],kr:["나라이름","여"]},hunum:[{kor:"여",def:"남을"}]},{id:8617,hanja:"見",strokes:"7",def:{en:["see","observe","behold","perceive"],kr:["보일","현"]},hunum:[{kor:"현",def:"나타날"}]},{id:8618,hanja:"惋",strokes:"11",def:{en:["regret","be sorry","alarmed"],kr:["놀라","탄식할","완"]},hunum:[{kor:"완",def:"한탄할"}]},{id:8619,hanja:"冥",strokes:"10",def:{en:["dark","gloomy","night","deep"],kr:["어두울","명"]},hunum:[{kor:"명",def:"어두울"}]},{id:8620,hanja:"寡",strokes:"14",def:{en:["widowed","alone","friendless"],kr:["적을","과"]},hunum:[{kor:"과",def:"적을"}]},{id:8621,hanja:"觳",strokes:"17",def:{en:["an ancient measure","a goblet","mean","frightened"],kr:["뿔잔","곡"]},hunum:[{kor:"곡",def:"뿔잔"}]},{id:8622,hanja:"軀",strokes:"18",def:{en:["body"],kr:["몸","구"]},hunum:[{kor:"구",def:"몸"}]},{id:8623,hanja:"羚",strokes:"11",def:{en:["species of antelope"],kr:["영양","령"]},hunum:[{kor:"령",def:"영양"}]},{id:8624,hanja:"餚",strokes:"17",def:{en:["prepared meat","food"],kr:["반찬","효"]},hunum:[{kor:"효",def:"반찬"}]},{id:8625,hanja:"廓",strokes:"14",def:{en:["broad","wide","open","empty","expand"],kr:["둘레","확"]},hunum:[{kor:"확",def:"둘레"}]},{id:8626,hanja:"寢",strokes:"14",def:{en:["sleep","rest","bed chamber"],kr:["못생길","침"]},hunum:[{kor:"침",def:"잠잘"}]},{id:8627,hanja:"畠",strokes:"10",def:{en:["garden","field","farm","plantation"],kr:["밭","전"]},hunum:[{kor:"전",def:"밭"}]},{id:8628,hanja:"觴",strokes:"18",def:{en:["wine vessel","propose toast","feast"],kr:["잔","상"]},hunum:[{kor:"상",def:"잔"}]},{id:8629,hanja:"昺",strokes:"9",def:{en:["bright","glorious","brilliant"],kr:["昞과","同字"]},hunum:[{kor:"병",def:"불꽃"}]},{id:8630,hanja:"兀",strokes:"3",def:{en:["duplicate of Big Five A"],kr:["움직이지","않을","올"]},hunum:[{kor:"올",def:"우뚝할"}]},{id:8631,hanja:"昻",strokes:"9",def:{en:["rise"],kr:["밝을","앙"]},hunum:[{kor:"앙",def:"오를"}]},{id:8632,hanja:"畢",strokes:"11",def:{en:["end","finish","conclude","completed"],kr:["고기","꿰","다는","나무","필"]},hunum:[{kor:"필",def:"마칠"}]},{id:8633,hanja:"觶",strokes:"19",def:{en:["wine goblet made from horn"],kr:["벌술잔","치"]},hunum:[{kor:"치",def:"잔"}]},{id:8634,hanja:"昼",strokes:"9",def:{en:["daytime","daylight"],kr:["晝의","略字"]},hunum:[{kor:"주",def:"낮"}]},{id:8635,hanja:"羝",strokes:"11",def:{en:["ram","he"],kr:["숫양","저"]},hunum:[{kor:"저",def:"숫양"}]},{id:8636,hanja:"冨",strokes:"11",def:{en:["abundant","ample","rich","wealthy"],kr:["富의","俗字"]},hunum:[{kor:"부",def:"부유할"}]},{id:8637,hanja:"寤",strokes:"14",def:{en:["few","scarce","empty","deserted"],kr:["깨달을","오"]},hunum:[{kor:"오",def:"잠 깨어날"}]},{id:8638,hanja:"惏",strokes:"11",def:{en:["avaricious","greedy cold"],kr:["떨릴","람"]},hunum:[{kor:"람",def:"떨릴"}]},{id:8639,hanja:"權",strokes:"22",def:{en:["power","right","authority"],kr:["권세","권"]},hunum:[{kor:"권",def:"권세"}]},{id:8640,hanja:"冩",strokes:"14",def:{en:["write","draw","sketch","compose"],kr:["베낄","사"]},hunum:[{kor:"사",def:"베낄"}]},{id:8641,hanja:"寥",strokes:"14",def:{en:["few","scarce","empty","deserted"],kr:["쓸쓸할","료"]},hunum:[{kor:"료",def:"쓸쓸할"}]},{id:8642,hanja:"羞",strokes:"11",def:{en:["disgrace","shame","ashamed","shy"],kr:["음식","수"]},hunum:[{kor:"수",def:"부끄러울"}]},{id:8643,hanja:"畤",strokes:"11",def:{en:["place for worshipping the haven"],kr:["제터","치"]},hunum:[{kor:"치",def:"제터"}]},{id:8644,hanja:"觸",strokes:"20",def:{en:["touch","butt","ram","gore"],kr:["범할","촉"]},hunum:[{kor:"촉",def:"받을"}]},{id:8645,hanja:"冪",strokes:"16",def:{en:["cover","cover with cloth"],kr:["덮을","멱"]},hunum:[{kor:"멱",def:"덮을"}]},{id:8646,hanja:"實",strokes:"14",def:{en:["real","true","solid","honest"],kr:["열매","실"]},hunum:[{kor:"실",def:"열매"}]},{id:8647,hanja:"惑",strokes:"12",def:{en:["confuse","mislead","baffle","doubt"],kr:["미혹할","혹"]},hunum:[{kor:"혹",def:"미혹할"}]},{id:8648,hanja:"塚",strokes:"13",def:{en:["cemetery","tomb"],kr:["冢의","俗字"]},hunum:[{kor:"총",def:"무덤"}]},{id:8649,hanja:"軆",strokes:"20",def:{en:["body","group","class","body","unit"],kr:["몸","체"]},hunum:[{kor:"체",def:"몸"}]},{id:8650,hanja:"餞",strokes:"17",def:{en:["farewell party","see off","send off"],kr:["보낼","전"]},hunum:[{kor:"전",def:"전별잔치"}]},{id:8651,hanja:"欌",strokes:"21",def:{en:[],kr:["장농","장"]},hunum:[{kor:"장",def:"장농"}]},{id:8652,hanja:"冫",strokes:"2",def:{en:["ice","KangXi radical"],kr:["얼음","빙"]},hunum:[{kor:"빙",def:"얼음"}]},{id:8653,hanja:"寧",strokes:"14",def:{en:["repose","serenity","peace","peaceful"],kr:["편안할","녕"]},hunum:[{kor:"녕",def:"편안할"}]},{id:8654,hanja:"略",strokes:"11",def:{en:["approximately","roughly","outline"],kr:["다스릴","략"]},hunum:[{kor:"략",def:"다스릴"}]},{id:8655,hanja:"畦",strokes:"11",def:{en:["sections in vegetable farm"],kr:["밭두둑","휴"]},hunum:[{kor:"휴",def:"밭두둑"}]},{id:8656,hanja:"寨",strokes:"14",def:{en:["stockade","stronghold","outpost","brothel"],kr:["울짱","채"]},hunum:[{kor:"채",def:"울짱"}]},{id:8657,hanja:"蒋",strokes:"15",def:{en:["surname","hydropyrum latifalium"],kr:["蔣의","略字"]},hunum:[{kor:"장",def:"성씨"}]},{id:8658,hanja:"冬",strokes:"5",def:{en:["winter","eleventh lunar month"],kr:["겨울","동"]},hunum:[{kor:"동",def:"겨울"}]},{id:8659,hanja:"羡",strokes:"12",def:{en:["envy","admire","praise","covet"]},hunum:[{kor:"선",def:"현이름"},{kor:"이",def:"고을 이름"}]},{id:8660,hanja:"晴",strokes:"12",def:{en:["clear weather"],kr:["갤","청"]},hunum:[{kor:"청",def:"갤"}]},{id:8661,hanja:"惓",strokes:"11",def:{en:["careful","sincere","candid"],kr:["삼갈","권"]},hunum:[{kor:"권",def:"삼갈"}]},{id:8662,hanja:"審",strokes:"15",def:{en:["examine","investigate","judge"],kr:["살필","심"]},hunum:[{kor:"심",def:"살필"}]},{id:8663,hanja:"餠",strokes:"17",def:{en:["rice","biscuits"],kr:["떡","병"]},hunum:[{kor:"병",def:"떡"}]},{id:8664,hanja:"畧",strokes:"11",def:{en:["approximately","roughly","outline"],kr:["略과","同字"]},hunum:[{kor:"략",def:"다스릴"}]},{id:8665,hanja:"蒍",strokes:"15",def:{en:[],kr:["蔿와","同字"]},hunum:[{kor:"위",def:"하"}]},{id:8666,hanja:"惕",strokes:"11",def:{en:["be cautious","careful","alert"],kr:["두려워할","척"]},hunum:[{kor:"척",def:"두려워할"}]},{id:8667,hanja:"車",strokes:"7",def:{en:["cart","vehicle","carry in cart"],kr:["수레","차"]},hunum:[{kor:"거",def:"수레"},{kor:"차",def:"수레"}]},{id:8668,hanja:"群",strokes:"13",def:{en:["crowd","multitude","mob"],kr:["羣"]},hunum:[{kor:"군",def:"무리"}]},{id:8669,hanja:"凞",strokes:"15",def:{en:["bright"],kr:["凞와","同字"]},hunum:[{kor:"희",def:"빛날"}]},{id:8670,hanja:"惖",strokes:"12",def:{en:["respect","fear"],kr:["존경할","척"]},hunum:[{kor:"척",def:"존경할"}]},{id:8671,hanja:"欑",strokes:"23",def:{en:["gather"],kr:["모일","찬"]},hunum:[{kor:"찬",def:"모일"}]},{id:8672,hanja:"冰",strokes:"6",def:{en:["ice","ice"],kr:["氷의","本字"]},hunum:[{kor:"빙",def:"얼음"}]},{id:8673,hanja:"寫",strokes:"15",def:{en:["write","draw","sketch","compose"],kr:["베낄","사"]},hunum:[{kor:"사",def:"베낄"}]},{id:8674,hanja:"軋",strokes:"8",def:{en:["crush by weight","grind"],kr:["수레","삐걱거릴","알"]},hunum:[{kor:"알",def:"수레 삐걱거릴"}]},{id:8675,hanja:"番",strokes:"12",def:{en:["to take turns","a turn","a time","to repeat"],kr:["갈마들","번"]},hunum:[{kor:"반",def:"갈아치울"},{kor:"번",def:"갈마들"}]},{id:8676,hanja:"畫",strokes:"12",def:{en:["delineate","painting","picture","drawing","draw"],kr:["그을","획"]},hunum:[{kor:"화",def:"그림"},{kor:"획",def:"그을"}]},{id:8677,hanja:"冱",strokes:"6",def:{en:["freezing","stopped up","closed off"],kr:["막을","호"]},hunum:[{kor:"호",def:"찰"}]},{id:8678,hanja:"猪",strokes:"11",def:{en:["pig"],kr:["豬의","俗字"]},hunum:[{kor:"저",def:"돼지"}]},{id:8679,hanja:"欒",strokes:"23",def:{en:["name of tree","a part of cornice"],kr:["나무","이름","란"]},hunum:[{kor:"란",def:"나무 이름"}]},{id:8680,hanja:"寬",strokes:"15",def:{en:["broad","wide","spacious","vast"],kr:["너그러울","관"]},hunum:[{kor:"관",def:"너그러울"}]},{id:8681,hanja:"蒐",strokes:"16",def:{en:["collect","gather","assemble","seek","spring hunt","assemble for war"],kr:["찾을","수"]},hunum:[{kor:"수",def:"꼭두서니"}]},{id:8682,hanja:"軌",strokes:"9",def:{en:["track","rut","path"],kr:["수레바퀴","사이","궤"]},hunum:[{kor:"궤",def:"수레바퀴 사이"}]},{id:8683,hanja:"寭",strokes:"15",def:{en:[],kr:["깨달을","혜"]},hunum:[{kor:"혜",def:"밝힐"}]},{id:8684,hanja:"冲",strokes:"6",def:{en:["soar","pour boiling water over"],kr:["어릴","충"]},hunum:[{kor:"충",def:"깊을"}]},{id:8685,hanja:"惘",strokes:"11",def:{en:["disconcerted","dejected","discouraged"],kr:["멍할","망"]},hunum:[{kor:"망",def:"멍할"}]},{id:8686,hanja:"益",strokes:"10",def:{en:["profit"],kr:["더할","익"]},hunum:[{kor:"익",def:"더할"}]},{id:8687,hanja:"軍",strokes:"9",def:{en:["army","military","soldiers","troops"],kr:["군사","군"]},hunum:[{kor:"군",def:"군사"}]},{id:8688,hanja:"惙",strokes:"11",def:{en:["sad","melancholy","grieving","mournful"],kr:["근심할","철"]},hunum:[{kor:"철",def:"근심할"}]},{id:8689,hanja:"餦",strokes:"17",def:{en:["candy","pastry"],kr:["산자","장"]},hunum:[{kor:"장",def:"산자"}]},{id:8690,hanja:"决",strokes:"6",def:{en:["decide","determine","judge"],kr:["決의","俗字"]},hunum:[{kor:"결",def:"결단할"}]},{id:8691,hanja:"寮",strokes:"15",def:{en:["shanty","hut","shack"],kr:["벼슬아쳐","료"]},hunum:[{kor:"료",def:"벼슬아쳐"}]},{id:8692,hanja:"嚀",strokes:"17",def:{en:["enjoin","instruct","charge"],kr:["정녕할","녕"]},hunum:[{kor:"녕",def:"정녕할"}]},{id:8693,hanja:"礼",strokes:"6",def:{en:["social custom","manners","courtesy"],kr:["禮의","略字"]},hunum:[{kor:"례",def:"예도"}]},{id:8694,hanja:"羨",strokes:"13",def:{en:["envy","admire","praise","covet"],kr:["광중길","연"]},hunum:[{kor:"선",def:"부러워할"},{kor:"연",def:"광중길"}]},{id:8695,hanja:"惚",strokes:"11",def:{en:["absent","confused"],kr:["황홀할","홀"]},hunum:[{kor:"홀",def:"황홀할"}]},{id:8696,hanja:"冴",strokes:"6",def:{en:["freezing","stopped up","closed off"],kr:["冱의","俗字"]},hunum:[{kor:"호",def:"얼"}]},{id:8697,hanja:"寯",strokes:"16",def:{en:[],kr:["모일","준"]},hunum:[{kor:"준",def:"모일"}]},{id:8698,hanja:"欕",strokes:"24",def:{en:["tree name"],kr:["엄나무","엄"]},hunum:[{kor:"엄",def:"엄나무"}]},{id:8699,hanja:"餧",strokes:"17",def:{en:["steamed bread","to feed"],kr:["먹일","위"]},hunum:[{kor:"위",def:"먹일"}]},{id:8700,hanja:"義",strokes:"13",def:{en:["right conduct","righteousness"],kr:["뜻","의"]},hunum:[{kor:"의",def:"옳을"}]},{id:8701,hanja:"况",strokes:"7",def:{en:["condition","situation","furthermore"],kr:["況의","俗字"]},hunum:[{kor:"황",def:"상황"}]},{id:8702,hanja:"寰",strokes:"16",def:{en:["great domain","country","world"],kr:["기내","환"]},hunum:[{kor:"환",def:"기내"}]},{id:8703,hanja:"惛",strokes:"11",def:{en:["confused","stupid","dull","senile"],kr:["흐릴","혼"]},hunum:[{kor:"혼",def:"흐릴"}]},{id:8704,hanja:"欖",strokes:"25",def:{en:["olive"],kr:["감람나무","람"]},hunum:[{kor:"람",def:"감람나무"}]},{id:8705,hanja:"嚂",strokes:"17",def:{en:[],kr:["먹을","람"]},hunum:[{kor:"람",def:"먹을"}]},{id:8706,hanja:"館",strokes:"17",def:{en:["public building"],kr:["객사","관"]},hunum:[{kor:"관",def:"객사"}]},{id:8707,hanja:"神",strokes:"10",def:{en:["spirit"],kr:["정신","신"]},hunum:[{kor:"신",def:"천신"}]},{id:8708,hanja:"蒔",strokes:"16",def:{en:["transplant","plant","dill","Anethum graveolens"],kr:["모종낼","시"]},hunum:[{kor:"시",def:"소회향"}]},{id:8709,hanja:"畮",strokes:"12",def:{en:[],kr:["畝의","正字"]},hunum:[{kor:"무",def:"이랑"}]},{id:8710,hanja:"嚃",strokes:"17",def:{en:["gobble"],kr:["훅","들어마실","탑"]},hunum:[{kor:"탑",def:"훅 들어마실"}]},{id:8711,hanja:"畯",strokes:"12",def:{en:["rustic","crude"],kr:["俊과","同字"]},hunum:[{kor:"준",def:"농부"}]},{id:8712,hanja:"瀁",strokes:"18",def:{en:["waves","ripples","rapids","overflow"],kr:["물결","일렁일","양"]},hunum:[{kor:"양",def:"물결 일렁일"}]},{id:8713,hanja:"惜",strokes:"11",def:{en:["pity","regret","rue","begrudge"],kr:["아낄","석"]},hunum:[{kor:"석",def:"아낄"}]},{id:8714,hanja:"冶",strokes:"7",def:{en:["smelt","fuse metals","cast","found"],kr:["대장장이","야"]},hunum:[{kor:"야",def:"단련할"}]},{id:8715,hanja:"祥",strokes:"11",def:{en:["good luck"],kr:["복","상"]},hunum:[{kor:"상",def:"복"}]},{id:8716,hanja:"羫",strokes:"14",def:{en:["the skeleton of a sheep"],kr:["밭","갈","강"]},hunum:[{kor:"강",def:"밭 갈"}]},{id:8717,hanja:"嚄",strokes:"17",def:{en:["roar"],kr:["외칠","획"]},hunum:[{kor:"획",def:"외칠"}]},{id:8718,hanja:"軒",strokes:"10",def:{en:["carriage","high","wide","balcony","surname of the Yellow Emperor"],kr:["고기","굵게","저밀","헌"]},hunum:[{kor:"헌",def:"초헌"}]},{id:8719,hanja:"冷",strokes:"7",def:{en:["cold","cool","lonely"],kr:["찰","랭"]},hunum:[{kor:"랭",def:"찰"}]},{id:8720,hanja:"餪",strokes:"18",def:{en:["feast"],kr:["풀보기","잔치","난"]},hunum:[{kor:"난",def:"풀보기 잔치"}]},{id:8721,hanja:"福",strokes:"14",def:{en:["happiness"],kr:["복","복"]},hunum:[{kor:"복",def:"복"}]},{id:8722,hanja:"異",strokes:"12",def:{en:["different","unusual","strange"],kr:["나눌","이"]},hunum:[{kor:"이",def:"다를"}]},{id:8723,hanja:"惝",strokes:"11",def:{en:["alarmed","agitated"],kr:["멍할","창"]},hunum:[{kor:"창",def:"멍할"}]},{id:8724,hanja:"靖",strokes:"13",def:{en:["pacify","appease","calm"],kr:["생각할","정"]},hunum:[{kor:"정",def:"다스릴"}]},{id:8725,hanja:"冸",strokes:"7",def:{en:[],kr:["녹을","반"]},hunum:[{kor:"반",def:"녹을"}]},{id:8726,hanja:"寳",strokes:"19",def:{en:["treasure","jewel","precious","rare"],kr:["寶의","俗字"]},hunum:[{kor:"보",def:"보배"}]},{id:8727,hanja:"嚅",strokes:"17",def:{en:["talk indistinctly and falteringly"],kr:["잔말할","유"]},hunum:[{kor:"유",def:"말 머뭇거릴"}]},{id:8728,hanja:"嚆",strokes:"17",def:{en:["give forth sound","make noise"],kr:["울릴","효"]},hunum:[{kor:"효",def:"울릴"}]},{id:8729,hanja:"餬",strokes:"18",def:{en:["porridge","gruel","congee","paste"],kr:["기식할","호"]},hunum:[{kor:"호",def:"기식할"}]},{id:8730,hanja:"精",strokes:"14",def:{en:["essence","semen","spirit"],kr:["신령","정"]},hunum:[{kor:"정",def:"정교할"}]},{id:8731,hanja:"穀",strokes:"15",def:{en:["corn","grain","cereal","lucky"],kr:["녹봉","구"]},hunum:[{kor:"곡",def:"곡식"},{kor:"구",def:"녹봉"}]},{id:8732,hanja:"冹",strokes:"7",def:{en:[],kr:["찰","불"]},hunum:[{kor:"불",def:"찰"}]},{id:8733,hanja:"瀅",strokes:"18",def:{en:["clear","pure water","lucid","glossy"],kr:["개천","형"]},hunum:[{kor:"형",def:"맑을"}]},{id:8734,hanja:"嚇",strokes:"17",def:{en:["scare","frighten","intimidate"],kr:["꾸짖을","혁"]},hunum:[{kor:"하",def:"놀라게 할"},{kor:"혁",def:"노할"}]},{id:8735,hanja:"寵",strokes:"19",def:{en:["favorite","concubine","favor"],kr:["첩","총"]},hunum:[{kor:"총",def:"사랑할"}]},{id:8736,hanja:"惟",strokes:"11",def:{en:["but","however","nevertheless","only"],kr:["생각할","유"]},hunum:[{kor:"유",def:"꾀할"}]},{id:8737,hanja:"羽",strokes:"6",def:{en:["feather"],kr:["오음의","하나","우"]},hunum:[{kor:"우",def:"깃"}]},{id:8738,hanja:"蒙",strokes:"16",def:{en:["cover","ignorant","suffer","mongolia"],kr:["입을","몽"]},hunum:[{kor:"몽",def:"입을"}]},{id:8739,hanja:"羯",strokes:"15",def:{en:["wether","castrated ram","deer skin"],kr:["땅이름","갈"]},hunum:[{kor:"갈",def:"불친 양"}]},{id:8740,hanja:"惠",strokes:"12",def:{en:["favor","benefit","confer kindness"],kr:["사랑할","혜"]},hunum:[{kor:"혜",def:"은혜"}]},{id:8741,hanja:"餮",strokes:"18",def:{en:["a legendary animal","a greedy pers"],kr:["탐할","철"]},hunum:[{kor:"철",def:"탐할"}]},{id:8742,hanja:"瀆",strokes:"18",def:{en:["ditch","sluice","gutter","drain"],kr:["도랑","독"]},hunum:[{kor:"독",def:"도랑"}]},{id:8743,hanja:"寶",strokes:"20",def:{en:["treasure","jewel","precious","rare"],kr:["보배","보"]},hunum:[{kor:"보",def:"보배"}]},{id:8744,hanja:"畵",strokes:"13",def:{en:["delineate","painting","picture","drawing","draw"],kr:["畫의","俗字"]},hunum:[{kor:"화",def:"그림"},{kor:"획",def:"그을"}]},{id:8745,hanja:"瀇",strokes:"18",def:{en:[],kr:["고인","물","썪어","냄새날","왕"]},hunum:[{kor:"왕",def:"아득할"}]},{id:8746,hanja:"惡",strokes:"12",def:{en:["evil","wicked","bad","foul"],kr:["부끄러울","오"]},hunum:[{kor:"악",def:"나쁠"},{kor:"오",def:"미워할"}]},{id:8747,hanja:"鏁",strokes:"19",variant:"鎖",def:{en:["variant of","a lock","padlock","shackles","chains"],kr:["鎖"]},hunum:[{kor:"쇄",def:"긴 창"}]},{id:8748,hanja:"羲",strokes:"16",def:{en:["ancient emperor","breath","vapor"],kr:["숨","희"]},hunum:[{kor:"희",def:"숨"}]},{id:8749,hanja:"寸",strokes:"3",def:{en:["inch","small","tiny","rad"],kr:["조금","촌"]},hunum:[{kor:"촌",def:"치"}]},{id:8750,hanja:"餰",strokes:"18",def:{en:[],kr:["된죽","전"]},hunum:[{kor:"전",def:"된죽"}]},{id:8751,hanja:"惢",strokes:"12",def:{en:[],kr:["의심낼","솨"]},hunum:[{kor:"솨",def:"의심낼"},{kor:"쇄",def:"꽃술"},{kor:"예",def:"꽃술"},{kor:"우",def:"실망하는 모양"}]},{id:8752,hanja:"欞",strokes:"28",def:{en:["the lattice of a window a sill","a lintel"],kr:["격자창","령"]},hunum:[{kor:"령",def:"격자창"}]},{id:8753,hanja:"冽",strokes:"8",def:{en:["cold and raw","pure","clear"],kr:["찰","렬"]},hunum:[{kor:"렬",def:"찰"}]},{id:8754,hanja:"嚊",strokes:"17",def:{en:["to pant","wife"],kr:["헐떡거릴","비"]},hunum:[{kor:"비",def:"헐떡거릴"}]},{id:8755,hanja:"蒜",strokes:"16",def:{en:["garlic"],kr:["달래","산"]},hunum:[{kor:"산",def:"달래"}]},{id:8756,hanja:"當",strokes:"13",def:{en:["bear","accept","undertake","just"],kr:["마땅할","당"]},hunum:[{kor:"당",def:"마땅할"}]},{id:8757,hanja:"餱",strokes:"18",def:{en:["dry goods","dry provisions"],kr:["건량","후"]},hunum:[{kor:"후",def:"건량"}]},{id:8758,hanja:"惣",strokes:"12",def:{en:["overall"],kr:["摠의","譌字"]},hunum:[{kor:"총",def:"모두"}]},{id:8759,hanja:"鏃",strokes:"19",def:{en:["arrowhead","barb","swift","quick"],kr:["화살촉","족"]},hunum:[{kor:"족",def:"화살촉"}]},{id:8760,hanja:"諸",strokes:"16",def:{en:["several"],kr:["모든","제"]},hunum:[{kor:"제",def:"모든"}]},{id:8761,hanja:"瀉",strokes:"18",def:{en:["drain off","leak","flow","pour down"],kr:["토할","사"]},hunum:[{kor:"사",def:"토할"}]},{id:8762,hanja:"对",strokes:"5",def:{en:["correct","right","facing","opposed"],kr:["對의","略字"]},hunum:[{kor:"대",def:"마주볼"}]},{id:8763,hanja:"嚌",strokes:"17",def:{en:["to sip"],kr:["맛볼","제"]},hunum:[{kor:"제",def:"맛볼"}]},{id:8764,hanja:"穅",strokes:"16",def:{en:["chaff","bran","husks of grain","from which comes","remiss"],kr:["악기이름","강"]},hunum:[{kor:"강",def:"겨"}]},{id:8765,hanja:"欠",strokes:"4",def:{en:["owe","lack","be deficient","KangXi radical number"],kr:["하품","흠"]},hunum:[{kor:"감",def:"하픔할"},{kor:"흠",def:"하품"}]},{id:8766,hanja:"寺",strokes:"6",def:{en:["court","office","temple","monastery"],kr:["내관","시"]},hunum:[{kor:"사",def:"절"},{kor:"시",def:"내관"}]},{id:8767,hanja:"蒞",strokes:"16",def:{en:["reach","arrive","manage"],kr:["莅의","俗字"]},hunum:[{kor:"리",def:"다다를"}]},{id:8768,hanja:"畸",strokes:"13",def:{en:["odd","fractional","remainder","odds"],kr:["뙈기","밭","기"]},hunum:[{kor:"기",def:"뙈기 밭"}]},{id:8769,hanja:"次",strokes:"6",def:{en:["order","sequence","next"],kr:["버금","차"]},hunum:[{kor:"차",def:"버금"}]},{id:8770,hanja:"嚍",strokes:"17",def:{en:[],kr:["화낼","진"]},hunum:[{kor:"진",def:"화낼"}]},{id:8771,hanja:"瀋",strokes:"18",def:{en:["juice","liquid","water","leak","pour"]},hunum:[{kor:"심",def:"즙 낼"}]},{id:8772,hanja:"穆",strokes:"16",def:{en:["majestic","solemn","reverent","calm"],kr:["화목할","목"]},hunum:[{kor:"목",def:"화목할"}]},{id:8773,hanja:"餳",strokes:"18",def:{en:["sugar","syrup","malt sugar","sticky"],kr:["엿","당"]},hunum:[{kor:"당",def:"엿"}]},{id:8774,hanja:"蒟",strokes:"16",def:{en:["betel pepper","Amorphaphalus konjac"],kr:["구장","구"]},hunum:[{kor:"구",def:"구장"}]},{id:8775,hanja:"嚎",strokes:"17",def:{en:["cry loudly","yell","scream"],kr:["울부짖을","호"]},hunum:[{kor:"호",def:"울부짖을"}]},{id:8776,hanja:"羶",strokes:"19",def:{en:["rank odor"],kr:["노린내날","전"]},hunum:[{kor:"전",def:"노린내날"}]},{id:8777,hanja:"逸",strokes:"12",def:{en:["flee"],kr:["달아날","일"]},hunum:[{kor:"일",def:"달아날"}]},{id:8778,hanja:"畺",strokes:"13",def:{en:["boundary","border"],kr:["疆과","同字"]},hunum:[{kor:"강",def:"지경"}]},{id:8779,hanja:"欣",strokes:"8",def:{en:["happy","joyous","delighted"],kr:["기뻐할","흔"]},hunum:[{kor:"흔",def:"기뻐할"}]},{id:8780,hanja:"嚏",strokes:"17",def:{en:["sneeze"],kr:["재채기","할","체"]},hunum:[{kor:"체",def:"재채기 할"}]},{id:8781,hanja:"都",strokes:"12",def:{en:["metropolis"],kr:["도읍","도"]},hunum:[{kor:"도",def:"도읍"}]},{id:8782,hanja:"蒡",strokes:"16",def:{en:["burdock","herb"],kr:["인동","덩굴","방"]},hunum:[{kor:"방",def:"인동 덩굴"}]},{id:8783,hanja:"穉",strokes:"17",def:{en:["young grain","young","tender"],kr:["稚와","同字"]},hunum:[{kor:"치",def:"어릴"}]},{id:8784,hanja:"惨",strokes:"11",def:{en:["sad","pitiful","wretched","cruel"]},hunum:[{kor:"참",def:"참혹할"},{kor:"침",def:"참혹할"}]},{id:8785,hanja:"対",strokes:"7",def:{en:["correct","right","facing","opposed"],kr:["對의","略字"]},hunum:[{kor:"대",def:"마주볼"}]},{id:8786,hanja:"鏇",strokes:"19",def:{en:["lathe"],kr:["갈이틀","선"]},hunum:[{kor:"선",def:"갈이틀"}]},{id:8787,hanja:"瀏",strokes:"18",def:{en:["clear","bright","whistling"],kr:["맑을","류"]},hunum:[{kor:"류",def:"맑을"}]},{id:8788,hanja:"寿",strokes:"7",def:{en:["old age","long life","lifespan"],kr:["壽의","俗字"]},hunum:[{kor:"수",def:"목숨"}]},{id:8789,hanja:"鏈",strokes:"19",def:{en:["chain","wire","cable","chain","shack"],kr:["쇠사슬","련"]},hunum:[{kor:"련",def:"쇠사슬"}]},{id:8790,hanja:"羸",strokes:"19",def:{en:["weak","lean","emaciated","exhausted"],kr:["여윌","리"]},hunum:[{kor:"리",def:"여윌"}]},{id:8791,hanja:"惪",strokes:"11",def:{en:["ethics"]},hunum:[{kor:"덕",def:"큰"}]},{id:8792,hanja:"軟",strokes:"11",def:{en:["soft","flexible","pliable","weak"],kr:["부드러울","연"]},hunum:[{kor:"연",def:"부드러울"}]},{id:8793,hanja:"羹",strokes:"19",def:{en:["soup","broth"],kr:["국","갱"]},hunum:[{kor:"갱",def:"국"}]},{id:8794,hanja:"瀑",strokes:"18",def:{en:["waterfall","cascade","heavy rain"],kr:["폭포수","폭"]},hunum:[{kor:"포",def:"소나기"},{kor:"폭",def:"폭포수"}]},{id:8795,hanja:"穌",strokes:"16",def:{en:["revive","to rise again","collect"],kr:["기뻐할","소"]},hunum:[{kor:"소",def:"깨어날"}]},{id:8796,hanja:"餹",strokes:"19",def:{en:["sugar","sugared","candy","crystallized sweetmeats"],kr:["엿","당"]},hunum:[{kor:"당",def:"엿"}]},{id:8797,hanja:"飯",strokes:"13",def:{en:["cooked rice","food","meal"],kr:["밥","반"]},hunum:[{kor:"반",def:"밥"}]},{id:8798,hanja:"鏊",strokes:"19",def:{en:["a flat","iron cooking"],kr:["번철","오"]},hunum:[{kor:"오",def:"번철"}]},{id:8799,hanja:"畿",strokes:"15",def:{en:["imperial domain","area near capita"],kr:["경기","기"]},hunum:[{kor:"기",def:"경기"}]},{id:8800,hanja:"嚔",strokes:"18",def:{en:["sneeze"],kr:["재채기","할","체"]},hunum:[{kor:"체",def:"재채기 할"}]},{id:8801,hanja:"鸇",strokes:"24",def:{en:["hawk","Butastur indicus"],kr:["구진매","전"]},hunum:[{kor:"전",def:"구진매"}]},{id:8802,hanja:"瀒",strokes:"18",def:{en:["coarse","rough","astringent"],kr:["濇의","俗字"]},hunum:[{kor:"색",def:"껄끄러울"}]},{id:8803,hanja:"積",strokes:"16",def:{en:["accumulate","store up","amass"],kr:["부피","적"]},hunum:[{kor:"자",def:"저출할"},{kor:"적",def:"포갤"}]},{id:8804,hanja:"飼",strokes:"14",def:{en:["raise animals","feed","nourish"],kr:["기를","사"]},hunum:[{kor:"사",def:"기를"}]},{id:8805,hanja:"鏋",strokes:"19",def:{en:[],kr:["금","만"]},hunum:[{kor:"만",def:"금"}]},{id:8806,hanja:"瀓",strokes:"18",def:{en:[],kr:["맑을","징"]},hunum:[{kor:"징",def:"맑을"}]},{id:8807,hanja:"転",strokes:"11",def:{en:["shift","move","turn"],kr:["轉과","同字"]},hunum:[{kor:"전",def:"구를"}]},{id:8808,hanja:"穎",strokes:"16",def:{en:["rice tassel","sharp point","clever"],kr:["빼어날","영"]},hunum:[{kor:"영",def:"이삭"}]},{id:8809,hanja:"館",strokes:"17",def:{en:["public building"],kr:["객사","관"]},hunum:[{kor:"관",def:"객사"}]},{id:8810,hanja:"鏌",strokes:"19",def:{en:["sword"],kr:["칼","이름","막"]},hunum:[{kor:"막",def:"칼 이름"}]},{id:8811,hanja:"鶴",strokes:"22",def:{en:["crane"],kr:["두루미","학"]},hunum:[{kor:"학",def:"두루미"}]},{id:8812,hanja:"蒨",strokes:"16",def:{en:["lush vegetation","luxuriant growth"],kr:["대가","우거질","천"]},hunum:[{kor:"천",def:"대가 우거질"}]},{id:8813,hanja:"穏",strokes:"16",def:{en:["calm","quiet","peace","moderation"],kr:["穩과","同字"]},hunum:[{kor:"온",def:"편안할"}]},{id:8814,hanja:"嚕",strokes:"18",def:{en:["verbose","talkative","mumbling"],kr:["아까워할","로"]},hunum:[{kor:"로",def:"아까워할"}]},{id:8815,hanja:"羽",strokes:"6",def:{en:["feather","plume","wings","rad"],kr:["오음의","하나","우"]},hunum:[{kor:"우",def:"깃"}]},{id:8816,hanja:"餼",strokes:"19",def:{en:["sacrificial victim","gift","grain"],kr:["꾸밀","희"]},hunum:[{kor:"희",def:"꾸밀"}]},{id:8817,hanja:"穐",strokes:"16",def:{en:["fall","autumn"],kr:["秋의","古字"]},hunum:[{kor:"추",def:"가을"}]},{id:8818,hanja:"瀕",strokes:"19",def:{en:["approach","be on verge of","near"],kr:["물가","빈"]},hunum:[{kor:"빈",def:"물가"}]},{id:8819,hanja:"惰",strokes:"12",def:{en:["indolent","careless","lazy","idle"],kr:["태만할","타"]},hunum:[{kor:"타",def:"게으를"}]},{id:8820,hanja:"嚗",strokes:"18",def:{en:[],kr:["지팡이","던지는","소리","박"]},hunum:[{kor:"박",def:"역정낼"}]},{id:8821,hanja:"餽",strokes:"19",def:{en:["make present of food","gift"],kr:["饋와","同字"]},hunum:[{kor:"궤",def:"보낼"}]},{id:8822,hanja:"欬",strokes:"10",def:{en:["cough","sound of laughter"],kr:["일깨울","해"]},hunum:[{kor:"해",def:"기침할"}]},{id:8823,hanja:"惱",strokes:"12",def:{en:["angered","filled with hate"],kr:["괴로워할","뇌"]},hunum:[{kor:"뇌",def:"괴로워할"}]},{id:8824,hanja:"嚘",strokes:"18",def:{en:[],kr:["탄식할","우"]},hunum:[{kor:"우",def:"말 얼버무릴"}]},{id:8825,hanja:"鏑",strokes:"19",def:{en:["dysprosium","the barb of an arrow","the head of a javelin"],kr:["화살촉","적"]},hunum:[{kor:"적",def:"화살촉"}]},{id:8826,hanja:"瀘",strokes:"19",def:{en:["river in Jiangxi province"],kr:["강","이름","로"]},hunum:[{kor:"로",def:"강 이름"}]},{id:8827,hanja:"惲",strokes:"12",def:{en:["devise","plan","deliberate","consult"],kr:["혼후할","운"]},hunum:[{kor:"운",def:"의논할"}]},{id:8828,hanja:"嚙",strokes:"18",def:{en:["bite","gnaw"],kr:["깨물","교"]},hunum:[{kor:"교",def:"깨물"}]},{id:8829,hanja:"想",strokes:"13",def:{en:["think","speculate","plan","consider"],kr:["생각할","상"]},hunum:[{kor:"상",def:"생각할"}]},{id:8830,hanja:"旀",strokes:"9",def:{en:["place name"],kr:["하며","며"]},hunum:[{kor:"며",def:"하며"}]},{id:8831,hanja:"嚚",strokes:"18",def:{en:["argumentative","talkative"],kr:["불칙하게","말할","은"]},hunum:[{kor:"은",def:"어리석을"}]},{id:8832,hanja:"軨",strokes:"12",def:{en:["lattice work on front and sides"],kr:["사냥","수레","령"]},hunum:[{kor:"령",def:"사냥 수레"}]},{id:8833,hanja:"嚛",strokes:"18",def:{en:[],kr:["매울","학"]},hunum:[{kor:"학",def:"매울"}]},{id:8834,hanja:"惴",strokes:"12",def:{en:["afraid","apprehensive","nervous"],kr:["두려워할","췌"]},hunum:[{kor:"췌",def:"두려워할"}]},{id:8835,hanja:"蒭",strokes:"16",def:{en:["to cut grass","hay","fodder"],kr:["芻와","同字"]},hunum:[{kor:"추",def:"꼴"}]},{id:8836,hanja:"旁",strokes:"10",def:{en:["side","by side","close by","near"],kr:["휘몰아갈","팽"]},hunum:[{kor:"방",def:"두루"},{kor:"팽",def:"휘몰아갈"}]},{id:8837,hanja:"瀚",strokes:"19",def:{en:["vast","wide","extensive"],kr:["넓고","큰","한"]},hunum:[{kor:"한",def:"넓고 큰"}]},{id:8838,hanja:"旂",strokes:"10",def:{en:["flag"],kr:["기","기"]},hunum:[{kor:"기",def:"기"}]},{id:8839,hanja:"嚜",strokes:"18",def:{en:["be silent","final particle"],kr:["불만스러운","모양","묵"]},hunum:[{kor:"매",def:"거짓말할"},{kor:"묵",def:"거짓"}]},{id:8840,hanja:"鸏",strokes:"25",def:{en:[],kr:["비둘기","몽"]},hunum:[{kor:"몽",def:"비둘기"}]},{id:8841,hanja:"惶",strokes:"12",def:{en:["fearful","afraid","anxious","nervous"],kr:["두려워할","황"]},hunum:[{kor:"황",def:"두려워할"}]},{id:8842,hanja:"軫",strokes:"12",def:{en:["cross board at rear of carriage"],kr:["수레","뒤턱","나무","진"]},hunum:[{kor:"진",def:"수레 뒤턱 나무"}]},{id:8843,hanja:"旃",strokes:"10",def:{en:["silk banner with bent pole"],kr:["말","그칠","전"]},hunum:[{kor:"전",def:"기"}]},{id:8844,hanja:"瀛",strokes:"19",def:{en:["sea","ocean"],kr:["신선","사는","산","영"]},hunum:[{kor:"영",def:"큰 바다"}]},{id:8845,hanja:"穗",strokes:"17",def:{en:["ear of grain","tassel","Guangzhou"],kr:["이삭","수"]},hunum:[{kor:"수",def:"이삭"}]},{id:8846,hanja:"蒯",strokes:"16",def:{en:["a rush","of which various things are made"],kr:["황모","괴"]},hunum:[{kor:"괴",def:"황모"}]},{id:8847,hanja:"惷",strokes:"13",def:{en:["wriggle","stupid","silly","fat"],kr:["어수선할","준"]},hunum:[{kor:"준",def:"어수선할"}]},{id:8848,hanja:"瀜",strokes:"19",def:{en:[],kr:["물","깊을","륭"]},hunum:[{kor:"융",def:"물 깊을"}]},{id:8849,hanja:"欲",strokes:"11",def:{en:["desire","want","long for","intend"],kr:["하고자할","욕"]},hunum:[{kor:"욕",def:"욕심낼"}]},{id:8850,hanja:"旄",strokes:"10",def:{en:["a kind of ancient flag","old"],kr:["깃대","장식","모"]},hunum:[{kor:"모",def:"깃대 장식"}]},{id:8851,hanja:"鏖",strokes:"19",def:{en:["to fight to the end","engage in a fierce battle"],kr:["구리동이","오"]},hunum:[{kor:"오",def:"무찌를"}]},{id:8852,hanja:"瀝",strokes:"19",def:{en:["trickle","drip","strain","dregs"],kr:["거를","력"]},hunum:[{kor:"력",def:"거를"}]},{id:8853,hanja:"惸",strokes:"12",def:{en:["troubled","worried","distressed"],kr:["근심할","경"]},hunum:[{kor:"경",def:"근심할"}]},{id:8854,hanja:"旅",strokes:"10",def:{en:["trip","journey","travel","traveler"],kr:["군사","려"]},hunum:[{kor:"려",def:"군사"}]},{id:8855,hanja:"鏗",strokes:"19",def:{en:["strike","beat","stroke","jingling"],kr:["사람이름","갱"]},hunum:[{kor:"갱",def:"금석 소리"}]},{id:8856,hanja:"蒲",strokes:"16",def:{en:["type of rush","vine"],kr:["개버들","포"]},hunum:[{kor:"포",def:"부들풀"}]},{id:8857,hanja:"旆",strokes:"10",def:{en:["flag ornament","flags","banners"],kr:["깃발","날릴","패"]},hunum:[{kor:"패",def:"기"}]},{id:8858,hanja:"瀞",strokes:"19",def:{en:["pool in a river"],kr:["정결할","정"]},hunum:[{kor:"정",def:"맑을"}]},{id:8859,hanja:"鏘",strokes:"19",def:{en:["tinkle","clang","jingle"],kr:["금옥","소리","장"]},hunum:[{kor:"장",def:"금옥 소리"}]},{id:8860,hanja:"惹",strokes:"13",def:{en:["irritate","vex","offend","incite"],kr:["어지러울","야"]},hunum:[{kor:"야",def:"끌릴"}]},{id:8861,hanja:"嚠",strokes:"18",def:{en:["a clear sound"],kr:["瀏와","同字"]},hunum:[{kor:"류",def:"맑을"}]},{id:8862,hanja:"瀟",strokes:"19",def:{en:["sound of beating wind and rain","light","ethereal"],kr:["강이름","소"]},hunum:[{kor:"소",def:"물 맑을"}]},{id:8863,hanja:"惺",strokes:"12",def:{en:["intelligent","clever","astute"]},hunum:[{kor:"성",def:"깨달을"}]},{id:8864,hanja:"惻",strokes:"12",def:{en:["feel anguish","feel compassion"],kr:["불쌍할","측"]},hunum:[{kor:"측",def:"슬플"}]},{id:8865,hanja:"要",strokes:"9",def:{en:["necessary","essential","necessity"],kr:["반드시","요"]},hunum:[{kor:"요",def:"구할"}]},{id:8866,hanja:"嚢",strokes:"18",def:{en:["bag","purse","sack","put in bag"]},hunum:[{kor:"낭",def:"주머니"}]},{id:8867,hanja:"鸕",strokes:"27",def:{en:["cormorant"],kr:["가마우지","로"]},hunum:[{kor:"로",def:"가마우지"}]},{id:8868,hanja:"蒴",strokes:"16",def:{en:["seed"],kr:["말오줌대","삭"]},hunum:[{kor:"삭",def:"말오줌대"}]},{id:8869,hanja:"欷",strokes:"11",def:{en:["sob","sigh"],kr:["흐느낄","희"]},hunum:[{kor:"희",def:"흐느낄"}]},{id:8870,hanja:"惼",strokes:"12",def:{en:["narrow"],kr:["편협할","편"]},hunum:[{kor:"편",def:"조급할"}]},{id:8871,hanja:"覃",strokes:"12",def:{en:["reach to","spread to","extensive"],kr:["미칠","담"]},hunum:[{kor:"담",def:"미칠"}]},{id:8872,hanja:"欸",strokes:"11",def:{en:["sighs","an exclamatory sound"],kr:["한숨쉴","애"]},hunum:[{kor:"애",def:"한숨쉴"}]},{id:8873,hanja:"旊",strokes:"10",def:{en:[],kr:["옹기장","방"]},hunum:[{kor:"방",def:"옹기장"}]},{id:8874,hanja:"鏜",strokes:"19",def:{en:["boring tool"],kr:["북방축소","당"]},hunum:[{kor:"당",def:"북방축소"}]},{id:8875,hanja:"瀣",strokes:"19",def:{en:["sea mist","vapor"],kr:["이슬","기운","해"]},hunum:[{kor:"해",def:"찬이슬"}]},{id:8876,hanja:"欹",strokes:"12",def:{en:["fierce dog","interjection of pleas"],kr:["거룩하다할","의"]},hunum:[{kor:"의",def:"아름답다할"}]},{id:8877,hanja:"旋",strokes:"11",def:{en:["revolve","move in orbit","return"],kr:["돌","선"]},hunum:[{kor:"선",def:"돌"}]},{id:8878,hanja:"嚥",strokes:"19",def:{en:["swallow","gulp"],kr:["목구멍","연"]},hunum:[{kor:"연",def:"침 삼킬"}]},{id:8879,hanja:"鏝",strokes:"19",def:{en:["trowel"],kr:["흙손","만"]},hunum:[{kor:"만",def:"흙손"}]},{id:8880,hanja:"蒸",strokes:"16",def:{en:["steam","evaporate"],kr:["찔","증"]},hunum:[{kor:"증",def:"찔"}]},{id:8881,hanja:"旌",strokes:"11",def:{en:["banner or flag adorned with feathers","to signal"],kr:["표시할","정"]},hunum:[{kor:"정",def:"장목기"}]},{id:8882,hanja:"穠",strokes:"18",def:{en:["thick","lush","in clusters"],kr:["후한","제사","농"]},hunum:[{kor:"농",def:"후한 제사"}]},{id:8883,hanja:"欺",strokes:"12",def:{en:["cheat","doublecross","deceive"],kr:["속일","기"]},hunum:[{kor:"기",def:"속일"}]},{id:8884,hanja:"嚦",strokes:"19",def:{en:["used in onomatopoetic expressions"],kr:["소리","력"]},hunum:[{kor:"력",def:"소리"}]},{id:8885,hanja:"鏞",strokes:"19",def:{en:["a large bell used as a musical instrument"],kr:["큰","쇠북","용"]},hunum:[{kor:"용",def:"큰 쇠북"}]},{id:8886,hanja:"欻",strokes:"12",def:{en:["sudden","abrupt","quick"],kr:["문득","훌"]},hunum:[{kor:"훌",def:"문득"}]},{id:8887,hanja:"覆",strokes:"18",def:{en:["cover","tip over","return","reply"],kr:["고루고루","퍼질","부"]},hunum:[{kor:"복",def:"뒤집힐"},{kor:"부",def:"덮을"}]},{id:8888,hanja:"穡",strokes:"18",def:{en:["farm","harvest grain","stingy"],kr:["거둘","색"]},hunum:[{kor:"색",def:"거둘"}]},{id:8889,hanja:"嚧",strokes:"19",def:{en:[],kr:["웃을","로"]},hunum:[{kor:"로",def:"웃을"}]},{id:8890,hanja:"鏟",strokes:"19",def:{en:["spade","shovel","trowel","scoop"],kr:["대패","산"]},hunum:[{kor:"산",def:"대패"}]},{id:8891,hanja:"鸚",strokes:"28",def:{en:["parrot"],kr:["앵무새","앵"]},hunum:[{kor:"앵",def:"앵무새"}]},{id:8892,hanja:"蒹",strokes:"16",def:{en:["reed","phragmites communis"],kr:["갈대","겸"]},hunum:[{kor:"겸",def:"갈대"}]},{id:8893,hanja:"蒺",strokes:"16",def:{en:["furze","gorse"],kr:["납가새","질"]},hunum:[{kor:"질",def:"납가새"}]},{id:8894,hanja:"瀦",strokes:"19",def:{en:["pond","a pool"],kr:["못","저"]},hunum:[{kor:"저",def:"물 괼"}]},{id:8895,hanja:"覇",strokes:"19",def:{en:["rule by might rather than right"],kr:["霸의","俗字"]},hunum:[{kor:"패",def:"으뜸"}]},{id:8896,hanja:"嚨",strokes:"19",def:{en:["throat"],kr:["목구멍","롱"]},hunum:[{kor:"롱",def:"목구멍"}]},{id:8897,hanja:"鸛",strokes:"29",def:{en:["crane","Grus japonensis","stork","Ciconia species"],kr:["황새","관"]},hunum:[{kor:"관",def:"황새"}]},{id:8898,hanja:"欽",strokes:"12",def:{en:["respect","admire","respectful"],kr:["공경할","흠"]},hunum:[{kor:"흠",def:"공경할"}]},{id:8899,hanja:"覈",strokes:"19",def:{en:["investigate","consider","examine"],kr:["액색할","핵"]},hunum:[{kor:"핵",def:"핵실할"}]},{id:8900,hanja:"族",strokes:"11",def:{en:["a family clan","ethnic group","tribe"],kr:["풍류가락","주"]},hunum:[{kor:"족",def:"겨레"},{kor:"주",def:"풍류가락"}]},{id:8901,hanja:"瀧",strokes:"19",def:{en:["raining","wet","soaked","a river in Guangdong"],kr:["비","올","룡"]},hunum:[{kor:"룡",def:"비 올"}]},{id:8902,hanja:"穢",strokes:"18",def:{en:["dirty","unclean","immoral","obscene"],kr:["거칠","예"]},hunum:[{kor:"예",def:"더러울"}]},{id:8903,hanja:"鏡",strokes:"19",def:{en:["mirror","lens","glass","glasses"],kr:["거울","경"]},hunum:[{kor:"경",def:"거울"}]},{id:8904,hanja:"鸜",strokes:"29",def:{en:["a species of mynah"],kr:["구관조","구"]},hunum:[{kor:"구",def:"구관조"}]},{id:8905,hanja:"蒻",strokes:"16",def:{en:["rushes"],kr:["구약나물","약"]},hunum:[{kor:"약",def:"구약나물"}]},{id:8906,hanja:"鏢",strokes:"19",def:{en:["dart","spear","harpoon","escort"],kr:["비수","표"]},hunum:[{kor:"표",def:"칼날"}]},{id:8907,hanja:"蒼",strokes:"16",def:{en:["blue","green"],kr:["푸를","창"]},hunum:[{kor:"창",def:"푸를"}]},{id:8908,hanja:"覉",strokes:"23",variant:"羇",def:{en:["variant of","inn","to lodge","to travel"],kr:["羇"]},hunum:[{kor:"기",def:"구속할"}]},{id:8909,hanja:"瀨",strokes:"19",def:{en:["swift current","rapids"],kr:["여울","뢰"]},hunum:[{kor:"뢰",def:"여울"}]},{id:8910,hanja:"款",strokes:"12",def:{en:["item","article","clause","fund"],kr:["정성","관"]},hunum:[{kor:"관",def:"정성"}]},{id:8911,hanja:"嚪",strokes:"19",def:{en:[],kr:["먹을","담"]},hunum:[{kor:"담",def:"먹을"}]},{id:8912,hanja:"嚫",strokes:"19",def:{en:[],kr:["베풀","친"]},hunum:[{kor:"친",def:"베풀"}]},{id:8913,hanja:"軸",strokes:"12",def:{en:["axle","axletree","pivot","axis"],kr:["얇을","축"]},hunum:[{kor:"축",def:"바디집"}]},{id:8914,hanja:"欿",strokes:"12",def:{en:["discontented","sad","gloomy"],kr:["걱정할","감"]},hunum:[{kor:"감",def:"서운할"}]},{id:8915,hanja:"鸞",strokes:"30",def:{en:["fabulous bird"],kr:["난새","란"]},hunum:[{kor:"란",def:"난새"}]},{id:8916,hanja:"軹",strokes:"12",def:{en:["end of axle","divergent"],kr:["굴대","머리","지"]},hunum:[{kor:"지",def:"굴대 머리"}]},{id:8917,hanja:"見",strokes:"7",def:{en:["see","observe","behold","perceive"],kr:["보일","현"]},hunum:[{kor:"견",def:"볼"},{kor:"현",def:"나타날"}]},{id:8918,hanja:"嚬",strokes:"19",def:{en:["frown"],kr:["찡그릴","빈"]},hunum:[{kor:"빈",def:"찡그릴"}]},{id:8919,hanja:"鏤",strokes:"19",def:{en:["carve","inlay","engrave","tattoo"],kr:["새길","루"]},hunum:[{kor:"루",def:"새길"}]},{id:8920,hanja:"蒿",strokes:"16",def:{en:["mugwort","artemisia","give off"],kr:["지칠","호"]},hunum:[{kor:"호",def:"쑥"}]},{id:8921,hanja:"軺",strokes:"12",def:{en:["small light carriage"],kr:["수레","초"]},hunum:[{kor:"초",def:"수레"}]},{id:8922,hanja:"覌",strokes:"9",def:{en:["see","observe","view","appearance"],kr:["볼","관"]},hunum:[{kor:"관",def:"볼"}]},{id:8923,hanja:"旒",strokes:"13",def:{en:["fringes of pearls on crowns"],kr:["깃발","류"]},hunum:[{kor:"류",def:"깃발"}]},{id:8924,hanja:"嚭",strokes:"19",def:{en:["mound","lump","stealthily"],kr:["클","비"]},hunum:[{kor:"비",def:"클"}]},{id:8925,hanja:"嚮",strokes:"19",def:{en:["guide","direct","incline to","favor"],kr:["받을","향"]},hunum:[{kor:"향",def:"향할"}]},{id:8926,hanja:"瀬",strokes:"19",def:{en:["swift current","rapids"],kr:["여울","뢰"]},hunum:[{kor:"뢰",def:"여울"}]},{id:8927,hanja:"軻",strokes:"12",def:{en:["axle","personal name of mencius"],kr:["수레","가기","힘들","가"]},hunum:[{kor:"가",def:"수레 가기 힘들"}]},{id:8928,hanja:"鏦",strokes:"19",def:{en:["spear"],kr:["찌를","총"]},hunum:[{kor:"총",def:"창"}]},{id:8929,hanja:"兀",strokes:"3",def:{en:["to cut off the feet"],kr:["움직이지","않을","올"]},hunum:[{kor:"올",def:"우뚝할"}]},{id:8930,hanja:"軼",strokes:"12",def:{en:["rush forth","surpass","excel"],kr:["앞지를","일"]},hunum:[{kor:"일",def:"앞지를"}]},{id:8931,hanja:"規",strokes:"11",def:{en:["rules","regulations","customs","law"],kr:["그림쇠","규"]},hunum:[{kor:"규",def:"그림쇠"}]},{id:8932,hanja:"穩",strokes:"19",def:{en:["stable","firm","solid","steady"],kr:["곡식","걷어","모을","온"]},hunum:[{kor:"온",def:"편안할"}]},{id:8933,hanja:"旕",strokes:"13",def:{en:["place name"],kr:["엇","엇"]},hunum:[{kor:"엇",def:"땅이름"}]},{id:8934,hanja:"允",strokes:"4",def:{en:["to grant","to allow","to consent"],kr:["허락할","윤"]},hunum:[{kor:"윤",def:"미쁠"}]},{id:8935,hanja:"軽",strokes:"12",def:{en:["light","easy","simple","gentle"],kr:["천할","경"]},hunum:[{kor:"경",def:"천할"}]},{id:8936,hanja:"嚱",strokes:"20",def:{en:["a shrill noise","alas"],kr:["아아","경탄하는","소리","희"]},hunum:[{kor:"희",def:"소리낼"}]},{id:8937,hanja:"鏨",strokes:"19",def:{en:["engraving tool","chisel"],kr:["끌","참"]},hunum:[{kor:"참",def:"끌"}]},{id:8938,hanja:"兂",strokes:"4",def:{en:["hairpin","clasp","wear in hair"]},hunum:[{kor:"잠",def:"비녀"}]},{id:8939,hanja:"瀯",strokes:"20",def:{en:[],kr:["물웅덩이","영"]},hunum:[{kor:"영",def:"물소리"}]},{id:8940,hanja:"軾",strokes:"13",def:{en:["horizontal wooden bar in front of a sedan chair"],kr:["수레","안에서","절할","식"]},hunum:[{kor:"식",def:"수레앞 가로막이 나무"}]},{id:8941,hanja:"穫",strokes:"19",def:{en:["harvest","cut grain"],kr:["벼","벨","확"]},hunum:[{kor:"호",def:"땅 이름"},{kor:"확",def:"벼 벨"}]},{id:8942,hanja:"嚲",strokes:"20",def:{en:["read aloud","recite","chant","droop"],kr:["휘늘어질","타"]},hunum:[{kor:"타",def:"휘늘어질"}]},{id:8943,hanja:"瀰",strokes:"20",def:{en:["overflow"],kr:["물","넓을","미"]},hunum:[{kor:"미",def:"물 넓을"}]},{id:8944,hanja:"旗",strokes:"14",def:{en:["banner","flag","streamer"],kr:["기","기"]},hunum:[{kor:"기",def:"기"}]},{id:8945,hanja:"元",strokes:"4",def:{en:["first","dollar","origin","head"],kr:["하늘","원"]},hunum:[{kor:"원",def:"으뜸"}]},{id:8946,hanja:"軿",strokes:"13",def:{en:["curtained carriage used by women"],kr:["輧의","俗字"]},hunum:[{kor:"병",def:"수레"}]},{id:8947,hanja:"兄",strokes:"5",def:{en:["elder brother"],kr:["맏이","형"]},hunum:[{kor:"형",def:"맏이"}]},{id:8948,hanja:"嚳",strokes:"20",def:{en:["mythical emperor","to inform quickly","an urgent communication"],kr:["고할","고"]},hunum:[{kor:"고",def:"고할"}]},{id:8949,hanja:"充",strokes:"5",def:{en:["fill","be full","supply"],kr:["당할","충"]},hunum:[{kor:"충",def:"가득찰"}]},{id:8950,hanja:"宁",strokes:"5",def:{en:["calm","peaceful","serene","healthy"],kr:["멈출","저"]},hunum:[{kor:"저",def:"조회 받는 곳"}]},{id:8951,hanja:"覓",strokes:"11",def:{en:["seek","search"],kr:["찾을","멱"]},hunum:[{kor:"멱",def:"찾을"}]},{id:8952,hanja:"瀲",strokes:"20",def:{en:["waves","ripples","overflow"],kr:["넘칠","렴"]},hunum:[{kor:"렴",def:"넘칠"}]},{id:8953,hanja:"嚴",strokes:"20",def:{en:["strict","rigorous","rigid","stern"],kr:["엄할","엄"]},hunum:[{kor:"엄",def:"굳셀"}]},{id:8954,hanja:"兆",strokes:"6",def:{en:["omen","million","mega","also trillion"],kr:["조짐","조"]},hunum:[{kor:"조",def:"조짐"}]},{id:8955,hanja:"宂",strokes:"5",def:{en:["scattered","mixed affairs","duties","occupation business"],kr:["떠돌아","다닐","용"]},hunum:[{kor:"용",def:"번잡할"}]},{id:8956,hanja:"兇",strokes:"6",def:{en:["atrocious","ferocious","brutal"],kr:["흉악할","흉"]},hunum:[{kor:"흉",def:"흉악할"}]},{id:8957,hanja:"甁",strokes:"13",def:{en:["jug"],kr:["병","병"]},hunum:[{kor:"병",def:"병"}]},{id:8958,hanja:"視",strokes:"11",def:{en:["look at","inspect","observe","see"],kr:["대접","시"]},hunum:[{kor:"시",def:"볼"}]},{id:8959,hanja:"穰",strokes:"22",def:{en:["stalks of grain","lush","abundant"],kr:["풍년들","양"]},hunum:[{kor:"양",def:"풍년들"}]},{id:8960,hanja:"嚶",strokes:"20",def:{en:["seek friends","also used in names","the call of a bird"],kr:["새","소리","앵"]},hunum:[{kor:"앵",def:"새 소리"}]},{id:8961,hanja:"先",strokes:"6",def:{en:["first","former","previous"],kr:["먼저","선"]},hunum:[{kor:"선",def:"먼저"}]},{id:8962,hanja:"甃",strokes:"14",def:{en:["brick wall of a well"],kr:["우물","벽돌","추"]},hunum:[{kor:"추",def:"우물 벽돌"}]},{id:8963,hanja:"覗",strokes:"12",def:{en:["peek"],kr:["엿볼","사"]},hunum:[{kor:"사",def:"엿볼"}]},{id:8964,hanja:"嚷",strokes:"20",def:{en:["shout","brawl","make uproar","cry"],kr:["떠들","양"]},hunum:[{kor:"양",def:"떠들"}]},{id:8965,hanja:"光",strokes:"6",def:{en:["light","brilliant","shine","only"],kr:["빛","광"]},hunum:[{kor:"광",def:"빛"}]},{id:8966,hanja:"宅",strokes:"6",def:{en:["residence","dwelling","home","grave"],kr:["묘","구덩이","택"]},hunum:[{kor:"댁",def:"집"},{kor:"택",def:"집"}]},{id:8967,hanja:"兊",strokes:"6",def:{en:[],kr:["兌의","俗字"]},hunum:[{kor:"태",def:"바꿀"}]},{id:8968,hanja:"覘",strokes:"12",def:{en:["peek","spy on","watch","investigate"]},hunum:[{kor:"점",def:"엿볼"}]},{id:8969,hanja:"瀷",strokes:"20",def:{en:[],kr:["강이름","익"]},hunum:[{kor:"익",def:"강이름"}]},{id:8970,hanja:"甄",strokes:"14",def:{en:["to examine","discern","to grade","a surname"],kr:["질그릇","구울","진"]},hunum:[{kor:"견",def:"질그릇"},{kor:"진",def:"질그릇 구울"}]},{id:8971,hanja:"瀸",strokes:"20",def:{en:[],kr:["적실","첨"]},hunum:[{kor:"첨",def:"적실"}]},{id:8972,hanja:"克",strokes:"7",def:{en:["gram","overcome","transliteration"],kr:["이길","극"]},hunum:[{kor:"극",def:"이길"}]},{id:8973,hanja:"宇",strokes:"6",def:{en:["house","building","structure","eaves"],kr:["하늘","우"]},hunum:[{kor:"우",def:"집"}]},{id:8974,hanja:"穴",strokes:"5",def:{en:["cave","den","hole","rad"],kr:["굿","혈"]},hunum:[{kor:"혈",def:"굴"}]},{id:8975,hanja:"覚",strokes:"12",def:{en:["to wake up from sleep","conscious"],kr:["覺의","略字"]},hunum:[{kor:"각",def:"깨달을"},{kor:"교",def:"깰"}]},{id:8976,hanja:"无",strokes:"4",def:{en:["negative","no","not","KangXi radical"],kr:["없을","무"]},hunum:[{kor:"무",def:"없을"}]},{id:8977,hanja:"兌",strokes:"7",def:{en:["cash","exchange","barter","weight"],kr:["괘","이름","태"]},hunum:[{kor:"예",def:"날카로울"},{kor:"태",def:"기쁠"}]},{id:8978,hanja:"守",strokes:"6",def:{en:["defend","protect","guard","conserve"],kr:["기다릴","수"]},hunum:[{kor:"수",def:"지킬"}]},{id:8979,hanja:"嚻",strokes:"21",def:{en:["be noisy","treat with contempt"],kr:["한가할","효"]},hunum:[{kor:"효",def:"한가할"}]},{id:8980,hanja:"穵",strokes:"6",def:{en:["deep hollow","gouge","dig out"],kr:["구멍","알"]},hunum:[{kor:"알",def:"구멍"}]},{id:8981,hanja:"免",strokes:"8",def:{en:["spare","excuse from","evade"],kr:["통건","쓸","문"]},hunum:[{kor:"면",def:"면할"},{kor:"문",def:"해산할"}]},{id:8982,hanja:"兎",strokes:"7",def:{en:["rabbit","hare"],kr:["兔의","俗字"]},hunum:[{kor:"토",def:"토키"}]},{id:8983,hanja:"究",strokes:"7",def:{en:["examine","investigate"],kr:["궁리할","구"]},hunum:[{kor:"구",def:"궁리할"}]},{id:8984,hanja:"罃",strokes:"16",def:{en:["long necked jar or bottle"],kr:["술병","앵"]},hunum:[{kor:"앵",def:"술병"}]},{id:8985,hanja:"既",strokes:"9",def:{en:["already","de facto","since","then"],kr:["旣의","訛字"]},hunum:[{kor:"기",def:"이미"}]},{id:8986,hanja:"嚼",strokes:"21",def:{en:["prattle","be glib"],kr:["씹을","작"]},hunum:[{kor:"작",def:"씹을"}]},{id:8987,hanja:"安",strokes:"6",def:{en:["peaceful","tranquil","quiet"],kr:["어찌","안"]},hunum:[{kor:"안",def:"편안할"}]},{id:8988,hanja:"飂",strokes:"20",def:{en:["wind in high places"],kr:["높이","부는","바람","료"]},hunum:[{kor:"료",def:"높이 부는 바람"}]},{id:8989,hanja:"罄",strokes:"17",def:{en:["exhaust","run out","use up","empty"],kr:["빌","경"]},hunum:[{kor:"경",def:"빌"}]},{id:8990,hanja:"旣",strokes:"11",def:{en:["already","de facto","since","then"],kr:["이미","기"]},hunum:[{kor:"기",def:"이미"}]},{id:8991,hanja:"宊",strokes:"7",def:{en:[],kr:["家와","同字"]},hunum:[{kor:"가",def:"집"}]},{id:8992,hanja:"嚾",strokes:"21",def:{en:[],kr:["지껄일","훤"]},hunum:[{kor:"환",def:"지껄일"},{kor:"훤",def:"지껄일"}]},{id:8993,hanja:"罅",strokes:"17",def:{en:["crack","fissure","split"],kr:["틈","하"]},hunum:[{kor:"하",def:"틈"}]},{id:8994,hanja:"鏶",strokes:"20",def:{en:[],kr:["판금","집"]},hunum:[{kor:"집",def:"판금"}]},{id:8995,hanja:"瀼",strokes:"20",def:{en:["river in Henan province","flowing"],kr:["강이름","양"]},hunum:[{kor:"양",def:"이슬 많은 모양"}]},{id:8996,hanja:"児",strokes:"7",def:{en:["son","child","oneself","final part"],kr:["兒의","略字"]},hunum:[{kor:"아",def:"아이"}]},{id:8997,hanja:"宋",strokes:"7",def:{en:["Song dynasty","surname"],kr:["성씨","송"]},hunum:[{kor:"송",def:"송나라"}]},{id:8998,hanja:"飄",strokes:"20",def:{en:["whirlwind","cyclone","floating"],kr:["떨어질","표"]},hunum:[{kor:"표",def:"회오리바람"}]},{id:8999,hanja:"穹",strokes:"8",def:{en:["high and vast","elevated","arched"],kr:["높을","궁"]},hunum:[{kor:"궁",def:"높을"}]},{id:9000,hanja:"日",strokes:"4",def:{en:["sun","day","daytime"],kr:["날","일"]},hunum:[{kor:"일",def:"날"}]},{id:9001,hanja:"兑",strokes:"7",def:{en:["cash","exchange"],kr:["兌와","同字"]},hunum:[{kor:"예",def:"날카로울"},{kor:"태",def:"바꿀"}]},{id:9002,hanja:"完",strokes:"7",def:{en:["complete","finish","settle","whole"],kr:["지킬","완"]},hunum:[{kor:"완",def:"완전할"}]},{id:9003,hanja:"罇",strokes:"18",def:{en:["a goblet","a bottle","a wine"],kr:["樽·尊과","同字"]},hunum:[{kor:"준",def:"술두루미"}]},{id:9004,hanja:"瀾",strokes:"20",def:{en:["overflowing","waves","ripples"],kr:["물결","란"]},hunum:[{kor:"란",def:"물결"}]},{id:9005,hanja:"空",strokes:"8",def:{en:["empty","hollow","bare","deserted"],kr:["빌","공"]},hunum:[{kor:"공",def:"빌"}]},{id:9006,hanja:"甌",strokes:"16",def:{en:["bowl","cup","small tray"],kr:["사발","구"]},hunum:[{kor:"구",def:"사발"}]},{id:9007,hanja:"旦",strokes:"5",def:{en:["dawn","morning","day"],kr:["밝을","단"]},hunum:[{kor:"단",def:"밝을"}]},{id:9008,hanja:"兒",strokes:"8",def:{en:["son","child","oneself","final part"],kr:["아이","아"]},hunum:[{kor:"아",def:"아이"}]},{id:9009,hanja:"飆",strokes:"21",def:{en:["whirlwind","stormy gale"],kr:["飇와","同字"]},hunum:[{kor:"표",def:"폭풍"}]},{id:9010,hanja:"兓",strokes:"8",def:{en:[],kr:["날카로울","침"]},hunum:[{kor:"찬",def:"도울"},{kor:"침",def:"날카로울"}]},{id:9011,hanja:"旧",strokes:"5",def:{en:["old","ancient","former","past"],kr:["舊의","略字"]},hunum:[{kor:"구",def:"옛"}]},{id:9012,hanja:"飇",strokes:"21",def:{en:["whirlwind","stormy gale"],kr:["회오리바람","표"]},hunum:[{kor:"표",def:"회오리바람"}]},{id:9013,hanja:"兔",strokes:"8",def:{en:["rabbit","hare"],kr:["토끼","토"]},hunum:[{kor:"토",def:"토끼"}]},{id:9014,hanja:"旨",strokes:"6",def:{en:["purpose","aim","excellent"],kr:["맛있을","지"]},hunum:[{kor:"지",def:"맛있을"}]},{id:9015,hanja:"覡",strokes:"14",def:{en:["wizard"],kr:["남자무당","격"]},hunum:[{kor:"격",def:"박수"}]},{id:9016,hanja:"甍",strokes:"16",def:{en:["rafters supporting roof tiles"]},hunum:[{kor:"맹",def:"용마루"}]},{id:9017,hanja:"宏",strokes:"7",def:{en:["wide","spacious","great","vast"],kr:["클","굉"]},hunum:[{kor:"굉",def:"클"}]},{id:9018,hanja:"早",strokes:"6",def:{en:["early","soon","morning"],kr:["새벽","조"]},hunum:[{kor:"조",def:"새벽"}]},{id:9019,hanja:"穽",strokes:"9",def:{en:["hole","pitfall","trap"],kr:["함정","정"]},hunum:[{kor:"정",def:"구덩이"}]},{id:9020,hanja:"甎",strokes:"16",def:{en:["brick","square tile","slab"],kr:["기와","전"]},hunum:[{kor:"전",def:"벽돌"}]},{id:9021,hanja:"兕",strokes:"8",def:{en:["a female rhinoceros"],kr:["외뿔난","소","시"]},hunum:[{kor:"시",def:"외뿔난 소"}]},{id:9022,hanja:"鏻",strokes:"20",def:{en:["phosphonium"],kr:["굳셀","린"]},hunum:[{kor:"린",def:"굳셀"}]},{id:9023,hanja:"飉",strokes:"21",def:{en:[],kr:["바람","료"]},hunum:[{kor:"료",def:"바람"}]},{id:9024,hanja:"穾",strokes:"9",def:{en:[],kr:["골방","요"]},hunum:[{kor:"요",def:"깊숙할"}]},{id:9025,hanja:"罋",strokes:"19",def:{en:["earthen jar","jar for ashes"],kr:["甕과","同字"]},hunum:[{kor:"옹",def:"항아리"}]},{id:9026,hanja:"兖",strokes:"8",def:{en:["establish","one of nine empire divisions"],kr:["兗의","俗字"]},hunum:[{kor:"연",def:"바를"}]},{id:9027,hanja:"穿",strokes:"9",def:{en:["penetrate","pierce","drill","wear"],kr:["뚫을","천"]},hunum:[{kor:"천",def:"뚫을"}]},{id:9028,hanja:"罌",strokes:"20",def:{en:["long necked jar or bottle"],kr:["술병","앵"]},hunum:[{kor:"앵",def:"술병"}]},{id:9029,hanja:"兗",strokes:"9",def:{en:["establish","one of nine empire divisions"],kr:["단정할","연"]},hunum:[{kor:"연",def:"고을이름"}]},{id:9030,hanja:"鏽",strokes:"20",def:{en:["rust","corrode"],kr:["거울에","녹슬","수"]},hunum:[{kor:"수",def:"거울에 녹슬"}]},{id:9031,hanja:"土",strokes:"3",def:{en:[],kr:["뿌리","두"]},hunum:[{kor:"두",def:"뿌리"},{kor:"토",def:"흙"}]},{id:9032,hanja:"圜",strokes:"16",def:{en:[],kr:["제단","원"]},hunum:[{kor:"원",def:"옥담"},{kor:"환",def:"두를"}]},{id:9033,hanja:"圻",strokes:"7",def:{en:[],kr:["경기","기"]},hunum:[{kor:"기",def:"경기"},{kor:"은",def:"언덕"}]},{id:9034,hanja:"亁",strokes:"12",def:{en:[],kr:["乾의","俗字"]},hunum:[{kor:"간",def:"마를"},{kor:"건",def:"마를"}]},{id:9035,hanja:"亀",strokes:"11",def:{en:[],kr:["龜의","略字"]},hunum:[{kor:"귀",def:"거북"},{kor:"균",def:"터질"}]},{id:9036,hanja:"亍",strokes:"3",def:{en:[],kr:["땅","이름","마"]},hunum:[{kor:"마",def:"땅 이름"},{kor:"촉",def:"자축거릴"}]},{id:9037,hanja:"亏",strokes:"3",def:{en:[],kr:["于의","本字"]},hunum:[{kor:"우",def:"어조사"},{kor:"휴",def:"이지러질"}]},{id:9038,hanja:"棧",strokes:"12",def:{en:[],kr:["잔교","잔"]},hunum:[{kor:"잔",def:"잔교"},{kor:"진",def:"성할"}]},{id:9039,hanja:"亘",strokes:"",def:{en:[],kr:["구할","선"]},hunum:[{kor:"선",def:"구할"},{kor:"환",def:"굳셀"}]},{id:9040,hanja:"亟",strokes:"",def:{en:[],kr:["빠를","극"]},hunum:[{kor:"극",def:"빠를"},{kor:"기",def:"자주"}]},{id:9041,hanja:"亡",strokes:"",def:{en:[],kr:["망할","망"]},hunum:[{kor:"망",def:"망할"},{kor:"무",def:"없을"}]},{id:9042,hanja:"亨",strokes:"",def:{en:[],kr:["삶을","팽"]},hunum:[{kor:"팽",def:"삶을"},{kor:"형",def:"형통할"}]},{id:9043,hanja:"亹",strokes:"",def:{en:[],kr:["땅이름","문"]},hunum:[{kor:"문",def:"땅이름"},{kor:"미",def:"힘쓸"}]},{id:9044,hanja:"棍",strokes:"",def:{en:[],kr:["몽둥이","곤"]},hunum:[{kor:"곤",def:"몽둥이"},{kor:"혼",def:"묶을"}]},{id:9045,hanja:"亾",strokes:"",def:{en:[],kr:["兦과","同字"]},hunum:[{kor:"망",def:"망할"},{kor:"무",def:"없을"}]},{id:9046,hanja:"蓋",strokes:"",def:{en:[],kr:["가리울","개"]},hunum:[{kor:"개",def:"뚜껑"},{kor:"합",def:"이엉 덮을"}]},{id:9047,hanja:"蓚",strokes:"",def:{en:[],kr:["수산","수"]},hunum:[{kor:"수",def:"수산"},{kor:"조",def:"기쁠"}]},{id:9048,hanja:"朌",strokes:"",def:{en:[],kr:["구실","반"]},hunum:[{kor:"반",def:"구실"},{kor:"분",def:"머리 클"}]},{id:9049,hanja:"會",strokes:"",def:{en:[],kr:["그림","괴"]},hunum:[{kor:"괴",def:"그림"},{kor:"회",def:"모일"}]},{id:9050,hanja:"木",strokes:"",def:{en:[],kr:["목각활자","모"]},hunum:[{kor:"모",def:"나무에 서화를 새길"},{kor:"목",def:"나무"}]},{id:9051,hanja:"逮",strokes:"",def:{en:[],kr:["미칠","체"]},hunum:[{kor:"체",def:"미칠"},{kor:"태",def:"미칠"}]},{id:9052,hanja:"髁",strokes:"",def:{en:[],kr:["넓적다리뼈","과"]},hunum:[{kor:"과",def:"넓적다리뼈"},{kor:"화",def:"넓적다리뼈"}]},{id:9053,hanja:"髀",strokes:"",def:{en:[],kr:["넓적다리","비"]},hunum:[{kor:"비",def:"넓적다리"},{kor:"폐",def:"볼기짝"}]},{id:9054,hanja:"巖",strokes:"",def:{en:[],kr:["험할","암"]},hunum:[{kor:"암",def:"바위"},{kor:"엄",def:"높을"}]},{id:9055,hanja:"差",strokes:"",def:{en:[],kr:["어긋날","차"]},hunum:[{kor:"차",def:"어긋날"},{kor:"치",def:"어긋날"}]},{id:9056,hanja:"營",strokes:"",def:{en:[],kr:["진","영"]},hunum:[{kor:"영",def:"지을"},{kor:"형",def:"별이름"}]},{id:9057,hanja:"許",strokes:"",def:{en:[],kr:["여럿이","힘쓰는","소리","허"]},hunum:[{kor:"허",def:"허락할"},{kor:"호",def:"이영차"}]},{id:9058,hanja:"閉",strokes:"",def:{en:[],kr:["막을","별"]},hunum:[{kor:"별",def:"막을"},{kor:"폐",def:"닫을"}]},{id:9059,hanja:"閒",strokes:"",def:{en:[],kr:["틈","간"]},hunum:[{kor:"간",def:"틈"},{kor:"한",def:"한가할"}]},{id:9060,hanja:"関",strokes:"",def:{en:[],kr:["쇠사슬","관"]},hunum:[{kor:"관",def:"쇠사슬"},{kor:"완",def:"당길"}]},{id:9061,hanja:"言",strokes:"",def:{en:[],kr:["우뚝할","언"]},hunum:[{kor:"언",def:"말씀"},{kor:"은",def:"심사 화평할"}]},{id:9062,hanja:"齩",strokes:"",def:{en:[],kr:["뼈","깨물","교"]}},{id:9063,hanja:"嚜",strokes:"",def:{en:[],kr:["거짓말할","매"]},hunum:[{kor:"매",def:"거짓말할"},{kor:"묵",def:"거짓"}]},{id:9064,hanja:"嚇",strokes:"",def:{en:[],kr:["놀라게","할","하"]},hunum:[{kor:"하",def:"놀라게 할"},{kor:"혁",def:"노할"}]},{id:9065,hanja:"嚾",strokes:"",def:{en:[],kr:["지껄일","환"]},hunum:[{kor:"환",def:"지껄일"},{kor:"훤",def:"지껄일"}]},{id:9066,hanja:"桶",strokes:"",def:{en:[],kr:["곡식","셈하는","단위","휘","용"]},hunum:[{kor:"용",def:"곡식 셈하는 단위 휘"},{kor:"통",def:"엿되들이 통"}]},{id:9067,hanja:"桁",strokes:"",def:{en:[],kr:["횃대","항"]},hunum:[{kor:"항",def:"수갑"},{kor:"형",def:"시렁"}]},{id:9068,hanja:"驕",strokes:"",def:{en:[],kr:["교만할","교"]},hunum:[{kor:"교",def:"교만할"},{kor:"효",def:"부리 짧은 사냥개"}]},{id:9069,hanja:"碣",strokes:"",def:{en:[],kr:["동해의","산이름","갈"]},hunum:[{kor:"갈",def:"비"},{kor:"게",def:"돌 세울"}]},{id:9070,hanja:"慘",strokes:"",def:{en:[],kr:["참혹할","참"]},hunum:[{kor:"참",def:"참혹할"},{kor:"침",def:"참혹할"}]},{id:9071,hanja:"悖",strokes:"",def:{en:[],kr:["우쩍","일어날","발"]},hunum:[{kor:"발",def:"우쩍 일어날"},{kor:"패",def:"거스를"}]},{id:9072,hanja:"悪",strokes:"",def:{en:[],kr:["惡의","略字"]},hunum:[{kor:"악",def:"나쁠"},{kor:"오",def:"미워할"}]},{id:9073,hanja:"誶",strokes:"",def:{en:[],kr:["꾸짖을","쇄"]},hunum:[{kor:"쇄",def:"꾸짖을"},{kor:"수",def:"꾸짖을"},{kor:"신",def:"물을"},{kor:"줄",def:"몰아 세울"}]},{id:9074,hanja:"誶",strokes:"",def:{en:[],kr:["꾸짖을","수"]},hunum:[{kor:"쇄",def:"꾸짖을"},{kor:"수",def:"꾸짖을"},{kor:"신",def:"물을"},{kor:"줄",def:"몰아 세울"}]},{id:9075,hanja:"誶",strokes:"",def:{en:[],kr:["물을","신"]},hunum:[{kor:"쇄",def:"꾸짖을"},{kor:"수",def:"꾸짖을"},{kor:"신",def:"물을"},{kor:"줄",def:"몰아 세울"}]},{id:9076,hanja:"調",strokes:"",def:{en:[],kr:["고를","조"]},hunum:[{kor:"조",def:"고를"},{kor:"주",def:"아침"}]},{id:9077,hanja:"锜",strokes:"",def:{en:[],kr:["세발","가마","기"]},hunum:[{kor:"기",def:"세발 가마"},{kor:"의",def:"쇠뇌 틀"}]},{id:9078,hanja:"読",strokes:"",def:{en:[],kr:["교활할","독"]},hunum:[{kor:"독",def:"교활할"},{kor:"두",def:"구절"}]},{id:9079,hanja:"說",strokes:"",def:{en:[],kr:["말씀","설"]},hunum:[{kor:"설",def:"말씀"},{kor:"세",def:"달랠"},{kor:"열",def:"기꺼울"}]},{id:9080,hanja:"說",strokes:"",def:{en:[],kr:["쉴","세"]},hunum:[{kor:"설",def:"말씀"},{kor:"세",def:"달랠"},{kor:"열",def:"기꺼울"}]},{id:9081,hanja:"跳",strokes:"",def:{en:[],kr:["뛸","도"]},hunum:[{kor:"도",def:"뛸"},{kor:"조",def:"뛸"}]},{id:9082,hanja:"嵯",strokes:"",def:{en:[],kr:["우뚝","솟을","차"]},hunum:[{kor:"차",def:"우뚝 솟을"},{kor:"치",def:"산 울뚝질뚝할"}]},{id:9083,hanja:"灑",strokes:"",def:{en:[],kr:["깜짝","놀랄","새"]},hunum:[{kor:"새",def:"뿌릴"},{kor:"쇄",def:"뿌릴"}]},{id:9084,hanja:"灼",strokes:"",def:{en:[]},hunum:[{kor:"작",def:"불사를"}]},{id:9085,hanja:"灯",strokes:"",def:{en:[],kr:["燈의","略字"]},hunum:[{kor:"등",def:"등잔"},{kor:"정",def:"등잔"}]},{id:9086,hanja:"嘠",strokes:"",def:{en:[]},hunum:[{kor:"알",def:"새소리"}]},{id:9087,hanja:"嘽",strokes:"",def:{en:[],kr:["많을","천"]},hunum:[{kor:"천",def:"많을"},{kor:"탄",def:"헐떡거릴"}]},{id:9088,hanja:"嘏",strokes:"",def:{en:[],kr:["굳을","가"]},hunum:[{kor:"가",def:"클"},{kor:"하",def:"복"}]},{id:9089,hanja:"嘔",strokes:"",def:{en:[],kr:["토할","구"]},hunum:[{kor:"구",def:"토할"},{kor:"후",def:"기쁠"}]},{id:9090,hanja:"槭",strokes:"",def:{en:[],kr:["나뭇잎","떨어져","앙상할","색"]},hunum:[{kor:"색",def:"나뭇잎 떨어져 앙상할"},{kor:"축",def:"단풍나무"}]},{id:9091,hanja:"槧",strokes:"",def:{en:[],kr:["판","참"]},hunum:[{kor:"참",def:"판"},{kor:"첨",def:"편지"}]},{id:9092,hanja:"槌",strokes:"",def:{en:[],kr:["칠","추"]},hunum:[{kor:"추",def:"칠"},{kor:"퇴",def:"몽둥이"}]},{id:9093,hanja:"槍",strokes:"",def:{en:[],kr:["혜성","쟁"]},hunum:[{kor:"쟁",def:"혜성"},{kor:"창",def:"창"}]},{id:9094,hanja:"藉",strokes:"",def:{en:[],kr:["깔개","자"]},hunum:[{kor:"자",def:"깔개"},{kor:"적",def:"어수선할"}]},{id:9095,hanja:"怜",strokes:"",def:{en:[],kr:["연리할","련"]},hunum:[{kor:"련",def:"연리할"},{kor:"령",def:"영리할"}]},{id:9096,hanja:"笪",strokes:"",def:{en:[],kr:["고리짝","단"]}},{id:9097,hanja:"鯇",strokes:"",def:{en:[],kr:["산천어","혼"]},hunum:[{kor:"혼",def:"산천어"},{kor:"환",def:"잉어"}]},{id:9098,hanja:"烋",strokes:"",def:{en:[],kr:["거들거릴","효"]},hunum:[{kor:"효",def:"거들거릴"},{kor:"휴",def:"경사로울"}]},{id:9099,hanja:"謬",strokes:"",def:{en:[],kr:["그릇될","류"]},hunum:[{kor:"류",def:"그릇될"}]},{id:9100,hanja:"銳",strokes:"",def:{en:[],kr:["까끄라기","예"]},hunum:[{kor:"예",def:"날카로울"},{kor:"태",def:"창"}]},{id:9101,hanja:"楫",strokes:"",def:{en:[],kr:["노","접"]},hunum:[{kor:"접",def:"노"},{kor:"즙",def:"노"}]},{id:9102,hanja:"喭",strokes:"",def:{en:[],kr:["추솔할","안"]},hunum:[{kor:"안",def:"추솔할"},{kor:"언",def:"조문할"}]},{id:9103,hanja:"單",strokes:"",def:{en:[],kr:["홀로","단"]},hunum:[{kor:"단",def:"홀로"},{kor:"선",def:"고을이름"}]},{id:9104,hanja:"喋",strokes:"",def:{en:[],kr:["오리와","기러기","텁석거려","먹는","소리","잡"]},hunum:[{kor:"잡",def:"오리와 기러기 텁석거려 먹는 소리"},{kor:"첩",def:"재잘거릴"}]},{id:9105,hanja:"喌",strokes:"",def:{en:[],kr:["닭","부르는","소리","주"]},hunum:[{kor:"주",def:"닭 부르는 소리"}]},{id:9106,hanja:"喁",strokes:"",def:{en:[],kr:["물고기","입","오물거릴","옹"]},hunum:[{kor:"옹",def:"물고기 입 오물거릴"},{kor:"우",def:"서로 부를"}]},{id:9107,hanja:"喇",strokes:"",def:{en:[],kr:["나팔","라"]},hunum:[{kor:"라",def:"나팔"},{kor:"랄",def:"말굽히할"}]},{id:9108,hanja:"喝",strokes:"",def:{en:[],kr:["성낸","소리","갈"]},hunum:[{kor:"갈",def:"꾸짖을"},{kor:"애",def:"목 쉴"}]},{id:9109,hanja:"喞",strokes:"",def:{en:[],kr:["두런거릴","즐"]},hunum:[{kor:"즐",def:"두런거릴"},{kor:"직",def:"찍찍거릴"}]},{id:9110,hanja:"喟",strokes:"",def:{en:[],kr:["한숨쉴","괴"]},hunum:[{kor:"괴",def:"한숨쉴"},{kor:"위",def:"한숨쉴"}]},{id:9111,hanja:"宅",strokes:"",def:{en:[],kr:["집","댁"]},hunum:[{kor:"댁",def:"집"},{kor:"택",def:"집"}]},{id:9112,hanja:"宛",strokes:"",def:{en:[],kr:["언덕","위","언덕","완"]},hunum:[{kor:"완",def:"어슴푸레할"},{kor:"원",def:"서쪽 나라이름"}]},{id:9113,hanja:"害",strokes:"",def:{en:[],kr:["손해","할"]},hunum:[{kor:"할",def:"손해"},{kor:"해",def:"해할"}]},{id:9114,hanja:"宿",strokes:"",def:{en:[],kr:["성좌","수"]},hunum:[{kor:"수",def:"떼별"},{kor:"숙",def:"잘"}]},{id:9115,hanja:"讀",strokes:"",def:{en:[],kr:["읽을","독"]},hunum:[{kor:"독",def:"읽을"},{kor:"두",def:"귀절"}]},{id:9116,hanja:"讙",strokes:"",def:{en:[],kr:["시끄러울","환"]},hunum:[{kor:"환",def:"시끄러울"},{kor:"훤",def:"시끄러울"}]},{id:9117,hanja:"属",strokes:"",def:{en:[],kr:["屬의","俗字"]},hunum:[{kor:"속",def:"무리"},{kor:"촉",def:"이을"}]},{id:9118,hanja:"居",strokes:"",def:{en:[],kr:["쌓을","거"]},hunum:[{kor:"거",def:"살"},{kor:"기",def:"어조사"}]},{id:9119,hanja:"屬",strokes:"",def:{en:[],kr:["거느릴","속"]},hunum:[{kor:"속",def:"무리"},{kor:"촉",def:"이을"}]},{id:9120,hanja:"屯",strokes:"",def:{en:[],kr:["진칠","둔"]},hunum:[{kor:"둔",def:"진칠"},{kor:"준",def:"어려울"}]},{id:9121,hanja:"屠",strokes:"",def:{en:[],kr:["잡을","도"]},hunum:[{kor:"도",def:"잡을"},{kor:"저",def:"흉노왕의 이름"}]},{id:9122,hanja:"獪",strokes:"",def:{en:[],kr:["교활할","쾌"]},hunum:[{kor:"쾌",def:"간교할"},{kor:"회",def:"교활할"}]},{id:9123,hanja:"獻",strokes:"",def:{en:[],kr:["술통","사"]},hunum:[{kor:"사",def:"술통"},{kor:"헌",def:"바칠"}]},{id:9124,hanja:"獺",strokes:"",def:{en:[],kr:["수달","달"]},hunum:[{kor:"달",def:"수달"},{kor:"찰",def:"수달"}]},{id:9125,hanja:"獲",strokes:"",def:{en:[],kr:["낙심할","확"]},hunum:[{kor:"확",def:"낙심할"},{kor:"획",def:"얻을"}]},{id:9126,hanja:"唲",strokes:"",def:{en:[],kr:["선웃음칠","아"]},hunum:[{kor:"아",def:"선웃음칠"},{kor:"애",def:"어리광 부릴"}]},{id:9127,hanja:"唶",strokes:"",def:{en:[],kr:["탄식할","차"]},hunum:[{kor:"차",def:"탄식할"},{kor:"책",def:"부르짖을"}]},{id:9128,hanja:"唸",strokes:"",def:{en:[],kr:["신음할","전"]},hunum:[{kor:"전",def:"신음할"},{kor:"점",def:"신음할"}]},{id:9129,hanja:"唈",strokes:"",def:{en:[],kr:["숨","느껴","쉴","압"]},hunum:[{kor:"압",def:"숨 느껴 쉴"},{kor:"읍",def:"숨 느껴쉴"}]},{id:9130,hanja:"唌",strokes:"",def:{en:[],kr:["참소리","단"]},hunum:[{kor:"단",def:"참소리"},{kor:"연",def:"참소할"}]},{id:9131,hanja:"絮",strokes:"",def:{en:[],kr:["솜","서"]},hunum:[{kor:"서",def:"솜"},{kor:"여",def:"성씨"}]},{id:9132,hanja:"若",strokes:"",def:{en:[],kr:["지혜","범어의","음역","야"]},hunum:[{kor:"야",def:"땅이름"},{kor:"약",def:"같을"}]},{id:9133,hanja:"愬",strokes:"",def:{en:[],kr:["놀랍고두려울","색"]},hunum:[{kor:"색",def:"놀랍고두려울"},{kor:"소",def:"고할"}]},{id:9134,hanja:"食",strokes:"",def:{en:[],kr:["밥","먹일","사"]},hunum:[{kor:"사",def:"밥 먹일"},{kor:"식",def:"밥"}]},{id:9135,hanja:"愾",strokes:"",def:{en:[],kr:["성낼","개"]},hunum:[{kor:"개",def:"한숨 쉴"},{kor:"희",def:"한숨"}]},{id:9136,hanja:"飴",strokes:"",def:{en:[],kr:["기를","시"]},hunum:[{kor:"시",def:"기를"},{kor:"이",def:"엿"}]},{id:9137,hanja:"稔",strokes:"",def:{en:[],kr:["해","염"]},hunum:[{kor:"염",def:"풍년들"},{kor:"임",def:"곡식익을"}]},{id:9138,hanja:"稅",strokes:"",def:{en:[],kr:["쉴","세"]},hunum:[{kor:"세",def:"구실"},{kor:"탈",def:"풀"}]},{id:9139,hanja:"税",strokes:"",def:{en:[],kr:["稅와","同字"]},hunum:[{kor:"세",def:"세금"},{kor:"수",def:"수의"},{kor:"열",def:"기쁠"},{kor:"탈",def:"벗을"}]},{id:9140,hanja:"稠",strokes:"",def:{en:[],kr:["빽빽할","조"]},hunum:[{kor:"조",def:"빽빽할"},{kor:"주",def:"빽빽할"}]},{id:9141,hanja:"句",strokes:"",def:{en:[],kr:["글귀절","구"]},hunum:[{kor:"구",def:"글귀절"},{kor:"귀",def:"글귀"}]},{id:9142,hanja:"可",strokes:"",def:{en:[],kr:["옳을","가"]},hunum:[{kor:"가",def:"옳을"},{kor:"극",def:"오랑캐 임금 이름"}]},{id:9143,hanja:"召",strokes:"",def:{en:[],kr:["과부","소"]},hunum:[{kor:"소",def:"부를"},{kor:"조",def:"대추"}]},{id:9144,hanja:"台",strokes:"",def:{en:[],kr:["기를","이"]},hunum:[{kor:"이",def:"자신"},{kor:"태",def:"별"}]},{id:9145,hanja:"參",strokes:"",def:{en:[],kr:["석","삼"]},hunum:[{kor:"삼",def:"석"},{kor:"참",def:"간여할"}]},{id:9146,hanja:"参",strokes:"",def:{en:[],kr:["參의","略字"]},hunum:[{kor:"삼",def:"석"},{kor:"참",def:"간여할"}]},{id:9147,hanja:"淪",strokes:"",def:{en:[],kr:["기운덩어리","론"]},hunum:[{kor:"논",def:"빠질"},{kor:"륜",def:"물놀이"}]},{id:9148,hanja:"叄",strokes:"",def:{en:[],kr:["參의","俗字"]},hunum:[{kor:"삼",def:"석"},{kor:"참",def:"간여할"}]},{id:9149,hanja:"反",strokes:"",def:{en:[],kr:["돌이킬","반"]},hunum:[{kor:"반",def:"돌이킬"},{kor:"번",def:"되돌릴"}]},{id:9150,hanja:"珢",strokes:"",def:{en:[],kr:["부르터","삐어진","흔적","있는","옥","간"]},hunum:[{kor:"간",def:"부르터 삐어진 흔적 있는 옥"},{kor:"은",def:"옥돌"}]},{id:9151,hanja:"珏",strokes:"",def:{en:[],kr:["쌍옥","각"]},hunum:[{kor:"각",def:"쌍옥"},{kor:"곡",def:"쌍옥"}]},{id:9152,hanja:"鎚",strokes:"",def:{en:[],kr:["저울","추"]},hunum:[{kor:"추",def:"쇠마치"},{kor:"퇴",def:"옥 다듬을"}]},{id:9153,hanja:"蠕",strokes:"",def:{en:[],kr:["벌레","기어갈","연"]}},{id:9154,hanja:"橙",strokes:"",def:{en:[],kr:["등자나무","등"]},hunum:[{kor:"등",def:"등자나무"},{kor:"증",def:"귤"}]},{id:9155,hanja:"荐",strokes:"",def:{en:[]},hunum:[{kor:"건",def:"천거할"},{kor:"천",def:"거듭할"}]},{id:9156,hanja:"荑",strokes:"",def:{en:[],kr:["베일","이"]},hunum:[{kor:"이",def:"흰 비름"},{kor:"제",def:"띠싹"}]},{id:9157,hanja:"作",strokes:"",def:{en:[],kr:["지을","작"]},hunum:[{kor:"작",def:"지을"},{kor:"주",def:"원망할"}]},{id:9158,hanja:"咶",strokes:"",def:{en:[],kr:["이야기할","시"]},hunum:[{kor:"시",def:"핥을"},{kor:"활",def:"핥을"}]},{id:9159,hanja:"咱",strokes:"",def:{en:[],kr:["우리","차"]},hunum:[{kor:"차",def:"우리"},{kor:"찰",def:"나"}]},{id:9160,hanja:"咽",strokes:"",def:{en:[],kr:["막힐","열"]},hunum:[{kor:"열",def:"목 멜"},{kor:"인",def:"목구멍"}]},{id:9161,hanja:"咦",strokes:"",def:{en:[],kr:["웃을","이"]},hunum:[{kor:"이",def:"크게 부를"},{kor:"재",def:"크게 부를"}]},{id:9162,hanja:"咭",strokes:"",def:{en:[],kr:["쥐","우는","소리","갈"]},hunum:[{kor:"갈",def:"쥐 우는 소리"},{kor:"길",def:"웃는 모양"}]},{id:9163,hanja:"咎",strokes:"",def:{en:[],kr:["허물","고"]},hunum:[{kor:"고",def:"허물"},{kor:"구",def:"허물"}]},{id:9164,hanja:"緝",strokes:"",def:{en:[],kr:["자을","즙"]},hunum:[{kor:"즙",def:"자을"},{kor:"집",def:"낳을"}]},{id:9165,hanja:"緞",strokes:"",def:{en:[],kr:["비단","단"]},hunum:[{kor:"단",def:"비단"},{kor:"하",def:"신발"}]},{id:9166,hanja:"緣",strokes:"",def:{en:[],kr:["단옷","단"]},hunum:[{kor:"단",def:"단옷"},{kor:"연",def:"인연"}]},{id:9167,hanja:"編",strokes:"",def:{en:[],kr:["땋을","변"]},hunum:[{kor:"변",def:"땋을"},{kor:"편",def:"책편"}]},{id:9168,hanja:"旁",strokes:"",def:{en:[],kr:["두루","방"]},hunum:[{kor:"방",def:"두루"},{kor:"팽",def:"휘몰아갈"}]},{id:9169,hanja:"媧",strokes:"",def:{en:[],kr:["사람","이름","과"]},hunum:[{kor:"과",def:"사람 이름"},{kor:"왜",def:"여자이름"}]},{id:9170,hanja:"骹",strokes:"",def:{en:[],kr:["발회목뼈","교"]}},{id:9171,hanja:"窒",strokes:"",def:{en:[],kr:["가득할","절"]},hunum:[{kor:"절",def:"막을"},{kor:"질",def:"막을"}]},{id:9172,hanja:"押",strokes:"",def:{en:[],kr:["잡아들일","갑"]},hunum:[{kor:"갑",def:"도울"},{kor:"압",def:"수결 둘"}]},{id:9173,hanja:"抵",strokes:"",def:{en:[],kr:["씨름할","저"]},hunum:[{kor:"저",def:"밀칠"},{kor:"지",def:"칠"}]},{id:9174,hanja:"折",strokes:"",def:{en:[],kr:["알맞을","절"]},hunum:[{kor:"절",def:"꺾을"},{kor:"제",def:"천천히 할"}]},{id:9175,hanja:"抜",strokes:"",def:{en:[],kr:["拔의","俗字"]},hunum:[{kor:"발",def:"뽑을"},{kor:"패",def:"무성할"}]},{id:9176,hanja:"錡",strokes:"",def:{en:[],kr:["솥","기"]},hunum:[{kor:"기",def:"솥"},{kor:"의",def:"세발 가마"}]},{id:9177,hanja:"錯",strokes:"",def:{en:[],kr:["措와","同字"]},hunum:[{kor:"조",def:"둘"},{kor:"착",def:"섞일"}]},{id:9178,hanja:"錬",strokes:"",def:{en:[],kr:["보습날","동"]},hunum:[{kor:"동",def:"보습날"},{kor:"련",def:"불릴"}]},{id:9179,hanja:"沈",strokes:"",def:{en:[],kr:["성","심"]},hunum:[{kor:"심",def:"성씨"},{kor:"침",def:"장마물"}]},{id:9180,hanja:"録",strokes:"",def:{en:[],kr:["희학질할","록"]},hunum:[{kor:"록",def:"희학질할"},{kor:"여",def:"사실할"}]},{id:9181,hanja:"沢",strokes:"",def:{en:[],kr:["澤의","略字"]},hunum:[{kor:"석",def:"못"},{kor:"택",def:"못"}]},{id:9182,hanja:"錄",strokes:"",def:{en:[],kr:["기록할","록"]},hunum:[{kor:"록",def:"기록할"},{kor:"여",def:"사실할"}]},{id:9183,hanja:"錞",strokes:"",def:{en:[],kr:["창고달","대"]},hunum:[{kor:"대",def:"창고달"},{kor:"순",def:"사발종"}]},{id:9184,hanja:"沸",strokes:"",def:{en:[],kr:["용솟음할","불"]},hunum:[{kor:"불",def:"용솟음할"},{kor:"비",def:"끓을"}]},{id:9185,hanja:"抒",strokes:"",def:{en:[],kr:["풀","서"]},hunum:[{kor:"서",def:"풀"},{kor:"저",def:"당길"}]},{id:9186,hanja:"袒",strokes:"",def:{en:[],kr:["웃옷","벗을","단"]},hunum:[{kor:"단",def:"웃옷 벗을"},{kor:"탄",def:"솔기 터질"}]},{id:9187,hanja:"印",strokes:"",def:{en:[],kr:["끝","官簿之末端書字","끝"]},hunum:[{kor:"인",def:"도장"}]},{id:9188,hanja:"區",strokes:"",def:{en:[],kr:["감출","구"]},hunum:[{kor:"구",def:"감출"},{kor:"우",def:"경계"}]},{id:9189,hanja:"单",strokes:"",def:{en:[],kr:["홀로","단"]},hunum:[{kor:"단",def:"홀로"},{kor:"선",def:"오랑캐 이름"}]},{id:9190,hanja:"卝",strokes:"",def:{en:[],kr:["丱과","同字"]},hunum:[{kor:"관",def:"쌍상투"}]},{id:9191,hanja:"卝",strokes:"",def:{en:[],kr:["丱과","同字"]},hunum:[{kor:"관",def:"쌍상투"}]},{id:9192,hanja:"単",strokes:"",def:{en:[],kr:["單의","略字"]},hunum:[{kor:"단",def:"홀로"},{kor:"선",def:"오랑캐 이름"}]},{id:9193,hanja:"牢",strokes:"",def:{en:[],kr:["우리","로"]},hunum:[{kor:"로",def:"우리"},{kor:"뢰",def:"우리"}]},{id:9194,hanja:"牌",strokes:"",def:{en:[],kr:["배지","배"]},hunum:[{kor:"배",def:"배지"},{kor:"패",def:"방 붙일"}]},{id:9195,hanja:"吿",strokes:"",def:{en:[],kr:["告와","同字"]},hunum:[{kor:"고",def:"고할"},{kor:"곡",def:"청할"}]},{id:9196,hanja:"吽",strokes:"",def:{en:[],kr:["개","짖는","소리","우"]},hunum:[{kor:"우",def:"개 싸울"},{kor:"음",def:"소 울"},{kor:"후",def:"짖을"}]},{id:9197,hanja:"吽",strokes:"",def:{en:[],kr:["소","울","음"]},hunum:[{kor:"우",def:"개 싸울"},{kor:"음",def:"소 울"},{kor:"후",def:"짖을"}]},{id:9198,hanja:"吶",strokes:"",def:{en:[],kr:["말","더듬을","눌"]},hunum:[{kor:"눌",def:"말 더듬을"},{kor:"열",def:"말 느리게 할"}]},{id:9199,hanja:"吵",strokes:"",def:{en:[],kr:["지저귈","묘"]},hunum:[{kor:"묘",def:"지저귈"},{kor:"초",def:"지저궐"}]},{id:9200,hanja:"吳",strokes:"",def:{en:[],kr:["성씨","오"]},hunum:[{kor:"오",def:"오나라"},{kor:"화",def:"큰소리칠"}]},{id:9201,hanja:"否",strokes:"",def:{en:[],kr:["아닐","부"]},hunum:[{kor:"부",def:"아닐"},{kor:"비",def:"막힐"}]},{id:9202,hanja:"吒",strokes:"",def:{en:[],kr:["咤와","同字"]},hunum:[{kor:"타",def:"꾸짖을"},{kor:"탁",def:"조롱할"}]},{id:9203,hanja:"向",strokes:"",def:{en:[],kr:["성","상"]},hunum:[{kor:"상",def:"성"},{kor:"향",def:"향할"}]},{id:9204,hanja:"合",strokes:"",def:{en:[],kr:["홉","갑"]},hunum:[{kor:"갑",def:"부를"},{kor:"합",def:"합할"}]},{id:9205,hanja:"沉",strokes:"",def:{en:[],kr:["沈과","同字"]},hunum:[{kor:"심",def:"성씨"},{kor:"침",def:"잠길"}]},{id:9206,hanja:"戾",strokes:"",def:{en:[],kr:["여그러질","려"]},hunum:[{kor:"려",def:"여그러질"},{kor:"렬",def:"어그러질"}]},{id:9207,hanja:"戱",strokes:"",def:{en:[],kr:["대장","깃발","휘"]},hunum:[{kor:"휘",def:"기"},{kor:"희",def:"희롱할"}]},{id:9208,hanja:"駿",strokes:"",def:{en:[],kr:["높을","순"]},hunum:[{kor:"순",def:"준마"},{kor:"준",def:"준마"}]},{id:9209,hanja:"駢",strokes:"",def:{en:[],kr:["騈의","俗字"]},hunum:[{kor:"변",def:"나란히 할"},{kor:"병",def:"나란히 할"}]},{id:9210,hanja:"甸",strokes:"",def:{en:[],kr:["수레","승"]},hunum:[{kor:"승",def:"다스릴"},{kor:"전",def:"경기"}]},{id:9211,hanja:"画",strokes:"",def:{en:[],kr:["畫의","略字"]},hunum:[{kor:"화",def:"그림"},{kor:"획",def:"그을"}]},{id:9212,hanja:"甄",strokes:"",def:{en:[],kr:["밝을","견"]},hunum:[{kor:"견",def:"질그릇"},{kor:"진",def:"질그릇 구울"}]},{id:9213,hanja:"勩",strokes:"",def:{en:[],kr:["수고로울","예"]},hunum:[{kor:"예",def:"수고로울"},{kor:"이",def:"수고로울"}]},{id:9214,hanja:"勨",strokes:"",def:{en:[],kr:["움직일","상"]},hunum:[{kor:"상",def:"느즈러질"},{kor:"양",def:"느즈러질"}]},{id:9215,hanja:"勿",strokes:"",def:{en:[],kr:["없을","몰"]},hunum:[{kor:"몰",def:"없을"},{kor:"물",def:"말"}]},{id:9216,hanja:"勾",strokes:"",def:{en:[],kr:["글귀절","구"]},hunum:[{kor:"구",def:"글귀절"},{kor:"귀",def:"글귀"}]},{id:9217,hanja:"勻",strokes:"",def:{en:[],kr:["고를","균"]},hunum:[{kor:"균",def:"고를"},{kor:"윤",def:"가지런할"}]},{id:9218,hanja:"勑",strokes:"",def:{en:[],kr:["위로할","래"]},hunum:[{kor:"래",def:"위로할"},{kor:"칙",def:"바를"}]},{id:9219,hanja:"狙",strokes:"",def:{en:[],kr:["살필","저"]},hunum:[{kor:"저",def:"원숭이"},{kor:"처",def:"원숭이"}]},{id:9220,hanja:"狀",strokes:"",def:{en:[],kr:["형상","상"]},hunum:[{kor:"상",def:"형상"},{kor:"장",def:"모양 형상"}]},{id:9221,hanja:"邪",strokes:"",def:{en:[],kr:["간사할","사"]},hunum:[{kor:"사",def:"간사할"},{kor:"야",def:"의문의 어조사"}]},{id:9222,hanja:"邯",strokes:"",def:{en:[],kr:["고을","이름","한"]},hunum:[{kor:"한",def:"고을 이름"},{kor:"함",def:"고을 이름"}]},{id:9223,hanja:"氏",strokes:"",def:{en:[],kr:["성","씨"]},hunum:[{kor:"씨",def:"성"},{kor:"지",def:"나라이름"}]},{id:9224,hanja:"還",strokes:"",def:{en:[],kr:["돌","선"]},hunum:[{kor:"선",def:"돌"},{kor:"환",def:"돌아올"}]},{id:9225,hanja:"複",strokes:"",def:{en:[],kr:["겹옷","복"]},hunum:[{kor:"복",def:"겹옷"},{kor:"부",def:"겹칠"}]},{id:9226,hanja:"褶",strokes:"",def:{en:[],kr:["슬갑","습"]},hunum:[{kor:"습",def:"슬갑"},{kor:"첩",def:"덧옷"}]},{id:9227,hanja:"麇",strokes:"",def:{en:[],kr:["무리","군"]},hunum:[{kor:"군",def:"무리"},{kor:"균",def:"노루"}]},{id:9228,hanja:"歸",strokes:"",def:{en:[],kr:["먹일","궤"]},hunum:[{kor:"궤",def:"먹일"},{kor:"귀",def:"돌아올"}]},{id:9229,hanja:"歹",strokes:"",def:{en:[],kr:["거스릴","대"]},hunum:[{kor:"대",def:"거스릴"},{kor:"알",def:"뼈 앙상할"}]},{id:9230,hanja:"糖",strokes:"",def:{en:[],kr:["엿","당"]},hunum:[{kor:"당",def:"엿"}]},{id:9231,hanja:"糾",strokes:"",def:{en:[],kr:["맺힐","교"]},hunum:[{kor:"교",def:"맺힐"},{kor:"규",def:"삼합노"}]},{id:9232,hanja:"妃",strokes:"",def:{en:[],kr:["짝","配","배"]},hunum:[{kor:"비",def:"왕비"}]},{id:9233,hanja:"疋",strokes:"",def:{en:[],kr:["밭","소"]},hunum:[{kor:"소",def:"밭"},{kor:"필",def:"짝"}]},{id:9234,hanja:"疑",strokes:"",def:{en:[],kr:["정할","응"]},hunum:[{kor:"응",def:"정할"},{kor:"의",def:"의심할"}]},{id:9235,hanja:"掲",strokes:"",def:{en:[],kr:["揭과","同字"]},hunum:[{kor:"갈",def:"질"},{kor:"게",def:"높이 들"}]},{id:9236,hanja:"控",strokes:"",def:{en:[],kr:["칠","강"]},hunum:[{kor:"강",def:"칠"},{kor:"공",def:"당길"}]},{id:9237,hanja:"掠",strokes:"",def:{en:[],kr:["노략질할","략"]},hunum:[{kor:"략",def:"노략질할"},{kor:"량",def:"볼기칠"}]},{id:9238,hanja:"措",strokes:"",def:{en:[],kr:["둘","조"]},hunum:[{kor:"조",def:"둘"},{kor:"책",def:"둘"}]},{id:9239,hanja:"推",strokes:"",def:{en:[],kr:["궁구할","추"]},hunum:[{kor:"추",def:"옮길"},{kor:"퇴",def:"밀"}]},{id:9240,hanja:"掘",strokes:"",def:{en:[],kr:["팔","굴"]},hunum:[{kor:"굴",def:"팔"},{kor:"궐",def:"뚫을"}]},{id:9241,hanja:"蹶",strokes:"",def:{en:[],kr:["우물벌레","궐"]},hunum:[{kor:"궐",def:"우물벌레"},{kor:"궤",def:"급히걸을"}]},{id:9242,hanja:"涅",strokes:"",def:{en:[],kr:["앙금","흙","날"]},hunum:[{kor:"날",def:"앙금 흙"},{kor:"녈",def:"죽을"}]},{id:9243,hanja:"涯",strokes:"",def:{en:[],kr:["물가","애"]},hunum:[{kor:"애",def:"물가"},{kor:"의",def:"물가 언덕"}]},{id:9244,hanja:"逐",strokes:"",def:{en:[],kr:["달리는","모양","적"]},hunum:[{kor:"적",def:"달리는 모양"},{kor:"축",def:"쫓을"}]},{id:9245,hanja:"這",strokes:"",def:{en:[],kr:["맞이할","언"]},hunum:[{kor:"언",def:"맞이할"},{kor:"저",def:"맞을"}]},{id:9246,hanja:"涸",strokes:"",def:{en:[],kr:["마를","학"]},hunum:[{kor:"학",def:"마를"},{kor:"후",def:"물 마를"}]},{id:9247,hanja:"覚",strokes:"",def:{en:[],kr:["覺의","略字"]},hunum:[{kor:"각",def:"깨달을"},{kor:"교",def:"깰"}]},{id:9248,hanja:"見",strokes:"",def:{en:[],kr:["당할","견"]},hunum:[{kor:"견",def:"볼"},{kor:"현",def:"나타날"}]},{id:9249,hanja:"覇",strokes:"",def:{en:[],kr:["霸의","俗字"]},hunum:[{kor:"패",def:"으뜸"}]},{id:9250,hanja:"覆",strokes:"",def:{en:[],kr:["뒤집힐","복"]},hunum:[{kor:"복",def:"뒤집힐"},{kor:"부",def:"덮을"}]},{id:9251,hanja:"覺",strokes:"",def:{en:[],kr:["깨달을","각"]},hunum:[{kor:"각",def:"깨달을"},{kor:"교",def:"꿈 깰"}]},{id:9252,hanja:"剸",strokes:"",def:{en:[],kr:["끊을","단"]},hunum:[{kor:"단",def:"끊을"},{kor:"전",def:"오로지"}]},{id:9253,hanja:"剠",strokes:"",def:{en:[],kr:["鯨과","同字"]},hunum:[{kor:"경",def:"자자할"},{kor:"략",def:"노략질할"},{kor:"량",def:"노략질할"}]},{id:9254,hanja:"剠",strokes:"",def:{en:[],kr:["鯨과","同字"]},hunum:[{kor:"경",def:"자자할"},{kor:"략",def:"노략질할"},{kor:"량",def:"노략질할"}]},{id:9255,hanja:"剭",strokes:"",def:{en:[],kr:["형벌할","악"]},hunum:[{kor:"악",def:"형벌할"},{kor:"옥",def:"목 벨"}]},{id:9256,hanja:"副",strokes:"",def:{en:[],kr:["버금","복"]},hunum:[{kor:"복",def:"버금"},{kor:"부",def:"버금"}]},{id:9257,hanja:"剒",strokes:"",def:{en:[],kr:["건목칠","작"]},hunum:[{kor:"작",def:"건목칠"},{kor:"착",def:"벨"}]},{id:9258,hanja:"則",strokes:"",def:{en:[],kr:["때","측"]},hunum:[{kor:"측",def:"법칙"},{kor:"칙",def:"법칙"}]},{id:9259,hanja:"罷",strokes:"",def:{en:[],kr:["내칠","파"]},hunum:[{kor:"파",def:"파할"},{kor:"피",def:"느른할"}]},{id:9260,hanja:"能",strokes:"",def:{en:[],kr:["세","발","자라","내"]},hunum:[{kor:"내",def:"세 발 자라"},{kor:"능",def:"능할"}]},{id:9261,hanja:"胯",strokes:"",def:{en:[],kr:["사타구니","고"]},hunum:[{kor:"고",def:"사타구니"},{kor:"과",def:"사타구니"}]},{id:9262,hanja:"背",strokes:"",def:{en:[],kr:["등","배"]},hunum:[{kor:"배",def:"등"},{kor:"패",def:"버릴"}]},{id:9263,hanja:"難",strokes:"",def:{en:[],kr:["탈","나"]},hunum:[{kor:"나",def:"성할"},{kor:"난",def:"어려울"}]},{id:9264,hanja:"零",strokes:"",def:{en:[],kr:["조용히","오는","비","련"]},hunum:[{kor:"련",def:"조용히 오는 비"},{kor:"령",def:"조용히 오는 비"}]},{id:9265,hanja:"雇",strokes:"",def:{en:[],kr:["새이름","고"]},hunum:[{kor:"고",def:"새이름"},{kor:"호",def:"새 이름"}]},{id:9266,hanja:"挑",strokes:"",def:{en:[],kr:["돋을","도"]},hunum:[{kor:"도",def:"돋을"},{kor:"조",def:"돋울"}]},{id:9267,hanja:"挐",strokes:"",def:{en:[],kr:["붙잡을","나"]},hunum:[{kor:"나",def:"붙잡을"},{kor:"녀",def:"이끌"}]},{id:9268,hanja:"按",strokes:"",def:{en:[],kr:["어루만질","안"]},hunum:[{kor:"안",def:"살필"},{kor:"알",def:"막을"}]},{id:9269,hanja:"車",strokes:"",def:{en:[],kr:["잇몸","거"]},hunum:[{kor:"거",def:"수레"},{kor:"차",def:"수레"}]},{id:9270,hanja:"頒",strokes:"",def:{en:[],kr:["나눌","반"]},hunum:[{kor:"반",def:"나눌"},{kor:"분",def:"큰 머리"}]},{id:9271,hanja:"大",strokes:"",def:{en:[],kr:["큰","대"]},hunum:[{kor:"대",def:"클"},{kor:"태",def:"클"}]},{id:9272,hanja:"夥",strokes:"",def:{en:[],kr:["많을","과"]},hunum:[{kor:"과",def:"많을"},{kor:"해",def:"많을"}]},{id:9273,hanja:"夭",strokes:"",def:{en:[],kr:["어릴","오"]},hunum:[{kor:"오",def:"끊어 죽일"},{kor:"요",def:"어여쁠"}]},{id:9274,hanja:"夕",strokes:"",def:{en:[],kr:["한","움큼","사"]},hunum:[{kor:"사",def:"한 움큼"},{kor:"석",def:"저녁"}]},{id:9275,hanja:"出",strokes:"",def:{en:[],kr:["내보낼","추"]},hunum:[{kor:"출",def:"날"}]},{id:9276,hanja:"凸",strokes:"",def:{en:[],kr:["도도록할","돌"]},hunum:[{kor:"돌",def:"뾰족할"},{kor:"철",def:"볼록할"}]},{id:9277,hanja:"頡",strokes:"",def:{en:[],kr:["밟을","갈"]},hunum:[{kor:"갈",def:"긁을"},{kor:"힐",def:"곧은목"}]},{id:9278,hanja:"醵",strokes:"",def:{en:[],kr:["추렴","걷을","갹"]},hunum:[{kor:"갹",def:"술추렴"},{kor:"거",def:"술추렴"}]},{id:9279,hanja:"洞",strokes:"",def:{en:[],kr:["마을","동"]},hunum:[{kor:"동",def:"마을"},{kor:"통",def:"구렁"}]},{id:9280,hanja:"洵",strokes:"",def:{en:[],kr:["믿을","순"]},hunum:[{kor:"순",def:"웅덩이물"},{kor:"현",def:"멀"}]},{id:9281,hanja:"活",strokes:"",def:{en:[],kr:["물","소리","괄"]},hunum:[{kor:"괄",def:"물 소리"},{kor:"활",def:"살"}]},{id:9282,hanja:"洩",strokes:"",def:{en:[],kr:["샐","설"]},hunum:[{kor:"설",def:"샐"},{kor:"예",def:"퍼질"}]},{id:9283,hanja:"蘆",strokes:"",def:{en:[],kr:["갈대","로"]},hunum:[{kor:"로",def:"갈대"},{kor:"여",def:"꼭두서니"}]},{id:9284,hanja:"龍",strokes:"",def:{en:[],kr:["언덕","롱"]},hunum:[{kor:"롱",def:"언덕"},{kor:"룡",def:"용"},{kor:"방",def:"잿빛"}]},{id:9285,hanja:"龍",strokes:"",def:{en:[],kr:["용","룡"]},hunum:[{kor:"롱",def:"언덕"},{kor:"룡",def:"용"},{kor:"방",def:"잿빛"}]},{id:9286,hanja:"龎",strokes:"",def:{en:[],kr:["충실할","롱","龐의","俗字"]}},{id:9287,hanja:"龜",strokes:"",def:{en:[],kr:["나라","이름","구"]},hunum:[{kor:"구",def:"나라 이름"},{kor:"귀",def:"거북"},{kor:"균",def:"(피부가)틀"}]},{id:9288,hanja:"龜",strokes:"",def:{en:[],kr:["거북","귀"]},hunum:[{kor:"구",def:"나라 이름"},{kor:"귀",def:"거북"},{kor:"균",def:"(피부가)틀"}]},{id:9289,hanja:"龐",strokes:"",def:{en:[],kr:["통통하게","살질","롱"]},hunum:[{kor:"농",def:"통통하게 살질"},{kor:"방",def:"어지러울"}]},{id:9290,hanja:"摂",strokes:"",def:{en:[],kr:["懾과","同字"]},hunum:[{kor:"섭",def:"다스릴"},{kor:"엽",def:"편안할"}]},{id:9291,hanja:"零",strokes:"",def:{en:[],kr:["조용히","오는","비","련"]},hunum:[{kor:"련",def:"조용히 오는 비"},{kor:"영",def:"부서질"}]},{id:9292,hanja:"翟",strokes:"",def:{en:[],kr:["황후의","옷","적"]},hunum:[{kor:"적",def:"꿩의 깃"},{kor:"책",def:"꿩"}]},{id:9293,hanja:"墺",strokes:"",def:{en:[],kr:["물가","언덕","오"]},hunum:[{kor:"오",def:"방 구들"},{kor:"옥",def:"방 구들"}]},{id:9294,hanja:"陶",strokes:"",def:{en:[],kr:["질","그도","도"]},hunum:[{kor:"도",def:"질 그도"},{kor:"요",def:"화락할"}]},{id:9295,hanja:"降",strokes:"",def:{en:[],kr:["돌아갈","강"]},hunum:[{kor:"강",def:"내릴"},{kor:"항",def:"항복할"}]},{id:9296,hanja:"陜",strokes:"",def:{en:[],kr:["땅이름","합"]},hunum:[{kor:"합",def:"땅이름"},{kor:"협",def:"좁을"}]},{id:9297,hanja:"準",strokes:"",def:{en:[],kr:["코마루","절"]},hunum:[{kor:"절",def:"코마루"},{kor:"준",def:"수준기"}]},{id:9298,hanja:"溺",strokes:"",def:{en:[],kr:["우줌눌","뇨"]},hunum:[{kor:"뇨",def:"우줌눌"},{kor:"닉",def:"빠질"}]},{id:9299,hanja:"溯",strokes:"",def:{en:[],kr:["빨래한","물","삭"]},hunum:[{kor:"삭",def:"물이름"},{kor:"소",def:"거슬러 올라갈"}]},{id:9300,hanja:"溥",strokes:"",def:{en:[],kr:["빽빽할","박"]},hunum:[{kor:"박",def:"빽빽할"},{kor:"부",def:"펼"}]},{id:9301,hanja:"蚕",strokes:"",def:{en:[],kr:["누에","잠"]},hunum:[{kor:"잠",def:"누에"},{kor:"천",def:"지렁이"}]},{id:9302,hanja:"內",strokes:"",def:{en:[],kr:["들일","납"]},hunum:[{kor:"납",def:"들일"},{kor:"내",def:"안"}]},{id:9303,hanja:"兦",strokes:"",def:{en:[],kr:["亡의","本字"]},hunum:[{kor:"망",def:"없을"},{kor:"무",def:"없을"}]},{id:9304,hanja:"兑",strokes:"",def:{en:[],kr:["兌와","同字"]},hunum:[{kor:"예",def:"날카로울"},{kor:"태",def:"바꿀"}]},{id:9305,hanja:"兓",strokes:"",def:{en:[],kr:["기릴","찬"]},hunum:[{kor:"찬",def:"도울"},{kor:"침",def:"날카로울"}]},{id:9306,hanja:"免",strokes:"",def:{en:[],kr:["면할","면"]},hunum:[{kor:"면",def:"면할"},{kor:"문",def:"해산할"}]},{id:9307,hanja:"兌",strokes:"",def:{en:[],kr:["날카로울","예"]},hunum:[{kor:"예",def:"날카로울"},{kor:"태",def:"기쁠"}]},{id:9308,hanja:"繆",strokes:"",def:{en:[],kr:["삼","무"]},hunum:[{kor:"무",def:"묶을"},{kor:"유",def:"어그러질"}]},{id:9309,hanja:"繁",strokes:"",def:{en:[],kr:["뱃대끈","반"]},hunum:[{kor:"반",def:"뱃대끈"},{kor:"번",def:"많을"}]},{id:9310,hanja:"戯",strokes:"",def:{en:[],kr:["戱의","俗字"]},hunum:[{kor:"휘",def:"기"},{kor:"희",def:"희롱할"}]},{id:9311,hanja:"族",strokes:"",def:{en:[],kr:["겨레","족"]},hunum:[{kor:"족",def:"겨레"},{kor:"주",def:"풍류가락"}]},{id:9312,hanja:"迂",strokes:"",def:{en:[],kr:["피할","오"]},hunum:[{kor:"오",def:"굽을"},{kor:"우",def:"굽을"}]},{id:9313,hanja:"追",strokes:"",def:{en:[],kr:["따를","추"]},hunum:[{kor:"추",def:"쫓을"},{kor:"퇴",def:"옥 다듬을"}]},{id:9314,hanja:"迤",strokes:"",def:{en:[],kr:["든든할","이"]},hunum:[{kor:"이",def:"든든할"},{kor:"타",def:"어정거릴"}]},{id:9315,hanja:"報",strokes:"",def:{en:[],kr:["갚을","보"]},hunum:[{kor:"보",def:"갚을"},{kor:"부",def:"나아갈"}]},{id:9316,hanja:"堕",strokes:"",def:{en:[],kr:["墮와","同字"]},hunum:[{kor:"타",def:"떨어질"},{kor:"휴",def:"무너뜨릴"}]},{id:9317,hanja:"眩",strokes:"",def:{en:[],kr:["현혹할","현"]},hunum:[{kor:"현",def:"아찔할"},{kor:"환",def:"요술"}]},{id:9318,hanja:"省",strokes:"",def:{en:[],kr:["덜","생"]},hunum:[{kor:"생",def:"덜"},{kor:"성",def:"살필"}]},{id:9319,hanja:"僎",strokes:"",def:{en:[],kr:["갖출","선"]},hunum:[{kor:"선",def:"갖출"},{kor:"준",def:"향음 주인 돕는 사람"}]},{id:9320,hanja:"僻",strokes:"",def:{en:[],kr:["후미질","벽"]},hunum:[{kor:"벽",def:"후미질"},{kor:"피",def:"피할"}]},{id:9321,hanja:"説",strokes:"",def:{en:[],kr:["説의","略字"]},hunum:[{kor:"설",def:"말씀"},{kor:"세",def:"달랠"},{kor:"열",def:"기뻐할"}]},{id:9322,hanja:"説",strokes:"",def:{en:[],kr:["說와","同字"]},hunum:[{kor:"설",def:"말씀"},{kor:"세",def:"달랠"},{kor:"열",def:"기뻐할"}]},{id:9323,hanja:"渇",strokes:"",def:{en:[],kr:["渴과","同字"]},hunum:[{kor:"갈",def:"목마를"},{kor:"걸",def:"목마를"}]},{id:9324,hanja:"渴",strokes:"",def:{en:[],kr:["급할","갈"]},hunum:[{kor:"갈",def:"목마를"},{kor:"걸",def:"물 잦을"}]},{id:9325,hanja:"渫",strokes:"",def:{en:[],kr:["칠","설"]},hunum:[{kor:"설",def:"칠"},{kor:"접",def:"물결 출렁출렁할"}]},{id:9326,hanja:"敲",strokes:"",def:{en:[],kr:["두드릴","고"]},hunum:[{kor:"고",def:"두드릴"},{kor:"교",def:"두드릴"}]},{id:9327,hanja:"数",strokes:"",def:{en:[],kr:["數의","略字"]},hunum:[{kor:"수",def:"셈"},{kor:"촉",def:"빽빽할"}]},{id:9328,hanja:"數",strokes:"",def:{en:[],kr:["자주","삭"]},hunum:[{kor:"삭",def:"자주"},{kor:"수",def:"헤아릴"}]},{id:9329,hanja:"敦",strokes:"",def:{en:[],kr:["도타울","돈"]},hunum:[{kor:"돈",def:"도타울"},{kor:"퇴",def:"쪼을"}]},{id:9330,hanja:"徴",strokes:"",def:{en:[],kr:["부를","징"]},hunum:[{kor:"징",def:"부를"},{kor:"치",def:"徵의 略"}]},{id:9331,hanja:"徵",strokes:"",def:{en:[],kr:["부를","징"]},hunum:[{kor:"징",def:"부를"},{kor:"치",def:"치성"}]},{id:9332,hanja:"御",strokes:"",def:{en:[],kr:["맞을","아"]},hunum:[{kor:"아",def:"맞을"},{kor:"어",def:"거느릴"}]},{id:9333,hanja:"復",strokes:"",def:{en:[],kr:["돌아올","복"]},hunum:[{kor:"복",def:"돌아올"},{kor:"부",def:"다시"}]},{id:9334,hanja:"瞑",strokes:"",def:{en:[],kr:["눈","감을","면"]},hunum:[{kor:"면",def:"눈 감을"},{kor:"명",def:"눈 감을"}]},{id:9335,hanja:"革",strokes:"",def:{en:[],kr:["위독해질","극"]},hunum:[{kor:"극",def:"위독해질"},{kor:"혁",def:"가죽"}]},{id:9336,hanja:"瞠",strokes:"",def:{en:[],kr:["바로볼","당"]},hunum:[{kor:"당",def:"바로볼"},{kor:"쟁",def:"똑바로 볼"}]},{id:9337,hanja:"豈",strokes:"",def:{en:[],kr:["승전악","개"]},hunum:[{kor:"개",def:"승전악"},{kor:"기",def:"어찌"}]},{id:9338,hanja:"豊",strokes:"",def:{en:[],kr:["禮의","古字"]},hunum:[{kor:"례",def:"예도"},{kor:"풍",def:"풍년"}]},{id:9339,hanja:"豣",strokes:"",def:{en:[],kr:["세","살","된","돼지","견"]},hunum:[{kor:"견",def:"큰 돼지"},{kor:"연",def:"노루"}]},{id:9340,hanja:"澤",strokes:"",def:{en:[],kr:["풀","석"]},hunum:[{kor:"석",def:"풀"},{kor:"택",def:"못"}]},{id:9341,hanja:"澳",strokes:"",def:{en:[],kr:["물","이름","오"]},hunum:[{kor:"오",def:"깊을"},{kor:"욱",def:"후미"}]},{id:9342,hanja:"螺",strokes:"",def:{en:[],kr:["소라","라"]},hunum:[{kor:"라",def:"소라"}]},{id:9343,hanja:"偈",strokes:"",def:{en:[],kr:["헌걸찰","걸"]},hunum:[{kor:"걸",def:"힘 빼두를"},{kor:"게",def:"쉴"}]},{id:9344,hanja:"佳",strokes:"",def:{en:[],kr:["아름다울","가"]},hunum:[{kor:"가",def:"아름다울"},{kor:"개",def:"착할"}]},{id:9345,hanja:"偄",strokes:"",def:{en:[],kr:["언약할","난"]},hunum:[{kor:"난",def:"언약할"},{kor:"연",def:"연약할"}]},{id:9346,hanja:"假",strokes:"",def:{en:[],kr:["거짓","가"]},hunum:[{kor:"가",def:"거짓"},{kor:"하",def:"거짓"}]},{id:9347,hanja:"使",strokes:"",def:{en:[],kr:["하여금","사"]},hunum:[{kor:"사",def:"하여금"},{kor:"시",def:"보낼"}]},{id:9348,hanja:"做",strokes:"",def:{en:[],kr:["지을","자"]},hunum:[{kor:"자",def:"지을"},{kor:"주",def:"지을"}]},{id:9349,hanja:"偕",strokes:"",def:{en:[],kr:["굳셀","해"]},hunum:[{kor:"해",def:"함께할"},{kor:"혜",def:"같을"}]},{id:9350,hanja:"体",strokes:"",def:{en:[],kr:["용렬할","분"]},hunum:[{kor:"분",def:"용렬할"},{kor:"체",def:"몸"}]},{id:9351,hanja:"佚",strokes:"",def:{en:[],kr:["편안할","일"]},hunum:[{kor:"일",def:"편안할"},{kor:"질",def:"흐릴"}]},{id:9352,hanja:"佛",strokes:"",def:{en:[],kr:["부처","불"]},hunum:[{kor:"불",def:"부처"},{kor:"필",def:"흥할"}]},{id:9353,hanja:"健",strokes:"",def:{en:[],kr:["탐할","건"]},hunum:[{kor:"건",def:"굳셀"},{kor:"견",def:"탐할"}]},{id:9354,hanja:"傭",strokes:"",def:{en:[],kr:["삯","용"]},hunum:[{kor:"용",def:"머슴"},{kor:"충",def:"고를"}]},{id:9355,hanja:"祭",strokes:"",def:{en:[],kr:["제사","제"]},hunum:[{kor:"제",def:"제사"},{kor:"채",def:"제사"}]},{id:9356,hanja:"祝",strokes:"",def:{en:[],kr:["축문","주"]},hunum:[{kor:"주",def:"축문"},{kor:"축",def:"빌"}]},{id:9357,hanja:"祇",strokes:"",def:{en:[],kr:["토지의","신","기"]},hunum:[{kor:"기",def:"토지의 신"},{kor:"지",def:"마침"}]},{id:9358,hanja:"鰷",strokes:"",def:{en:[],kr:["뱅어","소"]},hunum:[{kor:"조",def:"피라미"}]},{id:9359,hanja:"曝",strokes:"",def:{en:[],kr:["볕","쏘일","포"]},hunum:[{kor:"포",def:"볕 쬘"},{kor:"폭",def:"햇볕에 말릴"}]},{id:9360,hanja:"質",strokes:"",def:{en:[],kr:["贄와","同字"]},hunum:[{kor:"지",def:"바탕"},{kor:"질",def:"바탕"}]},{id:9361,hanja:"賂",strokes:"",def:{en:[],kr:["뇌물","줄","로"]},hunum:[{kor:"로",def:"뇌물 줄"},{kor:"뢰",def:"뇌물 줄"}]},{id:9362,hanja:"賈",strokes:"",def:{en:[],kr:["값","가"]},hunum:[{kor:"가",def:"값"},{kor:"고",def:"장사"}]},{id:9363,hanja:"弴",strokes:"",def:{en:[],kr:["그림","그린","활","돈"]},hunum:[{kor:"돈",def:"그림 그린 활"},{kor:"조",def:"그림 그린 활"}]},{id:9364,hanja:"弔",strokes:"",def:{en:[],kr:["이를","적"]},hunum:[{kor:"적",def:"이를"},{kor:"조",def:"위문할"}]},{id:9365,hanja:"弁",strokes:"",def:{en:[],kr:["즐거워할","반"]},hunum:[{kor:"반",def:"즐거워할"},{kor:"변",def:"고깔"}]},{id:9366,hanja:"俺",strokes:"",def:{en:[],kr:["클","엄"]},hunum:[{kor:"엄",def:"자기"},{kor:"업",def:"자기"}]},{id:9367,hanja:"俠",strokes:"",def:{en:[],kr:["아오를","겹"]},hunum:[{kor:"겹",def:"아오를"},{kor:"협",def:"의기"}]},{id:9368,hanja:"俟",strokes:"",def:{en:[],kr:["성씨","기"]},hunum:[{kor:"기",def:"성씨"},{kor:"사",def:"기다릴"}]},{id:9369,hanja:"培",strokes:"",def:{en:[],kr:["북돋을","배"]},hunum:[{kor:"배",def:"북돋을"},{kor:"부",def:"무덤"}]},{id:9370,hanja:"暴",strokes:"",def:{en:[],kr:["상할","포"]},hunum:[{kor:"포",def:"사나울"},{kor:"폭",def:"햇빛 쪼일"}]},{id:9371,hanja:"漸",strokes:"",def:{en:[],kr:["차차","점"]},hunum:[{kor:"점",def:"번질"},{kor:"참",def:"점점"}]},{id:9372,hanja:"晢",strokes:"",def:{en:[],kr:["비칠","절"]},hunum:[{kor:"절",def:"밝을"},{kor:"제",def:"별이 반짝반짝 할"}]},{id:9373,hanja:"景",strokes:"",def:{en:[],kr:["별","경"]},hunum:[{kor:"경",def:"별"},{kor:"영",def:"그림자"}]},{id:9374,hanja:"晬",strokes:"",def:{en:[],kr:["첫","생일","수"]},hunum:[{kor:"수",def:"돌"},{kor:"쉬",def:"돐"}]},{id:9375,hanja:"扱",strokes:"",def:{en:[],kr:["미칠","급"]},hunum:[{kor:"급",def:"미칠"},{kor:"삽",def:"거둘"}]},{id:9376,hanja:"秒",strokes:"",def:{en:[],kr:["까끄라기","묘"]},hunum:[{kor:"묘",def:"까끄라기"},{kor:"초",def:"시간 단위"}]},{id:9377,hanja:"度",strokes:"",def:{en:[],kr:["법도","도"]},hunum:[{kor:"도",def:"법도"},{kor:"탁",def:"꾀할"}]},{id:9378,hanja:"底",strokes:"",def:{en:[],kr:["그칠","저"]},hunum:[{kor:"저",def:"밑"},{kor:"지",def:"이룰"}]},{id:9379,hanja:"瀑",strokes:"",def:{en:[],kr:["물거품","포"]},hunum:[{kor:"포",def:"소나기"},{kor:"폭",def:"폭포수"}]},{id:9380,hanja:"鑿",strokes:"",def:{en:[],kr:["뚫을","조"]},hunum:[{kor:"조",def:"뚫을"},{kor:"착",def:"뚫을"}]},{id:9381,hanja:"皇",strokes:"",def:{en:[],kr:["엄숙할","왕"]},hunum:[{kor:"왕",def:"엄숙할"},{kor:"황",def:"임금"}]},{id:9382,hanja:"皐",strokes:"",def:{en:[],kr:["부르는","소리","고"]},hunum:[{kor:"고",def:"부르는 소리"},{kor:"호",def:"부를"}]},{id:9383,hanja:"乾",strokes:"",def:{en:[],kr:["마를","간"]},hunum:[{kor:"간",def:"마를"},{kor:"건",def:"하늘"}]},{id:9384,hanja:"九",strokes:"",def:{en:[],kr:["아홉","구"]},hunum:[{kor:"구",def:"아홉"},{kor:"규",def:"모을"}]},{id:9385,hanja:"鋭",strokes:"",def:{en:[],kr:["鋭와","同字"]},hunum:[{kor:"예",def:"날카로울"},{kor:"태",def:"창"}]},{id:9386,hanja:"硼",strokes:"",def:{en:[],kr:["붕산","붕"]},hunum:[{kor:"붕",def:"붕산"},{kor:"평",def:"평돌"}]},{id:9387,hanja:"麗",strokes:"",def:{en:[],kr:["고울","려"]},hunum:[{kor:"려",def:"고울"},{kor:"리",def:"고울"}]},{id:9388,hanja:"某",strokes:"",def:{en:[],kr:["매화나무","매"]},hunum:[{kor:"매",def:"매화나무"},{kor:"모",def:"아무"}]},{id:9389,hanja:"柑",strokes:"",def:{en:[],kr:["감자","감"]},hunum:[{kor:"감",def:"감귤"},{kor:"검",def:"귤"}]},{id:9390,hanja:"柞",strokes:"",def:{en:[],kr:["나무이름","작"]},hunum:[{kor:"작",def:"나무이름"},{kor:"책",def:"나무 이름"}]},{id:9391,hanja:"柚",strokes:"",def:{en:[],kr:["유자","유"]},hunum:[{kor:"유",def:"유자"},{kor:"축",def:"북"}]},{id:9392,hanja:"柴",strokes:"",def:{en:[],kr:["시제지낼","시"]},hunum:[{kor:"시",def:"섶"},{kor:"채",def:"섶"}]},{id:9393,hanja:"柾",strokes:"",def:{en:[],kr:["널","구"]},hunum:[{kor:"구",def:"관"},{kor:"정",def:"나무결 바를"}]},{id:9394,hanja:"歪",strokes:"",def:{en:[],kr:["비뚤","왜"]},hunum:[{kor:"외",def:"기을"}]},{id:9395,hanja:"闗",strokes:"",def:{en:[],kr:["빗장","관"]},hunum:[{kor:"관",def:"빗장"},{kor:"완",def:"당길"}]},{id:9396,hanja:"關",strokes:"",def:{en:[],kr:["빗장","관"]},hunum:[{kor:"관",def:"빗장"},{kor:"완",def:"화살 먹일"}]},{id:9397,hanja:"跛",strokes:"",def:{en:[],kr:["절뚝발이","파"]},hunum:[{kor:"파",def:"절뚝발이"},{kor:"피",def:"기울어 지게 설"}]},{id:9398,hanja:"帖",strokes:"",def:{en:[],kr:["표제","첩"]},hunum:[{kor:"첩",def:"표제"},{kor:"체",def:"표제"}]},{id:9399,hanja:"帕",strokes:"",def:{en:[],kr:["머리띠","말"]},hunum:[{kor:"말",def:"머리띠"},{kor:"파",def:"머리 동이수건"}]},{id:9400,hanja:"帑",strokes:"",def:{en:[],kr:["처자식","노"]},hunum:[{kor:"노",def:"처자식"},{kor:"탕",def:"나라 곳집"}]},{id:9401,hanja:"帙",strokes:"",def:{en:[]},hunum:[{kor:"절",def:"책권 차례"},{kor:"질",def:"책갑"}]},{id:9402,hanja:"帥",strokes:"",def:{en:[],kr:["좇을","솔"]},hunum:[{kor:"솔",def:"거느릴"},{kor:"수",def:"주장할"}]},{id:9403,hanja:"帰",strokes:"",def:{en:[],kr:["歸의","俗字"]},hunum:[{kor:"귀",def:"돌아갈"}]},{id:9404,hanja:"囗",strokes:"",def:{en:[],kr:["國의","古字"]},hunum:[{kor:"국",def:"나라"},{kor:"위",def:"에워쌀"}]},{id:9405,hanja:"囓",strokes:"",def:{en:[]},hunum:[{kor:"설",def:"물"}]},{id:9406,hanja:"囋",strokes:"",def:{en:[],kr:["기릴","찬"]},hunum:[{kor:"찬",def:"기릴"},{kor:"찰",def:"기릴"}]},{id:9407,hanja:"囅",strokes:"",def:{en:[],kr:["웃는","모양","천"]},hunum:[{kor:"천",def:"웃는 모양"},{kor:"철",def:"껄껄 웃을"}]},{id:9408,hanja:"囁",strokes:"",def:{en:[],kr:["입","다물","섭"]},hunum:[{kor:"섭",def:"말하려다 멈출"},{kor:"엽",def:"소곤거릴"}]},{id:9409,hanja:"囱",strokes:"",def:{en:[],kr:["천장","창"]},hunum:[{kor:"창",def:"천장"},{kor:"총",def:"굴뚝"}]},{id:9410,hanja:"囪",strokes:"",def:{en:[],kr:["굴뚝","창"]},hunum:[{kor:"창",def:"굴뚝"},{kor:"총",def:"굴뚝"}]},{id:9411,hanja:"佷",strokes:"",def:{en:[],kr:["잔인할","한"]},hunum:[{kor:"한",def:"잔인할"},{kor:"항",def:"돌아올"}]},{id:9412,hanja:"蔚",strokes:"",def:{en:[],kr:["고을이름","울"]},hunum:[{kor:"울",def:"고을이름"},{kor:"위",def:"제비쑥"}]},{id:9413,hanja:"蔡",strokes:"",def:{en:[],kr:["내칠","살"]},hunum:[{kor:"살",def:"내칠"},{kor:"채",def:"거북"}]},{id:9414,hanja:"什",strokes:"",def:{en:[],kr:["열","사람","십"]},hunum:[{kor:"십",def:"열 사람"},{kor:"집",def:"세간"}]},{id:9415,hanja:"格",strokes:"",def:{en:[],kr:["감동할","격"]},hunum:[{kor:"격",def:"이를"},{kor:"낙",def:"막힐"}]},{id:9416,hanja:"校",strokes:"",def:{en:[],kr:["학교","교"]},hunum:[{kor:"교",def:"학교"},{kor:"효",def:"학궁"}]},{id:9417,hanja:"仛",strokes:"",def:{en:[],kr:["위탁할","차"]},hunum:[{kor:"차",def:"위탁할"},{kor:"탁",def:"부칠"}]},{id:9418,hanja:"仮",strokes:"",def:{en:[],kr:["假의","略字"]},hunum:[{kor:"가",def:"거짓"},{kor:"반",def:"돌이킬"}]},{id:9419,hanja:"佉",strokes:"",def:{en:[],kr:["나라이름","거"]},hunum:[{kor:"거",def:"나라이름"},{kor:"구",def:"나라 이름"}]},{id:9420,hanja:"骶",strokes:"",def:{en:[],kr:["꽁무니","끝","저"]},hunum:[{kor:"저",def:"꽁무니 끝"},{kor:"제",def:"궁둥이"}]},{id:9421,hanja:"磻",strokes:"",def:{en:[],kr:["강이름","반"]},hunum:[{kor:"반",def:"강이름"},{kor:"번",def:"강이름"}]},{id:9422,hanja:"杓",strokes:"",def:{en:[],kr:["구기","작"]},hunum:[{kor:"작",def:"구기"},{kor:"표",def:"북두자루"}]},{id:9423,hanja:"杻",strokes:"",def:{en:[],kr:["옷","부드러울","뉴"]},hunum:[{kor:"뉴",def:"옷 부드러울"},{kor:"추",def:"수갑"}]},{id:9424,hanja:"杳",strokes:"",def:{en:[],kr:["어두울","묘"]},hunum:[{kor:"묘",def:"어두울"}]},{id:9425,hanja:"熇",strokes:"",def:{en:[],kr:["뜨거울","혹"]},hunum:[{kor:"혹",def:"뜨거울"},{kor:"효",def:"불김"}]},{id:9426,hanja:"詳",strokes:"",def:{en:[],kr:["자세할","상"]},hunum:[{kor:"상",def:"자세할"},{kor:"양",def:"거짓"}]},{id:9427,hanja:"詒",strokes:"",def:{en:[],kr:["느른할","이"]},hunum:[{kor:"이",def:"줄"},{kor:"태",def:"속일"}]},{id:9428,hanja:"榜",strokes:"",def:{en:[],kr:["매","방"]},hunum:[{kor:"방",def:"매"},{kor:"병",def:"게시판"}]},{id:9429,hanja:"噣",strokes:"",def:{en:[],kr:["부리","주"]},hunum:[{kor:"주",def:"부리"},{kor:"탁",def:"쪼을"}]},{id:9430,hanja:"噢",strokes:"",def:{en:[],kr:["슬퍼할","우"]},hunum:[{kor:"우",def:"슬퍼할"},{kor:"욱",def:"슬퍼할"}]},{id:9431,hanja:"噦",strokes:"",def:{en:[],kr:["재채기할","얼"]},hunum:[{kor:"얼",def:"재채기할"},{kor:"홰",def:"새소리"}]},{id:9432,hanja:"噫",strokes:"",def:{en:[],kr:["트림할","애"]},hunum:[{kor:"애",def:"트림할"},{kor:"희",def:"탄식할"}]},{id:9433,hanja:"噊",strokes:"",def:{en:[],kr:["위태할","술"]},hunum:[{kor:"술",def:"위태할"},{kor:"율",def:"위태할"}]},{id:9434,hanja:"噌",strokes:"",def:{en:[],kr:["장사꾼","웅성거릴","쟁"]},hunum:[{kor:"쟁",def:"장사꾼 웅성거릴"},{kor:"증",def:"시끄러울"}]},{id:9435,hanja:"薜",strokes:"",def:{en:[],kr:["승검초","벽"]},hunum:[{kor:"벽",def:"승검초"},{kor:"폐",def:"승검초"}]},{id:9436,hanja:"薔",strokes:"",def:{en:[],kr:["아낄","색"]},hunum:[{kor:"색",def:"아낄"},{kor:"장",def:"물여뀌"}]},{id:9437,hanja:"薨",strokes:"",def:{en:[],kr:["많을","횡"]},hunum:[{kor:"횡",def:"많을"},{kor:"훙",def:"죽을"}]},{id:9438,hanja:"騈",strokes:"",def:{en:[],kr:["나란히","할","변"]},hunum:[{kor:"변",def:"나란히 할"},{kor:"병",def:"나란히 할"}]},{id:9439,hanja:"惺",strokes:"",def:{en:[],kr:["조용할","성"]},hunum:[{kor:"성",def:"깨달을"}]},{id:9440,hanja:"惡",strokes:"",def:{en:[],kr:["나쁠","악"]},hunum:[{kor:"악",def:"나쁠"},{kor:"오",def:"미워할"}]},{id:9441,hanja:"惨",strokes:"",def:{en:[],kr:["참혹할","참"]},hunum:[{kor:"참",def:"참혹할"},{kor:"침",def:"참혹할"}]},{id:9442,hanja:"諺",strokes:"",def:{en:[],kr:["뻐득뻐득할","안"]},hunum:[{kor:"안",def:"용맹스러울"},{kor:"언",def:"상말"}]},{id:9443,hanja:"諾",strokes:"",def:{en:[],kr:["대답할","낙"]},hunum:[{kor:"낙",def:"대답할"},{kor:"락",def:"대답할"}]},{id:9444,hanja:"論",strokes:"",def:{en:[],kr:["말할","론"]},hunum:[{kor:"론",def:"말할"},{kor:"윤",def:"차례"}]},{id:9445,hanja:"倚",strokes:"",def:{en:[],kr:["기이할","기"]},hunum:[{kor:"기",def:"기이할"},{kor:"의",def:"기댈"}]},{id:9446,hanja:"適",strokes:"",def:{en:[],kr:["주장할","적"]},hunum:[{kor:"적",def:"맞갖을"},{kor:"척",def:"갈"}]},{id:9447,hanja:"崖",strokes:"",def:{en:[],kr:["낭떠러지","애"]},hunum:[{kor:"애",def:"낭떠러지"},{kor:"의",def:"언덕"}]},{id:9448,hanja:"嗌",strokes:"",def:{en:[],kr:["呝과","同字"]},hunum:[{kor:"악",def:"웃는 소리"},{kor:"애",def:"목 멜"},{kor:"익",def:"목구멍"}]},{id:9449,hanja:"嗃",strokes:"",def:{en:[],kr:["꾸짖을","학"]},hunum:[{kor:"학",def:"꾸짖을"},{kor:"효",def:"성낸 소리"}]},{id:9450,hanja:"嗄",strokes:"",def:{en:[],kr:["목","잠길","사"]},hunum:[{kor:"사",def:"목 잠길"},{kor:"애",def:"목 쉴"}]},{id:9451,hanja:"嗐",strokes:"",def:{en:[],kr:["감탄사","할"]},hunum:[{kor:"할",def:"감탄사"},{kor:"해",def:"하품할"}]},{id:9452,hanja:"池",strokes:"",def:{en:[],kr:["못","지"]},hunum:[{kor:"지",def:"못"},{kor:"타",def:"물이름"}]},{id:9453,hanja:"植",strokes:"",def:{en:[],kr:["초목","식"]},hunum:[{kor:"식",def:"심을"},{kor:"치",def:"방망이"}]},{id:9454,hanja:"鮧",strokes:"",def:{en:[],kr:["창자젓","이"]},hunum:[{kor:"이",def:"창자젓"},{kor:"제",def:"복"}]},{id:9455,hanja:"恝",strokes:"",def:{en:[],kr:["걱정","없을","개"]},hunum:[{kor:"개",def:"걱정 없을"},{kor:"괄",def:"걱정 없을"}]},{id:9456,hanja:"恒",strokes:"",def:{en:[],kr:["두루할","긍"]},hunum:[{kor:"긍",def:"시위"},{kor:"항",def:"늘"}]},{id:9457,hanja:"更",strokes:"",def:{en:[],kr:["다시","갱"]},hunum:[{kor:"갱",def:"다시"},{kor:"경",def:"고칠"}]},{id:9458,hanja:"恂",strokes:"",def:{en:[],kr:["온공스러울","순"]},hunum:[{kor:"순",def:"진실할"},{kor:"준",def:"갑자기"}]},{id:9459,hanja:"寅",strokes:"",def:{en:[],kr:["동북","이"]},hunum:[{kor:"이",def:"공경할"},{kor:"인",def:"세째지지"}]},{id:9460,hanja:"撰",strokes:"",def:{en:[],kr:["지을","찬"]},hunum:[{kor:"찬",def:"지을"},{kor:"천",def:"지을"}]},{id:9461,hanja:"寺",strokes:"",def:{en:[],kr:["절","사"]},hunum:[{kor:"사",def:"절"},{kor:"시",def:"내관"}]},{id:9462,hanja:"岑",strokes:"",def:{en:[],kr:["낭떠러지","음"]},hunum:[{kor:"음",def:"기슭"},{kor:"잠",def:"봉우리"}]},{id:9463,hanja:"岀",strokes:"",def:{en:[],kr:["出와","同字"]},hunum:[{kor:"출",def:"날"}]},{id:9464,hanja:"掣",strokes:"",def:{en:[],kr:["끌","철"]},hunum:[{kor:"철",def:"끌"},{kor:"체",def:"끌어당길"}]},{id:9465,hanja:"炤",strokes:"",def:{en:[],kr:["밝을","소"]},hunum:[{kor:"소",def:"밝을"},{kor:"조",def:"비출"}]},{id:9466,hanja:"炙",strokes:"",def:{en:[],kr:["고기구을","자"]},hunum:[{kor:"자",def:"고기구을"},{kor:"적",def:"고기구이"}]},{id:9467,hanja:"檜",strokes:"",def:{en:[],kr:["나라이름","괄"]},hunum:[{kor:"괄",def:"전나무"},{kor:"회",def:"노송나무"}]},{id:9468,hanja:"核",strokes:"",def:{en:[],kr:["자세할","핵"]},hunum:[{kor:"핵",def:"실과"},{kor:"홀",def:"씨"}]},{id:9469,hanja:"啡",strokes:"",def:{en:[],kr:["코","고는","소리","배"]},hunum:[{kor:"배",def:"코 고는 소리"},{kor:"비",def:"코 고는 소리"}]},{id:9470,hanja:"啿",strokes:"",def:{en:[],kr:["많을","담"]},hunum:[{kor:"담",def:"많을"},{kor:"잠",def:"넉넉할"}]},{id:9471,hanja:"啋",strokes:"",def:{en:[],kr:["움직일","교"]},hunum:[{kor:"교",def:"움직일"}]},{id:9472,hanja:"啁",strokes:"",def:{en:[],kr:["비웃을","조"]},hunum:[{kor:"조",def:"비웃을"},{kor:"주",def:"새소리"}]},{id:9473,hanja:"啑",strokes:"",def:{en:[],kr:["오리가","텁석텁석","먹을","삽"]},hunum:[{kor:"삽",def:"오리가 텁석텁석 먹을"},{kor:"잡",def:"마실"},{kor:"체",def:"콧김 불"}]},{id:9474,hanja:"啑",strokes:"",def:{en:[],kr:["唼과","同字"]},hunum:[{kor:"삽",def:"오리가 텁석텁석 먹을"},{kor:"잡",def:"마실"},{kor:"체",def:"콧김 불"}]},{id:9475,hanja:"啐",strokes:"",def:{en:[],kr:["지껄일","줄"]},hunum:[{kor:"줄",def:"지껄일"},{kor:"쵀",def:"부를"}]},{id:9476,hanja:"孟",strokes:"",def:{en:[],kr:["맹랑할","망"]},hunum:[{kor:"망",def:"맹랑할"},{kor:"맹",def:"맏"}]},{id:9477,hanja:"芍",strokes:"",def:{en:[],kr:["작약","작"]},hunum:[{kor:"작",def:"작약"},{kor:"적",def:"연밥"}]},{id:9478,hanja:"芋",strokes:"",def:{en:[],kr:["토란","우"]},hunum:[{kor:"우",def:"토란"},{kor:"후",def:"클"}]},{id:9479,hanja:"芸",strokes:"",def:{en:[],kr:["藝의","略字"]},hunum:[{kor:"예",def:"재주"},{kor:"운",def:"향풀"}]},{id:9480,hanja:"穀",strokes:"",def:{en:[],kr:["곡식","곡"]},hunum:[{kor:"곡",def:"곡식"},{kor:"구",def:"녹봉"}]},{id:9481,hanja:"積",strokes:"",def:{en:[],kr:["저출할","자"]},hunum:[{kor:"자",def:"저출할"},{kor:"적",def:"포갤"}]},{id:9482,hanja:"穫",strokes:"",def:{en:[],kr:["땅","이름","호"]},hunum:[{kor:"호",def:"땅 이름"},{kor:"확",def:"벼 벨"}]},{id:9483,hanja:"鬧",strokes:"",def:{en:[],kr:["시끄러울","뇨"]},hunum:[{kor:"뇨",def:"시끄러울"},{kor:"료",def:"시끄러울"}]},{id:9484,hanja:"懶",strokes:"",def:{en:[],kr:["게으를","라"]},hunum:[{kor:"라",def:"게으를"},{kor:"란",def:"게으를"}]},{id:9485,hanja:"懦",strokes:"",def:{en:[],kr:["나약할","나"]},hunum:[{kor:"나",def:"나약할"},{kor:"유",def:"만만할"}]},{id:9486,hanja:"献",strokes:"",def:{en:[],kr:["獻의","俗字"]},hunum:[{kor:"사",def:"술두루미"},{kor:"헌",def:"드릴"}]},{id:9487,hanja:"猗",strokes:"",def:{en:[],kr:["부드러울","아"]},hunum:[{kor:"아",def:"부드러울"},{kor:"의",def:"불 깐 개"}]},{id:9488,hanja:"尊",strokes:"",def:{en:[],kr:["존귀할","존"]},hunum:[{kor:"존",def:"존귀할"},{kor:"준",def:"술그릇"}]},{id:9489,hanja:"尉",strokes:"",def:{en:[],kr:["성씨","울"]},hunum:[{kor:"울",def:"성씨"},{kor:"위",def:"벼슬이름"}]},{id:9490,hanja:"射",strokes:"",def:{en:[],kr:["궁술","사"]},hunum:[{kor:"사",def:"궁술"},{kor:"석",def:"맞힐"}]},{id:9491,hanja:"尼",strokes:"",def:{en:[],kr:["여승","니"]},hunum:[{kor:"니",def:"여승"},{kor:"일",def:"가까울"}]},{id:9492,hanja:"尨",strokes:"",def:{en:[],kr:["삽살개","방"]},hunum:[{kor:"방",def:"삽살개"},{kor:"봉",def:"헝클어진 모양"}]},{id:9493,hanja:"哨",strokes:"",def:{en:[],kr:["잔말할","소"]},hunum:[{kor:"소",def:"입술 비뚤어질"},{kor:"초",def:"망 볼"}]},{id:9494,hanja:"茶",strokes:"",def:{en:[],kr:["차풀","다"]},hunum:[{kor:"다",def:"차풀"},{kor:"차",def:"차"}]},{id:9495,hanja:"約",strokes:"",def:{en:[],kr:["맺을","약"]},hunum:[{kor:"약",def:"대략"},{kor:"요",def:"약속할"}]},{id:9496,hanja:"紅",strokes:"",def:{en:[],kr:["상복","이름","공"]},hunum:[{kor:"공",def:"상복 이름"},{kor:"홍",def:"붉을"}]},{id:9497,hanja:"純",strokes:"",def:{en:[],kr:["부드러울","순"]},hunum:[{kor:"순",def:"실"},{kor:"준",def:"선으로 두를"}]},{id:9498,hanja:"索",strokes:"",def:{en:[],kr:["동아줄","삭"]},hunum:[{kor:"삭",def:"동아줄"},{kor:"색",def:"찾을"}]},{id:9499,hanja:"樂",strokes:"",def:{en:[],kr:["즐길","락"]},hunum:[{kor:"락",def:"즐길"},{kor:"악",def:"풍류"},{kor:"요",def:"좋아할"}]},{id:9500,hanja:"樂",strokes:"",def:{en:[],kr:["풍류","악"]},hunum:[{kor:"락",def:"즐길"},{kor:"악",def:"풍류"},{kor:"요",def:"좋아할"}]},{id:9501,hanja:"樞",strokes:"",def:{en:[],kr:["느름나무","우"]},hunum:[{kor:"우",def:"느름나무"},{kor:"추",def:"밑둥"}]},{id:9502,hanja:"樑",strokes:"",def:{en:[],kr:["서늘할","량"]},hunum:[{kor:"량",def:"들보"}]},{id:9503,hanja:"樣",strokes:"",def:{en:[],kr:["橡의","略字"]},hunum:[{kor:"상",def:"상수리나무"},{kor:"양",def:"모양"}]},{id:9504,hanja:"樸",strokes:"",def:{en:[],kr:["통나무","박"]},hunum:[{kor:"박",def:"통나무"},{kor:"복",def:"총생할"}]},{id:9505,hanja:"竝",strokes:"",def:{en:[],kr:["고을이름","반"]},hunum:[{kor:"반",def:"짝지을"},{kor:"병",def:"아우를"}]},{id:9506,hanja:"竜",strokes:"",def:{en:[],kr:["두덕","롱"]},hunum:[{kor:"농",def:"두덕"},{kor:"룡",def:"용"}]},{id:9507,hanja:"竺",strokes:"",def:{en:[],kr:["두터울","독"]},hunum:[{kor:"독",def:"두터울"},{kor:"축",def:"나라이름"}]},{id:9508,hanja:"竭",strokes:"",def:{en:[],kr:["마를","갈"]},hunum:[{kor:"갈",def:"다할"},{kor:"걸",def:"다할"}]},{id:9509,hanja:"竣",strokes:"",def:{en:[],kr:["물러설","전"]},hunum:[{kor:"전",def:"일 마칠"},{kor:"준",def:"마칠"}]},{id:9510,hanja:"慶",strokes:"",def:{en:[],kr:["이에","강"]},hunum:[{kor:"강",def:"복"},{kor:"경",def:"경사"}]},{id:9511,hanja:"慴",strokes:"",def:{en:[],kr:["겁낼","습"]},hunum:[{kor:"습",def:"두려워할"},{kor:"접",def:"두려울"}]},{id:9512,hanja:"慊",strokes:"",def:{en:[],kr:["싫을","겸"]},hunum:[{kor:"겸",def:"앙심먹을"},{kor:"협",def:"족할"}]},{id:9513,hanja:"嫋",strokes:"",def:{en:[],kr:["날릴","뇨"]},hunum:[{kor:"뇨",def:"날릴"},{kor:"약",def:"가냘플"}]},{id:9514,hanja:"厥",strokes:"",def:{en:[],kr:["나라이름","굴"]},hunum:[{kor:"굴",def:"나라이름"},{kor:"궐",def:"그"}]},{id:9515,hanja:"厭",strokes:"",def:{en:[],kr:["미워할","염"]},hunum:[{kor:"염",def:"넉넉할"},{kor:"엽",def:"제사할"}]},{id:9516,hanja:"厼",strokes:"",def:{en:[]},hunum:[{kor:"며",def:"구결자"},{kor:"이",def:"구결자"}]},{id:9517,hanja:"厽",strokes:"",def:{en:[],kr:["흙을","쌓아서","담","쌓을","뤼"]},hunum:[{kor:"뤼",def:"흙을 쌓아서 담 쌓을"},{kor:"참",def:"흙을 쌓아서 담 쌀"}]},{id:9518,hanja:"厂",strokes:"",def:{en:[],kr:["기슭","엄"]},hunum:[{kor:"엄",def:"굴바위"},{kor:"한",def:"사람 이름"}]},{id:9519,hanja:"厃",strokes:"",def:{en:[],kr:["평고대","위"]},hunum:[{kor:"위",def:"우러러 볼"},{kor:"점",def:"우러러 볼"}]},{id:9520,hanja:"厘",strokes:"",def:{en:[],kr:["釐의","俗字"]},hunum:[{kor:"리",def:"다스릴"},{kor:"전",def:"전방"}]},{id:9521,hanja:"俶",strokes:"",def:{en:[],kr:["지을","숙"]},hunum:[{kor:"숙",def:"비롯할"},{kor:"척",def:"시작할"}]},{id:9522,hanja:"行",strokes:"",def:{en:[],kr:["굳셀","항"]},hunum:[{kor:"항",def:"시장"},{kor:"행",def:"다닐"}]},{id:9523,hanja:"衡",strokes:"",def:{en:[],kr:["저울대","형"]},hunum:[{kor:"형",def:"저울대"},{kor:"횡",def:"가로"}]},{id:9524,hanja:"衰",strokes:"",def:{en:[],kr:["약할","쇠"]},hunum:[{kor:"쇠",def:"쇠할"},{kor:"최",def:"상복"}]},{id:9525,hanja:"埴",strokes:"",def:{en:[],kr:["더듬어","걸을","식"]},hunum:[{kor:"식",def:"찰진흙"},{kor:"치",def:"찰진흙"}]},{id:9526,hanja:"玨",strokes:"",def:{en:[],kr:["珏의","古字"]},hunum:[{kor:"각",def:"쌍옥"},{kor:"곡",def:"쌍옥"}]},{id:9527,hanja:"率",strokes:"",def:{en:[],kr:["거느릴","률"]},hunum:[{kor:"률",def:"거느릴"},{kor:"솔",def:"거느릴"}]},{id:9528,hanja:"鍼",strokes:"",def:{en:[]},hunum:[{kor:"감",def:"덜"},{kor:"침",def:"바늘"}]},{id:9529,hanja:"綏",strokes:"",def:{en:[],kr:["여우모양","수"]},hunum:[{kor:"수",def:"편안할"},{kor:"유",def:"깃발 늘어질"}]},{id:9530,hanja:"綢",strokes:"",def:{en:[],kr:["쌀","도"]},hunum:[{kor:"도",def:"쌀"},{kor:"주",def:"얽힐"}]},{id:9531,hanja:"綸",strokes:"",def:{en:[],kr:["관건","관"]},hunum:[{kor:"관",def:"관건"},{kor:"륜",def:"낚싯줄"}]},{id:9532,hanja:"綴",strokes:"",def:{en:[],kr:["꿰맬","철"]},hunum:[{kor:"철",def:"꿰맬"},{kor:"체",def:"꿰멜"}]},{id:9533,hanja:"殷",strokes:"",def:{en:[],kr:["검붉을","안"]},hunum:[{kor:"안",def:"검붉을"},{kor:"은",def:"많을"}]},{id:9534,hanja:"殺",strokes:"",def:{en:[],kr:["죽일","살"]},hunum:[{kor:"살",def:"죽일"},{kor:"쇄",def:"빠를"}]},{id:9535,hanja:"呹",strokes:"",def:{en:[],kr:["재빠를","일"]},hunum:[{kor:"일",def:"풀 뜯어 먹을"},{kor:"질",def:"소리"}]},{id:9536,hanja:"呺",strokes:"",def:{en:[],kr:["큰체할","호"]},hunum:[{kor:"호",def:"큰체할"},{kor:"효",def:"큰체할"}]},{id:9537,hanja:"呬",strokes:"",def:{en:[],kr:["왁자할","령"]},hunum:[{kor:"령",def:"왁자할"},{kor:"희",def:"쉴"},{kor:"히",def:"숨 쉴"}]},{id:9538,hanja:"呬",strokes:"",def:{en:[],kr:["쉴","희"]},hunum:[{kor:"령",def:"왁자할"},{kor:"희",def:"쉴"},{kor:"히",def:"숨 쉴"}]},{id:9539,hanja:"呐",strokes:"",def:{en:[],kr:["吶과","同字"]},hunum:[{kor:"눌",def:"말 더듬을"}]},{id:9540,hanja:"呉",strokes:"",def:{en:[],kr:["吳와","同字"]},hunum:[{kor:"오",def:"성씨"},{kor:"화",def:"큰소리칠"}]},{id:9541,hanja:"告",strokes:"",def:{en:[],kr:["알릴","고"]},hunum:[{kor:"고",def:"알릴"},{kor:"곡",def:"청할"}]},{id:9542,hanja:"呅",strokes:"",def:{en:[],kr:["웃을","매"]},hunum:[{kor:"매",def:"웃을"},{kor:"문",def:"웃을"}]},{id:9543,hanja:"呆",strokes:"",def:{en:[],kr:["어리석을","매"]},hunum:[{kor:"매",def:"어리석을"},{kor:"보",def:"지킬"},{kor:"태",def:"어리석을"}]},{id:9544,hanja:"呆",strokes:"",def:{en:[],kr:["保와","同字"]},hunum:[{kor:"매",def:"어리석을"},{kor:"보",def:"지킬"},{kor:"태",def:"어리석을"}]},{id:9545,hanja:"莩",strokes:"",def:{en:[],kr:["풀","이름","부"]},hunum:[{kor:"부",def:"풀 이름"},{kor:"표",def:"굶어죽을"}]},{id:9546,hanja:"莫",strokes:"",def:{en:[],kr:["없을","막"]},hunum:[{kor:"막",def:"없을"},{kor:"모",def:"저물"}]},{id:9547,hanja:"莞",strokes:"",def:{en:[],kr:["골풀","관"]},hunum:[{kor:"관",def:"골풀"},{kor:"완",def:"빙그레 웃는 모양"}]},{id:9548,hanja:"畫",strokes:"",def:{en:[],kr:["그림","화"]},hunum:[{kor:"화",def:"그림"},{kor:"획",def:"그을"}]},{id:9549,hanja:"番",strokes:"",def:{en:[],kr:["땅이름","반"]},hunum:[{kor:"반",def:"갈아치울"},{kor:"번",def:"갈마들"}]},{id:9550,hanja:"畵",strokes:"",def:{en:[],kr:["그림","화"]},hunum:[{kor:"화",def:"그림"},{kor:"획",def:"그을"}]},{id:9551,hanja:"畜",strokes:"",def:{en:[],kr:["그칠","축"]},hunum:[{kor:"축",def:"가축"},{kor:"휵",def:"기를"}]},{id:9552,hanja:"拨",strokes:"",def:{en:[],kr:["撥의","簡體字"]},hunum:[{kor:"발",def:"다스릴"}]},{id:9553,hanja:"頓",strokes:"",def:{en:[],kr:["조아릴","돈"]},hunum:[{kor:"돈",def:"조아릴"},{kor:"둔",def:"조아릴"}]},{id:9554,hanja:"拮",strokes:"",def:{en:[],kr:["열심히","일할","결"]},hunum:[{kor:"결",def:"길거할"},{kor:"길",def:"일할"}]},{id:9555,hanja:"拡",strokes:"",def:{en:[],kr:["擴의","略字"]},hunum:[{kor:"광",def:"넓힐"},{kor:"확",def:"넓힐"}]},{id:9556,hanja:"頃",strokes:"",def:{en:[],kr:["밭","넓이","단위","경"]},hunum:[{kor:"경",def:"밭 넓이 단위"},{kor:"규",def:"반걸음"}]},{id:9557,hanja:"拾",strokes:"",def:{en:[],kr:["벼슬이름","습"]},hunum:[{kor:"습",def:"주울"},{kor:"십",def:"十의 갖은"}]},{id:9558,hanja:"頌",strokes:"",def:{en:[],kr:["찬양하는","노래","송"]},hunum:[{kor:"송",def:"기릴"},{kor:"용",def:"얼굴"}]},{id:9559,hanja:"拂",strokes:"",def:{en:[],kr:["떨","불"]},hunum:[{kor:"불",def:"떨"},{kor:"필",def:"도울"}]},{id:9560,hanja:"招",strokes:"",def:{en:[],kr:["들","교"]},hunum:[{kor:"교",def:"들"},{kor:"초",def:"부를"}]},{id:9561,hanja:"拒",strokes:"",def:{en:[],kr:["다다를","거"]},hunum:[{kor:"거",def:"막을"},{kor:"구",def:"진이름"}]},{id:9562,hanja:"拓",strokes:"",def:{en:[],kr:["주울","척"]},hunum:[{kor:"척",def:"주울"},{kor:"탁",def:"물리칠"}]},{id:9563,hanja:"拔",strokes:"",def:{en:[],kr:["뺄","발"]},hunum:[{kor:"발",def:"뺄"},{kor:"패",def:"밋밋할"}]},{id:9564,hanja:"父",strokes:"",def:{en:[],kr:["남자의","미칭","美稱","보"]},hunum:[{kor:"보",def:"남자 미칭"},{kor:"부",def:"아비"}]},{id:9565,hanja:"爆",strokes:"",def:{en:[],kr:["지질","박"]},hunum:[{kor:"박",def:"지질"},{kor:"폭",def:"불터질"}]},{id:9566,hanja:"泄",strokes:"",def:{en:[],kr:["샐","설"]},hunum:[{kor:"설",def:"샐"},{kor:"예",def:"내칠"}]},{id:9567,hanja:"泌",strokes:"",def:{en:[],kr:["샘물","흐르는","모양","비"]},hunum:[{kor:"비",def:"샘물 흐르는 모양"},{kor:"필",def:"도랑물"}]},{id:9568,hanja:"泛",strokes:"",def:{en:[],kr:["뜰","범"]},hunum:[{kor:"범",def:"뜰"},{kor:"봉",def:"엎을"}]},{id:9569,hanja:"匪",strokes:"",def:{en:[],kr:["나눌","분"]},hunum:[{kor:"분",def:"나눌"},{kor:"비",def:"대상자"}]},{id:9570,hanja:"区",strokes:"",def:{en:[],kr:["區의","略字"]},hunum:[{kor:"구",def:"구분할"},{kor:"우",def:"숨길"}]},{id:9571,hanja:"医",strokes:"",def:{en:[],kr:["화살통","예"]},hunum:[{kor:"예",def:"화살통"},{kor:"의",def:"의원"}]},{id:9572,hanja:"匹",strokes:"",def:{en:[],kr:["집","오리","목"]},hunum:[{kor:"목",def:"집 오리"},{kor:"필",def:"짝"}]},{id:9573,hanja:"匋",strokes:"",def:{en:[],kr:["질그릇","도"]},hunum:[{kor:"도",def:"질그릇"},{kor:"요",def:"기오 굽는 가마"}]},{id:9574,hanja:"匀",strokes:"",def:{en:[],kr:["고를","균"]},hunum:[{kor:"균",def:"고를"},{kor:"윤",def:"나눌"}]},{id:9575,hanja:"匄",strokes:"",def:{en:[],kr:["빌","갈"]},hunum:[{kor:"갈",def:"청구할"},{kor:"개",def:"빌"}]},{id:9576,hanja:"北",strokes:"",def:{en:[]},hunum:[{kor:"북",def:"북녘"}]},{id:9577,hanja:"裸",strokes:"",def:{en:[],kr:["벌거벗을","라"]},hunum:[{kor:"라",def:"벌거벗을"}]},{id:9578,hanja:"耆",strokes:"",def:{en:[],kr:["늙은이","기"]},hunum:[{kor:"기",def:"늙은이"},{kor:"지",def:"이룰"}]},{id:9579,hanja:"簿",strokes:"",def:{en:[],kr:["잠박","박"]},hunum:[{kor:"박",def:"잠박"},{kor:"부",def:"장부"}]},{id:9580,hanja:"黔",strokes:"",def:{en:[],kr:["검을","검"]},hunum:[{kor:"검",def:"검을"},{kor:"금",def:"귀신 이름"}]},{id:9581,hanja:"黧",strokes:"",def:{en:[],kr:["검을","래"]},hunum:[{kor:"래",def:"검을"},{kor:"려",def:"검을"},{kor:"리",def:"검을"}]},{id:9582,hanja:"黧",strokes:"",def:{en:[],kr:["검을","려"]},hunum:[{kor:"래",def:"검을"},{kor:"려",def:"검을"},{kor:"리",def:"검을"}]},{id:9583,hanja:"欠",strokes:"",def:{en:[],kr:["이지러질","감"]},hunum:[{kor:"감",def:"하픔할"},{kor:"흠",def:"하품"}]},{id:9584,hanja:"批",strokes:"",def:{en:[],kr:["거스를","별"]},hunum:[{kor:"별",def:"거스를"},{kor:"비",def:"칠"}]},{id:9585,hanja:"識",strokes:"",def:{en:[],kr:["알","식"]},hunum:[{kor:"식",def:"알"},{kor:"지",def:"표할"}]},{id:9586,hanja:"扮",strokes:"",def:{en:[],kr:["꾸밀","반"]},hunum:[{kor:"반",def:"꾸밀"},{kor:"분",def:"꾸밀"}]},{id:9587,hanja:"馴",strokes:"",def:{en:[],kr:["착할","순"]},hunum:[{kor:"순",def:"길들일"},{kor:"훈",def:"가르칠"}]},{id:9588,hanja:"打",strokes:"",def:{en:[],kr:["칠","정"]},hunum:[{kor:"정",def:"칠"},{kor:"타",def:"때릴"}]},{id:9589,hanja:"払",strokes:"",def:{en:[],kr:["떨칠","불"]},hunum:[{kor:"불",def:"떨칠"},{kor:"필",def:"떨칠"}]},{id:9590,hanja:"扁",strokes:"",def:{en:[],kr:["비천할","변"]},hunum:[{kor:"변",def:"현판"},{kor:"편",def:"특별할"}]},{id:9591,hanja:"姪",strokes:"",def:{en:[],kr:["조카딸","절"]},hunum:[{kor:"절",def:"조카"},{kor:"질",def:"조카"}]},{id:9592,hanja:"劾",strokes:"",def:{en:[],kr:["힘쓸","해"]},hunum:[{kor:"해",def:"안찰할"},{kor:"핵",def:"캐물을"}]},{id:9593,hanja:"劊",strokes:"",def:{en:[],kr:["끊을","괴"]},hunum:[{kor:"회",def:"끊을"}]},{id:9594,hanja:"劙",strokes:"",def:{en:[],kr:["가를","례"]},hunum:[{kor:"례",def:"가를"},{kor:"리",def:"가를"}]},{id:9595,hanja:"踣",strokes:"",def:{en:[],kr:["넘어질","복"]},hunum:[{kor:"복",def:"넘어질"},{kor:"부",def:"넘어질"}]},{id:9596,hanja:"混",strokes:"",def:{en:[],kr:["서쪽","오랑캐","곤"]},hunum:[{kor:"곤",def:"서쪽 오랑캐"},{kor:"혼",def:"섞을"}]},{id:9597,hanja:"擴",strokes:"",def:{en:[],kr:["넓힐","광"]},hunum:[{kor:"광",def:"넓힐"},{kor:"확",def:"넓힐"}]},{id:9598,hanja:"戻",strokes:"",def:{en:[],kr:["수레","옆문","려"]},hunum:[{kor:"려",def:"수레 옆문"},{kor:"렬",def:"돌릴"},{kor:"태",def:"어그러질"}]},{id:9599,hanja:"状",strokes:"",def:{en:[],kr:["狀의","略字"]},hunum:[{kor:"상",def:"형상"},{kor:"장",def:"문서"}]},{id:9600,hanja:"犧",strokes:"",def:{en:[],kr:["술그릇","사"]},hunum:[{kor:"사",def:"술그릇"},{kor:"희",def:"희생"}]},{id:9601,hanja:"汎",strokes:"",def:{en:[],kr:["뜰","범"]},hunum:[{kor:"범",def:"뜰"},{kor:"봉",def:"뜰"}]},{id:9602,hanja:"汁",strokes:"",def:{en:[],kr:["즙","즙"]},hunum:[{kor:"즙",def:"즙"},{kor:"집",def:"진액"}]},{id:9603,hanja:"汨",strokes:"",def:{en:[],kr:["빠질","골"]},hunum:[{kor:"골",def:"빠질"},{kor:"멱",def:"물이름"}]},{id:9604,hanja:"遁",strokes:"",def:{en:[],kr:["달아날","돈"]},hunum:[{kor:"돈",def:"달아날"},{kor:"둔",def:"달아날"}]},{id:9605,hanja:"汽",strokes:"",def:{en:[],kr:["김","기"]},hunum:[{kor:"기",def:"김"},{kor:"흘",def:"거의"}]},{id:9606,hanja:"粥",strokes:"",def:{en:[],kr:["북쪽","오랑캐","육"]},hunum:[{kor:"육",def:"팔"},{kor:"죽",def:"죽"}]},{id:9607,hanja:"撲",strokes:"",def:{en:[],kr:["업어질","박"]},hunum:[{kor:"박",def:"업어질"},{kor:"복",def:"닦을"}]},{id:9608,hanja:"套",strokes:"",def:{en:[],kr:["땅이","굽어진","곳","토"]},hunum:[{kor:"토",def:"장대할"},{kor:"투",def:"전례"}]},{id:9609,hanja:"契",strokes:"",def:{en:[],kr:["맺을","계"]},hunum:[{kor:"계",def:"맺을"},{kor:"글",def:"부족 이름"}]},{id:9610,hanja:"奈",strokes:"",def:{en:[],kr:["어찌","나"]},hunum:[{kor:"나",def:"어찌"},{kor:"내",def:"어찌"}]},{id:9611,hanja:"奭",strokes:"",def:{en:[],kr:["클","석"]},hunum:[{kor:"석",def:"클"},{kor:"학",def:"성대할"}]},{id:9612,hanja:"奥",strokes:"",def:{en:[],kr:["奧와","同字"]},hunum:[{kor:"오",def:"깊을"},{kor:"욱",def:"따스할"}]},{id:9613,hanja:"奧",strokes:"",def:{en:[],kr:["깊을","오"]},hunum:[{kor:"오",def:"속"},{kor:"욱",def:"따스할"}]},{id:9614,hanja:"肦",strokes:"",def:{en:[],kr:["나눌","반"]},hunum:[{kor:"반",def:"나눌"},{kor:"분",def:"머리 클"}]},{id:9615,hanja:"肺",strokes:"",def:{en:[],kr:["성할","패"]},hunum:[{kor:"패",def:"성할"},{kor:"폐",def:"허파"}]},{id:9616,hanja:"肉",strokes:"",def:{en:[],kr:["살찔","유"]},hunum:[{kor:"유",def:"둘레"},{kor:"육",def:"고기"}]},{id:9617,hanja:"肖",strokes:"",def:{en:[],kr:["흩어질","소"]},hunum:[{kor:"소",def:"쇠약할"},{kor:"초",def:"닮을"}]},{id:9618,hanja:"躇",strokes:"",def:{en:[],kr:["머뭇거릴","저"]},hunum:[{kor:"저",def:"머뭇거릴"},{kor:"착",def:"머뭇거릴"}]},{id:9619,hanja:"躍",strokes:"",def:{en:[],kr:["뛸","약"]},hunum:[{kor:"약",def:"뛸"},{kor:"적",def:"뛸"}]},{id:9620,hanja:"瑩",strokes:"",def:{en:[],kr:["밝을","영"]},hunum:[{kor:"영",def:"귀막이 옥"},{kor:"형",def:"밝을"}]},{id:9621,hanja:"餐",strokes:"",def:{en:[],kr:["물에","만","밥","손"]},hunum:[{kor:"손",def:"먹을"},{kor:"찬",def:"먹을"}]},{id:9622,hanja:"揣",strokes:"",def:{en:[],kr:["요량할","취"]},hunum:[{kor:"취",def:"잴"},{kor:"타",def:"헤아릴"}]},{id:9623,hanja:"揭",strokes:"",def:{en:[],kr:["등에","질","갈"]},hunum:[{kor:"갈",def:"높이 들"},{kor:"게",def:"높이 들"}]},{id:9624,hanja:"揖",strokes:"",def:{en:[],kr:["공손할","읍"]},hunum:[{kor:"읍",def:"읍할"},{kor:"즙",def:"모을"}]},{id:9625,hanja:"提",strokes:"",def:{en:[],kr:["고을이름","시"]},hunum:[{kor:"시",def:"떼지어 날"},{kor:"제",def:"끌"}]},{id:9626,hanja:"揜",strokes:"",def:{en:[],kr:["덮을","암"]},hunum:[{kor:"암",def:"덮을"},{kor:"엄",def:"찾아가질"}]},{id:9627,hanja:"揀",strokes:"",def:{en:[],kr:["가릴","간"]},hunum:[{kor:"간",def:"가릴"},{kor:"연",def:"가릴"}]},{id:9628,hanja:"挈",strokes:"",def:{en:[],kr:["끊을","계"]},hunum:[{kor:"계",def:"끊을"},{kor:"설",def:"손에들"}]},{id:9629,hanja:"釵",strokes:"",def:{en:[],kr:["비녀","차"]},hunum:[{kor:"차",def:"비녀"},{kor:"채",def:"비녀"}]},{id:9630,hanja:"金",strokes:"",def:{en:[],kr:["쇠","금"]},hunum:[{kor:"금",def:"쇠"},{kor:"김",def:"사람의 성"}]},{id:9631,hanja:"釐",strokes:"",def:{en:[],kr:["다스릴","리"]},hunum:[{kor:"리",def:"다스릴"},{kor:"희",def:"제사 지내는 고기"}]},{id:9632,hanja:"刺",strokes:"",def:{en:[],kr:["찌를","자"]},hunum:[{kor:"자",def:"찌를"},{kor:"척",def:"찌를"}]},{id:9633,hanja:"刕",strokes:"",def:{en:[]},hunum:[{kor:"리",def:"벨"}]},{id:9634,hanja:"分",strokes:"",def:{en:[],kr:["나눌","분"]},hunum:[{kor:"분",def:"나눌"},{kor:"푼",def:"세는 단위"}]},{id:9635,hanja:"切",strokes:"",def:{en:[],kr:["진맥할","절"]},hunum:[{kor:"절",def:"끊을"},{kor:"체",def:"온통"}]},{id:9636,hanja:"觜",strokes:"",def:{en:[],kr:["털뿔","자"]},hunum:[{kor:"자",def:"털뿔"},{kor:"취",def:"부리"}]},{id:9637,hanja:"角",strokes:"",def:{en:[],kr:["뿔","각"]},hunum:[{kor:"각",def:"뿔"},{kor:"녹",def:"사람이름"}]},{id:9638,hanja:"角",strokes:"",def:{en:[]},hunum:[{kor:"각",def:"뿔"},{kor:"녹",def:"사람이름"}]},{id:9639,hanja:"解",strokes:"",def:{en:[],kr:["발신할","개"]},hunum:[{kor:"개",def:"벗을"},{kor:"해",def:"쪼갤"}]},{id:9640,hanja:"脱",strokes:"",def:{en:[],kr:["脫과","同字"]},hunum:[{kor:"탈",def:"벗을"},{kor:"태",def:"기뻐할"}]},{id:9641,hanja:"脧",strokes:"",def:{en:[],kr:["줄일","선"]},hunum:[{kor:"죄",def:"불알"}]},{id:9642,hanja:"脫",strokes:"",def:{en:[],kr:["그르칠","탈"]},hunum:[{kor:"탈",def:"벗어날"},{kor:"태",def:"천천할"}]},{id:9643,hanja:"捻",strokes:"",def:{en:[],kr:["비틀","념"]},hunum:[{kor:"념",def:"비틀"},{kor:"녑",def:"비틀"}]},{id:9644,hanja:"隕",strokes:"",def:{en:[],kr:["곤란할","운"]},hunum:[{kor:"운",def:"떨어질"},{kor:"원",def:"폭원"}]},{id:9645,hanja:"壞",strokes:"",def:{en:[],kr:["무너질","괴"]},hunum:[{kor:"괴",def:"무너질"},{kor:"회",def:"혹"}]},{id:9646,hanja:"壘",strokes:"",def:{en:[],kr:["진","루"]},hunum:[{kor:"루",def:"진"}]},{id:9647,hanja:"冒",strokes:"",def:{en:[],kr:["가릴","모"]},hunum:[{kor:"모",def:"가릴"},{kor:"목",def:"무릅쓸"}]},{id:9648,hanja:"内",strokes:"",def:{en:[],kr:["받아들일","납"]},hunum:[{kor:"납",def:"받아들일"},{kor:"내",def:"안"}]},{id:9649,hanja:"円",strokes:"",def:{en:[]},hunum:[{kor:"옌",def:"화폐 단위"}]},{id:9650,hanja:"輅",strokes:"",def:{en:[],kr:["수레","로"]},hunum:[{kor:"로",def:"수레"},{kor:"핵",def:"수레앞 가로막이 나무"}]},{id:9651,hanja:"較",strokes:"",def:{en:[],kr:["수레","귀","각"]},hunum:[{kor:"각",def:"수레 귀"},{kor:"교",def:"견줄"}]},{id:9652,hanja:"輻",strokes:"",def:{en:[],kr:["바퀴살","복"]},hunum:[{kor:"복",def:"바퀴살"},{kor:"폭",def:"바퀴살통"}]},{id:9653,hanja:"虫",strokes:"",def:{en:[],kr:["벌레","충"]},hunum:[{kor:"충",def:"벌레"},{kor:"훼",def:"벌레"}]},{id:9654,hanja:"虹",strokes:"",def:{en:[],kr:["골이름","강"]},hunum:[{kor:"강",def:"골이름"},{kor:"홍",def:"무지개"}]},{id:9655,hanja:"酢",strokes:"",def:{en:[],kr:["초","작"]},hunum:[{kor:"작",def:"초"},{kor:"초",def:"초"}]},{id:9656,hanja:"羡",strokes:"",def:{en:[],kr:["현이름","선"]},hunum:[{kor:"선",def:"현이름"},{kor:"이",def:"고을 이름"}]},{id:9657,hanja:"羨",strokes:"",def:{en:[],kr:["부러워할","선"]},hunum:[{kor:"선",def:"부러워할"},{kor:"연",def:"광중길"}]},{id:9658,hanja:"齜",strokes:"",def:{en:[],kr:["뻐드렁니","재"]},hunum:[{kor:"재",def:"이 갈"},{kor:"차",def:"이를 갈"}]},{id:9659,hanja:"斡",strokes:"",def:{en:[],kr:["관리할","간"]},hunum:[{kor:"간",def:"관리할"},{kor:"알",def:"돌릴"}]},{id:9660,hanja:"施",strokes:"",def:{en:[],kr:["공로","시"]},hunum:[{kor:"시",def:"베풀"},{kor:"이",def:"비뚤어질"}]},{id:9661,hanja:"於",strokes:"",def:{en:[],kr:["대신할","어"]},hunum:[{kor:"어",def:"방향의 어조사"},{kor:"오",def:"오홉다 외칠"}]},{id:9662,hanja:"齊",strokes:"",def:{en:[],kr:["상옷","아랫단할","자"]},hunum:[{kor:"자",def:"상옷 아랫단할"},{kor:"제",def:"가지런할"}]},{id:9663,hanja:"斜",strokes:"",def:{en:[],kr:["비낄","사"]},hunum:[{kor:"사",def:"비낄"},{kor:"야",def:"고을이름"}]},{id:9664,hanja:"填",strokes:"",def:{en:[],kr:["塼과","同字"]},hunum:[{kor:"전",def:"메울"},{kor:"진",def:"진정할"}]},{id:9665,hanja:"塡",strokes:"",def:{en:[],kr:["병들","전"]},hunum:[{kor:"전",def:"메울"},{kor:"진",def:"누를"}]},{id:9666,hanja:"塞",strokes:"",def:{en:[],kr:["변방","새"]},hunum:[{kor:"새",def:"변방"},{kor:"색",def:"막힐"}]},{id:9667,hanja:"膜",strokes:"",def:{en:[],kr:["막","막"]},hunum:[{kor:"막",def:"막"},{kor:"모",def:"무릎 꿇을"}]},{id:9668,hanja:"辟",strokes:"",def:{en:[],kr:["임금","벽"]},hunum:[{kor:"벽",def:"임금"},{kor:"피",def:"피할"}]},{id:9669,hanja:"辰",strokes:"",def:{en:[],kr:["날","신"]},hunum:[{kor:"신",def:"날"},{kor:"진",def:"다섯째지지"}]},{id:9670,hanja:"阨",strokes:"",def:{en:[],kr:["隘와","同字"]},hunum:[{kor:"애",def:"험할"},{kor:"액",def:"막힐"}]},{id:9671,hanja:"阮",strokes:"",def:{en:[],kr:["성씨","완"]},hunum:[{kor:"완",def:"성씨"},{kor:"원",def:"원나라"}]},{id:9672,hanja:"阿",strokes:"",def:{en:[],kr:["알랑거릴","아"]},hunum:[{kor:"아",def:"언덕"},{kor:"옥",def:"누구"}]},{id:9673,hanja:"儶",strokes:"",def:{en:[],kr:["잴","혜"]},hunum:[{kor:"혜",def:"빠를"},{kor:"휴",def:"끝"}]},{id:9674,hanja:"儿",strokes:"",def:{en:[],kr:["어진","사람","궤"]},hunum:[{kor:"궤",def:"어진 사람"},{kor:"인",def:"어진사람"}]},{id:9675,hanja:"滑",strokes:"",def:{en:[],kr:["어지러울","골"]},hunum:[{kor:"골",def:"어지러울"},{kor:"활",def:"미끄러울"}]},{id:9676,hanja:"蛇",strokes:"",def:{en:[],kr:["뱀","사"]},hunum:[{kor:"사",def:"뱀"},{kor:"이",def:"든든할"}]},{id:9677,hanja:"蛙",strokes:"",def:{en:[],kr:["개구리","와"]},hunum:[{kor:"와",def:"개구리"},{kor:"왜",def:"개구리"}]},{id:9678,hanja:"縦",strokes:"",def:{en:[],kr:["세로","종"]},hunum:[{kor:"종",def:"세로"},{kor:"총",def:"바뿔"}]},{id:9679,hanja:"縱",strokes:"",def:{en:[],kr:["늘어질","종"]},hunum:[{kor:"종",def:"늘어질"},{kor:"총",def:"바쁠"}]},{id:9680,hanja:"縁",strokes:"",def:{en:[],kr:["緣의","略字"]},hunum:[{kor:"연",def:"인연"}]},{id:9681,hanja:"縊",strokes:"",def:{en:[],kr:["목","맬","액"]},hunum:[{kor:"액",def:"목 맬"},{kor:"의",def:"목 맬"}]},{id:9682,hanja:"攝",strokes:"",def:{en:[],kr:["항복할","섭"]},hunum:[{kor:"섭",def:"몰아 잡을"},{kor:"엽",def:"가질"}]},{id:9683,hanja:"矜",strokes:"",def:{en:[],kr:["창자루","근"]},hunum:[{kor:"근",def:"창자루"},{kor:"긍",def:"불쌍히 여길"}]},{id:9684,hanja:"鬨",strokes:"",def:{en:[],kr:["싸움소리","항"]},hunum:[{kor:"항",def:"싸움소리"},{kor:"홍",def:"싸울"}]},{id:9685,hanja:"谷",strokes:"",def:{en:[],kr:["골짜기","곡"]},hunum:[{kor:"곡",def:"골짜기"},{kor:"욕",def:"성씨"}]},{id:9686,hanja:"隘",strokes:"",def:{en:[],kr:["좁을","애"]},hunum:[{kor:"애",def:"좁을"},{kor:"액",def:"막을"}]},{id:9687,hanja:"洗",strokes:"",def:{en:[],kr:["율이름","선"]},hunum:[{kor:"선",def:"조촐할"},{kor:"세",def:"씻을"}]},{id:9688,hanja:"傍",strokes:"",def:{en:[],kr:["곁","방"]},hunum:[{kor:"방",def:"곁"},{kor:"팽",def:"마지못할"}]},{id:9689,hanja:"伯",strokes:"",def:{en:[],kr:["맏","백"]},hunum:[{kor:"백",def:"맏"},{kor:"패",def:"우두머리"}]},{id:9690,hanja:"会",strokes:"",def:{en:[],kr:["會의","略字"]},hunum:[{kor:"회",def:"모일"}]},{id:9691,hanja:"伜",strokes:"",def:{en:[]},hunum:[{kor:"쉬",def:"버금"},{kor:"졸",def:"백 사람"}]},{id:9692,hanja:"伈",strokes:"",def:{en:[],kr:["두려워할","심"]},hunum:[{kor:"심",def:"두려워할"},{kor:"침",def:"두려워할"}]},{id:9693,hanja:"伏",strokes:"",def:{en:[],kr:["엎드릴","복"]},hunum:[{kor:"복",def:"엎드릴"},{kor:"부",def:"알 안을"}]},{id:9694,hanja:"伏",strokes:"",def:{en:[],kr:["알","안을","부"]},hunum:[{kor:"복",def:"엎드릴"},{kor:"부",def:"알 안을"}]},{id:9695,hanja:"湯",strokes:"",def:{en:[],kr:["물흐를","상"]},hunum:[{kor:"상",def:"물흐를"},{kor:"탕",def:"물 끓일"}]},{id:9696,hanja:"湲",strokes:"",def:{en:[],kr:["물","졸졸","흐를","원"]},hunum:[{kor:"원",def:"물소리"},{kor:"환",def:"물소리"}]},{id:9697,hanja:"湛",strokes:"",def:{en:[],kr:["즐거울","담"]},hunum:[{kor:"담",def:"즐거울"},{kor:"침",def:"빠질"}]},{id:9698,hanja:"鱖",strokes:"",def:{en:[],kr:["쏘가리","궐"]},hunum:[{kor:"궐",def:"쏘가리"},{kor:"궤",def:"쏘가리"}]},{id:9699,hanja:"暠",strokes:"",def:{en:[],kr:["흴","고"]},hunum:[{kor:"고",def:"흴"},{kor:"호",def:"흴"}]},{id:9700,hanja:"鱺",strokes:"",def:{en:[],kr:["뱀장어","려"]},hunum:[{kor:"려",def:"뱀장어"},{kor:"리",def:"뱀장어"}]},{id:9701,hanja:"暖",strokes:"",def:{en:[],kr:["따뜻할","난"]},hunum:[{kor:"난",def:"따뜻할"},{kor:"훤",def:"부드러울"}]},{id:9702,hanja:"暈",strokes:"",def:{en:[],kr:["어지러울","운"]},hunum:[{kor:"운",def:"무리"},{kor:"훈",def:"무리"}]},{id:9703,hanja:"醋",strokes:"",def:{en:[],kr:["술잔을","돌릴","작"]},hunum:[{kor:"작",def:"술잔을 돌릴"},{kor:"초",def:"초산"}]},{id:9704,hanja:"彭",strokes:"",def:{en:[],kr:["많을","방"]},hunum:[{kor:"방",def:"많을"},{kor:"팽",def:"성씨"}]},{id:9705,hanja:"彗",strokes:"",def:{en:[],kr:["대빗자루","세"]},hunum:[{kor:"수",def:"혜성"},{kor:"혜",def:"비"}]},{id:9706,hanja:"貌",strokes:"",def:{en:[],kr:["모뜰","막"]},hunum:[{kor:"막",def:"모뜰"},{kor:"모",def:"얼굴"}]},{id:9707,hanja:"貸",strokes:"",def:{en:[],kr:["빌릴","대"]},hunum:[{kor:"대",def:"빌릴"},{kor:"특",def:"빌릴"}]},{id:9708,hanja:"責",strokes:"",def:{en:[],kr:["꾸짖을","채"]},hunum:[{kor:"채",def:"꾸짖을"},{kor:"책",def:"꾸짖을"}]},{id:9709,hanja:"霰",strokes:"",def:{en:[],kr:["싸라기눈","산"]},hunum:[{kor:"산",def:"싸라기눈"},{kor:"선",def:"싸락눈"}]},{id:9710,hanja:"霸",strokes:"",def:{en:[],kr:["달력","백"]},hunum:[{kor:"패",def:"으뜸"}]},{id:9711,hanja:"百",strokes:"",def:{en:[],kr:["힘쓸","맥"]},hunum:[{kor:"맥",def:"힘쓸"},{kor:"백",def:"일백"}]},{id:9712,hanja:"白",strokes:"",def:{en:[],kr:["땅이름","배"]},hunum:[{kor:"배",def:"땅이름"},{kor:"백",def:"흰"}]},{id:9713,hanja:"倍",strokes:"",def:{en:[],kr:["곱","배"]},hunum:[{kor:"배",def:"곱"},{kor:"패",def:"어길"}]},{id:9714,hanja:"便",strokes:"",def:{en:[],kr:["똥오줌","변"]},hunum:[{kor:"변",def:"똥오줌"},{kor:"편",def:"편할"}]},{id:9715,hanja:"侠",strokes:"",def:{en:[],kr:["俠의","俗字"]},hunum:[{kor:"겹",def:"의기로울"},{kor:"협",def:"의기로울"}]},{id:9716,hanja:"倭",strokes:"",def:{en:[],kr:["나라이름","왜"]},hunum:[{kor:"왜",def:"나라이름"},{kor:"위",def:"순한 모양"}]},{id:9717,hanja:"濫",strokes:"",def:{en:[],kr:["퍼질","람"]},hunum:[{kor:"람",def:"퍼질"},{kor:"함",def:"넘쳐흐를"}]},{id:9718,hanja:"借",strokes:"",def:{en:[],kr:["허락할","적"]},hunum:[{kor:"적",def:"빌릴"},{kor:"차",def:"빌"}]},{id:9719,hanja:"乞",strokes:"",def:{en:[],kr:["거지","걸"]},hunum:[{kor:"걸",def:"구걸할"},{kor:"기",def:"줄"}]},{id:9720,hanja:"示",strokes:"",def:{en:[],kr:["땅","귀신","기"]},hunum:[{kor:"기",def:"땅 귀신"},{kor:"시",def:"보일"}]},{id:9721,hanja:"礦",strokes:"",def:{en:[],kr:["쇳돌","광"]},hunum:[{kor:"광",def:"쇳돌"},{kor:"황",def:"쇳돌"}]},{id:9722,hanja:"昵",strokes:"",def:{en:[],kr:["아비사당","녜"]},hunum:[{kor:"녜",def:"아비사당"},{kor:"닐",def:"가깝게 할"}]},{id:9723,hanja:"昰",strokes:"",def:{en:[],kr:["是와","同字"]},hunum:[{kor:"시",def:"이"},{kor:"하",def:"여름"}]},{id:9724,hanja:"昭",strokes:"",def:{en:[],kr:["태평세월","소"]},hunum:[{kor:"소",def:"소명할"},{kor:"조",def:"밝을"}]},{id:9725,hanja:"昔",strokes:"",def:{en:[],kr:["옛","석"]},hunum:[{kor:"석",def:"옛"},{kor:"착",def:"옛"}]},{id:9726,hanja:"易",strokes:"",def:{en:[],kr:["바꿀","역"]},hunum:[{kor:"역",def:"바꿀"},{kor:"이",def:"쉬울"}]},{id:9727,hanja:"昆",strokes:"",def:{en:[],kr:["형","곤"]},hunum:[{kor:"곤",def:"형"},{kor:"혼",def:"덩어리"}]},{id:9728,hanja:"趨",strokes:"",def:{en:[],kr:["빠를","촉"]},hunum:[{kor:"촉",def:"빠를"},{kor:"추",def:"달아날"}]},{id:9729,hanja:"盖",strokes:"",def:{en:[],kr:["蓋의","俗字"]},hunum:[{kor:"개",def:"덮을"},{kor:"합",def:"이엉 덮을"}]},{id:9730,hanja:"盾",strokes:"",def:{en:[],kr:["사람이름","돈"]},hunum:[{kor:"돈",def:"사람이름"},{kor:"순",def:"방패"}]},{id:9731,hanja:"廓",strokes:"",def:{en:[],kr:["둘레","곽"]},hunum:[{kor:"곽",def:"둘레"},{kor:"확",def:"클"}]},{id:9732,hanja:"趁",strokes:"",def:{en:[],kr:["밟을","전"]},hunum:[{kor:"전",def:"밟을"},{kor:"진",def:"좇을"}]},{id:9733,hanja:"葯",strokes:"",def:{en:[],kr:["동일","악"]},hunum:[{kor:"악",def:"구리때 잎"},{kor:"약",def:"꽃밥"}]},{id:9734,hanja:"著",strokes:"",def:{en:[],kr:["옹저","저"]},hunum:[{kor:"저",def:"나타날"},{kor:"착",def:"분명할"}]},{id:9735,hanja:"葉",strokes:"",def:{en:[],kr:["고을이름","섭"]},hunum:[{kor:"섭",def:"고을이름"},{kor:"엽",def:"잎"}]},{id:9736,hanja:"串",strokes:"",def:{en:[],kr:["땅이름","곶"]},hunum:[{kor:"곶",def:"땅이름"},{kor:"관",def:"익힐"},{kor:"천",def:"꿸"}]},{id:9737,hanja:"串",strokes:"",def:{en:[],kr:["익힐","관"]},hunum:[{kor:"곶",def:"땅이름"},{kor:"관",def:"익힐"},{kor:"천",def:"꿸"}]},{id:9738,hanja:"个",strokes:"",def:{en:[],kr:["명당","곁방","가"]},hunum:[{kor:"개",def:"낱"}]},{id:9739,hanja:"且",strokes:"",def:{en:[],kr:["많을","저"]},hunum:[{kor:"저",def:"공손할"},{kor:"차",def:"또"}]},{id:9740,hanja:"丑",strokes:"",def:{en:[],kr:["사람이름","추"]},hunum:[{kor:"추",def:"수갑"},{kor:"축",def:"소"}]},{id:9741,hanja:"丐",strokes:"",def:{en:[],kr:["줄","갈"]},hunum:[{kor:"갈",def:"거지"},{kor:"개",def:"빌"}]},{id:9742,hanja:"不",strokes:"",def:{en:[],kr:["아닐","부"]},hunum:[{kor:"부",def:"아닐"},{kor:"불",def:"아닐"}]},{id:9743,hanja:"万",strokes:"",def:{en:[],kr:["일만","만"]},hunum:[{kor:"만",def:"일만"},{kor:"묵",def:"성씨"}]},{id:9744,hanja:"潘",strokes:"",def:{en:[],kr:["뜨물","반"]},hunum:[{kor:"반",def:"뜨물"},{kor:"번",def:"넘칠"}]},{id:9745,hanja:"禔",strokes:"",def:{en:[],kr:["편안할","시"]},hunum:[{kor:"시",def:"복"},{kor:"제",def:"복"}]},{id:9746,hanja:"鵠",strokes:"",def:{en:[],kr:["고니","곡"]},hunum:[{kor:"곡",def:"고니"},{kor:"혹",def:"고니"}]},{id:9747,hanja:"枳",strokes:"",def:{en:[],kr:["사타구니","기"]},hunum:[{kor:"기",def:"해할"},{kor:"지",def:"탱자나무"}]},{id:9748,hanja:"趣",strokes:"",def:{en:[]},hunum:[{kor:"촉",def:"재촉할"},{kor:"추",def:"벼슬 이름"},{kor:"취",def:"추창할"}]},{id:9749,hanja:"足",strokes:"",def:{en:[],kr:["발","족"]},hunum:[{kor:"족",def:"발"},{kor:"주",def:"지날"}]},{id:9750,hanja:"趵",strokes:"",def:{en:[],kr:["차는","소리","박"]},hunum:[{kor:"박",def:"차는 소리"},{kor:"작",def:"차는 소리"}]},{id:9751,hanja:"越",strokes:"",def:{en:[],kr:["월나라","월"]},hunum:[{kor:"월",def:"넘을"},{kor:"활",def:"부들자리"}]},{id:9752,hanja:"幀",strokes:"",def:{en:[],kr:["그림족자","정"]},hunum:[{kor:"정",def:"그림족자"}]},{id:9753,hanja:"平",strokes:"",def:{en:[],kr:["편편할","편"]},hunum:[{kor:"편",def:"편편할"},{kor:"평",def:"평탄할"}]},{id:9754,hanja:"煙",strokes:"",def:{en:[],kr:["연기","연"]},hunum:[{kor:"연",def:"연기"},{kor:"인",def:"김"}]},{id:9755,hanja:"煜",strokes:"",def:{en:[],kr:["성할","욱"]},hunum:[{kor:"욱",def:"비칠"},{kor:"읍",def:"비칠"}]},{id:9756,hanja:"煇",strokes:"",def:{en:[],kr:["지질","훈"]},hunum:[{kor:"훈",def:"지질"},{kor:"휘",def:"빛날"}]}];

var WORDS = [{english:"Altair",hangul:"견우성",hanja:"牽牛星",id:1},{english:"Amphibia",hangul:"양서류",hanja:"兩棲類",id:2},{english:"Arctic Ocean",hangul:"북빙양",hanja:"北氷洋",id:3},{english:"Australia",hangul:"호주",hanja:"濠洲",id:4,freq_deg:5664},{english:"Bible",hangul:"성서",hanja:"聖書",id:5},{english:"Caucasian",hangul:"백인",hanja:"白人",id:6,freq_deg:4419},{english:"Celsius",hangul:"섭씨",hanja:"攝氏",id:7,freq_deg:5149},{english:"Central America",hangul:"중미",hanja:"中米",id:8},{english:"China",hangul:"중국",hanja:"中國",id:9,freq_deg:5287},{english:"Chinese character",hangul:"한자",hanja:"漢字",id:10,freq_deg:2289},{english:"Communist China",hangul:"중공",hanja:"中共",id:11},{english:"Dead Sea",hangul:"사해",hanja:"死海",id:12},{english:"East Indies",hangul:"동인도",hanja:"東印度",id:13},{english:"Fallopian tube",hangul:"수란관",hanja:"輸卵管",id:14},{english:"Far East",hangul:"극동",hanja:"極東",id:15},{english:"Friday",hangul:"금요일",hanja:"金曜日",id:16,freq_deg:4843},{english:"German measles",hangul:"풍진",hanja:"風疹",id:17},{english:"Germany",hangul:"독일",hanja:"獨逸",id:18,freq_deg:5611},{english:"Great Bear",hangul:"북두칠성",hanja:"北斗七星",id:19},{english:"Holy Land",hangul:"성지",hanja:"聖地",id:20},{english:"Japan",hangul:"일본",hanja:"日本",id:21,freq_deg:5652},{english:"Korea",hangul:"한국",hanja:"韓國",id:22,freq_deg:5641},{english:"Lower House",hangul:"하원",hanja:"下院",id:23},{english:"Manchuria",hangul:"만주",hanja:"滿洲",id:24},{english:"Mediterranean Sea",hangul:"지중해",hanja:"地中海",id:25},{english:"Mesozoic era",hangul:"중생대",hanja:"中生代",id:26},{english:"Occident",hangul:"서반구",hanja:"西半球",id:27},{english:"Oriental",hangul:"동양풍",hanja:"東洋風",id:28},{english:"Red Sea",hangul:"홍해",hanja:"紅海",id:29},{english:"Saturday",hangul:"토요일",hanja:"土曜日",id:30,freq_deg:2020},{english:"Sirius",hangul:"천랑성",hanja:"天狼星",id:31},{english:"South China Sea",hangul:"남지나해",hanja:"南支那海",id:32},{english:"Sunday",hangul:"일요일",hanja:"日曜日",id:33,freq_deg:1569},{english:"Thursday",hangul:"목요일",hanja:"木曜日",id:34,freq_deg:5407},{english:"Tuesday",hangul:"화요일",hanja:"火曜日",id:35,freq_deg:5464},{english:"Wednesday",hangul:"수요일",hanja:"水曜日",id:36,freq_deg:4865},{english:"abbe",hangul:"신부",hanja:"神父",id:37,freq_deg:4692},{english:"abbreviation",hangul:"생략",hanja:"省略",id:38},{english:"abbreviation",hangul:"약어",hanja:"略語",id:39},{english:"abbreviation",hangul:"약자",hanja:"略字",id:40},{english:"abdication",hangul:"퇴위",hanja:"退位",id:41},{english:"abdomen",hangul:"복부",hanja:"腹部",id:42},{english:"abeyance",hangul:"중절",hanja:"中絶",id:43},{english:"abeyance",hangul:"정지",hanja:"停止",id:44,freq_deg:4223},{english:"ability",hangul:"능력",hanja:"能力",id:45,freq_deg:449},{english:"ability",hangul:"재능",hanja:"才能",id:46,freq_deg:3357},{english:"abnormality",hangul:"이상",hanja:"異常",id:47,freq_deg:2330},{english:"abolition",hangul:"폐지",hanja:"廢止",id:48,freq_deg:3832},{english:"aboriginal",hangul:"원주민",hanja:"原住民",id:49},{english:"abortion",hangul:"유산",hanja:"流産",id:50,freq_deg:4072},{english:"abrasion",hangul:"찰과상",hanja:"擦過傷",id:51},{english:"abscess",hangul:"농양",hanja:"膿瘍",id:52},{english:"abscondence",hangul:"실종",hanja:"失踪",id:53},{english:"absence",hangul:"부재",hanja:"不在",id:54,freq_deg:4199},{english:"absence",hangul:"결석",hanja:"缺席",id:55,freq_deg:5496},{english:"absorption",hangul:"흡수",hanja:"吸收",id:56},{english:"abstinence",hangul:"금욕",hanja:"禁慾",id:57},{english:"abstinence",hangul:"금주",hanja:"禁酒",id:58},{english:"abstract",hangul:"추상적인",hanja:"抽象",id:59},{english:"abundance",hangul:"풍부",hanja:"豊富",id:60},{english:"abundance",hangul:"윤택",hanja:"潤澤",id:61},{english:"abuse",hangul:"남용하다",hanja:"濫用",id:62},{english:"abuse",hangul:"악용하다",hanja:"惡用",id:63},{english:"abuse",hangul:"학대하다",hanja:"虐待",id:64},{english:"abuse",hangul:"악용",hanja:"惡用",id:65},{english:"abuse",hangul:"남용",hanja:"濫用",id:66},{english:"academic",hangul:"학구적인",hanja:"學究的",id:67},{english:"academy",hangul:"학원",hanja:"學園",id:68,freq_deg:2917},{english:"acceleration",hangul:"가속",hanja:"加速",id:69},{english:"acceleration",hangul:"촉진",hanja:"促進",id:70},{english:"acceleration",hangul:"가속도",hanja:"加速度",id:71},{english:"accent",hangul:"어조",hanja:"語調",id:72},{english:"accession",hangul:"계승",hanja:"繼承",id:73},{english:"accident",hangul:"사고",hanja:"事故",id:74,freq_deg:1694},{english:"acclamation",hangul:"환호",hanja:"歡呼",id:75},{english:"acclamation",hangul:"갈채",hanja:"喝采",id:76},{english:"accommodation",hangul:"적응",hanja:"適應",id:77,freq_deg:4521},{english:"accommodation",hangul:"화해",hanja:"和解",id:78},{english:"accommodation",hangul:"융통",hanja:"融通",id:79},{english:"accommodation",hangul:"편의",hanja:"便宜",id:80,freq_deg:3831},{english:"accompaniment",hangul:"반주",hanja:"伴奏",id:81},{english:"accomplice",hangul:"공범자",hanja:"共犯者",id:82},{english:"accomplice",hangul:"동류",hanja:"同類",id:83},{english:"accomplishment",hangul:"수행",hanja:"遂行",id:84},{english:"account",hangul:"기사",hanja:"記事",id:85,freq_deg:3730},{english:"accumulation",hangul:"집적",hanja:"集積",id:86},{english:"accumulation",hangul:"축적",hanja:"蓄積",id:87},{english:"accusation",hangul:"고소",hanja:"告訴",id:88},{english:"acetic acid",hangul:"초산",hanja:"醋酸",id:89},{english:"acidification",hangul:"산패",hanja:"酸敗",id:90},{english:"acidity",hangul:"산성",hanja:"酸性",id:91},{english:"acknowledgement",hangul:"승인",hanja:"承認",id:92},{english:"acquaintance",hangul:"면식",hanja:"面識",id:93},{english:"acquisition",hangul:"취득",hanja:"取得",id:94},{english:"acquisition",hangul:"획득",hanja:"獲得",id:95},{english:"acquit",hangul:"면제하다",hanja:"免除",id:96},{english:"acquittal",hangul:"석방",hanja:"釋放",id:97},{english:"acrobatic",hangul:"곡예",hanja:"曲藝",id:98},{english:"acrobatics",hangul:"곡예",hanja:"曲藝",id:99},{english:"act",hangul:"행위",hanja:"行爲",id:100,freq_deg:465},{english:"act",hangul:"작용하다",hanja:"作用",id:101,freq_deg:1379},{english:"action",hangul:"활동",hanja:"活動",id:102,freq_deg:277},{english:"action",hangul:"행동",hanja:"行動",id:103,freq_deg:395},{english:"action",hangul:"동작",hanja:"動作",id:104},{english:"action",hangul:"작용",hanja:"作用",id:105,freq_deg:957},{english:"active",hangul:"적극적인",hanja:"積極的",id:106},{english:"activity",hangul:"활동",hanja:"活動",id:107,freq_deg:277},{english:"activity",hangul:"활약",hanja:"活躍",id:108},{english:"activity",hangul:"활황",hanja:"活況",id:109},{english:"acupuncture",hangul:"침술",hanja:"鍼術",id:110},{english:"adaptation",hangul:"적응",hanja:"適應",id:111,freq_deg:4521},{english:"add",hangul:"가산하다",hanja:"加算",id:112},{english:"addend",hangul:"가수",hanja:"加數",id:113,freq_deg:1742},{english:"addition",hangul:"가산",hanja:"加算",id:114},{english:"adhesion",hangul:"집착",hanja:"執着",id:115},{english:"adhesion",hangul:"점착",hanja:"粘着",id:116},{english:"adjacent",hangul:"인접하는",hanja:"隣接",id:117},{english:"adjoin",hangul:"인접하다",hanja:"隣接",id:118},{english:"adjourn",hangul:"휴회하다",hanja:"休會",id:119},{english:"adjustment",hangul:"조절",hanja:"調節",id:120,freq_deg:4164},{english:"adjustment",hangul:"수정",hanja:"修整",id:121},{english:"adjustment",hangul:"조정",hanja:"調整",id:122,freq_deg:3177},{english:"administration",hangul:"경영",hanja:"經營",id:123,freq_deg:917},{english:"administration",hangul:"행정",hanja:"行政",id:124},{english:"admiral",hangul:"제독",hanja:"提督",id:125},{english:"admiration",hangul:"감탄",hanja:"感嘆",id:126},{english:"admission",hangul:"입장",hanja:"入場",id:127,freq_deg:400},{english:"admission",hangul:"자인",hanja:"自認",id:128},{english:"admonition",hangul:"훈계",hanja:"訓戒",id:129},{english:"adopt",hangul:"채용하다",hanja:"採用",id:130},{english:"adoption",hangul:"채택",hanja:"採擇",id:131},{english:"adoration",hangul:"숭배",hanja:"崇拜",id:132},{english:"adoration",hangul:"애모",hanja:"愛慕",id:133},{english:"adorer",hangul:"숭배자",hanja:"崇拜者",id:134},{english:"adult",hangul:"성인",hanja:"成人",id:135,freq_deg:3285},{english:"adulterer",hangul:"간부",hanja:"姦夫",id:136,freq_deg:1892},{english:"adultery",hangul:"간통",hanja:"姦通",id:137},{english:"advantage",hangul:"편의",hanja:"便宜",id:138,freq_deg:3831},{english:"advantage",hangul:"이점",hanja:"利点",id:139},{english:"adventure",hangul:"모험",hanja:"冒險",id:140},{english:"adverb",hangul:"부사",hanja:"副詞",id:141},{english:"adversity",hangul:"역경",hanja:"逆境",id:142},{english:"advertisement",hangul:"광고",hanja:"廣告",id:143,freq_deg:284},{english:"advice",hangul:"충고",hanja:"忠告",id:144,freq_deg:4894},{english:"advice",hangul:"조언",hanja:"助言",id:145},{english:"adviser",hangul:"조언자",hanja:"助言者",id:146},{english:"adviser",hangul:"고문",hanja:"顧問",id:147},{english:"advocacy",hangul:"변호",hanja:"辨護",id:148},{english:"advocacy",hangul:"주장",hanja:"主張",id:149,freq_deg:653},{english:"aeroplane",hangul:"비행기",hanja:"飛行機",id:150,freq_deg:1036},{english:"aesthetic",hangul:"심미적인",hanja:"審美的",id:151},{english:"affair",hangul:"사건",hanja:"事件",id:152,freq_deg:221},{english:"affection",hangul:"애정",hanja:"愛情",id:153,freq_deg:2632},{english:"affiliation",hangul:"가입",hanja:"加入",id:154,freq_deg:3530},{english:"affirmation",hangul:"단언",hanja:"斷言",id:155},{english:"afflux",hangul:"유입",hanja:"流入",id:156},{english:"afford",hangul:"산출하다",hanja:"産出",id:157},{english:"affront",hangul:"모욕하다",hanja:"侮辱",id:158},{english:"afterbirth",hangul:"후산",hanja:"後産",id:159},{english:"afterbrain",hangul:"후뇌",hanja:"後腦",id:160},{english:"afterdeck",hangul:"후갑판",hanja:"後甲板",id:161},{english:"afterimage",hangul:"잔상",hanja:"殘像",id:162},{english:"afternoon",hangul:"오후",hanja:"午後",id:163,freq_deg:538},{english:"afterpiece",hangul:"익살맞은 촌극",hanja:"寸劇",id:164},{english:"aftershock",hangul:"여진",hanja:"餘震",id:165},{english:"agate",hangul:"마노",hanja:"瑪瑙",id:166},{english:"age",hangul:"연령",hanja:"年齡",id:167,freq_deg:3616},{english:"age",hangul:"세대",hanja:"世代",id:168,freq_deg:1159},{english:"agency",hangul:"대리점",hanja:"代理店",id:169},{english:"agenda",hangul:"의제",hanja:"議題",id:170},{english:"agent",hangul:"대리인",hanja:"代理人",id:171},{english:"aggravation",hangul:"악화",hanja:"惡化",id:172},{english:"aggregation",hangul:"집성",hanja:"集成",id:173},{english:"aggression",hangul:"침략",hanja:"侵掠",id:174},{english:"aggressive",hangul:"침략적인",hanja:"侵略的",id:175},{english:"aggressor",hangul:"침략자",hanja:"侵略者",id:176},{english:"agitation",hangul:"동요",hanja:"動搖",id:177},{english:"agitation",hangul:"흥분",hanja:"興奮",id:178,freq_deg:4107},{english:"agitation",hangul:"동란",hanja:"動亂",id:179},{english:"agony",hangul:"고통",hanja:"苦痛",id:180,freq_deg:879},{english:"agony",hangul:"고뇌",hanja:"苦惱",id:181},{english:"agree",hangul:"일치하다",hanja:"一致",id:182,freq_deg:2214},{english:"agreement",hangul:"동의",hanja:"同意",id:183},{english:"agreement",hangul:"계약",hanja:"契約",id:184,freq_deg:2037},{english:"agreement",hangul:"일치",hanja:"一致",id:185,freq_deg:3670},{english:"agriculture",hangul:"농업",hanja:"農業",id:186,freq_deg:647},{english:"agriculture",hangul:"농학",hanja:"農學",id:187},{english:"agrostology",hangul:"화본학",hanja:"禾本學",id:188},{english:"ague",hangul:"오한",hanja:"惡寒",id:189},{english:"ahimsa",hangul:"불살생",hanja:"不殺生",id:190},{english:"aide",hangul:"부관",hanja:"副官",id:191},{english:"air",hangul:"공기",hanja:"空氣",id:192,freq_deg:5119},{english:"air",hangul:"공중",hanja:"空中",id:193,freq_deg:3065},{english:"air defense",hangul:"방공",hanja:"防空",id:194},{english:"air raid",hangul:"공습",hanja:"空襲",id:195},{english:"air transport",hangul:"공수",hanja:"空輸",id:196},{english:"airport",hangul:"공항",hanja:"空港",id:197,freq_deg:2109},{english:"airship",hangul:"비행선",hanja:"飛行船",id:198},{english:"alacrity",hangul:"민활",hanja:"敏活",id:199},{english:"alarm bell",hangul:"경종",hanja:"警鐘",id:200},{english:"albatross",hangul:"신천옹",hanja:"信天翁",id:201},{english:"algebra",hangul:"대수",hanja:"代數",id:202},{english:"algicide",hangul:"살조제",hanja:"殺藻劑",id:203},{english:"allegory",hangul:"우화",hanja:"寓話",id:204},{english:"alliance",hangul:"동맹",hanja:"同盟",id:205},{english:"alliteration",hangul:"두운",hanja:"頭韻",id:206},{english:"allotment",hangul:"할당",hanja:"割當",id:207},{english:"alloy",hangul:"합금",hanja:"合金",id:208},{english:"alloy",hangul:"합금하다",hanja:"合金",id:209},{english:"allurement",hangul:"유혹",hanja:"誘惑",id:210},{english:"almond",hangul:"편도",hanja:"扁桃",id:211},{english:"alms",hangul:"보시",hanja:"布施",id:212},{english:"aloe",hangul:"침향",hanja:"沈香",id:213},{english:"alternating current",hangul:"교류",hanja:"交流",id:214,freq_deg:2079},{english:"altitude",hangul:"고도",hanja:"高度",id:215},{english:"ambassador",hangul:"대사",hanja:"大使",id:216,freq_deg:4120},{english:"amber",hangul:"호박",hanja:"琥珀",id:217,freq_deg:3026},{english:"ambition",hangul:"야심",hanja:"野心",id:218},{english:"ambition",hangul:"대망",hanja:"大望",id:219},{english:"ambition",hangul:"패기",hanja:"覇氣",id:220},{english:"ambulance",hangul:"구급차",hanja:"救急車",id:221},{english:"ambush",hangul:"잠복",hanja:"潛伏",id:222},{english:"ambush",hangul:"복병",hanja:"伏兵",id:223},{english:"amendment",hangul:"개정",hanja:"改正",id:224},{english:"amethyst",hangul:"자수정",hanja:"紫水晶",id:225},{english:"amicable",hangul:"우호적인",hanja:"友好的",id:226},{english:"ammunition",hangul:"탄약",hanja:"彈藥",id:227},{english:"amnesty",hangul:"은사",hanja:"恩赦",id:228},{english:"amnesty",hangul:"대사",hanja:"大赦",id:229,freq_deg:4120},{english:"amnesty",hangul:"특사",hanja:"特赦",id:230},{english:"amplification",hangul:"부연",hanja:"敷衍",id:231},{english:"anabolism",hangul:"동화작용",hanja:"同化作用",id:232},{english:"analogy",hangul:"유추",hanja:"類推",id:233},{english:"analysis",hangul:"분석",hanja:"分析",id:234,freq_deg:855},{english:"analysis",hangul:"해석",hanja:"解析",id:235,freq_deg:2646},{english:"analysis",hangul:"분해",hanja:"分解",id:236},{english:"anarchy",hangul:"무정부",hanja:"無政府",id:237},{english:"anathema",hangul:"파문",hanja:"破門",id:238},{english:"ancestry",hangul:"계통",hanja:"系統",id:239},{english:"anecdote",hangul:"일화",hanja:"逸話",id:240},{english:"angina pectoris",hangul:"협심증",hanja:"狹心症",id:241},{english:"angiosperm",hangul:"피자식물",hanja:"被子植物",id:242},{english:"angle",hangul:"각도",hanja:"角度",id:243},{english:"anguish",hangul:"고뇌",hanja:"苦惱",id:244},{english:"angular velocity",hangul:"각속도",hanja:"角速度",id:245},{english:"animal",hangul:"동물",hanja:"動物",id:246},{english:"animal husbandry",hangul:"축산",hanja:"畜産",id:247},{english:"annihilation",hangul:"전멸",hanja:"全滅",id:248},{english:"anniversary",hangul:"기념일",hanja:"記念日",id:249,freq_deg:5565},{english:"annotation",hangul:"주석",hanja:"註釋",id:250},{english:"annotation",hangul:"주해",hanja:"註解",id:251},{english:"announcement",hangul:"발표",hanja:"發表",id:252,freq_deg:1090},{english:"annuity",hangul:"연금",hanja:"年金",id:253},{english:"anode",hangul:"양극",hanja:"陽極",id:254},{english:"anonym",hangul:"익명자",hanja:"匿名",id:255},{english:"anonymity",hangul:"익명",hanja:"匿名",id:256},{english:"anonymity",hangul:"무명",hanja:"無名",id:257},{english:"antagonism",hangul:"적대",hanja:"敵對",id:258},{english:"antenna",hangul:"촉각",hanja:"觸角",id:259},{english:"anthropoid",hangul:"유인원",hanja:"類人猿",id:260},{english:"anticipation",hangul:"예상",hanja:"豫想",id:261,freq_deg:2327},{english:"antipathy",hangul:"반감",hanja:"反感",id:262},{english:"antipodal",hangul:"대척적인",hanja:"對蹠的",id:263},{english:"antique",hangul:"고물",hanja:"古物",id:264},{english:"antithesis",hangul:"대조",hanja:"對照",id:265},{english:"antonym",hangul:"반의어",hanja:"反意語",id:266},{english:"anus",hangul:"항문",hanja:"肛門",id:267},{english:"anxiety",hangul:"불안",hanja:"不安",id:268,freq_deg:1734},{english:"aorta",hangul:"대동맥",hanja:"大動脈",id:269},{english:"aphorism",hangul:"격언",hanja:"格言",id:270},{english:"aphrodisiac",hangul:"최음제",hanja:"催淫劑",id:271},{english:"aphrodisiac",hangul:"미약",hanja:"媚藥",id:272},{english:"apiculture",hangul:"양봉",hanja:"養蜂",id:273},{english:"apocalypse",hangul:"묵시",hanja:"默示",id:274},{english:"apologize",hangul:"변명하다",hanja:"辨明",id:275},{english:"apology",hangul:"사죄",hanja:"謝罪",id:276},{english:"apostasy",hangul:"변절",hanja:"變節",id:277},{english:"apparatus",hangul:"장치",hanja:"裝置",id:278},{english:"apparition",hangul:"유령",hanja:"幽靈",id:279},{english:"apparition",hangul:"요괴",hanja:"妖怪",id:280},{english:"appeal",hangul:"애원하다",hanja:"哀願",id:281},{english:"appearance",hangul:"출현",hanja:"出現",id:282},{english:"appearance",hangul:"출두",hanja:"出頭",id:283},{english:"appearance",hangul:"외관",hanja:"外觀",id:284},{english:"appeasement",hangul:"진정",hanja:"鎭靜",id:285},{english:"appetite",hangul:"식욕",hanja:"食慾",id:286,freq_deg:5003},{english:"appetite",hangul:"욕망",hanja:"慾望",id:287},{english:"applicant",hangul:"응모자",hanja:"應募者",id:288},{english:"application",hangul:"신청",hanja:"申請",id:289,freq_deg:2045},{english:"application",hangul:"응용",hanja:"應用",id:290},{english:"appoint",hangul:"지명하다",hanja:"指名",id:291},{english:"appointment",hangul:"임명",hanja:"任命",id:292},{english:"appreciation",hangul:"감상",hanja:"鑑賞",id:293,freq_deg:4574},{english:"apprehend",hangul:"체포하다",hanja:"逮捕",id:294},{english:"apprehension",hangul:"체포",hanja:"逮捕",id:295},{english:"apprentice",hangul:"도제",hanja:"徒弟",id:296},{english:"apprentice",hangul:"견습",hanja:"見習",id:297},{english:"approach",hangul:"접근하다",hanja:"接近",id:298,freq_deg:2074},{english:"appropriation",hangul:"충당",hanja:"充當",id:299},{english:"approval",hangul:"시인",hanja:"是認",id:300,freq_deg:797},{english:"approval",hangul:"찬성",hanja:"贊成",id:301,freq_deg:5274},{english:"approving",hangul:"시인하는",hanja:"是認",id:302},{english:"approximately",hangul:"대략",hanja:"大略",id:303,freq_deg:3959},{english:"approximation",hangul:"근사치",hanja:"近似値",id:304},{english:"appurtenance",hangul:"종물",hanja:"從物",id:305},{english:"aptitude",hangul:"적성",hanja:"適性",id:306,freq_deg:3705},{english:"aquarium",hangul:"수족관",hanja:"水族館",id:307},{english:"arbitration",hangul:"중재",hanja:"仲裁",id:308},{english:"archer",hangul:"사수",hanja:"射手",id:309},{english:"archery",hangul:"궁술",hanja:"弓術",id:310},{english:"archetypal",hangul:"전형적인",hanja:"典型",id:311},{english:"archipelago",hangul:"군도",hanja:"群島",id:312},{english:"archipelago",hangul:"다도해",hanja:"多島海",id:313},{english:"archives",hangul:"공문서",hanja:"公文書",id:314},{english:"area",hangul:"면적",hanja:"面積",id:315,freq_deg:3149},{english:"area",hangul:"지역",hanja:"地域",id:316,freq_deg:143},{english:"area",hangul:"지방",hanja:"地方",id:317,freq_deg:4891},{english:"area",hangul:"영역",hanja:"領域",id:318,freq_deg:1190},{english:"aristocrat",hangul:"귀족",hanja:"貴族",id:319},{english:"arithmetic",hangul:"산수",hanja:"算數",id:320},{english:"arithmetic progression",hangul:"등차수열",hanja:"等差數列",id:321},{english:"ark",hangul:"방주",hanja:"方舟",id:322},{english:"arm",hangul:"무기",hanja:"武器",id:323,freq_deg:1827},{english:"arm",hangul:"병기",hanja:"兵器",id:324},{english:"armada",hangul:"함대",hanja:"艦隊",id:325},{english:"armament",hangul:"군비",hanja:"軍備",id:326},{english:"armistice",hangul:"휴전",hanja:"休戰",id:327},{english:"army",hangul:"육군",hanja:"陸軍",id:328,freq_deg:3516},{english:"army",hangul:"군대",hanja:"軍隊",id:329,freq_deg:1352},{english:"aroma",hangul:"방향",hanja:"芳香",id:330,freq_deg:433},{english:"aroma",hangul:"기품",hanja:"氣品",id:331},{english:"arrangement",hangul:"정리",hanja:"整理",id:332,freq_deg:5608},{english:"arrangement",hangul:"배열",hanja:"配列",id:333},{english:"arrangement",hangul:"편곡",hanja:"編曲",id:334},{english:"arrest",hangul:"체포하다",hanja:"逮捕",id:335},{english:"arrest",hangul:"저지하다",hanja:"沮止",id:336},{english:"arrest",hangul:"체포",hanja:"逮捕",id:337},{english:"arrival",hangul:"도착",hanja:"到着",id:338,freq_deg:5134},{english:"arrival",hangul:"출현",hanja:"出現",id:339},{english:"arson",hangul:"방화",hanja:"放火",id:340},{english:"art",hangul:"예술",hanja:"藝術",id:341,freq_deg:184},{english:"art gallery",hangul:"미술관",hanja:"美術館",id:342,freq_deg:3111},{english:"artery",hangul:"동맥",hanja:"動脈",id:343},{english:"article",hangul:"기사",hanja:"記事",id:344,freq_deg:3730},{english:"article",hangul:"물품",hanja:"物品",id:345},{english:"article",hangul:"조목",hanja:"條目",id:346},{english:"article",hangul:"조항",hanja:"條項",id:347},{english:"artificial flowers",hangul:"조화",hanja:"造花",id:348},{english:"artillery",hangul:"대포",hanja:"大砲",id:349},{english:"artillery",hangul:"포병",hanja:"砲兵",id:350},{english:"artillery",hangul:"포술",hanja:"砲術",id:351},{english:"artistic",hangul:"예술적인",hanja:"藝術的",id:352},{english:"artistic",hangul:"미술적인",hanja:"美術的",id:353},{english:"asbestos",hangul:"석면",hanja:"石綿",id:354},{english:"ascending",hangul:"상승적인",hanja:"上昇",id:355},{english:"ask",hangul:"청구하다",hanja:"請求",id:356},{english:"aspect",hangul:"국면",hanja:"局面",id:357},{english:"aspect",hangul:"양상",hanja:"樣相",id:358},{english:"asperse",hangul:"중상하다",hanja:"中傷",id:359},{english:"aspiration",hangul:"대망",hanja:"大望",id:360},{english:"aspiration",hangul:"포부",hanja:"抱負",id:361},{english:"assassin",hangul:"암살자",hanja:"暗殺者",id:362},{english:"assassin",hangul:"자객",hanja:"刺客",id:363},{english:"assassination",hangul:"암살",hanja:"暗殺",id:364},{english:"assassinator",hangul:"암살자",hanja:"暗殺者",id:365},{english:"assault",hangul:"폭행",hanja:"暴行",id:366},{english:"assembly",hangul:"집회",hanja:"集會",id:367},{english:"assembly",hangul:"회의",hanja:"會議",id:368,freq_deg:4024},{english:"assembly",hangul:"집합",hanja:"集合",id:369},{english:"assembly",hangul:"조립",hanja:"組立",id:370},{english:"assertion",hangul:"주장",hanja:"主張",id:371,freq_deg:653},{english:"asset",hangul:"자산",hanja:"資産",id:372},{english:"asset",hangul:"재산",hanja:"財産",id:373,freq_deg:589},{english:"assignment",hangul:"할당",hanja:"割當",id:374},{english:"assimilation",hangul:"동화",hanja:"同化",id:375},{english:"assistance",hangul:"조력",hanja:"助力",id:376},{english:"assistant",hangul:"조수",hanja:"助手",id:377},{english:"associate",hangul:"동료",hanja:"同僚",id:378},{english:"association",hangul:"조합",hanja:"組合",id:379},{english:"association",hangul:"교제",hanja:"交際",id:380},{english:"assortment",hangul:"종별",hanja:"種別",id:381},{english:"assumption",hangul:"가정",hanja:"假定",id:382,freq_deg:3531},{english:"assurance",hangul:"보증",hanja:"保證",id:383},{english:"assure",hangul:"보증하다",hanja:"保證",id:384},{english:"asthma",hangul:"천식",hanja:"喘息",id:385},{english:"astigmatism",hangul:"난시",hanja:"亂視",id:386},{english:"astrology",hangul:"점성술",hanja:"占星術",id:387},{english:"asymmetry",hangul:"비대칭",hanja:"非對稱",id:388},{english:"atheism",hangul:"무신론",hanja:"無神論",id:389},{english:"atmosphere",hangul:"대기",hanja:"大氣",id:390,freq_deg:1882},{english:"atmosphere",hangul:"공기",hanja:"空氣",id:391,freq_deg:5119},{english:"atoll",hangul:"환초",hanja:"環礁",id:392},{english:"atom",hangul:"원자",hanja:"原子",id:393},{english:"atom",hangul:"미진",hanja:"微塵",id:394},{english:"atomizer",hangul:"분무기",hanja:"噴霧器",id:395},{english:"atrium",hangul:"심방",hanja:"心房",id:396},{english:"atrophy",hangul:"위축하다",hanja:"萎縮",id:397},{english:"attachment",hangul:"애착",hanja:"愛着",id:398},{english:"attendance",hangul:"출석",hanja:"出席",id:399},{english:"attest",hangul:"증언하다",hanja:"證言",id:400},{english:"attitude",hangul:"자세",hanja:"姿勢",id:401,freq_deg:559},{english:"attitude",hangul:"태도",hanja:"態度",id:402,freq_deg:665},{english:"attorney",hangul:"대리인",hanja:"代理人",id:403},{english:"attribute",hangul:"속성",hanja:"屬性",id:404},{english:"audience",hangul:"청중",hanja:"聽衆",id:405},{english:"audit",hangul:"감사",hanja:"監査",id:406,freq_deg:4536},{english:"auditorium",hangul:"강당",hanja:"講堂",id:407,freq_deg:5044},{english:"aunt",hangul:"백모",hanja:"伯母",id:408},{english:"auscultation",hangul:"청진",hanja:"聽診",id:409},{english:"austerity",hangul:"엄격",hanja:"嚴格",id:410},{english:"austerity",hangul:"엄숙",hanja:"嚴肅",id:411},{english:"authenticity",hangul:"진실성",hanja:"眞實性",id:412},{english:"author",hangul:"저자",hanja:"著者",id:413,freq_deg:4221},{english:"authority",hangul:"권위",hanja:"權威",id:414,freq_deg:1864},{english:"authority",hangul:"권력",hanja:"權力",id:415},{english:"authority",hangul:"권능",hanja:"權能",id:416},{english:"authority",hangul:"권한",hanja:"權限",id:417},{english:"autism",hangul:"자폐증",hanja:"自閉症",id:418},{english:"autobiography",hangul:"자서전",hanja:"自敍傳",id:419},{english:"autocrat",hangul:"독재자",hanja:"獨裁者",id:420},{english:"autograph",hangul:"자서하다",hanja:"自署",id:421},{english:"automobile",hangul:"자동차",hanja:"自動車",id:422,freq_deg:714},{english:"autonomy",hangul:"자치",hanja:"自治",id:423},{english:"autopsy",hangul:"검시",hanja:"檢屍",id:424},{english:"auxiliary verb",hangul:"조동사",hanja:"助動詞",id:425},{english:"availability",hangul:"유효",hanja:"有效",id:426},{english:"avarice",hangul:"탐욕",hanja:"貪慾",id:427},{english:"avenge",hangul:"복수하다",hanja:"復讐",id:428},{english:"avenue",hangul:"가로",hanja:"街路",id:429,freq_deg:5115},{english:"avocation",hangul:"여기",hanja:"餘技",id:430,freq_deg:128},{english:"avoid",hangul:"회피하다",hanja:"回避",id:431},{english:"awakening",hangul:"각성",hanja:"覺醒",id:432},{english:"award",hangul:"수여하다",hanja:"授與",id:433},{english:"award",hangul:"재정하다",hanja:"裁定",id:434},{english:"axiom",hangul:"공리",hanja:"公理",id:435},{english:"axle",hangul:"차축",hanja:"車軸",id:436},{english:"backbone",hangul:"기골",hanja:"氣骨",id:437},{english:"background",hangul:"배경",hanja:"背景",id:438,freq_deg:1075},{english:"backing",hangul:"지원",hanja:"支援",id:439,freq_deg:915},{english:"backstroke",hangul:"배영",hanja:"背泳",id:440},{english:"backwoods",hangul:"오지",hanja:"奧地",id:441},{english:"badge",hangul:"기장",hanja:"記章",id:442},{english:"badness",hangul:"불량",hanja:"不良",id:443},{english:"bail",hangul:"보석",hanja:"保釋",id:444},{english:"baking soda",hangul:"중조",hanja:"重曹",id:445},{english:"balance",hangul:"균형",hanja:"均衡",id:446,freq_deg:1564},{english:"ball cartridge",hangul:"실탄",hanja:"實彈",id:447},{english:"balloon",hangul:"기구",hanja:"氣球",id:448,freq_deg:2703},{english:"balm",hangul:"향유",hanja:"香油",id:449},{english:"balsam",hangul:"봉선화",hanja:"鳳仙花",id:450},{english:"ban",hangul:"금지하다",hanja:"禁止",id:451,freq_deg:3729},{english:"ban",hangul:"금제",hanja:"禁制",id:452},{english:"bandage",hangul:"붕대",hanja:"繃帶",id:453},{english:"bandit",hangul:"산적",hanja:"山賊",id:454},{english:"banishment",hangul:"추방",hanja:"追放",id:455},{english:"bank",hangul:"제방",hanja:"堤防",id:456},{english:"bank",hangul:"은행",hanja:"銀行",id:457,freq_deg:532},{english:"bankruptcy",hangul:"파산",hanja:"破産",id:458},{english:"bankruptcy",hangul:"파탄",hanja:"破綻",id:459},{english:"banner",hangul:"기치",hanja:"旗幟",id:460},{english:"banquet",hangul:"연회",hanja:"宴會",id:461},{english:"baptism",hangul:"세례",hanja:"洗禮",id:462},{english:"barometer",hangul:"청우계",hanja:"晴雨計",id:463},{english:"baron",hangul:"남작",hanja:"男爵",id:464},{english:"barrack",hangul:"병영",hanja:"兵營",id:465},{english:"barrage",hangul:"탄막",hanja:"彈幕",id:466},{english:"barrier",hangul:"관문",hanja:"關門",id:467},{english:"barrier",hangul:"장벽",hanja:"障壁",id:468},{english:"basalt",hangul:"현무암",hanja:"玄武岩",id:469},{english:"base",hangul:"기지",hanja:"基地",id:470},{english:"base running",hangul:"주루",hanja:"走壘",id:471},{english:"baseball",hangul:"야구",hanja:"野球",id:472,freq_deg:2325},{english:"basement",hangul:"지하실",hanja:"地下室",id:473},{english:"basement",hangul:"지계",hanja:"地階",id:474},{english:"basic",hangul:"근본적인",hanja:"根本的",id:475},{english:"basis",hangul:"기초",hanja:"基礎",id:476,freq_deg:1094},{english:"basis",hangul:"근거",hanja:"根據",id:477,freq_deg:1111},{english:"basketball",hangul:"농구",hanja:"籠球",id:478,freq_deg:5311},{english:"bathing",hangul:"목욕",hanja:"沐浴",id:479,freq_deg:3150},{english:"bathroom",hangul:"욕실",hanja:"浴室",id:480,freq_deg:4813},{english:"bathtub",hangul:"욕조",hanja:"浴槽",id:481},{english:"battery",hangul:"전지",hanja:"電池",id:482},{english:"battle",hangul:"전투",hanja:"戰鬪",id:483},{english:"battle array",hangul:"진용",hanja:"陣容",id:484},{english:"battlefield",hangul:"전장",hanja:"戰場",id:485},{english:"battleship",hangul:"전함",hanja:"戰艦",id:486},{english:"bayonet",hangul:"총검",hanja:"銃劍",id:487},{english:"beach",hangul:"해변",hanja:"海邊",id:488},{english:"beachhead",hangul:"교두보",hanja:"橋頭堡",id:489},{english:"beacon",hangul:"봉화",hanja:"烽火",id:490},{english:"beam",hangul:"광선",hanja:"光線",id:491},{english:"beatitude",hangul:"지복",hanja:"至福",id:492},{english:"beaver",hangul:"해리",hanja:"海狸",id:493},{english:"bed",hangul:"침대",hanja:"寢臺",id:494,freq_deg:1472},{english:"bedding",hangul:"침구",hanja:"寢具",id:495},{english:"bedpan",hangul:"변기",hanja:"便器",id:496},{english:"bedrock",hangul:"암상",hanja:"岩床",id:497},{english:"bedroom",hangul:"침실",hanja:"寢室",id:498,freq_deg:4528},{english:"beer",hangul:"맥주",hanja:"麥酒",id:499,freq_deg:2464},{english:"beetle",hangul:"갑충",hanja:"甲蟲",id:500},{english:"beginner",hangul:"초심자",hanja:"初心者",id:501},{english:"beginning",hangul:"개시",hanja:"開始",id:502},{english:"beginning",hangul:"발단",hanja:"發端",id:503},{english:"behave",hangul:"행동하다",hanja:"行動",id:504,freq_deg:2105},{english:"being",hangul:"생존",hanja:"生存",id:505},{english:"belfry",hangul:"종루",hanja:"鐘樓",id:506},{english:"belief",hangul:"신념",hanja:"信念",id:507,freq_deg:3342},{english:"belief",hangul:"신앙",hanja:"信仰",id:508},{english:"belief",hangul:"신용",hanja:"信用",id:509,freq_deg:1965},{english:"believer",hangul:"신자",hanja:"信者",id:510},{english:"bell tower",hangul:"종루",hanja:"鐘樓",id:511},{english:"benefactor",hangul:"은인",hanja:"恩人",id:512},{english:"beneficial",hangul:"유익",hanja:"有益",id:513},{english:"benefit",hangul:"은혜",hanja:"恩惠",id:514},{english:"benzoin",hangul:"안식향",hanja:"安息香",id:515},{english:"bequest",hangul:"유증",hanja:"遺贈",id:516},{english:"bequest",hangul:"유산",hanja:"遺産",id:517,freq_deg:4072},{english:"bereavement",hangul:"사별",hanja:"死別",id:518},{english:"beriberi",hangul:"각기",hanja:"脚氣",id:519,freq_deg:2731},{english:"bespeak",hangul:"주문하다",hanja:"注文",id:520,freq_deg:4082},{english:"bestiality",hangul:"수간",hanja:"獸姦",id:521},{english:"betoken",hangul:"예시하다",hanja:"豫示",id:522},{english:"betrayal",hangul:"배신",hanja:"背信",id:523},{english:"betterment",hangul:"개선",hanja:"改善",id:524,freq_deg:1381},{english:"bewitch",hangul:"매혹하다",hanja:"魅惑",id:525},{english:"bicycle",hangul:"자전거",hanja:"自轉車",id:526,freq_deg:1083},{english:"bid",hangul:"입찰하다",hanja:"入札",id:527},{english:"bidding",hangul:"입찰",hanja:"入札",id:528},{english:"bigamist",hangul:"중혼자",hanja:"重婚者",id:529},{english:"bigamy",hangul:"중혼",hanja:"重婚",id:530},{english:"bile",hangul:"담즙",hanja:"膽汁",id:531},{english:"billiards",hangul:"당구",hanja:"撞球",id:532},{english:"bimetallism",hangul:"복본위제",hanja:"複本位制",id:533},{english:"binding",hangul:"속박",hanja:"束縛",id:534},{english:"binding",hangul:"속박하는",hanja:"束縛",id:535},{english:"biochemistry",hangul:"생화학",hanja:"生化學",id:536},{english:"biography",hangul:"전기",hanja:"傳記",id:537,freq_deg:4821},{english:"biology",hangul:"생물학",hanja:"生物學",id:538},{english:"biplane",hangul:"복엽",hanja:"複葉",id:539},{english:"birth",hangul:"출생",hanja:"出生",id:540},{english:"birth",hangul:"탄생",hanja:"誕生",id:541,freq_deg:3260},{english:"birth",hangul:"출산",hanja:"出産",id:542,freq_deg:1755},{english:"bivouac",hangul:"야영하다",hanja:"野營",id:543},{english:"black tea",hangul:"홍차",hanja:"紅茶",id:544,freq_deg:5478},{english:"blast furnace",hangul:"고로",hanja:"高爐",id:545},{english:"blasting",hangul:"발파",hanja:"發破",id:546},{english:"blaze",hangul:"화염",hanja:"火炎",id:547},{english:"bleaching",hangul:"표백",hanja:"漂白",id:548},{english:"blessedness",hangul:"행복",hanja:"幸福",id:549,freq_deg:1713},{english:"blessing",hangul:"축복",hanja:"祝福",id:550},{english:"blind spot",hangul:"맹점",hanja:"盲点",id:551},{english:"blinking",hangul:"명멸하는",hanja:"明滅",id:552},{english:"blockade",hangul:"봉쇄",hanja:"封鎖",id:553},{english:"blood",hangul:"혈액",hanja:"血液",id:554,freq_deg:3397},{english:"blood cell",hangul:"혈구",hanja:"血球",id:555},{english:"blood clot",hangul:"혈괴",hanja:"血塊",id:556},{english:"blood poisoning",hangul:"패혈증",hanja:"敗血症",id:557},{english:"blood pressure",hangul:"혈압",hanja:"血壓",id:558},{english:"blood vessel",hangul:"혈관",hanja:"血管",id:559},{english:"bloodshed",hangul:"유혈",hanja:"流血",id:560},{english:"bloodsucker",hangul:"흡혈귀",hanja:"吸血鬼",id:561},{english:"blot",hangul:"오점",hanja:"汚点",id:562},{english:"blowpipe",hangul:"취관",hanja:"吹管",id:563},{english:"blueprint",hangul:"청사진",hanja:"靑寫眞",id:564},{english:"boiling",hangul:"비등",hanja:"沸騰",id:565},{english:"boiling",hangul:"비등하는",hanja:"沸騰",id:566},{english:"bomb",hangul:"폭탄",hanja:"爆彈",id:567},{english:"bond",hangul:"증서",hanja:"證書",id:568},{english:"book burning",hangul:"분서",hanja:"焚書",id:569},{english:"book review",hangul:"서평",hanja:"書評",id:570},{english:"booking",hangul:"예약",hanja:"豫約",id:571,freq_deg:5174},{english:"bookkeeping",hangul:"부기",hanja:"簿記",id:572},{english:"bookshelf",hangul:"서가",hanja:"書架",id:573},{english:"booth",hangul:"노점",hanja:"露店",id:574},{english:"booty",hangul:"전리품",hanja:"戰利品",id:575},{english:"boredom",hangul:"권태",hanja:"倦怠",id:576},{english:"borrowing",hangul:"차용",hanja:"借用",id:577},{english:"botany",hangul:"식물학",hanja:"植物學",id:578},{english:"bottleneck",hangul:"애로",hanja:"隘路",id:579},{english:"bound",hangul:"한계",hanja:"限界",id:580,freq_deg:892},{english:"boundary",hangul:"경계",hanja:"境界",id:581,freq_deg:2134},{english:"boxing",hangul:"권투",hanja:"拳鬪",id:582,freq_deg:4675},{english:"boy",hangul:"소년",hanja:"少年",id:583,freq_deg:954},{english:"boycott",hangul:"배척하다",hanja:"排斥",id:584},{english:"brace",hangul:"지주",hanja:"支柱",id:585},{english:"brain",hangul:"두뇌",hanja:"頭腦",id:586},{english:"brain wave",hangul:"뇌파",hanja:"腦波",id:587},{english:"brainwashing",hangul:"세뇌",hanja:"洗腦",id:588},{english:"branch",hangul:"분파",hanja:"分派",id:589},{english:"branch",hangul:"지류",hanja:"支流",id:590},{english:"branch",hangul:"지맥",hanja:"支脈",id:591},{english:"brand",hangul:"낙인",hanja:"烙印",id:592},{english:"bravery",hangul:"용감",hanja:"勇敢",id:593},{english:"breach",hangul:"위반",hanja:"違反",id:594,freq_deg:1888},{english:"breach",hangul:"절교",hanja:"絶交",id:595},{english:"breakdown",hangul:"쇠약",hanja:"衰弱",id:596},{english:"breakfast",hangul:"조반",hanja:"朝飯",id:597},{english:"breakup",hangul:"해산",hanja:"解散",id:598},{english:"breakwater",hangul:"방파제",hanja:"防波堤",id:599},{english:"breast",hangul:"흉부",hanja:"胸部",id:600},{english:"breast",hangul:"유방",hanja:"乳房",id:601},{english:"breastwork",hangul:"흉벽",hanja:"胸壁",id:602},{english:"breath",hangul:"호흡",hanja:"呼吸",id:603,freq_deg:2058},{english:"breathe",hangul:"휴식하다",hanja:"休息",id:604},{english:"breeding",hangul:"사육",hanja:"飼育",id:605},{english:"brethren",hangul:"동포",hanja:"同胞",id:606},{english:"brevity",hangul:"간결",hanja:"簡潔",id:607},{english:"bribery",hangul:"증수회",hanja:"贈收賄",id:608},{english:"bride",hangul:"신부",hanja:"新婦",id:609,freq_deg:4692},{english:"bridge",hangul:"함교",hanja:"艦橋",id:610},{english:"bridgehead",hangul:"교두보",hanja:"橋頭堡",id:611},{english:"brigade",hangul:"여단",hanja:"旅團",id:612},{english:"brigand",hangul:"산적",hanja:"山賊",id:613},{english:"brilliance",hangul:"광채",hanja:"光彩",id:614},{english:"bristle",hangul:"강모",hanja:"剛毛",id:615},{english:"broad bean",hangul:"잠두",hanja:"蠶豆",id:616},{english:"broadcast",hangul:"방송하다",hanja:"放送",id:617,freq_deg:4633},{english:"broadcast",hangul:"방송",hanja:"放送",id:618,freq_deg:480},{english:"broadcasting",hangul:"방송",hanja:"放送",id:619,freq_deg:480},{english:"brokerage",hangul:"구전",hanja:"口錢",id:620},{english:"bronze",hangul:"청동",hanja:"靑銅",id:621},{english:"brown coal",hangul:"갈탄",hanja:"褐炭",id:622},{english:"brutality",hangul:"만행",hanja:"蠻行",id:623},{english:"budget",hangul:"예산",hanja:"豫算",id:624,freq_deg:1436},{english:"building",hangul:"건물",hanja:"建物",id:625,freq_deg:576},{english:"bulb",hangul:"구근",hanja:"球根",id:626},{english:"buoyancy",hangul:"부력",hanja:"浮力",id:627},{english:"burden",hangul:"부담",hanja:"負擔",id:628,freq_deg:1064},{english:"bureaucrat",hangul:"관료",hanja:"官僚",id:629},{english:"burial",hangul:"매장",hanja:"埋葬",id:630,freq_deg:2708},{english:"business",hangul:"실업",hanja:"實業",id:631},{english:"business",hangul:"영업",hanja:"營業",id:632,freq_deg:2791},{english:"business",hangul:"사업",hanja:"事業",id:633,freq_deg:464},{english:"business",hangul:"용건",hanja:"用件",id:634},{english:"bust",hangul:"상반신",hanja:"上半身",id:635},{english:"butler",hangul:"집사",hanja:"執事",id:636},{english:"buy",hangul:"매수하다",hanja:"買收",id:637},{english:"byproduct",hangul:"부산물",hanja:"副産物",id:638},{english:"bystander",hangul:"방관자",hanja:"傍觀者",id:639},{english:"cabal",hangul:"도당",hanja:"徒黨",id:640},{english:"cabin",hangul:"선실",hanja:"船室",id:641},{english:"cactus",hangul:"선인장",hanja:"仙人掌",id:642},{english:"calamity",hangul:"재난",hanja:"災難",id:643},{english:"calcite",hangul:"방해석",hanja:"方解石",id:644},{english:"calculating",hangul:"타산적인",hanja:"打算的",id:645},{english:"calculation",hangul:"타산",hanja:"打算",id:646},{english:"calculus",hangul:"결석",hanja:"結石",id:647,freq_deg:5496},{english:"call",hangul:"방문하다",hanja:"訪問",id:648,freq_deg:1692},{english:"calligraphy",hangul:"서법",hanja:"書法",id:649},{english:"calling",hangul:"천직",hanja:"天職",id:650},{english:"calm",hangul:"무풍",hanja:"無風",id:651},{english:"calm",hangul:"평온",hanja:"平穩",id:652},{english:"calm",hangul:"냉정",hanja:"冷靜",id:653},{english:"calumniate",hangul:"비방하다",hanja:"誹謗",id:654},{english:"camel",hangul:"낙타",hanja:"駱駝",id:655},{english:"camouflage",hangul:"위장",hanja:"僞裝",id:656},{english:"camouflage",hangul:"미채",hanja:"迷彩",id:657},{english:"camouflage",hangul:"위장하다",hanja:"僞裝",id:658},{english:"camp",hangul:"막사",hanja:"幕舍",id:659},{english:"campaign",hangul:"종군",hanja:"從軍",id:660},{english:"campaign",hangul:"종군하다",hanja:"從軍",id:661},{english:"camphor",hangul:"장뇌",hanja:"樟腦",id:662},{english:"camping",hangul:"야영",hanja:"野營",id:663},{english:"campus",hangul:"교정",hanja:"校庭",id:664},{english:"campus",hangul:"구내",hanja:"構內",id:665},{english:"campus",hangul:"학원",hanja:"學園",id:666,freq_deg:2917},{english:"canal",hangul:"운하",hanja:"運河",id:667},{english:"candlepower",hangul:"촉광",hanja:"燭光",id:668},{english:"canopy",hangul:"천개",hanja:"天蓋",id:669},{english:"cant",hangul:"은어",hanja:"隱語",id:670},{english:"capacity",hangul:"용적",hanja:"容積",id:671},{english:"capacity",hangul:"용량",hanja:"容量",id:672},{english:"capacity",hangul:"역량",hanja:"力量",id:673},{english:"capital",hangul:"원금",hanja:"元金",id:674},{english:"capital punishment",hangul:"사형",hanja:"死刑",id:675},{english:"capital punishment",hangul:"극형",hanja:"極刑",id:676},{english:"capitalist",hangul:"자본가",hanja:"資本家",id:677},{english:"captain",hangul:"정장",hanja:"艇長",id:678,freq_deg:4947},{english:"captivation",hangul:"매혹",hanja:"魅惑",id:679},{english:"captor",hangul:"체포자",hanja:"逮捕者",id:680},{english:"capture",hangul:"포획하다",hanja:"捕獲",id:681},{english:"capture",hangul:"포획",hanja:"捕獲",id:682},{english:"capture",hangul:"점령",hanja:"占領",id:683},{english:"car wash",hangul:"세차",hanja:"洗車",id:684},{english:"carapace",hangul:"갑각",hanja:"甲殼",id:685},{english:"carbohydrate",hangul:"탄수화물",hanja:"炭水化物",id:686},{english:"carbolic acid",hangul:"석탄산",hanja:"石炭酸",id:687},{english:"carbon monoxide",hangul:"일산화탄소",hanja:"一酸化炭素",id:688},{english:"carbonic acid",hangul:"탄산",hanja:"炭酸",id:689},{english:"carbonization",hangul:"탄화",hanja:"炭化",id:690},{english:"carcinogenesis",hangul:"발암",hanja:"發癌",id:691},{english:"cardboard",hangul:"판지",hanja:"板紙",id:692},{english:"care",hangul:"보호",hanja:"保護",id:693,freq_deg:844},{english:"carelessness",hangul:"부주의",hanja:"不注意",id:694},{english:"caress",hangul:"애무하다",hanja:"愛撫",id:695},{english:"cargo",hangul:"선하",hanja:"船荷",id:696},{english:"cargo",hangul:"화물",hanja:"貨物",id:697},{english:"caries",hangul:"충치",hanja:"蟲齒",id:698},{english:"carol",hangul:"송가",hanja:"頌歌",id:699},{english:"carpet",hangul:"융단",hanja:"絨緞",id:700},{english:"carriage",hangul:"운반",hanja:"運搬",id:701,freq_deg:5091},{english:"carrier",hangul:"보균자",hanja:"保菌者",id:702},{english:"carrier pigeon",hangul:"전서구",hanja:"傳書鳩",id:703},{english:"carrying",hangul:"적재",hanja:"積載",id:704},{english:"cartilage",hangul:"연골",hanja:"軟骨",id:705},{english:"carving",hangul:"조각",hanja:"彫刻",id:706,freq_deg:2608},{english:"case",hangul:"사건",hanja:"事件",id:707,freq_deg:221},{english:"casein",hangul:"건락소",hanja:"乾酪素",id:708},{english:"cash",hangul:"현금",hanja:"現金",id:709,freq_deg:2000},{english:"cast iron",hangul:"주철",hanja:"鑄鐵",id:710},{english:"cast steel",hangul:"주강",hanja:"鑄鋼",id:711},{english:"casting",hangul:"주조",hanja:"鑄造",id:712},{english:"casting",hangul:"주물",hanja:"鑄物",id:713},{english:"castration",hangul:"거세",hanja:"去勢",id:714},{english:"casualty",hangul:"부상자",hanja:"負傷者",id:715},{english:"catalyst",hangul:"촉매",hanja:"觸媒",id:716},{english:"catapult",hangul:"발사하다",hanja:"發射",id:717},{english:"catch",hangul:"포구",hanja:"捕球",id:718},{english:"catchword",hangul:"표어",hanja:"標語",id:719},{english:"category",hangul:"범주",hanja:"範疇",id:720},{english:"category",hangul:"종류",hanja:"種類",id:721,freq_deg:868},{english:"category",hangul:"부문",hanja:"部門",id:722,freq_deg:1367},{english:"cater",hangul:"조달하다",hanja:"調達",id:723},{english:"caterpillar",hangul:"모충",hanja:"毛蟲",id:724},{english:"catgut",hangul:"장선",hanja:"腸線",id:725},{english:"cause",hangul:"원인",hanja:"原因",id:726,freq_deg:583},{english:"caution",hangul:"주의",hanja:"注意",id:727,freq_deg:2826},{english:"cave",hangul:"동굴",hanja:"洞窟",id:728},{english:"cavity",hangul:"공동",hanja:"空洞",id:729,freq_deg:849},{english:"celebration",hangul:"축하",hanja:"祝賀",id:730,freq_deg:4379},{english:"celebration",hangul:"축전",hanja:"祝典",id:731},{english:"celebrity",hangul:"명사",hanja:"名士",id:732},{english:"celestial sphere",hangul:"천구",hanja:"天球",id:733},{english:"celibate",hangul:"독신자",hanja:"獨身",id:734},{english:"cell division",hangul:"세포분열",hanja:"細胞分裂",id:735},{english:"centrifugal force",hangul:"원심력",hanja:"遠心力",id:736},{english:"centrifugal machine",hangul:"원심분리기",hanja:"遠心分離機",id:737},{english:"century plant",hangul:"용설란",hanja:"龍舌蘭",id:738},{english:"ceramics",hangul:"도예",hanja:"陶藝",id:739},{english:"ceramics",hangul:"요업",hanja:"窯業",id:740},{english:"cerebellum",hangul:"소뇌",hanja:"小腦",id:741},{english:"cerebral anemia",hangul:"뇌빈혈",hanja:"腦貧血",id:742},{english:"cerebrospinal fluid",hangul:"뇌척수액",hanja:"腦脊髓液",id:743},{english:"cerebrospinal meningitis",hangul:"뇌척수막염",hanja:"腦脊髓膜炎",id:744},{english:"cerebrum",hangul:"대뇌",hanja:"大腦",id:745},{english:"ceremonial",hangul:"의식적인",hanja:"儀式",id:746},{english:"ceremony",hangul:"식전",hanja:"式典",id:747},{english:"ceremony",hangul:"의식",hanja:"儀式",id:748,freq_deg:5618},{english:"cessation",hangul:"휴지",hanja:"休止",id:749,freq_deg:4482},{english:"chain",hangul:"연쇄",hanja:"連鎖",id:750},{english:"chain store",hangul:"연쇄점",hanja:"連鎖店",id:751},{english:"chair",hangul:"의자",hanja:"椅子",id:752,freq_deg:1990},{english:"chair",hangul:"강좌",hanja:"講座",id:753},{english:"chairman",hangul:"의장",hanja:"議長",id:754},{english:"chairman",hangul:"회장",hanja:"會長",id:755,freq_deg:543},{english:"challenge",hangul:"도전하다",hanja:"挑戰",id:756},{english:"challenger",hangul:"도전자",hanja:"挑戰者",id:757},{english:"chamberlain",hangul:"시종",hanja:"侍從",id:758},{english:"chance",hangul:"기회",hanja:"機會",id:759,freq_deg:693},{english:"chance",hangul:"호기",hanja:"好機",id:760},{english:"chance",hangul:"계기",hanja:"契機",id:761},{english:"chance",hangul:"우연",hanja:"偶然",id:762},{english:"change",hangul:"변화하다",hanja:"變化",id:763,freq_deg:1719},{english:"change",hangul:"변화",hanja:"變化",id:764,freq_deg:265},{english:"change",hangul:"변천",hanja:"變遷",id:765},{english:"change",hangul:"교체",hanja:"交替",id:766,freq_deg:3533},{english:"channel",hangul:"수로",hanja:"水路",id:767},{english:"channel",hangul:"해협",hanja:"海峽",id:768},{english:"chant",hangul:"성가",hanja:"聖歌",id:769},{english:"chaos",hangul:"무질서",hanja:"無秩序",id:770},{english:"chapter",hangul:"분회",hanja:"分會",id:771},{english:"character",hangul:"기질",hanja:"氣質",id:772},{english:"character",hangul:"품성",hanja:"品性",id:773},{english:"character",hangul:"인격",hanja:"人格",id:774,freq_deg:2304},{english:"character",hangul:"문자",hanja:"文字",id:775,freq_deg:1979},{english:"character",hangul:"인물",hanja:"人物",id:776,freq_deg:632},{english:"characteristic",hangul:"특질",hanja:"特質",id:777},{english:"characteristic",hangul:"특성",hanja:"特性",id:778,freq_deg:978},{english:"characteristic",hangul:"특색",hanja:"特色",id:779},{english:"charcoal",hangul:"목탄",hanja:"木炭",id:780},{english:"charge",hangul:"고발하다",hanja:"告發",id:781},{english:"charge",hangul:"돌진하다",hanja:"突進",id:782},{english:"charge",hangul:"전하",hanja:"電荷",id:783},{english:"charge",hangul:"담당",hanja:"擔當",id:784,freq_deg:1783},{english:"charge",hangul:"대가",hanja:"代價",id:785,freq_deg:2745},{english:"charge",hangul:"요금",hanja:"料金",id:786,freq_deg:1986},{english:"charge",hangul:"부담",hanja:"負擔",id:787,freq_deg:1064},{english:"charge",hangul:"돌진",hanja:"突進",id:788},{english:"charity",hangul:"자비",hanja:"慈悲",id:789},{english:"charity",hangul:"박애",hanja:"博愛",id:790},{english:"charm",hangul:"매력",hanja:"魅力",id:791,freq_deg:2086},{english:"charm",hangul:"마력",hanja:"魔力",id:792},{english:"charm",hangul:"주문",hanja:"呪文",id:793,freq_deg:5354},{english:"charm",hangul:"매혹하다",hanja:"魅惑",id:794},{english:"chart",hangul:"도표",hanja:"圖表",id:795},{english:"chase",hangul:"추적하다",hanja:"追跡",id:796},{english:"chastisement",hangul:"응징",hanja:"膺懲",id:797},{english:"chastity",hangul:"순결",hanja:"純潔",id:798},{english:"chastity",hangul:"정숙",hanja:"貞淑",id:799},{english:"check",hangul:"확인하다",hanja:"確認",id:800,freq_deg:811},{english:"check",hangul:"저지",hanja:"沮止",id:801},{english:"check",hangul:"방지",hanja:"防止",id:802,freq_deg:2844},{english:"check",hangul:"저지하다",hanja:"沮止",id:803},{english:"check",hangul:"조사하다",hanja:"照査",id:804,freq_deg:794},{english:"chemist",hangul:"화학자",hanja:"化學者",id:805},{english:"chemistry",hangul:"화학",hanja:"化學",id:806,freq_deg:2001},{english:"chest",hangul:"흉곽",hanja:"胸郭",id:807},{english:"chicken pox",hangul:"수두",hanja:"水痘",id:808},{english:"chief",hangul:"장관",hanja:"長官",id:809,freq_deg:495},{english:"chief",hangul:"두목",hanja:"頭目",id:810},{english:"chilblain",hangul:"동상",hanja:"凍傷",id:811},{english:"child",hangul:"유아",hanja:"幼兒",id:812},{english:"childhood",hangul:"유년",hanja:"幼年",id:813},{english:"chill",hangul:"냉기",hanja:"冷氣",id:814},{english:"chill",hangul:"한기",hanja:"寒氣",id:815},{english:"chill",hangul:"오한",hanja:"惡寒",id:816},{english:"china",hangul:"자기",hanja:"磁器",id:817,freq_deg:111},{english:"choice",hangul:"선택권",hanja:"選擇權",id:818},{english:"chorus",hangul:"합창",hanja:"合唱",id:819},{english:"chorus",hangul:"합창하다",hanja:"合唱",id:820},{english:"chroma",hangul:"채도",hanja:"彩度",id:821},{english:"chronology",hangul:"연표",hanja:"年表",id:822},{english:"chrysanthemum",hangul:"국화",hanja:"菊花",id:823},{english:"cinnamon",hangul:"계피",hanja:"桂皮",id:824},{english:"circle",hangul:"원진",hanja:"圓陣",id:825},{english:"circuit",hangul:"회선",hanja:"回線",id:826},{english:"circular",hangul:"회보",hanja:"回報",id:827},{english:"circulation",hangul:"순환",hanja:"循環",id:828},{english:"circulation",hangul:"유포",hanja:"流布",id:829},{english:"circumcenter",hangul:"외심",hanja:"外心",id:830},{english:"circumcision",hangul:"할례",hanja:"割禮",id:831},{english:"circumference",hangul:"원주",hanja:"圓周",id:832},{english:"circumference",hangul:"주변",hanja:"周邊",id:833,freq_deg:581},{english:"circumference",hangul:"주위",hanja:"周圍",id:834,freq_deg:667},{english:"cirrocumulus",hangul:"권적운",hanja:"卷積雲",id:835},{english:"citation",hangul:"인용",hanja:"引用",id:836},{english:"cite",hangul:"소환하다",hanja:"召喚",id:837},{english:"citizen",hangul:"국민",hanja:"國民",id:838,freq_deg:212},{english:"citizen",hangul:"시민",hanja:"市民",id:839,freq_deg:542},{english:"citizen",hangul:"주민",hanja:"住民",id:840,freq_deg:453},{english:"city",hangul:"도회",hanja:"都會",id:841},{english:"city council",hangul:"시의회",hanja:"市議會",id:842},{english:"civil law",hangul:"민법",hanja:"民法",id:843},{english:"civil rights",hangul:"민권",hanja:"民權",id:844},{english:"civil war",hangul:"내란",hanja:"內亂",id:845},{english:"civil war",hangul:"내전",hanja:"內戰",id:846},{english:"civilian",hangul:"비전투원",hanja:"非戰鬪員",id:847},{english:"civilization",hangul:"개화",hanja:"開化",id:848},{english:"civilization",hangul:"문명",hanja:"文明",id:849},{english:"claim",hangul:"청구",hanja:"請求",id:850},{english:"claimant",hangul:"요구자",hanja:"要求者",id:851},{english:"clairvoyance",hangul:"투시",hanja:"透視",id:852},{english:"clairvoyance",hangul:"천리안",hanja:"千里眼",id:853},{english:"clan",hangul:"일문",hanja:"一門",id:854},{english:"clan",hangul:"벌족",hanja:"閥族",id:855},{english:"class",hangul:"부류",hanja:"部類",id:856},{english:"classic",hangul:"고전적인",hanja:"古典",id:857},{english:"classic",hangul:"고전",hanja:"古典",id:858,freq_deg:2366},{english:"classification",hangul:"종별",hanja:"種別",id:859},{english:"classmate",hangul:"급우",hanja:"級友",id:860},{english:"clay",hangul:"점토",hanja:"粘土",id:861},{english:"cleaning",hangul:"청소",hanja:"淸掃",id:862,freq_deg:2154},{english:"cleanup",hangul:"정화",hanja:"淨化",id:863},{english:"clerk",hangul:"서기",hanja:"書記",id:864},{english:"clerk",hangul:"점원",hanja:"店員",id:865,freq_deg:5023},{english:"cliff",hangul:"절벽",hanja:"絶壁",id:866},{english:"climax",hangul:"절정",hanja:"絶頂",id:867},{english:"climax",hangul:"극점",hanja:"極点",id:868},{english:"climb",hangul:"상승하다",hanja:"上昇",id:869},{english:"climb",hangul:"등귀하다",hanja:"騰貴",id:870},{english:"climb",hangul:"등반하다",hanja:"登攀",id:871},{english:"climbing",hangul:"상승하는",hanja:"上昇",id:872},{english:"clinch",hangul:"포옹하다",hanja:"抱擁",id:873},{english:"clitoris",hangul:"음핵",hanja:"陰核",id:874},{english:"close",hangul:"완료하다",hanja:"完了",id:875},{english:"close",hangul:"체결하다",hanja:"締結",id:876},{english:"close",hangul:"종결",hanja:"終結",id:877},{english:"closed circuit",hangul:"폐회로",hanja:"閉回路",id:878},{english:"closing",hangul:"폐쇄",hanja:"閉鎖",id:879},{english:"closure",hangul:"폐쇄",hanja:"閉鎖",id:880},{english:"clothes",hangul:"의복",hanja:"衣服",id:881,freq_deg:1724},{english:"clothing",hangul:"의류",hanja:"衣類",id:882,freq_deg:4516},{english:"club",hangul:"곤봉",hanja:"棍棒",id:883},{english:"clutter",hangul:"난잡",hanja:"亂雜",id:884},{english:"coal",hangul:"석탄",hanja:"石炭",id:885},{english:"coal mine",hangul:"탄광",hanja:"炭鑛",id:886},{english:"coal mine",hangul:"탄갱",hanja:"炭坑",id:887},{english:"coal mining",hangul:"채탄",hanja:"採炭",id:888},{english:"coal seam",hangul:"탄층",hanja:"炭層",id:889},{english:"coalesce",hangul:"합체하다",hanja:"合體",id:890},{english:"coalfield",hangul:"탄전",hanja:"炭田",id:891},{english:"coalition",hangul:"연립",hanja:"聯立",id:892},{english:"coast",hangul:"연안",hanja:"沿岸",id:893},{english:"coast",hangul:"해안",hanja:"海岸",id:894,freq_deg:3025},{english:"coastline",hangul:"해안선",hanja:"海岸線",id:895},{english:"coccus",hangul:"구균",hanja:"球菌",id:896},{english:"code",hangul:"약호",hanja:"略號",id:897},{english:"code",hangul:"암호",hanja:"暗號",id:898},{english:"codification",hangul:"성문화",hanja:"成文化",id:899},{english:"coeditor",hangul:"공편자",hanja:"共編者",id:900},{english:"cognizance",hangul:"인식",hanja:"認識",id:901},{english:"cohabitation",hangul:"동서",hanja:"同棲",id:902},{english:"coin",hangul:"경화",hanja:"硬貨",id:903},{english:"coincidence",hangul:"부합",hanja:"符合",id:904},{english:"cold",hangul:"냉기",hanja:"冷氣",id:905},{english:"cold war",hangul:"냉전",hanja:"冷戰",id:906},{english:"cold wave",hangul:"한파",hanja:"寒波",id:907},{english:"collaboration",hangul:"협동",hanja:"協同",id:908},{english:"collaboration",hangul:"합작",hanja:"合作",id:909},{english:"collaboration",hangul:"공저",hanja:"共著",id:910},{english:"collar",hangul:"체포하다",hanja:"逮捕",id:911},{english:"collarbone",hangul:"쇄골",hanja:"鎖骨",id:912},{english:"collection",hangul:"수집",hanja:"收集",id:913,freq_deg:3982},{english:"collective",hangul:"집합적인",hanja:"集合的",id:914},{english:"collision",hangul:"충돌",hanja:"衝突",id:915,freq_deg:3438},{english:"collusion",hangul:"결탁",hanja:"結託",id:916},{english:"collusion",hangul:"통모",hanja:"通謀",id:917},{english:"colon",hangul:"결장",hanja:"結腸",id:918},{english:"colony",hangul:"식민지",hanja:"植民地",id:919},{english:"colorant",hangul:"안료",hanja:"顔料",id:920},{english:"column",hangul:"원주",hanja:"圓柱",id:921},{english:"column",hangul:"종대",hanja:"縱隊",id:922},{english:"column",hangul:"종진",hanja:"縱陣",id:923},{english:"combat",hangul:"전투",hanja:"戰鬪",id:924},{english:"combination",hangul:"결합",hanja:"結合",id:925},{english:"combination",hangul:"배합",hanja:"配合",id:926},{english:"combination",hangul:"단결",hanja:"團結",id:927},{english:"combination",hangul:"연합",hanja:"聯合",id:928,freq_deg:2303},{english:"combine",hangul:"결합하다",hanja:"結合",id:929},{english:"combustibility",hangul:"가연성",hanja:"可燃性",id:930},{english:"combustible",hangul:"가연물",hanja:"可燃物",id:931},{english:"combustion",hangul:"연소",hanja:"燃燒",id:932},{english:"comeback",hangul:"복귀",hanja:"復歸",id:933},{english:"comedy",hangul:"희극",hanja:"喜劇",id:934},{english:"comet",hangul:"혜성",hanja:"彗星",id:935},{english:"comfort",hangul:"위안하다",hanja:"慰安",id:936},{english:"comforter",hangul:"위안자",hanja:"慰安者",id:937},{english:"command",hangul:"명령하다",hanja:"命令",id:938},{english:"command",hangul:"지휘하다",hanja:"指揮",id:939},{english:"command",hangul:"명령",hanja:"命令",id:940,freq_deg:2008},{english:"command",hangul:"지휘",hanja:"指揮",id:941},{english:"commemoration",hangul:"기념",hanja:"記念",id:942,freq_deg:3686},{english:"commence",hangul:"개시하다",hanja:"開始",id:943},{english:"commencement",hangul:"개시",hanja:"開始",id:944},{english:"comment",hangul:"주석하다",hanja:"註釋",id:945},{english:"commentary",hangul:"주석",hanja:"註釋",id:946},{english:"commerce",hangul:"상업",hanja:"商業",id:947,freq_deg:2712},{english:"commerce",hangul:"통상",hanja:"通商",id:948},{english:"commerce",hangul:"교역",hanja:"交易",id:949},{english:"commercial",hangul:"영리적인",hanja:"營利的",id:950},{english:"commercial law",hangul:"상법",hanja:"商法",id:951},{english:"commiserate",hangul:"동정하다",hanja:"同情",id:952},{english:"commission",hangul:"임명",hanja:"任命",id:953},{english:"commission",hangul:"직권",hanja:"職權",id:954},{english:"commission",hangul:"수수료",hanja:"手數料",id:955},{english:"commission",hangul:"구전",hanja:"口錢",id:956},{english:"commission",hangul:"위임하다",hanja:"委任",id:957},{english:"commissioned officer",hangul:"장교",hanja:"將校",id:958},{english:"commit",hangul:"위탁하다",hanja:"委託",id:959},{english:"commitment",hangul:"언질",hanja:"言質",id:960},{english:"commodity",hangul:"상품",hanja:"商品",id:961,freq_deg:859},{english:"commodore",hangul:"준장",hanja:"准將",id:962},{english:"common denominator",hangul:"공분모",hanja:"公分母",id:963},{english:"common multiple",hangul:"공배수",hanja:"公倍數",id:964},{english:"common sense",hangul:"상식",hanja:"常識",id:965,freq_deg:1614},{english:"commoner",hangul:"평민",hanja:"平民",id:966},{english:"commonness",hangul:"공통",hanja:"共通",id:967,freq_deg:5049},{english:"commonwealth",hangul:"연방",hanja:"連邦",id:968},{english:"commotion",hangul:"동요",hanja:"動搖",id:969},{english:"communication",hangul:"전달",hanja:"傳達",id:970,freq_deg:3567},{english:"communication",hangul:"통신",hanja:"通信",id:971,freq_deg:810},{english:"communication",hangul:"연락",hanja:"聯絡",id:972,freq_deg:1966},{english:"communism",hangul:"공산주의",hanja:"共産主義",id:973},{english:"commute",hangul:"교환하다",hanja:"交換",id:974,freq_deg:3644},{english:"compact",hangul:"계약",hanja:"契約",id:975,freq_deg:2037},{english:"companion",hangul:"반려",hanja:"伴侶",id:976},{english:"companion",hangul:"동반자",hanja:"同伴者",id:977},{english:"company",hangul:"교제",hanja:"交際",id:978},{english:"company",hangul:"동반",hanja:"同伴",id:979},{english:"company",hangul:"회사",hanja:"會社",id:980,freq_deg:5616},{english:"company",hangul:"상회",hanja:"商會",id:981},{english:"company officer",hangul:"위관",hanja:"尉官",id:982},{english:"comparison",hangul:"대조",hanja:"對照",id:983},{english:"comparison",hangul:"비교",hanja:"比較",id:984,freq_deg:2248},{english:"compassion",hangul:"동정심",hanja:"同情心",id:985},{english:"compatriot",hangul:"동포",hanja:"同胞",id:986},{english:"compensation",hangul:"배상",hanja:"賠償",id:987},{english:"competition",hangul:"경쟁",hanja:"競爭",id:988,freq_deg:686},{english:"competition",hangul:"경쟁자",hanja:"競爭者",id:989},{english:"competitor",hangul:"경쟁자",hanja:"競爭者",id:990},{english:"compilation",hangul:"편집",hanja:"編輯",id:991},{english:"complaint",hangul:"불평",hanja:"不平",id:992,freq_deg:4636},{english:"complaint",hangul:"고소",hanja:"告訴",id:993},{english:"complementary angle",hangul:"여각",hanja:"餘角",id:994},{english:"complete",hangul:"완성하다",hanja:"完成",id:995,freq_deg:3126},{english:"completion",hangul:"완성",hanja:"完成",id:996,freq_deg:2794},{english:"completion",hangul:"완료",hanja:"完了",id:997},{english:"complex",hangul:"복합",hanja:"複合",id:998},{english:"compliance",hangul:"추종",hanja:"追從",id:999},{english:"complication",hangul:"여병",hanja:"餘病",id:1000},{english:"complicity",hangul:"공모",hanja:"共謀",id:1001},{english:"complicity",hangul:"공범",hanja:"共犯",id:1002},{english:"complicity",hangul:"연루",hanja:"連累",id:1003},{english:"composition",hangul:"구성",hanja:"構成",id:1004,freq_deg:768},{english:"composition",hangul:"조판",hanja:"組版",id:1005},{english:"composition",hangul:"합성",hanja:"合成",id:1006},{english:"composition",hangul:"구도",hanja:"構圖",id:1007},{english:"compost",hangul:"퇴비",hanja:"堆肥",id:1008},{english:"composure",hangul:"침착",hanja:"沈着",id:1009},{english:"compound",hangul:"화합물",hanja:"化合物",id:1010},{english:"compound",hangul:"합성하다",hanja:"合成",id:1011},{english:"compound interest",hangul:"복리",hanja:"複利",id:1012},{english:"compound leaf",hangul:"복엽",hanja:"複葉",id:1013},{english:"comprehension",hangul:"이해",hanja:"理解",id:1014,freq_deg:4451},{english:"comprehension",hangul:"포함",hanja:"包含",id:1015,freq_deg:3943},{english:"comprehension",hangul:"내포",hanja:"內包",id:1016},{english:"comprehensive",hangul:"포괄적인",hanja:"包括的",id:1017},{english:"compromise",hangul:"타협",hanja:"妥協",id:1018},{english:"compromise",hangul:"화해",hanja:"和解",id:1019},{english:"compromise",hangul:"타협하다",hanja:"妥協",id:1020},{english:"compromise",hangul:"화해하다",hanja:"和解",id:1021},{english:"compulsory",hangul:"의무적인",hanja:"義務的",id:1022},{english:"computer",hangul:"계산기",hanja:"計算機",id:1023,freq_deg:2871},{english:"comrade",hangul:"동지",hanja:"同志",id:1024},{english:"concavity",hangul:"요면",hanja:"凹面",id:1025},{english:"concealment",hangul:"은폐",hanja:"隱蔽",id:1026},{english:"concealment",hangul:"은닉",hanja:"隱匿",id:1027},{english:"concealment",hangul:"잠복",hanja:"潛伏",id:1028},{english:"concentration",hangul:"집중",hanja:"集中",id:1029,freq_deg:1944},{english:"concept",hangul:"개념",hanja:"槪念",id:1030},{english:"conception",hangul:"구상",hanja:"構想",id:1031},{english:"conception",hangul:"수태",hanja:"受胎",id:1032},{english:"concern",hangul:"관심",hanja:"關心",id:1033,freq_deg:280},{english:"concern",hangul:"배려",hanja:"配慮",id:1034},{english:"concert",hangul:"합주",hanja:"合奏",id:1035},{english:"concerto",hangul:"협주곡",hanja:"協奏曲",id:1036},{english:"concession",hangul:"이권",hanja:"利權",id:1037},{english:"concession",hangul:"조계",hanja:"租界",id:1038},{english:"concha",hangul:"외이",hanja:"外耳",id:1039},{english:"conciliation",hangul:"회유",hanja:"懷柔",id:1040},{english:"conclusion",hangul:"결말",hanja:"結末",id:1041},{english:"conclusion",hangul:"종국",hanja:"終局",id:1042},{english:"conclusion",hangul:"결론",hanja:"結論",id:1043,freq_deg:1337},{english:"conclusion",hangul:"귀결",hanja:"歸結",id:1044},{english:"concord",hangul:"화합",hanja:"和合",id:1045},{english:"condensation",hangul:"응축",hanja:"凝縮",id:1046},{english:"condensed milk",hangul:"연유",hanja:"煉乳",id:1047},{english:"condiment",hangul:"조미료",hanja:"調味料",id:1048,freq_deg:1527},{english:"condolence",hangul:"애도",hanja:"哀悼",id:1049},{english:"conduct",hangul:"행동하다",hanja:"行動",id:1050,freq_deg:2105},{english:"conduction",hangul:"전도",hanja:"傳導",id:1051},{english:"conductor",hangul:"지휘자",hanja:"指揮者",id:1052},{english:"confederate",hangul:"공모자",hanja:"共謀者",id:1053},{english:"confederation",hangul:"연방",hanja:"聯邦",id:1054},{english:"conference",hangul:"협의",hanja:"協議",id:1055},{english:"conference",hangul:"회의",hanja:"會議",id:1056,freq_deg:4024},{english:"confession",hangul:"자백",hanja:"自白",id:1057},{english:"confession",hangul:"고백",hanja:"告白",id:1058},{english:"confide",hangul:"신임하다",hanja:"信任",id:1059},{english:"confide",hangul:"신탁하다",hanja:"信託",id:1060},{english:"confidence",hangul:"신임",hanja:"信任",id:1061},{english:"confidence",hangul:"신용",hanja:"信用",id:1062,freq_deg:1965},{english:"confidence",hangul:"확신",hanja:"確信",id:1063,freq_deg:4315},{english:"confinement",hangul:"유폐",hanja:"幽閉",id:1064},{english:"confinement",hangul:"감금",hanja:"監禁",id:1065},{english:"confirmation",hangul:"확인",hanja:"確認",id:1066,freq_deg:2409},{english:"confiscation",hangul:"압수",hanja:"押收",id:1067},{english:"conflict",hangul:"투쟁",hanja:"鬪爭",id:1068},{english:"conflict",hangul:"충돌하다",hanja:"衝突",id:1069,freq_deg:5194},{english:"conformity",hangul:"일치",hanja:"一致",id:1070,freq_deg:3670},{english:"confrontation",hangul:"직면",hanja:"直面",id:1071},{english:"confrontation",hangul:"대립",hanja:"對立",id:1072},{english:"confusion",hangul:"혼동",hanja:"混同",id:1073},{english:"confusion",hangul:"혼란",hanja:"混亂",id:1074},{english:"confusion",hangul:"혼미",hanja:"昏迷",id:1075},{english:"congenital",hangul:"선천적인",hanja:"先天的",id:1076},{english:"congratulation",hangul:"축하",hanja:"祝賀",id:1077,freq_deg:4379},{english:"congratulation",hangul:"경하",hanja:"慶賀",id:1078},{english:"congregation",hangul:"회중",hanja:"會衆",id:1079},{english:"congress",hangul:"의회",hanja:"議會",id:1080},{english:"conjecture",hangul:"추측",hanja:"推測",id:1081,freq_deg:4893},{english:"conjecture",hangul:"추측하다",hanja:"推測",id:1082},{english:"conjecture",hangul:"억측하다",hanja:"臆測",id:1083},{english:"conjunctivitis",hangul:"결막염",hanja:"結膜炎",id:1084},{english:"connotation",hangul:"함축",hanja:"含蓄",id:1085},{english:"connotation",hangul:"내포",hanja:"內包",id:1086},{english:"conquest",hangul:"정복",hanja:"征服",id:1087},{english:"conscience",hangul:"양심",hanja:"良心",id:1088,freq_deg:3293},{english:"consciousness",hangul:"의식",hanja:"意識",id:1089,freq_deg:5618},{english:"consecration",hangul:"봉헌",hanja:"奉獻",id:1090},{english:"consecutive",hangul:"연속적인",hanja:"連續",id:1091},{english:"consent",hangul:"동의하다",hanja:"同意",id:1092},{english:"consent",hangul:"승낙하다",hanja:"承諾",id:1093},{english:"consent",hangul:"동의",hanja:"同意",id:1094},{english:"consent",hangul:"승낙",hanja:"承諾",id:1095},{english:"consent",hangul:"동의자",hanja:"同意",id:1096},{english:"consequence",hangul:"결과",hanja:"結果",id:1097,freq_deg:189},{english:"conservation",hangul:"보존",hanja:"保存",id:1098,freq_deg:3653},{english:"consideration",hangul:"고려",hanja:"顧慮",id:1099,freq_deg:5647},{english:"consideration",hangul:"고찰",hanja:"考察",id:1100},{english:"consign",hangul:"위임하다",hanja:"委任",id:1101},{english:"consignment",hangul:"탁송",hanja:"託送",id:1102},{english:"consolation",hangul:"위자",hanja:"慰藉",id:1103},{english:"consonant",hangul:"자음",hanja:"子音",id:1104},{english:"consonant",hangul:"자음자",hanja:"子音",id:1105},{english:"conspiracy",hangul:"음모",hanja:"陰謀",id:1106},{english:"conspiracy",hangul:"모의",hanja:"謀議",id:1107},{english:"conspirator",hangul:"공모자",hanja:"共謀者",id:1108},{english:"constancy",hangul:"절조",hanja:"節操",id:1109},{english:"constant",hangul:"상수",hanja:"常數",id:1110},{english:"constellation",hangul:"성좌",hanja:"星座",id:1111},{english:"constitution",hangul:"체격",hanja:"體格",id:1112},{english:"constitution",hangul:"헌법",hanja:"憲法",id:1113},{english:"constitution",hangul:"정체",hanja:"政體",id:1114},{english:"constriction",hangul:"수축",hanja:"收縮",id:1115},{english:"construction",hangul:"건조",hanja:"建造",id:1116,freq_deg:3182},{english:"construction",hangul:"건설",hanja:"建設",id:1117,freq_deg:709},{english:"construction",hangul:"건축",hanja:"建築",id:1118,freq_deg:2266},{english:"construction",hangul:"축조",hanja:"築造",id:1119},{english:"construction",hangul:"구조",hanja:"構造",id:1120,freq_deg:314},{english:"constructive",hangul:"건설적인",hanja:"建設的",id:1121},{english:"consul",hangul:"영사",hanja:"領事",id:1122},{english:"consulate",hangul:"영사관",hanja:"領事館",id:1123},{english:"consultation",hangul:"상담",hanja:"相談",id:1124,freq_deg:2932},{english:"consultation",hangul:"협의",hanja:"協議",id:1125},{english:"consultation",hangul:"참조",hanja:"參照",id:1126,freq_deg:3523},{english:"consumer",hangul:"소비자",hanja:"消費者",id:1127,freq_deg:697},{english:"consumption",hangul:"소비",hanja:"消費",id:1128,freq_deg:1771},{english:"contact",hangul:"접촉",hanja:"接觸",id:1129,freq_deg:2196},{english:"contain",hangul:"견제하다",hanja:"牽制",id:1130},{english:"container",hangul:"용기",hanja:"容器",id:1131,freq_deg:3996},{english:"contamination",hangul:"오염",hanja:"汚染",id:1132,freq_deg:1082},{english:"contempt",hangul:"멸시",hanja:"蔑視",id:1133},{english:"contempt",hangul:"모욕",hanja:"侮辱",id:1134},{english:"contempt",hangul:"모멸",hanja:"侮蔑",id:1135},{english:"content",hangul:"내용",hanja:"內容",id:1136,freq_deg:190},{english:"contention",hangul:"주장",hanja:"主張",id:1137,freq_deg:653},{english:"contest",hangul:"경쟁",hanja:"競爭",id:1138,freq_deg:686},{english:"contest",hangul:"경기",hanja:"競技",id:1139,freq_deg:2202},{english:"contest",hangul:"경쟁하다",hanja:"競爭",id:1140},{english:"context",hangul:"문맥",hanja:"文脈",id:1141},{english:"continent",hangul:"대륙",hanja:"大陸",id:1142,freq_deg:2569},{english:"continental shelf",hangul:"대륙붕",hanja:"大陸棚",id:1143},{english:"continuance",hangul:"존속",hanja:"存續",id:1144},{english:"continuation",hangul:"계속",hanja:"繼續",id:1145,freq_deg:362},{english:"continuation",hangul:"지속",hanja:"持續",id:1146},{english:"continuing",hangul:"연속적인",hanja:"連續",id:1147},{english:"contract",hangul:"약정",hanja:"約定",id:1148},{english:"contract",hangul:"계약하다",hanja:"契約",id:1149},{english:"contraction",hangul:"수축",hanja:"收縮",id:1150},{english:"contraction",hangul:"위축",hanja:"萎縮",id:1151},{english:"contradiction",hangul:"모순",hanja:"矛盾",id:1152},{english:"contradiction",hangul:"당착",hanja:"撞着",id:1153},{english:"contrast",hangul:"대조",hanja:"對照",id:1154},{english:"contrast",hangul:"대조하다",hanja:"對照",id:1155},{english:"contribution",hangul:"기부",hanja:"寄附",id:1156},{english:"contribution",hangul:"공헌",hanja:"貢獻",id:1157},{english:"contribution",hangul:"투고",hanja:"投稿",id:1158},{english:"contrive",hangul:"고안하다",hanja:"考案",id:1159},{english:"contrive",hangul:"획책하다",hanja:"劃策",id:1160},{english:"control",hangul:"지배",hanja:"支配",id:1161},{english:"control",hangul:"관리",hanja:"管理",id:1162,freq_deg:2291},{english:"control",hangul:"제어",hanja:"制御",id:1163},{english:"control",hangul:"지배하다",hanja:"支配",id:1164,freq_deg:1701},{english:"control",hangul:"감독하다",hanja:"監督",id:1165},{english:"control",hangul:"관리하다",hanja:"管理",id:1166,freq_deg:3230},{english:"controversialist",hangul:"논객",hanja:"論客",id:1167},{english:"controversialist",hangul:"논쟁자",hanja:"論爭者",id:1168},{english:"controversy",hangul:"논쟁",hanja:"論爭",id:1169,freq_deg:2342},{english:"convection",hangul:"환류",hanja:"還流",id:1170},{english:"convenience",hangul:"편의",hanja:"便宜",id:1171,freq_deg:3831},{english:"convenience",hangul:"편익",hanja:"便益",id:1172},{english:"convention",hangul:"협약",hanja:"協約",id:1173},{english:"conversation",hangul:"회화",hanja:"會話",id:1174,freq_deg:4238},{english:"conversation",hangul:"담화",hanja:"談話",id:1175},{english:"conversation",hangul:"대화",hanja:"對話",id:1176,freq_deg:625},{english:"conversion",hangul:"전향",hanja:"轉向",id:1177},{english:"conversion",hangul:"개종",hanja:"改宗",id:1178},{english:"conviction",hangul:"확신",hanja:"確信",id:1179,freq_deg:4315},{english:"convolution",hangul:"회선",hanja:"回旋",id:1180},{english:"convoy",hangul:"호송",hanja:"護送",id:1181},{english:"convoy",hangul:"호위",hanja:"護衛",id:1182},{english:"convulsion",hangul:"경련",hanja:"痙攣",id:1183},{english:"cooler",hangul:"냉각기",hanja:"冷却器",id:1184},{english:"coolness",hangul:"냉정",hanja:"冷靜",id:1185},{english:"coolness",hangul:"냉담",hanja:"冷淡",id:1186},{english:"coordinate",hangul:"좌표",hanja:"座標",id:1187},{english:"cop",hangul:"포박하다",hanja:"捕縛",id:1188},{english:"cope",hangul:"대처하다",hanja:"對處",id:1189,freq_deg:3275},{english:"copy",hangul:"복사",hanja:"複寫",id:1190,freq_deg:4920},{english:"copy",hangul:"복사하다",hanja:"複寫",id:1191,freq_deg:4995},{english:"copyist",hangul:"필생",hanja:"筆生",id:1192},{english:"copyright",hangul:"판권",hanja:"版權",id:1193},{english:"coquetry",hangul:"교태",hanja:"嬌態",id:1194},{english:"coral",hangul:"산호",hanja:"珊瑚",id:1195},{english:"cornea",hangul:"각막",hanja:"角膜",id:1196},{english:"cornerstone",hangul:"초석",hanja:"礎石",id:1197},{english:"corporation",hangul:"법인",hanja:"法人",id:1198},{english:"corpuscle",hangul:"미립자",hanja:"微粒子",id:1199},{english:"correction",hangul:"정정",hanja:"訂正",id:1200},{english:"correction",hangul:"보정",hanja:"補正",id:1201},{english:"correction",hangul:"첨삭",hanja:"添削",id:1202},{english:"correction",hangul:"교정",hanja:"矯正",id:1203},{english:"correlative",hangul:"상관적인",hanja:"相關的",id:1204},{english:"correspond",hangul:"일치하다",hanja:"一致",id:1205,freq_deg:2214},{english:"correspondence",hangul:"대응",hanja:"對應",id:1206,freq_deg:1768},{english:"correspondence",hangul:"통신",hanja:"通信",id:1207,freq_deg:810},{english:"corridor",hangul:"회랑",hanja:"回廊",id:1208},{english:"corrosion",hangul:"침식",hanja:"浸蝕",id:1209},{english:"corrosive sublimate",hangul:"승홍",hanja:"昇汞",id:1210},{english:"corruption",hangul:"타락",hanja:"墮落",id:1211,freq_deg:3776},{english:"corruption",hangul:"매수",hanja:"買收",id:1212},{english:"corruption",hangul:"전와",hanja:"轉訛",id:1213},{english:"cortex",hangul:"피층",hanja:"皮層",id:1214},{english:"cortex",hangul:"피질",hanja:"皮質",id:1215},{english:"corundum",hangul:"강옥",hanja:"鋼玉",id:1216},{english:"cosmetic",hangul:"화장품",hanja:"化粧品",id:1217,freq_deg:1684},{english:"cost",hangul:"비용",hanja:"費用",id:1218,freq_deg:1035},{english:"cost",hangul:"가격",hanja:"價格",id:1219,freq_deg:804},{english:"cost price",hangul:"원가",hanja:"原價",id:1220},{english:"cotton goods",hangul:"면제품",hanja:"綿製品",id:1221},{english:"cotton picker",hangul:"채면기",hanja:"採綿器",id:1222},{english:"cotton powder",hangul:"면화약",hanja:"綿火藥",id:1223},{english:"cotyledon",hangul:"자엽",hanja:"子葉",id:1224},{english:"council",hangul:"회의",hanja:"會議",id:1225,freq_deg:4024},{english:"counsel",hangul:"권고",hanja:"勸告",id:1226},{english:"count",hangul:"계산하다",hanja:"計算",id:1227,freq_deg:2506},{english:"count",hangul:"백작",hanja:"伯爵",id:1228},{english:"countenance",hangul:"안색",hanja:"顔色",id:1229},{english:"counterattack",hangul:"역습",hanja:"逆襲",id:1230},{english:"counterespionage",hangul:"방첩",hanja:"防諜",id:1231},{english:"countermand",hangul:"철회하다",hanja:"撤回",id:1232},{english:"counterpoint",hangul:"대위법",hanja:"對位法",id:1233},{english:"counterpoise",hangul:"평형하다",hanja:"平衡",id:1234},{english:"counterpropaganda",hangul:"역선전",hanja:"逆宣傳",id:1235},{english:"counterrevolution",hangul:"반혁명",hanja:"反革命",id:1236},{english:"countersignature",hangul:"부서",hanja:"副署",id:1237,freq_deg:3418},{english:"country",hangul:"국가",hanja:"國家",id:1238,freq_deg:125},{english:"country",hangul:"전원",hanja:"田園",id:1239},{english:"couple",hangul:"부부",hanja:"夫婦",id:1240,freq_deg:871},{english:"courage",hangul:"용기",hanja:"勇氣",id:1241,freq_deg:3996},{english:"courage",hangul:"담력",hanja:"膽力",id:1242},{english:"course",hangul:"진로",hanja:"進路",id:1243,freq_deg:4462},{english:"course",hangul:"침로",hanja:"針路",id:1244},{english:"course",hangul:"방향",hanja:"方向",id:1245,freq_deg:433},{english:"course",hangul:"과정",hanja:"課程",id:1246,freq_deg:4394},{english:"course",hangul:"일품",hanja:"一品",id:1247},{english:"courtesy",hangul:"예의",hanja:"禮儀",id:1248,freq_deg:3350},{english:"courtesy",hangul:"호의",hanja:"好意",id:1249},{english:"courtroom",hangul:"법정",hanja:"法廷",id:1250},{english:"courtship",hangul:"구혼",hanja:"求婚",id:1251},{english:"covenant",hangul:"맹약",hanja:"盟約",id:1252},{english:"covenant",hangul:"계약하다",hanja:"契約",id:1253},{english:"cover",hangul:"엄호하다",hanja:"掩護",id:1254},{english:"covering",hangul:"엄호",hanja:"掩護",id:1255},{english:"cow pox",hangul:"우두",hanja:"牛痘",id:1256},{english:"cowardice",hangul:"비겁",hanja:"卑怯",id:1257},{english:"cowboy",hangul:"목동",hanja:"牧童",id:1258},{english:"crack",hangul:"분류하다",hanja:"分溜",id:1259},{english:"craftsman",hangul:"명공",hanja:"名工",id:1260},{english:"crane",hangul:"기중기",hanja:"起重機",id:1261},{english:"cranial nerve",hangul:"뇌신경",hanja:"腦神經",id:1262},{english:"cranium",hangul:"두개",hanja:"頭蓋",id:1263},{english:"crape myrtle",hangul:"백일홍",hanja:"百日紅",id:1264},{english:"crawl",hangul:"포복하다",hanja:"匍匐",id:1265},{english:"craziness",hangul:"발광",hanja:"發狂",id:1266},{english:"creation",hangul:"창조",hanja:"創造",id:1267,freq_deg:2404},{english:"creative",hangul:"창조적인",hanja:"創造的",id:1268},{english:"creator",hangul:"창조자",hanja:"創造者",id:1269},{english:"creature",hangul:"생물",hanja:"生物",id:1270,freq_deg:2602},{english:"creche",hangul:"탁아소",hanja:"託兒所",id:1271},{english:"credence",hangul:"신용",hanja:"信用",id:1272,freq_deg:1965},{english:"credibility",hangul:"진실성",hanja:"眞實性",id:1273},{english:"credit",hangul:"신용",hanja:"信用",id:1274,freq_deg:1965},{english:"credit",hangul:"명예",hanja:"名譽",id:1275,freq_deg:2141},{english:"credit",hangul:"신용하다",hanja:"信用",id:1276},{english:"creditor",hangul:"채권자",hanja:"債權者",id:1277},{english:"creed",hangul:"신조",hanja:"信條",id:1278},{english:"creep",hangul:"포복하다",hanja:"匍匐",id:1279},{english:"creeping",hangul:"포복",hanja:"匍匐",id:1280},{english:"cremation",hangul:"화장",hanja:"火葬",id:1281,freq_deg:2957},{english:"crime",hangul:"범죄",hanja:"犯罪",id:1282,freq_deg:1091},{english:"criminal",hangul:"범인",hanja:"犯人",id:1283,freq_deg:2571},{english:"criminal",hangul:"범죄자",hanja:"犯罪者",id:1284},{english:"criminal law",hangul:"형법",hanja:"刑法",id:1285},{english:"cripple",hangul:"폐인",hanja:"廢人",id:1286},{english:"crisis",hangul:"위기",hanja:"危機",id:1287,freq_deg:1253},{english:"critical",hangul:"비판적인",hanja:"批判的",id:1288},{english:"criticism",hangul:"비평",hanja:"批評",id:1289},{english:"criticism",hangul:"비판",hanja:"批判",id:1290,freq_deg:1157},{english:"criticism",hangul:"평론",hanja:"評論",id:1291},{english:"criticism",hangul:"비난",hanja:"非難",id:1292,freq_deg:2323},{english:"critique",hangul:"평론",hanja:"評論",id:1293},{english:"crook",hangul:"악한",hanja:"惡漢",id:1294},{english:"crop",hangul:"농작물",hanja:"農作物",id:1295},{english:"cross",hangul:"십자가",hanja:"十字架",id:1296},{english:"cross",hangul:"절충",hanja:"折衷",id:1297},{english:"cross section",hangul:"단면",hanja:"斷面",id:1298},{english:"cross talk",hangul:"혼신",hanja:"混信",id:1299},{english:"crossing",hangul:"교차",hanja:"交叉",id:1300},{english:"crowd",hangul:"군중",hanja:"群衆",id:1301},{english:"crowd",hangul:"군집하다",hanja:"群集",id:1302},{english:"crown",hangul:"왕관",hanja:"王冠",id:1303},{english:"crown",hangul:"왕위",hanja:"王位",id:1304},{english:"cruelty",hangul:"잔학",hanja:"殘虐",id:1305},{english:"cruelty",hangul:"잔혹",hanja:"殘酷",id:1306},{english:"cruise",hangul:"순항하다",hanja:"巡航",id:1307},{english:"cruise",hangul:"순항",hanja:"巡航",id:1308},{english:"cruiser",hangul:"순양함",hanja:"巡洋艦",id:1309},{english:"crust",hangul:"갑각",hanja:"甲殼",id:1310},{english:"crystal",hangul:"수정",hanja:"水晶",id:1311},{english:"cube",hangul:"입방체",hanja:"立方體",id:1312},{english:"cube",hangul:"입방",hanja:"立方",id:1313},{english:"cuisine",hangul:"요리",hanja:"料理",id:1314,freq_deg:1415},{english:"culmination",hangul:"극치",hanja:"極致",id:1315},{english:"culprit",hangul:"범죄자",hanja:"犯罪者",id:1316},{english:"cultivation",hangul:"경작",hanja:"耕作",id:1317},{english:"cultivation",hangul:"재배",hanja:"栽培",id:1318},{english:"cultivation",hangul:"양식",hanja:"養殖",id:1319,freq_deg:5584},{english:"cultivation",hangul:"배양",hanja:"培養",id:1320},{english:"cultivator",hangul:"경작자",hanja:"耕作者",id:1321},{english:"cultivator",hangul:"경운기",hanja:"耕耘機",id:1322},{english:"cultural",hangul:"문화적인",hanja:"文化的",id:1323},{english:"culture",hangul:"문화",hanja:"文化",id:1324,freq_deg:62},{english:"culture",hangul:"수양",hanja:"修養",id:1325},{english:"culture",hangul:"양식",hanja:"養殖",id:1326,freq_deg:5584},{english:"culture",hangul:"배양",hanja:"培養",id:1327},{english:"culture",hangul:"재배하다",hanja:"栽培",id:1328},{english:"culture",hangul:"경작하다",hanja:"耕作",id:1329},{english:"culvert",hangul:"암거",hanja:"暗渠",id:1330},{english:"curator",hangul:"관장",hanja:"館長",id:1331},{english:"cure",hangul:"치유",hanja:"治癒",id:1332},{english:"curiosity",hangul:"호기심",hanja:"好奇心",id:1333,freq_deg:2434},{english:"currency",hangul:"통화",hanja:"通貨",id:1334,freq_deg:3777},{english:"current",hangul:"풍조",hanja:"風潮",id:1335},{english:"curve",hangul:"곡선",hanja:"曲線",id:1336},{english:"curve",hangul:"만곡하다",hanja:"彎曲",id:1337},{english:"custody",hangul:"보관",hanja:"保管",id:1338,freq_deg:3970},{english:"custom",hangul:"풍습",hanja:"風習",id:1339,freq_deg:2862},{english:"custom",hangul:"관례",hanja:"慣例",id:1340},{english:"custom",hangul:"습관",hanja:"習慣",id:1341,freq_deg:1532},{english:"customer",hangul:"고객",hanja:"顧客",id:1342,freq_deg:1512},{english:"cut",hangul:"절단하다",hanja:"切斷",id:1343},{english:"cuticle",hangul:"각피",hanja:"角皮",id:1344},{english:"cutting",hangul:"절단",hanja:"切斷",id:1345},{english:"cycle",hangul:"주기",hanja:"週期",id:1346},{english:"cycle",hangul:"주파",hanja:"周波",id:1347},{english:"cycle",hangul:"순환하다",hanja:"循環",id:1348},{english:"cylinder",hangul:"원주",hanja:"圓柱",id:1349},{english:"cylinder",hangul:"원통",hanja:"圓筒",id:1350},{english:"dagger",hangul:"단도",hanja:"短刀",id:1351},{english:"dairy products",hangul:"유제품",hanja:"乳製品",id:1352},{english:"damage",hangul:"손해",hanja:"損害",id:1353,freq_deg:2577},{english:"damage",hangul:"손상",hanja:"損傷",id:1354},{english:"dampness",hangul:"습기",hanja:"濕氣",id:1355,freq_deg:4808},{english:"dancing",hangul:"무도",hanja:"舞蹈",id:1356},{english:"danger",hangul:"위험",hanja:"危險",id:1357,freq_deg:1534},{english:"data",hangul:"자료",hanja:"資料",id:1358,freq_deg:455},{english:"date",hangul:"연월일",hanja:"年月日",id:1359},{english:"dawn",hangul:"여명",hanja:"黎明",id:1360},{english:"day off",hangul:"휴일",hanja:"休日",id:1361,freq_deg:3898},{english:"daytime",hangul:"주간",hanja:"晝間",id:1362},{english:"deacon",hangul:"집사",hanja:"執事",id:1363},{english:"deadlock",hangul:"정돈",hanja:"停頓",id:1364},{english:"death",hangul:"사망",hanja:"死亡",id:1365,freq_deg:4200},{english:"death",hangul:"사신",hanja:"死神",id:1366},{english:"death penalty",hangul:"사형",hanja:"死刑",id:1367},{english:"deathbed",hangul:"임종",hanja:"臨終",id:1368},{english:"debate",hangul:"토론하다",hanja:"討論",id:1369,freq_deg:4530},{english:"debility",hangul:"쇠약",hanja:"衰弱",id:1370},{english:"debt",hangul:"부채",hanja:"負債",id:1371,freq_deg:4858},{english:"decadence",hangul:"쇠미",hanja:"衰微",id:1372},{english:"decay",hangul:"부패하다",hanja:"腐敗",id:1373},{english:"decay",hangul:"부패",hanja:"腐敗",id:1374},{english:"decease",hangul:"사망하다",hanja:"死亡",id:1375,freq_deg:4503},{english:"deceleration",hangul:"감속",hanja:"減速",id:1376},{english:"decentralization",hangul:"분산",hanja:"分散",id:1377},{english:"decision",hangul:"결정",hanja:"決定",id:1378,freq_deg:968},{english:"deck",hangul:"갑판",hanja:"甲板",id:1379},{english:"declaration",hangul:"선언",hanja:"宣言",id:1380},{english:"declarative sentence",hangul:"평서문",hanja:"平敍文",id:1381},{english:"declination",hangul:"편차",hanja:"偏差",id:1382},{english:"decompression",hangul:"감압",hanja:"減壓",id:1383},{english:"decorate",hangul:"장식하다",hanja:"裝飾",id:1384},{english:"decoration",hangul:"훈장",hanja:"勳章",id:1385},{english:"decorative",hangul:"장식적인",hanja:"裝飾的",id:1386},{english:"decrease",hangul:"감소",hanja:"減少",id:1387,freq_deg:3948},{english:"decree",hangul:"판결",hanja:"判決",id:1388,freq_deg:1347},{english:"decrepitude",hangul:"노후",hanja:"老朽",id:1389},{english:"dedication",hangul:"헌신",hanja:"獻身",id:1390},{english:"dedication",hangul:"헌정",hanja:"獻呈",id:1391},{english:"deduction",hangul:"공제",hanja:"控除",id:1392},{english:"deed",hangul:"행위",hanja:"行爲",id:1393,freq_deg:465},{english:"defamation",hangul:"중상",hanja:"中傷",id:1394},{english:"defame",hangul:"중상하다",hanja:"中傷",id:1395},{english:"defeat",hangul:"타파",hanja:"打破",id:1396},{english:"defecation",hangul:"배변",hanja:"排便",id:1397},{english:"defect",hangul:"결점",hanja:"缺點",id:1398},{english:"defendant",hangul:"피고",hanja:"被告",id:1399},{english:"defense",hangul:"방위",hanja:"防衛",id:1400},{english:"defense",hangul:"수비",hanja:"守備",id:1401},{english:"defense",hangul:"변호",hanja:"辨護",id:1402},{english:"defensive",hangul:"수세",hanja:"守勢",id:1403},{english:"defiance",hangul:"도전",hanja:"挑戰",id:1404,freq_deg:3326},{english:"defiance",hangul:"반항",hanja:"反抗",id:1405},{english:"deficit",hangul:"결손",hanja:"缺損",id:1406},{english:"definition",hangul:"정의",hanja:"定義",id:1407},{english:"defoliation",hangul:"낙엽",hanja:"落葉",id:1408,freq_deg:4035},{english:"deformation",hangul:"변형",hanja:"變形",id:1409},{english:"degeneration",hangul:"악화",hanja:"惡化",id:1410},{english:"degradation",hangul:"타락",hanja:"墮落",id:1411,freq_deg:3776},{english:"degradation",hangul:"좌천",hanja:"左遷",id:1412},{english:"degree",hangul:"정도",hanja:"程度",id:1413,freq_deg:76},{english:"degree",hangul:"학위",hanja:"學位",id:1414,freq_deg:4023},{english:"deification",hangul:"신격화",hanja:"神格化",id:1415},{english:"dejection",hangul:"낙담",hanja:"落膽",id:1416},{english:"delay",hangul:"지체하다",hanja:"遲滯",id:1417},{english:"delay",hangul:"지연",hanja:"遲延",id:1418},{english:"delegate",hangul:"대표자",hanja:"代表者",id:1419},{english:"delegate",hangul:"사절",hanja:"使節",id:1420},{english:"deletion",hangul:"삭제",hanja:"削除",id:1421},{english:"deliberation",hangul:"숙고",hanja:"熟考",id:1422},{english:"deliberation",hangul:"심의",hanja:"審議",id:1423},{english:"delinquency",hangul:"비행",hanja:"非行",id:1424,freq_deg:4591},{english:"delivery",hangul:"배달",hanja:"配達",id:1425,freq_deg:4736},{english:"delusion",hangul:"미망",hanja:"迷妄",id:1426},{english:"demand",hangul:"요구",hanja:"要求",id:1427,freq_deg:873},{english:"demand",hangul:"청구",hanja:"請求",id:1428},{english:"demand",hangul:"요구하다",hanja:"要求",id:1429,freq_deg:594},{english:"demarcation",hangul:"구분",hanja:"區分",id:1430,freq_deg:2243},{english:"demigod",hangul:"반신",hanja:"半神",id:1431},{english:"democracy",hangul:"민주주의",hanja:"民主主義",id:1432,freq_deg:1733},{english:"democratic",hangul:"민주적인",hanja:"民主的",id:1433},{english:"demon",hangul:"악마",hanja:"惡魔",id:1434},{english:"demonstration",hangul:"논증",hanja:"論證",id:1435},{english:"demotion",hangul:"좌천",hanja:"左遷",id:1436},{english:"demotion",hangul:"강등",hanja:"降等",id:1437},{english:"denial",hangul:"부정",hanja:"否定",id:1438,freq_deg:1023},{english:"denial",hangul:"부인",hanja:"否認",id:1439,freq_deg:4738},{english:"denial",hangul:"거부",hanja:"拒否",id:1440},{english:"denominator",hangul:"분모",hanja:"分母",id:1441},{english:"denouement",hangul:"대단원",hanja:"大團圓",id:1442},{english:"density",hangul:"밀도",hanja:"密度",id:1443},{english:"departure",hangul:"출발",hanja:"出發",id:1444,freq_deg:2480},{english:"dependence",hangul:"의존",hanja:"依存",id:1445},{english:"dependency",hangul:"속령",hanja:"屬領",id:1446},{english:"dependency",hangul:"속국",hanja:"屬國",id:1447},{english:"dependent",hangul:"의존하는",hanja:"依存",id:1448},{english:"depiction",hangul:"묘사",hanja:"描寫",id:1449,freq_deg:3861},{english:"deportment",hangul:"품행",hanja:"品行",id:1450},{english:"deposit",hangul:"예금",hanja:"預金",id:1451,freq_deg:1749},{english:"depositor",hangul:"공탁자",hanja:"供託者",id:1452},{english:"depositor",hangul:"예금자",hanja:"預金者",id:1453},{english:"depot",hangul:"정거장",hanja:"停車場",id:1454,freq_deg:5270},{english:"depravity",hangul:"타락",hanja:"墮落",id:1455,freq_deg:3776},{english:"deputy",hangul:"대리",hanja:"代理",id:1456},{english:"derivation",hangul:"유래",hanja:"由來",id:1457},{english:"descendant",hangul:"자손",hanja:"子孫",id:1458},{english:"descent",hangul:"하강",hanja:"下降",id:1459},{english:"description",hangul:"서술",hanja:"敍述",id:1460},{english:"description",hangul:"묘사",hanja:"描寫",id:1461,freq_deg:3861},{english:"desertion",hangul:"유기",hanja:"遺棄",id:1462},{english:"design",hangul:"설계",hanja:"設計",id:1463},{english:"design",hangul:"계획하다",hanja:"計劃",id:1464,freq_deg:3781},{english:"designate",hangul:"지명하다",hanja:"指名",id:1465},{english:"designation",hangul:"지정",hanja:"指定",id:1466},{english:"designation",hangul:"임명",hanja:"任命",id:1467},{english:"desire",hangul:"소원",hanja:"所願",id:1468,freq_deg:3203},{english:"desire",hangul:"욕구",hanja:"慾求",id:1469},{english:"despair",hangul:"절망",hanja:"絶望",id:1470,freq_deg:3052},{english:"desperate",hangul:"절망적인",hanja:"絶望的",id:1471},{english:"desperation",hangul:"필사",hanja:"必死",id:1472},{english:"desperation",hangul:"자포자기",hanja:"自暴自棄",id:1473},{english:"despise",hangul:"경멸하다",hanja:"輕蔑",id:1474},{english:"despoil",hangul:"약탈하다",hanja:"掠奪",id:1475},{english:"despondency",hangul:"낙담",hanja:"落膽",id:1476},{english:"despot",hangul:"독재자",hanja:"獨裁者",id:1477},{english:"despot",hangul:"폭군",hanja:"暴君",id:1478},{english:"destiny",hangul:"천명",hanja:"天命",id:1479},{english:"destroyer",hangul:"파괴자",hanja:"破壞者",id:1480},{english:"destroyer",hangul:"구축함",hanja:"驅逐艦",id:1481},{english:"destruction",hangul:"파괴",hanja:"破壞",id:1482},{english:"destruction",hangul:"멸망",hanja:"滅亡",id:1483},{english:"destructive",hangul:"파괴적인",hanja:"破壞的",id:1484},{english:"detachment",hangul:"분리",hanja:"分離",id:1485,freq_deg:2888},{english:"detail",hangul:"세부",hanja:"細部",id:1486},{english:"detainee",hangul:"억류자",hanja:"抑留者",id:1487},{english:"detention",hangul:"억류",hanja:"抑留",id:1488},{english:"detention",hangul:"구류",hanja:"拘留",id:1489},{english:"detergent",hangul:"세제",hanja:"洗劑",id:1490,freq_deg:4352},{english:"deterioration",hangul:"악화",hanja:"惡化",id:1491},{english:"deterioration",hangul:"저하",hanja:"低下",id:1492},{english:"determination",hangul:"결심",hanja:"決心",id:1493,freq_deg:3723},{english:"deterrent",hangul:"방해하는",hanja:"妨害",id:1494},{english:"dethronement",hangul:"폐위",hanja:"廢位",id:1495},{english:"development",hangul:"발달",hanja:"發達",id:1496,freq_deg:1207},{english:"development",hangul:"발전",hanja:"發展",id:1497,freq_deg:3455},{english:"deviation",hangul:"편차",hanja:"偏差",id:1498},{english:"device",hangul:"고안",hanja:"考案",id:1499},{english:"devil",hangul:"악마",hanja:"惡魔",id:1500},{english:"devoted",hangul:"헌신적인",hanja:"獻身的",id:1501},{english:"devotion",hangul:"헌신",hanja:"獻身",id:1502},{english:"devotion",hangul:"귀의",hanja:"歸依",id:1503},{english:"dew point",hangul:"노점",hanja:"露點",id:1504},{english:"dextrin",hangul:"호정",hanja:"糊精",id:1505},{english:"diabetes",hangul:"당뇨병",hanja:"糖尿病",id:1506},{english:"diadem",hangul:"왕관",hanja:"王冠",id:1507},{english:"diagnosis",hangul:"진단",hanja:"診斷",id:1508,freq_deg:2725},{english:"diagram",hangul:"도표",hanja:"圖表",id:1509},{english:"dialect",hangul:"방언",hanja:"方言",id:1510},{english:"dialogue",hangul:"대화",hanja:"對話",id:1511,freq_deg:625},{english:"dialogue",hangul:"문답",hanja:"問答",id:1512},{english:"dialogue",hangul:"대화하다",hanja:"對話",id:1513,freq_deg:4912},{english:"diameter",hangul:"직경",hanja:"直徑",id:1514},{english:"diary",hangul:"일기",hanja:"日記",id:1515,freq_deg:4880},{english:"dictate",hangul:"명령하다",hanja:"命令",id:1516},{english:"dictator",hangul:"독재자",hanja:"獨裁者",id:1517},{english:"dictatorial",hangul:"독재적인",hanja:"獨裁的",id:1518},{english:"dictionary",hangul:"사전",hanja:"辭典",id:1519,freq_deg:4743},{english:"dictionary",hangul:"사서",hanja:"辭書",id:1520},{english:"differentiation",hangul:"구별",hanja:"區別",id:1521,freq_deg:3589},{english:"difficulty",hangul:"곤란",hanja:"困難",id:1522},{english:"difficulty",hangul:"지장",hanja:"支障",id:1523},{english:"diffusion",hangul:"보급",hanja:"普及",id:1524},{english:"digest",hangul:"요약하다",hanja:"要約",id:1525,freq_deg:3762},{english:"digest",hangul:"요약",hanja:"要約",id:1526},{english:"digestion",hangul:"소화",hanja:"消化",id:1527,freq_deg:3750},{english:"dignity",hangul:"위엄",hanja:"威嚴",id:1528},{english:"dignity",hangul:"존엄",hanja:"尊嚴",id:1529},{english:"dignity",hangul:"관록",hanja:"貫祿",id:1530},{english:"dignity",hangul:"품위",hanja:"品位",id:1531},{english:"digression",hangul:"여담",hanja:"餘談",id:1532},{english:"dilemma",hangul:"궁지",hanja:"窮地",id:1533},{english:"diligence",hangul:"근면",hanja:"勤勉",id:1534},{english:"dilution",hangul:"희석",hanja:"稀釋",id:1535},{english:"dimension",hangul:"차원",hanja:"次元",id:1536},{english:"dining table",hangul:"식탁",hanja:"食卓",id:1537,freq_deg:2520},{english:"dinner",hangul:"만찬",hanja:"晩餐",id:1538},{english:"dinner",hangul:"오찬",hanja:"午餐",id:1539},{english:"dinosaur",hangul:"공룡",hanja:"恐龍",id:1540},{english:"diplomat",hangul:"외교관",hanja:"外交官",id:1541,freq_deg:3879},{english:"direct current",hangul:"직류",hanja:"直流",id:1542},{english:"direct proportion",hangul:"정비례",hanja:"正比例",id:1543},{english:"direct ratio",hangul:"정비례",hanja:"正比例",id:1544},{english:"direction",hangul:"방위",hanja:"方位",id:1545},{english:"direction",hangul:"방향",hanja:"方向",id:1546,freq_deg:433},{english:"direction",hangul:"지휘",hanja:"指揮",id:1547},{english:"director",hangul:"지휘자",hanja:"指揮者",id:1548},{english:"director",hangul:"중역",hanja:"重役",id:1549},{english:"dirt",hangul:"오물",hanja:"汚物",id:1550},{english:"disagreement",hangul:"불일치",hanja:"不一致",id:1551},{english:"disappear",hangul:"소실하다",hanja:"消失",id:1552},{english:"disappearance",hangul:"실종",hanja:"失踪",id:1553},{english:"disappointment",hangul:"실망",hanja:"失望",id:1554,freq_deg:3988},{english:"disapproval",hangul:"부인",hanja:"否認",id:1555,freq_deg:4738},{english:"disassembly",hangul:"분해",hanja:"分解",id:1556},{english:"disaster",hangul:"천재",hanja:"天災",id:1557,freq_deg:5189},{english:"disaster",hangul:"재해",hanja:"災害",id:1558},{english:"disaster",hangul:"참사",hanja:"慘事",id:1559},{english:"disbursement",hangul:"출비",hanja:"出費",id:1560},{english:"discharge",hangul:"방출하다",hanja:"放出",id:1561},{english:"discharge",hangul:"해고하다",hanja:"解雇",id:1562},{english:"discharge",hangul:"이행하다",hanja:"履行",id:1563},{english:"discharge",hangul:"발사하다",hanja:"發射",id:1564},{english:"discharge",hangul:"발사",hanja:"發射",id:1565},{english:"discharge",hangul:"해고",hanja:"解雇",id:1566},{english:"disciple",hangul:"제자",hanja:"弟子",id:1567,freq_deg:1762},{english:"disciple",hangul:"사도",hanja:"使徒",id:1568},{english:"discipline",hangul:"훈육",hanja:"訓育",id:1569},{english:"discipline",hangul:"징계",hanja:"懲戒",id:1570},{english:"discipline",hangul:"징계하다",hanja:"懲戒",id:1571},{english:"disclosure",hangul:"폭로",hanja:"暴露",id:1572},{english:"discoloration",hangul:"변색",hanja:"變色",id:1573},{english:"discord",hangul:"불일치",hanja:"不一致",id:1574},{english:"discord",hangul:"불화하다",hanja:"不和",id:1575},{english:"discount",hangul:"할인",hanja:"割引",id:1576,freq_deg:4899},{english:"discount",hangul:"할인하다",hanja:"割引",id:1577},{english:"discouragement",hangul:"낙담",hanja:"落膽",id:1578},{english:"discoverer",hangul:"발견자",hanja:"發見者",id:1579},{english:"discredit",hangul:"불신",hanja:"不信",id:1580},{english:"discrepancy",hangul:"불일치",hanja:"不一致",id:1581},{english:"discretion",hangul:"신중",hanja:"愼重",id:1582},{english:"discrimination",hangul:"차별",hanja:"差別",id:1583,freq_deg:2241},{english:"discrimination",hangul:"식별",hanja:"識別",id:1584},{english:"discus",hangul:"원반",hanja:"圓盤",id:1585},{english:"discussion",hangul:"토론",hanja:"討論",id:1586,freq_deg:1667},{english:"discussion",hangul:"토의",hanja:"討議",id:1587},{english:"discussion",hangul:"논의",hanja:"論議",id:1588},{english:"discussion",hangul:"변론",hanja:"辯論",id:1589},{english:"disdain",hangul:"경멸",hanja:"輕蔑",id:1590},{english:"disdain",hangul:"경멸하다",hanja:"輕蔑",id:1591},{english:"disembarkation",hangul:"상륙",hanja:"上陸",id:1592},{english:"disgrace",hangul:"치욕",hanja:"恥辱",id:1593},{english:"disguise",hangul:"변장하다",hanja:"變裝",id:1594},{english:"disguise",hangul:"변장",hanja:"變裝",id:1595},{english:"disgust",hangul:"혐오",hanja:"嫌惡",id:1596},{english:"disinfection",hangul:"소독",hanja:"消毒",id:1597},{english:"disinfection",hangul:"살균",hanja:"殺菌",id:1598},{english:"disorder",hangul:"무질서",hanja:"無秩序",id:1599},{english:"disorder",hangul:"혼란",hanja:"混亂",id:1600},{english:"disparity",hangul:"불균형",hanja:"不均衡",id:1601},{english:"dispatch",hangul:"급송하다",hanja:"急送",id:1602},{english:"dispatch",hangul:"급파하다",hanja:"急派",id:1603},{english:"dispatch",hangul:"급송",hanja:"急送",id:1604},{english:"dispenser",hangul:"분배자",hanja:"分配者",id:1605},{english:"dispersion",hangul:"산란",hanja:"散亂",id:1606},{english:"dispersion",hangul:"분산",hanja:"分散",id:1607},{english:"display",hangul:"진열하다",hanja:"陳列",id:1608},{english:"display",hangul:"과시하다",hanja:"誇示",id:1609},{english:"display",hangul:"진열",hanja:"陳列",id:1610},{english:"display",hangul:"전시",hanja:"展示",id:1611,freq_deg:3932},{english:"display",hangul:"표시",hanja:"表示",id:1612,freq_deg:4098},{english:"displeasure",hangul:"불쾌",hanja:"不快",id:1613},{english:"disposal",hangul:"처리",hanja:"處理",id:1614,freq_deg:1039},{english:"disposal",hangul:"처분",hanja:"處分",id:1615},{english:"disposition",hangul:"배치",hanja:"配置",id:1616,freq_deg:4418},{english:"disposition",hangul:"처리",hanja:"處理",id:1617,freq_deg:1039},{english:"disposition",hangul:"성질",hanja:"性質",id:1618,freq_deg:2468},{english:"disproof",hangul:"반증",hanja:"反證",id:1619},{english:"disputant",hangul:"논쟁자",hanja:"論爭者",id:1620},{english:"dispute",hangul:"논쟁하다",hanja:"論爭",id:1621},{english:"dispute",hangul:"논쟁",hanja:"論爭",id:1622,freq_deg:2342},{english:"dispute",hangul:"분쟁",hanja:"紛爭",id:1623},{english:"disqualification",hangul:"불합격",hanja:"不合格",id:1624},{english:"disqualification",hangul:"실격",hanja:"失格",id:1625},{english:"disregard",hangul:"무시",hanja:"無視",id:1626},{english:"disregard",hangul:"무시하다",hanja:"無視",id:1627,freq_deg:1786},{english:"disrupt",hangul:"분열하다",hanja:"分裂",id:1628},{english:"dissection",hangul:"해부",hanja:"解剖",id:1629},{english:"dissemination",hangul:"산포",hanja:"散布",id:1630},{english:"dissension",hangul:"불화",hanja:"不和",id:1631},{english:"dissent",hangul:"이의",hanja:"異議",id:1632},{english:"dissenter",hangul:"반대자",hanja:"反對者",id:1633},{english:"dissipation",hangul:"소산",hanja:"消散",id:1634},{english:"dissipation",hangul:"방탕",hanja:"放蕩",id:1635},{english:"dissolution",hangul:"해산",hanja:"解散",id:1636},{english:"distance",hangul:"거리",hanja:"距離",id:1637,freq_deg:5296},{english:"distinction",hangul:"차별",hanja:"差別",id:1638,freq_deg:2241},{english:"distinction",hangul:"구별",hanja:"區別",id:1639,freq_deg:3589},{english:"distortion",hangul:"왜곡",hanja:"歪曲",id:1640},{english:"distribution",hangul:"분포",hanja:"分布",id:1641},{english:"district",hangul:"지구",hanja:"地區",id:1642,freq_deg:2427},{english:"district",hangul:"지방",hanja:"地方",id:1643,freq_deg:4891},{english:"distrust",hangul:"불신",hanja:"不信",id:1644},{english:"distrust",hangul:"의혹",hanja:"疑惑",id:1645},{english:"distrust",hangul:"의심하다",hanja:"疑心",id:1646,freq_deg:2471},{english:"ditto",hangul:"동상",hanja:"同上",id:1647},{english:"diuretic",hangul:"이뇨제",hanja:"利尿劑",id:1648},{english:"diversified",hangul:"다각적인",hanja:"多角的",id:1649},{english:"diversion",hangul:"견제",hanja:"牽制",id:1650},{english:"divert",hangul:"전환하다",hanja:"轉換",id:1651,freq_deg:3570},{english:"divider",hangul:"분할자",hanja:"分割",id:1652},{english:"divinity",hangul:"신성",hanja:"神性",id:1653},{english:"division",hangul:"분할",hanja:"分割",id:1654},{english:"division",hangul:"분배",hanja:"分配",id:1655},{english:"division",hangul:"분열",hanja:"分裂",id:1656},{english:"division",hangul:"구획",hanja:"區劃",id:1657},{english:"division",hangul:"사단",hanja:"師團",id:1658},{english:"divorce",hangul:"이혼",hanja:"離婚",id:1659,freq_deg:4761},{english:"divorce",hangul:"이혼하다",hanja:"離婚",id:1660,freq_deg:5346},{english:"doctor",hangul:"의사",hanja:"醫師",id:1661,freq_deg:1943},{english:"doctrine",hangul:"주의",hanja:"主義",id:1662,freq_deg:2826},{english:"document",hangul:"문서",hanja:"文書",id:1663,freq_deg:2678},{english:"document",hangul:"서류",hanja:"書類",id:1664,freq_deg:2576},{english:"doll",hangul:"인형",hanja:"人形",id:1665,freq_deg:3669},{english:"dolomite",hangul:"백운석",hanja:"白雲石",id:1666},{english:"domain",hangul:"영역",hanja:"領域",id:1667,freq_deg:1190},{english:"domestic animal",hangul:"가축",hanja:"家畜",id:1668},{english:"domestic demand",hangul:"내수",hanja:"內需",id:1669},{english:"domicile",hangul:"주소",hanja:"住所",id:1670,freq_deg:3772},{english:"dominance",hangul:"우성",hanja:"優性",id:1671},{english:"dominant",hangul:"지배적인",hanja:"支配的",id:1672},{english:"dominate",hangul:"지배하다",hanja:"支配",id:1673,freq_deg:1701},{english:"dominion",hangul:"주권",hanja:"主權",id:1674},{english:"donor",hangul:"기증자",hanja:"寄贈者",id:1675},{english:"dosage",hangul:"투약",hanja:"投藥",id:1676},{english:"dotted line",hangul:"점선",hanja:"点線",id:1677},{english:"doubling",hangul:"배가",hanja:"倍加",id:1678},{english:"doubt",hangul:"의심",hanja:"疑心",id:1679,freq_deg:3170},{english:"doubt",hangul:"의문",hanja:"疑問",id:1680,freq_deg:1737},{english:"downfall",hangul:"멸망",hanja:"滅亡",id:1681},{english:"downpour",hangul:"호우",hanja:"豪雨",id:1682},{english:"draft",hangul:"초안",hanja:"草案",id:1683},{english:"draft",hangul:"초고",hanja:"草稿",id:1684},{english:"drainage",hangul:"배수",hanja:"排水",id:1685},{english:"drainage",hangul:"하수",hanja:"下水",id:1686},{english:"drawing",hangul:"제도",hanja:"製圖",id:1687},{english:"dread",hangul:"공포",hanja:"恐怖",id:1688,freq_deg:1863},{english:"dream",hangul:"몽상",hanja:"夢想",id:1689},{english:"dress",hangul:"의상",hanja:"衣裳",id:1690},{english:"drift",hangul:"표류",hanja:"漂流",id:1691},{english:"drift ice",hangul:"유빙",hanja:"流氷",id:1692},{english:"drill",hangul:"훈련하다",hanja:"訓練",id:1693},{english:"drinking bout",hangul:"주연",hanja:"酒宴",id:1694},{english:"drinking water",hangul:"음료수",hanja:"飮料水",id:1695,freq_deg:4707},{english:"driving",hangul:"운전",hanja:"運轉",id:1696,freq_deg:3089},{english:"dromedary",hangul:"단봉낙타",hanja:"單峰駱駝",id:1697},{english:"drop",hangul:"낙하",hanja:"落下",id:1698},{english:"dropping",hangul:"투하",hanja:"投下",id:1699},{english:"dropsy",hangul:"수종",hanja:"水腫",id:1700},{english:"drought",hangul:"한발",hanja:"旱魃",id:1701},{english:"drug",hangul:"약제",hanja:"藥劑",id:1702},{english:"drummer",hangul:"고수",hanja:"鼓手",id:1703},{english:"dry cell",hangul:"건전지",hanja:"乾電池",id:1704},{english:"dry dock",hangul:"건선거",hanja:"乾船渠",id:1705},{english:"dry goods",hangul:"잡화",hanja:"雜貨",id:1706},{english:"dry plate",hangul:"건판",hanja:"乾板",id:1707},{english:"duel",hangul:"결투",hanja:"決鬪",id:1708},{english:"duke",hangul:"공작",hanja:"公爵",id:1709},{english:"dukedom",hangul:"공국",hanja:"公國",id:1710},{english:"dummy",hangul:"모형",hanja:"模型",id:1711},{english:"duodenum",hangul:"십이지장",hanja:"十二指腸",id:1712},{english:"duplicate",hangul:"부본",hanja:"副本",id:1713},{english:"duplicate",hangul:"복사하다",hanja:"複寫",id:1714,freq_deg:4995},{english:"duplication",hangul:"중복",hanja:"重複",id:1715},{english:"duplication",hangul:"복제",hanja:"複製",id:1716},{english:"duplicity",hangul:"이심",hanja:"二心",id:1717},{english:"duty",hangul:"의무",hanja:"義務",id:1718,freq_deg:2255},{english:"duty",hangul:"책임",hanja:"責任",id:1719,freq_deg:682},{english:"duty",hangul:"임무",hanja:"任務",id:1720,freq_deg:3128},{english:"dweller",hangul:"거주자",hanja:"居住者",id:1721},{english:"dwelling",hangul:"주거",hanja:"住居",id:1722,freq_deg:4165},{english:"dynasty",hangul:"왕조",hanja:"王朝",id:1723},{english:"eardrum",hangul:"고막",hanja:"鼓膜",id:1724},{english:"earnings",hangul:"소득",hanja:"所得",id:1725,freq_deg:1467},{english:"earth",hangul:"지구",hanja:"地球",id:1726,freq_deg:2427},{english:"earthquake",hangul:"지진",hanja:"地震",id:1727,freq_deg:4660},{english:"ease",hangul:"안심하다",hanja:"安心",id:1728,freq_deg:5159},{english:"echo",hangul:"반향",hanja:"反響",id:1729},{english:"echo",hangul:"반향하다",hanja:"反響",id:1730},{english:"economic",hangul:"경제적인",hanja:"經濟的",id:1731},{english:"economy",hangul:"경제",hanja:"經濟",id:1732,freq_deg:179},{english:"economy",hangul:"검약",hanja:"儉約",id:1733},{english:"ecstasy",hangul:"황홀",hanja:"恍惚",id:1734},{english:"eczema",hangul:"습진",hanja:"濕疹",id:1735},{english:"edema",hangul:"부종",hanja:"浮腫",id:1736},{english:"edema",hangul:"수종",hanja:"水腫",id:1737},{english:"edict",hangul:"칙령",hanja:"勅令",id:1738},{english:"educe",hangul:"추출하다",hanja:"抽出",id:1739},{english:"effect",hangul:"영향",hanja:"影響",id:1740,freq_deg:405},{english:"effect",hangul:"효과",hanja:"效果",id:1741,freq_deg:505},{english:"effective",hangul:"효과적인",hanja:"效果的",id:1742},{english:"effeminacy",hangul:"유약",hanja:"柔弱",id:1743},{english:"efficacy",hangul:"효력",hanja:"效力",id:1744},{english:"effort",hangul:"노력",hanja:"勞力",id:1745,freq_deg:442},{english:"egg cell",hangul:"난자",hanja:"卵子",id:1746},{english:"ego",hangul:"자아",hanja:"自我",id:1747},{english:"egoism",hangul:"이기주의",hanja:"利己主義",id:1748},{english:"elasticity",hangul:"탄력",hanja:"彈力",id:1749},{english:"election",hangul:"선거",hanja:"選擧",id:1750,freq_deg:268},{english:"election",hangul:"선임",hanja:"選任",id:1751},{english:"electorate",hangul:"유권자",hanja:"有權者",id:1752},{english:"electric current",hangul:"전류",hanja:"電流",id:1753},{english:"electric light",hangul:"전등",hanja:"電燈",id:1754},{english:"electric power",hangul:"전력",hanja:"電力",id:1755},{english:"electricity",hangul:"전기",hanja:"電氣",id:1756,freq_deg:4821},{english:"electrocardiograph",hangul:"심전계",hanja:"心電計",id:1757},{english:"electrode",hangul:"전극",hanja:"電極",id:1758},{english:"electrolysis",hangul:"전해",hanja:"電解",id:1759},{english:"electron",hangul:"전자",hanja:"電子",id:1760,freq_deg:1991},{english:"elegance",hangul:"우미",hanja:"優美",id:1761},{english:"elegance",hangul:"우아",hanja:"優雅",id:1762},{english:"elegy",hangul:"만가",hanja:"挽歌",id:1763},{english:"elegy",hangul:"애가",hanja:"哀歌",id:1764},{english:"element",hangul:"요소",hanja:"要素",id:1765},{english:"elementary particles",hangul:"소립자",hanja:"素粒子",id:1766},{english:"elevation",hangul:"향상",hanja:"向上",id:1767,freq_deg:2696},{english:"elimination",hangul:"소거",hanja:"消去",id:1768},{english:"ellipse",hangul:"타원",hanja:"楕円",id:1769},{english:"elongation",hangul:"연장",hanja:"延長",id:1770,freq_deg:4151},{english:"elongation",hangul:"신장",hanja:"伸張",id:1771},{english:"eloquence",hangul:"웅변",hanja:"雄弁",id:1772},{english:"elucidation",hangul:"해명",hanja:"解明",id:1773},{english:"emancipation",hangul:"해방",hanja:"解放",id:1774},{english:"embankment",hangul:"축제",hanja:"築堤",id:1775,freq_deg:2218},{english:"embarrassment",hangul:"당혹",hanja:"當惑",id:1776},{english:"embassy",hangul:"대사관",hanja:"大使館",id:1777,freq_deg:4331},{english:"embellish",hangul:"장식하다",hanja:"裝飾",id:1778},{english:"ember",hangul:"여신",hanja:"餘燼",id:1779},{english:"embrace",hangul:"포옹하다",hanja:"抱擁",id:1780},{english:"embrace",hangul:"채용하다",hanja:"採用",id:1781},{english:"embrace",hangul:"포옹",hanja:"抱擁",id:1782},{english:"embryo",hangul:"태아",hanja:"胎兒",id:1783,freq_deg:1794},{english:"embryology",hangul:"발생학",hanja:"發生學",id:1784},{english:"emigrant",hangul:"이민",hanja:"移民",id:1785,freq_deg:5344},{english:"emissary",hangul:"사자",hanja:"使者",id:1786,freq_deg:5234},{english:"emission",hangul:"방사",hanja:"放射",id:1787},{english:"emperor",hangul:"황제",hanja:"皇帝",id:1788},{english:"empire",hangul:"제국",hanja:"帝國",id:1789},{english:"employ",hangul:"고용하다",hanja:"雇傭",id:1790},{english:"empress",hangul:"황후",hanja:"皇后",id:1791},{english:"empyema",hangul:"축농증",hanja:"蓄膿症",id:1792},{english:"emulsion",hangul:"유제",hanja:"乳劑",id:1793},{english:"enactment",hangul:"제정",hanja:"制定",id:1794},{english:"enamel",hangul:"유약",hanja:"釉藥",id:1795},{english:"enamel",hangul:"법랑",hanja:"琺瑯",id:1796},{english:"encampment",hangul:"진지",hanja:"陣地",id:1797},{english:"encephalitis",hangul:"뇌염",hanja:"腦炎",id:1798},{english:"enchant",hangul:"매혹하다",hanja:"魅惑",id:1799},{english:"encirclement",hangul:"포위",hanja:"包圍",id:1800},{english:"encroachment",hangul:"잠식",hanja:"蠶食",id:1801},{english:"endeavor",hangul:"노력하다",hanja:"勞力",id:1802,freq_deg:843},{english:"endosperm",hangul:"배유",hanja:"胚乳",id:1803},{english:"endurance",hangul:"인내",hanja:"忍耐",id:1804},{english:"energy",hangul:"정력",hanja:"精力",id:1805},{english:"energy",hangul:"활기",hanja:"活氣",id:1806,freq_deg:4177},{english:"energy",hangul:"원기",hanja:"元氣",id:1807},{english:"enforcement",hangul:"집행",hanja:"執行",id:1808},{english:"engage",hangul:"고용하다",hanja:"雇傭",id:1809},{english:"engagement",hangul:"초빙",hanja:"招聘",id:1810},{english:"engine",hangul:"기관",hanja:"機關",id:1811,freq_deg:399},{english:"engine",hangul:"기관차",hanja:"機關車",id:1812},{english:"engineer",hangul:"기사",hanja:"技師",id:1813,freq_deg:3730},{english:"engineering",hangul:"공학",hanja:"工學",id:1814},{english:"engraving",hangul:"조각",hanja:"彫刻",id:1815,freq_deg:2608},{english:"enjoin",hangul:"명령하다",hanja:"命令",id:1816},{english:"enlargement",hangul:"확대",hanja:"擴大",id:1817},{english:"enlightenment",hangul:"계몽",hanja:"啓蒙",id:1818},{english:"enlistment",hangul:"입대",hanja:"入隊",id:1819,freq_deg:3704},{english:"enlistment",hangul:"징모",hanja:"徵募",id:1820},{english:"enough",hangul:"충분히",hanja:"充分",id:1821,freq_deg:1069},{english:"ensign",hangul:"군기",hanja:"軍旗",id:1822},{english:"ensure",hangul:"확보하다",hanja:"確保",id:1823},{english:"ensure",hangul:"보증하다",hanja:"保證",id:1824},{english:"enteritis",hangul:"장염",hanja:"腸炎",id:1825},{english:"enterprise",hangul:"사업",hanja:"事業",id:1826,freq_deg:464},{english:"enterprise",hangul:"기업",hanja:"企業",id:1827,freq_deg:264},{english:"enthusiasm",hangul:"열심",hanja:"熱心",id:1828},{english:"enthusiasm",hangul:"열중",hanja:"熱中",id:1829},{english:"enthusiasm",hangul:"열의",hanja:"熱意",id:1830},{english:"enthusiast",hangul:"열광자",hanja:"熱狂者",id:1831},{english:"entice",hangul:"유혹하다",hanja:"誘惑",id:1832},{english:"entirety",hangul:"전체",hanja:"全體",id:1833,freq_deg:294},{english:"entity",hangul:"실체",hanja:"實體",id:1834,freq_deg:2171},{english:"entrance",hangul:"입장",hanja:"入場",id:1835,freq_deg:400},{english:"entrance",hangul:"입구",hanja:"入口",id:1836,freq_deg:1873},{english:"entrust",hangul:"위임하다",hanja:"委任",id:1837},{english:"entry",hangul:"기입",hanja:"記入",id:1838},{english:"enumeration",hangul:"열거",hanja:"列擧",id:1839},{english:"envelopment",hangul:"포위",hanja:"包圍",id:1840},{english:"environment",hangul:"환경",hanja:"環境",id:1841,freq_deg:253},{english:"envision",hangul:"계획하다",hanja:"計劃",id:1842,freq_deg:3781},{english:"envoy",hangul:"사절",hanja:"使節",id:1843},{english:"enzyme",hangul:"효소",hanja:"酵素",id:1844},{english:"enzymology",hangul:"효소학",hanja:"酵素學",id:1845},{english:"epaulet",hangul:"견장",hanja:"肩章",id:1846},{english:"epicenter",hangul:"진앙",hanja:"震央",id:1847},{english:"epidemic",hangul:"유행병",hanja:"流行病",id:1848},{english:"epigone",hangul:"아류",hanja:"亞流",id:1849},{english:"epigraph",hangul:"비문",hanja:"碑文",id:1850},{english:"episode",hangul:"삽화",hanja:"揷話",id:1851},{english:"episodic",hangul:"삽화적인",hanja:"揷話的",id:1852},{english:"epistle",hangul:"서간",hanja:"書簡",id:1853},{english:"equal",hangul:"필적하는",hanja:"匹敵",id:1854},{english:"equal",hangul:"필적자",hanja:"匹敵",id:1855},{english:"equality",hangul:"동등",hanja:"同等",id:1856},{english:"equation",hangul:"방정식",hanja:"方程式",id:1857},{english:"equator",hangul:"적도",hanja:"赤道",id:1858},{english:"equilibrium",hangul:"평형",hanja:"平衡",id:1859},{english:"equilibrium",hangul:"균형",hanja:"均衡",id:1860,freq_deg:1564},{english:"equivalence",hangul:"등가",hanja:"等價",id:1861},{english:"era",hangul:"기원",hanja:"紀元",id:1862,freq_deg:3646},{english:"era",hangul:"연대",hanja:"年代",id:1863},{english:"era",hangul:"시대",hanja:"時代",id:1864,freq_deg:97},{english:"eradication",hangul:"근절",hanja:"根絶",id:1865},{english:"erasure",hangul:"말소",hanja:"抹消",id:1866},{english:"erection",hangul:"건립",hanja:"建立",id:1867},{english:"erection",hangul:"발기",hanja:"勃起",id:1868},{english:"erosion",hangul:"침식",hanja:"浸蝕",id:1869},{english:"errand",hangul:"사명",hanja:"使命",id:1870},{english:"error",hangul:"과실",hanja:"過失",id:1871},{english:"error",hangul:"실책",hanja:"失策",id:1872},{english:"error",hangul:"오차",hanja:"誤差",id:1873},{english:"eruption",hangul:"폭발",hanja:"爆發",id:1874},{english:"eruption",hangul:"분출",hanja:"噴出",id:1875},{english:"eruption",hangul:"분화",hanja:"噴火",id:1876},{english:"eruption",hangul:"발진",hanja:"發疹",id:1877},{english:"erysipelas",hangul:"단독",hanja:"丹毒",id:1878,freq_deg:3736},{english:"escape",hangul:"도망",hanja:"逃亡",id:1879,freq_deg:4581},{english:"escape",hangul:"도피",hanja:"逃避",id:1880},{english:"escort",hangul:"호위",hanja:"護衛",id:1881},{english:"escort",hangul:"호위하다",hanja:"護衛",id:1882},{english:"espouse",hangul:"채용하다",hanja:"採用",id:1883},{english:"essay",hangul:"수필",hanja:"隨筆",id:1884,freq_deg:3983},{english:"essay",hangul:"시론",hanja:"試論",id:1885},{english:"essence",hangul:"본질",hanja:"本質",id:1886,freq_deg:1842},{english:"essence",hangul:"정수",hanja:"精髓",id:1887},{english:"esteem",hangul:"존경하다",hanja:"尊敬",id:1888,freq_deg:4005},{english:"esteem",hangul:"존중하다",hanja:"尊重",id:1889,freq_deg:2906},{english:"esteem",hangul:"존경",hanja:"尊敬",id:1890},{english:"estimation",hangul:"평가",hanja:"評價",id:1891,freq_deg:800},{english:"estrangement",hangul:"소원",hanja:"疎遠",id:1892,freq_deg:3203},{english:"estrangement",hangul:"이간",hanja:"離間",id:1893},{english:"eternity",hangul:"영원",hanja:"永遠",id:1894},{english:"eternity",hangul:"영구",hanja:"永久",id:1895},{english:"ethics",hangul:"윤리학",hanja:"倫理學",id:1896},{english:"etiquette",hangul:"예의",hanja:"禮儀",id:1897,freq_deg:3350},{english:"etiquette",hangul:"예법",hanja:"禮法",id:1898},{english:"eugenics",hangul:"우생학",hanja:"優生學",id:1899},{english:"eunuch",hangul:"환관",hanja:"宦官",id:1900},{english:"euphony",hangul:"음편",hanja:"音便",id:1901},{english:"evacuation",hangul:"배출",hanja:"排出",id:1902},{english:"evacuee",hangul:"피난자",hanja:"避難者",id:1903},{english:"evaluation",hangul:"평가",hanja:"評價",id:1904,freq_deg:800},{english:"evasion",hangul:"도피",hanja:"逃避",id:1905},{english:"evasion",hangul:"회피",hanja:"回避",id:1906},{english:"evening paper",hangul:"석간",hanja:"夕刊",id:1907},{english:"evening party",hangul:"야회",hanja:"夜會",id:1908},{english:"evenness",hangul:"평등",hanja:"平等",id:1909},{english:"event",hangul:"사건",hanja:"事件",id:1910,freq_deg:221},{english:"event",hangul:"종목",hanja:"種目",id:1911},{english:"everything",hangul:"만사",hanja:"萬事",id:1912},{english:"evidence",hangul:"증거",hanja:"證據",id:1913,freq_deg:1858},{english:"evidence",hangul:"증언",hanja:"證言",id:1914},{english:"evidence",hangul:"증언하다",hanja:"證言",id:1915},{english:"evolve",hangul:"전개하다",hanja:"展開",id:1916,freq_deg:2858},{english:"exaggeration",hangul:"과장",hanja:"誇張",id:1917,freq_deg:2038},{english:"examination",hangul:"시험",hanja:"試驗",id:1918,freq_deg:568},{english:"examination",hangul:"검사",hanja:"檢査",id:1919,freq_deg:2592},{english:"examination",hangul:"조사",hanja:"調査",id:1920,freq_deg:301},{english:"examination",hangul:"심사",hanja:"審査",id:1921,freq_deg:2936},{english:"examine",hangul:"시험하다",hanja:"試驗",id:1922},{english:"examinee",hangul:"수험자",hanja:"受驗者",id:1923},{english:"example",hangul:"실례",hanja:"實例",id:1924,freq_deg:4749},{english:"example",hangul:"표본",hanja:"標本",id:1925},{english:"example",hangul:"모범",hanja:"模範",id:1926,freq_deg:3795},{english:"exasperation",hangul:"분노",hanja:"忿怒",id:1927,freq_deg:2247},{english:"excellence",hangul:"우수",hanja:"優秀",id:1928},{english:"excellence",hangul:"탁월",hanja:"卓越",id:1929},{english:"exception",hangul:"예외",hanja:"例外",id:1930,freq_deg:2758},{english:"exception",hangul:"제외",hanja:"除外",id:1931},{english:"exceptional",hangul:"예외적인",hanja:"例外的",id:1932},{english:"excerpt",hangul:"발췌",hanja:"拔萃",id:1933},{english:"excerpt",hangul:"발췌하다",hanja:"拔萃",id:1934},{english:"excess",hangul:"과도",hanja:"過度",id:1935},{english:"excess",hangul:"과다",hanja:"過多",id:1936},{english:"excess",hangul:"과잉",hanja:"過剩",id:1937},{english:"excess",hangul:"초과",hanja:"超過",id:1938},{english:"exchange",hangul:"교환하다",hanja:"交換",id:1939,freq_deg:3644},{english:"exchange",hangul:"교환",hanja:"交換",id:1940,freq_deg:2654},{english:"excitement",hangul:"자극",hanja:"刺戟",id:1941,freq_deg:2524},{english:"excitement",hangul:"흥분",hanja:"興奮",id:1942,freq_deg:4107},{english:"excitement",hangul:"동요",hanja:"動搖",id:1943},{english:"exclamation",hangul:"절규",hanja:"絶叫",id:1944},{english:"exclusion",hangul:"제외",hanja:"除外",id:1945},{english:"exclusive",hangul:"배타적인",hanja:"排他的",id:1946},{english:"excommunication",hangul:"제명",hanja:"除名",id:1947},{english:"excuse",hangul:"변명하다",hanja:"辨明",id:1948},{english:"excuse",hangul:"변명",hanja:"辨明",id:1949,freq_deg:4047},{english:"excuse",hangul:"구실",hanja:"口實",id:1950},{english:"execution",hangul:"수행",hanja:"遂行",id:1951},{english:"executive",hangul:"지배인",hanja:"支配人",id:1952},{english:"exemplar",hangul:"모범",hanja:"模範",id:1953,freq_deg:3795},{english:"exemplification",hangul:"예증",hanja:"例證",id:1954},{english:"exemplification",hangul:"예시",hanja:"例示",id:1955},{english:"exemplum",hangul:"모범",hanja:"模範",id:1956,freq_deg:3795},{english:"exercise",hangul:"운동",hanja:"運動",id:1957,freq_deg:108},{english:"exercise",hangul:"연습",hanja:"演習",id:1958,freq_deg:1655},{english:"exercise",hangul:"행사하다",hanja:"行使",id:1959},{english:"exercise",hangul:"연습하다",hanja:"練習",id:1960,freq_deg:4067},{english:"exertion",hangul:"노력",hanja:"努力",id:1961,freq_deg:442},{english:"exhalation",hangul:"호기",hanja:"呼氣",id:1962},{english:"exhaust",hangul:"배기",hanja:"排氣",id:1963},{english:"exhaustion",hangul:"소모",hanja:"消耗",id:1964},{english:"exhibit",hangul:"진열하다",hanja:"陳列",id:1965},{english:"exhibit",hangul:"출품하다",hanja:"出品",id:1966},{english:"exhibition",hangul:"전시",hanja:"展示",id:1967,freq_deg:3932},{english:"exhibition",hangul:"박람회",hanja:"博覽會",id:1968},{english:"exhibitionism",hangul:"노출증",hanja:"露出症",id:1969},{english:"exhibitor",hangul:"출품자",hanja:"出品者",id:1970},{english:"exile",hangul:"망명",hanja:"亡命",id:1971},{english:"exile",hangul:"유형",hanja:"流刑",id:1972,freq_deg:3817},{english:"exile",hangul:"망명자",hanja:"亡命者",id:1973},{english:"exile",hangul:"유형자",hanja:"流刑",id:1974},{english:"exile",hangul:"추방하다",hanja:"追放",id:1975},{english:"existence",hangul:"존재",hanja:"存在",id:1976,freq_deg:456},{english:"existence",hangul:"실재",hanja:"實在",id:1977},{english:"existence",hangul:"생존",hanja:"生存",id:1978},{english:"existing",hangul:"현존하는",hanja:"現存",id:1979},{english:"exit",hangul:"출구",hanja:"出口",id:1980,freq_deg:4469},{english:"exit",hangul:"퇴장",hanja:"退場",id:1981},{english:"exit",hangul:"퇴장하다",hanja:"退場",id:1982},{english:"expansion",hangul:"확장",hanja:"擴張",id:1983,freq_deg:3180},{english:"expansion",hangul:"팽창",hanja:"膨脹",id:1984},{english:"expatiation",hangul:"부연",hanja:"敷衍",id:1985},{english:"expectation",hangul:"기대",hanja:"期待",id:1986,freq_deg:1271},{english:"expectation",hangul:"예기",hanja:"豫期",id:1987},{english:"expectation",hangul:"예상",hanja:"豫想",id:1988,freq_deg:2327},{english:"expedience",hangul:"편의",hanja:"便宜",id:1989,freq_deg:3831},{english:"expedient",hangul:"방편",hanja:"方便",id:1990},{english:"expedient",hangul:"편법",hanja:"便法",id:1991},{english:"expel",hangul:"방출하다",hanja:"放出",id:1992},{english:"expenditure",hangul:"지출",hanja:"支出",id:1993,freq_deg:2666},{english:"expense",hangul:"비용",hanja:"費用",id:1994,freq_deg:1035},{english:"expense",hangul:"지출",hanja:"支出",id:1995,freq_deg:2666},{english:"experience",hangul:"경험",hanja:"經驗",id:1996,freq_deg:520},{english:"experience",hangul:"경험하다",hanja:"經驗",id:1997,freq_deg:1878},{english:"experiential",hangul:"경험적인",hanja:"經驗的",id:1998},{english:"experiment",hangul:"실험",hanja:"實驗",id:1999,freq_deg:1665},{english:"experiment",hangul:"실험하다",hanja:"實驗",id:2000},{english:"experimental",hangul:"실험적인",hanja:"實驗的",id:2001},{english:"expiration",hangul:"만료",hanja:"滿了",id:2002},{english:"explain",hangul:"변명하다",hanja:"辨明",id:2003},{english:"explanation",hangul:"해석",hanja:"解釋",id:2004,freq_deg:2646},{english:"explanation",hangul:"변명",hanja:"辨明",id:2005,freq_deg:4047},{english:"exploitation",hangul:"개발",hanja:"開發",id:2006},{english:"exploration",hangul:"탐험",hanja:"探險",id:2007},{english:"explore",hangul:"탐구하다",hanja:"探究",id:2008},{english:"explosion",hangul:"폭발",hanja:"爆發",id:2009},{english:"explosion",hangul:"파열",hanja:"破裂",id:2010},{english:"explosive",hangul:"폭약",hanja:"爆藥",id:2011},{english:"export",hangul:"수출하다",hanja:"輸出",id:2012,freq_deg:4555},{english:"export",hangul:"수출",hanja:"輸出",id:2013,freq_deg:1028},{english:"expose",hangul:"진열하다",hanja:"陳列",id:2014},{english:"exposure",hangul:"노출",hanja:"露出",id:2015},{english:"exposure",hangul:"폭로",hanja:"暴露",id:2016},{english:"expression",hangul:"표현",hanja:"表現",id:2017,freq_deg:468},{english:"expulsion",hangul:"제명",hanja:"除名",id:2018},{english:"extension",hangul:"신장",hanja:"伸張",id:2019},{english:"extension",hangul:"연장",hanja:"延長",id:2020,freq_deg:4151},{english:"extension",hangul:"확장",hanja:"擴張",id:2021,freq_deg:3180},{english:"extension",hangul:"외연",hanja:"外延",id:2022},{english:"extent",hangul:"범위",hanja:"範圍",id:2023,freq_deg:1395},{english:"exterior",hangul:"외면",hanja:"外面",id:2024},{english:"exterior",hangul:"외관",hanja:"外觀",id:2025},{english:"external",hangul:"외부",hanja:"外部",id:2026,freq_deg:1506},{english:"extinction",hangul:"사멸",hanja:"死滅",id:2027},{english:"extract",hangul:"발췌하다",hanja:"拔萃",id:2028},{english:"extraterritoriality",hangul:"치외법권",hanja:"治外法權",id:2029},{english:"extravagance",hangul:"낭비",hanja:"浪費",id:2030,freq_deg:3957},{english:"extreme",hangul:"극단",hanja:"極端",id:2031},{english:"extreme",hangul:"극도",hanja:"極度",id:2032},{english:"extremity",hangul:"극단",hanja:"極端",id:2033},{english:"extroversion",hangul:"외향성",hanja:"外向性",id:2034},{english:"exuberance",hangul:"충일",hanja:"充溢",id:2035},{english:"eyeball",hangul:"안구",hanja:"眼球",id:2036},{english:"eyesight",hangul:"시력",hanja:"視力",id:2037},{english:"eyetooth",hangul:"견치",hanja:"犬齒",id:2038},{english:"fabric",hangul:"직물",hanja:"織物",id:2039},{english:"fabricate",hangul:"제작하다",hanja:"製作",id:2040,freq_deg:2763},{english:"facade",hangul:"정면",hanja:"正面",id:2041,freq_deg:2500},{english:"facade",hangul:"전면",hanja:"前面",id:2042},{english:"facade",hangul:"외관",hanja:"外觀",id:2043},{english:"face",hangul:"표면",hanja:"表面",id:2044,freq_deg:2157},{english:"face",hangul:"면목",hanja:"面目",id:2045},{english:"facilitation",hangul:"촉진",hanja:"促進",id:2046},{english:"facility",hangul:"시설",hanja:"施設",id:2047,freq_deg:577},{english:"fact",hangul:"사실",hanja:"事實",id:2048,freq_deg:599},{english:"faction",hangul:"도당",hanja:"徒黨",id:2049},{english:"faction",hangul:"당파",hanja:"黨派",id:2050},{english:"factor",hangul:"인자",hanja:"因子",id:2051},{english:"factorial",hangul:"계승",hanja:"階乘",id:2052},{english:"factory",hangul:"공장",hanja:"工場",id:2053,freq_deg:611},{english:"faculty",hangul:"능력",hanja:"能力",id:2054,freq_deg:449},{english:"faculty",hangul:"기능",hanja:"機能",id:2055,freq_deg:4032},{english:"failure",hangul:"실패",hanja:"失敗",id:2056,freq_deg:2756},{english:"failure",hangul:"감퇴",hanja:"減退",id:2057},{english:"failure",hangul:"고장",hanja:"故障",id:2058,freq_deg:3032},{english:"failure",hangul:"낙제",hanja:"落第",id:2059},{english:"faint",hangul:"기절하다",hanja:"氣絶",id:2060},{english:"fainting",hangul:"졸도",hanja:"卒倒",id:2061},{english:"fainting",hangul:"졸도하는",hanja:"卒倒",id:2062},{english:"fair",hangul:"박람회",hanja:"博覽會",id:2063},{english:"fair",hangul:"품평회",hanja:"品評會",id:2064},{english:"fairness",hangul:"공평",hanja:"公平",id:2065},{english:"fairy",hangul:"요정",hanja:"妖精",id:2066},{english:"fairy",hangul:"선녀",hanja:"仙女",id:2067},{english:"fairy tale",hangul:"동화",hanja:"童話",id:2068},{english:"fairyland",hangul:"선경",hanja:"仙境",id:2069},{english:"faith",hangul:"신용",hanja:"信用",id:2070,freq_deg:1965},{english:"faith",hangul:"신앙",hanja:"信仰",id:2071},{english:"faith",hangul:"신념",hanja:"信念",id:2072,freq_deg:3342},{english:"faith",hangul:"신의",hanja:"信義",id:2073},{english:"fall",hangul:"강하하다",hanja:"降下",id:2074},{english:"fall",hangul:"함락",hanja:"陷落",id:2075},{english:"fall",hangul:"강하",hanja:"降下",id:2076},{english:"falling",hangul:"추락",hanja:"墜落",id:2077},{english:"falling star",hangul:"유성",hanja:"流星",id:2078},{english:"fallow",hangul:"유휴",hanja:"遊休",id:2079},{english:"fallow",hangul:"유휴하다",hanja:"遊休",id:2080},{english:"falsetto",hangul:"가성",hanja:"假聲",id:2081},{english:"falsification",hangul:"위조",hanja:"僞造",id:2082},{english:"fame",hangul:"명성",hanja:"名聲",id:2083},{english:"fame",hangul:"평판",hanja:"評判",id:2084},{english:"family",hangul:"종족",hanja:"種族",id:2085},{english:"family",hangul:"가족",hanja:"家族",id:2086,freq_deg:366},{english:"famine",hangul:"기근",hanja:"饑饉",id:2087},{english:"fancy",hangul:"공상",hanja:"空想",id:2088},{english:"fancy",hangul:"공상하다",hanja:"空想",id:2089},{english:"farce",hangul:"소극",hanja:"笑劇",id:2090},{english:"fare",hangul:"요금",hanja:"料金",id:2091,freq_deg:1986},{english:"farewell",hangul:"고별",hanja:"告別",id:2092},{english:"farming",hangul:"농작",hanja:"農作",id:2093},{english:"fascicle",hangul:"분책",hanja:"分冊",id:2094},{english:"fascinate",hangul:"매혹하다",hanja:"魅惑",id:2095},{english:"fascination",hangul:"매혹",hanja:"魅惑",id:2096},{english:"fasting",hangul:"단식",hanja:"斷食",id:2097},{english:"fasting",hangul:"절식",hanja:"絶食",id:2098},{english:"fat",hangul:"지방",hanja:"脂肪",id:2099,freq_deg:4891},{english:"fatal",hangul:"치명적인",hanja:"致命的",id:2100},{english:"fate",hangul:"운명",hanja:"運命",id:2101,freq_deg:1634},{english:"fate",hangul:"숙명",hanja:"宿命",id:2102},{english:"fatherland",hangul:"조국",hanja:"祖國",id:2103},{english:"fatigue",hangul:"피로",hanja:"疲勞",id:2104,freq_deg:2669},{english:"fatness",hangul:"비만",hanja:"肥滿",id:2105,freq_deg:5068},{english:"fault",hangul:"결점",hanja:"缺點",id:2106},{english:"feast",hangul:"축제",hanja:"祝祭",id:2107,freq_deg:2218},{english:"feature",hangul:"용모",hanja:"容貌",id:2108},{english:"feature",hangul:"특징",hanja:"特徵",id:2109,freq_deg:746},{english:"federation",hangul:"연맹",hanja:"聯盟",id:2110},{english:"fee",hangul:"요금",hanja:"料金",id:2111,freq_deg:1986},{english:"feed",hangul:"사료",hanja:"飼料",id:2112},{english:"feeler",hangul:"촉각",hanja:"觸角",id:2113},{english:"feeler",hangul:"촉수",hanja:"觸手",id:2114},{english:"feldspar",hangul:"장석",hanja:"長石",id:2115},{english:"fellowman",hangul:"동포",hanja:"同胞",id:2116},{english:"fellowship",hangul:"우정",hanja:"友情",id:2117,freq_deg:3515},{english:"felony",hangul:"중죄",hanja:"重罪",id:2118},{english:"fertility",hangul:"비옥",hanja:"肥沃",id:2119},{english:"fertility",hangul:"풍요",hanja:"豊饒",id:2120},{english:"fertilizer",hangul:"비료",hanja:"肥料",id:2121},{english:"feudal lord",hangul:"영주",hanja:"領主",id:2122},{english:"fever",hangul:"열병",hanja:"熱病",id:2123},{english:"fidelity",hangul:"충실",hanja:"忠實",id:2124},{english:"fief",hangul:"봉토",hanja:"封土",id:2125},{english:"field",hangul:"분야",hanja:"分野",id:2126,freq_deg:462},{english:"field artillery",hangul:"야포",hanja:"野砲",id:2127},{english:"field gun",hangul:"야포",hanja:"野砲",id:2128},{english:"fiend",hangul:"악마",hanja:"惡魔",id:2129},{english:"fig",hangul:"무화과",hanja:"無花果",id:2130},{english:"fight",hangul:"전투",hanja:"戰鬪",id:2131},{english:"fighting cock",hangul:"투계",hanja:"鬪鷄",id:2132},{english:"figure",hangul:"모양",hanja:"模樣",id:2133,freq_deg:816},{english:"figure",hangul:"도형",hanja:"圖形",id:2134},{english:"filter",hangul:"여과기",hanja:"濾過器",id:2135},{english:"finale",hangul:"종국",hanja:"終局",id:2136},{english:"finale",hangul:"대단원",hanja:"大團圓",id:2137},{english:"finance",hangul:"재원",hanja:"財源",id:2138},{english:"finder",hangul:"발견자",hanja:"發見者",id:2139},{english:"fine art",hangul:"미술",hanja:"美術",id:2140,freq_deg:1411},{english:"finesse",hangul:"기교",hanja:"技巧",id:2141},{english:"fingerprint",hangul:"지문",hanja:"指紋",id:2142},{english:"finish",hangul:"완성하다",hanja:"完成",id:2143,freq_deg:3126},{english:"fire",hangul:"화재",hanja:"火災",id:2144,freq_deg:3399},{english:"fire",hangul:"포화",hanja:"砲火",id:2145},{english:"fire bomb",hangul:"소이탄",hanja:"燒夷彈",id:2146},{english:"fire station",hangul:"소방서",hanja:"消防署",id:2147},{english:"firearm",hangul:"화기",hanja:"火器",id:2148},{english:"firecracker",hangul:"폭죽",hanja:"爆竹",id:2149},{english:"fireman",hangul:"화부",hanja:"火夫",id:2150},{english:"firing",hangul:"발포",hanja:"發砲",id:2151},{english:"firing",hangul:"발사",hanja:"發射",id:2152},{english:"firing",hangul:"발화",hanja:"發火",id:2153},{english:"firm",hangul:"상사",hanja:"商社",id:2154},{english:"first",hangul:"제일",hanja:"第一",id:2155,freq_deg:657},{english:"first",hangul:"최초",hanja:"最初",id:2156,freq_deg:1040},{english:"first edition",hangul:"초판",hanja:"初版",id:2157},{english:"first half",hangul:"전반",hanja:"前半",id:2158,freq_deg:3391},{english:"first lieutenant",hangul:"중위",hanja:"中尉",id:2159},{english:"first offender",hangul:"초범자",hanja:"初犯",id:2160},{english:"fish market",hangul:"어시장",hanja:"魚市場",id:2161},{english:"fish meal",hangul:"어분",hanja:"魚粉",id:2162},{english:"fish oil",hangul:"어유",hanja:"魚油",id:2163},{english:"fisher",hangul:"어부",hanja:"漁夫",id:2164},{english:"fishing",hangul:"어획",hanja:"漁獲",id:2165},{english:"fishing boat",hangul:"어선",hanja:"漁船",id:2166},{english:"fishing ground",hangul:"어장",hanja:"漁場",id:2167},{english:"fishing net",hangul:"어망",hanja:"魚網",id:2168},{english:"fitful",hangul:"발작적인",hanja:"發作的",id:2169},{english:"fixation",hangul:"고정",hanja:"固定",id:2170},{english:"fixed point",hangul:"정점",hanja:"定点",id:2171},{english:"fixed star",hangul:"항성",hanja:"恒星",id:2172},{english:"fixture",hangul:"비품",hanja:"備品",id:2173},{english:"flagship",hangul:"기함",hanja:"旗艦",id:2174},{english:"flame",hangul:"화염",hanja:"火炎",id:2175},{english:"flank",hangul:"측면",hanja:"側面",id:2176},{english:"flash",hangul:"섬광",hanja:"閃光",id:2177},{english:"flavoring",hangul:"조미",hanja:"調味",id:2178},{english:"flax",hangul:"아마",hanja:"亞麻",id:2179,freq_deg:659},{english:"fleck",hangul:"반점",hanja:"斑点",id:2180},{english:"fleet",hangul:"함대",hanja:"艦隊",id:2181},{english:"fleet",hangul:"선대",hanja:"船隊",id:2182},{english:"flickering",hangul:"명멸하는",hanja:"明滅",id:2183},{english:"flight",hangul:"도주",hanja:"逃走",id:2184},{english:"float",hangul:"표류하다",hanja:"漂流",id:2185},{english:"floating",hangul:"부동하는",hanja:"浮動",id:2186},{english:"floating",hangul:"부유",hanja:"浮游",id:2187},{english:"floating",hangul:"부동",hanja:"浮動",id:2188},{english:"floating",hangul:"부동적인",hanja:"浮動",id:2189},{english:"floating capital",hangul:"유동자본",hanja:"流動資本",id:2190},{english:"flood",hangul:"홍수",hanja:"洪水",id:2191,freq_deg:3716},{english:"flood",hangul:"쇄도",hanja:"殺到",id:2192},{english:"flood",hangul:"범람하다",hanja:"氾濫",id:2193},{english:"flood control",hangul:"치수",hanja:"治水",id:2194},{english:"floodlight",hangul:"투광기",hanja:"投光器",id:2195},{english:"floor space",hangul:"건평",hanja:"建坪",id:2196},{english:"floral envelope",hangul:"화피",hanja:"花被",id:2197},{english:"flourishing",hangul:"번영하는",hanja:"繁榮",id:2198},{english:"flower bed",hangul:"화단",hanja:"花壇",id:2199},{english:"flower garden",hangul:"화원",hanja:"花園",id:2200},{english:"flowering plant",hangul:"화훼",hanja:"花卉",id:2201},{english:"fluid",hangul:"유체",hanja:"流體",id:2202},{english:"fluorite",hangul:"형석",hanja:"螢石",id:2203},{english:"flush",hangul:"홍조",hanja:"紅潮",id:2204},{english:"flux",hangul:"용제",hanja:"溶劑",id:2205},{english:"focus",hangul:"초점",hanja:"焦点",id:2206,freq_deg:1859},{english:"fodder",hangul:"사료",hanja:"飼料",id:2207},{english:"folk custom",hangul:"민속",hanja:"民俗",id:2208,freq_deg:3690},{english:"folk music",hangul:"민속음악",hanja:"民俗音樂",id:2209},{english:"folk song",hangul:"민요",hanja:"民謠",id:2210},{english:"folkways",hangul:"습속",hanja:"習俗",id:2211},{english:"follower",hangul:"종자",hanja:"從者",id:2212},{english:"food poisoning",hangul:"식중독",hanja:"食中毒",id:2213},{english:"foodstuff",hangul:"식료품",hanja:"食料品",id:2214,freq_deg:5331},{english:"footlights",hangul:"각광",hanja:"脚光",id:2215},{english:"footnote",hangul:"각주",hanja:"脚注",id:2216},{english:"foray",hangul:"침략하다",hanja:"侵掠",id:2217},{english:"force",hangul:"무력",hanja:"武力",id:2218},{english:"forebrain",hangul:"전뇌",hanja:"前腦",id:2219},{english:"forecast",hangul:"예상",hanja:"豫想",id:2220,freq_deg:2327},{english:"forecast",hangul:"예보",hanja:"豫報",id:2221,freq_deg:4811},{english:"forecast",hangul:"예상하다",hanja:"豫想",id:2222,freq_deg:2757},{english:"foreground",hangul:"전경",hanja:"前景",id:2223},{english:"foreign affairs",hangul:"외무",hanja:"外務",id:2224},{english:"foreign capital",hangul:"외자",hanja:"外資",id:2225},{english:"foreign debt",hangul:"외채",hanja:"外債",id:2226},{english:"foreign loan",hangul:"외채",hanja:"外債",id:2227},{english:"foreigner",hangul:"외국인",hanja:"外國人",id:2228,freq_deg:1420},{english:"foreigner",hangul:"이인",hanja:"異人",id:2229},{english:"foreknowledge",hangul:"예지",hanja:"豫知",id:2230},{english:"forerunner",hangul:"선구자",hanja:"先驅者",id:2231},{english:"foreshadow",hangul:"예시하다",hanja:"豫示",id:2232},{english:"forest",hangul:"삼림",hanja:"森林",id:2233},{english:"forestry",hangul:"임업",hanja:"林業",id:2234},{english:"forever",hangul:"영원히",hanja:"永遠",id:2235,freq_deg:2976},{english:"foreword",hangul:"서문",hanja:"序文",id:2236},{english:"forfeit",hangul:"상실하다",hanja:"喪失",id:2237},{english:"forfeit",hangul:"상실",hanja:"喪失",id:2238},{english:"forgery",hangul:"위조",hanja:"僞造",id:2239},{english:"form",hangul:"형식",hanja:"形式",id:2240,freq_deg:748},{english:"form",hangul:"방식",hanja:"方式",id:2241,freq_deg:404},{english:"formal",hangul:"의례적인",hanja:"儀禮的",id:2242},{english:"format",hangul:"체재",hanja:"體裁",id:2243},{english:"formation",hangul:"형성",hanja:"形成",id:2244,freq_deg:1129},{english:"formula",hangul:"공식",hanja:"公式",id:2245,freq_deg:2135},{english:"fort",hangul:"보루",hanja:"堡壘",id:2246},{english:"fortification",hangul:"축성",hanja:"築城",id:2247},{english:"fortification",hangul:"요새",hanja:"要塞",id:2248,freq_deg:3046},{english:"fortuity",hangul:"우연",hanja:"偶然",id:2249},{english:"fortune",hangul:"행운",hanja:"幸運",id:2250,freq_deg:3639},{english:"fortune",hangul:"재산",hanja:"財産",id:2251,freq_deg:589},{english:"forwarding",hangul:"발송",hanja:"發送",id:2252},{english:"forwarding",hangul:"회송",hanja:"回送",id:2253},{english:"fossil",hangul:"화석",hanja:"化石",id:2254},{english:"foster daughter",hangul:"양녀",hanja:"養女",id:2255},{english:"foundation",hangul:"토대",hanja:"土臺",id:2256,freq_deg:1711},{english:"foundation",hangul:"기초",hanja:"基礎",id:2257,freq_deg:1094},{english:"foundation",hangul:"근거",hanja:"根據",id:2258,freq_deg:1111},{english:"foundation",hangul:"설립",hanja:"設立",id:2259},{english:"foundation stone",hangul:"초석",hanja:"礎石",id:2260},{english:"foundling",hangul:"기아",hanja:"棄兒",id:2261},{english:"fountain pen",hangul:"만년필",hanja:"萬年筆",id:2262},{english:"fountainhead",hangul:"수원",hanja:"水源",id:2263},{english:"four balls",hangul:"사구",hanja:"四球",id:2264},{english:"fowl",hangul:"가금",hanja:"家禽",id:2265},{english:"fragment",hangul:"파편",hanja:"破片",id:2266},{english:"fragment",hangul:"단편",hanja:"斷片",id:2267,freq_deg:3274},{english:"fragrance",hangul:"방향",hanja:"芳香",id:2268,freq_deg:433},{english:"frankincense",hangul:"유향",hanja:"乳香",id:2269},{english:"frankness",hangul:"솔직",hanja:"率直",id:2270},{english:"fraud",hangul:"사기",hanja:"詐欺",id:2271,freq_deg:4502},{english:"freak",hangul:"기형",hanja:"奇形",id:2272},{english:"freedom",hangul:"자유",hanja:"自由",id:2273,freq_deg:681},{english:"freezing",hangul:"냉동",hanja:"冷凍",id:2274,freq_deg:3371},{english:"freezing point",hangul:"빙점",hanja:"氷点",id:2275},{english:"freight car",hangul:"화차",hanja:"貨車",id:2276},{english:"freighter",hangul:"화물선",hanja:"貨物船",id:2277},{english:"frenzy",hangul:"광란",hanja:"狂亂",id:2278},{english:"frequency",hangul:"빈발",hanja:"頻發",id:2279},{english:"fresh water",hangul:"담수",hanja:"淡水",id:2280},{english:"friendship",hangul:"우정",hanja:"友情",id:2281,freq_deg:3515},{english:"front",hangul:"전선",hanja:"前線",id:2282,freq_deg:4222},{english:"front line",hangul:"전선",hanja:"前線",id:2283,freq_deg:4222},{english:"frontage",hangul:"정면",hanja:"正面",id:2284,freq_deg:2500},{english:"frostbite",hangul:"동상",hanja:"凍傷",id:2285},{english:"frozen food",hangul:"냉동식품",hanja:"冷凍食品",id:2286},{english:"fructose",hangul:"과당",hanja:"果糖",id:2287},{english:"fruit",hangul:"과실",hanja:"果實",id:2288},{english:"fruit juice",hangul:"과즙",hanja:"果汁",id:2289},{english:"fruit sugar",hangul:"과당",hanja:"果糖",id:2290},{english:"fruit tree",hangul:"과수",hanja:"果樹",id:2291},{english:"frustration",hangul:"좌절",hanja:"挫折",id:2292},{english:"fuel",hangul:"연료",hanja:"燃料",id:2293},{english:"fugitive",hangul:"도망자",hanja:"逃亡者",id:2294},{english:"full dress",hangul:"정장",hanja:"正裝",id:2295,freq_deg:4947},{english:"full moon",hangul:"만월",hanja:"滿月",id:2296},{english:"fully",hangul:"충분히",hanja:"充分",id:2297,freq_deg:1069},{english:"function",hangul:"기능",hanja:"機能",id:2298,freq_deg:4032},{english:"function",hangul:"작용",hanja:"作用",id:2299,freq_deg:957},{english:"function",hangul:"임무",hanja:"任務",id:2300,freq_deg:3128},{english:"function",hangul:"작용하다",hanja:"作用",id:2301,freq_deg:1379},{english:"fund",hangul:"기금",hanja:"基金",id:2302},{english:"fund",hangul:"축적하다",hanja:"蓄積",id:2303},{english:"fundamental",hangul:"근본적인",hanja:"根本的",id:2304},{english:"fur",hangul:"모피",hanja:"毛皮",id:2305},{english:"furlough",hangul:"사가",hanja:"賜暇",id:2306},{english:"furlough",hangul:"휴가",hanja:"休暇",id:2307,freq_deg:2201},{english:"furnish",hangul:"공급하다",hanja:"供給",id:2308},{english:"furniture",hangul:"가구",hanja:"家具",id:2309,freq_deg:4783},{english:"fuse",hangul:"신관",hanja:"信管",id:2310},{english:"fuse",hangul:"도화선",hanja:"導火線",id:2311},{english:"fusion",hangul:"융해",hanja:"融解",id:2312},{english:"fusion point",hangul:"융점",hanja:"融點",id:2313},{english:"futility",hangul:"무용",hanja:"無用",id:2314,freq_deg:1217},{english:"future",hangul:"장래",hanja:"將來",id:2315,freq_deg:2355},{english:"gain",hangul:"이익",hanja:"利益",id:2316,freq_deg:1244},{english:"gaiter",hangul:"각반",hanja:"脚絆",id:2317},{english:"galaxy",hangul:"은하",hanja:"銀河",id:2318},{english:"gale",hangul:"폭풍",hanja:"暴風",id:2319},{english:"gallantry",hangul:"용감",hanja:"勇敢",id:2320},{english:"gallery",hangul:"회랑",hanja:"回廊",id:2321},{english:"gallnut",hangul:"몰식자",hanja:"沒食子",id:2322},{english:"gallstone",hangul:"담석",hanja:"膽石",id:2323},{english:"galvanometer",hangul:"검류계",hanja:"檢流計",id:2324},{english:"gambling",hangul:"도박",hanja:"賭博",id:2325},{english:"game",hangul:"경기",hanja:"競技",id:2326,freq_deg:2202},{english:"gap",hangul:"산협",hanja:"山峽",id:2327},{english:"garden",hangul:"정원",hanja:"庭園",id:2328,freq_deg:4003},{english:"gardening",hangul:"원예",hanja:"園藝",id:2329},{english:"gas",hangul:"기체",hanja:"氣體",id:2330},{english:"gastralgia",hangul:"위통",hanja:"胃痛",id:2331},{english:"gastric juice",hangul:"위액",hanja:"胃液",id:2332},{english:"gastritis",hangul:"위염",hanja:"胃炎",id:2333},{english:"gastroptosis",hangul:"위하수",hanja:"胃下垂",id:2334},{english:"gastroscope",hangul:"위경",hanja:"胃鏡",id:2335},{english:"gathering",hangul:"집합",hanja:"集合",id:2336},{english:"gathering",hangul:"채집",hanja:"採集",id:2337},{english:"gauge",hangul:"계기",hanja:"計器",id:2338},{english:"gauge",hangul:"계기",hanja:"計器",id:2339},{english:"genealogy",hangul:"계도",hanja:"系圖",id:2340},{english:"general",hangul:"일반적인",hanja:"一般的",id:2341},{english:"general",hangul:"일반",hanja:"一般",id:2342,freq_deg:622},{english:"general",hangul:"장군",hanja:"將軍",id:2343,freq_deg:1062},{english:"general affairs",hangul:"서무",hanja:"庶務",id:2344},{english:"general election",hangul:"총선거",hanja:"總選擧",id:2345},{english:"general manager",hangul:"총지배인",hanja:"總支配人",id:2346},{english:"general meeting",hangul:"총회",hanja:"總會",id:2347},{english:"general rule",hangul:"총칙",hanja:"總則",id:2348},{english:"generalization",hangul:"개괄",hanja:"槪括",id:2349},{english:"generally",hangul:"보통",hanja:"普通",id:2350,freq_deg:1576},{english:"generation",hangul:"세대",hanja:"世代",id:2351,freq_deg:1159},{english:"genius",hangul:"천재",hanja:"天才",id:2352,freq_deg:5189},{english:"gentleman",hangul:"신사",hanja:"紳士",id:2353,freq_deg:5079},{english:"gentlemanly",hangul:"신사적인",hanja:"紳士的",id:2354},{english:"gentleness",hangul:"친절",hanja:"親切",id:2355,freq_deg:4527},{english:"geography",hangul:"지리",hanja:"地理",id:2356},{english:"geopolitics",hangul:"지정학",hanja:"地政學",id:2357},{english:"geotropism",hangul:"굴지성",hanja:"屈地性",id:2358},{english:"germ",hangul:"세균",hanja:"細菌",id:2359},{english:"germination",hangul:"맹아",hanja:"萌芽",id:2360},{english:"gerund",hangul:"동명사",hanja:"動名詞",id:2361},{english:"ghost",hangul:"유령",hanja:"幽靈",id:2362},{english:"ghost",hangul:"망령",hanja:"亡靈",id:2363},{english:"ghost story",hangul:"괴담",hanja:"怪談",id:2364},{english:"giant",hangul:"거인",hanja:"巨人",id:2365},{english:"ginger",hangul:"생강",hanja:"生薑",id:2366},{english:"giraffe",hangul:"기린",hanja:"麒麟",id:2367},{english:"gist",hangul:"요점",hanja:"要点",id:2368},{english:"glacial acetic acid",hangul:"빙초산",hanja:"氷醋酸",id:2369},{english:"glacier",hangul:"빙하",hanja:"氷河",id:2370},{english:"glamour",hangul:"매력",hanja:"魅力",id:2371,freq_deg:2086},{english:"glance",hangul:"일견",hanja:"一見",id:2372},{english:"glance",hangul:"일견하다",hanja:"一見",id:2373},{english:"glen",hangul:"협곡",hanja:"峽谷",id:2374},{english:"glide",hangul:"활주",hanja:"滑走",id:2375},{english:"gliding",hangul:"활주하는",hanja:"滑走",id:2376},{english:"glint",hangul:"섬광",hanja:"閃光",id:2377},{english:"globe",hangul:"구체",hanja:"球體",id:2378},{english:"gloom",hangul:"암영",hanja:"暗影",id:2379},{english:"gloom",hangul:"우울",hanja:"憂鬱",id:2380},{english:"gloom",hangul:"음울",hanja:"陰鬱",id:2381},{english:"glory",hangul:"영광",hanja:"榮光",id:2382},{english:"glossary",hangul:"어휘",hanja:"語彙",id:2383},{english:"glottis",hangul:"성문",hanja:"聲門",id:2384},{english:"goddess",hangul:"여신",hanja:"女神",id:2385},{english:"godfather",hangul:"대부",hanja:"代父",id:2386},{english:"godmother",hangul:"대모",hanja:"代母",id:2387},{english:"gold leaf",hangul:"금박",hanja:"金箔",id:2388},{english:"golden age",hangul:"전성기",hanja:"全盛期",id:2389},{english:"gonorrhea",hangul:"임질",hanja:"淋疾",id:2390},{english:"good",hangul:"상품",hanja:"商品",id:2391,freq_deg:859},{english:"good faith",hangul:"성의",hanja:"誠意",id:2392},{english:"good luck",hangul:"행운",hanja:"幸運",id:2393,freq_deg:3639},{english:"good money",hangul:"양화",hanja:"良貨",id:2394},{english:"good offices",hangul:"주선",hanja:"周旋",id:2395},{english:"goods",hangul:"상품",hanja:"商品",id:2396,freq_deg:859},{english:"goods",hangul:"물품",hanja:"物品",id:2397},{english:"goon",hangul:"난폭자",hanja:"亂暴者",id:2398},{english:"gout",hangul:"통풍",hanja:"痛風",id:2399},{english:"governing",hangul:"통치하는",hanja:"統治",id:2400},{english:"government",hangul:"정치",hanja:"政治",id:2401,freq_deg:211},{english:"government",hangul:"정부",hanja:"政府",id:2402,freq_deg:120},{english:"government party",hangul:"여당",hanja:"與黨",id:2403},{english:"governor",hangul:"지배자",hanja:"支配者",id:2404},{english:"grace",hangul:"우미",hanja:"優美",id:2405},{english:"grace",hangul:"우아",hanja:"優雅",id:2406},{english:"grace",hangul:"은혜",hanja:"恩惠",id:2407},{english:"gradation",hangul:"단계",hanja:"段階",id:2408,freq_deg:420},{english:"grade",hangul:"계급",hanja:"階級",id:2409},{english:"grade",hangul:"정도",hanja:"程度",id:2410,freq_deg:76},{english:"grain",hangul:"곡물",hanja:"穀物",id:2411},{english:"grammar",hangul:"문법",hanja:"文法",id:2412,freq_deg:5387},{english:"grammar",hangul:"문전",hanja:"文典",id:2413},{english:"grandeur",hangul:"웅대",hanja:"雄大",id:2414},{english:"grandfather",hangul:"조부",hanja:"祖父",id:2415},{english:"grandmother",hangul:"조모",hanja:"祖母",id:2416},{english:"granite",hangul:"화강암",hanja:"花崗岩",id:2417},{english:"grant",hangul:"수여하다",hanja:"授與",id:2418},{english:"graph",hangul:"도표",hanja:"圖表",id:2419},{english:"graph paper",hangul:"방안지",hanja:"方眼紙",id:2420},{english:"graphite",hangul:"석묵",hanja:"石墨",id:2421},{english:"grappling",hangul:"격투",hanja:"格鬪",id:2422},{english:"grass",hangul:"목초",hanja:"牧草",id:2423},{english:"grave",hangul:"조각하다",hanja:"彫刻",id:2424},{english:"graven image",hangul:"조상",hanja:"彫像",id:2425,freq_deg:1396},{english:"graveyard",hangul:"묘지",hanja:"墓地",id:2426},{english:"gravity",hangul:"중력",hanja:"重力",id:2427},{english:"gravity",hangul:"엄숙",hanja:"嚴肅",id:2428},{english:"grazing",hangul:"방목",hanja:"放牧",id:2429},{english:"greatness",hangul:"위대",hanja:"偉大",id:2430},{english:"greed",hangul:"탐욕",hanja:"貪慾",id:2431},{english:"greed",hangul:"욕심",hanja:"慾心",id:2432,freq_deg:2550},{english:"grenade",hangul:"수류탄",hanja:"手榴彈",id:2433},{english:"ground",hangul:"지면",hanja:"地面",id:2434},{english:"ground",hangul:"지반",hanja:"地盤",id:2435},{english:"ground",hangul:"수립하다",hanja:"樹立",id:2436},{english:"growing",hangul:"성장하는",hanja:"成長",id:2437},{english:"growth",hangul:"성장",hanja:"成長",id:2438,freq_deg:919},{english:"growth",hangul:"생장",hanja:"生長",id:2439},{english:"growth",hangul:"발육",hanja:"發育",id:2440},{english:"growth",hangul:"발달",hanja:"發達",id:2441,freq_deg:1207},{english:"grudge",hangul:"원한",hanja:"怨恨",id:2442},{english:"grudge",hangul:"유한",hanja:"遺恨",id:2443},{english:"guarantee",hangul:"보증",hanja:"保證",id:2444},{english:"guarantee",hangul:"보증하다",hanja:"保證",id:2445},{english:"guardhouse",hangul:"영창",hanja:"營倉",id:2446},{english:"guardian",hangul:"보호자",hanja:"保護者",id:2447},{english:"guardianship",hangul:"보호",hanja:"保護",id:2448,freq_deg:844},{english:"guidance",hangul:"안내",hanja:"案內",id:2449,freq_deg:3423},{english:"guidance",hangul:"지도",hanja:"指導",id:2450,freq_deg:2054},{english:"guide",hangul:"도표",hanja:"道標",id:2451},{english:"guillotine",hangul:"단두대",hanja:"斷頭臺",id:2452},{english:"gun",hangul:"대포",hanja:"大砲",id:2453},{english:"gun carriage",hangul:"포차",hanja:"砲車",id:2454},{english:"gunboat",hangul:"포함",hanja:"砲艦",id:2455,freq_deg:3943},{english:"guncotton",hangul:"면화약",hanja:"綿火藥",id:2456},{english:"gunfire",hangul:"포화",hanja:"砲火",id:2457},{english:"gunnery",hangul:"포술",hanja:"砲術",id:2458},{english:"gunpowder",hangul:"화약",hanja:"火藥",id:2459},{english:"gunstock",hangul:"총상",hanja:"銃床",id:2460},{english:"gushing",hangul:"분출하는",hanja:"噴出",id:2461},{english:"gymnastics",hangul:"체조",hanja:"體操",id:2462,freq_deg:1725},{english:"habit",hangul:"습관",hanja:"習慣",id:2463,freq_deg:1532},{english:"halitosis",hangul:"구취",hanja:"口臭",id:2464},{english:"hallucination",hangul:"환각",hanja:"幻覺",id:2465},{english:"halve",hangul:"반감하다",hanja:"半減",id:2466},{english:"handbook",hangul:"편람",hanja:"便覽",id:2467},{english:"handicraft",hangul:"수세공",hanja:"手細工",id:2468},{english:"handicraft",hangul:"수예",hanja:"手藝",id:2469},{english:"handling",hangul:"취급",hanja:"取扱",id:2470},{english:"handling",hangul:"조종",hanja:"操縱",id:2471},{english:"handrail",hangul:"난간",hanja:"欄干",id:2472},{english:"handshake",hangul:"악수",hanja:"握手",id:2473,freq_deg:3464},{english:"handwriting",hangul:"필적",hanja:"筆跡",id:2474},{english:"hangar",hangul:"격납고",hanja:"格納庫",id:2475},{english:"hanging",hangul:"교살",hanja:"絞殺",id:2476},{english:"hangover",hangul:"숙취",hanja:"宿醉",id:2477},{english:"happiness",hangul:"행복",hanja:"幸福",id:2478,freq_deg:1713},{english:"harbinger",hangul:"선구자",hanja:"先驅者",id:2479},{english:"hard palate",hangul:"경구개",hanja:"硬口盖",id:2480},{english:"hard water",hangul:"경수",hanja:"硬水",id:2481},{english:"hardness",hangul:"경도",hanja:"硬度",id:2482},{english:"hardness",hangul:"무정",hanja:"無情",id:2483},{english:"harmonic",hangul:"배음",hanja:"倍音",id:2484},{english:"harmony",hangul:"조화",hanja:"調和",id:2485},{english:"harmony",hangul:"화합",hanja:"和合",id:2486},{english:"harmony",hangul:"화성",hanja:"和聲",id:2487},{english:"harvest",hangul:"수확",hanja:"收穫",id:2488},{english:"hatch",hangul:"창구",hanja:"艙口",id:2489,freq_deg:4662},{english:"hatred",hangul:"증오",hanja:"憎惡",id:2490},{english:"hay",hangul:"건초",hanja:"乾草",id:2491},{english:"hazard",hangul:"위험",hanja:"危險",id:2492,freq_deg:1534},{english:"head",hangul:"두뇌",hanja:"頭腦",id:2493},{english:"head office",hangul:"본사",hanja:"本社",id:2494,freq_deg:4421},{english:"head office",hangul:"본점",hanja:"本店",id:2495},{english:"headache",hangul:"두통",hanja:"頭痛",id:2496},{english:"heading",hangul:"제목",hanja:"題目",id:2497,freq_deg:1345},{english:"headmaster",hangul:"교장",hanja:"校長",id:2498,freq_deg:979},{english:"headnote",hangul:"두주",hanja:"頭註",id:2499},{english:"headquarters",hangul:"본부",hanja:"本部",id:2500,freq_deg:3600},{english:"health",hangul:"건강",hanja:"健康",id:2501,freq_deg:574},{english:"hearing aid",hangul:"보청기",hanja:"補聽器",id:2502},{english:"heart",hangul:"심장",hanja:"心臟",id:2503,freq_deg:1772},{english:"heart",hangul:"중심",hanja:"中心",id:2504,freq_deg:276},{english:"heart's blood",hangul:"심혈",hanja:"心血",id:2505},{english:"heat capacity",hangul:"열용량",hanja:"熱容量",id:2506},{english:"heat rays",hangul:"열선",hanja:"熱線",id:2507},{english:"heat treatment",hangul:"열처리",hanja:"熱處理",id:2508},{english:"heat wave",hangul:"열파",hanja:"熱波",id:2509},{english:"heatstroke",hangul:"일사병",hanja:"日射病",id:2510},{english:"heaven",hangul:"천국",hanja:"天國",id:2511,freq_deg:4832},{english:"heavenly body",hangul:"천체",hanja:"天體",id:2512},{english:"heavy hydrogen",hangul:"중수소",hanja:"重水素",id:2513},{english:"heavy oil",hangul:"중유",hanja:"重油",id:2514},{english:"heavy water",hangul:"중수",hanja:"重水",id:2515},{english:"hegemony",hangul:"패권",hanja:"覇權",id:2516},{english:"height",hangul:"고도",hanja:"高度",id:2517},{english:"height",hangul:"고지",hanja:"高地",id:2518},{english:"heir",hangul:"사자",hanja:"嗣子",id:2519,freq_deg:5234},{english:"heir",hangul:"후계자",hanja:"後繼者",id:2520},{english:"helix",hangul:"나선",hanja:"螺旋",id:2521},{english:"hell",hangul:"지옥",hanja:"地獄",id:2522},{english:"helmsman",hangul:"타수",hanja:"舵手",id:2523},{english:"hematite",hangul:"적철광",hanja:"赤鐵鑛",id:2524},{english:"hemisphere",hangul:"반구",hanja:"半球",id:2525},{english:"hemorrhoids",hangul:"치질",hanja:"痔疾",id:2526},{english:"hemorrhoids",hangul:"치핵",hanja:"痔核",id:2527},{english:"hepatitis",hangul:"간염",hanja:"肝炎",id:2528},{english:"herb",hangul:"초본",hanja:"草本",id:2529},{english:"herdsman",hangul:"목자",hanja:"牧者",id:2530},{english:"hereafter",hangul:"금후",hanja:"今後",id:2531},{english:"heredity",hangul:"유전",hanja:"遺傳",id:2532},{english:"heresy",hangul:"이단",hanja:"異端",id:2533},{english:"heritage",hangul:"세습",hanja:"世襲",id:2534},{english:"hermit",hangul:"은자",hanja:"隱者",id:2535},{english:"hero",hangul:"영웅",hanja:"英雄",id:2536,freq_deg:4070},{english:"hero",hangul:"용사",hanja:"勇士",id:2537},{english:"heroic",hangul:"영웅적인",hanja:"英雄的",id:2538},{english:"heroine",hangul:"여걸",hanja:"女傑",id:2539},{english:"hesitation",hangul:"주저",hanja:"躊躇",id:2540},{english:"heter",hangul:"타",hanja:"他",id:2541},{english:"heteronomy",hangul:"타율",hanja:"他律",id:2542},{english:"heyday",hangul:"전성기",hanja:"全盛期",id:2543},{english:"hibernation",hangul:"동면",hanja:"冬眠",id:2544},{english:"hide",hangul:"피혁",hanja:"皮革",id:2545},{english:"hieroglyph",hangul:"상형문자",hanja:"象形文字",id:2546},{english:"high atmospheric pressure",hangul:"고기압",hanja:"高氣壓",id:2547},{english:"high blood pressure",hangul:"고혈압",hanja:"高血壓",id:2548},{english:"high frequency",hangul:"고주파",hanja:"高周波",id:2549},{english:"high priest",hangul:"고승",hanja:"高僧",id:2550},{english:"high sea",hangul:"공해",hanja:"公海",id:2551,freq_deg:3066},{english:"high tide",hangul:"고조",hanja:"高潮",id:2552},{english:"high treason",hangul:"대역",hanja:"大逆",id:2553},{english:"high water",hangul:"만조",hanja:"滿潮",id:2554},{english:"hindrance",hangul:"방해",hanja:"妨害",id:2555,freq_deg:3456},{english:"hint",hangul:"암시",hanja:"暗示",id:2556,freq_deg:4282},{english:"hint",hangul:"암시하다",hanja:"暗示",id:2557},{english:"hinterland",hangul:"오지",hanja:"奧地",id:2558},{english:"hippopotamus",hangul:"하마",hanja:"河馬",id:2559},{english:"hire",hangul:"고용하다",hanja:"雇傭",id:2560},{english:"history",hangul:"연혁",hanja:"沿革",id:2561},{english:"hit",hangul:"성공",hanja:"成功",id:2562,freq_deg:2043},{english:"hobby",hangul:"취미",hanja:"趣味",id:2563,freq_deg:2312},{english:"hold",hangul:"보류하다",hanja:"保留",id:2564},{english:"holiday",hangul:"휴일",hanja:"休日",id:2565,freq_deg:3898},{english:"holiness",hangul:"신성",hanja:"神聖",id:2566},{english:"holy orders",hangul:"성직",hanja:"聖職",id:2567},{english:"home",hangul:"가정",hanja:"家庭",id:2568,freq_deg:3531},{english:"home plate",hangul:"본루",hanja:"本壘",id:2569},{english:"homework",hangul:"숙제",hanja:"宿題",id:2570,freq_deg:1434},{english:"homogeneous",hangul:"동질",hanja:"同質",id:2571},{english:"honesty",hangul:"정직",hanja:"正直",id:2572},{english:"honor",hangul:"명예",hanja:"名譽",id:2573,freq_deg:2141},{english:"honor",hangul:"존경하다",hanja:"尊敬",id:2574,freq_deg:4005},{english:"honorific",hangul:"경어",hanja:"敬語",id:2575},{english:"hope",hangul:"희망",hanja:"希望",id:2576,freq_deg:1350},{english:"hope",hangul:"기대",hanja:"期待",id:2577,freq_deg:1271},{english:"hope",hangul:"희망하다",hanja:"希望",id:2578,freq_deg:5377},{english:"horse racing",hangul:"경마",hanja:"競馬",id:2579},{english:"horseman",hangul:"기수",hanja:"騎手",id:2580},{english:"horsemanship",hangul:"마술",hanja:"馬術",id:2581},{english:"hospital",hangul:"병원",hanja:"病院",id:2582,freq_deg:558},{english:"host",hangul:"군세",hanja:"軍勢",id:2583},{english:"hostess",hangul:"여급",hanja:"女給",id:2584},{english:"hostility",hangul:"적의",hanja:"敵意",id:2585},{english:"hostility",hangul:"적대",hanja:"敵對",id:2586},{english:"house",hangul:"가옥",hanja:"家屋",id:2587},{english:"house call",hangul:"왕진",hanja:"往診",id:2588},{english:"housewife",hangul:"주부",hanja:"主婦",id:2589,freq_deg:1553},{english:"housework",hangul:"가사",hanja:"家事",id:2590,freq_deg:3583},{english:"housing",hangul:"주택",hanja:"住宅",id:2591,freq_deg:1303},{english:"hue",hangul:"색채",hanja:"色彩",id:2592},{english:"hue",hangul:"색상",hanja:"色相",id:2593},{english:"human",hangul:"인간적인",hanja:"人間的",id:2594},{english:"human nature",hangul:"인성",hanja:"人性",id:2595},{english:"human nature",hangul:"인정",hanja:"人情",id:2596},{english:"humanism",hangul:"인본주의",hanja:"人本主義",id:2597},{english:"humanity",hangul:"인류",hanja:"人類",id:2598,freq_deg:745},{english:"humanity",hangul:"인정",hanja:"人情",id:2599},{english:"humanity",hangul:"박애",hanja:"博愛",id:2600},{english:"humidity",hangul:"습기",hanja:"濕氣",id:2601,freq_deg:4808},{english:"humiliating",hangul:"굴욕적인",hanja:"屈辱的",id:2602},{english:"humiliation",hangul:"굴욕",hanja:"屈辱",id:2603},{english:"humility",hangul:"겸손",hanja:"謙遜",id:2604},{english:"humus",hangul:"부식토",hanja:"腐植土",id:2605},{english:"hunger",hangul:"공복",hanja:"空腹",id:2606},{english:"hybrid",hangul:"잡종",hanja:"雜種",id:2607},{english:"hydrochloric acid",hangul:"염산",hanja:"鹽酸",id:2608},{english:"hydrocyanic acid",hangul:"청산",hanja:"靑酸",id:2609},{english:"hydrolysis",hangul:"가수분해",hanja:"加水分解",id:2610},{english:"hydrophobia",hangul:"공수병",hanja:"恐水病",id:2611},{english:"hydrophobia",hangul:"광견병",hanja:"狂犬病",id:2612},{english:"hyperbola",hangul:"쌍곡선",hanja:"雙曲線",id:2613},{english:"hypha",hangul:"균사",hanja:"菌絲",id:2614},{english:"hypocrisy",hangul:"위선",hanja:"僞善",id:2615},{english:"hypothesis",hangul:"가설",hanja:"假設",id:2616},{english:"hypothesis",hangul:"가정",hanja:"假定",id:2617,freq_deg:3531},{english:"ice floe",hangul:"부빙",hanja:"浮氷",id:2618},{english:"ice water",hangul:"빙수",hanja:"氷水",id:2619},{english:"iceberg",hangul:"빙산",hanja:"氷山",id:2620},{english:"ichthyosaur",hangul:"어룡",hanja:"魚龍",id:2621},{english:"icon",hangul:"성상",hanja:"聖像",id:2622},{english:"idea",hangul:"관념",hanja:"觀念",id:2623,freq_deg:1893},{english:"idea",hangul:"사상",hanja:"思想",id:2624,freq_deg:3976},{english:"idea",hangul:"이념",hanja:"理念",id:2625,freq_deg:1203},{english:"ideal",hangul:"이상적인",hanja:"理想",id:2626},{english:"ideal",hangul:"관념적인",hanja:"觀念的",id:2627},{english:"ideal",hangul:"이상",hanja:"理想",id:2628,freq_deg:2330},{english:"idealism",hangul:"이상주의",hanja:"理想主義",id:2629},{english:"idealism",hangul:"유심론",hanja:"唯心論",id:2630},{english:"idealization",hangul:"이상화",hanja:"理想化",id:2631},{english:"idiom",hangul:"숙어",hanja:"熟語",id:2632},{english:"idleness",hangul:"무위",hanja:"無爲",id:2633},{english:"idol",hangul:"우상",hanja:"偶像",id:2634},{english:"idyllic",hangul:"목가적인",hanja:"牧歌的",id:2635},{english:"ignition",hangul:"점화",hanja:"點火",id:2636},{english:"ignition",hangul:"발화",hanja:"發火",id:2637},{english:"ignorance",hangul:"무지",hanja:"無知",id:2638},{english:"ignore",hangul:"무시하다",hanja:"無視",id:2639,freq_deg:1786},{english:"ileum",hangul:"회장",hanja:"回腸",id:2640,freq_deg:543},{english:"ill will",hangul:"악의",hanja:"惡意",id:2641},{english:"ill will",hangul:"악감정",hanja:"惡感情",id:2642},{english:"illegality",hangul:"위법",hanja:"違法",id:2643,freq_deg:4758},{english:"illegality",hangul:"불법",hanja:"不法",id:2644,freq_deg:4859},{english:"illiteracy",hangul:"문맹",hanja:"文盲",id:2645},{english:"illogical",hangul:"비논리적인",hanja:"非論理的",id:2646},{english:"illumination",hangul:"조명",hanja:"照明",id:2647,freq_deg:4225},{english:"illumination",hangul:"조도",hanja:"照度",id:2648},{english:"illusion",hangul:"환영",hanja:"幻影",id:2649,freq_deg:4968},{english:"illusion",hangul:"환상",hanja:"幻像",id:2650},{english:"illusion",hangul:"미망",hanja:"迷妄",id:2651},{english:"illustration",hangul:"실례",hanja:"實例",id:2652,freq_deg:4749},{english:"illustration",hangul:"예증",hanja:"例證",id:2653},{english:"image",hangul:"우상",hanja:"偶像",id:2654},{english:"image",hangul:"영상",hanja:"映像",id:2655,freq_deg:5573},{english:"imagination",hangul:"상상",hanja:"想像",id:2656,freq_deg:1466},{english:"imagine",hangul:"상상하다",hanja:"想像",id:2657,freq_deg:2443},{english:"imagine",hangul:"추측하다",hanja:"推測",id:2658},{english:"imbalance",hangul:"불균형",hanja:"不均衡",id:2659},{english:"imbecility",hangul:"저능",hanja:"低能",id:2660},{english:"imitation",hangul:"모방",hanja:"模倣",id:2661},{english:"imitation",hangul:"모조",hanja:"模造",id:2662},{english:"immanent",hangul:"내재적인",hanja:"內在的",id:2663},{english:"imminence",hangul:"절박",hanja:"切迫",id:2664},{english:"imminence",hangul:"급박",hanja:"急迫",id:2665},{english:"immoderation",hangul:"과도",hanja:"過度",id:2666},{english:"imperialism",hangul:"제정",hanja:"帝政",id:2667},{english:"impetus",hangul:"자극",hanja:"刺戟",id:2668,freq_deg:2524},{english:"implement",hangul:"도구",hanja:"道具",id:2669,freq_deg:2085},{english:"implement",hangul:"용구",hanja:"用具",id:2670},{english:"implementation",hangul:"이행",hanja:"履行",id:2671},{english:"implication",hangul:"연루",hanja:"連累",id:2672},{english:"implication",hangul:"포함",hanja:"包含",id:2673,freq_deg:3943},{english:"implication",hangul:"함축",hanja:"含蓄",id:2674},{english:"import",hangul:"수입하다",hanja:"輸入",id:2675,freq_deg:3204},{english:"import",hangul:"수입",hanja:"輸入",id:2676,freq_deg:2190},{english:"imposition",hangul:"부과",hanja:"賦課",id:2677},{english:"impregnation",hangul:"수정",hanja:"受精",id:2678},{english:"impression",hangul:"인상",hanja:"印象",id:2679,freq_deg:5019},{english:"imprisonment",hangul:"투옥",hanja:"投獄",id:2680},{english:"imprisonment",hangul:"금고",hanja:"禁錮",id:2681,freq_deg:4399},{english:"imprisonment",hangul:"유폐",hanja:"幽閉",id:2682},{english:"impropriety",hangul:"부정",hanja:"不正",id:2683,freq_deg:1023},{english:"improvement",hangul:"개선",hanja:"改善",id:2684,freq_deg:1381},{english:"improvement",hangul:"향상",hanja:"向上",id:2685,freq_deg:2696},{english:"improvement",hangul:"개량",hanja:"改良",id:2686},{english:"impulsive",hangul:"충동적인",hanja:"衝動的",id:2687},{english:"impurity",hangul:"불순",hanja:"不純",id:2688},{english:"inattention",hangul:"부주의",hanja:"不注意",id:2689},{english:"inborn",hangul:"선천적인",hanja:"先天的",id:2690},{english:"incandescence",hangul:"백열",hanja:"白熱",id:2691},{english:"incantation",hangul:"주문",hanja:"呪文",id:2692,freq_deg:5354},{english:"incarceration",hangul:"유폐",hanja:"幽閉",id:2693},{english:"incarnation",hangul:"권화",hanja:"權化",id:2694},{english:"incarnation",hangul:"화신",hanja:"化身",id:2695},{english:"incense burner",hangul:"향로",hanja:"香爐",id:2696},{english:"incentive",hangul:"자극",hanja:"刺戟",id:2697,freq_deg:2524},{english:"incentive",hangul:"유인",hanja:"誘因",id:2698},{english:"incidence",hangul:"발생",hanja:"發生",id:2699,freq_deg:2392},{english:"incidence",hangul:"입사",hanja:"入射",id:2700,freq_deg:5020},{english:"incineration",hangul:"소각",hanja:"燒却",id:2701},{english:"inclination",hangul:"의향",hanja:"意向",id:2702},{english:"inclusion",hangul:"포함",hanja:"包含",id:2703,freq_deg:3943},{english:"inclusion",hangul:"포괄",hanja:"包括",id:2704},{english:"incompetence",hangul:"무능력",hanja:"無能力",id:2705},{english:"incompetent",hangul:"무능력자",hanja:"無能力者",id:2706},{english:"inconsistency",hangul:"모순",hanja:"矛盾",id:2707},{english:"inconstancy",hangul:"부정",hanja:"不定",id:2708,freq_deg:1023},{english:"inconvenience",hangul:"불편",hanja:"不便",id:2709,freq_deg:3331},{english:"incorporation",hangul:"합동",hanja:"合同",id:2710},{english:"incorporation",hangul:"편입",hanja:"編入",id:2711},{english:"increase",hangul:"번식하다",hanja:"繁殖",id:2712},{english:"increase",hangul:"번식",hanja:"繁殖",id:2713},{english:"incubation",hangul:"부화",hanja:"孵化",id:2714},{english:"incurability",hangul:"불치",hanja:"不治",id:2715},{english:"indemnity",hangul:"배상",hanja:"賠償",id:2716},{english:"indemnity",hangul:"변상",hanja:"辨償",id:2717},{english:"independence",hangul:"자주",hanja:"自主",id:2718,freq_deg:600},{english:"independence",hangul:"자립",hanja:"自立",id:2719},{english:"index",hangul:"지표",hanja:"指標",id:2720},{english:"index number",hangul:"지수",hanja:"指數",id:2721},{english:"indication",hangul:"지시",hanja:"指示",id:2722,freq_deg:1820},{english:"indifference",hangul:"냉담",hanja:"冷淡",id:2723},{english:"indignation",hangul:"분개",hanja:"憤慨",id:2724},{english:"indirectness",hangul:"간접",hanja:"間接",id:2725,freq_deg:3718},{english:"indiscretion",hangul:"무분별",hanja:"無分別",id:2726},{english:"individual",hangul:"개인적인",hanja:"個人",id:2727},{english:"individualism",hangul:"개인주의",hanja:"個人主義",id:2728},{english:"individualist",hangul:"개인주의자",hanja:"個人主義者",id:2729},{english:"individuality",hangul:"개성",hanja:"個性",id:2730,freq_deg:1572},{english:"individuality",hangul:"인격",hanja:"人格",id:2731,freq_deg:2304},{english:"induce",hangul:"야기하다",hanja:"惹起",id:2732},{english:"induce",hangul:"유발하다",hanja:"誘發",id:2733,freq_deg:3998},{english:"inducement",hangul:"유도",hanja:"誘導",id:2734},{english:"inducement",hangul:"유인",hanja:"誘引",id:2735},{english:"industrial park",hangul:"공업단지",hanja:"工業團地",id:2736},{english:"industry",hangul:"산업",hanja:"産業",id:2737,freq_deg:349},{english:"industry",hangul:"공업",hanja:"工業",id:2738,freq_deg:960},{english:"industry",hangul:"사업",hanja:"事業",id:2739,freq_deg:464},{english:"industry",hangul:"근면",hanja:"勤勉",id:2740},{english:"indwelling",hangul:"내재하다",hanja:"內在",id:2741},{english:"inefficiency",hangul:"무능",hanja:"無能",id:2742},{english:"inequality",hangul:"불평등",hanja:"不平等",id:2743},{english:"inertia",hangul:"타성",hanja:"惰性",id:2744},{english:"inertia",hangul:"타력",hanja:"惰力",id:2745},{english:"inevitable",hangul:"필연적인",hanja:"必然",id:2746},{english:"inexpediency",hangul:"불편",hanja:"不便",id:2747,freq_deg:3331},{english:"inexperience",hangul:"미숙",hanja:"未熟",id:2748},{english:"infamy",hangul:"악평",hanja:"惡評",id:2749},{english:"infamy",hangul:"오명",hanja:"汚名",id:2750},{english:"infancy",hangul:"유소",hanja:"幼少",id:2751},{english:"infancy",hangul:"유년",hanja:"幼年",id:2752},{english:"infant",hangul:"유아",hanja:"幼兒",id:2753},{english:"infer",hangul:"추측하다",hanja:"推測",id:2754},{english:"inference",hangul:"추리",hanja:"推理",id:2755},{english:"inferiority",hangul:"열등",hanja:"劣等",id:2756},{english:"inferiority complex",hangul:"열등감",hanja:"劣等感",id:2757},{english:"infertility",hangul:"불임",hanja:"不妊",id:2758},{english:"infidelity",hangul:"배신",hanja:"背信",id:2759},{english:"infidelity",hangul:"부정",hanja:"不貞",id:2760,freq_deg:1023},{english:"infield",hangul:"내야",hanja:"內野",id:2761},{english:"infinitude",hangul:"무궁",hanja:"無窮",id:2762},{english:"inflammable",hangul:"가연물",hanja:"可燃物",id:2763},{english:"inflammation",hangul:"염증",hanja:"炎症",id:2764},{english:"inflection",hangul:"억양",hanja:"抑揚",id:2765},{english:"inflorescence",hangul:"화서",hanja:"花序",id:2766},{english:"influence",hangul:"영향",hanja:"影響",id:2767,freq_deg:405},{english:"influence",hangul:"세력",hanja:"勢力",id:2768},{english:"influence",hangul:"권세",hanja:"權勢",id:2769},{english:"influence",hangul:"위력",hanja:"偉力",id:2770},{english:"influence",hangul:"유력자",hanja:"有力",id:2771},{english:"influence",hangul:"좌우하다",hanja:"左右",id:2772},{english:"influx",hangul:"유입",hanja:"流入",id:2773},{english:"information",hangul:"정보",hanja:"情報",id:2774,freq_deg:386},{english:"information",hangul:"보고",hanja:"報告",id:2775,freq_deg:2514},{english:"information",hangul:"보도",hanja:"報道",id:2776,freq_deg:1622},{english:"information",hangul:"지식",hanja:"知識",id:2777,freq_deg:740},{english:"information",hangul:"견문",hanja:"見聞",id:2778},{english:"infract",hangul:"위반하다",hanja:"違反",id:2779,freq_deg:4363},{english:"ingathering",hangul:"수확",hanja:"收穫",id:2780},{english:"ingratitude",hangul:"망은",hanja:"忘恩",id:2781},{english:"ingredient",hangul:"재료",hanja:"材料",id:2782,freq_deg:674},{english:"inhabitant",hangul:"거주자",hanja:"居住者",id:2783},{english:"inhalation",hangul:"흡입",hanja:"吸入",id:2784},{english:"inheritance",hangul:"상속",hanja:"相續",id:2785},{english:"inheritance",hangul:"유산",hanja:"遺産",id:2786,freq_deg:4072},{english:"iniquity",hangul:"부정",hanja:"不正",id:2787,freq_deg:1023},{english:"initiation",hangul:"전수",hanja:"傳授",id:2788},{english:"injection",hangul:"주입",hanja:"注入",id:2789},{english:"injury",hangul:"손해",hanja:"損害",id:2790,freq_deg:2577},{english:"injury",hangul:"상해",hanja:"傷害",id:2791},{english:"injury",hangul:"위해",hanja:"危害",id:2792},{english:"injustice",hangul:"불법",hanja:"不法",id:2793,freq_deg:4859},{english:"injustice",hangul:"부정",hanja:"不正",id:2794,freq_deg:1023},{english:"inland",hangul:"내륙",hanja:"內陸",id:2795},{english:"inland sea",hangul:"내해",hanja:"內海",id:2796},{english:"inn",hangul:"여관",hanja:"旅館",id:2797,freq_deg:4065},{english:"innate",hangul:"선천적인",hanja:"先天的",id:2798},{english:"inner ear",hangul:"내이",hanja:"內耳",id:2799},{english:"innocence",hangul:"무죄",hanja:"無罪",id:2800},{english:"innovation",hangul:"신기축",hanja:"新機軸",id:2801},{english:"innovation",hangul:"혁신",hanja:"革新",id:2802},{english:"innuendo",hangul:"풍자",hanja:"諷刺",id:2803},{english:"inoculation",hangul:"종두",hanja:"種痘",id:2804},{english:"inquiry",hangul:"질문",hanja:"質問",id:2805,freq_deg:1013},{english:"inquiry",hangul:"조회",hanja:"照會",id:2806},{english:"inquiry",hangul:"조사",hanja:"調査",id:2807,freq_deg:301},{english:"inquiry",hangul:"취조",hanja:"取調",id:2808},{english:"inscription",hangul:"비명",hanja:"碑銘",id:2809,freq_deg:3119},{english:"inscription",hangul:"비문",hanja:"碑文",id:2810},{english:"insecurity",hangul:"불안정",hanja:"不安定",id:2811},{english:"insensibility",hangul:"무신경",hanja:"無神經",id:2812},{english:"insertion",hangul:"삽입",hanja:"揷入",id:2813},{english:"inside",hangul:"내부",hanja:"內部",id:2814,freq_deg:1052},{english:"insight",hangul:"안식",hanja:"眼識",id:2815},{english:"insight",hangul:"식견",hanja:"識見",id:2816},{english:"insignia",hangul:"기장",hanja:"記章",id:2817},{english:"insignia",hangul:"휘장",hanja:"徽章",id:2818},{english:"insistence",hangul:"주장",hanja:"主張",id:2819,freq_deg:653},{english:"insistence",hangul:"고집",hanja:"固執",id:2820,freq_deg:4029},{english:"insolence",hangul:"오만",hanja:"傲慢",id:2821},{english:"inspection",hangul:"감찰",hanja:"監察",id:2822},{english:"inspiration",hangul:"영감",hanja:"靈感",id:2823},{english:"inspiration",hangul:"고취",hanja:"鼓吹",id:2824},{english:"inspiration",hangul:"고무",hanja:"鼓舞",id:2825},{english:"inspiration",hangul:"감화",hanja:"感化",id:2826},{english:"installation",hangul:"설비",hanja:"設備",id:2827},{english:"installation",hangul:"장치",hanja:"裝置",id:2828},{english:"instance",hangul:"예증하다",hanja:"例證",id:2829},{english:"instant",hangul:"찰나",hanja:"刹那",id:2830},{english:"instant",hangul:"순간",hanja:"瞬間",id:2831,freq_deg:474},{english:"instinct",hangul:"본능",hanja:"本能",id:2832},{english:"institution",hangul:"설립",hanja:"設立",id:2833},{english:"institution",hangul:"제도",hanja:"制度",id:2834},{english:"instruction",hangul:"훈령",hanja:"訓令",id:2835},{english:"instruction",hangul:"지령",hanja:"指令",id:2836},{english:"instruction",hangul:"지시",hanja:"指示",id:2837,freq_deg:1820},{english:"instruction",hangul:"명령",hanja:"命令",id:2838,freq_deg:2008},{english:"insult",hangul:"모욕하다",hanja:"侮辱",id:2839},{english:"insult",hangul:"모욕",hanja:"侮辱",id:2840},{english:"insurance",hangul:"보험",hanja:"保險",id:2841,freq_deg:2088},{english:"insure",hangul:"보증하다",hanja:"保證",id:2842},{english:"insurgent",hangul:"폭도",hanja:"暴徒",id:2843},{english:"insurgent",hangul:"반란자",hanja:"反亂者",id:2844},{english:"insurrection",hangul:"폭동",hanja:"暴動",id:2845},{english:"integral",hangul:"적분",hanja:"積分",id:2846},{english:"integrity",hangul:"보전",hanja:"保全",id:2847,freq_deg:3501},{english:"intelligence",hangul:"지성",hanja:"知性",id:2848},{english:"intelligence",hangul:"지능",hanja:"智能",id:2849,freq_deg:5355},{english:"intelligence",hangul:"정보",hanja:"情報",id:2850,freq_deg:386},{english:"intensive",hangul:"집약적인",hanja:"集約的",id:2851},{english:"intention",hangul:"의향",hanja:"意向",id:2852},{english:"intention",hangul:"목적",hanja:"目的",id:2853,freq_deg:664},{english:"interception",hangul:"차단",hanja:"遮斷",id:2854},{english:"intercession",hangul:"중재",hanja:"仲裁",id:2855},{english:"interchange",hangul:"교환",hanja:"交換",id:2856,freq_deg:2654},{english:"intercourse",hangul:"교통",hanja:"交通",id:2857,freq_deg:1103},{english:"interest",hangul:"관심",hanja:"關心",id:2858,freq_deg:280},{english:"interest",hangul:"감흥",hanja:"感興",id:2859},{english:"interest",hangul:"이해관계",hanja:"利害關係",id:2860,freq_deg:4366},{english:"interest",hangul:"이권",hanja:"利權",id:2861},{english:"interest",hangul:"권익",hanja:"權益",id:2862},{english:"interest",hangul:"이익",hanja:"利益",id:2863,freq_deg:1244},{english:"interference",hangul:"방해",hanja:"妨害",id:2864,freq_deg:3456},{english:"interior",hangul:"내부",hanja:"內部",id:2865,freq_deg:1052},{english:"interior",hangul:"오지",hanja:"奧地",id:2866},{english:"interior angle",hangul:"내각",hanja:"內角",id:2867},{english:"interlocutor",hangul:"대화자",hanja:"對話者",id:2868},{english:"interlude",hangul:"막간",hanja:"幕間",id:2869},{english:"intermediary",hangul:"매개",hanja:"媒介",id:2870},{english:"intermediation",hangul:"중개",hanja:"仲介",id:2871},{english:"interment",hangul:"토장",hanja:"土葬",id:2872},{english:"internal",hangul:"내면적인",hanja:"內面的",id:2873},{english:"internal",hangul:"내재적인",hanja:"內在的",id:2874},{english:"international",hangul:"국제적인",hanja:"國際的",id:2875},{english:"internment",hangul:"억류",hanja:"抑留",id:2876},{english:"interpretation",hangul:"해석",hanja:"解釋",id:2877,freq_deg:2646},{english:"interpretation",hangul:"통역",hanja:"通譯",id:2878,freq_deg:5105},{english:"interrogate",hangul:"질문하다",hanja:"質問",id:2879,freq_deg:4828},{english:"interrogation",hangul:"심문",hanja:"審問",id:2880},{english:"interrogator",hangul:"질문자",hanja:"質問者",id:2881},{english:"interruption",hangul:"중단",hanja:"中斷",id:2882,freq_deg:4228},{english:"interruption",hangul:"중절",hanja:"中絶",id:2883},{english:"interruption",hangul:"불통",hanja:"不通",id:2884},{english:"intersection",hangul:"교차",hanja:"交叉",id:2885},{english:"intervention",hangul:"개입",hanja:"介入",id:2886},{english:"interview",hangul:"회견",hanja:"會見",id:2887,freq_deg:2363},{english:"interview",hangul:"면접",hanja:"面接",id:2888,freq_deg:5222},{english:"interviewer",hangul:"회견자",hanja:"會見者",id:2889},{english:"intimacy",hangul:"친밀",hanja:"親密",id:2890},{english:"intimacy",hangul:"친교",hanja:"親交",id:2891},{english:"intimidator",hangul:"협박자",hanja:"脅迫者",id:2892},{english:"intoxication",hangul:"도취",hanja:"陶醉",id:2893},{english:"intrigue",hangul:"밀통",hanja:"密通",id:2894},{english:"intrigue",hangul:"밀통하다",hanja:"密通",id:2895},{english:"intro",hangul:"소개하다",hanja:"紹介",id:2896,freq_deg:1234},{english:"introduction",hangul:"도입",hanja:"導入",id:2897,freq_deg:1898},{english:"introduction",hangul:"소개",hanja:"紹介",id:2898,freq_deg:2891},{english:"introduction",hangul:"서론",hanja:"序論",id:2899},{english:"intrude",hangul:"침입하다",hanja:"侵入",id:2900},{english:"intruder",hangul:"침입자",hanja:"侵入者",id:2901},{english:"intruder",hangul:"난입자",hanja:"亂入者",id:2902},{english:"inundate",hangul:"침수하다",hanja:"浸水",id:2903},{english:"inundate",hangul:"쇄도하다",hanja:"殺到",id:2904},{english:"inundation",hangul:"침수",hanja:"浸水",id:2905},{english:"invader",hangul:"침입자",hanja:"侵入者",id:2906},{english:"invalidation",hangul:"실효",hanja:"失效",id:2907},{english:"invasion",hangul:"침입",hanja:"侵入",id:2908},{english:"invasion",hangul:"침략",hanja:"侵掠",id:2909},{english:"invention",hangul:"발명",hanja:"發明",id:2910},{english:"investigation",hangul:"조사",hanja:"調査",id:2911,freq_deg:301},{english:"investigation",hangul:"수사",hanja:"搜査",id:2912},{english:"investiture",hangul:"임관",hanja:"任官",id:2913},{english:"investment",hangul:"투자",hanja:"投資",id:2914,freq_deg:914},{english:"investment",hangul:"출자",hanja:"出資",id:2915},{english:"invitation",hangul:"권유",hanja:"勸誘",id:2916},{english:"involvement",hangul:"연루",hanja:"連累",id:2917},{english:"ionization",hangul:"전리",hanja:"電離",id:2918},{english:"iris",hangul:"홍채",hanja:"虹彩",id:2919},{english:"iron",hangul:"철분",hanja:"鐵分",id:2920},{english:"iron sand",hangul:"사철",hanja:"砂鐵",id:2921},{english:"ironware",hangul:"철기",hanja:"鐵器",id:2922},{english:"ironworker",hangul:"철공",hanja:"鐵工",id:2923},{english:"irony",hangul:"풍자",hanja:"諷刺",id:2924},{english:"irony",hangul:"반어",hanja:"反語",id:2925},{english:"irrationality",hangul:"부조리",hanja:"不條理",id:2926},{english:"irregularity",hangul:"불규칙",hanja:"不規則",id:2927},{english:"irregularity",hangul:"변칙",hanja:"變則",id:2928},{english:"irresponsibility",hangul:"무책임",hanja:"無責任",id:2929},{english:"irrigation",hangul:"관개",hanja:"灌漑",id:2930},{english:"isolation",hangul:"고립",hanja:"孤立",id:2931},{english:"isolation",hangul:"격리",hanja:"隔離",id:2932},{english:"isolation",hangul:"분리",hanja:"分離",id:2933,freq_deg:2888},{english:"isomorphism",hangul:"동형",hanja:"同型",id:2934},{english:"issue",hangul:"출판하다",hanja:"出版",id:2935},{english:"isthmus",hangul:"지협",hanja:"地峽",id:2936},{english:"item",hangul:"항목",hanja:"項目",id:2937},{english:"itinerary",hangul:"여정",hanja:"旅程",id:2938},{english:"itinerary",hangul:"도정",hanja:"道程",id:2939},{english:"ivory",hangul:"상아",hanja:"象牙",id:2940},{english:"jade",hangul:"비취",hanja:"翡翠",id:2941},{english:"jadeite",hangul:"경옥",hanja:"硬玉",id:2942},{english:"jasper",hangul:"벽옥",hanja:"碧玉",id:2943},{english:"jealousy",hangul:"질투",hanja:"嫉妬",id:2944},{english:"jetty",hangul:"잔교",hanja:"棧橋",id:2945},{english:"jibe",hangul:"일치하다",hanja:"一致",id:2946,freq_deg:2214},{english:"judge",hangul:"재판관",hanja:"裁判官",id:2947},{english:"judge",hangul:"판사",hanja:"判事",id:2948,freq_deg:4313},{english:"judo",hangul:"유도",hanja:"柔道",id:2949},{english:"jumping",hangul:"도약하는",hanja:"跳躍",id:2950},{english:"junior high school",hangul:"중학교",hanja:"中學校",id:2951,freq_deg:1738},{english:"justice",hangul:"정의",hanja:"正義",id:2952},{english:"justice",hangul:"공정",hanja:"公正",id:2953},{english:"justice",hangul:"공평",hanja:"公平",id:2954},{english:"kaleidoscope",hangul:"만화경",hanja:"萬華鏡",id:2955},{english:"kernel",hangul:"핵심",hanja:"核心",id:2956,freq_deg:1583},{english:"kerosene",hangul:"등유",hanja:"燈油",id:2957},{english:"key point",hangul:"요충",hanja:"要衝",id:2958},{english:"kidney",hangul:"신장",hanja:"腎臟",id:2959},{english:"killer",hangul:"살인자",hanja:"殺人者",id:2960},{english:"kind",hangul:"종류",hanja:"種類",id:2961,freq_deg:868},{english:"kindergarten",hangul:"유치원",hanja:"幼稚園",id:2962,freq_deg:2940},{english:"king",hangul:"국왕",hanja:"國王",id:2963,freq_deg:3366},{english:"kingdom",hangul:"왕국",hanja:"王國",id:2964},{english:"kitchen",hangul:"주방",hanja:"廚房",id:2965,freq_deg:3055},{english:"knead",hangul:"안마하다",hanja:"按摩",id:2966},{english:"kneecap",hangul:"슬개골",hanja:"膝蓋骨",id:2967},{english:"knitting",hangul:"편물",hanja:"編物",id:2968},{english:"knowledge",hangul:"지식",hanja:"知識",id:2969,freq_deg:740},{english:"labium",hangul:"음순",hanja:"陰脣",id:2970},{english:"labor",hangul:"근로",hanja:"勤勞",id:2971,freq_deg:3033},{english:"laborer",hangul:"노동자",hanja:"勞動者",id:2972,freq_deg:711},{english:"labyrinth",hangul:"미로",hanja:"迷路",id:2973},{english:"labyrinth",hangul:"미궁",hanja:"迷宮",id:2974},{english:"lactic acid",hangul:"유산",hanja:"乳酸",id:2975,freq_deg:4072},{english:"lading",hangul:"적재",hanja:"積載",id:2976},{english:"lady",hangul:"숙녀",hanja:"淑女",id:2977,freq_deg:5242},{english:"lady",hangul:"귀부인",hanja:"貴婦人",id:2978},{english:"lake",hangul:"호수",hanja:"湖水",id:2979,freq_deg:3445},{english:"lampoon",hangul:"풍자하다",hanja:"諷刺",id:2980},{english:"lance corporal",hangul:"병장",hanja:"兵長",id:2981},{english:"lancer",hangul:"창기병",hanja:"槍騎兵",id:2982},{english:"land",hangul:"육지",hanja:"陸地",id:2983},{english:"land mine",hangul:"지뢰",hanja:"地雷",id:2984},{english:"land tax",hangul:"지조",hanja:"地租",id:2985},{english:"landing",hangul:"상륙",hanja:"上陸",id:2986},{english:"landing",hangul:"착륙",hanja:"着陸",id:2987},{english:"landlord",hangul:"지주",hanja:"地主",id:2988},{english:"landscape gardening",hangul:"조원",hanja:"造園",id:2989},{english:"language",hangul:"언어",hanja:"言語",id:2990,freq_deg:593},{english:"lapis lazuli",hangul:"유리",hanja:"瑠璃",id:2991,freq_deg:2761},{english:"lapse",hangul:"소멸하다",hanja:"消滅",id:2992},{english:"larch",hangul:"낙엽송",hanja:"落葉松",id:2993},{english:"larva",hangul:"유충",hanja:"幼蟲",id:2994},{english:"larva",hangul:"유생",hanja:"幼生",id:2995},{english:"larynx",hangul:"후두",hanja:"喉頭",id:2996},{english:"lassitude",hangul:"무기력",hanja:"無氣力",id:2997},{english:"last",hangul:"최후",hanja:"最後",id:2998,freq_deg:3892},{english:"latency",hangul:"잠재",hanja:"潛在",id:2999},{english:"lathe",hangul:"선반",hanja:"旋盤",id:3000},{english:"launch",hangul:"기정",hanja:"汽艇",id:3001},{english:"lava",hangul:"용암",hanja:"熔岩",id:3002},{english:"law",hangul:"법학",hanja:"法學",id:3003},{english:"layman",hangul:"속인",hanja:"俗人",id:3004},{english:"lead poisoning",hangul:"연독",hanja:"鉛毒",id:3005},{english:"leader",hangul:"지도자",hanja:"指導者",id:3006,freq_deg:1481},{english:"leading part",hangul:"주역",hanja:"主役",id:3007},{english:"leaf mold",hangul:"부엽토",hanja:"腐葉土",id:3008},{english:"league",hangul:"동맹",hanja:"同盟",id:3009},{english:"league",hangul:"연맹",hanja:"聯盟",id:3010},{english:"leap",hangul:"도약하다",hanja:"跳躍",id:3011},{english:"leap year",hangul:"윤년",hanja:"閏年",id:3012},{english:"learning",hangul:"학문",hanja:"學問",id:3013},{english:"leaven",hangul:"효모",hanja:"酵母",id:3014},{english:"lecturer",hangul:"강사",hanja:"講師",id:3015,freq_deg:4178},{english:"lecturer",hangul:"강연자",hanja:"講演者",id:3016},{english:"ledger",hangul:"원장",hanja:"元帳",id:3017,freq_deg:2821},{english:"left wing",hangul:"좌파",hanja:"左派",id:3018},{english:"legal",hangul:"합법적인",hanja:"合法的",id:3019},{english:"legislation",hangul:"입법",hanja:"立法",id:3020},{english:"legislator",hangul:"입법자",hanja:"立法者",id:3021},{english:"leisure",hangul:"여가",hanja:"餘暇",id:3022,freq_deg:4441},{english:"leprosy",hangul:"나병",hanja:"癩病",id:3023},{english:"lesson",hangul:"학과",hanja:"學課",id:3024,freq_deg:4835},{english:"lesson",hangul:"과업",hanja:"課業",id:3025},{english:"lethal",hangul:"치명적인",hanja:"致命的",id:3026},{english:"lethal",hangul:"치사적인",hanja:"致死",id:3027},{english:"lethargy",hangul:"혼수",hanja:"昏睡",id:3028},{english:"lettering",hangul:"자체",hanja:"字體",id:3029,freq_deg:258},{english:"leucocyte",hangul:"백혈구",hanja:"白血球",id:3030},{english:"level",hangul:"수준",hanja:"水準",id:3031,freq_deg:466},{english:"libel",hangul:"중상하다",hanja:"中傷",id:3032},{english:"liberate",hangul:"해방하다",hanja:"解放",id:3033},{english:"liberate",hangul:"석방하다",hanja:"釋放",id:3034},{english:"liberation",hangul:"해방",hanja:"解放",id:3035},{english:"liberty",hangul:"자유",hanja:"自由",id:3036,freq_deg:681},{english:"librarian",hangul:"사서",hanja:"司書",id:3037},{english:"license",hangul:"면허",hanja:"免許",id:3038},{english:"license",hangul:"인가",hanja:"認可",id:3039},{english:"license",hangul:"면허하다",hanja:"免許",id:3040},{english:"licorice",hangul:"감초",hanja:"甘草",id:3041},{english:"life",hangul:"생명",hanja:"生命",id:3042,freq_deg:213},{english:"ligament",hangul:"인대",hanja:"靭帶",id:3043},{english:"light cavalry",hangul:"경기병",hanja:"輕騎兵",id:3044},{english:"light music",hangul:"경음악",hanja:"輕音樂",id:3045},{english:"light wave",hangul:"광파",hanja:"光波",id:3046},{english:"lighthouse",hangul:"등대",hanja:"燈臺",id:3047},{english:"lignite",hangul:"갈탄",hanja:"褐炭",id:3048},{english:"likelihood",hangul:"가능성",hanja:"可能性",id:3049,freq_deg:432},{english:"liking",hangul:"기호",hanja:"嗜好",id:3050,freq_deg:3955},{english:"lily",hangul:"백합",hanja:"百合",id:3051},{english:"limb",hangul:"수족",hanja:"手足",id:3052},{english:"limit",hangul:"한계",hanja:"限界",id:3053,freq_deg:892},{english:"limit",hangul:"한도",hanja:"限度",id:3054},{english:"limit",hangul:"제한",hanja:"際限",id:3055,freq_deg:1924},{english:"limitation",hangul:"제한",hanja:"制限",id:3056,freq_deg:1924},{english:"limited edition",hangul:"한정판",hanja:"限定版",id:3057},{english:"line",hangul:"노선",hanja:"路線",id:3058,freq_deg:3409},{english:"line",hangul:"행렬",hanja:"行列",id:3059},{english:"lineage",hangul:"혈통",hanja:"血統",id:3060},{english:"linear measure",hangul:"척도",hanja:"尺度",id:3061},{english:"linesman",hangul:"선심",hanja:"線審",id:3062},{english:"lion",hangul:"사자",hanja:"獅子",id:3063,freq_deg:5234},{english:"liquefaction",hangul:"액화",hanja:"液化",id:3064},{english:"liquid",hangul:"액체",hanja:"液體",id:3065},{english:"liquid",hangul:"유동체",hanja:"流動體",id:3066},{english:"liquid measure",hangul:"액량",hanja:"液量",id:3067},{english:"liquidation",hangul:"청산",hanja:"淸算",id:3068},{english:"liquidity",hangul:"유동성",hanja:"流動性",id:3069},{english:"listening",hangul:"청취",hanja:"聽取",id:3070},{english:"literary",hangul:"문학적인",hanja:"文學的",id:3071},{english:"literature",hangul:"문학",hanja:"文學",id:3072,freq_deg:244},{english:"literature",hangul:"문헌",hanja:"文獻",id:3073},{english:"literature",hangul:"문예",hanja:"文藝",id:3074},{english:"livelihood",hangul:"생계",hanja:"生計",id:3075},{english:"liveliness",hangul:"활기",hanja:"活氣",id:3076,freq_deg:4177},{english:"liveliness",hangul:"쾌활",hanja:"快活",id:3077},{english:"livestock",hangul:"가축",hanja:"家畜",id:3078},{english:"living",hangul:"생활",hanja:"生活",id:3079,freq_deg:155},{english:"living",hangul:"생계",hanja:"生計",id:3080},{english:"living room",hangul:"거실",hanja:"居室",id:3081,freq_deg:2316},{english:"load",hangul:"하중",hanja:"荷重",id:3082},{english:"loan",hangul:"대부",hanja:"貸付",id:3083},{english:"loan",hangul:"대차",hanja:"貸借",id:3084},{english:"loan",hangul:"차관",hanja:"借款",id:3085},{english:"localize",hangul:"국한하다",hanja:"局限",id:3086},{english:"location",hangul:"위치",hanja:"位置",id:3087,freq_deg:802},{english:"lockjaw",hangul:"파상풍",hanja:"破傷風",id:3088},{english:"locomotive",hangul:"기관차",hanja:"機關車",id:3089},{english:"lodging",hangul:"하숙",hanja:"下宿",id:3090},{english:"lodging",hangul:"숙박",hanja:"宿泊",id:3091},{english:"lodging",hangul:"숙소",hanja:"宿所",id:3092,freq_deg:4556},{english:"logarithm",hangul:"대수",hanja:"對數",id:3093},{english:"logic",hangul:"논리학",hanja:"論理學",id:3094},{english:"logic",hangul:"논리",hanja:"論理",id:3095,freq_deg:1095},{english:"logical",hangul:"논리적인",hanja:"論理的",id:3096},{english:"longevity",hangul:"장수",hanja:"長壽",id:3097,freq_deg:4455},{english:"longing",hangul:"동경",hanja:"憧憬",id:3098},{english:"longitude",hangul:"경도",hanja:"經度",id:3099},{english:"look",hangul:"용모",hanja:"容貌",id:3100},{english:"loom",hangul:"직기",hanja:"織機",id:3101},{english:"loot",hangul:"약탈하다",hanja:"掠奪",id:3102},{english:"looting",hangul:"약탈",hanja:"掠奪",id:3103},{english:"loss",hangul:"손실",hanja:"損失",id:3104,freq_deg:3919},{english:"loss",hangul:"상실",hanja:"喪失",id:3105},{english:"loss",hangul:"손해",hanja:"損害",id:3106,freq_deg:2577},{english:"loudspeaker",hangul:"확성기",hanja:"擴聲器",id:3107},{english:"love",hangul:"애정",hanja:"愛情",id:3108,freq_deg:2632},{english:"love",hangul:"애호",hanja:"愛好",id:3109},{english:"love",hangul:"자애",hanja:"慈愛",id:3110},{english:"love",hangul:"연애",hanja:"戀愛",id:3111,freq_deg:3760},{english:"love affair",hangul:"정사",hanja:"情事",id:3112},{english:"love song",hangul:"연가",hanja:"戀歌",id:3113},{english:"lover",hangul:"연인",hanja:"戀人",id:3114,freq_deg:4150},{english:"lover",hangul:"애인",hanja:"愛人",id:3115,freq_deg:2893},{english:"low tide",hangul:"간조",hanja:"干潮",id:3116},{english:"lowland",hangul:"저지",hanja:"低地",id:3117},{english:"loyalty",hangul:"충성",hanja:"忠誠",id:3118},{english:"loyalty",hangul:"충절",hanja:"忠節",id:3119},{english:"lubricating oil",hangul:"윤활유",hanja:"潤滑油",id:3120},{english:"lumbago",hangul:"요통",hanja:"腰痛",id:3121},{english:"lumber",hangul:"재목",hanja:"材木",id:3122},{english:"lunar eclipse",hangul:"월식",hanja:"月蝕",id:3123},{english:"lurk",hangul:"잠복하다",hanja:"潛伏",id:3124},{english:"lustre",hangul:"광택",hanja:"光澤",id:3125},{english:"luxury",hangul:"사치",hanja:"奢侈",id:3126},{english:"machination",hangul:"책동",hanja:"策動",id:3127},{english:"machinator",hangul:"책사",hanja:"策士",id:3128},{english:"machine",hangul:"기계",hanja:"機械",id:3129,freq_deg:815},{english:"machine gun",hangul:"기관총",hanja:"機關銃",id:3130},{english:"madam",hangul:"부인",hanja:"夫人",id:3131,freq_deg:4738},{english:"madness",hangul:"광기",hanja:"狂氣",id:3132},{english:"maestro",hangul:"거장",hanja:"巨匠",id:3133},{english:"magazine",hangul:"잡지",hanja:"雜誌",id:3134,freq_deg:1626},{english:"magic",hangul:"마법",hanja:"魔法",id:3135},{english:"magic",hangul:"기술",hanja:"奇術",id:3136,freq_deg:293},{english:"magic lantern",hangul:"환등",hanja:"幻燈",id:3137},{english:"magnanimity",hangul:"아량",hanja:"雅量",id:3138},{english:"magnet",hangul:"자석",hanja:"磁石",id:3139},{english:"magnetic field",hangul:"자장",hanja:"磁場",id:3140},{english:"magnetic field",hangul:"자계",hanja:"磁界",id:3141},{english:"magnetic flux",hangul:"자속",hanja:"磁束",id:3142},{english:"magnetic needle",hangul:"자침",hanja:"磁針",id:3143},{english:"magnetism",hangul:"자기",hanja:"磁氣",id:3144,freq_deg:111},{english:"magnetism",hangul:"자력",hanja:"磁力",id:3145},{english:"magnetite",hangul:"자철광",hanja:"磁鐵鑛",id:3146},{english:"magnification",hangul:"확대",hanja:"擴大",id:3147},{english:"magnification",hangul:"배율",hanja:"倍率",id:3148},{english:"magnolia",hangul:"목련",hanja:"木蓮",id:3149},{english:"mahjong",hangul:"마작",hanja:"麻雀",id:3150},{english:"maiden",hangul:"처녀",hanja:"處女",id:3151,freq_deg:2217},{english:"mailing",hangul:"우송",hanja:"郵送",id:3152},{english:"main force",hangul:"주력",hanja:"主力",id:3153},{english:"main line",hangul:"간선",hanja:"幹線",id:3154},{english:"main line",hangul:"본선",hanja:"本線",id:3155},{english:"main line",hangul:"간선",hanja:"幹線",id:3156},{english:"maintenance",hangul:"유지",hanja:"維持",id:3157},{english:"maintenance",hangul:"보존",hanja:"保存",id:3158,freq_deg:3653},{english:"major premise",hangul:"대전제",hanja:"大前提",id:3159},{english:"major scale",hangul:"장음계",hanja:"長音階",id:3160},{english:"majority",hangul:"성년",hanja:"成年",id:3161},{english:"make",hangul:"성공하다",hanja:"成功",id:3162,freq_deg:1804},{english:"malice",hangul:"악의",hanja:"惡意",id:3163},{english:"malleability",hangul:"전성",hanja:"展性",id:3164},{english:"malt",hangul:"맥아",hanja:"麥芽",id:3165},{english:"mammary gland",hangul:"유선",hanja:"乳腺",id:3166},{english:"management",hangul:"취급",hanja:"取扱",id:3167},{english:"management",hangul:"경영",hanja:"經營",id:3168,freq_deg:917},{english:"manager",hangul:"지배인",hanja:"支配人",id:3169},{english:"manager",hangul:"경영자",hanja:"經營者",id:3170},{english:"manager",hangul:"관리인",hanja:"管理人",id:3171},{english:"manatee",hangul:"해우",hanja:"海牛",id:3172},{english:"manifestation",hangul:"표명",hanja:"表明",id:3173},{english:"manipulate",hangul:"조종하다",hanja:"操縱",id:3174},{english:"mankind",hangul:"인류",hanja:"人類",id:3175,freq_deg:745},{english:"manner",hangul:"방법",hanja:"方法",id:3176,freq_deg:159},{english:"manner",hangul:"태도",hanja:"態度",id:3177,freq_deg:665},{english:"manor",hangul:"장원",hanja:"莊園",id:3178},{english:"manslayer",hangul:"살인자",hanja:"殺人者",id:3179},{english:"mantissa",hangul:"가수",hanja:"假數",id:3180,freq_deg:1742},{english:"mantra",hangul:"진언",hanja:"眞言",id:3181},{english:"manual",hangul:"편람",hanja:"便覽",id:3182},{english:"manufacture",hangul:"제작",hanja:"製作",id:3183,freq_deg:1923},{english:"manufacture",hangul:"제조하다",hanja:"製造",id:3184},{english:"manufacturer",hangul:"생산자",hanja:"生産者",id:3185,freq_deg:3283},{english:"map",hangul:"지도",hanja:"地圖",id:3186,freq_deg:2054},{english:"marble",hangul:"대리석",hanja:"大理石",id:3187},{english:"marcasite",hangul:"백철광",hanja:"白鐵鑛",id:3188},{english:"march",hangul:"행진",hanja:"行進",id:3189},{english:"march",hangul:"행군",hanja:"行軍",id:3190},{english:"margin",hangul:"난외",hanja:"欄外",id:3191},{english:"margin",hangul:"여지",hanja:"餘地",id:3192},{english:"margin",hangul:"여유",hanja:"餘裕",id:3193,freq_deg:1736},{english:"marine products",hangul:"해산물",hanja:"海産物",id:3194},{english:"mark",hangul:"목표",hanja:"目標",id:3195,freq_deg:918},{english:"mark",hangul:"부호",hanja:"符號",id:3196},{english:"mark",hangul:"점수",hanja:"點數",id:3197,freq_deg:3016},{english:"market",hangul:"시장",hanja:"市場",id:3198,freq_deg:4146},{english:"market",hangul:"판로",hanja:"販路",id:3199},{english:"market price",hangul:"시가",hanja:"市價",id:3200},{english:"marketplace",hangul:"시장",hanja:"市場",id:3201,freq_deg:4146},{english:"marquess",hangul:"후작",hanja:"侯爵",id:3202},{english:"marriage",hangul:"결혼",hanja:"結婚",id:3203,freq_deg:534},{english:"marrow",hangul:"골수",hanja:"骨髓",id:3204},{english:"marsh",hangul:"소택",hanja:"沼澤",id:3205},{english:"martial art",hangul:"무도",hanja:"武道",id:3206},{english:"martial art",hangul:"무술",hanja:"武術",id:3207},{english:"martial law",hangul:"계엄령",hanja:"戒嚴令",id:3208},{english:"mason",hangul:"석공",hanja:"石工",id:3209},{english:"masquerade",hangul:"가장",hanja:"假裝",id:3210,freq_deg:2920},{english:"masquerade",hangul:"가장하다",hanja:"假裝",id:3211},{english:"mass",hangul:"집단",hanja:"集團",id:3212,freq_deg:492},{english:"massage",hangul:"안마",hanja:"按摩",id:3213},{english:"master",hangul:"선생",hanja:"先生",id:3214,freq_deg:463},{english:"master",hangul:"명인",hanja:"名人",id:3215},{english:"master",hangul:"지배하다",hanja:"支配",id:3216,freq_deg:1701},{english:"masterpiece",hangul:"걸작",hanja:"傑作",id:3217},{english:"masterpiece",hangul:"명작",hanja:"名作",id:3218},{english:"mastery",hangul:"숙달",hanja:"熟達",id:3219},{english:"masturbation",hangul:"수음",hanja:"手淫",id:3220},{english:"match",hangul:"시합",hanja:"試合",id:3221,freq_deg:4355},{english:"material",hangul:"물질적인",hanja:"物質的",id:3222},{english:"material",hangul:"자료",hanja:"資料",id:3223,freq_deg:455},{english:"materialization",hangul:"실현",hanja:"實現",id:3224,freq_deg:2973},{english:"mathematic",hangul:"수리적인",hanja:"數理",id:3225},{english:"mathematician",hangul:"수학자",hanja:"數學者",id:3226},{english:"mathematics",hangul:"수학",hanja:"數學",id:3227,freq_deg:4691},{english:"mating",hangul:"교배",hanja:"交配",id:3228},{english:"matriculation",hangul:"입학",hanja:"入學",id:3229,freq_deg:1751},{english:"matter",hangul:"내용",hanja:"內容",id:3230,freq_deg:190},{english:"maturity",hangul:"성숙",hanja:"成熟",id:3231},{english:"maximum",hangul:"최대한도",hanja:"最大限度",id:3232},{english:"mayor",hangul:"시장",hanja:"市長",id:3233,freq_deg:4146},{english:"maze",hangul:"미로",hanja:"迷路",id:3234},{english:"meal ticket",hangul:"식권",hanja:"食券",id:3235},{english:"meaning",hangul:"의미",hanja:"意味",id:3236,freq_deg:205},{english:"meaning",hangul:"의의",hanja:"意義",id:3237},{english:"meanness",hangul:"야비",hanja:"野卑",id:3238},{english:"measure",hangul:"수단",hanja:"手段",id:3239,freq_deg:1124},{english:"measurement",hangul:"측량",hanja:"測量",id:3240},{english:"measurement",hangul:"측정",hanja:"測定",id:3241},{english:"mechanics",hangul:"역학",hanja:"力學",id:3242},{english:"mechanism",hangul:"기구",hanja:"機構",id:3243,freq_deg:2703},{english:"medal",hangul:"상패",hanja:"賞牌",id:3244},{english:"medal",hangul:"기장",hanja:"記章",id:3245},{english:"medal",hangul:"훈장",hanja:"勳章",id:3246},{english:"median point",hangul:"중점",hanja:"中點",id:3247},{english:"mediation",hangul:"조정",hanja:"調停",id:3248,freq_deg:3177},{english:"mediation",hangul:"중재",hanja:"仲裁",id:3249},{english:"mediation",hangul:"화해",hanja:"和解",id:3250},{english:"medicine",hangul:"의술",hanja:"醫術",id:3251},{english:"medicine",hangul:"의학",hanja:"醫學",id:3252,freq_deg:2399},{english:"meditation",hangul:"명상",hanja:"瞑想",id:3253},{english:"meditation",hangul:"묵상",hanja:"默想",id:3254},{english:"medium",hangul:"매질",hanja:"媒質",id:3255},{english:"meeting",hangul:"회합",hanja:"會合",id:3256},{english:"meeting place",hangul:"회장",hanja:"會場",id:3257,freq_deg:543},{english:"melody",hangul:"해조",hanja:"諧調",id:3258},{english:"melody",hangul:"선율",hanja:"旋律",id:3259},{english:"melting",hangul:"용해",hanja:"鎔解",id:3260},{english:"member",hangul:"구성원",hanja:"構成員",id:3261},{english:"memorial",hangul:"기념하는",hanja:"記念",id:3262},{english:"memory",hangul:"기억",hanja:"記憶",id:3263,freq_deg:762},{english:"memory",hangul:"기념",hanja:"記念",id:3264,freq_deg:3686},{english:"menace",hangul:"협박",hanja:"脅迫",id:3265},{english:"menace",hangul:"협박하다",hanja:"脅迫",id:3266},{english:"menacing",hangul:"협박적인",hanja:"脅迫的",id:3267},{english:"meninges",hangul:"뇌막",hanja:"腦膜",id:3268},{english:"menopause",hangul:"폐경기",hanja:"閉經期",id:3269},{english:"mental arithmetic",hangul:"암산",hanja:"暗算",id:3270},{english:"mentalism",hangul:"유심론",hanja:"唯心論",id:3271},{english:"mercantilism",hangul:"중상주의",hanja:"重商主義",id:3272},{english:"merchandise",hangul:"상품",hanja:"商品",id:3273,freq_deg:859},{english:"merchant",hangul:"상인",hanja:"商人",id:3274,freq_deg:3201},{english:"merchant ship",hangul:"상선",hanja:"商船",id:3275},{english:"mercy",hangul:"자비",hanja:"慈悲",id:3276},{english:"mercy",hangul:"연민",hanja:"憐愍",id:3277},{english:"meridian",hangul:"자오선",hanja:"子午線",id:3278},{english:"merit",hangul:"가치",hanja:"價値",id:3279,freq_deg:490},{english:"merit",hangul:"공적",hanja:"功績",id:3280},{english:"meson",hangul:"중간자",hanja:"中間子",id:3281},{english:"messenger",hangul:"사자",hanja:"使者",id:3282,freq_deg:5234},{english:"messiah",hangul:"구세주",hanja:"救世主",id:3283},{english:"metabolism",hangul:"신진대사",hanja:"新陳代謝",id:3284},{english:"metamorphosis",hangul:"변형",hanja:"變形",id:3285},{english:"metamorphosis",hangul:"변태",hanja:"變態",id:3286},{english:"metastasis",hangul:"전이",hanja:"轉移",id:3287},{english:"meteor",hangul:"유성",hanja:"流星",id:3288},{english:"meteorite",hangul:"운석",hanja:"隕石",id:3289},{english:"method",hangul:"방법",hanja:"方法",id:3290,freq_deg:159},{english:"method",hangul:"방식",hanja:"方式",id:3291,freq_deg:404},{english:"method",hangul:"질서",hanja:"秩序",id:3292,freq_deg:539},{english:"metonymy",hangul:"환유",hanja:"換喩",id:3293},{english:"mica",hangul:"운모",hanja:"雲母",id:3294},{english:"microbe",hangul:"미생물",hanja:"微生物",id:3295},{english:"microcosm",hangul:"소우주",hanja:"小宇宙",id:3296},{english:"micrometer",hangul:"측미계",hanja:"測微計",id:3297},{english:"midbrain",hangul:"중뇌",hanja:"中腦",id:3298},{english:"middle ear",hangul:"중이",hanja:"中耳",id:3299},{english:"midwife",hangul:"산파",hanja:"産婆",id:3300},{english:"mien",hangul:"풍채",hanja:"風采",id:3301},{english:"migraine",hangul:"편두통",hanja:"偏頭痛",id:3302},{english:"migration",hangul:"이주",hanja:"移住",id:3303},{english:"mild steel",hangul:"연강",hanja:"軟鋼",id:3304},{english:"milestone",hangul:"이정표",hanja:"里程標",id:3305},{english:"militant",hangul:"투사",hanja:"鬪士",id:3306},{english:"military affairs",hangul:"군사",hanja:"軍事",id:3307,freq_deg:2736},{english:"military government",hangul:"군정",hanja:"軍政",id:3308},{english:"military law",hangul:"군법",hanja:"軍法",id:3309},{english:"military service",hangul:"병역",hanja:"兵役",id:3310},{english:"milk",hangul:"우유",hanja:"牛乳",id:3311,freq_deg:1790},{english:"milk sugar",hangul:"유당",hanja:"乳糖",id:3312},{english:"mind",hangul:"정신",hanja:"精神",id:3313,freq_deg:287},{english:"mind reading",hangul:"독심술",hanja:"讀心術",id:3314},{english:"mind's eye",hangul:"심안",hanja:"心眼",id:3315},{english:"miner",hangul:"갱부",hanja:"坑夫",id:3316},{english:"mineral",hangul:"광물",hanja:"鑛物",id:3317},{english:"mineral oil",hangul:"광유",hanja:"鑛油",id:3318},{english:"mining",hangul:"채광",hanja:"採鑛",id:3319},{english:"ministry",hangul:"성직",hanja:"聖職",id:3320},{english:"mintage",hangul:"조폐",hanja:"造幣",id:3321},{english:"minuend",hangul:"피감수",hanja:"被減數",id:3322},{english:"miracle",hangul:"기적",hanja:"奇蹟",id:3323,freq_deg:4257},{english:"miracle drug",hangul:"영약",hanja:"靈藥",id:3324},{english:"misappropriation",hangul:"남용",hanja:"濫用",id:3325},{english:"miscalculation",hangul:"오산",hanja:"誤算",id:3326},{english:"miscarriage",hangul:"유산",hanja:"流産",id:3327,freq_deg:4072},{english:"misconstruction",hangul:"곡해",hanja:"曲解",id:3328},{english:"miser",hangul:"수전노",hanja:"守錢奴",id:3329},{english:"misery",hangul:"비참",hanja:"悲慘",id:3330},{english:"misfortune",hangul:"불운",hanja:"不運",id:3331},{english:"misfortune",hangul:"불행",hanja:"不幸",id:3332,freq_deg:3118},{english:"misfortune",hangul:"재난",hanja:"災難",id:3333},{english:"misgovernment",hangul:"악정",hanja:"惡政",id:3334},{english:"misgovernment",hangul:"실정",hanja:"失政",id:3335,freq_deg:1870},{english:"misinformation",hangul:"오보",hanja:"誤報",id:3336},{english:"misinformation",hangul:"오전",hanja:"誤傳",id:3337,freq_deg:1055},{english:"misprint",hangul:"오식",hanja:"誤植",id:3338},{english:"mission",hangul:"사명",hanja:"使命",id:3339},{english:"mistress",hangul:"주부",hanja:"主婦",id:3340,freq_deg:1553},{english:"mistress",hangul:"애인",hanja:"愛人",id:3341,freq_deg:2893},{english:"mistress",hangul:"정부",hanja:"情婦",id:3342,freq_deg:120},{english:"misunderstanding",hangul:"오해",hanja:"誤解",id:3343,freq_deg:2899},{english:"mixture",hangul:"혼합",hanja:"混合",id:3344},{english:"mob",hangul:"군중",hanja:"群衆",id:3345},{english:"mobilization",hangul:"동원",hanja:"動員",id:3346},{english:"mockery",hangul:"조롱",hanja:"嘲弄",id:3347},{english:"model",hangul:"모형",hanja:"模型",id:3348},{english:"model",hangul:"원형",hanja:"原型",id:3349},{english:"model",hangul:"모범",hanja:"模範",id:3350,freq_deg:3795},{english:"moderation",hangul:"중용",hanja:"中庸",id:3351},{english:"modern",hangul:"근대적인",hanja:"近代的",id:3352},{english:"modern times",hangul:"현대",hanja:"現代",id:3353,freq_deg:493},{english:"modesty",hangul:"겸양",hanja:"謙讓",id:3354},{english:"modulation",hangul:"억양",hanja:"抑揚",id:3355},{english:"moisture",hangul:"습기",hanja:"濕氣",id:3356,freq_deg:4808},{english:"moisture",hangul:"수분",hanja:"水分",id:3357},{english:"molasses",hangul:"당밀",hanja:"糖蜜",id:3358},{english:"molecule",hangul:"분자",hanja:"分子",id:3359},{english:"molester",hangul:"치한",hanja:"痴漢",id:3360},{english:"moment",hangul:"순간",hanja:"瞬間",id:3361,freq_deg:474},{english:"momentum",hangul:"여세",hanja:"餘勢",id:3362},{english:"monarch",hangul:"군주",hanja:"君主",id:3363},{english:"monocle",hangul:"단안경",hanja:"單眼鏡",id:3364},{english:"monopolistic",hangul:"독점적인",hanja:"獨占的",id:3365},{english:"monotony",hangul:"단음",hanja:"單音",id:3366},{english:"monotony",hangul:"단조",hanja:"單調",id:3367},{english:"monster",hangul:"괴물",hanja:"怪物",id:3368},{english:"moral",hangul:"수신",hanja:"修身",id:3369},{english:"morality",hangul:"도의",hanja:"道義",id:3370},{english:"morality",hangul:"도의",hanja:"道義",id:3371},{english:"morning",hangul:"오전",hanja:"午前",id:3372,freq_deg:1055},{english:"mortgage",hangul:"저당",hanja:"抵當",id:3373},{english:"mortification",hangul:"고행",hanja:"苦行",id:3374},{english:"most favored nation",hangul:"최혜국",hanja:"最惠國",id:3375},{english:"mother ship",hangul:"모함",hanja:"母艦",id:3376},{english:"motion",hangul:"동작",hanja:"動作",id:3377},{english:"motive",hangul:"동기",hanja:"動機",id:3378},{english:"motive power",hangul:"원동력",hanja:"原動力",id:3379},{english:"motto",hangul:"표어",hanja:"標語",id:3380},{english:"mount",hangul:"대지",hanja:"臺紙",id:3381},{english:"mountain range",hangul:"산맥",hanja:"山脈",id:3382},{english:"mountain system",hangul:"산계",hanja:"山系",id:3383},{english:"movement",hangul:"동작",hanja:"動作",id:3384},{english:"mucilage",hangul:"점액",hanja:"粘液",id:3385},{english:"mucous membrane",hangul:"점막",hanja:"粘膜",id:3386},{english:"mucus",hangul:"점액",hanja:"粘液",id:3387},{english:"multiple",hangul:"배수",hanja:"倍數",id:3388},{english:"multiple cropping",hangul:"다모작",hanja:"多毛作",id:3389},{english:"multiplier",hangul:"승수",hanja:"乘數",id:3390},{english:"multiply",hangul:"번식하다",hanja:"繁殖",id:3391},{english:"murder",hangul:"살인",hanja:"殺人",id:3392,freq_deg:2467},{english:"murderer",hangul:"살인자",hanja:"殺人者",id:3393},{english:"muscle",hangul:"근육",hanja:"筋肉",id:3394,freq_deg:2293},{english:"museum",hangul:"박물관",hanja:"博物館",id:3395,freq_deg:1339},{english:"music",hangul:"음악",hanja:"音樂",id:3396,freq_deg:521},{english:"musk",hangul:"사향",hanja:"麝香",id:3397},{english:"muster",hangul:"점호",hanja:"點呼",id:3398},{english:"muster",hangul:"점호하다",hanja:"點呼",id:3399},{english:"mutation",hangul:"변화",hanja:"變化",id:3400,freq_deg:265},{english:"mutation",hangul:"변종",hanja:"變種",id:3401},{english:"mutiny",hangul:"반란",hanja:"反亂",id:3402},{english:"muzzle",hangul:"총구",hanja:"銃口",id:3403},{english:"mystery",hangul:"신비",hanja:"神秘",id:3404,freq_deg:3985},{english:"myth",hangul:"신화",hanja:"神話",id:3405,freq_deg:1389},{english:"naivete",hangul:"소박",hanja:"素朴",id:3406},{english:"naked eye",hangul:"육안",hanja:"肉眼",id:3407},{english:"naked eye",hangul:"나안",hanja:"裸眼",id:3408},{english:"name",hangul:"지명하다",hanja:"指名",id:3409},{english:"narrowness",hangul:"편협",hanja:"偏狹",id:3410},{english:"nasal",hangul:"비음",hanja:"鼻音",id:3411},{english:"nation",hangul:"민족",hanja:"民族",id:3412,freq_deg:299},{english:"national debt",hangul:"국채",hanja:"國債",id:3413},{english:"national flag",hangul:"국기",hanja:"國旗",id:3414,freq_deg:4907},{english:"nationality",hangul:"국적",hanja:"國籍",id:3415,freq_deg:3783},{english:"native",hangul:"토인",hanja:"土人",id:3416},{english:"natural history",hangul:"박물학",hanja:"博物學",id:3417},{english:"natural law",hangul:"천리",hanja:"天理",id:3418},{english:"naturalization",hangul:"귀화",hanja:"歸化",id:3419},{english:"naturally",hangul:"물론",hanja:"勿論",id:3420,freq_deg:191},{english:"nature",hangul:"천성",hanja:"天性",id:3421},{english:"nature",hangul:"성질",hanja:"性質",id:3422,freq_deg:2468},{english:"naval station",hangul:"군항",hanja:"軍港",id:3423},{english:"navigate",hangul:"항해하다",hanja:"航海",id:3424},{english:"navy",hangul:"해군",hanja:"海軍",id:3425,freq_deg:3224},{english:"neap tide",hangul:"소조",hanja:"小潮",id:3426},{english:"nebula",hangul:"성운",hanja:"星雲",id:3427},{english:"negation",hangul:"부인",hanja:"否認",id:3428,freq_deg:4738},{english:"negation",hangul:"부정",hanja:"否定",id:3429,freq_deg:1023},{english:"negative",hangul:"소극적인",hanja:"消極",id:3430},{english:"negatron",hangul:"음전자",hanja:"陰電子",id:3431},{english:"neglect",hangul:"무시하다",hanja:"無視",id:3432,freq_deg:1786},{english:"negligence",hangul:"태만",hanja:"怠慢",id:3433},{english:"negotiation",hangul:"협상",hanja:"協商",id:3434},{english:"neophyte",hangul:"신참자",hanja:"新參者",id:3435},{english:"nerve",hangul:"신경",hanja:"神經",id:3436},{english:"nerve",hangul:"용기",hanja:"勇氣",id:3437,freq_deg:3996},{english:"nerve",hangul:"담력",hanja:"膽力",id:3438},{english:"neutralize",hangul:"중화하다",hanja:"中和",id:3439},{english:"neutron",hangul:"중성자",hanja:"中性子",id:3440},{english:"new order",hangul:"신체제",hanja:"新體制",id:3441},{english:"news",hangul:"소식",hanja:"消息",id:3442,freq_deg:955},{english:"nightmare",hangul:"악몽",hanja:"惡夢",id:3443,freq_deg:3422},{english:"nighttime",hangul:"야간",hanja:"夜間",id:3444,freq_deg:4211},{english:"noble",hangul:"귀족",hanja:"貴族",id:3445},{english:"noctambulist",hangul:"몽유병자",hanja:"夢遊病者",id:3446},{english:"nocturne",hangul:"야상곡",hanja:"夜想曲",id:3447},{english:"nom de plume",hangul:"아호",hanja:"雅號",id:3448},{english:"nonconfidence",hangul:"불신임",hanja:"不信任",id:3449},{english:"nonprofit",hangul:"비영리적인",hanja:"非營利的",id:3450},{english:"noon",hangul:"정오",hanja:"正午",id:3451,freq_deg:4887},{english:"normal",hangul:"전형적인",hanja:"典型",id:3452},{english:"normalcy",hangul:"정상",hanja:"正常",id:3453,freq_deg:3823},{english:"normalization",hangul:"정상화",hanja:"正常化",id:3454},{english:"normative",hangul:"규범적인",hanja:"規範的",id:3455},{english:"north",hangul:"북부",hanja:"北部",id:3456,freq_deg:2887},{english:"northward",hangul:"북방",hanja:"北方",id:3457},{english:"nose dive",hangul:"급강하",hanja:"急降下",id:3458},{english:"note",hangul:"수기",hanja:"手記",id:3459},{english:"note",hangul:"각서",hanja:"覺書",id:3460},{english:"note",hangul:"어조",hanja:"語調",id:3461},{english:"note",hangul:"지폐",hanja:"紙幣",id:3462,freq_deg:5099},{english:"notebook",hangul:"수첩",hanja:"手帖",id:3463},{english:"notice",hangul:"통지",hanja:"通知",id:3464},{english:"notice",hangul:"고지",hanja:"告知",id:3465},{english:"notice",hangul:"주목",hanja:"注目",id:3466},{english:"notice",hangul:"고시",hanja:"告示",id:3467},{english:"notice",hangul:"주목하다",hanja:"注目",id:3468},{english:"notice",hangul:"논평하다",hanja:"論評",id:3469},{english:"notion",hangul:"관념",hanja:"觀念",id:3470,freq_deg:1893},{english:"notion",hangul:"개념",hanja:"槪念",id:3471},{english:"nova",hangul:"신성",hanja:"新星",id:3472},{english:"now",hangul:"방금",hanja:"方今",id:3473,freq_deg:2418},{english:"nowadays",hangul:"현대",hanja:"現代",id:3474,freq_deg:493},{english:"nuclear fission",hangul:"핵분열",hanja:"核分裂",id:3475},{english:"nuclear fusion",hangul:"핵융합",hanja:"核融合",id:3476},{english:"nuclear test",hangul:"핵실험",hanja:"核實驗",id:3477},{english:"numeral",hangul:"수사",hanja:"數詞",id:3478},{english:"nurse",hangul:"간호하다",hanja:"看護",id:3479},{english:"nurse",hangul:"간호하다",hanja:"看護",id:3480},{english:"nursery",hangul:"묘상",hanja:"苗床",id:3481},{english:"nursery rhyme",hangul:"동요",hanja:"童謠",id:3482},{english:"nursing",hangul:"간호하는",hanja:"看護",id:3483},{english:"nursing",hangul:"육아",hanja:"育兒",id:3484},{english:"nursing",hangul:"보육",hanja:"保育",id:3485},{english:"nut",hangul:"견과",hanja:"堅果",id:3486},{english:"obedience",hangul:"복종",hanja:"服從",id:3487},{english:"obesity",hangul:"비만",hanja:"肥滿",id:3488,freq_deg:5068},{english:"obesity",hangul:"비대",hanja:"肥大",id:3489},{english:"object",hangul:"물체",hanja:"物體",id:3490,freq_deg:1287},{english:"objection",hangul:"반대",hanja:"反對",id:3491,freq_deg:1078},{english:"objection",hangul:"이의",hanja:"異議",id:3492},{english:"objective",hangul:"목표",hanja:"目標",id:3493,freq_deg:918},{english:"objector",hangul:"반대자",hanja:"反對者",id:3494},{english:"obscenity",hangul:"외설",hanja:"猥褻",id:3495},{english:"obscurity",hangul:"불명료",hanja:"不明瞭",id:3496},{english:"obscurity",hangul:"미천",hanja:"微賤",id:3497},{english:"observance",hangul:"준수",hanja:"遵守",id:3498},{english:"observation",hangul:"주목",hanja:"注目",id:3499},{english:"observation",hangul:"감시",hanja:"監視",id:3500},{english:"observer",hangul:"관찰자",hanja:"觀察者",id:3501},{english:"obstinacy",hangul:"완고",hanja:"頑固",id:3502},{english:"obstruction",hangul:"방해",hanja:"妨害",id:3503,freq_deg:3456},{english:"occupation",hangul:"점령",hanja:"占領",id:3504},{english:"occupation",hangul:"직업",hanja:"職業",id:3505,freq_deg:1392},{english:"occupier",hangul:"거주자",hanja:"居住者",id:3506},{english:"occurrence",hangul:"발생",hanja:"發生",id:3507,freq_deg:2392},{english:"ocean",hangul:"대양",hanja:"大洋",id:3508},{english:"octagon",hangul:"팔변형",hanja:"八邊形",id:3509},{english:"odorless",hangul:"무취",hanja:"無臭",id:3510},{english:"offer",hangul:"제공",hanja:"提供",id:3511,freq_deg:3433},{english:"offer",hangul:"제공하다",hanja:"提供",id:3512,freq_deg:1269},{english:"offering",hangul:"헌납",hanja:"獻納",id:3513},{english:"office",hangul:"임무",hanja:"任務",id:3514,freq_deg:3128},{english:"offspring",hangul:"자손",hanja:"子孫",id:3515},{english:"oil",hangul:"석유",hanja:"石油",id:3516,freq_deg:2297},{english:"ointment",hangul:"연고",hanja:"軟膏",id:3517},{english:"old soldier",hangul:"노병",hanja:"老兵",id:3518},{english:"old woman",hangul:"노파",hanja:"老婆",id:3519},{english:"onanism",hangul:"수음",hanja:"手淫",id:3520},{english:"onlooker",hangul:"방관자",hanja:"傍觀者",id:3521},{english:"open air",hangul:"야외",hanja:"野外",id:3522,freq_deg:4438},{english:"opening",hangul:"개장",hanja:"開場",id:3523},{english:"opening",hangul:"개통",hanja:"開通",id:3524},{english:"opera",hangul:"가극",hanja:"歌劇",id:3525},{english:"operate",hangul:"작용하다",hanja:"作用",id:3526,freq_deg:1379},{english:"operation",hangul:"작용",hanja:"作用",id:3527,freq_deg:957},{english:"opium",hangul:"아편",hanja:"阿片",id:3528},{english:"opponent",hangul:"대립하는",hanja:"對立",id:3529},{english:"opportunity",hangul:"기회",hanja:"機會",id:3530,freq_deg:693},{english:"opposer",hangul:"반대자",hanja:"反對者",id:3531},{english:"opposition",hangul:"반대",hanja:"反對",id:3532,freq_deg:1078},{english:"opposition",hangul:"저항",hanja:"抵抗",id:3533},{english:"opposition",hangul:"적대",hanja:"敵對",id:3534},{english:"opposition",hangul:"대항",hanja:"對抗",id:3535},{english:"opposition",hangul:"대립",hanja:"對立",id:3536},{english:"oppression",hangul:"압박",hanja:"壓迫",id:3537},{english:"oppression",hangul:"압제",hanja:"壓制",id:3538},{english:"oppressive",hangul:"압제적인",hanja:"壓制的",id:3539},{english:"oppressor",hangul:"압제자",hanja:"壓制者",id:3540},{english:"optic",hangul:"광학",hanja:"光學",id:3541},{english:"optics",hangul:"광학",hanja:"光學",id:3542},{english:"option",hangul:"선택권",hanja:"選擇權",id:3543},{english:"orb",hangul:"구체",hanja:"球體",id:3544},{english:"order",hangul:"명령",hanja:"命令",id:3545,freq_deg:2008},{english:"order",hangul:"순서",hanja:"順序",id:3546,freq_deg:1695},{english:"order",hangul:"훈장",hanja:"勳章",id:3547},{english:"order",hangul:"명령하다",hanja:"命令",id:3548},{english:"order",hangul:"주문하다",hanja:"注文",id:3549,freq_deg:4082},{english:"orderly",hangul:"전령",hanja:"傳令",id:3550},{english:"ordinarily",hangul:"보통",hanja:"普通",id:3551,freq_deg:1576},{english:"ore",hangul:"광석",hanja:"鑛石",id:3552},{english:"ore",hangul:"원광",hanja:"原鑛",id:3553},{english:"organization",hangul:"구성",hanja:"構成",id:3554,freq_deg:768},{english:"organization",hangul:"편성",hanja:"編成",id:3555},{english:"organization",hangul:"체제",hanja:"體制",id:3556},{english:"organization",hangul:"단체",hanja:"團體",id:3557,freq_deg:445},{english:"organization",hangul:"기구",hanja:"機構",id:3558,freq_deg:2703},{english:"origin",hangul:"기원",hanja:"起原",id:3559,freq_deg:3646},{english:"originality",hangul:"창의",hanja:"創意",id:3560},{english:"originally",hangul:"원래",hanja:"元來",id:3561,freq_deg:1038},{english:"originator",hangul:"창시자",hanja:"創始者",id:3562},{english:"originator",hangul:"시조",hanja:"始祖",id:3563},{english:"ornament",hangul:"장식",hanja:"裝飾",id:3564,freq_deg:2857},{english:"ornament",hangul:"장식",hanja:"裝飾",id:3565,freq_deg:2857},{english:"orphan",hangul:"고아",hanja:"孤兒",id:3566},{english:"oscillation",hangul:"진동",hanja:"振動",id:3567,freq_deg:4613},{english:"oscillator",hangul:"발진기",hanja:"發振器",id:3568},{english:"ostentation",hangul:"과시",hanja:"誇示",id:3569},{english:"ostrich",hangul:"타조",hanja:"駝鳥",id:3570},{english:"outfield",hangul:"외야",hanja:"外野",id:3571},{english:"outlaw",hangul:"무법자",hanja:"無法者",id:3572},{english:"outlet",hangul:"출구",hanja:"出口",id:3573,freq_deg:4469},{english:"outlet",hangul:"판로",hanja:"販路",id:3574},{english:"outline",hangul:"대요",hanja:"大要",id:3575},{english:"outline",hangul:"개략",hanja:"槪略",id:3576},{english:"outlook",hangul:"전망",hanja:"展望",id:3577,freq_deg:1324},{english:"outpost",hangul:"전초",hanja:"前哨",id:3578},{english:"outset",hangul:"최초",hanja:"最初",id:3579,freq_deg:1040},{english:"outsider",hangul:"국외자",hanja:"局外者",id:3580},{english:"outsider",hangul:"문외한",hanja:"門外漢",id:3581},{english:"outskirts",hangul:"교외",hanja:"郊外",id:3582,freq_deg:5300},{english:"outskirts",hangul:"주변",hanja:"周邊",id:3583,freq_deg:581},{english:"overcoat",hangul:"외투",hanja:"外套",id:3584},{english:"overcome",hangul:"압도하다",hanja:"壓倒",id:3585},{english:"overmaster",hangul:"압도하다",hanja:"壓倒",id:3586},{english:"overpass",hangul:"육교",hanja:"陸橋",id:3587},{english:"overpower",hangul:"압도하다",hanja:"壓倒",id:3588},{english:"overseer",hangul:"감독자",hanja:"監督者",id:3589},{english:"overthrow",hangul:"타도",hanja:"打倒",id:3590},{english:"overthrow",hangul:"타도하다",hanja:"打倒",id:3591},{english:"overture",hangul:"서곡",hanja:"序曲",id:3592},{english:"overturn",hangul:"타도하다",hanja:"打倒",id:3593},{english:"overwhelm",hangul:"압도하다",hanja:"壓倒",id:3594},{english:"overwhelm",hangul:"압도적인",hanja:"壓倒",id:3595},{english:"overwhelming",hangul:"압도적인",hanja:"壓倒",id:3596},{english:"overwork",hangul:"과로",hanja:"過勞",id:3597},{english:"overwork",hangul:"과로하다",hanja:"過勞",id:3598},{english:"oviduct",hangul:"수란관",hanja:"輸卵管",id:3599},{english:"ovulation",hangul:"배란",hanja:"排卵",id:3600},{english:"ovule",hangul:"난자",hanja:"卵子",id:3601},{english:"ovum",hangul:"난자",hanja:"卵子",id:3602},{english:"owner",hangul:"소유자",hanja:"所有者",id:3603,freq_deg:2544},{english:"oxalic acid",hangul:"수산",hanja:"蓚酸",id:3604},{english:"oxcart",hangul:"우차",hanja:"牛車",id:3605},{english:"oxidation",hangul:"산화",hanja:"酸化",id:3606},{english:"oxygen",hangul:"산소",hanja:"酸素",id:3607,freq_deg:2296},{english:"pacification",hangul:"진정",hanja:"鎭靜",id:3608},{english:"pact",hangul:"협정",hanja:"協定",id:3609},{english:"pact",hangul:"조약",hanja:"條約",id:3610},{english:"paean",hangul:"찬가",hanja:"讚歌",id:3611},{english:"pain",hangul:"고통",hanja:"苦痛",id:3612,freq_deg:879},{english:"paint",hangul:"도료",hanja:"塗料",id:3613},{english:"pair",hangul:"부부",hanja:"夫婦",id:3614,freq_deg:871},{english:"palace",hangul:"궁전",hanja:"宮殿",id:3615},{english:"palate",hangul:"구개",hanja:"口蓋",id:3616},{english:"palate",hangul:"미각",hanja:"味覺",id:3617},{english:"palm print",hangul:"장문",hanja:"掌紋",id:3618},{english:"palpation",hangul:"촉진",hanja:"觸診",id:3619},{english:"palpitation",hangul:"동계",hanja:"動悸",id:3620},{english:"palsy",hangul:"중풍",hanja:"中風",id:3621},{english:"palsy",hangul:"마비",hanja:"痲痺",id:3622},{english:"pancreas",hangul:"췌장",hanja:"膵臟",id:3623},{english:"pandemonium",hangul:"복마전",hanja:"伏魔殿",id:3624},{english:"pangolin",hangul:"천산갑",hanja:"穿山甲",id:3625},{english:"panic",hangul:"공황",hanja:"恐慌",id:3626},{english:"pantheism",hangul:"범신론",hanja:"汎神論",id:3627},{english:"pantomime",hangul:"무언극",hanja:"無言劇",id:3628},{english:"paper money",hangul:"지폐",hanja:"紙幣",id:3629,freq_deg:5099},{english:"par",hangul:"평가",hanja:"平價",id:3630,freq_deg:800},{english:"parabola",hangul:"포물선",hanja:"抛物線",id:3631},{english:"parachute",hangul:"낙하산",hanja:"落下傘",id:3632},{english:"paradise",hangul:"천국",hanja:"天國",id:3633,freq_deg:4832},{english:"paragenesis",hangul:"공생",hanja:"共生",id:3634},{english:"paragraph",hangul:"단락",hanja:"段落",id:3635},{english:"parallax",hangul:"시차",hanja:"視差",id:3636},{english:"parallel",hangul:"위선",hanja:"緯線",id:3637},{english:"parallelism",hangul:"평행",hanja:"平行",id:3638},{english:"paralysis",hangul:"마비",hanja:"痲痺",id:3639},{english:"parcel",hangul:"소포",hanja:"小包",id:3640,freq_deg:5424},{english:"parenthesis",hangul:"괄호",hanja:"括弧",id:3641},{english:"parity",hangul:"평가",hanja:"平價",id:3642,freq_deg:800},{english:"park",hangul:"공원",hanja:"公園",id:3643,freq_deg:2531},{english:"parking lot",hangul:"주차장",hanja:"駐車場",id:3644,freq_deg:3934},{english:"parliament",hangul:"의회",hanja:"議會",id:3645},{english:"parliament",hangul:"국회",hanja:"國會",id:3646,freq_deg:998},{english:"part",hangul:"부분",hanja:"部分",id:3647,freq_deg:263},{english:"part",hangul:"일부",hanja:"一部",id:3648,freq_deg:355},{english:"part",hangul:"역할",hanja:"役割",id:3649,freq_deg:393},{english:"partial",hangul:"부분적인",hanja:"部分的",id:3650},{english:"partiality",hangul:"편애",hanja:"偏愛",id:3651},{english:"participant",hangul:"참가자",hanja:"參加者",id:3652},{english:"participation",hangul:"관여",hanja:"關與",id:3653},{english:"participation",hangul:"참가",hanja:"參加",id:3654,freq_deg:3435},{english:"participation",hangul:"참여",hanja:"參與",id:3655,freq_deg:1451},{english:"participle",hangul:"분사",hanja:"分詞",id:3656},{english:"partition",hangul:"분할",hanja:"分割",id:3657},{english:"passage",hangul:"통행",hanja:"通行",id:3658},{english:"passage",hangul:"통로",hanja:"通路",id:3659,freq_deg:3439},{english:"passenger",hangul:"승객",hanja:"乘客",id:3660,freq_deg:3378},{english:"passenger",hangul:"선객",hanja:"船客",id:3661},{english:"passenger boat",hangul:"객선",hanja:"客船",id:3662},{english:"passenger car",hangul:"객차",hanja:"客車",id:3663},{english:"passenger plane",hangul:"여객기",hanja:"旅客機",id:3664},{english:"passing",hangul:"통행하는",hanja:"通行",id:3665},{english:"passion",hangul:"격정",hanja:"激情",id:3666},{english:"passion",hangul:"정욕",hanja:"情慾",id:3667},{english:"passion",hangul:"정열",hanja:"情熱",id:3668},{english:"passion",hangul:"수난",hanja:"受難",id:3669},{english:"passive voice",hangul:"수동태",hanja:"受動態",id:3670},{english:"passport",hangul:"여권",hanja:"旅券",id:3671,freq_deg:3382},{english:"password",hangul:"암호",hanja:"暗號",id:3672},{english:"pasture",hangul:"목초",hanja:"牧草",id:3673},{english:"pasture",hangul:"방목하다",hanja:"放牧",id:3674},{english:"patella",hangul:"슬개골",hanja:"膝蓋骨",id:3675},{english:"patent",hangul:"특허",hanja:"特許",id:3676},{english:"patent medicine",hangul:"매약",hanja:"賣藥",id:3677},{english:"patriarch",hangul:"가장",hanja:"家長",id:3678,freq_deg:2920},{english:"patriarch",hangul:"족장",hanja:"族長",id:3679},{english:"patriot",hangul:"애국자",hanja:"愛國者",id:3680},{english:"patronage",hangul:"애고",hanja:"愛顧",id:3681},{english:"patronage",hangul:"후원하다",hanja:"後援",id:3682},{english:"patronize",hangul:"후원하다",hanja:"後援",id:3683},{english:"pattern",hangul:"양식",hanja:"樣式",id:3684,freq_deg:5584},{english:"pause",hangul:"휴지",hanja:"休止",id:3685,freq_deg:4482},{english:"pavement",hangul:"포도",hanja:"鋪道",id:3686,freq_deg:5036},{english:"pavement",hangul:"포장",hanja:"鋪裝",id:3687,freq_deg:3440},{english:"paving stone",hangul:"포석",hanja:"鋪石",id:3688},{english:"peace",hangul:"평화",hanja:"平和",id:3689,freq_deg:1210},{english:"peace",hangul:"강화",hanja:"講和",id:3690},{english:"peaceful",hangul:"평화적인",hanja:"平和的",id:3691},{english:"peacock",hangul:"공작",hanja:"孔雀",id:3692},{english:"peanut",hangul:"낙화생",hanja:"落花生",id:3693},{english:"peasant",hangul:"농부",hanja:"農夫",id:3694,freq_deg:2779},{english:"peasant",hangul:"농민",hanja:"農民",id:3695,freq_deg:531},{english:"peculiarity",hangul:"독특",hanja:"獨特",id:3696},{english:"pedantry",hangul:"현학",hanja:"衒學",id:3697},{english:"peddle",hangul:"행상하다",hanja:"行商",id:3698},{english:"pedestal",hangul:"대좌",hanja:"臺座",id:3699},{english:"pedigree",hangul:"계도",hanja:"系圖",id:3700},{english:"pelvis",hangul:"골반",hanja:"骨盤",id:3701},{english:"pen name",hangul:"필명",hanja:"筆名",id:3702},{english:"penal code",hangul:"형법",hanja:"刑法",id:3703},{english:"penal servitude",hangul:"징역",hanja:"懲役",id:3704},{english:"penalty",hangul:"형벌",hanja:"刑罰",id:3705},{english:"penalty",hangul:"벌금",hanja:"罰金",id:3706,freq_deg:3415},{english:"penance",hangul:"고행",hanja:"苦行",id:3707},{english:"pencil",hangul:"연필",hanja:"鉛筆",id:3708,freq_deg:3086},{english:"penetrate",hangul:"관통하다",hanja:"貫通",id:3709},{english:"penetrate",hangul:"간파하다",hanja:"看破",id:3710},{english:"peninsula",hangul:"반도",hanja:"半島",id:3711},{english:"penis",hangul:"음경",hanja:"陰莖",id:3712},{english:"penitence",hangul:"참회",hanja:"懺悔",id:3713},{english:"penmanship",hangul:"서법",hanja:"書法",id:3714},{english:"penmanship",hangul:"습자",hanja:"習字",id:3715},{english:"pension",hangul:"연금",hanja:"年金",id:3716},{english:"peony",hangul:"작약",hanja:"芍藥",id:3717},{english:"people",hangul:"국민",hanja:"國民",id:3718,freq_deg:212},{english:"people",hangul:"인민",hanja:"人民",id:3719},{english:"pep",hangul:"원기",hanja:"元氣",id:3720},{english:"perception",hangul:"지각",hanja:"知覺",id:3721,freq_deg:4009},{english:"percolation",hangul:"여과",hanja:"濾過",id:3722},{english:"perfection",hangul:"완전",hanja:"完全",id:3723,freq_deg:2759},{english:"perfection",hangul:"완성",hanja:"完成",id:3724,freq_deg:2794},{english:"perfection",hangul:"극치",hanja:"極致",id:3725},{english:"perfidy",hangul:"불신",hanja:"不信",id:3726},{english:"perforation",hangul:"천공",hanja:"穿孔",id:3727},{english:"performance",hangul:"연기",hanja:"演技",id:3728,freq_deg:4559},{english:"perfume",hangul:"방향",hanja:"芳香",id:3729,freq_deg:433},{english:"perfume",hangul:"향수",hanja:"香水",id:3730,freq_deg:3528},{english:"perfume",hangul:"향료",hanja:"香料",id:3731},{english:"perianth",hangul:"화피",hanja:"花被",id:3732},{english:"perigee",hangul:"근지점",hanja:"近地點",id:3733},{english:"perihelion",hangul:"근일점",hanja:"近日點",id:3734},{english:"peril",hangul:"위험",hanja:"危險",id:3735,freq_deg:1534},{english:"period",hangul:"기간",hanja:"期間",id:3736,freq_deg:604},{english:"period",hangul:"시대",hanja:"時代",id:3737,freq_deg:97},{english:"periosteum",hangul:"골막",hanja:"骨膜",id:3738},{english:"periscope",hangul:"잠망경",hanja:"潛望鏡",id:3739},{english:"peritoneum",hangul:"복막",hanja:"腹膜",id:3740},{english:"perjury",hangul:"위증",hanja:"僞證",id:3741},{english:"permanence",hangul:"영속",hanja:"永續",id:3742},{english:"permission",hangul:"허가",hanja:"許可",id:3743,freq_deg:2918},{english:"permission",hangul:"허용",hanja:"許容",id:3744,freq_deg:3310},{english:"permit",hangul:"면허",hanja:"免許",id:3745},{english:"permutation",hangul:"순열",hanja:"順列",id:3746},{english:"perpetuity",hangul:"영존",hanja:"永存",id:3747},{english:"persecutor",hangul:"박해자",hanja:"迫害者",id:3748},{english:"persistence",hangul:"고집",hanja:"固執",id:3749,freq_deg:4029},{english:"personage",hangul:"인물",hanja:"人物",id:3750,freq_deg:632},{english:"personal",hangul:"개인적인",hanja:"個人",id:3751},{english:"personality",hangul:"개성",hanja:"個性",id:3752,freq_deg:1572},{english:"personality",hangul:"인격",hanja:"人格",id:3753,freq_deg:2304},{english:"personality",hangul:"인물",hanja:"人物",id:3754,freq_deg:632},{english:"personification",hangul:"의인법",hanja:"擬人法",id:3755},{english:"personification",hangul:"체현",hanja:"體現",id:3756},{english:"personification",hangul:"화신",hanja:"化身",id:3757},{english:"personnel",hangul:"인원",hanja:"人員",id:3758,freq_deg:3470},{english:"personnel",hangul:"요원",hanja:"要員",id:3759},{english:"perusal",hangul:"숙독",hanja:"熟讀",id:3760},{english:"perversion",hangul:"악용",hanja:"惡用",id:3761},{english:"perversion",hangul:"도착",hanja:"倒錯",id:3762,freq_deg:5134},{english:"pervert",hangul:"악용하다",hanja:"惡用",id:3763},{english:"pessimism",hangul:"비관",hanja:"悲觀",id:3764},{english:"pet name",hangul:"애칭",hanja:"愛稱",id:3765},{english:"petition",hangul:"탄원",hanja:"歎願",id:3766},{english:"petition",hangul:"진정",hanja:"陳情",id:3767},{english:"petition",hangul:"애원",hanja:"哀願",id:3768},{english:"petitioner",hangul:"청원자",hanja:"請願者",id:3769},{english:"petrifaction",hangul:"화석",hanja:"化石",id:3770},{english:"petroleum",hangul:"석유",hanja:"石油",id:3771,freq_deg:2297},{english:"phantom",hangul:"환영",hanja:"幻影",id:3772,freq_deg:4968},{english:"phantom",hangul:"유령",hanja:"幽靈",id:3773},{english:"phantom",hangul:"환상",hanja:"幻像",id:3774},{english:"pharmaceutics",hangul:"약학",hanja:"藥學",id:3775},{english:"pharmacy",hangul:"약학",hanja:"藥學",id:3776},{english:"pharmacy",hangul:"약국",hanja:"藥局",id:3777,freq_deg:4753},{english:"pharynx",hangul:"인두",hanja:"咽頭",id:3778},{english:"phenol",hangul:"석탄산",hanja:"石炭酸",id:3779},{english:"phenomenon",hangul:"현상",hanja:"現象",id:3780,freq_deg:292},{english:"philanthropy",hangul:"박애",hanja:"博愛",id:3781},{english:"philosopher",hangul:"철학자",hanja:"哲學者",id:3782,freq_deg:3674},{english:"philosopher",hangul:"철인",hanja:"哲人",id:3783},{english:"philosophy",hangul:"철학",hanja:"哲學",id:3784,freq_deg:1397},{english:"philosophy",hangul:"철리",hanja:"哲理",id:3785},{english:"phimosis",hangul:"포경",hanja:"包莖",id:3786},{english:"phlebotomy",hangul:"사혈",hanja:"瀉血",id:3787},{english:"phlegm",hangul:"점액",hanja:"粘液",id:3788},{english:"phonetics",hangul:"음성학",hanja:"音聲學",id:3789},{english:"phosphoric acid",hangul:"아인산",hanja:"亞燐酸",id:3790},{english:"photochemistry",hangul:"광화학",hanja:"光化學",id:3791},{english:"photon",hangul:"광자",hanja:"光子",id:3792},{english:"phototropism",hangul:"굴광성",hanja:"屈光性",id:3793},{english:"physical",hangul:"물질적인",hanja:"物質的",id:3794},{english:"physical education",hangul:"체육",hanja:"體育",id:3795,freq_deg:1230},{english:"physical geography",hangul:"지문학",hanja:"地文學",id:3796},{english:"physician",hangul:"의사",hanja:"醫師",id:3797,freq_deg:1943},{english:"physicist",hangul:"물리학자",hanja:"物理學者",id:3798},{english:"physics",hangul:"물리학",hanja:"物理學",id:3799,freq_deg:2884},{english:"physiocrat",hangul:"중농주의자",hanja:"重農主義者",id:3800},{english:"physique",hangul:"체격",hanja:"體格",id:3801},{english:"picture",hangul:"묘사하다",hanja:"描寫",id:3802,freq_deg:3110},{english:"pier",hangul:"부두",hanja:"埠頭",id:3803},{english:"pierce",hangul:"관통하다",hanja:"貫通",id:3804},{english:"pigment",hangul:"색소",hanja:"色素",id:3805},{english:"pigtail",hangul:"변발",hanja:"辯髮",id:3806},{english:"pilgrim",hangul:"순례자",hanja:"巡禮者",id:3807},{english:"pilgrimage",hangul:"순례하다",hanja:"巡禮",id:3808},{english:"pill",hangul:"환약",hanja:"丸藥",id:3809},{english:"pillage",hangul:"약탈",hanja:"掠奪",id:3810},{english:"pinch hitter",hangul:"대타자",hanja:"代打者",id:3811},{english:"pinworm",hangul:"요충",hanja:"蟯蟲",id:3812},{english:"pioneer",hangul:"개척자",hanja:"開拓者",id:3813},{english:"pioneer",hangul:"선구자",hanja:"先驅者",id:3814},{english:"pioneer",hangul:"개척하다",hanja:"開拓",id:3815},{english:"pirate",hangul:"해적",hanja:"海賊",id:3816},{english:"pitcher",hangul:"투수",hanja:"投手",id:3817},{english:"pitching",hangul:"투구",hanja:"投球",id:3818},{english:"pitfall",hangul:"함정",hanja:"陷穽",id:3819},{english:"pithead",hangul:"갱구",hanja:"坑口",id:3820},{english:"pituitary gland",hangul:"뇌하수체",hanja:"腦下垂體",id:3821},{english:"pity",hangul:"연민",hanja:"憐愍",id:3822},{english:"pity",hangul:"동정",hanja:"同情",id:3823},{english:"place",hangul:"장소",hanja:"場所",id:3824,freq_deg:1168},{english:"place",hangul:"여지",hanja:"餘地",id:3825},{english:"placenta",hangul:"태반",hanja:"胎盤",id:3826},{english:"plague",hangul:"역병",hanja:"疫病",id:3827},{english:"plain clothes",hangul:"평복",hanja:"平服",id:3828},{english:"plain speaking",hangul:"직언",hanja:"直言",id:3829},{english:"plaintiff",hangul:"원고",hanja:"原告",id:3830,freq_deg:2664},{english:"plan",hangul:"계획",hanja:"計劃",id:3831,freq_deg:357},{english:"plan",hangul:"설계",hanja:"設計",id:3832},{english:"plan",hangul:"방책",hanja:"方策",id:3833},{english:"plan",hangul:"도면",hanja:"圖面",id:3834},{english:"plane",hangul:"평면",hanja:"平面",id:3835},{english:"planet",hangul:"유성",hanja:"遊星",id:3836},{english:"planet",hangul:"혹성",hanja:"惑星",id:3837},{english:"planetarium",hangul:"천상의",hanja:"天象儀",id:3838},{english:"plant",hangul:"식물",hanja:"植物",id:3839,freq_deg:1272},{english:"planting",hangul:"파종",hanja:"播種",id:3840},{english:"plasma",hangul:"원형질",hanja:"原形質",id:3841},{english:"plasma",hangul:"혈장",hanja:"血漿",id:3842},{english:"plaster",hangul:"석고",hanja:"石膏",id:3843},{english:"plateau",hangul:"고원",hanja:"高原",id:3844},{english:"player",hangul:"배우",hanja:"俳優",id:3845,freq_deg:1900},{english:"playhouse",hangul:"극장",hanja:"劇場",id:3846,freq_deg:2023},{english:"pleading",hangul:"변호",hanja:"辨護",id:3847},{english:"pledge",hangul:"보증",hanja:"保證",id:3848},{english:"plenty",hangul:"풍부",hanja:"豊富",id:3849},{english:"plenty",hangul:"충분히",hanja:"充分",id:3850,freq_deg:1069},{english:"plunder",hangul:"약탈하다",hanja:"掠奪",id:3851},{english:"plunder",hangul:"약탈",hanja:"掠奪",id:3852},{english:"pluperfect",hangul:"대과거",hanja:"大過去",id:3853},{english:"plural",hangul:"복수",hanja:"複數",id:3854},{english:"plywood",hangul:"합판",hanja:"合板",id:3855},{english:"pneumonia",hangul:"폐렴",hanja:"肺炎",id:3856},{english:"poet",hangul:"시인",hanja:"詩人",id:3857,freq_deg:797},{english:"poetry",hangul:"운문",hanja:"韻文",id:3858},{english:"pointer",hangul:"지침",hanja:"指針",id:3859},{english:"poison",hangul:"해독",hanja:"害毒",id:3860},{english:"poisoning",hangul:"중독",hanja:"中毒",id:3861,freq_deg:4302},{english:"polarity",hangul:"극성",hanja:"極性",id:3862},{english:"polarization",hangul:"편광",hanja:"偏光",id:3863},{english:"police",hangul:"경찰",hanja:"警察",id:3864,freq_deg:561},{english:"police station",hangul:"경찰서",hanja:"警察署",id:3865,freq_deg:2732},{english:"policeman",hangul:"경관",hanja:"警官",id:3866},{english:"policy",hangul:"정책",hanja:"政策",id:3867},{english:"policy",hangul:"방침",hanja:"方針",id:3868},{english:"polish",hangul:"세련하다",hanja:"洗練",id:3869},{english:"political party",hangul:"정당",hanja:"政黨",id:3870,freq_deg:1254},{english:"politician",hangul:"정치가",hanja:"政治家",id:3871},{english:"politics",hangul:"정략",hanja:"政略",id:3872},{english:"poll",hangul:"투표",hanja:"投票",id:3873,freq_deg:2983},{english:"poll",hangul:"투표하다",hanja:"投票",id:3874},{english:"pollution",hangul:"오염",hanja:"汚染",id:3875,freq_deg:1082},{english:"pollution",hangul:"공해",hanja:"公害",id:3876,freq_deg:3066},{english:"polygon",hangul:"다각형",hanja:"多角形",id:3877},{english:"pomegranate",hangul:"석류",hanja:"石榴",id:3878},{english:"popular name",hangul:"속명",hanja:"俗名",id:3879},{english:"popular song",hangul:"유행가",hanja:"流行歌",id:3880},{english:"popularity",hangul:"인망",hanja:"人望",id:3881},{english:"population",hangul:"인구",hanja:"人口",id:3882,freq_deg:1147},{english:"population",hangul:"주민",hanja:"住民",id:3883,freq_deg:453},{english:"porcelain",hangul:"자기",hanja:"磁器",id:3884,freq_deg:111},{english:"pore",hangul:"세공",hanja:"細孔",id:3885},{english:"porosity",hangul:"다공성",hanja:"多孔性",id:3886},{english:"portent",hangul:"전조",hanja:"前兆",id:3887},{english:"porthole",hangul:"현창",hanja:"舷窓",id:3888},{english:"portion",hangul:"부분",hanja:"部分",id:3889,freq_deg:263},{english:"portrait",hangul:"초상",hanja:"肖像",id:3890},{english:"portrayal",hangul:"묘사",hanja:"描寫",id:3891,freq_deg:3861},{english:"position",hangul:"위치",hanja:"位置",id:3892,freq_deg:802},{english:"position",hangul:"지위",hanja:"地位",id:3893,freq_deg:1660},{english:"position",hangul:"입장",hanja:"立場",id:3894,freq_deg:400},{english:"positive",hangul:"적극적인",hanja:"積極的",id:3895},{english:"positive electricity",hangul:"양전기",hanja:"陽電氣",id:3896},{english:"positive proof",hangul:"확증",hanja:"確證",id:3897},{english:"positron",hangul:"양전자",hanja:"陽電子",id:3898},{english:"possession",hangul:"속령",hanja:"屬領",id:3899},{english:"possessor",hangul:"소유자",hanja:"所有者",id:3900,freq_deg:2544},{english:"possibility",hangul:"가능성",hanja:"可能性",id:3901,freq_deg:432},{english:"postal service",hangul:"우편",hanja:"郵便",id:3902,freq_deg:4943},{english:"posterity",hangul:"자손",hanja:"子孫",id:3903},{english:"posterity",hangul:"후세",hanja:"後世",id:3904},{english:"postmark",hangul:"소인",hanja:"消印",id:3905},{english:"postscript",hangul:"추신",hanja:"追伸",id:3906},{english:"postscript",hangul:"추백",hanja:"追白",id:3907},{english:"posture",hangul:"자세",hanja:"姿勢",id:3908,freq_deg:559},{english:"potentiality",hangul:"가능성",hanja:"可能性",id:3909,freq_deg:432},{english:"potter",hangul:"도공",hanja:"陶工",id:3910},{english:"pottery",hangul:"도기",hanja:"陶器",id:3911},{english:"poultry",hangul:"가금",hanja:"家禽",id:3912},{english:"power",hangul:"세력",hanja:"勢力",id:3913},{english:"power",hangul:"권력",hanja:"權力",id:3914},{english:"power",hangul:"동력",hanja:"動力",id:3915},{english:"practical",hangul:"실용적인",hanja:"實用的",id:3916},{english:"practice",hangul:"실행",hanja:"實行",id:3917},{english:"practice",hangul:"연습",hanja:"練習",id:3918,freq_deg:1655},{english:"practice",hangul:"실행하다",hanja:"實行",id:3919},{english:"practice",hangul:"연습하다",hanja:"練習",id:3920,freq_deg:4067},{english:"praise",hangul:"찬미",hanja:"讚美",id:3921},{english:"prayer",hangul:"기원",hanja:"祈願",id:3922,freq_deg:3646},{english:"precedence",hangul:"상석",hanja:"上席",id:3923},{english:"precedent",hangul:"선례",hanja:"先例",id:3924},{english:"precedent",hangul:"판례",hanja:"判例",id:3925},{english:"preceding",hangul:"선행하는",hanja:"先行",id:3926},{english:"precipice",hangul:"절벽",hanja:"絶壁",id:3927},{english:"precipitation",hangul:"침전",hanja:"沈澱",id:3928},{english:"preconception",hangul:"선입관",hanja:"先入觀",id:3929},{english:"predation",hangul:"포식",hanja:"捕食",id:3930},{english:"predestination",hangul:"숙명",hanja:"宿命",id:3931},{english:"predicament",hangul:"궁경",hanja:"窮境",id:3932},{english:"predicate",hangul:"술어",hanja:"述語",id:3933},{english:"predict",hangul:"예언하다",hanja:"豫言",id:3934},{english:"prediction",hangul:"예언",hanja:"豫言",id:3935},{english:"predominate",hangul:"지배하다",hanja:"支配",id:3936,freq_deg:1701},{english:"preferential treatment",hangul:"우대",hanja:"優待",id:3937},{english:"prefigure",hangul:"예시하다",hanja:"豫示",id:3938},{english:"prefigure",hangul:"예상하다",hanja:"豫想",id:3939,freq_deg:2757},{english:"prefix",hangul:"접두사",hanja:"接頭辭",id:3940},{english:"prejudice",hangul:"편견",hanja:"偏見",id:3941,freq_deg:4174},{english:"premise",hangul:"전제",hanja:"前提",id:3942},{english:"premise",hangul:"구내",hanja:"構內",id:3943},{english:"premonition",hangul:"예감",hanja:"豫感",id:3944,freq_deg:3251},{english:"preoccupation",hangul:"선취",hanja:"先取",id:3945},{english:"preoccupation",hangul:"선입관",hanja:"先入觀",id:3946},{english:"preparation",hangul:"준비",hanja:"準備",id:3947,freq_deg:950},{english:"preponderance",hangul:"우세",hanja:"優勢",id:3948},{english:"preposition",hangul:"전치사",hanja:"前置詞",id:3949},{english:"presbyopia",hangul:"노안",hanja:"老眼",id:3950},{english:"prescribe",hangul:"명령하다",hanja:"命令",id:3951},{english:"prescription",hangul:"처방",hanja:"處方",id:3952},{english:"presence",hangul:"출석",hanja:"出席",id:3953},{english:"presence",hangul:"면전",hanja:"面前",id:3954},{english:"present",hangul:"현재",hanja:"現在",id:3955,freq_deg:367},{english:"presentation",hangul:"증정",hanja:"贈呈",id:3956},{english:"presentation",hangul:"제출",hanja:"提出",id:3957,freq_deg:4767},{english:"presentation",hangul:"제시",hanja:"提示",id:3958,freq_deg:3769},{english:"presentation",hangul:"표현",hanja:"表現",id:3959,freq_deg:468},{english:"presenter",hangul:"제출자",hanja:"提出者",id:3960},{english:"preservation",hangul:"보존",hanja:"保存",id:3961,freq_deg:3653},{english:"preservation",hangul:"저장",hanja:"貯藏",id:3962},{english:"preservation",hangul:"방부",hanja:"防腐",id:3963},{english:"president",hangul:"대통령",hanja:"大統領",id:3964,freq_deg:113},{english:"president",hangul:"총재",hanja:"總裁",id:3965},{english:"president",hangul:"총장",hanja:"總長",id:3966,freq_deg:1582},{english:"pressure",hangul:"압력",hanja:"壓力",id:3967,freq_deg:1748},{english:"pressure",hangul:"압박",hanja:"壓迫",id:3968},{english:"pressure",hangul:"절박",hanja:"切迫",id:3969},{english:"presumption",hangul:"추정",hanja:"推定",id:3970},{english:"prevention",hangul:"방지",hanja:"防止",id:3971,freq_deg:2844},{english:"prevention",hangul:"예방",hanja:"豫防",id:3972,freq_deg:2793},{english:"previous conviction",hangul:"전과",hanja:"前科",id:3973},{english:"price",hangul:"대가",hanja:"代價",id:3974,freq_deg:2745},{english:"pride",hangul:"자만",hanja:"自慢",id:3975},{english:"pride",hangul:"득의",hanja:"得意",id:3976},{english:"priest",hangul:"사제",hanja:"司祭",id:3977},{english:"prime number",hangul:"소수",hanja:"素數",id:3978,freq_deg:3161},{english:"prince",hangul:"왕자",hanja:"王子",id:3979,freq_deg:3814},{english:"prince",hangul:"대군",hanja:"大君",id:3980},{english:"princess",hangul:"왕녀",hanja:"王女",id:3981},{english:"principal",hangul:"원금",hanja:"元金",id:3982},{english:"principal clause",hangul:"주절",hanja:"主節",id:3983},{english:"principal offender",hangul:"정범자",hanja:"正犯者",id:3984},{english:"principal offender",hangul:"주범",hanja:"主犯",id:3985},{english:"principle",hangul:"원칙",hanja:"原則",id:3986},{english:"principle",hangul:"주의",hanja:"主義",id:3987,freq_deg:2826},{english:"principle",hangul:"본원",hanja:"本源",id:3988},{english:"principle",hangul:"원리",hanja:"原理",id:3989},{english:"printing",hangul:"인쇄",hanja:"印刷",id:3990,freq_deg:4708},{english:"prison",hangul:"형무소",hanja:"刑務所",id:3991},{english:"prison",hangul:"감옥",hanja:"監獄",id:3992,freq_deg:2867},{english:"private",hangul:"개인적인",hanja:"個人",id:3993},{english:"private law",hangul:"사법",hanja:"私法",id:3994},{english:"private right",hangul:"사권",hanja:"私權",id:3995},{english:"privation",hangul:"결여",hanja:"缺如",id:3996},{english:"privilege",hangul:"특권",hanja:"特權",id:3997},{english:"privilege",hangul:"특전",hanja:"特典",id:3998},{english:"prize",hangul:"포상",hanja:"褒賞",id:3999},{english:"prize",hangul:"상품",hanja:"賞品",id:4000,freq_deg:859},{english:"pro",hangul:"직업적인",hanja:"職業的",id:4001},{english:"probability",hangul:"개연성",hanja:"蓋然性",id:4002},{english:"probation",hangul:"시련",hanja:"試練",id:4003},{english:"probe",hangul:"조사하다",hanja:"調査",id:4004,freq_deg:794},{english:"problem",hangul:"의문",hanja:"疑問",id:4005,freq_deg:1737},{english:"problem",hangul:"문제",hanja:"問題",id:4006,freq_deg:44},{english:"proceed",hangul:"매상고",hanja:"賣上高",id:4007},{english:"proceeds",hangul:"매상고",hanja:"賣上高",id:4008},{english:"proceeds",hangul:"수익",hanja:"收益",id:4009},{english:"process",hangul:"행진하다",hanja:"行進",id:4010},{english:"procession",hangul:"행렬",hanja:"行列",id:4011},{english:"proclamation",hangul:"선언",hanja:"宣言",id:4012},{english:"prodigality",hangul:"방탕",hanja:"放蕩",id:4013},{english:"prodigy",hangul:"비범",hanja:"非凡",id:4014},{english:"prodigy",hangul:"천재",hanja:"天才",id:4015,freq_deg:5189},{english:"producer",hangul:"생산자",hanja:"生産者",id:4016,freq_deg:3283},{english:"production",hangul:"생산",hanja:"生産",id:4017,freq_deg:517},{english:"production",hangul:"제작",hanja:"製作",id:4018,freq_deg:1923},{english:"production",hangul:"작품",hanja:"作品",id:4019,freq_deg:236},{english:"profession",hangul:"공언",hanja:"公言",id:4020},{english:"professional",hangul:"직업적인",hanja:"職業的",id:4021},{english:"proffer",hangul:"제공하다",hanja:"提供",id:4022,freq_deg:1269},{english:"progenitor",hangul:"선배",hanja:"先輩",id:4023,freq_deg:994},{english:"prognosis",hangul:"예후",hanja:"豫後",id:4024},{english:"prognosticate",hangul:"예언하다",hanja:"豫言",id:4025},{english:"prognostication",hangul:"예언",hanja:"豫言",id:4026},{english:"program",hangul:"예정",hanja:"豫定",id:4027,freq_deg:889},{english:"program",hangul:"계획",hanja:"計劃",id:4028,freq_deg:357},{english:"program",hangul:"계획하다",hanja:"計劃",id:4029,freq_deg:3781},{english:"progress",hangul:"전진",hanja:"前進",id:4030},{english:"progress",hangul:"전진하다",hanja:"前進",id:4031},{english:"progression",hangul:"수열",hanja:"數列",id:4032},{english:"prohibition",hangul:"금지",hanja:"禁止",id:4033,freq_deg:2244},{english:"prohibition",hangul:"금령",hanja:"禁令",id:4034},{english:"project",hangul:"고안하다",hanja:"考案",id:4035},{english:"project",hangul:"계획",hanja:"計劃",id:4036,freq_deg:357},{english:"projection",hangul:"돌출",hanja:"突出",id:4037},{english:"projection",hangul:"영사",hanja:"映寫",id:4038},{english:"prolongation",hangul:"연장",hanja:"延長",id:4039,freq_deg:4151},{english:"promiscuity",hangul:"난잡",hanja:"亂雜",id:4040},{english:"promise",hangul:"약속하다",hanja:"約束",id:4041,freq_deg:2302},{english:"promotion",hangul:"승진",hanja:"昇進",id:4042,freq_deg:3011},{english:"promotion",hangul:"촉진",hanja:"促進",id:4043},{english:"promotion",hangul:"주창",hanja:"主唱",id:4044},{english:"promulgation",hangul:"선포",hanja:"宣布",id:4045},{english:"pronoun",hangul:"대명사",hanja:"代名詞",id:4046},{english:"pronouncement",hangul:"선고",hanja:"宣告",id:4047},{english:"proof",hangul:"증명",hanja:"證明",id:4048},{english:"proof",hangul:"증거",hanja:"證據",id:4049,freq_deg:1858},{english:"prop",hangul:"지주",hanja:"支柱",id:4050},{english:"property",hangul:"재산",hanja:"財産",id:4051,freq_deg:589},{english:"prophecy",hangul:"예언",hanja:"預言",id:4052},{english:"prophet",hangul:"예언자",hanja:"預言者",id:4053},{english:"proponent",hangul:"제안자",hanja:"提案者",id:4054},{english:"proportion",hangul:"비율",hanja:"比率",id:4055,freq_deg:2601},{english:"proportion",hangul:"비례",hanja:"比例",id:4056},{english:"proposal",hangul:"제안",hanja:"提案",id:4057,freq_deg:3301},{english:"propose",hangul:"기도하다",hanja:"企圖",id:4058,freq_deg:4184},{english:"propose",hangul:"계획하다",hanja:"計劃",id:4059,freq_deg:3781},{english:"proposition",hangul:"제안",hanja:"提案",id:4060,freq_deg:3301},{english:"proposition",hangul:"정리",hanja:"定理",id:4061,freq_deg:5608},{english:"proposition",hangul:"명제",hanja:"命題",id:4062},{english:"proprietor",hangul:"소유자",hanja:"所有者",id:4063,freq_deg:2544},{english:"proprietor",hangul:"경영자",hanja:"經營者",id:4064},{english:"propulsion",hangul:"추진",hanja:"推進",id:4065,freq_deg:1926},{english:"prose",hangul:"산문",hanja:"散文",id:4066},{english:"prosecution",hangul:"기소",hanja:"起訴",id:4067},{english:"prospect",hangul:"조망",hanja:"眺望",id:4068},{english:"prospector",hangul:"시굴자",hanja:"試掘者",id:4069},{english:"prosperity",hangul:"번영",hanja:"繁榮",id:4070},{english:"prostitution",hangul:"매춘",hanja:"賣春",id:4071},{english:"prostration",hangul:"부복",hanja:"俯伏",id:4072},{english:"protection",hangul:"보호",hanja:"保護",id:4073,freq_deg:844},{english:"protection",hangul:"방어",hanja:"防禦",id:4074},{english:"protector",hangul:"보호자",hanja:"保護者",id:4075},{english:"protein",hangul:"단백질",hanja:"蛋白質",id:4076},{english:"protest",hangul:"항의하다",hanja:"抗議",id:4077},{english:"protest",hangul:"이의",hanja:"異議",id:4078},{english:"protoplasm",hangul:"원형질",hanja:"原形質",id:4079},{english:"prototype",hangul:"원형",hanja:"原型",id:4080},{english:"protrusion",hangul:"돌출",hanja:"突出",id:4081},{english:"protuberance",hangul:"돌기",hanja:"突起",id:4082},{english:"protuberance",hangul:"융기",hanja:"隆起",id:4083},{english:"prove",hangul:"시험하다",hanja:"試驗",id:4084},{english:"provide",hangul:"공급하다",hanja:"供給",id:4085},{english:"provider",hangul:"공급자",hanja:"供給者",id:4086},{english:"provision",hangul:"준비",hanja:"準備",id:4087,freq_deg:950},{english:"provision",hangul:"식량",hanja:"食糧",id:4088,freq_deg:1664},{english:"proviso",hangul:"단서",hanja:"但書",id:4089},{english:"prudence",hangul:"사려",hanja:"思慮",id:4090},{english:"prudence",hangul:"신중",hanja:"愼重",id:4091},{english:"pruning",hangul:"전정",hanja:"剪定",id:4092},{english:"pseudonym",hangul:"필명",hanja:"筆名",id:4093},{english:"psoriasis",hangul:"건선",hanja:"乾癬",id:4094},{english:"psychologist",hangul:"심리학자",hanja:"心理學者",id:4095},{english:"psychology",hangul:"심리학",hanja:"心理學",id:4096},{english:"ptarmigan",hangul:"뇌조",hanja:"雷鳥",id:4097},{english:"pubes",hangul:"음모",hanja:"陰毛",id:4098},{english:"public",hangul:"공중",hanja:"公衆",id:4099,freq_deg:3065},{english:"public corporation",hangul:"공사",hanja:"公社",id:4100,freq_deg:1211},{english:"public corporation",hangul:"공단",hanja:"公團",id:4101},{english:"public debt",hangul:"공채",hanja:"公債",id:4102},{english:"public enemy",hangul:"공적",hanja:"公敵",id:4103},{english:"public good",hangul:"공익",hanja:"公益",id:4104},{english:"public hearing",hangul:"공청회",hanja:"公聽會",id:4105},{english:"public law",hangul:"공법",hanja:"公法",id:4106},{english:"public nuisance",hangul:"공해",hanja:"公害",id:4107,freq_deg:3066},{english:"public opinion",hangul:"여론",hanja:"與論",id:4108,freq_deg:1723},{english:"public prosecutor",hangul:"검사",hanja:"檢事",id:4109,freq_deg:2592},{english:"public sale",hangul:"공매",hanja:"公賣",id:4110},{english:"public servant",hangul:"공무원",hanja:"公務員",id:4111,freq_deg:1628},{english:"publication",hangul:"발표",hanja:"發表",id:4112,freq_deg:1090},{english:"publication",hangul:"출판",hanja:"出版",id:4113,freq_deg:4308},{english:"publicity",hangul:"선전",hanja:"宣傳",id:4114,freq_deg:3980},{english:"pulmonary tuberculosis",hangul:"폐결핵",hanja:"肺結核",id:4115},{english:"pulp",hangul:"치수",hanja:"齒髓",id:4116},{english:"pulsation",hangul:"맥박",hanja:"脈拍",id:4117},{english:"pulsation",hangul:"동계",hanja:"動悸",id:4118},{english:"pulse",hangul:"맥박",hanja:"脈拍",id:4119},{english:"pulverization",hangul:"분쇄",hanja:"粉碎",id:4120},{english:"punishment",hangul:"처벌",hanja:"處罰",id:4121,freq_deg:2452},{english:"punishment",hangul:"형벌",hanja:"刑罰",id:4122},{english:"pupil",hangul:"동공",hanja:"瞳孔",id:4123},{english:"puppet",hangul:"괴뢰",hanja:"傀儡",id:4124},{english:"purchase",hangul:"구입",hanja:"購入",id:4125,freq_deg:3953},{english:"purchaser",hangul:"구매자",hanja:"購買者",id:4126},{english:"purgatory",hangul:"연옥",hanja:"煉獄",id:4127},{english:"purification",hangul:"정화",hanja:"淨化",id:4128},{english:"purification",hangul:"정제",hanja:"精製",id:4129},{english:"purification",hangul:"재계",hanja:"齋戒",id:4130},{english:"purity",hangul:"청정",hanja:"淸淨",id:4131},{english:"purity",hangul:"결백",hanja:"潔白",id:4132},{english:"purpose",hangul:"목적",hanja:"目的",id:4133,freq_deg:664},{english:"pursuer",hangul:"추적자",hanja:"追跡者",id:4134},{english:"pursuit",hangul:"추적",hanja:"追跡",id:4135},{english:"pustule",hangul:"농포",hanja:"膿疱",id:4136},{english:"pylorus",hangul:"유문",hanja:"幽門",id:4137},{english:"pyramid",hangul:"금자탑",hanja:"金字塔",id:4138},{english:"pyramid",hangul:"각추",hanja:"角錐",id:4139},{english:"pyrethrum",hangul:"제충국",hanja:"除蟲菊",id:4140},{english:"pyroxene",hangul:"휘석",hanja:"輝石",id:4141},{english:"qualification",hangul:"자격",hanja:"資格",id:4142,freq_deg:1907},{english:"quantity",hangul:"수량",hanja:"數量",id:4143},{english:"quantity",hangul:"분량",hanja:"分量",id:4144,freq_deg:3004},{english:"quantum",hangul:"양자",hanja:"量子",id:4145},{english:"quantum theory",hangul:"양자론",hanja:"量子論",id:4146},{english:"quarantine",hangul:"검역하다",hanja:"檢疫",id:4147},{english:"quartz",hangul:"석영",hanja:"石英",id:4148},{english:"queen",hangul:"왕비",hanja:"王妃",id:4149,freq_deg:5089},{english:"queen",hangul:"여왕",hanja:"女王",id:4150,freq_deg:5171},{english:"queen mother",hangul:"태후",hanja:"太后",id:4151},{english:"query",hangul:"질문하다",hanja:"質問",id:4152,freq_deg:4828},{english:"quest",hangul:"탐구",hanja:"探求",id:4153},{english:"question",hangul:"질문하다",hanja:"質問",id:4154,freq_deg:4828},{english:"question",hangul:"의심하다",hanja:"疑心",id:4155,freq_deg:2471},{english:"question",hangul:"탐구하다",hanja:"探究",id:4156},{english:"queue",hangul:"변발",hanja:"辯髮",id:4157},{english:"quicksand",hangul:"유사",hanja:"流砂",id:4158},{english:"quiet",hangul:"평온히",hanja:"平穩",id:4159},{english:"quintessence",hangul:"진수",hanja:"眞髓",id:4160},{english:"quivering",hangul:"진동하는",hanja:"振動",id:4161},{english:"quorum",hangul:"정족수",hanja:"定足數",id:4162},{english:"quotation",hangul:"인용",hanja:"引用",id:4163},{english:"rabies",hangul:"광견병",hanja:"狂犬病",id:4164},{english:"race",hangul:"민족",hanja:"民族",id:4165,freq_deg:299},{english:"race",hangul:"경주",hanja:"競走",id:4166,freq_deg:5645},{english:"rack",hangul:"고문",hanja:"拷問",id:4167},{english:"rack",hangul:"고문하다",hanja:"拷問",id:4168},{english:"radiation",hangul:"발광",hanja:"發光",id:4169},{english:"radiation",hangul:"방열",hanja:"放熱",id:4170},{english:"radiation",hangul:"복사",hanja:"輻射",id:4171,freq_deg:4920},{english:"radiation",hangul:"방사",hanja:"放射",id:4172},{english:"radius",hangul:"반경",hanja:"半徑",id:4173},{english:"rage",hangul:"격노",hanja:"激怒",id:4174},{english:"rage",hangul:"격노하다",hanja:"激怒",id:4175},{english:"rage",hangul:"발광하다",hanja:"發狂",id:4176},{english:"raid",hangul:"급습",hanja:"急襲",id:4177},{english:"raid",hangul:"침입하다",hanja:"侵入",id:4178},{english:"railroad",hangul:"철도",hanja:"鐵道",id:4179,freq_deg:3710},{english:"rain",hangul:"강우",hanja:"降雨",id:4180},{english:"rainfall",hangul:"강우",hanja:"降雨",id:4181},{english:"rainy season",hangul:"우기",hanja:"雨期",id:4182},{english:"raisin",hangul:"건포도",hanja:"乾葡萄",id:4183},{english:"rally",hangul:"규합하다",hanja:"糾合",id:4184},{english:"rampart",hangul:"성벽",hanja:"城壁",id:4185},{english:"range",hangul:"범위",hanja:"範圍",id:4186,freq_deg:1395},{english:"rank",hangul:"계급",hanja:"階級",id:4187},{english:"rank",hangul:"병졸",hanja:"兵卒",id:4188},{english:"ransack",hangul:"약탈하다",hanja:"掠奪",id:4189},{english:"rapid",hangul:"급류",hanja:"急流",id:4190},{english:"rascal",hangul:"악한",hanja:"惡漢",id:4191},{english:"rascal",hangul:"악당",hanja:"惡黨",id:4192},{english:"rash",hangul:"발진",hanja:"發疹",id:4193},{english:"rat",hangul:"밀고자",hanja:"密告者",id:4194},{english:"rate",hangul:"속도",hanja:"速度",id:4195,freq_deg:948},{english:"ratification",hangul:"비준",hanja:"批准",id:4196},{english:"ratification",hangul:"추인",hanja:"追認",id:4197},{english:"ratify",hangul:"비준하다",hanja:"批准",id:4198},{english:"ratio",hangul:"비율",hanja:"比率",id:4199,freq_deg:2601},{english:"ration",hangul:"식량",hanja:"食糧",id:4200,freq_deg:1664},{english:"rational",hangul:"합리적인",hanja:"合理的",id:4201},{english:"raw material",hangul:"원료",hanja:"原料",id:4202},{english:"raw material",hangul:"소재",hanja:"素材",id:4203,freq_deg:1323},{english:"reaction",hangul:"반응",hanja:"反應",id:4204,freq_deg:1154},{english:"reaction",hangul:"반작용",hanja:"反作用",id:4205},{english:"reactionary",hangul:"반동적인",hanja:"反動的",id:4206},{english:"reader",hangul:"독자",hanja:"讀者",id:4207},{english:"reading",hangul:"독서",hanja:"讀書",id:4208,freq_deg:3413},{english:"reading",hangul:"독서하는",hanja:"讀書",id:4209},{english:"reading-book",hangul:"독본",hanja:"讀本",id:4210},{english:"ready money",hangul:"현금",hanja:"現金",id:4211,freq_deg:2000},{english:"reaffirmation",hangul:"재확인",hanja:"再確認",id:4212},{english:"reagent",hangul:"시약",hanja:"試藥",id:4213},{english:"real image",hangul:"실상",hanja:"實像",id:4214},{english:"real rights",hangul:"물권",hanja:"物權",id:4215},{english:"real world",hangul:"실사회",hanja:"實社會",id:4216},{english:"reality",hangul:"현실",hanja:"現實",id:4217,freq_deg:252},{english:"reality",hangul:"사실",hanja:"事實",id:4218,freq_deg:599},{english:"reality",hangul:"실재",hanja:"實在",id:4219},{english:"realization",hangul:"현실화",hanja:"現實化",id:4220},{english:"realm",hangul:"국토",hanja:"國土",id:4221},{english:"reap",hangul:"수확하다",hanja:"收穫",id:4222},{english:"reappearance",hangul:"재현",hanja:"再現",id:4223},{english:"reappraisal",hangul:"재평가",hanja:"再評價",id:4224},{english:"reappraisal",hangul:"재검토",hanja:"再檢討",id:4225},{english:"rear",hangul:"배후",hanja:"背後",id:4226},{english:"rear",hangul:"후미",hanja:"後尾",id:4227},{english:"rear guard",hangul:"후위",hanja:"後衛",id:4228},{english:"rearmament",hangul:"재무장",hanja:"再武裝",id:4229},{english:"rearmament",hangul:"재군비",hanja:"再軍備",id:4230},{english:"reason",hangul:"도리",hanja:"道理",id:4231},{english:"reason",hangul:"이유",hanja:"理由",id:4232,freq_deg:225},{english:"reason",hangul:"이성",hanja:"理性",id:4233,freq_deg:5345},{english:"reasoning",hangul:"추리",hanja:"推理",id:4234},{english:"reasoning",hangul:"논법",hanja:"論法",id:4235},{english:"reave",hangul:"약탈하다",hanja:"掠奪",id:4236},{english:"rebel",hangul:"반역자",hanja:"反逆者",id:4237},{english:"rebel",hangul:"반도",hanja:"叛徒",id:4238},{english:"rebellion",hangul:"모반",hanja:"謀叛",id:4239},{english:"rebellion",hangul:"반란",hanja:"反亂",id:4240},{english:"rebellion",hangul:"폭동",hanja:"暴動",id:4241},{english:"rebirth",hangul:"재생",hanja:"再生",id:4242,freq_deg:3671},{english:"recall",hangul:"소환",hanja:"召還",id:4243},{english:"receipt",hangul:"영수",hanja:"領收",id:4244},{english:"receipt",hangul:"수취",hanja:"受取",id:4245},{english:"receipt",hangul:"영수증",hanja:"領收證",id:4246},{english:"receiver",hangul:"수화기",hanja:"受話器",id:4247,freq_deg:2892},{english:"reception",hangul:"응접",hanja:"應接",id:4248},{english:"reception",hangul:"환영",hanja:"歡迎",id:4249,freq_deg:4968},{english:"recess",hangul:"휴게",hanja:"休憩",id:4250},{english:"recession",hangul:"퇴거",hanja:"退去",id:4251},{english:"reciprocity",hangul:"교환",hanja:"交換",id:4252,freq_deg:2654},{english:"recitation",hangul:"암송",hanja:"暗誦",id:4253},{english:"recitation",hangul:"낭송",hanja:"朗誦",id:4254},{english:"recognition",hangul:"인식",hanja:"認識",id:4255},{english:"recognition",hangul:"인정",hanja:"認定",id:4256},{english:"recognition",hangul:"인지",hanja:"認知",id:4257},{english:"recognition",hangul:"승인",hanja:"承認",id:4258},{english:"recoil",hangul:"반동",hanja:"反動",id:4259},{english:"recollection",hangul:"회고",hanja:"回顧",id:4260},{english:"recollection",hangul:"상기",hanja:"想起",id:4261},{english:"recollection",hangul:"추억",hanja:"追憶",id:4262,freq_deg:2378},{english:"recommendation",hangul:"추천",hanja:"推薦",id:4263,freq_deg:4615},{english:"recommendation",hangul:"천거",hanja:"薦擧",id:4264},{english:"recommendation",hangul:"권고",hanja:"勸告",id:4265},{english:"reconciliation",hangul:"화해",hanja:"和解",id:4266},{english:"reconnaissance",hangul:"정찰",hanja:"偵察",id:4267},{english:"reconsideration",hangul:"재고",hanja:"再考",id:4268},{english:"reconstruction",hangul:"재건",hanja:"再建",id:4269},{english:"record",hangul:"성적",hanja:"成績",id:4270,freq_deg:4594},{english:"recovery",hangul:"회수",hanja:"回收",id:4271},{english:"recreation",hangul:"휴양",hanja:"休養",id:4272},{english:"rectification",hangul:"정류",hanja:"整流",id:4273},{english:"rectify",hangul:"교정하다",hanja:"矯正",id:4274},{english:"rectum",hangul:"직장",hanja:"直腸",id:4275,freq_deg:932},{english:"recursion",hangul:"회귀",hanja:"回歸",id:4276},{english:"recursive",hangul:"재귀하는",hanja:"再歸",id:4277},{english:"red",hangul:"적색",hanja:"赤色",id:4278},{english:"red tide",hangul:"적조",hanja:"赤潮",id:4279},{english:"red wine",hangul:"적포도주",hanja:"赤葡萄酒",id:4280},{english:"redemption",hangul:"상환",hanja:"償還",id:4281},{english:"rediscount",hangul:"재할인하다",hanja:"再割引",id:4282},{english:"rediscount",hangul:"재할인",hanja:"再割引",id:4283},{english:"reduce",hangul:"통분하다",hanja:"通分",id:4284},{english:"reduction",hangul:"축소",hanja:"縮小",id:4285,freq_deg:3217},{english:"reduction",hangul:"감소",hanja:"減少",id:4286,freq_deg:3948},{english:"reduction",hangul:"할인",hanja:"割引",id:4287,freq_deg:4899},{english:"reef",hangul:"암초",hanja:"暗礁",id:4288},{english:"reef",hangul:"광맥",hanja:"鑛脈",id:4289},{english:"referee",hangul:"심판하다",hanja:"審判",id:4290},{english:"reference",hangul:"언급",hanja:"言及",id:4291},{english:"refine",hangul:"세련하다",hanja:"洗練",id:4292},{english:"refinement",hangul:"우아",hanja:"優雅",id:4293},{english:"reform",hangul:"개심하다",hanja:"改心",id:4294},{english:"reform",hangul:"개정",hanja:"改定",id:4295},{english:"reform",hangul:"개혁",hanja:"改革",id:4296},{english:"reform",hangul:"개심",hanja:"改心",id:4297},{english:"reformation",hangul:"개혁",hanja:"改革",id:4298},{english:"refreshment",hangul:"다과",hanja:"茶菓",id:4299},{english:"refrigeration",hangul:"냉각",hanja:"冷却",id:4300},{english:"refugee",hangul:"망명자",hanja:"亡命者",id:4301},{english:"refusal",hangul:"거절",hanja:"拒絶",id:4302},{english:"refusal",hangul:"거부",hanja:"拒否",id:4303},{english:"refusal",hangul:"사퇴",hanja:"辭退",id:4304},{english:"refutation",hangul:"논박",hanja:"論駁",id:4305},{english:"refutation",hangul:"반박",hanja:"反駁",id:4306},{english:"regard",hangul:"존중하다",hanja:"尊重",id:4307,freq_deg:2906},{english:"regard",hangul:"존경하다",hanja:"尊敬",id:4308,freq_deg:4005},{english:"regard",hangul:"경의하다",hanja:"敬意",id:4309},{english:"regard",hangul:"응시하다",hanja:"凝視",id:4310},{english:"regard",hangul:"존중",hanja:"尊重",id:4311},{english:"regenerate",hangul:"개심하다",hanja:"改心",id:4312},{english:"regeneration",hangul:"재생",hanja:"再生",id:4313,freq_deg:3671},{english:"regent",hangul:"섭정",hanja:"攝政",id:4314},{english:"regent",hangul:"섭정하는",hanja:"攝政",id:4315},{english:"regiment",hangul:"연대",hanja:"聯隊",id:4316},{english:"region",hangul:"지역",hanja:"地域",id:4317,freq_deg:143},{english:"region",hangul:"영역",hanja:"領域",id:4318,freq_deg:1190},{english:"register",hangul:"음역",hanja:"音域",id:4319},{english:"registration",hangul:"등기",hanja:"登記",id:4320},{english:"registry",hangul:"등기",hanja:"登記",id:4321},{english:"regrant",hangul:"재교부하다",hanja:"再交付",id:4322},{english:"regrant",hangul:"재교부",hanja:"再交付",id:4323},{english:"regret",hangul:"후회",hanja:"後悔",id:4324,freq_deg:4836},{english:"regret",hangul:"회한",hanja:"悔恨",id:4325},{english:"regret",hangul:"애도",hanja:"哀悼",id:4326},{english:"regret",hangul:"후회하다",hanja:"後悔",id:4327,freq_deg:3945},{english:"regular",hangul:"규칙적인",hanja:"規則的",id:4328},{english:"regular",hangul:"정상적인",hanja:"定常",id:4329},{english:"regularity",hangul:"질서",hanja:"秩序",id:4330,freq_deg:539},{english:"regulation",hangul:"규제",hanja:"規制",id:4331},{english:"regulation",hangul:"조절",hanja:"調節",id:4332,freq_deg:4164},{english:"regulation",hangul:"조정",hanja:"調整",id:4333,freq_deg:3177},{english:"regulation",hangul:"규칙",hanja:"規則",id:4334,freq_deg:1841},{english:"regulation",hangul:"규정",hanja:"規定",id:4335,freq_deg:1371},{english:"rehabilitation",hangul:"복권",hanja:"復權",id:4336},{english:"rehabilitation",hangul:"재건",hanja:"再建",id:4337},{english:"rehearse",hangul:"연습하다",hanja:"練習",id:4338,freq_deg:4067},{english:"reign",hangul:"치세",hanja:"治世",id:4339},{english:"reign",hangul:"군림",hanja:"君臨",id:4340},{english:"reign",hangul:"통치",hanja:"統治",id:4341},{english:"reign",hangul:"통치하다",hanja:"統治",id:4342},{english:"reign",hangul:"군림하다",hanja:"君臨",id:4343},{english:"reincarnation",hangul:"재생",hanja:"再生",id:4344,freq_deg:3671},{english:"reindeer",hangul:"순록",hanja:"馴鹿",id:4345},{english:"reinvest",hangul:"재투자하다",hanja:"再投資",id:4346},{english:"rejection",hangul:"배제",hanja:"排除",id:4347},{english:"rejection",hangul:"거절",hanja:"拒絶",id:4348},{english:"rejection",hangul:"각하",hanja:"却下",id:4349},{english:"rejection",hangul:"부결",hanja:"否決",id:4350},{english:"rejuvenation",hangul:"회춘",hanja:"回春",id:4351},{english:"relation",hangul:"관련",hanja:"關聯",id:4352,freq_deg:373},{english:"relation",hangul:"관계",hanja:"關係",id:4353,freq_deg:135},{english:"relative",hangul:"친척",hanja:"親戚",id:4354,freq_deg:2131},{english:"relative",hangul:"상대적인",hanja:"相對的",id:4355},{english:"relay",hangul:"교체",hanja:"交替",id:4356,freq_deg:3533},{english:"relay",hangul:"교대",hanja:"交代",id:4357,freq_deg:4180},{english:"relay",hangul:"계전기",hanja:"繼電氣",id:4358},{english:"relay",hangul:"체전",hanja:"遞傳",id:4359},{english:"relay",hangul:"중계",hanja:"中繼",id:4360},{english:"relay",hangul:"중계하다",hanja:"中繼",id:4361},{english:"release",hangul:"해제하다",hanja:"解除",id:4362},{english:"release",hangul:"면제하다",hanja:"免除",id:4363},{english:"release",hangul:"해방",hanja:"解放",id:4364},{english:"release",hangul:"석방",hanja:"釋放",id:4365},{english:"release",hangul:"방면",hanja:"放免",id:4366,freq_deg:4584},{english:"release",hangul:"해제",hanja:"解除",id:4367},{english:"reliance",hangul:"신용",hanja:"信用",id:4368,freq_deg:1965},{english:"relief",hangul:"구제",hanja:"救濟",id:4369},{english:"relief",hangul:"구원",hanja:"救援",id:4370},{english:"relief",hangul:"교체",hanja:"交替",id:4371,freq_deg:3533},{english:"relief",hangul:"부조",hanja:"浮彫",id:4372},{english:"relish",hangul:"상미",hanja:"賞味",id:4373},{english:"relish",hangul:"상미하다",hanja:"賞味",id:4374},{english:"remain",hangul:"잔재",hanja:"殘滓",id:4375},{english:"remain",hangul:"유해",hanja:"遺骸",id:4376},{english:"remain",hangul:"유골",hanja:"遺骨",id:4377},{english:"remainder",hangul:"잔여",hanja:"殘餘",id:4378},{english:"remark",hangul:"주목하다",hanja:"注目",id:4379},{english:"remark",hangul:"논평하다",hanja:"論評",id:4380},{english:"remedy",hangul:"요법",hanja:"療法",id:4381},{english:"remedy",hangul:"교정하다",hanja:"矯正",id:4382},{english:"remember",hangul:"상기하다",hanja:"想起",id:4383},{english:"remembrance",hangul:"기억",hanja:"記憶",id:4384,freq_deg:762},{english:"reminiscence",hangul:"회상",hanja:"回想",id:4385},{english:"reminiscence",hangul:"추억",hanja:"追憶",id:4386,freq_deg:2378},{english:"removal",hangul:"이동",hanja:"移動",id:4387,freq_deg:2051},{english:"removal",hangul:"제거",hanja:"除去",id:4388},{english:"remuneration",hangul:"보수",hanja:"報酬",id:4389,freq_deg:4587},{english:"renewal",hangul:"일신",hanja:"一新",id:4390},{english:"renovation",hangul:"쇄신",hanja:"刷新",id:4391},{english:"renown",hangul:"고명",hanja:"高名",id:4392},{english:"repair",hangul:"수리하다",hanja:"修理",id:4393,freq_deg:5329},{english:"reparation",hangul:"배상",hanja:"賠償",id:4394},{english:"repatriation",hangul:"귀환",hanja:"歸還",id:4395},{english:"repayment",hangul:"상환",hanja:"償還",id:4396},{english:"repeal",hangul:"폐기",hanja:"廢棄",id:4397},{english:"repeal",hangul:"철회",hanja:"撤回",id:4398},{english:"repeat",hangul:"반복하다",hanja:"反復",id:4399,freq_deg:3498},{english:"repeating",hangul:"반복하는",hanja:"反復",id:4400},{english:"repent",hangul:"후회하다",hanja:"後悔",id:4401,freq_deg:3945},{english:"repentance",hangul:"후회",hanja:"後悔",id:4402,freq_deg:4836},{english:"repentance",hangul:"참회",hanja:"懺悔",id:4403},{english:"repetition",hangul:"반복",hanja:"反復",id:4404},{english:"repetition",hangul:"복창",hanja:"復唱",id:4405},{english:"replace",hangul:"대체하다",hanja:"代替",id:4406},{english:"replacement",hangul:"후계자",hanja:"後繼者",id:4407},{english:"reply",hangul:"회답",hanja:"回答",id:4408},{english:"reply",hangul:"응수",hanja:"應酬",id:4409},{english:"report",hangul:"기사",hanja:"記事",id:4410,freq_deg:3730},{english:"report",hangul:"총성",hanja:"銃聲",id:4411},{english:"report",hangul:"통보하다",hanja:"通報",id:4412},{english:"report",hangul:"보고하다",hanja:"報告",id:4413,freq_deg:3197},{english:"report",hangul:"보도하다",hanja:"報道",id:4414,freq_deg:1787},{english:"repose",hangul:"정지",hanja:"靜止",id:4415,freq_deg:4223},{english:"repose",hangul:"휴식하다",hanja:"休息",id:4416},{english:"representation",hangul:"대표",hanja:"代表",id:4417,freq_deg:431},{english:"representation",hangul:"대리",hanja:"代理",id:4418},{english:"representative",hangul:"대표자",hanja:"代表者",id:4419},{english:"representative",hangul:"대리인",hanja:"代理人",id:4420},{english:"representative",hangul:"대표하는",hanja:"代表",id:4421},{english:"representative",hangul:"대표적인",hanja:"代表的",id:4422},{english:"reprimand",hangul:"견책",hanja:"譴責",id:4423},{english:"reprimand",hangul:"질책",hanja:"叱責",id:4424},{english:"reprimand",hangul:"질책하다",hanja:"叱責",id:4425},{english:"reprint",hangul:"번각하다",hanja:"飜刻",id:4426},{english:"reproduction",hangul:"재현",hanja:"再現",id:4427},{english:"reproduction",hangul:"재생산",hanja:"再生産",id:4428},{english:"reproduction",hangul:"복제",hanja:"複製",id:4429},{english:"reproof",hangul:"견책",hanja:"譴責",id:4430},{english:"repudiation",hangul:"부인",hanja:"否認",id:4431,freq_deg:4738},{english:"reputation",hangul:"평판",hanja:"評判",id:4432},{english:"reputation",hangul:"세평",hanja:"世評",id:4433},{english:"request",hangul:"요청하다",hanja:"要請",id:4434,freq_deg:2212},{english:"request",hangul:"신청하다",hanja:"申請",id:4435,freq_deg:3289},{english:"request",hangul:"요구",hanja:"要求",id:4436,freq_deg:873},{english:"request",hangul:"요청",hanja:"要請",id:4437,freq_deg:2580},{english:"request",hangul:"간청",hanja:"懇請",id:4438},{english:"request",hangul:"청구",hanja:"請求",id:4439},{english:"request",hangul:"수요",hanja:"需要",id:4440,freq_deg:1475},{english:"require",hangul:"명령하다",hanja:"命令",id:4441},{english:"require",hangul:"요청하다",hanja:"要請",id:4442,freq_deg:2212},{english:"require",hangul:"요구하다",hanja:"要求",id:4443,freq_deg:594},{english:"requisite",hangul:"필수품",hanja:"必需品",id:4444},{english:"requisition",hangul:"징발",hanja:"徵發",id:4445},{english:"requisition",hangul:"요구하다",hanja:"要求",id:4446,freq_deg:594},{english:"resale",hangul:"전매",hanja:"轉賣",id:4447},{english:"rescind",hangul:"폐지하다",hanja:"廢止",id:4448},{english:"rescue",hangul:"구출하다",hanja:"救出",id:4449},{english:"rescue",hangul:"구조하다",hanja:"救助",id:4450},{english:"rescue",hangul:"구출",hanja:"救出",id:4451},{english:"rescue",hangul:"구원",hanja:"救援",id:4452},{english:"research",hangul:"탐구",hanja:"探究",id:4453},{english:"research",hangul:"조사하다",hanja:"調査",id:4454,freq_deg:794},{english:"resentment",hangul:"분개",hanja:"憤慨",id:4455},{english:"resentment",hangul:"분노",hanja:"忿怒",id:4456,freq_deg:2247},{english:"reserve",hangul:"보류하다",hanja:"保留",id:4457},{english:"reserve",hangul:"보류",hanja:"保留",id:4458},{english:"reserve",hangul:"예비",hanja:"豫備",id:4459,freq_deg:3617},{english:"residence",hangul:"주거",hanja:"住居",id:4460,freq_deg:4165},{english:"residence",hangul:"주소",hanja:"住所",id:4461,freq_deg:3772},{english:"residence",hangul:"거주",hanja:"居住",id:4462},{english:"residence",hangul:"거류",hanja:"居留",id:4463},{english:"residence",hangul:"주재",hanja:"駐在",id:4464},{english:"resident",hangul:"거주자",hanja:"居住者",id:4465},{english:"residue",hangul:"잔여",hanja:"殘餘",id:4466},{english:"resignation",hangul:"사직",hanja:"辭職",id:4467},{english:"resignation",hangul:"사임",hanja:"辭任",id:4468},{english:"resignation",hangul:"포기",hanja:"抛棄",id:4469},{english:"resignation",hangul:"복종",hanja:"服從",id:4470},{english:"resignation",hangul:"인종",hanja:"忍從",id:4471,freq_deg:4293},{english:"resin",hangul:"수지",hanja:"樹脂",id:4472},{english:"resistance",hangul:"반항",hanja:"反抗",id:4473},{english:"resistance",hangul:"반대",hanja:"反對",id:4474,freq_deg:1078},{english:"resistance",hangul:"저항",hanja:"抵抗",id:4475},{english:"resolutely",hangul:"결연히",hanja:"決然",id:4476},{english:"resolution",hangul:"결의",hanja:"決議",id:4477},{english:"resolve",hangul:"의결하다",hanja:"議決",id:4478},{english:"resolve",hangul:"결심하다",hanja:"決心",id:4479,freq_deg:3030},{english:"resonance",hangul:"공명",hanja:"共鳴",id:4480},{english:"resonance",hangul:"공진",hanja:"共振",id:4481},{english:"resound",hangul:"반향하다",hanja:"反響",id:4482},{english:"resource",hangul:"재원",hanja:"財源",id:4483},{english:"resource",hangul:"자력",hanja:"資力",id:4484},{english:"resource",hangul:"기략",hanja:"機略",id:4485},{english:"respect",hangul:"존경",hanja:"尊敬",id:4486},{english:"respect",hangul:"경의",hanja:"敬意",id:4487},{english:"respect",hangul:"존중",hanja:"尊重",id:4488},{english:"respect",hangul:"존경하다",hanja:"尊敬",id:4489,freq_deg:4005},{english:"respect",hangul:"존중하다",hanja:"尊重",id:4490,freq_deg:2906},{english:"respectively",hangul:"각각",hanja:"各各",id:4491,freq_deg:3401},{english:"respiration",hangul:"호흡",hanja:"呼吸",id:4492,freq_deg:2058},{english:"response",hangul:"응답",hanja:"應答",id:4493},{english:"response",hangul:"반응",hanja:"反應",id:4494,freq_deg:1154},{english:"responsibility",hangul:"의무",hanja:"義務",id:4495,freq_deg:2255},{english:"responsibility",hangul:"책임",hanja:"責任",id:4496,freq_deg:682},{english:"responsibility",hangul:"부담",hanja:"負擔",id:4497,freq_deg:1064},{english:"rest",hangul:"잔여",hanja:"殘餘",id:4498},{english:"rest",hangul:"휴식",hanja:"休息",id:4499,freq_deg:2771},{english:"rest",hangul:"휴양",hanja:"休養",id:4500},{english:"rest",hangul:"안정",hanja:"安靜",id:4501,freq_deg:1299},{english:"rest",hangul:"휴지",hanja:"休止",id:4502,freq_deg:4482},{english:"rest",hangul:"휴식하다",hanja:"休息",id:4503},{english:"rest",hangul:"휴양하다",hanja:"休養",id:4504},{english:"rest",hangul:"영면하다",hanja:"永眠",id:4505},{english:"restart",hangul:"재출발하다",hanja:"再出發",id:4506},{english:"restoration",hangul:"회복",hanja:"回復",id:4507,freq_deg:1766},{english:"restoration",hangul:"복구",hanja:"復舊",id:4508},{english:"restoration",hangul:"복위",hanja:"復位",id:4509},{english:"restoration",hangul:"반환",hanja:"返還",id:4510},{english:"restoration",hangul:"환부",hanja:"還付",id:4511},{english:"restraint",hangul:"제지",hanja:"制止",id:4512},{english:"restraint",hangul:"구속",hanja:"拘束",id:4513,freq_deg:1192},{english:"restraint",hangul:"속박",hanja:"束縛",id:4514},{english:"restrict",hangul:"한정하다",hanja:"限定",id:4515,freq_deg:5039},{english:"restriction",hangul:"제한",hanja:"制限",id:4516,freq_deg:1924},{english:"restriction",hangul:"한정",hanja:"限定",id:4517},{english:"restriction",hangul:"구속",hanja:"拘束",id:4518,freq_deg:1192},{english:"restriction",hangul:"속박",hanja:"束縛",id:4519},{english:"restrictive",hangul:"한정적인",hanja:"限定的",id:4520},{english:"result",hangul:"성과",hanja:"成果",id:4521},{english:"result",hangul:"결과",hanja:"結果",id:4522,freq_deg:189},{english:"resultant force",hangul:"합력",hanja:"合力",id:4523},{english:"resuscitation",hangul:"소생",hanja:"蘇生",id:4524},{english:"retail",hangul:"소매",hanja:"小賣",id:4525,freq_deg:3286},{english:"retainer",hangul:"가신",hanja:"家臣",id:4526},{english:"retainer",hangul:"신하",hanja:"臣下",id:4527},{english:"retard",hangul:"저지하다",hanja:"沮止",id:4528},{english:"retention",hangul:"보유",hanja:"保有",id:4529},{english:"retiree",hangul:"퇴직자",hanja:"退職者",id:4530},{english:"retirement",hangul:"은퇴",hanja:"隱退",id:4531},{english:"retirement",hangul:"은거",hanja:"隱居",id:4532},{english:"retirement age",hangul:"정년",hanja:"定年",id:4533},{english:"retranslation",hangul:"중역",hanja:"重譯",id:4534},{english:"retranslation",hangul:"개역",hanja:"改譯",id:4535},{english:"retreat",hangul:"퇴각",hanja:"退却",id:4536},{english:"retreat",hangul:"후퇴",hanja:"後退",id:4537},{english:"retreat",hangul:"후퇴하다",hanja:"後退",id:4538},{english:"retreat",hangul:"퇴각하다",hanja:"退却",id:4539},{english:"retrial",hangul:"재심",hanja:"再審",id:4540},{english:"retribution",hangul:"보복",hanja:"報復",id:4541},{english:"retrograde",hangul:"역행하다",hanja:"逆行",id:4542},{english:"retrogression",hangul:"퇴화",hanja:"退化",id:4543},{english:"return",hangul:"회복하다",hanja:"回復",id:4544,freq_deg:2589},{english:"return",hangul:"반환하다",hanja:"返還",id:4545},{english:"return",hangul:"귀환",hanja:"歸還",id:4546},{english:"return",hangul:"복귀",hanja:"復歸",id:4547},{english:"return",hangul:"재발",hanja:"再發",id:4548},{english:"return",hangul:"반환",hanja:"返還",id:4549},{english:"return",hangul:"수익",hanja:"收益",id:4550},{english:"returnee",hangul:"귀환자",hanja:"歸還者",id:4551},{english:"reunion",hangul:"재회",hanja:"再會",id:4552},{english:"revelation",hangul:"폭로",hanja:"暴露",id:4553},{english:"revelation",hangul:"천계",hanja:"天啓",id:4554},{english:"revelation",hangul:"계시",hanja:"啓示",id:4555},{english:"revenge",hangul:"복수",hanja:"復讐",id:4556},{english:"revenge",hangul:"복수하다",hanja:"復讐",id:4557},{english:"reverberate",hangul:"반향하다",hanja:"反響",id:4558},{english:"reverberation",hangul:"반향",hanja:"反響",id:4559},{english:"reverberation",hangul:"반사",hanja:"反射",id:4560},{english:"revere",hangul:"존경하다",hanja:"尊敬",id:4561,freq_deg:4005},{english:"reverence",hangul:"존경",hanja:"尊敬",id:4562},{english:"reverence",hangul:"존경하다",hanja:"尊敬",id:4563,freq_deg:4005},{english:"reverie",hangul:"몽상",hanja:"夢想",id:4564},{english:"reversal",hangul:"역전",hanja:"逆轉",id:4565},{english:"reverse",hangul:"반대",hanja:"反對",id:4566,freq_deg:1078},{english:"reverse",hangul:"배면",hanja:"背面",id:4567},{english:"reverse",hangul:"역전하는",hanja:"逆轉",id:4568},{english:"review",hangul:"재음미",hanja:"再吟味",id:4569},{english:"review",hangul:"복습",hanja:"復習",id:4570,freq_deg:5518},{english:"review",hangul:"비평",hanja:"批評",id:4571},{english:"review",hangul:"재심",hanja:"再審",id:4572},{english:"review",hangul:"시찰하다",hanja:"視察",id:4573},{english:"review",hangul:"재심하다",hanja:"再審",id:4574},{english:"review",hangul:"비평하다",hanja:"批評",id:4575},{english:"review",hangul:"복습하다",hanja:"復習",id:4576,freq_deg:5503},{english:"revision",hangul:"개정",hanja:"改訂",id:4577},{english:"revision",hangul:"교정",hanja:"校訂",id:4578},{english:"revision",hangul:"정정",hanja:"訂正",id:4579},{english:"revision",hangul:"개역",hanja:"改譯",id:4580},{english:"revoke",hangul:"폐지하다",hanja:"廢止",id:4581},{english:"revolt",hangul:"폭동",hanja:"暴動",id:4582},{english:"revolt",hangul:"반감",hanja:"反感",id:4583},{english:"revolt",hangul:"반항하다",hanja:"反抗",id:4584},{english:"revolt",hangul:"반역하다",hanja:"反逆",id:4585},{english:"revolution",hangul:"선회",hanja:"旋回",id:4586},{english:"revolution",hangul:"운행",hanja:"運行",id:4587,freq_deg:3927},{english:"revolution",hangul:"회전",hanja:"回轉",id:4588,freq_deg:4481},{english:"revolution",hangul:"회귀",hanja:"回歸",id:4589},{english:"reward",hangul:"보수",hanja:"報酬",id:4590,freq_deg:4587},{english:"rhapsody",hangul:"광상곡",hanja:"狂想曲",id:4591},{english:"rhythm",hangul:"율동",hanja:"律動",id:4592},{english:"rhythm",hangul:"운율",hanja:"韻律",id:4593},{english:"rib",hangul:"늑골",hanja:"肋骨",id:4594},{english:"rider",hangul:"기수",hanja:"騎手",id:4595},{english:"ridicule",hangul:"조롱",hanja:"嘲弄",id:4596},{english:"rifle",hangul:"소총",hanja:"小銃",id:4597},{english:"right",hangul:"정당",hanja:"正當",id:4598,freq_deg:1254},{english:"right",hangul:"정의",hanja:"正義",id:4599},{english:"right",hangul:"권리",hanja:"權利",id:4600,freq_deg:1278},{english:"right angle",hangul:"직각",hanja:"直角",id:4601},{english:"righteousness",hangul:"정의",hanja:"正義",id:4602},{english:"rime",hangul:"무빙",hanja:"霧氷",id:4603},{english:"ringleader",hangul:"장본인",hanja:"帳本人",id:4604},{english:"ringworm",hangul:"백선",hanja:"白癬",id:4605},{english:"riot",hangul:"폭동",hanja:"暴動",id:4606},{english:"riot",hangul:"소요",hanja:"騷擾",id:4607},{english:"riot",hangul:"소동",hanja:"騷動",id:4608},{english:"ripeness",hangul:"성숙",hanja:"成熟",id:4609},{english:"ripeness",hangul:"원숙",hanja:"圓熟",id:4610},{english:"ripple",hangul:"파문",hanja:"波紋",id:4611},{english:"rise",hangul:"향상하다",hanja:"向上",id:4612},{english:"rise",hangul:"등귀하다",hanja:"騰貴",id:4613},{english:"rise",hangul:"융기하다",hanja:"隆起",id:4614},{english:"rise",hangul:"향상",hanja:"向上",id:4615,freq_deg:2696},{english:"rise",hangul:"등귀",hanja:"騰貴",id:4616},{english:"rise",hangul:"기원",hanja:"起原",id:4617,freq_deg:3646},{english:"rising",hangul:"상승",hanja:"上昇",id:4618},{english:"rising",hangul:"기상",hanja:"起床",id:4619},{english:"risk",hangul:"모험",hanja:"冒險",id:4620},{english:"risk",hangul:"모험하다",hanja:"冒險",id:4621},{english:"rival",hangul:"경쟁자",hanja:"競爭者",id:4622},{english:"rival",hangul:"적수",hanja:"敵手",id:4623},{english:"rival",hangul:"경쟁하는",hanja:"競爭",id:4624},{english:"rival",hangul:"경쟁하다",hanja:"競爭",id:4625},{english:"river",hangul:"하천",hanja:"河川",id:4626,freq_deg:1999},{english:"road",hangul:"도로",hanja:"道路",id:4627,freq_deg:3543},{english:"roadway",hangul:"차도",hanja:"車道",id:4628},{english:"roar",hangul:"노호하다",hanja:"怒號",id:4629},{english:"roar",hangul:"포효",hanja:"咆哮",id:4630},{english:"roaring",hangul:"포효하는",hanja:"咆哮",id:4631},{english:"roaring",hangul:"노호하는",hanja:"怒號",id:4632},{english:"robbery",hangul:"약탈",hanja:"掠奪",id:4633},{english:"rock",hangul:"암석",hanja:"岩石",id:4634},{english:"rock drill",hangul:"착암기",hanja:"鑿岩機",id:4635},{english:"rocket",hangul:"봉화",hanja:"烽火",id:4636},{english:"role",hangul:"역할",hanja:"役割",id:4637,freq_deg:393},{english:"rooftop",hangul:"옥상",hanja:"屋上",id:4638,freq_deg:4876},{english:"room",hangul:"여지",hanja:"餘地",id:4639},{english:"room",hangul:"여유",hanja:"餘裕",id:4640,freq_deg:1736},{english:"root",hangul:"근저",hanja:"根底",id:4641},{english:"root",hangul:"근원",hanja:"根源",id:4642,freq_deg:2507},{english:"root",hangul:"본원",hanja:"本源",id:4643},{english:"root crop",hangul:"근채류",hanja:"根菜類",id:4644},{english:"root hair",hangul:"근모",hanja:"根毛",id:4645},{english:"root stalk",hangul:"근경",hanja:"根莖",id:4646},{english:"rose",hangul:"장미",hanja:"薔薇",id:4647,freq_deg:5446},{english:"rosewood",hangul:"자단",hanja:"紫檀",id:4648},{english:"rostrum",hangul:"연단",hanja:"演壇",id:4649},{english:"rotation",hangul:"선회",hanja:"旋回",id:4650},{english:"rotation",hangul:"윤번",hanja:"輪番",id:4651},{english:"round table",hangul:"원탁",hanja:"圓卓",id:4652},{english:"rout",hangul:"궤주",hanja:"潰走",id:4653},{english:"route",hangul:"항로",hanja:"航路",id:4654},{english:"roving",hangul:"방랑하는",hanja:"放浪",id:4655},{english:"royalty",hangul:"왕권",hanja:"王權",id:4656},{english:"rubbing",hangul:"마찰",hanja:"摩擦",id:4657,freq_deg:3855},{english:"ruby",hangul:"홍옥",hanja:"紅玉",id:4658},{english:"ruffian",hangul:"악한",hanja:"惡漢",id:4659},{english:"ruin",hangul:"잔해",hanja:"殘骸",id:4660},{english:"ruin",hangul:"멸망",hanja:"滅亡",id:4661},{english:"ruin",hangul:"몰락",hanja:"沒落",id:4662},{english:"ruin",hangul:"파멸",hanja:"破滅",id:4663},{english:"ruin",hangul:"파멸하다",hanja:"破滅",id:4664},{english:"rule",hangul:"주의",hanja:"主義",id:4665,freq_deg:2826},{english:"rule",hangul:"지배",hanja:"支配",id:4666},{english:"rule",hangul:"치세",hanja:"治世",id:4667},{english:"rule",hangul:"규칙",hanja:"規則",id:4668,freq_deg:1841},{english:"rule",hangul:"괘선",hanja:"罫線",id:4669},{english:"rule",hangul:"지배하다",hanja:"支配",id:4670,freq_deg:1701},{english:"rule",hangul:"통치하다",hanja:"統治",id:4671},{english:"ruler",hangul:"통치자",hanja:"統治",id:4672},{english:"ruling",hangul:"재정",hanja:"裁定",id:4673,freq_deg:1635},{english:"rumination",hangul:"반추",hanja:"反芻",id:4674},{english:"runaway",hangul:"도망자",hanja:"逃亡者",id:4675},{english:"rundown",hangul:"협살",hanja:"挾殺",id:4676},{english:"runner",hangul:"주자",hanja:"走者",id:4677},{english:"running dog",hangul:"주구",hanja:"走狗",id:4678},{english:"running water",hangul:"유수",hanja:"流水",id:4679},{english:"runway",hangul:"활주로",hanja:"滑走路",id:4680},{english:"rupture",hangul:"파열",hanja:"破裂",id:4681},{english:"rupture",hangul:"결렬",hanja:"決裂",id:4682},{english:"rupture",hangul:"파열하다",hanja:"破裂",id:4683},{english:"rush",hangul:"쇄도하는",hanja:"殺到",id:4684},{english:"rush",hangul:"쇄도하다",hanja:"殺到",id:4685},{english:"rush",hangul:"돌진",hanja:"突進",id:4686},{english:"rut",hangul:"발정하다",hanja:"發情",id:4687},{english:"saccharide",hangul:"당류",hanja:"糖類",id:4688},{english:"sacredness",hangul:"불가침",hanja:"不可侵",id:4689},{english:"safekeeping",hangul:"보관",hanja:"保管",id:4690,freq_deg:3970},{english:"safety",hangul:"안전",hanja:"安全",id:4691,freq_deg:1829},{english:"sagacity",hangul:"총명",hanja:"聰明",id:4692},{english:"sail",hangul:"항정",hanja:"航程",id:4693},{english:"sailcloth",hangul:"범포",hanja:"帆布",id:4694},{english:"sailing",hangul:"범주",hanja:"帆走",id:4695},{english:"sailing",hangul:"출범",hanja:"出帆",id:4696},{english:"sailor",hangul:"선원",hanja:"船員",id:4697,freq_deg:4055},{english:"sailor",hangul:"수부",hanja:"水夫",id:4698},{english:"sailor",hangul:"수병",hanja:"水兵",id:4699},{english:"saint",hangul:"성인",hanja:"聖人",id:4700,freq_deg:3285},{english:"sale",hangul:"판매",hanja:"販賣",id:4701,freq_deg:1128},{english:"sale",hangul:"매각",hanja:"賣却",id:4702},{english:"sale",hangul:"매상고",hanja:"賣上高",id:4703},{english:"saleswoman",hangul:"여점원",hanja:"女店員",id:4704},{english:"saliva",hangul:"타액",hanja:"唾液",id:4705},{english:"saltpan",hangul:"염전",hanja:"鹽田",id:4706},{english:"saltpeter",hangul:"초석",hanja:"硝石",id:4707},{english:"salvation",hangul:"구제",hanja:"救濟",id:4708},{english:"salve",hangul:"연고",hanja:"軟膏",id:4709},{english:"sameness",hangul:"동일",hanja:"同一",id:4710},{english:"sample",hangul:"견본",hanja:"見本",id:4711},{english:"sanction",hangul:"재가",hanja:"裁可",id:4712},{english:"sanction",hangul:"제재",hanja:"制裁",id:4713},{english:"sanctuary",hangul:"성당",hanja:"聖堂",id:4714,freq_deg:5239},{english:"sandbank",hangul:"사주",hanja:"砂洲",id:4715},{english:"sandstone",hangul:"사암",hanja:"砂岩",id:4716},{english:"sap",hangul:"수액",hanja:"樹液",id:4717},{english:"sapling",hangul:"묘목",hanja:"苗木",id:4718},{english:"sapphire",hangul:"청옥",hanja:"靑玉",id:4719},{english:"sarcasm",hangul:"풍자",hanja:"諷刺",id:4720},{english:"sarcoma",hangul:"육종",hanja:"肉腫",id:4721},{english:"sarcophagus",hangul:"석관",hanja:"石棺",id:4722},{english:"satellite",hangul:"위성",hanja:"衛星",id:4723,freq_deg:3765},{english:"satiety",hangul:"포만",hanja:"飽滿",id:4724},{english:"satire",hangul:"풍자",hanja:"諷刺",id:4725},{english:"satire",hangul:"풍자하다",hanja:"諷刺",id:4726},{english:"satirize",hangul:"풍자하다",hanja:"諷刺",id:4727},{english:"satisfaction",hangul:"만족",hanja:"滿足",id:4728,freq_deg:3857},{english:"saving",hangul:"절약하는",hanja:"節約",id:4729},{english:"saving",hangul:"저축",hanja:"貯蓄",id:4730,freq_deg:3299},{english:"saving",hangul:"절약",hanja:"節約",id:4731,freq_deg:4885},{english:"scabies",hangul:"개선",hanja:"疥癬",id:4732,freq_deg:1381},{english:"scald",hangul:"화상",hanja:"火傷",id:4733},{english:"scale",hangul:"척도",hanja:"尺度",id:4734},{english:"scale",hangul:"규모",hanja:"規模",id:4735,freq_deg:699},{english:"scale",hangul:"천칭",hanja:"天秤",id:4736},{english:"scandal",hangul:"추문",hanja:"醜聞",id:4737},{english:"scandal",hangul:"의옥",hanja:"疑獄",id:4738},{english:"scarlet fever",hangul:"성홍열",hanja:"猩紅熱",id:4739},{english:"scenario",hangul:"각본",hanja:"脚本",id:4740},{english:"scene",hangul:"장면",hanja:"場面",id:4741,freq_deg:1132},{english:"scene",hangul:"광경",hanja:"光景",id:4742,freq_deg:2995},{english:"scenery",hangul:"풍경",hanja:"風景",id:4743,freq_deg:5605},{english:"schedule",hangul:"예정하다",hanja:"豫定",id:4744},{english:"scheme",hangul:"계획",hanja:"計劃",id:4745,freq_deg:357},{english:"scheme",hangul:"계획하다",hanja:"計劃",id:4746,freq_deg:3781},{english:"scholar",hangul:"학자",hanja:"學者",id:4747,freq_deg:1637},{english:"scholarship",hangul:"학식",hanja:"學識",id:4748},{english:"school",hangul:"학교",hanja:"學校",id:4749,freq_deg:110},{english:"school age",hangul:"학령",hanja:"學齡",id:4750},{english:"science",hangul:"과학",hanja:"科學",id:4751,freq_deg:311},{english:"scientific",hangul:"과학적인",hanja:"科學的",id:4752},{english:"score",hangul:"득점",hanja:"得點",id:4753},{english:"score",hangul:"득점하다",hanja:"得點",id:4754},{english:"scorn",hangul:"경멸하다",hanja:"輕蔑",id:4755},{english:"scoundrel",hangul:"악당",hanja:"惡黨",id:4756},{english:"scrap",hangul:"폐물",hanja:"廢物",id:4757},{english:"scrap",hangul:"폐기하다",hanja:"廢棄",id:4758},{english:"scratch",hangul:"찰과상",hanja:"擦過傷",id:4759},{english:"scribe",hangul:"필기자",hanja:"筆記者",id:4760},{english:"script",hangul:"원본",hanja:"原本",id:4761},{english:"scripture",hangul:"경전",hanja:"經典",id:4762},{english:"scripture",hangul:"성전",hanja:"聖典",id:4763},{english:"scrutiny",hangul:"음미",hanja:"吟味",id:4764},{english:"sculpture",hangul:"조각",hanja:"彫刻",id:4765,freq_deg:2608},{english:"scurvy",hangul:"괴혈병",hanja:"壞血病",id:4766},{english:"sea bathing",hangul:"해수욕",hanja:"海水浴",id:4767},{english:"sea horse",hangul:"해마",hanja:"海馬",id:4768},{english:"sea level",hangul:"해면",hanja:"海面",id:4769},{english:"sea robber",hangul:"해적",hanja:"海賊",id:4770},{english:"sea route",hangul:"해로",hanja:"海路",id:4771},{english:"seafood",hangul:"어개",hanja:"魚介",id:4772},{english:"seal",hangul:"인장",hanja:"印章",id:4773},{english:"season",hangul:"계절",hanja:"季節",id:4774,freq_deg:2182},{english:"seasoning",hangul:"조미",hanja:"調味",id:4775},{english:"seasoning",hangul:"조미료",hanja:"調味料",id:4776,freq_deg:1527},{english:"seat",hangul:"좌석",hanja:"座席",id:4777,freq_deg:3572},{english:"seaweed",hangul:"해초",hanja:"海草",id:4778},{english:"seclusion",hangul:"은퇴",hanja:"隱退",id:4779},{english:"second crop",hangul:"이작",hanja:"裏作",id:4780},{english:"second lieutenant",hangul:"소위",hanja:"少尉",id:4781,freq_deg:2249},{english:"secrecy",hangul:"비밀",hanja:"秘密",id:4782,freq_deg:1196},{english:"secret",hangul:"비결",hanja:"秘訣",id:4783},{english:"secretary",hangul:"비서",hanja:"秘書",id:4784,freq_deg:4137},{english:"secretary",hangul:"서기",hanja:"書記",id:4785},{english:"secretary",hangul:"장관",hanja:"長官",id:4786,freq_deg:495},{english:"sect",hangul:"종파",hanja:"宗派",id:4787},{english:"section",hangul:"절단",hanja:"切斷",id:4788},{english:"section",hangul:"구분",hanja:"區分",id:4789,freq_deg:2243},{english:"section paper",hangul:"방안지",hanja:"方眼紙",id:4790},{english:"security",hangul:"안전",hanja:"安全",id:4791,freq_deg:1829},{english:"security",hangul:"보장",hanja:"保障",id:4792,freq_deg:2846},{english:"security",hangul:"증권",hanja:"證券",id:4793,freq_deg:1752},{english:"see",hangul:"방문하다",hanja:"訪問",id:4794,freq_deg:1692},{english:"see",hangul:"경험하다",hanja:"經驗",id:4795,freq_deg:1878},{english:"seed",hangul:"종자",hanja:"種子",id:4796},{english:"seed leaf",hangul:"자엽",hanja:"子葉",id:4797},{english:"seedbed",hangul:"묘상",hanja:"苗床",id:4798},{english:"seeding",hangul:"파종",hanja:"播種",id:4799},{english:"seedling",hangul:"묘목",hanja:"苗木",id:4800},{english:"seer",hangul:"예언자",hanja:"預言者",id:4801},{english:"segregation",hangul:"분리",hanja:"分離",id:4802,freq_deg:2888},{english:"selection",hangul:"선발",hanja:"選拔",id:4803},{english:"selection",hangul:"발췌",hanja:"拔萃",id:4804},{english:"self",hangul:"자기",hanja:"自己",id:4805,freq_deg:111},{english:"self",hangul:"자아",hanja:"自我",id:4806},{english:"self denial",hangul:"극기",hanja:"克己",id:4807},{english:"self interest",hangul:"사리",hanja:"私利",id:4808},{english:"semen",hangul:"정액",hanja:"精液",id:4809},{english:"seniority",hangul:"연장",hanja:"年長",id:4810,freq_deg:4151},{english:"sensation",hangul:"감각",hanja:"感覺",id:4811,freq_deg:1098},{english:"sense",hangul:"관능",hanja:"官能",id:4812},{english:"sense",hangul:"의식",hanja:"意識",id:4813,freq_deg:5618},{english:"sensual",hangul:"관능적인",hanja:"官能的",id:4814},{english:"sensuality",hangul:"호색",hanja:"好色",id:4815},{english:"sensuous",hangul:"감각적인",hanja:"感覺的",id:4816},{english:"sentence",hangul:"문장",hanja:"文章",id:4817,freq_deg:2785},{english:"sentence",hangul:"판결",hanja:"判決",id:4818,freq_deg:1347},{english:"sentence",hangul:"선고",hanja:"宣告",id:4819},{english:"sentiment",hangul:"감상적인",hanja:"感傷",id:4820},{english:"sentiment",hangul:"정취",hanja:"情趣",id:4821},{english:"sentiment",hangul:"감상",hanja:"感傷",id:4822,freq_deg:4574},{english:"sentimentalism",hangul:"감상주의",hanja:"感傷主義",id:4823},{english:"separation",hangul:"분리",hanja:"分離",id:4824,freq_deg:2888},{english:"separation",hangul:"별거",hanja:"別居",id:4825},{english:"sequence",hangul:"순서",hanja:"順序",id:4826,freq_deg:1695},{english:"seraglio",hangul:"후궁",hanja:"後宮",id:4827},{english:"serialization",hangul:"연재",hanja:"連載",id:4828},{english:"serpentine",hangul:"사문석",hanja:"蛇紋石",id:4829},{english:"serum",hangul:"혈청",hanja:"血淸",id:4830},{english:"serve",hangul:"봉사하다",hanja:"奉仕",id:4831,freq_deg:4803},{english:"service",hangul:"봉사",hanja:"奉仕",id:4832,freq_deg:3417},{english:"service",hangul:"공헌",hanja:"貢獻",id:4833},{english:"service",hangul:"근무",hanja:"勤務",id:4834,freq_deg:2341},{english:"setback",hangul:"좌절",hanja:"挫折",id:4835},{english:"settlement",hangul:"해결",hanja:"解決",id:4836,freq_deg:1712},{english:"settler",hangul:"개척자",hanja:"開拓者",id:4837},{english:"sewerage",hangul:"하수",hanja:"下水",id:4838},{english:"sewing",hangul:"재봉",hanja:"裁縫",id:4839},{english:"shadow",hangul:"미행자",hanja:"尾行",id:4840},{english:"shale",hangul:"혈암",hanja:"頁岩",id:4841},{english:"shame",hangul:"치욕",hanja:"恥辱",id:4842},{english:"shareholder",hangul:"주주",hanja:"株主",id:4843},{english:"sheet metal",hangul:"판금",hanja:"板金",id:4844},{english:"shell",hangul:"포탄",hanja:"砲彈",id:4845},{english:"shell heap",hangul:"패총",hanja:"貝塚",id:4846},{english:"shelter",hangul:"보호하다",hanja:"保護",id:4847,freq_deg:1446},{english:"shelve",hangul:"묵살하다",hanja:"默殺",id:4848},{english:"shift",hangul:"교대",hanja:"交代",id:4849,freq_deg:4180},{english:"shipbuilding",hangul:"조선",hanja:"造船",id:4850,freq_deg:5599},{english:"shipowner",hangul:"선주",hanja:"船主",id:4851},{english:"shipping",hangul:"출하",hanja:"出荷",id:4852},{english:"shock",hangul:"진동",hanja:"震動",id:4853,freq_deg:4613},{english:"shoe",hangul:"단화",hanja:"短靴",id:4854},{english:"shoot",hangul:"질주하다",hanja:"疾走",id:4855},{english:"shooter",hangul:"사수",hanja:"射手",id:4856},{english:"shooting",hangul:"발사",hanja:"發射",id:4857},{english:"shooting",hangul:"사출",hanja:"射出",id:4858},{english:"shop assistant",hangul:"점원",hanja:"店員",id:4859,freq_deg:5023},{english:"shopgirl",hangul:"여점원",hanja:"女店員",id:4860},{english:"short wave",hangul:"단파",hanja:"短波",id:4861},{english:"shortage",hangul:"결핍",hanja:"缺乏",id:4862},{english:"shortening",hangul:"단축",hanja:"短縮",id:4863},{english:"shot",hangul:"탄환",hanja:"彈丸",id:4864},{english:"shot",hangul:"산탄",hanja:"霰彈",id:4865},{english:"shoulder strap",hangul:"견장",hanja:"肩章",id:4866},{english:"showdown",hangul:"대결",hanja:"對決",id:4867},{english:"shred",hangul:"단편",hanja:"斷片",id:4868,freq_deg:3274},{english:"shrub",hangul:"관목",hanja:"灌木",id:4869},{english:"shutdown",hangul:"휴업",hanja:"休業",id:4870},{english:"sickbed",hangul:"병상",hanja:"病床",id:4871},{english:"sickroom",hangul:"병실",hanja:"病室",id:4872,freq_deg:4802},{english:"side line",hangul:"내직",hanja:"內職",id:4873},{english:"side show",hangul:"여흥",hanja:"餘興",id:4874},{english:"sidewalk",hangul:"인도",hanja:"人道",id:4875,freq_deg:5396},{english:"siding",hangul:"측선",hanja:"側線",id:4876},{english:"sigh",hangul:"탄식",hanja:"歎息",id:4877},{english:"sign",hangul:"간판",hanja:"看板",id:4878,freq_deg:3228},{english:"sign",hangul:"징후",hanja:"徵候",id:4879},{english:"sign",hangul:"신호하다",hanja:"信號",id:4880},{english:"signal",hangul:"신호",hanja:"信號",id:4881,freq_deg:2469},{english:"signalize",hangul:"신호하다",hanja:"信號",id:4882},{english:"signature",hangul:"서명",hanja:"署名",id:4883,freq_deg:4639},{english:"signboard",hangul:"간판",hanja:"看板",id:4884,freq_deg:3228},{english:"significance",hangul:"의미",hanja:"意味",id:4885,freq_deg:205},{english:"signpost",hangul:"도표",hanja:"道標",id:4886},{english:"silence",hangul:"침묵",hanja:"沈默",id:4887,freq_deg:2155},{english:"similarity",hangul:"상사",hanja:"相似",id:4888},{english:"simple interest",hangul:"단리",hanja:"單利",id:4889},{english:"simple sentence",hangul:"단문",hanja:"單文",id:4890},{english:"simplicity",hangul:"단순",hanja:"單純",id:4891,freq_deg:4119},{english:"simplicity",hangul:"간소",hanja:"簡素",id:4892},{english:"simplicity",hangul:"소박",hanja:"素朴",id:4893},{english:"sincerity",hangul:"성의",hanja:"誠意",id:4894},{english:"sinew",hangul:"근육",hanja:"筋肉",id:4895,freq_deg:2293},{english:"single",hangul:"독신",hanja:"獨身",id:4896},{english:"single",hangul:"단일",hanja:"單一",id:4897},{english:"sister",hangul:"자매",hanja:"姉妹",id:4898,freq_deg:4882},{english:"sit",hangul:"착석하다",hanja:"着席",id:4899},{english:"site",hangul:"용지",hanja:"用地",id:4900},{english:"site",hangul:"부지",hanja:"敷地",id:4901},{english:"situation",hangul:"위치",hanja:"位置",id:4902,freq_deg:802},{english:"situation",hangul:"형세",hanja:"形勢",id:4903},{english:"situation",hangul:"입장",hanja:"立場",id:4904,freq_deg:400},{english:"skeleton",hangul:"해골",hanja:"骸骨",id:4905},{english:"skin",hangul:"피부",hanja:"皮膚",id:4906,freq_deg:1056},{english:"skip",hangul:"도약",hanja:"跳躍",id:4907},{english:"skirmisher",hangul:"산병",hanja:"散兵",id:4908},{english:"skull",hangul:"두개골",hanja:"頭蓋骨",id:4909},{english:"skyscraper",hangul:"마천루",hanja:"摩天樓",id:4910},{english:"slaked lime",hangul:"소석회",hanja:"消石灰",id:4911},{english:"slander",hangul:"중상하다",hanja:"中傷",id:4912},{english:"slate",hangul:"점판암",hanja:"粘板岩",id:4913},{english:"slaughter",hangul:"도살",hanja:"屠殺",id:4914},{english:"sleepwalker",hangul:"몽유병자",hanja:"夢遊病者",id:4915},{english:"sleepwalking",hangul:"몽유병",hanja:"夢遊病",id:4916},{english:"sluice gate",hangul:"수문",hanja:"水門",id:4917},{english:"slump",hangul:"부진",hanja:"不振",id:4918},{english:"smallpox",hangul:"천연두",hanja:"天然痘",id:4919},{english:"smelting furnace",hangul:"용광로",hanja:"鎔鑛爐",id:4920},{english:"smoking",hangul:"끽연",hanja:"喫煙",id:4921},{english:"smother",hangul:"묵살하다",hanja:"默殺",id:4922},{english:"snapshot",hangul:"속사",hanja:"速寫",id:4923},{english:"sneer",hangul:"조소",hanja:"嘲笑",id:4924},{english:"snow field",hangul:"설원",hanja:"雪原",id:4925},{english:"soapstone",hangul:"동석",hanja:"凍石",id:4926},{english:"sobriety",hangul:"절주",hanja:"節酒",id:4927},{english:"soccer",hangul:"축구",hanja:"蹴球",id:4928,freq_deg:1160},{english:"society",hangul:"사회",hanja:"社會",id:4929,freq_deg:34},{english:"society",hangul:"협회",hanja:"協會",id:4930},{english:"sodomy",hangul:"남색",hanja:"男色",id:4931},{english:"sodomy",hangul:"수간",hanja:"獸姦",id:4932},{english:"soft palate",hangul:"연구개",hanja:"軟口蓋",id:4933},{english:"soft water",hangul:"연수",hanja:"軟水",id:4934},{english:"softening",hangul:"연화",hanja:"軟化",id:4935},{english:"soil",hangul:"토양",hanja:"土壤",id:4936},{english:"soil",hangul:"토지",hanja:"土地",id:4937},{english:"solace",hangul:"위안",hanja:"慰安",id:4938},{english:"soldier",hangul:"군인",hanja:"軍人",id:4939,freq_deg:2110},{english:"soldier",hangul:"전사",hanja:"戰士",id:4940},{english:"solemnity",hangul:"엄숙",hanja:"嚴肅",id:4941},{english:"solemnity",hangul:"장엄",hanja:"莊嚴",id:4942},{english:"solicitation",hangul:"권유",hanja:"勸誘",id:4943},{english:"solidification",hangul:"응결",hanja:"凝結",id:4944},{english:"solitude",hangul:"고독",hanja:"孤獨",id:4945},{english:"solitude",hangul:"독거",hanja:"獨居",id:4946},{english:"solution",hangul:"해결",hanja:"解決",id:4947,freq_deg:1712},{english:"solution",hangul:"용해",hanja:"溶解",id:4948},{english:"solvent",hangul:"용제",hanja:"溶劑",id:4949},{english:"solvent",hangul:"용매",hanja:"溶媒",id:4950},{english:"somewhat",hangul:"다소",hanja:"多少",id:4951,freq_deg:1053},{english:"somnambulism",hangul:"몽유병",hanja:"夢遊病",id:4952},{english:"song",hangul:"창가",hanja:"唱歌",id:4953,freq_deg:4565},{english:"song",hangul:"가곡",hanja:"歌曲",id:4954},{english:"song",hangul:"가창",hanja:"歌唱",id:4955},{english:"songbird",hangul:"명금",hanja:"鳴禽",id:4956},{english:"sophism",hangul:"궤변",hanja:"詭辯",id:4957},{english:"sophistry",hangul:"궤변",hanja:"詭辯",id:4958},{english:"sorcery",hangul:"마법",hanja:"魔法",id:4959},{english:"sorcery",hangul:"마술",hanja:"魔術",id:4960},{english:"sorrow",hangul:"불행",hanja:"不幸",id:4961,freq_deg:3118},{english:"sorting",hangul:"구분",hanja:"區分",id:4962,freq_deg:2243},{english:"soul",hangul:"영혼",hanja:"靈魂",id:4963,freq_deg:2232},{english:"soul",hangul:"정신",hanja:"精神",id:4964,freq_deg:287},{english:"sound",hangul:"음향",hanja:"音響",id:4965},{english:"sound wave",hangul:"음파",hanja:"音波",id:4966},{english:"sounding",hangul:"측심",hanja:"測深",id:4967},{english:"sounding lead",hangul:"측연",hanja:"測鉛",id:4968},{english:"source",hangul:"근원",hanja:"根源",id:4969,freq_deg:2507},{english:"source",hangul:"원천",hanja:"源泉",id:4970},{english:"source",hangul:"출처",hanja:"出處",id:4971},{english:"source",hangul:"원인",hanja:"原因",id:4972,freq_deg:583},{english:"Southeast",hangul:"남동",hanja:"南東",id:4973},{english:"Southwest",hangul:"남서",hanja:"南西",id:4974},{english:"souvenir",hangul:"기념품",hanja:"記念品",id:4975,freq_deg:5451},{english:"sovereignty",hangul:"주권",hanja:"主權",id:4976},{english:"space",hangul:"공간",hanja:"空間",id:4977,freq_deg:554},{english:"space",hangul:"우주",hanja:"宇宙",id:4978,freq_deg:513},{english:"space",hangul:"간격",hanja:"間隔",id:4979,freq_deg:3402},{english:"span",hangul:"전장",hanja:"全長",id:4980},{english:"spasm",hangul:"발작",hanja:"發作",id:4981},{english:"spasmodic",hangul:"발작적인",hanja:"發作的",id:4982},{english:"speciality",hangul:"전문",hanja:"專門",id:4983,freq_deg:901},{english:"specie",hangul:"정화",hanja:"正貨",id:4984},{english:"specific gravity",hangul:"비중",hanja:"比重",id:4985,freq_deg:2189},{english:"specific heat",hangul:"비열",hanja:"比熱",id:4986},{english:"specimen",hangul:"표본",hanja:"標本",id:4987},{english:"spectacle",hangul:"장관",hanja:"壯觀",id:4988,freq_deg:495},{english:"spectacle",hangul:"안경",hanja:"眼鏡",id:4989,freq_deg:2301},{english:"specter",hangul:"유령",hanja:"幽靈",id:4990},{english:"spectrum",hangul:"분광",hanja:"分光",id:4991},{english:"speculate",hangul:"추측하다",hanja:"推測",id:4992},{english:"speculation",hangul:"사색",hanja:"思索",id:4993},{english:"speculation",hangul:"투기",hanja:"投機",id:4994},{english:"speed",hangul:"속력",hanja:"速力",id:4995},{english:"speed",hangul:"속도",hanja:"速度",id:4996,freq_deg:948},{english:"spell",hangul:"주문",hanja:"呪文",id:4997,freq_deg:5354},{english:"spelling",hangul:"철자",hanja:"綴字",id:4998},{english:"sperm",hangul:"정충",hanja:"精蟲",id:4999},{english:"sperm",hangul:"정자",hanja:"精子",id:5000},{english:"sphere",hangul:"구체",hanja:"球體",id:5001},{english:"sphincter",hangul:"괄약근",hanja:"括約筋",id:5002},{english:"spinal column",hangul:"척주",hanja:"脊柱",id:5003},{english:"spindle",hangul:"방추",hanja:"紡錘",id:5004},{english:"spirit",hangul:"영혼",hanja:"靈魂",id:5005,freq_deg:2232},{english:"spirit",hangul:"정신",hanja:"精神",id:5006,freq_deg:287},{english:"spiritualism",hangul:"강신술",hanja:"降神術",id:5007},{english:"spiritualism",hangul:"유심론",hanja:"唯心論",id:5008},{english:"spite",hangul:"악의",hanja:"惡意",id:5009},{english:"spleen",hangul:"비장",hanja:"脾臟",id:5010},{english:"splinter",hangul:"파편",hanja:"破片",id:5011},{english:"sponge",hangul:"해면",hanja:"海綿",id:5012},{english:"spontaneous",hangul:"자발적인",hanja:"自發的",id:5013},{english:"sporadic",hangul:"산발적인",hanja:"散發",id:5014},{english:"spouse",hangul:"배우자",hanja:"配偶者",id:5015,freq_deg:4919},{english:"spouse",hangul:"부부",hanja:"夫婦",id:5016,freq_deg:871},{english:"sprayer",hangul:"분무기",hanja:"噴霧器",id:5017},{english:"spread",hangul:"보급",hanja:"普及",id:5018},{english:"spring",hangul:"도약하다",hanja:"跳躍",id:5019},{english:"sprinkling",hangul:"살포",hanja:"撒布",id:5020},{english:"sprite",hangul:"요정",hanja:"妖精",id:5021},{english:"spur",hangul:"박차",hanja:"拍車",id:5022},{english:"squad",hangul:"분대",hanja:"分隊",id:5023},{english:"squall",hangul:"돌풍",hanja:"突風",id:5024},{english:"squall",hangul:"질풍",hanja:"疾風",id:5025},{english:"square",hangul:"평방",hanja:"平方",id:5026},{english:"squealer",hangul:"밀고자",hanja:"密告者",id:5027},{english:"squeeze",hangul:"착취하다",hanja:"搾取",id:5028},{english:"stability",hangul:"안정",hanja:"安定",id:5029,freq_deg:1299},{english:"staff",hangul:"부원",hanja:"部員",id:5030},{english:"staff officer",hangul:"참모",hanja:"參謀",id:5031},{english:"stage",hangul:"무대",hanja:"舞臺",id:5032,freq_deg:651},{english:"stagecoach",hangul:"역마차",hanja:"驛馬車",id:5033},{english:"stagnation",hangul:"침체",hanja:"沈滯",id:5034},{english:"stain",hangul:"오점",hanja:"汚点",id:5035},{english:"stake",hangul:"화형",hanja:"火刑",id:5036},{english:"stalactite",hangul:"종유석",hanja:"鍾乳石",id:5037},{english:"stalagmite",hangul:"석순",hanja:"石筍",id:5038},{english:"stallion",hangul:"종마",hanja:"種馬",id:5039},{english:"standard",hangul:"표준",hanja:"標準",id:5040,freq_deg:3308},{english:"standard",hangul:"본위",hanja:"本位",id:5041},{english:"standardization",hangul:"획일",hanja:"劃一",id:5042},{english:"standpoint",hangul:"입장",hanja:"立場",id:5043,freq_deg:400},{english:"standstill",hangul:"정지",hanja:"停止",id:5044,freq_deg:4223},{english:"staple food",hangul:"주식",hanja:"主食",id:5045,freq_deg:1609},{english:"starboard",hangul:"우현",hanja:"右舷",id:5046},{english:"starch",hangul:"전분",hanja:"澱粉",id:5047},{english:"stare",hangul:"응시하다",hanja:"凝視",id:5048},{english:"stare",hangul:"응시",hanja:"凝視",id:5049},{english:"starting point",hangul:"기점",hanja:"起点",id:5050},{english:"starvation",hangul:"아사",hanja:"餓死",id:5051},{english:"state",hangul:"국가",hanja:"國家",id:5052,freq_deg:125},{english:"statement",hangul:"진술",hanja:"陳述",id:5053},{english:"statement",hangul:"성명",hanja:"聲明",id:5054,freq_deg:2345},{english:"statesman",hangul:"정치가",hanja:"政治家",id:5055},{english:"static electricity",hangul:"정전기",hanja:"靜電氣",id:5056},{english:"statics",hangul:"정역학",hanja:"靜力學",id:5057},{english:"statistical",hangul:"통계적인",hanja:"統計的",id:5058},{english:"statistics",hangul:"통계",hanja:"統計",id:5059,freq_deg:2829},{english:"steam whistle",hangul:"기적",hanja:"汽笛",id:5060,freq_deg:4257},{english:"steamship",hangul:"기선",hanja:"汽船",id:5061},{english:"steel",hangul:"강철",hanja:"鋼鐵",id:5062},{english:"stench",hangul:"악취",hanja:"惡臭",id:5063},{english:"stenography",hangul:"속기",hanja:"速記",id:5064},{english:"step",hangul:"조치",hanja:"措置",id:5065},{english:"sterility",hangul:"중성",hanja:"中性",id:5066},{english:"sterilization",hangul:"살균",hanja:"殺菌",id:5067},{english:"sterilization",hangul:"멸균",hanja:"滅菌",id:5068},{english:"sterilization",hangul:"소독",hanja:"消毒",id:5069},{english:"sternum",hangul:"흉골",hanja:"胸骨",id:5070},{english:"steward",hangul:"집사",hanja:"執事",id:5071},{english:"stigma",hangul:"오명",hanja:"汚名",id:5072},{english:"stillbirth",hangul:"사산",hanja:"死産",id:5073},{english:"stilt",hangul:"죽마",hanja:"竹馬",id:5074},{english:"stimulation",hangul:"흥분",hanja:"興奮",id:5075,freq_deg:4107},{english:"stimulus",hangul:"자극",hanja:"刺戟",id:5076,freq_deg:2524},{english:"stipulation",hangul:"약정",hanja:"約定",id:5077},{english:"stock certificate",hangul:"주권",hanja:"株券",id:5078},{english:"stoker",hangul:"화부",hanja:"火夫",id:5079},{english:"stolidity",hangul:"둔감",hanja:"鈍感",id:5080},{english:"stoma",hangul:"기공",hanja:"氣孔",id:5081},{english:"stone",hangul:"석재",hanja:"石材",id:5082},{english:"stone fruit",hangul:"핵과",hanja:"核果",id:5083},{english:"stonemason",hangul:"석공",hanja:"石工",id:5084},{english:"stop",hangul:"종지",hanja:"終止",id:5085},{english:"stoppage",hangul:"정지",hanja:"停止",id:5086,freq_deg:4223},{english:"storage",hangul:"저장",hanja:"貯藏",id:5087},{english:"storage",hangul:"보관",hanja:"保管",id:5088,freq_deg:3970},{english:"storage battery",hangul:"축전지",hanja:"蓄電池",id:5089},{english:"store",hangul:"백화점",hanja:"百貨店",id:5090,freq_deg:1718},{english:"storehouse",hangul:"창고",hanja:"倉庫",id:5091,freq_deg:2907},{english:"storm",hangul:"폭풍우",hanja:"暴風雨",id:5092},{english:"stove",hangul:"난로",hanja:"煖爐",id:5093},{english:"straggling",hangul:"산재하다",hanja:"散在",id:5094},{english:"strainer",hangul:"여과기",hanja:"濾過器",id:5095},{english:"strangulation",hangul:"교살",hanja:"絞殺",id:5096},{english:"stratagem",hangul:"계략",hanja:"計略",id:5097},{english:"strategy",hangul:"병법",hanja:"兵法",id:5098},{english:"strategy",hangul:"전략",hanja:"戰略",id:5099},{english:"stratocumulus",hangul:"층적운",hanja:"層積雲",id:5100},{english:"stratosphere",hangul:"성층권",hanja:"成層圈",id:5101},{english:"stratum",hangul:"지층",hanja:"地層",id:5102},{english:"streak",hangul:"광맥",hanja:"鑛脈",id:5103},{english:"street",hangul:"가로",hanja:"街路",id:5104,freq_deg:5115},{english:"stress",hangul:"압력",hanja:"壓力",id:5105,freq_deg:1748},{english:"stricture",hangul:"협착",hanja:"狹窄",id:5106},{english:"strife",hangul:"투쟁",hanja:"鬪爭",id:5107},{english:"stronghold",hangul:"요새",hanja:"要塞",id:5108,freq_deg:3046},{english:"structuralism",hangul:"구조주의",hanja:"構造主義",id:5109},{english:"student",hangul:"학생",hanja:"學生",id:5110,freq_deg:215},{english:"studhorse",hangul:"종마",hanja:"種馬",id:5111},{english:"study",hangul:"서재",hanja:"書齋",id:5112},{english:"stupidity",hangul:"우둔",hanja:"愚鈍",id:5113},{english:"stupor",hangul:"혼수",hanja:"昏睡",id:5114},{english:"style",hangul:"양식",hanja:"樣式",id:5115,freq_deg:5584},{english:"style",hangul:"체재",hanja:"體裁",id:5116},{english:"style",hangul:"화주",hanja:"花柱",id:5117},{english:"stylus",hangul:"철필",hanja:"鐵筆",id:5118},{english:"subject",hangul:"주제",hanja:"主題",id:5119,freq_deg:752},{english:"sublimation",hangul:"승화",hanja:"昇華",id:5120},{english:"submission",hangul:"복종",hanja:"服從",id:5121},{english:"subordination",hangul:"종속",hanja:"從屬",id:5122},{english:"subscriber",hangul:"예약자",hanja:"豫約者",id:5123},{english:"subscription",hangul:"예약",hanja:"豫約",id:5124,freq_deg:5174},{english:"subscription",hangul:"응모",hanja:"應募",id:5125},{english:"subsidence",hangul:"함몰",hanja:"陷沒",id:5126},{english:"subsidiary",hangul:"자회사",hanja:"子會社",id:5127},{english:"substance",hangul:"물질",hanja:"物質",id:5128,freq_deg:817},{english:"substance",hangul:"실체",hanja:"實體",id:5129,freq_deg:2171},{english:"substance",hangul:"실질",hanja:"實質",id:5130},{english:"substantiation",hangul:"입증",hanja:"立證",id:5131},{english:"substation",hangul:"지서",hanja:"支署",id:5132},{english:"substitute",hangul:"대리인",hanja:"代理人",id:5133},{english:"substitute",hangul:"대체하다",hanja:"代替",id:5134},{english:"substitution",hangul:"대용",hanja:"代用",id:5135},{english:"substitution",hangul:"대입",hanja:"代入",id:5136},{english:"subtenancy",hangul:"전차",hanja:"轉借",id:5137},{english:"subtotal",hangul:"소계",hanja:"小計",id:5138},{english:"subtraction",hangul:"감법",hanja:"減法",id:5139},{english:"suburb",hangul:"교외",hanja:"郊外",id:5140,freq_deg:5300},{english:"subway",hangul:"지하철",hanja:"地下鐵",id:5141,freq_deg:1543},{english:"success",hangul:"성공",hanja:"成功",id:5142,freq_deg:2043},{english:"succession",hangul:"상속",hanja:"相續",id:5143},{english:"succession",hangul:"계승",hanja:"繼承",id:5144},{english:"sucrose",hangul:"자당",hanja:"蔗糖",id:5145},{english:"suffering",hangul:"수난",hanja:"受難",id:5146},{english:"suffocation",hangul:"질식",hanja:"窒息",id:5147},{english:"suggestion",hangul:"암시",hanja:"暗示",id:5148,freq_deg:4282},{english:"suggestion",hangul:"제안",hanja:"提案",id:5149,freq_deg:3301},{english:"suicidal",hangul:"자살적인",hanja:"自殺的",id:5150},{english:"suicide",hangul:"자살",hanja:"自殺",id:5151,freq_deg:3768},{english:"suitability",hangul:"적당",hanja:"適當",id:5152},{english:"summary",hangul:"적요",hanja:"摘要",id:5153},{english:"summary",hangul:"요약",hanja:"要約",id:5154},{english:"summit",hangul:"정상",hanja:"頂上",id:5155,freq_deg:3823},{english:"summit",hangul:"절정",hanja:"絶頂",id:5156},{english:"sun",hangul:"태양",hanja:"太陽",id:5157,freq_deg:1555},{english:"sunlight",hangul:"일광",hanja:"日光",id:5158},{english:"sunset",hangul:"일몰",hanja:"日沒",id:5159},{english:"sunstroke",hangul:"일사병",hanja:"日射病",id:5160},{english:"superabundance",hangul:"과다",hanja:"過多",id:5161},{english:"superficiality",hangul:"천박",hanja:"淺薄",id:5162},{english:"superhuman",hangul:"초인적인",hanja:"超人的",id:5163},{english:"superintendence",hangul:"감독",hanja:"監督",id:5164,freq_deg:597},{english:"superiority",hangul:"우세",hanja:"優勢",id:5165},{english:"superman",hangul:"초인",hanja:"超人",id:5166},{english:"superstition",hangul:"미신",hanja:"迷信",id:5167},{english:"supervision",hangul:"감독",hanja:"監督",id:5168,freq_deg:597},{english:"supplement",hangul:"보충",hanja:"補充",id:5169},{english:"supplement",hangul:"보족",hanja:"補足",id:5170},{english:"supplement",hangul:"보유",hanja:"補遺",id:5171},{english:"supply",hangul:"공급",hanja:"供給",id:5172,freq_deg:1559},{english:"supply",hangul:"보급",hanja:"補給",id:5173},{english:"supply",hangul:"공급하다",hanja:"供給",id:5174},{english:"support",hangul:"지지",hanja:"支持",id:5175,freq_deg:2334},{english:"support",hangul:"부양하다",hanja:"扶養",id:5176},{english:"support",hangul:"지원하다",hanja:"支援",id:5177,freq_deg:2150},{english:"supporter",hangul:"찬성자",hanja:"贊成者",id:5178},{english:"supporting",hangul:"지지하는",hanja:"支持",id:5179},{english:"suppose",hangul:"상상하다",hanja:"想像",id:5180,freq_deg:2443},{english:"supposition",hangul:"가정",hanja:"假定",id:5181,freq_deg:3531},{english:"suppression",hangul:"억제",hanja:"抑制",id:5182},{english:"suppression",hangul:"진압",hanja:"鎭壓",id:5183},{english:"suppuration",hangul:"화농",hanja:"化膿",id:5184},{english:"supremacy",hangul:"지고",hanja:"至高",id:5185},{english:"supremacy",hangul:"주권",hanja:"主權",id:5186},{english:"surfeit",hangul:"포만",hanja:"飽滿",id:5187},{english:"surprise attack",hangul:"기습",hanja:"奇襲",id:5188},{english:"surrealism",hangul:"초현실주의",hanja:"超現實主義",id:5189},{english:"surrounding",hangul:"주위",hanja:"周圍",id:5190,freq_deg:667},{english:"surveillance",hangul:"감시",hanja:"監視",id:5191},{english:"survey",hangul:"조사하다",hanja:"調査",id:5192,freq_deg:794},{english:"survive",hangul:"잔존하다",hanja:"殘存",id:5193},{english:"survivor",hangul:"생존자",hanja:"生存者",id:5194},{english:"suspect",hangul:"의심하다",hanja:"疑心",id:5195,freq_deg:2471},{english:"suspense",hangul:"불안",hanja:"不安",id:5196,freq_deg:1734},{english:"suspension bridge",hangul:"적교",hanja:"吊橋",id:5197},{english:"suspicion",hangul:"의심",hanja:"疑心",id:5198,freq_deg:3170},{english:"sustain",hangul:"지지하다",hanja:"支持",id:5199},{english:"sustain",hangul:"부양하다",hanja:"扶養",id:5200},{english:"sutra",hangul:"경전",hanja:"經典",id:5201},{english:"suture",hangul:"봉합",hanja:"縫合",id:5202},{english:"swan",hangul:"백조",hanja:"白鳥",id:5203},{english:"sweating",hangul:"발한",hanja:"發汗",id:5204},{english:"sweetheart",hangul:"연인",hanja:"戀人",id:5205,freq_deg:4150},{english:"swimming",hangul:"수영",hanja:"水泳",id:5206,freq_deg:2493},{english:"swindle",hangul:"사취",hanja:"詐取",id:5207},{english:"swindle",hangul:"사기",hanja:"詐欺",id:5208,freq_deg:4502},{english:"sword",hangul:"무력",hanja:"武力",id:5209},{english:"sword dance",hangul:"검무",hanja:"劍舞",id:5210},{english:"syllable",hangul:"음절",hanja:"音節",id:5211},{english:"symbiosis",hangul:"공생",hanja:"共生",id:5212},{english:"symbolic",hangul:"상징적인",hanja:"象徵的",id:5213},{english:"sympathizer",hangul:"동조자",hanja:"同調者",id:5214},{english:"sympathy",hangul:"동정",hanja:"同情",id:5215},{english:"sympathy",hangul:"동조",hanja:"同調",id:5216},{english:"symphony",hangul:"교향곡",hanja:"交響曲",id:5217},{english:"symptom",hangul:"징후",hanja:"徵候",id:5218},{english:"symptom",hangul:"증후",hanja:"症候",id:5219},{english:"syndrome",hangul:"증후군",hanja:"症候群",id:5220},{english:"synthesis",hangul:"종합",hanja:"綜合",id:5221,freq_deg:1117},{english:"synthesis",hangul:"통합",hanja:"統合",id:5222,freq_deg:1602},{english:"synthesis",hangul:"합성",hanja:"合成",id:5223},{english:"syphilis",hangul:"매독",hanja:"梅毒",id:5224},{english:"system",hangul:"체계",hanja:"體系",id:5225},{english:"system",hangul:"계통",hanja:"系統",id:5226},{english:"system",hangul:"제도",hanja:"制度",id:5227},{english:"system",hangul:"방식",hanja:"方式",id:5228,freq_deg:404},{english:"table",hangul:"탁자",hanja:"卓子",id:5229,freq_deg:3632},{english:"table tennis",hangul:"탁구",hanja:"卓球",id:5230,freq_deg:5401},{english:"tableland",hangul:"대지",hanja:"臺地",id:5231},{english:"tableland",hangul:"고원",hanja:"高原",id:5232},{english:"tablet",hangul:"정제",hanja:"錠劑",id:5233},{english:"tactician",hangul:"책사",hanja:"策士",id:5234},{english:"tactics",hangul:"전술",hanja:"戰術",id:5235},{english:"tactics",hangul:"책략",hanja:"策略",id:5236},{english:"tail",hangul:"미행하다",hanja:"尾行",id:5237},{english:"take",hangul:"채용하다",hanja:"採用",id:5238},{english:"talus",hangul:"거골",hanja:"距骨",id:5239},{english:"target",hangul:"목표",hanja:"目標",id:5240,freq_deg:918},{english:"taste",hangul:"풍미",hanja:"風味",id:5241},{english:"taste",hangul:"미각",hanja:"味覺",id:5242},{english:"taste",hangul:"취미",hanja:"趣味",id:5243,freq_deg:2312},{english:"taste",hangul:"기호",hanja:"嗜好",id:5244,freq_deg:3955},{english:"taste",hangul:"풍치",hanja:"風致",id:5245},{english:"teacher",hangul:"선생",hanja:"先生",id:5246,freq_deg:463},{english:"tear",hangul:"돌진하다",hanja:"突進",id:5247},{english:"technical terms",hangul:"술어",hanja:"術語",id:5248},{english:"technique",hangul:"기교",hanja:"技巧",id:5249},{english:"technologist",hangul:"공학자",hanja:"工學者",id:5250},{english:"telegram",hangul:"전보",hanja:"電報",id:5251},{english:"telegraph",hangul:"타전하다",hanja:"打電",id:5252},{english:"telescope",hangul:"망원경",hanja:"望遠鏡",id:5253,freq_deg:3794},{english:"temperament",hangul:"기질",hanja:"氣質",id:5254},{english:"temperance",hangul:"절제",hanja:"節制",id:5255},{english:"temperance",hangul:"절주",hanja:"節酒",id:5256},{english:"temperance",hangul:"금주",hanja:"禁酒",id:5257},{english:"temple",hangul:"신전",hanja:"神殿",id:5258},{english:"tempo",hangul:"박자",hanja:"拍子",id:5259},{english:"tempt",hangul:"유혹하다",hanja:"誘惑",id:5260},{english:"tendency",hangul:"경향",hanja:"傾向",id:5261,freq_deg:969},{english:"tension",hangul:"긴장",hanja:"緊張",id:5262,freq_deg:2137},{english:"tension",hangul:"장력",hanja:"張力",id:5263},{english:"tentacle",hangul:"촉수",hanja:"觸手",id:5264},{english:"term",hangul:"기한",hanja:"期限",id:5265},{english:"term",hangul:"기간",hanja:"期間",id:5266,freq_deg:604},{english:"term",hangul:"용어",hanja:"用語",id:5267,freq_deg:1657},{english:"term",hangul:"명사",hanja:"名辭",id:5268},{english:"terminus",hangul:"종점",hanja:"終点",id:5269},{english:"terrain",hangul:"지형",hanja:"地形",id:5270},{english:"terrestrial magnetism",hangul:"지자기",hanja:"地磁氣",id:5271},{english:"territory",hangul:"영토",hanja:"領土",id:5272},{english:"territory",hangul:"판도",hanja:"版圖",id:5273},{english:"terror",hangul:"공포",hanja:"恐怖",id:5274,freq_deg:1863},{english:"test tube",hangul:"시험관",hanja:"試驗管",id:5275},{english:"testa",hangul:"종피",hanja:"種皮",id:5276},{english:"testate",hangul:"유언자",hanja:"遺言者",id:5277},{english:"testator",hangul:"유언자",hanja:"遺言者",id:5278},{english:"testicle",hangul:"고환",hanja:"睾丸",id:5279},{english:"testimony",hangul:"증언",hanja:"證言",id:5280},{english:"textile",hangul:"직물",hanja:"織物",id:5281},{english:"thank",hangul:"감사하다",hanja:"感謝",id:5282,freq_deg:3838},{english:"thaw",hangul:"해동",hanja:"解凍",id:5283},{english:"theism",hangul:"유신론",hanja:"有神論",id:5284},{english:"theme",hangul:"논제",hanja:"論題",id:5285},{english:"theme",hangul:"주제",hanja:"主題",id:5286,freq_deg:752},{english:"theology",hangul:"신학",hanja:"神學",id:5287},{english:"theorem",hangul:"정리",hanja:"定理",id:5288,freq_deg:5608},{english:"theory",hangul:"이론",hanja:"理論",id:5289},{english:"thermodynamics",hangul:"열역학",hanja:"熱力學",id:5290},{english:"thesis",hangul:"정립",hanja:"定立",id:5291},{english:"think",hangul:"상상하다",hanja:"想像",id:5292,freq_deg:2443},{english:"threadworm",hangul:"요충",hanja:"蟯蟲",id:5293},{english:"threat",hangul:"협박",hanja:"脅迫",id:5294},{english:"thrombus",hangul:"혈전",hanja:"血栓",id:5295},{english:"throne",hangul:"왕좌",hanja:"王座",id:5296},{english:"throne",hangul:"옥좌",hanja:"玉座",id:5297},{english:"throne",hangul:"왕위",hanja:"王位",id:5298},{english:"throng",hangul:"군중",hanja:"群衆",id:5299},{english:"tibia",hangul:"경골",hanja:"脛骨",id:5300},{english:"tidal current",hangul:"조류",hanja:"潮流",id:5301},{english:"tide",hangul:"조류",hanja:"潮流",id:5302},{english:"tide",hangul:"풍조",hanja:"風潮",id:5303},{english:"timber",hangul:"재목",hanja:"材木",id:5304},{english:"timbre",hangul:"음색",hanja:"音色",id:5305},{english:"time",hangul:"시간",hanja:"時間",id:5306,freq_deg:491},{english:"time",hangul:"시각",hanja:"時刻",id:5307,freq_deg:3121},{english:"time",hangul:"시기",hanja:"時期",id:5308,freq_deg:3341},{english:"time",hangul:"시세",hanja:"時世",id:5309},{english:"time",hangul:"박자",hanja:"拍子",id:5310},{english:"time signal",hangul:"시보",hanja:"時報",id:5311},{english:"tip",hangul:"선단",hanja:"先端",id:5312},{english:"title",hangul:"표제",hanja:"表題",id:5313},{english:"title",hangul:"자막",hanja:"字幕",id:5314},{english:"toast",hangul:"축배",hanja:"祝杯",id:5315},{english:"toilet",hangul:"변소",hanja:"便所",id:5316},{english:"tolerance",hangul:"아량",hanja:"雅量",id:5317},{english:"tolerance",hangul:"공차",hanja:"公差",id:5318},{english:"toleration",hangul:"묵인",hanja:"默認",id:5319},{english:"tombstone",hangul:"묘석",hanja:"墓石",id:5320},{english:"tone quality",hangul:"음색",hanja:"音色",id:5321},{english:"tonsil",hangul:"편도선",hanja:"扁桃腺",id:5322},{english:"tool",hangul:"도구",hanja:"道具",id:5323,freq_deg:2085},{english:"tool",hangul:"공구",hanja:"工具",id:5324},{english:"toothache",hangul:"치통",hanja:"齒痛",id:5325},{english:"top",hangul:"정상",hanja:"頂上",id:5326,freq_deg:3823},{english:"topic",hangul:"화제",hanja:"話題",id:5327,freq_deg:1728},{english:"topography",hangul:"지세",hanja:"地勢",id:5328},{english:"topography",hangul:"지지",hanja:"地誌",id:5329,freq_deg:2334},{english:"torpedo",hangul:"어뢰",hanja:"魚雷",id:5330},{english:"torture",hangul:"고문",hanja:"拷問",id:5331},{english:"touch",hangul:"접촉",hanja:"接觸",id:5332,freq_deg:2196},{english:"touch",hangul:"필적하다",hanja:"匹敵",id:5333},{english:"toxin",hangul:"독소",hanja:"毒素",id:5334},{english:"trace",hangul:"형적",hanja:"形跡",id:5335},{english:"trace",hangul:"흔적",hanja:"痕跡",id:5336,freq_deg:2365},{english:"tracer bullet",hangul:"예광탄",hanja:"曳光彈",id:5337},{english:"trachea",hangul:"기관",hanja:"氣管",id:5338,freq_deg:399},{english:"tracing",hangul:"투사",hanja:"透寫",id:5339},{english:"track",hangul:"선로",hanja:"線路",id:5340},{english:"trade",hangul:"매매",hanja:"賣買",id:5341},{english:"trade",hangul:"상업",hanja:"商業",id:5342,freq_deg:2712},{english:"trade",hangul:"매매하다",hanja:"賣買",id:5343},{english:"trade name",hangul:"상호",hanja:"商號",id:5344},{english:"trader",hangul:"상인",hanja:"商人",id:5345,freq_deg:3201},{english:"tradition",hangul:"인습",hanja:"因習",id:5346},{english:"tradition",hangul:"전통",hanja:"傳統",id:5347,freq_deg:791},{english:"tradition",hangul:"구전",hanja:"口傳",id:5348},{english:"tradition",hangul:"전승",hanja:"傳承",id:5349},{english:"traffic",hangul:"교통",hanja:"交通",id:5350,freq_deg:1103},{english:"tragedy",hangul:"비극",hanja:"悲劇",id:5351,freq_deg:2028},{english:"tragic",hangul:"비극적인",hanja:"悲劇的",id:5352},{english:"traitor",hangul:"반역자",hanja:"反逆者",id:5353},{english:"transcribe",hangul:"전사하다",hanja:"轉寫",id:5354},{english:"transfiguration",hangul:"변모",hanja:"變貌",id:5355},{english:"transformation",hangul:"변형",hanja:"變形",id:5356},{english:"transition",hangul:"변천",hanja:"變遷",id:5357},{english:"transitional",hangul:"과도적인",hanja:"過渡的",id:5358},{english:"translation",hangul:"번역",hanja:"飜譯",id:5359,freq_deg:4737},{english:"translator",hangul:"역자",hanja:"譯者",id:5360},{english:"translator",hangul:"번역자",hanja:"飜譯者",id:5361},{english:"transmission",hangul:"전송",hanja:"傳送",id:5362},{english:"transmission",hangul:"전도",hanja:"傳導",id:5363},{english:"transmission",hangul:"송신",hanja:"送信",id:5364},{english:"transmission",hangul:"발신",hanja:"發信",id:5365},{english:"transmit",hangul:"방송하다",hanja:"放送",id:5366,freq_deg:4633},{english:"transmutation",hangul:"변이",hanja:"變移",id:5367},{english:"transport",hangul:"수송하다",hanja:"輸送",id:5368},{english:"transportation",hangul:"수송",hanja:"輸送",id:5369},{english:"transposition",hangul:"이항",hanja:"移項",id:5370},{english:"transposition",hangul:"전위",hanja:"轉位",id:5371},{english:"travel",hangul:"여행하다",hanja:"旅行",id:5372,freq_deg:4361},{english:"traveling",hangul:"여행하는",hanja:"旅行",id:5373},{english:"treachery",hangul:"반역",hanja:"反逆",id:5374},{english:"treasure",hangul:"보물",hanja:"寶物",id:5375},{english:"treasure",hangul:"재보",hanja:"財寶",id:5376},{english:"treasure",hangul:"비장하다",hanja:"秘藏",id:5377},{english:"treatment",hangul:"처리",hanja:"處理",id:5378,freq_deg:1039},{english:"treatment",hangul:"가공",hanja:"加工",id:5379},{english:"treatment",hangul:"대우",hanja:"待遇",id:5380},{english:"treaty",hangul:"조약",hanja:"條約",id:5381},{english:"trench",hangul:"참호",hanja:"塹壕",id:5382},{english:"trial",hangul:"시련",hanja:"試練",id:5383},{english:"trial",hangul:"재판",hanja:"裁判",id:5384,freq_deg:1760},{english:"trial",hangul:"심리",hanja:"審理",id:5385,freq_deg:2093},{english:"trial run",hangul:"시운전",hanja:"試運轉",id:5386},{english:"tribe",hangul:"부족",hanja:"部族",id:5387,freq_deg:1632},{english:"tribe",hangul:"종족",hanja:"種族",id:5388},{english:"triceps",hangul:"삼두근",hanja:"三頭筋",id:5389},{english:"trick",hangul:"계략",hanja:"計略",id:5390},{english:"trip",hangul:"여행",hanja:"旅行",id:5391,freq_deg:877},{english:"tripod",hangul:"삼각",hanja:"三脚",id:5392},{english:"triumvirate",hangul:"삼두정치",hanja:"三頭政治",id:5393},{english:"troglodyte",hangul:"유인원",hanja:"類人猿",id:5394},{english:"troop",hangul:"군대",hanja:"軍隊",id:5395,freq_deg:1352},{english:"trophy",hangul:"상품",hanja:"賞品",id:5396,freq_deg:859},{english:"trophy",hangul:"상배",hanja:"賞杯",id:5397},{english:"trouble",hangul:"분쟁",hanja:"紛爭",id:5398},{english:"truce",hangul:"휴전",hanja:"休戰",id:5399},{english:"trunk line",hangul:"간선",hanja:"幹線",id:5400},{english:"trust",hangul:"신임",hanja:"信任",id:5401},{english:"trust",hangul:"신탁",hanja:"信託",id:5402},{english:"trust",hangul:"위탁하다",hanja:"委託",id:5403},{english:"truth",hangul:"진리",hanja:"眞理",id:5404,freq_deg:1554},{english:"truth",hangul:"진실",hanja:"眞實",id:5405,freq_deg:1777},{english:"truth",hangul:"사실",hanja:"事實",id:5406,freq_deg:599},{english:"tuber",hangul:"괴경",hanja:"塊莖",id:5407},{english:"tune",hangul:"곡조",hanja:"曲調",id:5408},{english:"tung oil",hangul:"동유",hanja:"桐油",id:5409},{english:"tunic",hangul:"피막",hanja:"被膜",id:5410},{english:"tuning fork",hangul:"음차",hanja:"音叉",id:5411},{english:"turbulence",hangul:"난기류",hanja:"亂氣流",id:5412},{english:"turning",hangul:"회전",hanja:"回轉",id:5413,freq_deg:4481},{english:"turning",hangul:"선회",hanja:"旋回",id:5414},{english:"tympanum",hangul:"중이",hanja:"中耳",id:5415},{english:"type",hangul:"전형",hanja:"典型",id:5416},{english:"typhoon",hangul:"태풍",hanja:"台風",id:5417,freq_deg:3713},{english:"tyranny",hangul:"폭정",hanja:"暴政",id:5418},{english:"tyrant",hangul:"참주",hanja:"僭主",id:5419},{english:"tyrant",hangul:"폭군",hanja:"暴君",id:5420},{english:"ugliness",hangul:"추악",hanja:"醜惡",id:5421},{english:"ulcer",hangul:"궤양",hanja:"潰瘍",id:5422},{english:"ultrahigh frequency",hangul:"극초단파",hanja:"極超短波",id:5423},{english:"unchastity",hangul:"부정",hanja:"不貞",id:5424,freq_deg:1023},{english:"undercurrent",hangul:"암류",hanja:"暗流",id:5425},{english:"undergo",hangul:"경험하다",hanja:"經驗",id:5426,freq_deg:1878},{english:"undersecretary",hangul:"차관",hanja:"次官",id:5427},{english:"understanding",hangul:"양해",hanja:"諒解",id:5428},{english:"undertake",hangul:"보증하다",hanja:"保證",id:5429},{english:"undulation",hangul:"기복",hanja:"起伏",id:5430},{english:"uneasiness",hangul:"불안",hanja:"不安",id:5431,freq_deg:1734},{english:"unemployment",hangul:"실직",hanja:"失職",id:5432},{english:"unhappiness",hangul:"불행",hanja:"不幸",id:5433,freq_deg:3118},{english:"unification",hangul:"통일",hanja:"統一",id:5434,freq_deg:573},{english:"uniformity",hangul:"획일",hanja:"劃一",id:5435},{english:"uniformity",hangul:"일률",hanja:"一律",id:5436},{english:"unilateral",hangul:"일방적인",hanja:"一方的",id:5437},{english:"union",hangul:"합동",hanja:"合同",id:5438},{english:"union",hangul:"화합",hanja:"和合",id:5439},{english:"unison",hangul:"제창",hanja:"齊唱",id:5440},{english:"universal",hangul:"보편적인",hanja:"普遍的",id:5441},{english:"universe",hangul:"우주",hanja:"宇宙",id:5442,freq_deg:513},{english:"university",hangul:"대학",hanja:"大學",id:5443,freq_deg:235},{english:"unkindness",hangul:"불친절",hanja:"不親切",id:5444},{english:"upbringing",hangul:"양육",hanja:"養育",id:5445},{english:"uprising",hangul:"반란",hanja:"反亂",id:5446},{english:"uprising",hangul:"폭동",hanja:"暴動",id:5447},{english:"urea",hangul:"요소",hanja:"尿素",id:5448},{english:"ureter",hangul:"수뇨관",hanja:"輸尿管",id:5449},{english:"urethra",hangul:"요도",hanja:"尿道",id:5450},{english:"urge",hangul:"충동",hanja:"衝動",id:5451},{english:"urgency",hangul:"화급",hanja:"火急",id:5452},{english:"urgency",hangul:"절박",hanja:"切迫",id:5453},{english:"urgency",hangul:"급박",hanja:"急迫",id:5454},{english:"urinalysis",hangul:"검뇨",hanja:"檢尿",id:5455},{english:"urine",hangul:"소변",hanja:"小便",id:5456},{english:"use",hangul:"사용",hanja:"使用",id:5457,freq_deg:910},{english:"use",hangul:"이용",hanja:"利用",id:5458,freq_deg:1448},{english:"use",hangul:"효용",hanja:"效用",id:5459},{english:"use",hangul:"용도",hanja:"用途",id:5460,freq_deg:3169},{english:"usually",hangul:"보통",hanja:"普通",id:5461,freq_deg:1576},{english:"usurpation",hangul:"탈취",hanja:"奪取",id:5462},{english:"utensil",hangul:"기구",hanja:"器具",id:5463,freq_deg:2703},{english:"uterus",hangul:"자궁",hanja:"子宮",id:5464},{english:"utility",hangul:"효용",hanja:"效用",id:5465},{english:"utility",hangul:"실용",hanja:"實用",id:5466},{english:"utilization",hangul:"이용",hanja:"利用",id:5467,freq_deg:1448},{english:"utilize",hangul:"이용하다",hanja:"利用",id:5468,freq_deg:273},{english:"utterance",hangul:"발언",hanja:"發言",id:5469},{english:"utterance",hangul:"발성",hanja:"發聲",id:5470},{english:"vacancy",hangul:"공석",hanja:"空席",id:5471},{english:"vaccination",hangul:"종두",hanja:"種痘",id:5472},{english:"vacuum",hangul:"진공",hanja:"眞空",id:5473},{english:"vagary",hangul:"취광",hanja:"醉狂",id:5474},{english:"vagrancy",hangul:"부랑",hanja:"浮浪",id:5475},{english:"valley",hangul:"계곡",hanja:"溪谷",id:5476,freq_deg:2203},{english:"valuation",hangul:"평가",hanja:"評價",id:5477,freq_deg:800},{english:"value",hangul:"가치",hanja:"價値",id:5478,freq_deg:490},{english:"vanguard",hangul:"전위",hanja:"前衛",id:5479},{english:"vaporization",hangul:"기화",hanja:"氣化",id:5480},{english:"variation",hangul:"변화",hanja:"變化",id:5481,freq_deg:265},{english:"variation",hangul:"변이",hanja:"變異",id:5482},{english:"variety",hangul:"변화",hanja:"變化",id:5483,freq_deg:265},{english:"variety",hangul:"종류",hanja:"種類",id:5484,freq_deg:868},{english:"variety",hangul:"변종",hanja:"變種",id:5485},{english:"variety",hangul:"변형",hanja:"變形",id:5486},{english:"variola",hangul:"천연두",hanja:"天然痘",id:5487},{english:"vegetable",hangul:"야채",hanja:"野菜",id:5488,freq_deg:2716},{english:"vegetable diet",hangul:"채식",hanja:"菜食",id:5489},{english:"vehicle",hangul:"차량",hanja:"車輛",id:5490,freq_deg:1754},{english:"vein",hangul:"정맥",hanja:"靜脈",id:5491},{english:"velocity",hangul:"속도",hanja:"速度",id:5492,freq_deg:948},{english:"vend",hangul:"행상하다",hanja:"行商",id:5493},{english:"ventilation",hangul:"통풍",hanja:"通風",id:5494},{english:"ventilation",hangul:"환기",hanja:"換氣",id:5495},{english:"ventricle",hangul:"심실",hanja:"心室",id:5496},{english:"venturer",hangul:"모험자",hanja:"冒險者",id:5497},{english:"veracity",hangul:"정확",hanja:"正確",id:5498},{english:"verb",hangul:"동사",hanja:"動詞",id:5499},{english:"verbosity",hangul:"다변",hanja:"多辯",id:5500},{english:"verdict",hangul:"평결",hanja:"評決",id:5501},{english:"verification",hangul:"검증",hanja:"檢證",id:5502},{english:"verification",hangul:"증명",hanja:"證明",id:5503},{english:"versatility",hangul:"다능",hanja:"多能",id:5504},{english:"versification",hangul:"시형",hanja:"詩形",id:5505},{english:"very high frequency",hangul:"초단파",hanja:"超短波",id:5506},{english:"vesicle",hangul:"기포",hanja:"氣胞",id:5507},{english:"vessel",hangul:"용기",hanja:"容器",id:5508,freq_deg:3996},{english:"vestment",hangul:"법의",hanja:"法衣",id:5509},{english:"veteran",hangul:"노련자",hanja:"老練",id:5510},{english:"veterinarian",hangul:"수의",hanja:"獸醫",id:5511},{english:"veto",hangul:"거부하다",hanja:"拒否",id:5512,freq_deg:1627},{english:"vibration",hangul:"진동",hanja:"振動",id:5513,freq_deg:4613},{english:"vice",hangul:"악습",hanja:"惡習",id:5514},{english:"viceroy",hangul:"태수",hanja:"太守",id:5515},{english:"vicious circle",hangul:"악순환",hanja:"惡循環",id:5516},{english:"vicissitude",hangul:"변천",hanja:"變遷",id:5517},{english:"vicissitude",hangul:"성쇠",hanja:"盛衰",id:5518},{english:"victor",hangul:"승리자",hanja:"勝利者",id:5519},{english:"victory",hangul:"승리",hanja:"勝利",id:5520,freq_deg:2374},{english:"view",hangul:"의견",hanja:"意見",id:5521,freq_deg:650},{english:"view",hangul:"전망",hanja:"展望",id:5522,freq_deg:1324},{english:"vigilance",hangul:"경계",hanja:"警戒",id:5523,freq_deg:2134},{english:"vigilance committee",hangul:"자경단",hanja:"自警團",id:5524},{english:"vigilante corps",hangul:"자경단",hanja:"自警團",id:5525},{english:"vigor",hangul:"원기",hanja:"元氣",id:5526},{english:"vigor",hangul:"정력",hanja:"精力",id:5527},{english:"villain",hangul:"악한",hanja:"惡漢",id:5528},{english:"villain",hangul:"악인",hanja:"惡人",id:5529},{english:"violation",hangul:"위배",hanja:"違背",id:5530},{english:"violation",hangul:"침해",hanja:"侵害",id:5531},{english:"violence",hangul:"폭력",hanja:"暴力",id:5532,freq_deg:1257},{english:"virgin",hangul:"처녀",hanja:"處女",id:5533,freq_deg:2217},{english:"virtue",hangul:"선량",hanja:"善良",id:5534},{english:"virtue",hangul:"정조",hanja:"貞操",id:5535},{english:"virtue",hangul:"미점",hanja:"美點",id:5536},{english:"virtue",hangul:"효능",hanja:"效能",id:5537},{english:"virulence",hangul:"독성",hanja:"毒性",id:5538},{english:"visa",hangul:"사증",hanja:"査證",id:5539},{english:"viscera",hangul:"내장",hanja:"內臟",id:5540},{english:"viscosity",hangul:"점도",hanja:"粘度",id:5541},{english:"viscount",hangul:"자작",hanja:"子爵",id:5542},{english:"vision",hangul:"시각",hanja:"視覺",id:5543,freq_deg:3121},{english:"vision",hangul:"환영",hanja:"幻影",id:5544,freq_deg:4968},{english:"vision",hangul:"환상",hanja:"幻像",id:5545},{english:"visit",hangul:"방문하다",hanja:"訪問",id:5546,freq_deg:1692},{english:"visitant",hangul:"방문자",hanja:"訪問者",id:5547},{english:"visitation",hangul:"천벌",hanja:"天罰",id:5548},{english:"visitor",hangul:"방문자",hanja:"訪問者",id:5549},{english:"vital",hangul:"급소",hanja:"急所",id:5550},{english:"vitality",hangul:"활력",hanja:"活力",id:5551},{english:"vitality",hangul:"원기",hanja:"元氣",id:5552},{english:"vocabulary",hangul:"어휘",hanja:"語彙",id:5553},{english:"vocation",hangul:"천직",hanja:"天職",id:5554},{english:"voice",hangul:"음성",hanja:"音聲",id:5555,freq_deg:2855},{english:"volcano",hangul:"화산",hanja:"火山",id:5556},{english:"volition",hangul:"의지",hanja:"意志",id:5557,freq_deg:900},{english:"volume",hangul:"체적",hanja:"體積",id:5558},{english:"volume",hangul:"용적",hanja:"容積",id:5559},{english:"voluntary",hangul:"자발적인",hanja:"自發的",id:5560},{english:"volunteer",hangul:"자발적인",hanja:"自發的",id:5561},{english:"volunteer",hangul:"유지",hanja:"有志",id:5562},{english:"voluptuous",hangul:"관능적인",hanja:"官能的",id:5563},{english:"voter",hangul:"투표자",hanja:"投票者",id:5564},{english:"vouch",hangul:"보증하다",hanja:"保證",id:5565},{english:"voyage",hangul:"항해하다",hanja:"航海",id:5566},{english:"vulgarity",hangul:"속악",hanja:"俗惡",id:5567},{english:"wage",hangul:"임금",hanja:"賃金",id:5568,freq_deg:3355},{english:"waist",hangul:"요부",hanja:"腰部",id:5569},{english:"waiting room",hangul:"대합실",hanja:"待合室",id:5570,freq_deg:2706},{english:"waitress",hangul:"여급",hanja:"女給",id:5571},{english:"wall newspaper",hangul:"벽신문",hanja:"壁新聞",id:5572},{english:"want",hangul:"결핍",hanja:"缺乏",id:5573},{english:"war",hangul:"전쟁",hanja:"戰爭",id:5574,freq_deg:475},{english:"war",hangul:"전쟁하다",hanja:"戰爭",id:5575},{english:"war cloud",hangul:"전운",hanja:"戰雲",id:5576},{english:"ward",hangul:"병동",hanja:"病棟",id:5577},{english:"ward",hangul:"감방",hanja:"監房",id:5578},{english:"warehouse",hangul:"창고",hanja:"倉庫",id:5579,freq_deg:2907},{english:"warning",hangul:"경고",hanja:"警告",id:5580,freq_deg:2336},{english:"warrant",hangul:"보증하다",hanja:"保證",id:5581},{english:"warranty",hangul:"보증",hanja:"保證",id:5582},{english:"warship",hangul:"군함",hanja:"軍艦",id:5583},{english:"washing machine",hangul:"세탁기",hanja:"洗濯機",id:5584,freq_deg:5073},{english:"waste",hangul:"낭비",hanja:"浪費",id:5585,freq_deg:3957},{english:"waste heat",hangul:"여열",hanja:"餘熱",id:5586},{english:"waster",hangul:"파괴자",hanja:"破壞者",id:5587},{english:"watchtower",hangul:"망루",hanja:"望樓",id:5588},{english:"water gate",hangul:"수문",hanja:"水門",id:5589},{english:"water lily",hangul:"수련",hanja:"睡蓮",id:5590},{english:"water polo",hangul:"수구",hanja:"水球",id:5591},{english:"waterfall",hangul:"폭포",hanja:"瀑布",id:5592},{english:"waterway",hangul:"수로",hanja:"水路",id:5593},{english:"waterway",hangul:"운하",hanja:"運河",id:5594},{english:"wavelength",hangul:"파장",hanja:"波長",id:5595},{english:"way",hangul:"방향",hanja:"方向",id:5596,freq_deg:433},{english:"way",hangul:"방법",hanja:"方法",id:5597,freq_deg:159},{english:"way out",hangul:"출구",hanja:"出口",id:5598,freq_deg:4469},{english:"weakness",hangul:"유약",hanja:"柔弱",id:5599},{english:"weakness",hangul:"박약",hanja:"薄弱",id:5600},{english:"weakness",hangul:"결점",hanja:"缺點",id:5601},{english:"weakness",hangul:"약점",hanja:"弱点",id:5602,freq_deg:3611},{english:"wealth",hangul:"풍부",hanja:"豊富",id:5603},{english:"weapon",hangul:"무기",hanja:"武器",id:5604,freq_deg:1827},{english:"weapon",hangul:"병기",hanja:"兵器",id:5605},{english:"weariness",hangul:"권태",hanja:"倦怠",id:5606},{english:"weathering",hangul:"풍화",hanja:"風化",id:5607},{english:"weed",hangul:"잡초",hanja:"雜草",id:5608},{english:"weight",hangul:"중량",hanja:"重量",id:5609},{english:"weight",hangul:"분동",hanja:"分銅",id:5610},{english:"welcome",hangul:"환영하다",hanja:"歡迎",id:5611,freq_deg:4619},{english:"west",hangul:"서양",hanja:"西洋",id:5612,freq_deg:937},{english:"wet dream",hangul:"몽정",hanja:"夢精",id:5613},{english:"whelm",hangul:"압도하다",hanja:"壓倒",id:5614},{english:"whereabouts",hangul:"소재",hanja:"所在",id:5615,freq_deg:1323},{english:"whirlwind",hangul:"선풍",hanja:"旋風",id:5616},{english:"whistle",hangul:"경적",hanja:"警笛",id:5617},{english:"white",hangul:"백색",hanja:"白色",id:5618,freq_deg:4500},{english:"white heat",hangul:"백열",hanja:"白熱",id:5619},{english:"white night",hangul:"백야",hanja:"白夜",id:5620},{english:"white paper",hangul:"백지",hanja:"白紙",id:5621},{english:"white wine",hangul:"백포도주",hanja:"白葡萄酒",id:5622},{english:"whole",hangul:"전부",hanja:"全部",id:5623,freq_deg:2722},{english:"whole",hangul:"전체",hanja:"全體",id:5624,freq_deg:294},{english:"whooping cough",hangul:"백일해",hanja:"百日咳",id:5625},{english:"widow",hangul:"미망인",hanja:"未亡人",id:5626},{english:"widow",hangul:"과부",hanja:"寡婦",id:5627},{english:"wild",hangul:"황야",hanja:"荒野",id:5628},{english:"wilderness",hangul:"황야",hanja:"荒野",id:5629},{english:"win",hangul:"승리",hanja:"勝利",id:5630,freq_deg:2374},{english:"windmill",hangul:"풍차",hanja:"風車",id:5631},{english:"windstorm",hangul:"폭풍",hanja:"暴風",id:5632},{english:"winner",hangul:"승리자",hanja:"勝利者",id:5633},{english:"winter sleep",hangul:"동면",hanja:"冬眠",id:5634},{english:"wiretap",hangul:"도청하다",hanja:"盜聽",id:5635},{english:"wisdom",hangul:"지혜",hanja:"智慧",id:5636,freq_deg:1682},{english:"wisdom",hangul:"현명",hanja:"賢明",id:5637},{english:"wish",hangul:"소원",hanja:"所願",id:5638,freq_deg:3203},{english:"witch",hangul:"마녀",hanja:"魔女",id:5639},{english:"witchcraft",hangul:"마법",hanja:"魔法",id:5640},{english:"wizard",hangul:"귀재",hanja:"鬼才",id:5641},{english:"wizard",hangul:"천재적인",hanja:"天才",id:5642},{english:"woman",hangul:"여자",hanja:"女子",id:5643,freq_deg:74},{english:"woman",hangul:"부인",hanja:"婦人",id:5644,freq_deg:4738},{english:"woman",hangul:"여성",hanja:"女性",id:5645,freq_deg:130},{english:"womb",hangul:"자궁",hanja:"子宮",id:5646},{english:"word",hangul:"단어",hanja:"單語",id:5647,freq_deg:1895},{english:"word order",hangul:"어순",hanja:"語順",id:5648},{english:"work",hangul:"세공하다",hanja:"細工",id:5649},{english:"workshop",hangul:"공장",hanja:"工場",id:5650,freq_deg:611},{english:"world",hangul:"세계",hanja:"世界",id:5651,freq_deg:105},{english:"world",hangul:"세상",hanja:"世上",id:5652,freq_deg:232},{english:"worldling",hangul:"속인",hanja:"俗人",id:5653},{english:"worship",hangul:"숭배",hanja:"崇拜",id:5654},{english:"worship",hangul:"예배",hanja:"禮拜",id:5655},{english:"worship",hangul:"예배하다",hanja:"禮拜",id:5656},{english:"wound",hangul:"부상",hanja:"負傷",id:5657,freq_deg:4049},{english:"wreath",hangul:"화환",hanja:"花環",id:5658},{english:"wreckage",hangul:"잔해",hanja:"殘骸",id:5659},{english:"writer",hangul:"필자",hanja:"筆者",id:5660,freq_deg:1778},{english:"writing",hangul:"저술",hanja:"著述",id:5661},{english:"writing",hangul:"문서",hanja:"文書",id:5662,freq_deg:2678},{english:"writing",hangul:"저작",hanja:"著作",id:5663},{english:"xylophone",hangul:"목금",hanja:"木琴",id:5664},{english:"year",hangul:"연도",hanja:"年度",id:5665},{english:"year",hangul:"연령",hanja:"年齡",id:5666,freq_deg:3616},{english:"yeast",hangul:"효모",hanja:"酵母",id:5667},{english:"yield",hangul:"산출하다",hanja:"産出",id:5668},{english:"youth",hangul:"청춘",hanja:"靑春",id:5669,freq_deg:2910},{english:"youth",hangul:"청년",hanja:"靑年",id:5670,freq_deg:1958},{english:"youth",hangul:"연소",hanja:"年少",id:5671},{english:"zeal",hangul:"열심",hanja:"熱心",id:5672},{english:"zeal",hangul:"열중",hanja:"熱中",id:5673},{english:"zenith",hangul:"천정",hanja:"天頂",id:5674},{english:"zero",hangul:"영점",hanja:"零點",id:5675},{english:"zone",hangul:"지대",hanja:"地帶",id:5676,freq_deg:1648},{english:"zone",hangul:"구역",hanja:"區域",id:5677,freq_deg:1767},{english:"zoolatry",hangul:"동물숭배",hanja:"動物崇拜",id:5678},{english:"to kill two birds with one stone",hangul:"일석이조",hanja:"一石二鳥",id:5679},{english:"two-faced",hangul:"일구이언",hanja:"一口二言",id:5680},{english:"jack of all trades",hangul:"팔방미인",hanja:"八方美人",id:5681},{english:"survival of the fittest",hangul:"약육강식",hanja:"弱肉强食",id:5682},{english:"the more the better",hangul:"다다익선",hanja:"多多益善",id:5683},{english:"well informed",hangul:"박학다식",hanja:"博學多識",id:5684},{english:"a very large crowd",hangul:"인산인해",hanja:"人山人海",id:5685},{english:"evenly matched",hangul:"막상막하",hanja:"莫上莫下",id:5686},{english:"a good mother and a good wife",hangul:"형모양처",hanja:"賢母良妻",id:5687},{english:"devoted; fidelity",hangul:"일편단심",hanja:"一片丹心",id:5688},{english:"longevity",hangul:"만수무강",hanja:"萬壽無疆",id:5689},{english:"face, confront",hangul:"대하다",hanja:"對-",id:5690,freq_deg:18},{english:"year",hangul:"년",hanja:"年",id:5691,freq_deg:20},{english:"to do for the sake of",hangul:"위하다",hanja:"爲-",id:5692,freq_deg:26},{english:"Mister",hangul:"씨",hanja:"氏",id:5693,freq_deg:2850},{english:"a case; an instance",hangul:"경우",hanja:"境遇",id:5694,freq_deg:55},{english:"the center, the middle",hangul:"중",hanja:"中",id:5695,freq_deg:56},{english:"she",hangul:"그녀",hanja:"-女",id:5696,freq_deg:59},{english:"one's own self, one's own body",hangul:"자신",hanja:"自身",id:5697,freq_deg:1855},{english:"person counter",hangul:"명",hanja:"名",id:5698,freq_deg:66},{english:"run, lead; flow; go through",hangul:"통하다",hanja:"通-",id:5699,freq_deg:67},{english:"woman,female",hangul:"여자",hanja:"女子",id:5700,freq_deg:74},{english:"unit or  piece",hangul:"개",hanja:"個",id:5701,freq_deg:1387},{english:"a person, a human being",hangul:"인간",hanja:"人間",id:5702,freq_deg:88},{english:"store",hangul:"점",hanja:"點",id:5703,freq_deg:1391},{english:"to be due to, owing to",hangul:"의하다",hanja:"依-",id:5704,freq_deg:96},{english:"to start, begin",hangul:"시작하다",hanja:"始作-",id:5705,freq_deg:115},{english:"number, how many times",hangul:"번",hanja:"番",id:5706,freq_deg:122},{english:"female",hangul:"여성",hanja:"女性",id:5707,freq_deg:130},{english:"a friend",hangul:"친구",hanja:"親舊",id:5708,freq_deg:131},{english:"after",hangul:"후",hanja:"後",id:5709,freq_deg:133},{english:"boy",hangul:"남자",hanja:"男子",id:5710,freq_deg:137},{english:"this time",hangul:"이번",hanja:"-番",id:5711,freq_deg:153},{english:"process or course",hangul:"과정",hanja:"過程",id:5712,freq_deg:4394},{english:"especially",hangul:"특히",hanja:"特-",id:5713,freq_deg:171},{english:"time",hangul:"시",hanja:"時",id:5714,freq_deg:2299},{english:"more than, above",hangul:"이상",hanja:"以上",id:5715,freq_deg:2330},{english:"now",hangul:"지금",hanja:"只今",id:5716,freq_deg:174},{english:"education",hangul:"교육",hanja:"敎育",id:5717,freq_deg:177},{english:"history",hangul:"역사",hanja:"歷史",id:5718,freq_deg:187},{english:"a book",hangul:"책",hanja:"冊",id:5719,freq_deg:192},{english:"you (formal)",hangul:"당신",hanja:"當身",id:5720,freq_deg:194},{english:"to be important, weighty",hangul:"중요하다",hanja:"重要-",id:5721,freq_deg:197},{english:"research",hangul:"연구",hanja:"硏究",id:5722,freq_deg:216},{english:"to need",hangul:"필요하다",hanja:"必要-",id:5723,freq_deg:226},{english:"husband",hangul:"남편",hanja:"男便",id:5724,freq_deg:230},{english:"state of things",hangul:"상황",hanja:"狀況",id:5725,freq_deg:237},{english:"namely, that is to say",hangul:"즉",hanja:"卽",id:5726,freq_deg:240},{english:"condition, state",hangul:"상태",hanja:"狀態",id:5727,freq_deg:241},{english:"after that",hangul:"이후",hanja:"以後",id:5728,freq_deg:242},{english:"at that time",hangul:"당시",hanja:"當時",id:5729,freq_deg:243},{english:"recently",hangul:"최근",hanja:"最近",id:5730,freq_deg:250},{english:"one's own body",hangul:"자체",hanja:"自體",id:5731,freq_deg:258},{english:"refer to or be about",hangul:"관하다",hanja:"關-",id:5732,freq_deg:269},{english:"to use, make use of",hangul:"이용하다",hanja:"利用-",id:5733,freq_deg:273},{english:"as expected, likewise",hangul:"역시",hanja:"亦是",id:5734,freq_deg:281},{english:"a room",hangul:"방",hanja:"房",id:5735,freq_deg:286},{english:"art or  technique or  ability",hangul:"기술",hanja:"技術",id:5736,freq_deg:293},{english:"the interval between",hangul:"간",hanja:"間",id:5737,freq_deg:3227},{english:"a movie",hangul:"영화",hanja:"映畵",id:5738,freq_deg:306},{english:"need, requirement,necessity",hangul:"필요",hanja:"必要",id:5739,freq_deg:307},{english:"nature",hangul:"자연",hanja:"自然",id:5740,freq_deg:312},{english:"really",hangul:"정말",hanja:"正-",id:5741,freq_deg:313},{english:"after all; in the end",hangul:"결국",hanja:"結局",id:5742,freq_deg:315},{english:"teaching;  instruction",hangul:"교수",hanja:"敎授",id:5743,freq_deg:332},{english:"telephone",hangul:"전화",hanja:"電話",id:5744,freq_deg:335},{english:"once",hangul:"한번",hanja:"-番",id:5745,freq_deg:341},{english:"most ",hangul:"대부분",hanja:"大部分",id:5746,freq_deg:348},{english:"food",hangul:"음식",hanja:"飮食",id:5747,freq_deg:352},{english:"facial expression; look",hangul:"표정",hanja:"表情",id:5748,freq_deg:353},{english:"personality; character, nature",hangul:"성격",hanja:"性格",id:5749,freq_deg:361},{english:"century",hangul:"세기",hanja:"世紀",id:5750,freq_deg:363},{english:"a vehicle",hangul:"차",hanja:"車",id:5751,freq_deg:2667},{english:"to face, look out on",hangul:"향하다",hanja:"向-",id:5752,freq_deg:372},{english:"form, shape",hangul:"형태",hanja:"形態",id:5753,freq_deg:374},{english:"each; every",hangul:"각",hanja:"各",id:5754,freq_deg:375},{english:"city",hangul:"도시",hanja:"都市",id:5755,freq_deg:376},{english:"work",hangul:"작업",hanja:"作業",id:5756,freq_deg:377},{english:"atmosphere, surroundings",hangul:"분위기",hanja:"雰圍氣",id:5757,freq_deg:378},{english:"firstly, first of all; before everything",hangul:"우선",hanja:"于先",id:5758,freq_deg:381},{english:"poetry, lines of verse",hangul:"시",hanja:"詩",id:5759,freq_deg:2299},{english:"inside the country",hangul:"국내",hanja:"國內",id:5760,freq_deg:397},{english:"to compare to",hangul:"비하다",hanja:"比-",id:5761,freq_deg:398},{english:"example",hangul:"예",hanja:"例",id:5762,freq_deg:2792},{english:"inside",hangul:"내",hanja:"內",id:5763,freq_deg:412},{english:"a mountain",hangul:"산",hanja:"山",id:5764,freq_deg:414},{english:"condition, stipulation",hangul:"조건",hanja:"條件",id:5765,freq_deg:417},{english:"door",hangul:"문",hanja:"門",id:5766,freq_deg:418},{english:"instructor",hangul:"교사",hanja:"敎師",id:5767,freq_deg:423},{english:"a great meeting",hangul:"대회",hanja:"大會",id:5768,freq_deg:434},{english:"study",hangul:"공부",hanja:"工夫",id:5769,freq_deg:439},{english:"a member",hangul:"의원",hanja:"議員",id:5770,freq_deg:441},{english:"entirely, utterly, completely",hangul:"전혀",hanja:"全-",id:5771,freq_deg:443},{english:"to be possible",hangul:"가능하다",hanja:"可能-",id:5772,freq_deg:448},{english:"one's children",hangul:"자식",hanja:"子息",id:5773,freq_deg:451},{english:"a school year",hangul:"학년",hanja:"學年",id:5774,freq_deg:457},{english:"a newspaper",hangul:"신문",hanja:"新聞",id:5775,freq_deg:458},{english:"to understand",hangul:"이해하다",hanja:"理解-",id:5776,freq_deg:460},{english:"manufactured goods",hangul:"제품",hanja:"製品",id:5777,freq_deg:461},{english:"mood",hangul:"기분",hanja:"氣分",id:5778,freq_deg:469},{english:"era, period",hangul:"대",hanja:"代",id:5779,freq_deg:5131},{english:"before",hangul:"전",hanja:"前",id:5780,freq_deg:637},{english:"drama, a play",hangul:"연극",hanja:"演劇",id:5781,freq_deg:484},{english:"labor, work",hangul:"노동",hanja:"勞動",id:5782,freq_deg:487},{english:"the past",hangul:"과거",hanja:"過去",id:5783,freq_deg:5050},{english:"difference, disparity",hangul:"차이",hanja:"差異",id:5784,freq_deg:496},{english:"season, time, occasion",hangul:"시절",hanja:"時節",id:5785,freq_deg:498},{english:"a thing",hangul:"물건",hanja:"物件",id:5786,freq_deg:499},{english:"directly",hangul:"직접",hanja:"直接",id:5787,freq_deg:500},{english:"writer, author",hangul:"작가",hanja:"作家",id:5788,freq_deg:504},{english:"Buddhism",hangul:"불교",hanja:"佛敎",id:5789,freq_deg:506},{english:"to begin, to start",hangul:"시작되다",hanja:"始作-",id:5790,freq_deg:510},{english:"to explain",hangul:"설명하다",hanja:"說明-",id:5791,freq_deg:512},{english:"an opportunity, a chance",hangul:"시기",hanja:"時機",id:5792,freq_deg:3341},{english:"to be strong,  powerful",hangul:"강하다",hanja:"强-",id:5793,freq_deg:519},{english:"the best",hangul:"최고",hanja:"最高",id:5794,freq_deg:522},{english:"hometown",hangul:"고향",hanja:"故鄕",id:5795,freq_deg:527},{english:"to be various, diverse",hangul:"다양하다",hanja:"多樣-",id:5796,freq_deg:529},{english:"a law, the law",hangul:"법",hanja:"法",id:5797,freq_deg:1105},{english:"a novel, fiction story",hangul:"소설",hanja:"小說",id:5798,freq_deg:536},{english:"place empasis upon",hangul:"강조하다",hanja:"强調-",id:5799,freq_deg:560},{english:"one side, one way",hangul:"한편",hanja:"-便",id:5800,freq_deg:564},{english:"a journalist",hangul:"기자",hanja:"記者",id:5801,freq_deg:566},{english:"principally, mainly",hangul:"주로",hanja:"主-",id:5802,freq_deg:570},{english:"side",hangul:"면",hanja:"面",id:5803,freq_deg:4044},{english:"a foreign country",hangul:"외국",hanja:"外國",id:5804,freq_deg:578},{english:"instead of",hangul:"대신",hanja:"代身",id:5805,freq_deg:582},{english:"order, precedence; one time, one round",hangul:"차례",hanja:"次例",id:5806,freq_deg:585},{english:"an army",hangul:"군",hanja:"軍",id:5807,freq_deg:3902},{english:"parents",hangul:"부모",hanja:"父母",id:5808,freq_deg:591},{english:"somewhat",hangul:"약간",hanja:"若干",id:5809,freq_deg:2049},{english:"to have, to encounter",hangul:"당하다",hanja:"當-",id:5810,freq_deg:601},{english:"about, approximately",hangul:"약",hanja:"約",id:5811,freq_deg:5160},{english:"temporarily",hangul:"일단",hanja:"一旦",id:5812,freq_deg:607},{english:"group, organization",hangul:"조직",hanja:"組織",id:5813,freq_deg:609},{english:"a patient",hangul:"환자",hanja:"患者",id:5814,freq_deg:615},{english:"change",hangul:"변하다",hanja:"變-",id:5815,freq_deg:616},{english:"an elder brother",hangul:"형",hanja:"兄",id:5816,freq_deg:5291},{english:"the whole country",hangul:"전국",hanja:"全國",id:5817,freq_deg:635},{english:"all, every",hangul:"전",hanja:"全",id:5818,freq_deg:637},{english:"for a little while",hangul:"잠시",hanja:"暫時",id:5819,freq_deg:1856},{english:"form, style",hangul:"식",hanja:"式",id:5820,freq_deg:649},{english:"picture",hangul:"사진",hanja:"寫眞",id:5821,freq_deg:652},{english:"to be due to, caused by",hangul:"인하다",hanja:"因-",id:5822,freq_deg:655},{english:"male",hangul:"남성",hanja:"男性",id:5823,freq_deg:666},{english:"countermeasure",hangul:"대책",hanja:"對策",id:5824,freq_deg:668},{english:"never; by no means",hangul:"결코",hanja:"決-",id:5825,freq_deg:676},{english:"always",hangul:"항상",hanja:"恒常",id:5826,freq_deg:678},{english:"to be extreme, intense",hangul:"심하다",hanja:"甚-",id:5827,freq_deg:685},{english:"a time, an inning, a round in a game",hangul:"회",hanja:"回",id:5828,freq_deg:691},{english:"concretely",hangul:"구체적",hanja:"具體的",id:5829,freq_deg:692},{english:"to enforce,put into effect",hangul:"실시하다",hanja:"實施-",id:5830,freq_deg:694},{english:"~ times",hangul:"번째",hanja:"番-",id:5831,freq_deg:696},{english:"a standard or basis",hangul:"기준",hanja:"基準",id:5832,freq_deg:700},{english:"end",hangul:"말",hanja:"末",id:5833,freq_deg:2270},{english:"on site, on location",hangul:"현장",hanja:"現場",id:5834,freq_deg:708},{english:"to transmit, convey",hangul:"전하다",hanja:"傳-",id:5835,freq_deg:715},{english:"each and every month",hangul:"개월",hanja:"個月",id:5836,freq_deg:717},{english:"especially, particularly",hangul:"별로",hanja:"別-",id:5837,freq_deg:719},{english:"to set,determine",hangul:"정하다",hanja:"定-",id:5838,freq_deg:721},{english:"to study",hangul:"공부하다",hanja:"工夫-",id:5839,freq_deg:725},{english:"the masses",hangul:"대중",hanja:"大衆",id:5840,freq_deg:726},{english:"all sorts, all varieties",hangul:"각종",hanja:"各種",id:5841,freq_deg:733},{english:"to avoid, keep away",hangul:"피하다",hanja:"避-",id:5842,freq_deg:736},{english:"as it used to be, as before; still, persistently, even still",hangul:"여전히",hanja:"如前-",id:5843,freq_deg:741},{english:"the head of a family,the owner",hangul:"주인",hanja:"主人",id:5844,freq_deg:742},{english:"to discover",hangul:"발견하다",hanja:"發見-",id:5845,freq_deg:743},{english:"a line, a route",hangul:"선",hanja:"線",id:5846,freq_deg:744},{english:"an athlete",hangul:"선수",hanja:"選手",id:5847,freq_deg:747},{english:"half",hangul:"반",hanja:"半",id:5848,freq_deg:834},{english:"a point of view or a standpoint; outlook",hangul:"관점",hanja:"觀點",id:5849,freq_deg:755},{english:"a foundation",hangul:"기본",hanja:"基本",id:5850,freq_deg:757},{english:"feelings",hangul:"감정",hanja:"感情",id:5851,freq_deg:761},{english:"popularity",hangul:"인기",hanja:"人氣",id:5852,freq_deg:764},{english:"in reality",hangul:"실제로",hanja:"實際-",id:5853,freq_deg:770},{english:"indeed; sure enough; just as one thought",hangul:"과연",hanja:"果然",id:5854,freq_deg:777},{english:"formerly, previously, before",hangul:"이전",hanja:"以前",id:5855,freq_deg:780},{english:"a person",hangul:"자",hanja:"者",id:5856,freq_deg:5021},{english:"the middle; the heart",hangul:"중앙",hanja:"中央",id:5857,freq_deg:783},{english:"deformity, malformation",hangul:"불구하다",hanja:"不拘-",id:5858,freq_deg:785},{english:"international",hangul:"국제",hanja:"國際",id:5859,freq_deg:788},{english:"life",hangul:"인생",hanja:"人生",id:5860,freq_deg:790},{english:"a cup; a glass",hangul:"잔",hanja:"盞",id:5861,freq_deg:793},{english:"except, save for",hangul:"외",hanja:"外",id:5862,freq_deg:799},{english:"three countries",hangul:"삼국",hanja:"三國",id:5863,freq_deg:807},{english:"to want",hangul:"원하다",hanja:"願-",id:5864,freq_deg:809},{english:"the number of sth",hangul:"수",hanja:"數",id:5865,freq_deg:4689},{english:"times, ~-fold",hangul:"배",hanja:"倍",id:5866,freq_deg:3968},{english:"instruction, school, teaching",hangul:"수업",hanja:"授業",id:5867,freq_deg:5152},{english:"religion, a faith",hangul:"종교",hanja:"宗敎",id:5868,freq_deg:825},{english:"floor; grade, class",hangul:"층",hanja:"層",id:5869,freq_deg:826},{english:"to be natural",hangul:"자연스럽다",hanja:"自然-",id:5870,freq_deg:827},{english:"one piece of sth flat (counter)",hangul:"장",hanja:"張",id:5871,freq_deg:2305},{english:"a meal",hangul:"식사",hanja:"食事",id:5872,freq_deg:829},{english:"understanding",hangul:"이해",hanja:"理解",id:5873,freq_deg:4451},{english:"group, company, party",hangul:"반",hanja:"班",id:5874,freq_deg:834},{english:"nothing more than",hangul:"불과하다",hanja:"不過-",id:5875,freq_deg:835},{english:"if that's not the case",hangul:"혹은",hanja:"或-",id:5876,freq_deg:836},{english:"grasp, seize, understand",hangul:"파악하다",hanja:"把握-",id:5877,freq_deg:840},{english:"compilation, editing",hangul:"편",hanja:"篇",id:5878,freq_deg:5034},{english:"practice",hangul:"실천",hanja:"實踐",id:5879,freq_deg:842},{english:"letter",hangul:"편지",hanja:"便紙",id:5880,freq_deg:848},{english:"association,  union,  collaboration",hangul:"공동",hanja:"共同",id:5881,freq_deg:849},{english:"a plan, scheme",hangul:"방안",hanja:"方案",id:5882,freq_deg:851},{english:"to be clear/obvious",hangul:"분명하다",hanja:"分明-",id:5883,freq_deg:854},{english:"a young girl",hangul:"소녀",hanja:"少女",id:5884,freq_deg:856},{english:"order, sequence, degree",hangul:"차",hanja:"次",id:5885,freq_deg:2667},{english:"explanation",hangul:"설명",hanja:"說明",id:5886,freq_deg:860},{english:"the interested or affected parties",hangul:"관계자",hanja:"關係者",id:5887,freq_deg:862},{english:"age in years",hangul:"세",hanja:"歲",id:5888,freq_deg:3660},{english:"trip",hangul:"여행",hanja:"旅行",id:5889,freq_deg:877},{english:"May",hangul:"오월",hanja:"五月",id:5890,freq_deg:882},{english:"a lesson; a section; a department",hangul:"과",hanja:"課",id:5891,freq_deg:2653},{english:"April",hangul:"사월",hanja:"四月",id:5892,freq_deg:895},{english:"conflict; troubles",hangul:"갈등",hanja:"葛藤",id:5893,freq_deg:898},{english:"the early days, the initial period",hangul:"초기",hanja:"初期",id:5894,freq_deg:903},{english:"beauty, grace",hangul:"미",hanja:"美",id:5895,freq_deg:909},{english:"one's line of vision",hangul:"시선",hanja:"視線",id:5896,freq_deg:911},{english:"a speech, discussion",hangul:"언론",hanja:"言論",id:5897,freq_deg:913},{english:"last year",hangul:"작년",hanja:"昨年",id:5898,freq_deg:922},{english:"wages, pay",hangul:"임금",hanja:"賃金",id:5899,freq_deg:3355},{english:"damage",hangul:"피해",hanja:"被害",id:5900,freq_deg:929},{english:"a limit",hangul:"한",hanja:"限",id:5901,freq_deg:3097},{english:"one's workplace",hangul:"직장",hanja:"職場",id:5902,freq_deg:932},{english:"chief, main, essential",hangul:"주요",hanja:"主要",id:5903,freq_deg:938},{english:"a public performance",hangul:"공연",hanja:"公演",id:5904,freq_deg:944},{english:"man and woman",hangul:"남녀",hanja:"男女",id:5905,freq_deg:945},{english:"to be serious, grave",hangul:"심각하다",hanja:"深刻-",id:5906,freq_deg:949},{english:"September",hangul:"구월",hanja:"九月",id:5907,freq_deg:952},{english:"June",hangul:"유월",hanja:"六月",id:5908,freq_deg:956},{english:"among the rest of them",hangul:"그중",hanja:"-中",id:5909,freq_deg:961},{english:"elderly person",hangul:"노인",hanja:"老人",id:5910,freq_deg:962},{english:"the English language",hangul:"영어",hanja:"英語",id:5911,freq_deg:966},{english:"a native, place one is from",hangul:"출신",hanja:"出身",id:5912,freq_deg:967},{english:"a record,  a document",hangul:"기록",hanja:"記錄",id:5913,freq_deg:970},{english:"to answer, reply",hangul:"대답하다",hanja:"對答-",id:5914,freq_deg:972},{english:"one side",hangul:"반면",hanja:"反面",id:5915,freq_deg:973},{english:"buisness, duty",hangul:"업무",hanja:"業務",id:5916,freq_deg:981},{english:"an entrance examination",hangul:"입시",hanja:"入試",id:5917,freq_deg:982},{english:"young boys and girls, teenagers",hangul:"청소년",hanja:"靑少年",id:5918,freq_deg:984},{english:"to adopt, assume, take",hangul:"취하다",hanja:"取-",id:5919,freq_deg:1927},{english:"company boss",hangul:"사장",hanja:"社長",id:5920,freq_deg:991},{english:"March",hangul:"삼월",hanja:"三月",id:5921,freq_deg:992},{english:"a business enterprise",hangul:"업체",hanja:"業體",id:5922,freq_deg:995},{english:"to buy, purchase; to look for, to seek, to want",hangul:"구하다",hanja:"求-",id:5923,freq_deg:4487},{english:"if",hangul:"만약",hanja:"萬若",id:5924,freq_deg:1003},{english:"the times, things",hangul:"세월",hanja:"歲月",id:5925,freq_deg:1005},{english:"an event, a function",hangul:"행사",hanja:"行事",id:5926,freq_deg:3527},{english:"a god",hangul:"신",hanja:"神",id:5927,freq_deg:2031},{english:"king",hangul:"왕",hanja:"王",id:5928,freq_deg:1011},{english:"more and more, by degrees",hangul:"점점",hanja:"漸漸",id:5929,freq_deg:1012},{english:"be special, extraordinary",hangul:"특별",hanja:"特別",id:5930,freq_deg:1014},{english:"a judgment, a conclusion",hangul:"판단",hanja:"判斷",id:5931,freq_deg:1015},{english:"nearby, in the vicinity",hangul:"근처",hanja:"近處",id:5932,freq_deg:1020},{english:"circumstances",hangul:"사정",hanja:"事情",id:5933,freq_deg:1024},{english:"how on earth?, what the Hell?",hangul:"도대체",hanja:"都大體",id:5934,freq_deg:1025},{english:"parents",hangul:"부모님",hanja:"父母-",id:5935,freq_deg:1027},{english:"beginning (of), early, initial",hangul:"초",hanja:"初",id:5936,freq_deg:1764},{english:"staff",hangul:"직원",hanja:"職員",id:5937,freq_deg:1049},{english:"counterpart, companion, rival",hangul:"상대",hanja:"相對",id:5938,freq_deg:1054},{english:"degrees (temperature)",hangul:"도",hanja:"度",id:5939,freq_deg:3146},{english:"a wall",hangul:"벽",hanja:"壁",id:5940,freq_deg:1061},{english:"trade",hangul:"무역",hanja:"貿易",id:5941,freq_deg:1063},{english:"greetings",hangul:"인사",hanja:"人事",id:5942,freq_deg:1312},{english:"the body",hangul:"신체",hanja:"身體",id:5943,freq_deg:1070},{english:"committee member",hangul:"위원",hanja:"委員",id:5944,freq_deg:1072},{english:"a law, a rule",hangul:"법칙",hanja:"法則",id:5945,freq_deg:1079},{english:"bicycle",hangul:"자전거",hanja:"自轉車",id:5946,freq_deg:1083},{english:"position, grade, rank",hangul:"위",hanja:"位",id:5947,freq_deg:4879},{english:"logic",hangul:"논리",hanja:"論理",id:5948,freq_deg:1095},{english:"be short of, lack",hangul:"부족하다",hanja:"不足-",id:5949,freq_deg:1100},{english:"to have progressed, be advanced",hangul:"진행되다",hanja:"進行-",id:5950,freq_deg:1102},{english:"a way, a method",hangul:"법",hanja:"法",id:5951,freq_deg:1105},{english:"candidate, nominee",hangul:"후보",hanja:"候補",id:5952,freq_deg:1108},{english:"task, assignment, homework",hangul:"과제",hanja:"課題",id:5953,freq_deg:1110},{english:"to record, write down",hangul:"기록하다",hanja:"記錄-",id:5954,freq_deg:1112},{english:"angle/point of view.  관점.",hangul:"시각",hanja:"視角",id:5955,freq_deg:3121},{english:"tomorrow",hangul:"내일",hanja:"來日",id:5956,freq_deg:1121},{english:"every day",hangul:"매일",hanja:"每日",id:5957,freq_deg:1122},{english:"gradually, in steps",hangul:"점차",hanja:"漸次",id:5958,freq_deg:1133},{english:"class, grade, rank",hangul:"급",hanja:"級",id:5959,freq_deg:1136},{english:"open, throw open",hangul:"개방",hanja:"開放",id:5960,freq_deg:1141},{english:"future",hangul:"미래",hanja:"未來",id:5961,freq_deg:1143},{english:"sickness",hangul:"병",hanja:"病",id:5962,freq_deg:1720},{english:"the head of a family; the hero/heroine",hangul:"주인공",hanja:"主人公",id:5963,freq_deg:1155},{english:"be natural; \"of course!\"",hangul:"당연하다",hanja:"當然-",id:5964,freq_deg:1156},{english:"way a man refers to an older friend (respectful)",hangul:"형님",hanja:"兄-",id:5965,freq_deg:1161},{english:"on the spot, immediately",hangul:"당장",hanja:"當場",id:5966,freq_deg:1163},{english:"objects, things",hangul:"사물",hanja:"事物",id:5967,freq_deg:1166},{english:"to choose",hangul:"선택하다",hanja:"選擇-",id:5968,freq_deg:1174},{english:"to be simple",hangul:"간단하다",hanja:"簡單-",id:5969,freq_deg:1178},{english:"high school",hangul:"고등학교",hanja:"高等學校",id:5970,freq_deg:1179},{english:"opening to the public, making public",hangul:"공개",hanja:"公開",id:5971,freq_deg:1180},{english:"classroom",hangul:"교실",hanja:"敎室",id:5972,freq_deg:1181},{english:"a medium, medias",hangul:"매체",hanja:"媒體",id:5973,freq_deg:1186},{english:"be complicated",hangul:"복잡하다",hanja:"複雜-",id:5974,freq_deg:1188},{english:"territory",hangul:"영역",hanja:"領域",id:5975,freq_deg:1190},{english:"an experience",hangul:"체험",hanja:"體驗",id:5976,freq_deg:1191},{english:"to overcome; surmount",hangul:"극복하다",hanja:"克服-",id:5977,freq_deg:1194},{english:"illegal",hangul:"불법",hanja:"不法",id:5978,freq_deg:4859},{english:"color",hangul:"색",hanja:"色",id:5979,freq_deg:1197},{english:"to be regular, established, uniform; changeless, constant, certain, definite ; invariable (mathematics)",hangul:"일정하다",hanja:"一定-",id:5980,freq_deg:1199},{english:"many and many",hangul:"수많다",hanja:"數-",id:5981,freq_deg:1208},{english:"construction work; engineering work",hangul:"공사",hanja:"工事",id:5982,freq_deg:1211},{english:"doctor",hangul:"박사",hanja:"博士",id:5983,freq_deg:1212},{english:"sex (male or female), gender",hangul:"성",hanja:"性",id:5984,freq_deg:4276},{english:"a specialist",hangul:"전문가",hanja:"專門家",id:5985,freq_deg:1214},{english:"simple, merely",hangul:"단지",hanja:"但只",id:5986,freq_deg:1801},{english:"dancing, a dance",hangul:"무용",hanja:"舞踊",id:5987,freq_deg:1217},{english:"abroad, foreign countries",hangul:"해외",hanja:"海外",id:5988,freq_deg:1222},{english:"cultural assets",hangul:"문화재",hanja:"文化財",id:5989,freq_deg:1224},{english:"smile",hangul:"미소",hanja:"微笑",id:5990,freq_deg:1225},{english:"restaurant",hangul:"식당",hanja:"食堂",id:5991,freq_deg:1227},{english:"since, after that, hereafter",hangul:"이래",hanja:"以來",id:5992,freq_deg:1229},{english:"thanks, gratitude",hangul:"사례",hanja:"事例",id:5993,freq_deg:1233},{english:"July",hangul:"칠월",hanja:"七月",id:5994,freq_deg:1237},{english:"average",hangul:"평균",hanja:"平均",id:5995,freq_deg:1239},{english:"training",hangul:"훈련",hanja:"訓鍊",id:5996,freq_deg:1240},{english:"December",hangul:"십이월",hanja:"十二月",id:5997,freq_deg:1242},{english:"dissertation, an academic paper, thesis",hangul:"논문",hanja:"論文",id:5998,freq_deg:1249},{english:"sometimes",hangul:"혹시",hanja:"或是",id:5999,freq_deg:1258},{english:"quantity, volume",hangul:"양",hanja:"量",id:6000,freq_deg:4873},{english:"process, formalities; 수속",hangul:"절차",hanja:"節次",id:6001,freq_deg:1261},{english:"belong to, be affiliated with",hangul:"속하다",hanja:"屬-",id:6002,freq_deg:1265},{english:"except, apart from",hangul:"이외",hanja:"以外",id:6003,freq_deg:1267},{english:"increase,rise,grow",hangul:"증가하다",hanja:"增加-",id:6004,freq_deg:1270},{english:"untroubled from cares",hangul:"편하다",hanja:"便-",id:6005,freq_deg:1276},{english:"a pyeong (roughly 2 square meters)",hangul:"평",hanja:"坪",id:6006,freq_deg:4095},{english:"an answer",hangul:"대답",hanja:"對答",id:6007,freq_deg:1280},{english:"the beginning",hangul:"시작",hanja:"始作",id:6008,freq_deg:1281},{english:"one whole day",hangul:"일주일",hanja:"一週日",id:6009,freq_deg:1283},{english:"resources ",hangul:"자원",hanja:"資源",id:6010,freq_deg:1284},{english:"obviously",hangul:"분명히",hanja:"分明-",id:6011,freq_deg:1288},{english:"a demonstration",hangul:"시위",hanja:"示威",id:6012,freq_deg:1289},{english:"the greatest, the largest",hangul:"최대",hanja:"最大",id:6013,freq_deg:1294},{english:"ordinary times, ordinarily",hangul:"평소",hanja:"平素",id:6014,freq_deg:1295},{english:"an opinion, view",hangul:"견해",hanja:"見解",id:6015,freq_deg:1296},{english:"farming",hangul:"농사",hanja:"農事",id:6016,freq_deg:1298},{english:"a house",hangul:"주택",hanja:"住宅",id:6017,freq_deg:1303},{english:"to be sorry",hangul:"미안하다",hanja:"未安-",id:6018,freq_deg:1308},{english:"people, men of society",hangul:"인사",hanja:"人士",id:6019,freq_deg:1312},{english:"regard or  respect",hangul:"고려하다",hanja:"考慮-",id:6020,freq_deg:1314},{english:"a farm village",hangul:"농촌",hanja:"農村",id:6021,freq_deg:1317},{english:"October",hangul:"시월",hanja:"十月",id:6022,freq_deg:1333},{english:"a rumor",hangul:"소문",hanja:"所聞",id:6023,freq_deg:1340},{english:"one's children",hangul:"자녀",hanja:"子女",id:6024,freq_deg:1344},{english:"August",hangul:"팔월",hanja:"八月",id:6025,freq_deg:1348},{english:"conversation partner",hangul:"상대방",hanja:"相對方",id:6026,freq_deg:1356},{english:"Western Europe",hangul:"서구",hanja:"西歐",id:6027,freq_deg:1357},{english:"possession",hangul:"소유",hanja:"所有",id:6028,freq_deg:1358},{english:"a mistake",hangul:"실수",hanja:"失手",id:6029,freq_deg:1360},{english:"medical treatment, medical care",hangul:"치료",hanja:"治療",id:6030,freq_deg:1362},{english:"width; range",hangul:"폭",hanja:"幅",id:6031,freq_deg:1363},{english:"a pen name, a title; a number, an issue",hangul:"호",hanja:"號",id:6032,freq_deg:1364},{english:"pregnant",hangul:"임신",hanja:"妊娠",id:6033,freq_deg:1369},{english:"members of a family, your immediate family members (lit. people you eat with)",hangul:"식구",hanja:"食口",id:6034,freq_deg:1375},{english:"to be sure, certain",hangul:"확실하다",hanja:"確實-",id:6035,freq_deg:1380},{english:"a letter, a character",hangul:"글자",hanja:"-字",id:6036,freq_deg:1383},{english:"to research, investigate",hangul:"연구하다",hanja:"硏究-",id:6037,freq_deg:1385},{english:"real estate",hangul:"부동산",hanja:"不動産",id:6038,freq_deg:1388},{english:"miss ~",hangul:"양",hanja:"孃",id:6039,freq_deg:4873},{english:"a spot, a blemish",hangul:"점",hanja:"點",id:6040,freq_deg:1391},{english:"school holidays",hangul:"방학",hanja:"放學",id:6041,freq_deg:1394},{english:"ancestors",hangul:"조상",hanja:"祖上",id:6042,freq_deg:1396},{english:"large, full-sized",hangul:"대형",hanja:"大型",id:6043,freq_deg:1402},{english:"the point at issue",hangul:"문제점",hanja:"問題點",id:6044,freq_deg:1403},{english:"exemplary",hangul:"본격적",hanja:"本格的",id:6045,freq_deg:1404},{english:"impossible",hangul:"불가능하다",hanja:"不可能-",id:6046,freq_deg:1405},{english:"an impact, a shock",hangul:"충격",hanja:"衝擊",id:6047,freq_deg:1406},{english:"just now;  a moment ago",hangul:"금방",hanja:"今方",id:6048,freq_deg:1408},{english:"south side",hangul:"남쪽",hanja:"南-",id:6049,freq_deg:1409},{english:"the common people",hangul:"백성",hanja:"百姓",id:6050,freq_deg:1412},{english:"fairly, considerably",hangul:"상당히",hanja:"相當-",id:6051,freq_deg:1413},{english:"color",hangul:"색깔",hanja:"色-",id:6052,freq_deg:1414},{english:"cooking",hangul:"요리",hanja:"料理",id:6053,freq_deg:1415},{english:"to be famous",hangul:"유명하다",hanja:"有名-",id:6054,freq_deg:1416},{english:"energy; breath or  wind",hangul:"기13",hanja:"氣",id:6055,freq_deg:1418},{english:"pointing out, indication",hangul:"지적",hanja:"指摘",id:6056,freq_deg:4461},{english:"worry,anxiety,fear",hangul:"우려",hanja:"憂慮",id:6057,freq_deg:1438},{english:"an umbrella",hangul:"우산",hanja:"雨傘",id:6058,freq_deg:1439},{english:"to be discovered",hangul:"발견되다",hanja:"發見-",id:6059,freq_deg:1445},{english:"to use",hangul:"이용",hanja:"利用",id:6060,freq_deg:1448},{english:"comparatively",hangul:"비교적",hanja:"比較的",id:6061,freq_deg:1455},{english:"on the desk",hangul:"책상",hanja:"冊床",id:6062,freq_deg:1458},{english:"a unit, a monad",hangul:"단위",hanja:"單位",id:6063,freq_deg:1463},{english:"a capital city",hangul:"수도",hanja:"首都",id:6064,freq_deg:1468},{english:"a part, a role",hangul:"역",hanja:"役",id:6065,freq_deg:3347},{english:"a Chinese character",hangul:"자",hanja:"字",id:6066,freq_deg:5021},{english:"a volume, a book (counter)",hangul:"권",hanja:"卷",id:6067,freq_deg:1473},{english:"clock, timekeeper, timepiece",hangul:"시계",hanja:"時計",id:6068,freq_deg:1477},{english:"in the middle",hangul:"중간",hanja:"中間",id:6069,freq_deg:1480},{english:"generally, on the whole",hangul:"대체로",hanja:"大體-",id:6070,freq_deg:1484},{english:"a chairman of a committee",hangul:"위원장",hanja:"委員長",id:6071,freq_deg:1488},{english:"to be special, extraordinary",hangul:"특별하다",hanja:"特別-",id:6072,freq_deg:1490},{english:"an artist",hangul:"예술가",hanja:"藝術家",id:6073,freq_deg:1498},{english:"an intention, an aim",hangul:"의도",hanja:"意圖",id:6074,freq_deg:1499},{english:"a matter or  an object or  a case",hangul:"건",hanja:"件",id:6075,freq_deg:1503},{english:"preach or  moral instruction",hangul:"교회",hanja:"敎會",id:6076,freq_deg:1504},{english:"Daegu city",hangul:"대구",hanja:"大邱",id:6077,freq_deg:1505},{english:"scientist",hangul:"과학자",hanja:"科學者",id:6078,freq_deg:1513},{english:"sightseeing, tourism",hangul:"관광",hanja:"觀光",id:6079,freq_deg:1514},{english:"surgery",hangul:"수술",hanja:"手術",id:6080,freq_deg:1517},{english:"groceries",hangul:"식품",hanja:"食品",id:6081,freq_deg:1518},{english:"January",hangul:"일월",hanja:"一月",id:6082,freq_deg:1520},{english:"article, clause",hangul:"조",hanja:"條",id:6083,freq_deg:4523},{english:"a member of a society",hangul:"회원",hanja:"會員",id:6084,freq_deg:1523},{english:"library",hangul:"도서관",hanja:"圖書館",id:6085,freq_deg:1524},{english:"to be strong, powerful",hangul:"강력하다",hanja:"强力-",id:6086,freq_deg:1529},{english:"a present, gift",hangul:"선물",hanja:"膳物",id:6087,freq_deg:1531},{english:"underground",hangul:"지하",hanja:"地下",id:6088,freq_deg:1535},{english:"utilize, make practical use of",hangul:"활용하다",hanja:"活用-",id:6089,freq_deg:1536},{english:"worry,  anguish",hangul:"고민",hanja:"苦悶",id:6090,freq_deg:1538},{english:"a law, statute",hangul:"법률",hanja:"法律",id:6091,freq_deg:1540},{english:"wound",hangul:"상처",hanja:"傷處",id:6092,freq_deg:1541},{english:"the present, the existence, actuality",hangul:"현",hanja:"現",id:6093,freq_deg:1545},{english:"screen",hangul:"화면",hanja:"畵面",id:6094,freq_deg:1546},{english:"Mister",hangul:"군",hanja:"君",id:6095,freq_deg:3902},{english:"if, suppose",hangul:"만일",hanja:"萬一",id:6096,freq_deg:1549},{english:"socially",hangul:"사회적",hanja:"社會的",id:6097,freq_deg:1550},{english:"fundamental, basic",hangul:"기본적",hanja:"基本的",id:6098,freq_deg:1565},{english:"office",hangul:"사무실",hanja:"事務室",id:6099,freq_deg:1567},{english:"February",hangul:"이월",hanja:"二月",id:6100,freq_deg:1568},{english:"a crime, a sin",hangul:"죄",hanja:"罪",id:6101,freq_deg:1580},{english:"the latter/second half",hangul:"후반",hanja:"後半",id:6102,freq_deg:1584},{english:"dissatisfaction",hangul:"불만",hanja:"不滿",id:6103,freq_deg:1588},{english:"to be unpleasant",hangul:"불편하다",hanja:"不便-",id:6104,freq_deg:1589},{english:"a sort,kind,species",hangul:"종",hanja:"種",id:6105,freq_deg:4006},{english:"river",hangul:"강",hanja:"江",id:6106,freq_deg:1592},{english:"spectator",hangul:"관객",hanja:"觀客",id:6107,freq_deg:1593},{english:"a figure, number",hangul:"숫자",hanja:"數字",id:6108,freq_deg:1597},{english:"heat",hangul:"열",hanja:"熱",id:6109,freq_deg:5173},{english:"the Middle Ages",hangul:"중세",hanja:"中世",id:6110,freq_deg:1600},{english:"stock",hangul:"주식",hanja:"株式",id:6111,freq_deg:1609},{english:"trademark, brand",hangul:"상표",hanja:"商標",id:6112,freq_deg:1615},{english:"a paternal aunt",hangul:"고모",hanja:"姑母",id:6113,freq_deg:1619},{english:"democratization",hangul:"민주화",hanja:"民主化",id:6114,freq_deg:1621},{english:"to be weak",hangul:"약하다",hanja:"弱-",id:6115,freq_deg:1624},{english:"you and your family",hangul:"댁",hanja:"宅",id:6116,freq_deg:1630},{english:"lack, want (scarcity, insufficiency)",hangul:"부족",hanja:"不足",id:6117,freq_deg:1632},{english:"execution, enforcement",hangul:"실시",hanja:"實施",id:6118,freq_deg:1633},{english:"finances, economy",hangul:"재정",hanja:"財政",id:6119,freq_deg:1635},{english:"on  a large scale",hangul:"대규모",hanja:"大規模",id:6120,freq_deg:1640},{english:"the same",hangul:"동",hanja:"同",id:6121,freq_deg:1641},{english:"civil, private",hangul:"민간",hanja:"民間",id:6122,freq_deg:1642},{english:"court of justice",hangul:"법원",hanja:"法院",id:6123,freq_deg:1643},{english:"actually, in truth",hangul:"사실상",hanja:"事實上",id:6124,freq_deg:1645},{english:"to make a conclusion",hangul:"판단하다",hanja:"判斷-",id:6125,freq_deg:1649},{english:"to put sth into practice",hangul:"실천하다",hanja:"實踐-",id:6126,freq_deg:1653},{english:"practice, exercise",hangul:"연습",hanja:"練習",id:6127,freq_deg:1655},{english:"bathroom",hangul:"화장실",hanja:"化粧室",id:6128,freq_deg:1662},{english:"a nucleus, core",hangul:"핵",hanja:"核",id:6129,freq_deg:1668},{english:"high rank; first class",hangul:"고급",hanja:"高級",id:6130,freq_deg:1669},{english:"a hard life; privation",hangul:"고생",hanja:"苦生",id:6131,freq_deg:1670},{english:"be proper, suitable",hangul:"상당하다",hanja:"相當-",id:6132,freq_deg:1673},{english:"the top seat",hangul:"수석",hanja:"首席",id:6133,freq_deg:1675},{english:"appropriateness",hangul:"적절하다",hanja:"適切-",id:6134,freq_deg:1678},{english:"a holiday ceremony",hangul:"제사",hanja:"祭祀",id:6135,freq_deg:1680},{english:"weekend",hangul:"주말",hanja:"週末",id:6136,freq_deg:1681},{english:"next year",hangul:"내년",hanja:"來年",id:6137,freq_deg:1688},{english:"agricultural products",hangul:"농산물",hanja:"農産物",id:6138,freq_deg:1689},{english:"university student",hangul:"대학생",hanja:"大學生",id:6139,freq_deg:1691},{english:"thought, contemplation",hangul:"사고",hanja:"思考",id:6140,freq_deg:1694},{english:"a reasearch institute",hangul:"연구소",hanja:"硏究所",id:6141,freq_deg:1697},{english:"to move (between houses, apartments)",hangul:"이사",hanja:"移徙",id:6142,freq_deg:1700},{english:"for example; supposing or admitting",hangul:"가령",hanja:"假令",id:6143,freq_deg:1703},{english:"huge, gigantic, enormous",hangul:"거대하다",hanja:"巨大-",id:6144,freq_deg:1704},{english:"a birthday",hangul:"생일",hanja:"生日",id:6145,freq_deg:1707},{english:"less than, below",hangul:"이하",hanja:"以下",id:6146,freq_deg:1709},{english:"to attend, take part in",hangul:"참석하다",hanja:"參席-",id:6147,freq_deg:1710},{english:"laborer",hangul:"근로자",hanja:"勤勞者",id:6148,freq_deg:1715},{english:"a bottle",hangul:"병",hanja:"甁",id:6149,freq_deg:1720},{english:"to say hello",hangul:"안녕하다",hanja:"安寧-",id:6150,freq_deg:1722},{english:"public opinion, public sentiment towards sth",hangul:"여론",hanja:"輿論",id:6151,freq_deg:1723},{english:"down to earth, realistic",hangul:"현실적",hanja:"現實的",id:6152,freq_deg:1727},{english:"attack",hangul:"공격",hanja:"攻擊",id:6153,freq_deg:1731},{english:"prices of products",hangul:"물가",hanja:"物價",id:6154,freq_deg:1732},{english:"uneasiness, anxiety",hangul:"불안",hanja:"不安",id:6155,freq_deg:1734},{english:"to be important, valuable",hangul:"소중하다",hanja:"所重-",id:6156,freq_deg:1735},{english:"waves, billows",hangul:"파도",hanja:"波濤",id:6157,freq_deg:1740},{english:"gray, ash color",hangul:"흰색",hanja:"-色",id:6158,freq_deg:1741},{english:"singer",hangul:"가수",hanja:"歌手",id:6159,freq_deg:1742},{english:"only one, alone",hangul:"단",hanja:"單",id:6160,freq_deg:4330},{english:"broadcasting station",hangul:"방송국",hanja:"放送局",id:6161,freq_deg:1744},{english:"deposit money",hangul:"예금",hanja:"預金",id:6162,freq_deg:1749},{english:"immediately after",hangul:"직후",hanja:"直後",id:6163,freq_deg:1753},{english:"a developed country",hangul:"선진국",hanja:"先進國",id:6164,freq_deg:1757},{english:"medicine",hangul:"약",hanja:"藥",id:6165,freq_deg:5160},{english:"a window",hangul:"창문",hanja:"窓門",id:6166,freq_deg:1763},{english:"a second",hangul:"초",hanja:"秒",id:6167,freq_deg:1764},{english:"display, exhibit",hangul:"발휘하다",hanja:"發揮-",id:6168,freq_deg:1770},{english:"small and medium enterprises",hangul:"중소기업",hanja:"中小企業",id:6169,freq_deg:1775},{english:"directly, immediately",hangul:"직접적",hanja:"直接的",id:6170,freq_deg:1776},{english:"cooperation, cooperate with",hangul:"협력",hanja:"協力",id:6171,freq_deg:1779},{english:"a class, social stratum",hangul:"계층",hanja:"階層",id:6172,freq_deg:1781},{english:"cartoons",hangul:"만화",hanja:"漫畵",id:6173,freq_deg:1784},{english:"pulling/drawing up",hangul:"인상",hanja:"引上",id:6174,freq_deg:5019},{english:"thoroughness, cleanliness",hangul:"철저하다",hanja:"徹底-",id:6175,freq_deg:1793},{english:"observe, view, watch",hangul:"관찰하다",hanja:"觀察-",id:6176,freq_deg:1795},{english:"a public apartment complex",hangul:"단지",hanja:"團地",id:6177,freq_deg:1801},{english:"democracy",hangul:"민주",hanja:"民主",id:6178,freq_deg:1803},{english:"beauty, belle",hangul:"여인",hanja:"女人",id:6179,freq_deg:1807},{english:"manage, administer",hangul:"운영하다",hanja:"運營-",id:6180,freq_deg:1808},{english:"a marker, indication",hangul:"표",hanja:"票",id:6181,freq_deg:2313},{english:"necessity ",hangul:"필요성",hanja:"必要性",id:6182,freq_deg:1811},{english:"a region, part",hangul:"부위",hanja:"部位",id:6183,freq_deg:1814},{english:"to found, establish, create",hangul:"설치하다",hanja:"設置-",id:6184,freq_deg:1816},{english:"November",hangul:"십일월",hanja:"十一月",id:6185,freq_deg:1817},{english:"brothers and sisters",hangul:"형제",hanja:"兄弟",id:6186,freq_deg:1822},{english:"fancy, showy, splendid, colorful",hangul:"화려하다",hanja:"華麗-",id:6187,freq_deg:1823},{english:"international",hangul:"세계적",hanja:"世界的",id:6188,freq_deg:1828},{english:"an onion",hangul:"양파",hanja:"洋-",id:6189,freq_deg:1830},{english:"a kind, a sort, a species",hangul:"일종",hanja:"一種",id:6190,freq_deg:1832},{english:"a situation, circumstances",hangul:"처지",hanja:"處地",id:6191,freq_deg:1833},{english:"photographing, filming, recording",hangul:"촬영",hanja:"撮影",id:6192,freq_deg:1834},{english:"the situation, the state of things (esp. financial)",hangul:"형편",hanja:"形便",id:6193,freq_deg:1837},{english:"slowly, little by little",hangul:"서서히",hanja:"徐徐-",id:6194,freq_deg:1845},{english:"social position",hangul:"신분",hanja:"身分",id:6195,freq_deg:1847},{english:"to be enforced",hangul:"실시되다",hanja:"實施-",id:6196,freq_deg:1848},{english:"the inner room",hangul:"안방",hanja:"-房",id:6197,freq_deg:1850},{english:"self-confidence",hangul:"자신",hanja:"自信",id:6198,freq_deg:1855},{english:"for a little while",hangul:"잠시",hanja:"暫時",id:6199,freq_deg:1856},{english:"to graduate",hangul:"졸업하다",hanja:"卒業-",id:6200,freq_deg:1857},{english:"a focus, a focal point",hangul:"초점",hanja:"焦點",id:6201,freq_deg:1859},{english:"a tiger",hangul:"호랑이",hanja:"虎狼-",id:6202,freq_deg:1861},{english:"strengthen",hangul:"강화하다",hanja:"强化-",id:6203,freq_deg:1862},{english:"originally, primarily",hangul:"본래",hanja:"本來",id:6204,freq_deg:1867},{english:"tax",hangul:"세금",hanja:"稅金",id:6205,freq_deg:1869},{english:"the actual situation",hangul:"실정",hanja:"實情",id:6206,freq_deg:1870},{english:"nutrition",hangul:"영양",hanja:"營養",id:6207,freq_deg:1871},{english:"the flesh, the body",hangul:"육체",hanja:"肉體",id:6208,freq_deg:1872},{english:"the positive",hangul:"적극",hanja:"積極",id:6209,freq_deg:1875},{english:"at least",hangul:"최소한",hanja:"最小限",id:6210,freq_deg:1876},{english:"independence",hangul:"독립",hanja:"獨立",id:6211,freq_deg:1883},{english:"northern",hangul:"북쪽",hanja:"北-",id:6212,freq_deg:1885},{english:"to be uneasy, anxious",hangul:"불안하다",hanja:"不安-",id:6213,freq_deg:1886},{english:"a lifetime",hangul:"평생",hanja:"平生",id:6214,freq_deg:1890},{english:"to be applied, applicable under",hangul:"해당하다",hanja:"該當-",id:6215,freq_deg:1891},{english:"executive management",hangul:"간부",hanja:"幹部",id:6216,freq_deg:1892},{english:"very much, greatly",hangul:"굉장히",hanja:"宏壯-",id:6217,freq_deg:1894},{english:"a postulate, a given condition",hangul:"여건",hanja:"與件",id:6218,freq_deg:1905},{english:"long ago",hangul:"오래전",hanja:"-前",id:6219,freq_deg:1906},{english:"control, regulation",hangul:"통제",hanja:"統制",id:6220,freq_deg:1908},{english:"a staircase, a set of stairs",hangul:"계단",hanja:"階段",id:6221,freq_deg:1909},{english:"reflect, be reflected",hangul:"반영하다",hanja:"反映-",id:6222,freq_deg:1917},{english:"belong to, attached to",hangul:"소속",hanja:"所屬",id:6223,freq_deg:1920},{english:"connect, attach",hangul:"연결되다",hanja:"連結-",id:6224,freq_deg:1921},{english:"to be drunk",hangul:"취하다",hanja:"醉-",id:6225,freq_deg:1927},{english:"a captain",hangul:"선장",hanja:"船長",id:6226,freq_deg:1937},{english:"sugar",hangul:"설탕",hanja:"雪糖",id:6227,freq_deg:1938},{english:"to be pure",hangul:"순수하다",hanja:"純粹-",id:6228,freq_deg:1939},{english:"point in time",hangul:"시점",hanja:"時點",id:6229,freq_deg:1941},{english:"an intention, a purpose",hangul:"의사",hanja:"意思",id:6230,freq_deg:1943},{english:"a worldview",hangul:"세계관",hanja:"世界觀",id:6231,freq_deg:1951},{english:"in detail",hangul:"자세히",hanja:"仔細-",id:6232,freq_deg:1954},{english:"lunch",hangul:"점심",hanja:"點心",id:6233,freq_deg:1955},{english:"competitiveness",hangul:"경쟁력",hanja:"競爭力",id:6234,freq_deg:1963},{english:"connection, communication",hangul:"연락",hanja:"連絡",id:6235,freq_deg:1966},{english:"feeling of attachment",hangul:"정",hanja:"情",id:6236,freq_deg:1968},{english:"mental",hangul:"정신적",hanja:"精神的",id:6237,freq_deg:1969},{english:"symptoms",hangul:"증상",hanja:"症狀",id:6238,freq_deg:1970},{english:"appear on stage, act, sing",hangul:"출연하다",hanja:"出演-",id:6239,freq_deg:1971},{english:"compulsion, coercion",hangul:"강제",hanja:"强制",id:6240,freq_deg:1974},{english:"a rate, a fare",hangul:"요금",hanja:"料金",id:6241,freq_deg:1986},{english:"pocket money, money for expenses",hangul:"용돈",hanja:"用-",id:6242,freq_deg:1987},{english:"put first in importance",hangul:"위주",hanja:"爲主",id:6243,freq_deg:1988},{english:"a beverage, a drink",hangul:"음료",hanja:"飮料",id:6244,freq_deg:1989},{english:"to be transmitted",hangul:"전해지다",hanja:"傳-",id:6245,freq_deg:1992},{english:"a boundary, situation,state",hangul:"지경",hanja:"地境",id:6246,freq_deg:1994},{english:"progress, advance",hangul:"진행",hanja:"進行",id:6247,freq_deg:1995},{english:"an ache, pain",hangul:"통증",hanja:"痛症",id:6248,freq_deg:1997},{english:"to be convenient, handy",hangul:"편리하다",hanja:"便利-",id:6249,freq_deg:1998},{english:"cash, ready funds, not a credit card",hangul:"현금",hanja:"現金",id:6250,freq_deg:2000},{english:"be lively, sprightly",hangul:"활발하다",hanja:"活潑-",id:6251,freq_deg:2002},{english:"the southern part",hangul:"남부",hanja:"南部",id:6252,freq_deg:2007},{english:"unconditional",hangul:"무조건",hanja:"無條件",id:6253,freq_deg:2010},{english:"squad leader",hangul:"반장",hanja:"班長",id:6254,freq_deg:2011},{english:"neighborhood, vicinity",hangul:"부근",hanja:"附近",id:6255,freq_deg:2012},{english:"a choice",hangul:"선택",hanja:"選擇",id:6256,freq_deg:2013},{english:"historian",hangul:"역사가",hanja:"歷史家",id:6257,freq_deg:2014},{english:"researcher",hangul:"연구자",hanja:"硏究者",id:6258,freq_deg:2015},{english:"a performer, an actor",hangul:"연기자",hanja:"演技者",id:6259,freq_deg:2016},{english:"a policeman",hangul:"경찰관",hanja:"警察官",id:6260,freq_deg:2021},{english:"advise, persuade, recommend",hangul:"권하다",hanja:"勸-",id:6261,freq_deg:2022},{english:"a big gate",hangul:"대문",hanja:"大門",id:6262,freq_deg:2025},{english:"a separate way",hangul:"별도",hanja:"別途",id:6263,freq_deg:2027},{english:"the city",hangul:"시내",hanja:"市內",id:6264,freq_deg:2030},{english:"in the room",hangul:"실내",hanja:"室內",id:6265,freq_deg:2032},{english:"connect, attach",hangul:"연결하다",hanja:"連結-",id:6266,freq_deg:2034},{english:"diplomacy",hangul:"외교",hanja:"外交",id:6267,freq_deg:2035},{english:"the department/section head",hangul:"과장",hanja:"課長",id:6268,freq_deg:2038},{english:"drama, play",hangul:"극",hanja:"劇",id:6269,freq_deg:2039},{english:"tea room",hangul:"다방",hanja:"茶房",id:6270,freq_deg:2041},{english:"really, indeed",hangul:"실로",hanja:"實-",id:6271,freq_deg:2046},{english:"some, a little",hangul:"약간",hanja:"若干",id:6272,freq_deg:2049},{english:"smoke, fume",hangul:"연기",hanja:"煙氣",id:6273,freq_deg:4559},{english:"cause and occasion",hangul:"인연",hanja:"因緣",id:6274,freq_deg:2052},{english:"a party, group of people, troupe; line",hangul:"일행",hanja:"一行",id:6275,freq_deg:2053},{english:"an intellectual",hangul:"지식인",hanja:"知識人",id:6276,freq_deg:2055},{english:"to be serious, earnest",hangul:"진지하다",hanja:"眞摯-",id:6277,freq_deg:2056},{english:"temperature",hangul:"기온",hanja:"氣溫",id:6278,freq_deg:2060},{english:"entirely, generally",hangul:"전체적",hanja:"全體的",id:6279,freq_deg:2072},{english:"half",hangul:"절반",hanja:"折半",id:6280,freq_deg:2073},{english:"to be peaceful",hangul:"편안하다",hanja:"便安-",id:6281,freq_deg:2075},{english:"certainly, for sure",hangul:"확실히",hanja:"確實-",id:6282,freq_deg:2076},{english:"climate or  weather",hangul:"기후",hanja:"氣候",id:6283,freq_deg:2081},{english:"big enterprise",hangul:"대기업",hanja:"大企業",id:6284,freq_deg:2083},{english:"one hundred",hangul:"백",hanja:"百",id:6285,freq_deg:5482},{english:"head of a department",hangul:"부장",hanja:"部長",id:6286,freq_deg:2090},{english:"a mental state",hangul:"심리",hanja:"心理",id:6287,freq_deg:2093},{english:"one's heart, one's feelings",hangul:"심정",hanja:"心情",id:6288,freq_deg:2094},{english:"really",hangul:"정말로",hanja:"正-",id:6289,freq_deg:2101},{english:"a criminal, penal case",hangul:"형사",hanja:"刑事",id:6290,freq_deg:2106},{english:"a drama, a play",hangul:"희곡",hanja:"戱曲",id:6291,freq_deg:2107},{english:"agitate, stir up the emotions",hangul:"감동",hanja:"感動",id:6292,freq_deg:2108},{english:"be urgent, pressing, iminent",hangul:"급하다",hanja:"急-",id:6293,freq_deg:2113},{english:"pop culture",hangul:"대중문화",hanja:"大衆文化",id:6294,freq_deg:2115},{english:"moisture",hangul:"물기",hanja:"-氣",id:6295,freq_deg:2119},{english:"to try, attempt",hangul:"시도하다",hanja:"試圖-",id:6296,freq_deg:2122},{english:"propriety, decorum",hangul:"예절",hanja:"禮節",id:6297,freq_deg:2124},{english:"to apply (sth to sth else)",hangul:"적용하다",hanja:"適用-",id:6298,freq_deg:2127},{english:"traditional",hangul:"전통적",hanja:"傳統的",id:6299,freq_deg:2128},{english:"specify",hangul:"특정하다",hanja:"特定-",id:6300,freq_deg:2132},{english:"bridge",hangul:"다리",hanja:"교량",id:6301,freq_deg:2139},{english:"Buddha",hangul:"부처",hanja:"部處",id:6302,freq_deg:2143},{english:"temperature",hangul:"온도",hanja:"溫度",id:6303,freq_deg:2146},{english:"absolutely",hangul:"절대로",hanja:"絶對-",id:6304,freq_deg:2148},{english:"real",hangul:"진짜",hanja:"眞-",id:6305,freq_deg:2151},{english:"outside the window",hangul:"창밖",hanja:"窓-",id:6306,freq_deg:2153},{english:"objective",hangul:"객관적",hanja:"客觀的",id:6307,freq_deg:2159},{english:"unit, troops, squad (military)",hangul:"부대",hanja:"部隊",id:6308,freq_deg:2167},{english:"television audience member",hangul:"시청자",hanja:"視聽者",id:6309,freq_deg:2170},{english:"perfect",hangul:"완벽하다",hanja:"完璧-",id:6310,freq_deg:2173},{english:"a Buddhist temple",hangul:"절",hanja:"사찰",id:6311,freq_deg:4079},{english:"waiter/waitress",hangul:"종업원",hanja:"從業員",id:6312,freq_deg:2176},{english:"an increase, augmentation",hangul:"증가",hanja:"增加",id:6313,freq_deg:2177},{english:"going on stage",hangul:"출연",hanja:"出演",id:6314,freq_deg:2178},{english:"an educational term",hangul:"학기",hanja:"學期",id:6315,freq_deg:2179},{english:"the latter term/period",hangul:"후기",hanja:"後期",id:6316,freq_deg:2181},{english:"a pastor",hangul:"목사",hanja:"牧師",id:6317,freq_deg:2184},{english:"a department, a part",hangul:"부",hanja:"部",id:6318,freq_deg:4343},{english:"income",hangul:"수입",hanja:"收入",id:6319,freq_deg:2190},{english:"both sides",hangul:"양쪽",hanja:"兩-",id:6320,freq_deg:2192},{english:"for example, such as",hangul:"예컨대",hanja:"例-",id:6321,freq_deg:2193},{english:"stadium, playground",hangul:"운동장",hanja:"運動場",id:6322,freq_deg:2194},{english:"one's junior",hangul:"후배",hanja:"後輩",id:6323,freq_deg:2200},{english:"the business market's state",hangul:"경기",hanja:"景氣",id:6324,freq_deg:2202},{english:"a member of the national assembly",hangul:"국회의원",hanja:"國會議員",id:6325,freq_deg:2204},{english:"absolutely impossible; by all means",hangul:"도저히",hanja:"到底-",id:6326,freq_deg:2206},{english:"political rights",hangul:"정치권",hanja:"政治權",id:6327,freq_deg:2216},{english:"learning, education",hangul:"학습",hanja:"學習",id:6328,freq_deg:2220},{english:"of course",hangul:"당연히",hanja:"當然-",id:6329,freq_deg:2223},{english:"provide for, prepare onself for",hangul:"대비하다",hanja:"對備-",id:6330,freq_deg:2224},{english:"a corridor",hangul:"복도",hanja:"複道",id:6331,freq_deg:2228},{english:"head of sth; the Prime Minister",hangul:"수상",hanja:"首相",id:6332,freq_deg:2229},{english:"an image, picture, reflection; multimedia, movies",hangul:"영상",hanja:"映像",id:6333,freq_deg:5573},{english:"a soul, a spirit",hangul:"영혼",hanja:"靈魂",id:6334,freq_deg:2232},{english:"a driver",hangul:"운전사",hanja:"運轉士",id:6335,freq_deg:2233},{english:"to be applied",hangul:"적용되다",hanja:"適用-",id:6336,freq_deg:2237},{english:"one week",hangul:"주",hanja:"週",id:6337,freq_deg:2376},{english:"continuous",hangul:"지속적",hanja:"持續的",id:6338,freq_deg:2239},{english:"advance, proceed",hangul:"진행하다",hanja:"進行-",id:6339,freq_deg:2240},{english:"from a to b",hangul:"내지",hanja:"乃至",id:6340,freq_deg:2245},{english:"rage,anger",hangul:"분노",hanja:"憤怒",id:6341,freq_deg:2247},{english:"what is called for",hangul:"소위",hanja:"所謂",id:6342,freq_deg:2249},{english:"historical",hangul:"역사적",hanja:"歷史的",id:6343,freq_deg:2251},{english:"train",hangul:"열차",hanja:"列車",id:6344,freq_deg:2252},{english:"formality, due form",hangul:"정식",hanja:"正式",id:6345,freq_deg:2259},{english:"at once, immediately",hangul:"즉시",hanja:"卽時",id:6346,freq_deg:2261},{english:"the best, one's best",hangul:"최선",hanja:"最善",id:6347,freq_deg:2262},{english:"a tower",hangul:"탑",hanja:"塔",id:6348,freq_deg:2263},{english:"Korean traditional clothing",hangul:"한복",hanja:"韓服",id:6349,freq_deg:2264},{english:"be confused",hangul:"당황하다",hanja:"唐慌-",id:6350,freq_deg:2269},{english:"report",hangul:"보고서",hanja:"報告書",id:6351,freq_deg:2275},{english:"damage, injure",hangul:"상하다",hanja:"傷-",id:6352,freq_deg:2279},{english:"establisment, institution",hangul:"설치",hanja:"設置",id:6353,freq_deg:2280},{english:"cooking oil",hangul:"식용유",hanja:"食用油",id:6354,freq_deg:2281},{english:"types of industry",hangul:"업종",hanja:"業種",id:6355,freq_deg:2283},{english:"production, presentation",hangul:"연출",hanja:"演出",id:6356,freq_deg:2284},{english:"to be very tired, exhausted",hangul:"피곤하다",hanja:"疲困-",id:6357,freq_deg:2287},{english:"Korean (language)",hangul:"한국어",hanja:"韓國語",id:6358,freq_deg:2288},{english:"fear, fright, terror, dread",hangul:"겁",hanja:"怯",id:6359,freq_deg:2290},{english:"a government official",hangul:"관리",hanja:"官吏",id:6360,freq_deg:2291},{english:"internationalization",hangul:"국제화",hanja:"國際化",id:6361,freq_deg:2292},{english:"beforehand, in advance",hangul:"사전",hanja:"事前",id:6362,freq_deg:4743},{english:"city",hangul:"시",hanja:"市",id:6363,freq_deg:2299},{english:"fresh",hangul:"신선하다",hanja:"新鮮-",id:6364,freq_deg:2300},{english:"combination, federacy, union",hangul:"연합",hanja:"聯合",id:6365,freq_deg:2303},{english:"a chapter in a book",hangul:"장",hanja:"章",id:6366,freq_deg:2305},{english:"the enemy",hangul:"적",hanja:"敵",id:6367,freq_deg:2306},{english:"to be careful",hangul:"조심하다",hanja:"操心-",id:6368,freq_deg:2307},{english:"quality, character",hangul:"질",hanja:"質",id:6369,freq_deg:2308},{english:"manager, person in charge",hangul:"책임자",hanja:"責任者",id:6370,freq_deg:2310},{english:"all, entire, whole",hangul:"총",hanja:"總",id:6371,freq_deg:4015},{english:"a marker, indication",hangul:"표",hanja:"表",id:6372,freq_deg:2313},{english:"item",hangul:"품목",hanja:"品目",id:6373,freq_deg:2314},{english:"classified by",hangul:"별",hanja:"別",id:6374,freq_deg:2320},{english:"reaction, side effect",hangul:"부작용",hanja:"副作用",id:6375,freq_deg:2322},{english:"a statement, declaration",hangul:"신고",hanja:"申告",id:6376,freq_deg:2324},{english:"menace, threat, intimidation",hangul:"위협",hanja:"威脅",id:6377,freq_deg:2328},{english:"open to the public",hangul:"공개하다",hanja:"公開-",id:6378,freq_deg:2337},{english:"a subject or  a lesson",hangul:"과목",hanja:"科目",id:6379,freq_deg:2338},{english:"controversy, argument",hangul:"논쟁",hanja:"論爭",id:6380,freq_deg:2342},{english:"tens of sth",hangul:"수십",hanja:"數十",id:6381,freq_deg:2347},{english:"Confucianism",hangul:"유교",hanja:"儒敎",id:6382,freq_deg:2350},{english:"reason, reasoning",hangul:"이성",hanja:"理性",id:6383,freq_deg:5345},{english:"everyday, usual, ordinary",hangul:"일상",hanja:"日常",id:6384,freq_deg:2353},{english:"automatic",hangul:"자동",hanja:"自動",id:6385,freq_deg:2354},{english:"regret, be sorry for",hangul:"죄송하다",hanja:"罪悚-",id:6386,freq_deg:2357},{english:"importance, gravity",hangul:"중요성",hanja:"重要性",id:6387,freq_deg:2358},{english:"especially",hangul:"특별히",hanja:"特別-",id:6388,freq_deg:2361},{english:"product quality",hangul:"품질",hanja:"品質",id:6389,freq_deg:2362},{english:"traces, signs, evidence",hangul:"흔적",hanja:"痕跡",id:6390,freq_deg:2365},{english:"brains",hangul:"뇌",hanja:"腦",id:6391,freq_deg:2370},{english:"envelope",hangul:"봉투",hanja:"封套",id:6392,freq_deg:2371},{english:"obviousness",hangul:"분명",hanja:"分明",id:6393,freq_deg:2372},{english:"an editorial",hangul:"사설",hanja:"社說",id:6394,freq_deg:2373},{english:"one's master, ones employer",hangul:"주",hanja:"主",id:6395,freq_deg:2376},{english:"anyway, at any rate, in any case (interjection)",hangul:"하여튼",hanja:"何如-",id:6396,freq_deg:2379},{english:"fragrance, aroma, perfume",hangul:"향기",hanja:"香氣",id:6397,freq_deg:2381},{english:"current location",hangul:"현지",hanja:"現地",id:6398,freq_deg:2382},{english:"private, personal",hangul:"개인적",hanja:"個人的",id:6399,freq_deg:2384},{english:"versus; a pair, counterpart",hangul:"대",hanja:"對",id:6400,freq_deg:5131},{english:"every year",hangul:"매년",hanja:"每年",id:6401,freq_deg:2391},{english:"Korean alchohol",hangul:"소주",hanja:"燒酒",id:6402,freq_deg:2394},{english:"a passenger car",hangul:"승용차",hanja:"乘用車",id:6403,freq_deg:2396},{english:"to be awkward, shy with words, speechless",hangul:"어색하다",hanja:"語塞-",id:6404,freq_deg:2397},{english:"a merit, strong point",hangul:"장점",hanja:"長點",id:6405,freq_deg:2400},{english:"an advance",hangul:"진출",hanja:"進出",id:6406,freq_deg:2403},{english:"plain, average",hangul:"평범하다",hanja:"平凡-",id:6407,freq_deg:2406},{english:"public information, public relations",hangul:"홍보",hanja:"弘報",id:6408,freq_deg:2408},{english:"a large quantity",hangul:"대량",hanja:"大量",id:6409,freq_deg:2414},{english:"raw fish",hangul:"생선",hanja:"生鮮",id:6410,freq_deg:2419},{english:"to be used",hangul:"이용되다",hanja:"利用-",id:6411,freq_deg:2422},{english:"temporary, special",hangul:"임시",hanja:"臨時",id:6412,freq_deg:2424},{english:"a tub, a cask",hangul:"통",hanja:"桶",id:6413,freq_deg:4716},{english:"characteristic,distinct,unique",hangul:"특수",hanja:"特殊",id:6414,freq_deg:2431},{english:"combine, unite",hangul:"합치다",hanja:"合-",id:6415,freq_deg:2433},{english:"plan, project",hangul:"기획",hanja:"企劃",id:6416,freq_deg:2437},{english:"human nature",hangul:"본성",hanja:"本性",id:6417,freq_deg:2442},{english:"productive capacity",hangul:"생산력",hanja:"生産力",id:6418,freq_deg:2444},{english:"study abroad",hangul:"유학",hanja:"留學",id:6419,freq_deg:3562},{english:"equipment, fittings",hangul:"장비",hanja:"裝備",id:6420,freq_deg:2448},{english:"politician",hangul:"정치인",hanja:"政治人",id:6421,freq_deg:2449},{english:"political",hangul:"정치적",hanja:"政治的",id:6422,freq_deg:2450},{english:"graduation",hangul:"졸업",hanja:"卒業",id:6423,freq_deg:2451},{english:"an examination, investigation, study",hangul:"검토",hanja:"檢討",id:6424,freq_deg:2455},{english:"techniques",hangul:"기법",hanja:"技法",id:6425,freq_deg:2457},{english:"a joke",hangul:"농담",hanja:"弄談",id:6426,freq_deg:2460},{english:"charge, duty",hangul:"담임",hanja:"擔任",id:6427,freq_deg:2462},{english:"on the way",hangul:"도중",hanja:"途中",id:6428,freq_deg:2463},{english:"a person",hangul:"인",hanja:"人",id:6429,freq_deg:2472},{english:"keyboard",hangul:"자판",hanja:"字板",id:6430,freq_deg:2475},{english:"application",hangul:"적용",hanja:"適用",id:6431,freq_deg:2476},{english:"the former period/term",hangul:"전기",hanja:"前期",id:6432,freq_deg:4821},{english:"at the middle stage (of a game or contest, or otherwise)",hangul:"중반",hanja:"中盤",id:6433,freq_deg:2478},{english:"each country",hangul:"각국",hanja:"各國",id:6434,freq_deg:2483},{english:"textbook",hangul:"교과서",hanja:"敎科書",id:6435,freq_deg:2484},{english:"a great number",hangul:"다수",hanja:"多數",id:6436,freq_deg:2488},{english:"indebtedness",hangul:"덕분",hanja:"德分",id:6437,freq_deg:2489},{english:"be unreasonable",hangul:"무리",hanja:"無理",id:6438,freq_deg:2925},{english:"the foundation of a country",hangul:"개국",hanja:"個國",id:6439,freq_deg:2505},{english:"a train",hangul:"기차",hanja:"汽車",id:6440,freq_deg:2508},{english:"discovery",hangul:"발견",hanja:"發見",id:6441,freq_deg:2513},{english:"ask sb a favor",hangul:"부탁하다",hanja:"付託-",id:6442,freq_deg:2515},{english:"a user, consumer, employer",hangul:"사용자",hanja:"使用者",id:6443,freq_deg:2516},{english:"socialism",hangul:"사회주의",hanja:"社會主義",id:6444,freq_deg:2517},{english:"to be established",hangul:"설치되다",hanja:"設置-",id:6445,freq_deg:2518},{english:"the metropolitan area",hangul:"수도권",hanja:"首都圈",id:6446,freq_deg:2519},{english:"to be determined, settled",hangul:"정해지다",hanja:"定-",id:6447,freq_deg:2525},{english:"general overseeing, presiding over",hangul:"총리",hanja:"總理",id:6448,freq_deg:2527},{english:"praide, admiration",hangul:"칭찬",hanja:"稱讚",id:6449,freq_deg:2528},{english:"affirmation, admission",hangul:"긍정적",hanja:"肯定的",id:6450,freq_deg:2532},{english:"lending",hangul:"대출",hanja:"貸出",id:6451,freq_deg:2534},{english:"virtue, morality",hangul:"덕",hanja:"德",id:6452,freq_deg:2535},{english:"to be contrary to",hangul:"반하다",hanja:"反-",id:6453,freq_deg:2539},{english:"company employee",hangul:"사원",hanja:"社員",id:6454,freq_deg:2543},{english:"a sum, an amount",hangul:"액수",hanja:"額數",id:6455,freq_deg:2548},{english:"greed, selfishness",hangul:"욕심",hanja:"欲心",id:6456,freq_deg:2550},{english:"first place",hangul:"우승",hanja:"優勝",id:6457,freq_deg:2551},{english:"cautious",hangul:"조심스럽다",hanja:"操心-",id:6458,freq_deg:2554},{english:"just immediately before",hangul:"직전",hanja:"直前",id:6459,freq_deg:2555},{english:"to guess, infer",hangul:"짐작하다",hanja:"斟酌-",id:6460,freq_deg:2556},{english:"choose, select",hangul:"택하다",hanja:"擇-",id:6461,freq_deg:2557},{english:"family",hangul:"가구",hanja:"家口",id:6462,freq_deg:4783},{english:"simply speaking",hangul:"간단히",hanja:"簡單-",id:6463,freq_deg:2562},{english:"river water",hangul:"강물",hanja:"江-",id:6464,freq_deg:2563},{english:"finally or in the end, 마지막으로",hangul:"궁극적",hanja:"窮極的",id:6465,freq_deg:2564},{english:"exceedingly,  extremely",hangul:"극히",hanja:"極-",id:6466,freq_deg:2565},{english:"contribute, add to",hangul:"기여하다",hanja:"寄與-",id:6467,freq_deg:2566},{english:"change, flucutation",hangul:"변동",hanja:"變動",id:6468,freq_deg:2572},{english:"inevitable, unavoidable ",hangul:"불가피하다",hanja:"不可避-",id:6469,freq_deg:2573},{english:"fortune, luck, fate",hangul:"운",hanja:"運",id:6470,freq_deg:2581},{english:"everyday (daily) life",hangul:"일상생활",hanja:"日常生活",id:6471,freq_deg:2582},{english:"self-confidence",hangul:"자존심",hanja:"自尊心",id:6472,freq_deg:2583},{english:"securities corporation",hangul:"증권사",hanja:"證券社",id:6473,freq_deg:2585},{english:"be dark, deep",hangul:"진하다",hanja:"津-",id:6474,freq_deg:2586},{english:"a plain, a prarie",hangul:"초원",hanja:"草原",id:6475,freq_deg:2587},{english:"last, final, terminal",hangul:"최종",hanja:"最終",id:6476,freq_deg:2588},{english:"interest, zeal",hangul:"흥미",hanja:"興味",id:6477,freq_deg:2591},{english:"relieve, replace another",hangul:"대신하다",hanja:"代身-",id:6478,freq_deg:2597},{english:"ratio, percentage",hangul:"비율",hanja:"比率",id:6479,freq_deg:2601},{english:"a noise, cacaphony",hangul:"소음",hanja:"騷音",id:6480,freq_deg:2603},{english:"both countries",hangul:"양국",hanja:"兩國",id:6481,freq_deg:2604},{english:"the center, middle part",hangul:"중부",hanja:"中部",id:6482,freq_deg:2609},{english:"tea",hangul:"차",hanja:"茶",id:6483,freq_deg:2667},{english:"vegetables",hangul:"채소",hanja:"菜蔬",id:6484,freq_deg:2611},{english:"to be relevent, applicable (to), fall under",hangul:"해당",hanja:"該當",id:6485,freq_deg:2616},{english:"environmental pollution",hangul:"환경오염",hanja:"環境汚染",id:6486,freq_deg:2618},{english:"one's values or sense of values, a value system",hangul:"가치관",hanja:"價値觀",id:6487,freq_deg:2619},{english:"black, dark",hangul:"검은색",hanja:"-色",id:6488,freq_deg:2620},{english:"to suffer, to have trials; to do something you don't want to do",hangul:"고생하다",hanja:"苦生-",id:6489,freq_deg:2621},{english:"B.C.",hangul:"기원전",hanja:"紀元前",id:6490,freq_deg:2622},{english:"the others or  the rest",hangul:"기타",hanja:"其他",id:6491,freq_deg:4540},{english:"emergency",hangul:"긴급",hanja:"緊急",id:6492,freq_deg:2624},{english:"as many as, no less  than",hangul:"무려",hanja:"無慮",id:6493,freq_deg:2627},{english:"a check",hangul:"수표",hanja:"手票",id:6494,freq_deg:2629},{english:"the actual conditions,reality",hangul:"실태",hanja:"實態",id:6495,freq_deg:2630},{english:"to be fixed, settled, regular",hangul:"일정",hanja:"日程",id:6496,freq_deg:2636},{english:"adjoin, be adjacent to",hangul:"접하다",hanja:"接-",id:6497,freq_deg:2639},{english:"true heart, devotion",hangul:"정성",hanja:"精誠",id:6498,freq_deg:2640},{english:"a condition, restriction",hangul:"제약",hanja:"制約",id:6499,freq_deg:2641},{english:"an addition",hangul:"추가",hanja:"追加",id:6500,freq_deg:2643},{english:"to add",hangul:"가하다",hanja:"加-",id:6501,freq_deg:2648},{english:"soy sauce",hangul:"간장",hanja:"-醬",id:6502,freq_deg:2649},{english:"a lecture, discourse",hangul:"강의",hanja:"講義",id:6503,freq_deg:2650},{english:"be in anguish, worried",hangul:"고민하다",hanja:"苦悶-",id:6504,freq_deg:2652},{english:"a course or  branch of study; a department or  a faculty",hangul:"과",hanja:"科",id:6505,freq_deg:2653},{english:"the national language; Korean",hangul:"국어",hanja:"國語",id:6506,freq_deg:2655},{english:"upper",hangul:"상",hanja:"上",id:6507,freq_deg:4274},{english:"musical instrument",hangul:"악기",hanja:"樂器",id:6508,freq_deg:2660},{english:"the end, close of the year",hangul:"연말",hanja:"年末",id:6509,freq_deg:2661},{english:"a manuscript",hangul:"원고",hanja:"原稿",id:6510,freq_deg:2664},{english:"difference, margin",hangul:"차",hanja:"差",id:6511,freq_deg:2667},{english:"perfume, incense",hangul:"향",hanja:"香",id:6512,freq_deg:2670},{english:"account",hangul:"계좌",hanja:"計座",id:6513,freq_deg:2672},{english:"the end, final period",hangul:"말기",hanja:"末期",id:6514,freq_deg:2675},{english:"go to ruin",hangul:"망하다",hanja:"亡-",id:6515,freq_deg:2677},{english:"applause",hangul:"박수",hanja:"拍手",id:6516,freq_deg:2679},{english:"a rich person",hangul:"부자",hanja:"富者",id:6517,freq_deg:2680},{english:"the west",hangul:"서쪽",hanja:"西-",id:6518,freq_deg:2682},{english:"to be concluded, formed",hangul:"성립되다",hanja:"成立-",id:6519,freq_deg:2683},{english:"grandson",hangul:"손자",hanja:"孫子",id:6520,freq_deg:2684},{english:"a bridegroom",hangul:"신랑",hanja:"新郞",id:6521,freq_deg:2685},{english:"actual training, practice",hangul:"실습",hanja:"實習",id:6522,freq_deg:2686},{english:"self-control, autonomy",hangul:"자율",hanja:"自律",id:6523,freq_deg:2688},{english:"the ceiling",hangul:"천장",hanja:"天障",id:6524,freq_deg:2692},{english:"a painter, a drawer artist",hangul:"화가",hanja:"畵家",id:6525,freq_deg:2697},{english:"a store, shop",hangul:"매장",hanja:"賣場",id:6526,freq_deg:2708},{english:"a name,title",hangul:"명칭",hanja:"名稱",id:6527,freq_deg:2710},{english:"one's real ability,talent",hangul:"실력",hanja:"實力",id:6528,freq_deg:2715},{english:"the human body",hangul:"인체",hanja:"人體",id:6529,freq_deg:2720},{english:"a disease, sickness",hangul:"질병",hanja:"疾病",id:6530,freq_deg:2726},{english:"physical strength",hangul:"체력",hanja:"體力",id:6531,freq_deg:2728},{english:"to be intimate, familiar, close, friendly",hangul:"친하다",hanja:"親-",id:6532,freq_deg:2729},{english:"each, respectively",hangul:"각기",hanja:"各其",id:6533,freq_deg:2731},{english:"observation, survey",hangul:"관찰",hanja:"觀察",id:6534,freq_deg:2734},{english:"a soldier, a private",hangul:"군사",hanja:"軍士",id:6535,freq_deg:2736},{english:"a ghost",hangul:"귀신",hanja:"鬼神",id:6536,freq_deg:2737},{english:"noble, high; dear; lovable, precious",hangul:"귀하다",hanja:"貴-",id:6537,freq_deg:2738},{english:"answer, reply",hangul:"답하다",hanja:"答-",id:6538,freq_deg:2744},{english:"dinner table",hangul:"밥상",hanja:"-床",id:6539,freq_deg:2750},{english:"an apple",hangul:"사과",hanja:"沙果",id:6540,freq_deg:3333},{english:"an exception",hangul:"예외",hanja:"例外",id:6541,freq_deg:2758},{english:"a glass pane",hangul:"유리",hanja:"琉璃",id:6542,freq_deg:2761},{english:"absolute, unconditional",hangul:"절대적",hanja:"絶對的",id:6543,freq_deg:2762},{english:"the most, the maximum, highest",hangul:"최대한",hanja:"最大限",id:6544,freq_deg:2765},{english:"a husband of a girl's older sister",hangul:"형부",hanja:"兄夫",id:6545,freq_deg:2770},{english:"this year",hangul:"금년",hanja:"今年",id:6546,freq_deg:2775},{english:"equipment, machinery, instrument",hangul:"기기",hanja:"機器",id:6547},{english:"a compass",hangul:"나침반",hanja:"羅針盤",id:6548,freq_deg:2778},{english:"graduate school",hangul:"대학원",hanja:"大學院",id:6549,freq_deg:2780},{english:"arrival",hangul:"도달하다",hanja:"到達-",id:6550,freq_deg:2782},{english:"lawyer",hangul:"변호사",hanja:"辯護士",id:6551,freq_deg:2787},{english:"a statue, a figure",hangul:"상",hanja:"像",id:6552,freq_deg:4274},{english:"imagination, imaginative",hangul:"상상력",hanja:"想像力",id:6553,freq_deg:2789},{english:"female student",hangul:"여학생",hanja:"女學生",id:6554,freq_deg:2790},{english:"to be profitable, favorable",hangul:"유리하다",hanja:"有利-",id:6555,freq_deg:2795},{english:"natural surroundings",hangul:"자연환경",hanja:"自然環境",id:6556,freq_deg:2796},{english:"to be pointed out to",hangul:"지적되다",hanja:"指摘-",id:6557,freq_deg:2798},{english:"a spot, point",hangul:"지점",hanja:"地點",id:6558,freq_deg:4170},{english:"thoroughly",hangul:"철저히",hanja:"徹底-",id:6559,freq_deg:2800},{english:"students' parents",hangul:"학부모",hanja:"學父母",id:6560,freq_deg:2802},{english:"to return to one's home country",hangul:"귀국하다",hanja:"歸國-",id:6561,freq_deg:2807},{english:"freezer",hangul:"냉장고",hanja:"冷藏庫",id:6562,freq_deg:2811},{english:"to be unfortunate",hangul:"불행하다",hanja:"不幸-",id:6563,freq_deg:2816},{english:"to state, declare",hangul:"신고하다",hanja:"申告-",id:6564,freq_deg:2817},{english:"continuity, continuous, in succession",hangul:"연속",hanja:"連續",id:6565,freq_deg:2818},{english:"an insult",hangul:"욕",hanja:"辱",id:6566,freq_deg:2820},{english:"the chief, the head of",hangul:"원장",hanja:"院長",id:6567,freq_deg:2821},{english:"a relic, antiquity, artifact",hangul:"유물",hanja:"遺物",id:6568,freq_deg:2822},{english:"organize; maintain",hangul:"정비",hanja:"整備",id:6569,freq_deg:2825},{english:"last time",hangul:"지난번",hanja:"-番",id:6570,freq_deg:2827},{english:"victim",hangul:"피해자",hanja:"被害者",id:6571,freq_deg:2832},{english:"necessary, indispensable",hangul:"필수적",hanja:"必須的",id:6572,freq_deg:2833},{english:"stationary, school supplies",hangul:"학용품",hanja:"學用品",id:6573,freq_deg:2834},{english:"flower pot",hangul:"화분",hanja:"花盆",id:6574,freq_deg:2835},{english:"brown",hangul:"갈색",hanja:"褐色",id:6575,freq_deg:2837},{english:"a cold",hangul:"감기",hanja:"感氣",id:6576,freq_deg:2838},{english:"south of a river",hangul:"강남",hanja:"江南",id:6577,freq_deg:2839},{english:"repulsion, a backlash",hangul:"반발",hanja:"反撥",id:6578,freq_deg:2842},{english:"side dishes",hangul:"반찬",hanja:"飯饌",id:6579,freq_deg:2843},{english:"to be victimized, treated unfairly",hangul:"억울하다",hanja:"抑鬱-",id:6580,freq_deg:2852},{english:"the day before, the day prior",hangul:"전날",hanja:"前-",id:6581,freq_deg:2859},{english:"whole, generally",hangul:"전반적",hanja:"全般的",id:6582,freq_deg:2860},{english:"healthy, sound, wholesome",hangul:"건전하다",hanja:"健全-",id:6583,freq_deg:2869},{english:"wedding ceremony",hangul:"결혼식",hanja:"結婚式",id:6584,freq_deg:2870},{english:"calculator",hangul:"계산기",hanja:"計算器",id:6585,freq_deg:2871},{english:"plaza, public square",hangul:"광장",hanja:"廣場",id:6586,freq_deg:2872},{english:"dignified",hangul:"당당하다",hanja:"堂堂-",id:6587,freq_deg:2880},{english:"punishment",hangul:"벌",hanja:"罰",id:6588,freq_deg:3969},{english:"negative, contradicting sth else, pessimistic",hangul:"부정적",hanja:"否定的",id:6589,freq_deg:2886},{english:"respectable, considerable, suitable",hangul:"상당",hanja:"相當",id:6590,freq_deg:2889},{english:"the first, the beginning",hangul:"애초",hanja:"-初",id:6591,freq_deg:2894},{english:"count on, depend on, rely on",hangul:"의지하다",hanja:"依支-",id:6592,freq_deg:2902},{english:"absoluteness",hangul:"절대",hanja:"絶對",id:6593,freq_deg:3431},{english:"early phase, early stage",hangul:"초반",hanja:"初盤",id:6594,freq_deg:2911},{english:"to be wide-ranging, broad",hangul:"폭넓다",hanja:"幅-",id:6595,freq_deg:2914},{english:"year of graduation",hangul:"학번",hanja:"學番",id:6596,freq_deg:2916},{english:"academy",hangul:"학원",hanja:"學院",id:6597,freq_deg:2917},{english:"cereals, grains",hangul:"곡식",hanja:"穀食",id:6598,freq_deg:2922},{english:"particular, special",hangul:"별다르다",hanja:"別-",id:6599,freq_deg:2927},{english:"parts, accessories, components",hangul:"부품",hanja:"部品",id:6600,freq_deg:2929},{english:"the western part",hangul:"서부",hanja:"西部",id:6601,freq_deg:2933},{english:"a proverb, saying",hangul:"속담",hanja:"俗談",id:6602,freq_deg:2934},{english:"in the city",hangul:"시중",hanja:"市中",id:6603,freq_deg:2935},{english:"to be similar, to resemble",hangul:"유사하다",hanja:"類似-",id:6604,freq_deg:2939},{english:"volition, will, desire, drive",hangul:"의욕",hanja:"意欲",id:6605,freq_deg:2941},{english:"neighborhood",hangul:"인근",hanja:"隣近",id:6606,freq_deg:2942},{english:"ordinary person, the general public, the public at large",hangul:"일반인",hanja:"一般人",id:6607,freq_deg:2943},{english:"to edit, compose, write up",hangul:"작성하다",hanja:"作成-",id:6608,freq_deg:2944},{english:"major, specialty",hangul:"전공",hanja:"專攻",id:6609,freq_deg:2945},{english:"a fixed time period",hangul:"정기",hanja:"定期",id:6610,freq_deg:2946},{english:"a proposal, an offer",hangul:"제의",hanja:"提議",id:6611,freq_deg:2947},{english:"all day, throughout the whole day",hangul:"종일",hanja:"終日",id:6612,freq_deg:2948},{english:"makeup",hangul:"화장",hanja:"化粧",id:6613,freq_deg:2957},{english:"intense,  strong, severe",hangul:"강렬하다",hanja:"强烈-",id:6614,freq_deg:2960},{english:"traffic accident",hangul:"교통사고",hanja:"交通事故",id:6615,freq_deg:2963},{english:"escape, avoid, get away with",hangul:"면하다",hanja:"免-",id:6616,freq_deg:2966},{english:"evening twilight",hangul:"모색하다",hanja:"摸索-",id:6617,freq_deg:2967},{english:"the four directions",hangul:"사방",hanja:"四方",id:6618,freq_deg:2971},{english:"a performer, an entertainer",hangul:"연예인",hanja:"演藝人",id:6619,freq_deg:2975},{english:"monthly salary",hangul:"월급",hanja:"月給",id:6620,freq_deg:2977},{english:"trend, vogue, to be popular",hangul:"유행",hanja:"流行",id:6621,freq_deg:2978},{english:"to be applied, applicable under",hangul:"해당되다",hanja:"該當-",id:6622,freq_deg:2986},{english:"each one, every one",hangul:"각자",hanja:"各自",id:6623,freq_deg:3137},{english:"daringly, boldly",hangul:"감히",hanja:"敢-",id:6624,freq_deg:2991},{english:"insist on, compel, coerce",hangul:"강요하다",hanja:"强要-",id:6625,freq_deg:2992},{english:"custom, convention",hangul:"관습",hanja:"慣習",id:6626,freq_deg:2994},{english:"name, title",hangul:"명의",hanja:"名義",id:6627,freq_deg:2999},{english:"be close, intimate with",hangul:"밀접하다",hanja:"密接-",id:6628,freq_deg:3002},{english:"request, favor",hangul:"부탁",hanja:"付託",id:6629,freq_deg:3003},{english:"only, not more than",hangul:"불과",hanja:"不過",id:6630,freq_deg:3005},{english:"a box, case",hangul:"상자",hanja:"箱子",id:6631,freq_deg:3007},{english:"be unable to do sth",hangul:"수없이",hanja:"數-",id:6632,freq_deg:3010},{english:"both, two",hangul:"양",hanja:"兩",id:6633,freq_deg:4873},{english:"a bankbook (check register)",hangul:"통장",hanja:"通帳",id:6634,freq_deg:3021},{english:"black person",hangul:"흑인",hanja:"黑人",id:6635,freq_deg:3027},{english:"liver",hangul:"간",hanja:"肝",id:6636,freq_deg:3227},{english:"sports stadium, sports field",hangul:"경기장",hanja:"競技場",id:6637,freq_deg:3031},{english:"the pupil (of the eye)",hangul:"눈동자",hanja:"-瞳子",id:6638,freq_deg:3034},{english:"a vice president",hangul:"부회장",hanja:"副會長",id:6639,freq_deg:3040},{english:"be ripe",hangul:"성실하다",hanja:"誠實-",id:6640,freq_deg:3043},{english:"the truth, a fact",hangul:"실제",hanja:"實際",id:6641,freq_deg:3045},{english:"weird, abnormal",hangul:"이상적",hanja:"理想的",id:6642,freq_deg:3047},{english:"all-in-one, all, everything, the whole",hangul:"일체",hanja:"一切",id:6643,freq_deg:3049},{english:"penetrate into, advance, enter, go",hangul:"진출하다",hanja:"進出-",id:6644,freq_deg:3056},{english:"passage through",hangul:"통과하다",hanja:"通過-",id:6645,freq_deg:3059},{english:"to be transparent, clear",hangul:"투명하다",hanja:"透明-",id:6646,freq_deg:3060},{english:"to get diffused",hangul:"확산되다",hanja:"擴散-",id:6647,freq_deg:3061},{english:"one's personal history",hangul:"경력",hanja:"經歷",id:6648,freq_deg:3062},{english:"a large majority",hangul:"대다수",hanja:"大多數",id:6649,freq_deg:3071},{english:"free",hangul:"무료",hanja:"無料",id:6650,freq_deg:3075},{english:"symbolize",hangul:"상징하다",hanja:"象徵-",id:6651,freq_deg:3078},{english:"a public speech",hangul:"연설",hanja:"演說",id:6652,freq_deg:3085},{english:"anxiety, worry",hangul:"염려",hanja:"念慮",id:6653,freq_deg:3087},{english:"a date, the number of days",hangul:"일자",hanja:"日子",id:6654,freq_deg:3091},{english:"to cure, heal, treat a patient",hangul:"치료하다",hanja:"治療-",id:6655,freq_deg:3095},{english:"a grudge, rancor",hangul:"한",hanja:"恨",id:6656,freq_deg:3097},{english:"a tourist",hangul:"관광객",hanja:"觀光客",id:6657,freq_deg:3101},{english:"good luck",hangul:"다행",hanja:"多幸",id:6658,freq_deg:3104},{english:"unhappiness",hangul:"불행",hanja:"不幸",id:6659,freq_deg:3118},{english:"a scream",hangul:"비명",hanja:"悲鳴",id:6660,freq_deg:3119},{english:"purity,genuineness",hangul:"순수",hanja:"純粹",id:6661,freq_deg:3120},{english:"substantial, essential",hangul:"실질적",hanja:"實質的",id:6662,freq_deg:3122},{english:"naturally",hangul:"자연히",hanja:"自然-",id:6663,freq_deg:3129},{english:"exclusive or private use",hangul:"전용",hanja:"專用",id:6664,freq_deg:3132},{english:"very, extremely",hangul:"지극히",hanja:"至極-",id:6665,freq_deg:3133},{english:"ask, request",hangul:"청하다",hanja:"請-",id:6666,freq_deg:3134},{english:"decision, settlement",hangul:"확정",hanja:"確定",id:6667,freq_deg:3135},{english:"imagination",hangul:"가상",hanja:"假想",id:6668,freq_deg:3136},{english:"each one, every one",hangul:"각자",hanja:"各自",id:6669,freq_deg:3137},{english:"occasionally, at times",hangul:"간혹",hanja:"間或",id:6670,freq_deg:3138},{english:"to open, to throw open",hangul:"개방하다",hanja:"開放-",id:6671,freq_deg:3139},{english:"domestic",hangul:"국산",hanja:"國産",id:6672,freq_deg:3141},{english:"road",hangul:"도",hanja:"道",id:6673,freq_deg:3146},{english:"reflection",hangul:"반성",hanja:"反省",id:6674,freq_deg:3151},{english:"compensation",hangul:"보상",hanja:"補償",id:6675,freq_deg:3153},{english:"common people",hangul:"서민",hanja:"庶民",id:6676,freq_deg:3157},{english:"a seat,sitting place",hangul:"석",hanja:"席",id:6677,freq_deg:3803},{english:"select,choose",hangul:"선정하다",hanja:"選定-",id:6678,freq_deg:3159},{english:"a small number, a few",hangul:"소수",hanja:"少數",id:6679,freq_deg:3161},{english:"one's husband's mother",hangul:"시어머니",hanja:"媤-",id:6680,freq_deg:3164},{english:"one's husband's home/family",hangul:"시집",hanja:"媤-",id:6681,freq_deg:3609},{english:"for a year",hangul:"연간",hanja:"年間",id:6682,freq_deg:3166},{english:"movie festival",hangul:"영화제",hanja:"映畵祭",id:6683,freq_deg:3167},{english:"to predict, forecast",hangul:"예측하다",hanja:"豫測-",id:6684,freq_deg:3168},{english:"suitability, fitness",hangul:"적합하다",hanja:"適合-",id:6685,freq_deg:3174},{english:"telephone number",hangul:"전화번호",hanja:"電話番號",id:6686,freq_deg:3175},{english:"to provide, pay, allow, provision",hangul:"지급하다",hanja:"支給-",id:6687,freq_deg:3179},{english:"dryness, aridity",hangul:"건조",hanja:"乾燥",id:6688,freq_deg:3182},{english:"argue, discuss, debate",hangul:"논하다",hanja:"論-",id:6689,freq_deg:3190},{english:"immorality",hangul:"도덕",hanja:"道德",id:6690,freq_deg:3192},{english:"one thousand",hangul:"만",hanja:"萬",id:6691,freq_deg:4985},{english:"office ",hangul:"사무소",hanja:"事務所",id:6692,freq_deg:3198},{english:"a cousin",hangul:"사촌",hanja:"四寸",id:6693,freq_deg:3199},{english:"a prize",hangul:"상",hanja:"賞",id:6694,freq_deg:4274},{english:"remains, relics, ruins",hangul:"유적",hanja:"遺跡",id:6695,freq_deg:3208},{english:"one's lifetime",hangul:"일생",hanja:"一生",id:6696,freq_deg:3209},{english:"the information age",hangul:"정보화",hanja:"情報化",id:6697,freq_deg:3212},{english:"sometimes, occasionally",hangul:"종종",hanja:"種種",id:6698,freq_deg:3213},{english:"a purse, wallet",hangul:"지갑",hanja:"紙匣",id:6699,freq_deg:3214},{english:"creation, origination",hangul:"창작",hanja:"創作",id:6700,freq_deg:3216},{english:"taste, liking, preference",hangul:"취향",hanja:"趣向",id:6701,freq_deg:3218},{english:"a class (school)",hangul:"학급",hanja:"學級",id:6702,freq_deg:3223},{english:"efficiency",hangul:"효율적",hanja:"效率的",id:6703,freq_deg:3225},{english:"amount of money",hangul:"금액",hanja:"金額",id:6704,freq_deg:3233},{english:"fortunately",hangul:"다행히",hanja:"多幸-",id:6705,freq_deg:3234},{english:"holiday",hangul:"명절",hanja:"名節",id:6706,freq_deg:3239},{english:"flying, aviation",hangul:"비행",hanja:"飛行",id:6707,freq_deg:4591},{english:"to be of no concern",hangul:"상관없다",hanja:"相關-",id:6708,freq_deg:3245},{english:"to exist, to come into being",hangul:"성립하다",hanja:"成立-",id:6709,freq_deg:3246},{english:"life span",hangul:"수명",hanja:"壽命",id:6710,freq_deg:3247},{english:"to be amazing, marvelous, wonderful",hangul:"신기하다",hanja:"神奇-",id:6711,freq_deg:3984},{english:"food and drink",hangul:"음식물",hanja:"飮食物",id:6712,freq_deg:3252},{english:"self-confidence",hangul:"자신감",hanja:"自信感",id:6713,freq_deg:3253},{english:"a criminal",hangul:"죄인",hanja:"罪人",id:6714,freq_deg:3254},{english:"stuff that needs to be prepared",hangul:"준비물",hanja:"準備物",id:6715,freq_deg:3256},{english:"entrance/exit",hangul:"출입",hanja:"出入",id:6716,freq_deg:3258},{english:"a pleasant sensation, a good feeling",hangul:"쾌감",hanja:"快感",id:6717,freq_deg:3259},{english:"why necessarily? why of all things?",hangul:"하필",hanja:"何必",id:6718,freq_deg:3262},{english:"practical use",hangul:"활용",hanja:"活用",id:6719,freq_deg:3263},{english:"gray",hangul:"회색",hanja:"灰色",id:6720,freq_deg:3264},{english:"fortune, a large sum of money",hangul:"거액",hanja:"巨額",id:6721,freq_deg:3265},{english:"high school",hangul:"고교",hanja:"高校",id:6722,freq_deg:3266},{english:"lesson, moral",hangul:"교훈",hanja:"敎訓",id:6723,freq_deg:3270},{english:"singing room",hangul:"노래방",hanja:"-房",id:6724,freq_deg:3273},{english:"a piece, fragment",hangul:"단편",hanja:"短篇",id:6725,freq_deg:3274},{english:"clear, precise",hangul:"명확하다",hanja:"明確-",id:6726,freq_deg:3278},{english:"seniority, advance",hangul:"선진",hanja:"先進",id:6727,freq_deg:3284},{english:"start anew",hangul:"신규",hanja:"新規",id:6728,freq_deg:3288},{english:"actually, in fact",hangul:"실은",hanja:"實-",id:6729,freq_deg:3290},{english:"conscience",hangul:"양심",hanja:"良心",id:6730,freq_deg:3293},{english:"chairman of the board",hangul:"이사장",hanja:"理事長",id:6731,freq_deg:3294},{english:"interest",hangul:"이자",hanja:"利子",id:6732,freq_deg:3295},{english:"be detailed",hangul:"자세하다",hanja:"仔細-",id:6733,freq_deg:3297},{english:"symptoms",hangul:"증세",hanja:"症勢",id:6734,freq_deg:3303},{english:"promotion",hangul:"진급",hanja:"進級",id:6735,freq_deg:3305},{english:"a port, a harbor",hangul:"항구",hanja:"港口",id:6736,freq_deg:3309},{english:"helicopter",hangul:"헬기",hanja:"-機",id:6737,freq_deg:3311},{english:"narrowly, barely",hangul:"간신히",hanja:"艱辛-",id:6738,freq_deg:3312},{english:"the air force",hangul:"공군",hanja:"空軍",id:6739,freq_deg:3319},{english:"technician",hangul:"기술자",hanja:"技術者",id:6740,freq_deg:3320},{english:"year of birth",hangul:"년생",hanja:"年生",id:6741},{english:"large city",hangul:"대도시",hanja:"大都市",id:6742,freq_deg:3324},{english:"subdivision of a county",hangul:"면",hanja:"面",id:6743,freq_deg:4044},{english:"a hat",hangul:"모자",hanja:"帽子",id:6744,freq_deg:3328},{english:"help, assistance, aid",hangul:"보조",hanja:"補助",id:6745,freq_deg:3329},{english:"to be disadvantageous, unfavorable",hangul:"불리하다",hanja:"不利-",id:6746,freq_deg:3330},{english:"inconvenience",hangul:"불편",hanja:"不便",id:6747,freq_deg:3331},{english:"an apology",hangul:"사과",hanja:"謝過",id:6748,freq_deg:3333},{english:"sleep, slumber",hangul:"수면",hanja:"睡眠",id:6749,freq_deg:3337},{english:"thousands",hangul:"수천",hanja:"數千",id:6750,freq_deg:3338},{english:"a contest, match",hangul:"승부",hanja:"勝負",id:6751,freq_deg:3340},{english:"a new student",hangul:"신입생",hanja:"新入生",id:6752,freq_deg:3343},{english:"some, a little",hangul:"여간 ",hanja:"如干",id:6753},{english:"a railroad station, depot",hangul:"역",hanja:"驛",id:6754,freq_deg:3347},{english:"to contact, get in touch with",hangul:"연락하다",hanja:"連絡-",id:6755,freq_deg:3348},{english:"influence, power to influence",hangul:"영향력",hanja:"影響力",id:6756,freq_deg:3349},{english:"courtesy, politeness",hangul:"예의",hanja:"禮儀",id:6757,freq_deg:3350},{english:"within, less than",hangul:"이내",hanja:"以內",id:6758,freq_deg:3351},{english:"to greet, say hello",hangul:"인사하다",hanja:"人事-",id:6759,freq_deg:3354},{english:"to pay",hangul:"지불하다",hanja:"支拂-",id:6760,freq_deg:3358},{english:"police precinct station",hangul:"파출소",hanja:"派出所",id:6761,freq_deg:3359},{english:"board",hangul:"판",hanja:"板",id:6762,freq_deg:3360},{english:"Chinese writing, Chinese classics",hangul:"한문",hanja:"漢文",id:6763,freq_deg:3361},{english:"finals (in a tournament)",hangul:"결승",hanja:"決勝",id:6764,freq_deg:3363},{english:"public, common",hangul:"공공",hanja:"公共",id:6765,freq_deg:3364},{english:"culture, education",hangul:"교양",hanja:"敎養",id:6766,freq_deg:3365},{english:"conquest, subjugation",hangul:"극복",hanja:"克服",id:6767,freq_deg:3368},{english:"mostly, for the most part",hangul:"대개",hanja:"大槪",id:6768,freq_deg:3373},{english:"beard",hangul:"수염",hanja:"鬚髥",id:6769,freq_deg:3376},{english:"to collect",hangul:"수집하다",hanja:"蒐集-",id:6770,freq_deg:3377},{english:"a passport",hangul:"여권",hanja:"旅券",id:6771,freq_deg:3382},{english:"outward appearance",hangul:"외모",hanja:"外貌",id:6772,freq_deg:3385},{english:"artificial, man-made",hangul:"인공",hanja:"人工",id:6773,freq_deg:3386},{english:"the eldest son",hangul:"장남",hanja:"長男",id:6774,freq_deg:3388},{english:"national",hangul:"전국적",hanja:"全國的",id:6775,freq_deg:3390},{english:"the whole, all, general",hangul:"전반",hanja:"全般",id:6776,freq_deg:3391},{english:"ship, boat, vessel (counter)",hangul:"척",hanja:"隻",id:6777,freq_deg:3826},{english:"grape wine",hangul:"포도주",hanja:"葡萄酒",id:6778,freq_deg:3395},{english:"science, learning, scolarship",hangul:"학술",hanja:"學術",id:6779,freq_deg:3396},{english:"shout, yell, scream",hangul:"고함",hanja:"高喊",id:6780,freq_deg:3403},{english:"to attack",hangul:"공격하다",hanja:"攻擊-",id:6781,freq_deg:3404},{english:"to be recorded or written down",hangul:"기록되다",hanja:"記錄-",id:6782,freq_deg:3406},{english:"answer",hangul:"답",hanja:"答",id:6783,freq_deg:3410},{english:"speech, dialogue",hangul:"대사",hanja:"臺詞",id:6784,freq_deg:4120},{english:"a fine",hangul:"벌금",hanja:"罰金",id:6785,freq_deg:3415},{english:"luck,happiness",hangul:"복",hanja:"福",id:6786,freq_deg:3416},{english:"department, one's post, duty",hangul:"부서",hanja:"部署",id:6787,freq_deg:3418},{english:"castle, fortress",hangul:"성",hanja:"城",id:6788,freq_deg:4276},{english:"small size",hangul:"소형",hanja:"小型",id:6789,freq_deg:3420},{english:"rookie, newbie",hangul:"신인",hanja:"新人",id:6790,freq_deg:3421},{english:"passion",hangul:"열정",hanja:"熱情",id:6791,freq_deg:3426},{english:"absoluteness",hangul:"절대",hanja:"絶對",id:6792,freq_deg:3431},{english:"body weight",hangul:"체중",hanja:"體重",id:6793,freq_deg:3436},{english:"Korean Thanksgiving",hangul:"추석",hanja:"秋夕",id:6794,freq_deg:3437},{english:"packing, wrapping",hangul:"포장",hanja:"包裝",id:6795,freq_deg:3440},{english:"resolve, alleviate, release",hangul:"해소",hanja:"解消",id:6796,freq_deg:3441},{english:"door, entrance",hangul:"현관",hanja:"玄關",id:6797,freq_deg:3442},{english:"contemporary/modern man",hangul:"현대인",hanja:"現代人",id:6798,freq_deg:3443},{english:"a favor, benefit",hangul:"혜택",hanja:"惠澤",id:6799,freq_deg:3444},{english:"green",hangul:"녹색",hanja:"綠色",id:6800,freq_deg:3452},{english:"generate electricity",hangul:"발전",hanja:"發電",id:6801,freq_deg:3455},{english:"a number",hangul:"번호",hanja:"番號",id:6802,freq_deg:3457},{english:"person in question",hangul:"본인",hanja:"本人",id:6803,freq_deg:3459},{english:"a shop, store",hangul:"상점",hanja:"商店",id:6804,freq_deg:3460},{english:"hundreds",hangul:"수백",hanja:"數百",id:6805,freq_deg:3461},{english:"boss, president",hangul:"실장",hanja:"室長",id:6806,freq_deg:3462},{english:"duplication, double",hangul:"이중",hanja:"二重",id:6807,freq_deg:3469},{english:"the front gate, main entrance",hangul:"정문",hanja:"正門",id:6808,freq_deg:3476},{english:"hallucination, illusion, mistake a for b",hangul:"착각",hanja:"錯覺",id:6809,freq_deg:3477},{english:"window",hangul:"창",hanja:"窓",id:6810,freq_deg:3478},{english:"a woman's maiden home and family",hangul:"친정",hanja:"親庭",id:6811,freq_deg:3479},{english:"to do, act, behave",hangul:"행하다",hanja:"行-",id:6812,freq_deg:3484},{english:"an individual, each",hangul:"개별",hanja:"個別",id:6813,freq_deg:3487},{english:"official, formal; formula (mathematics)",hangul:"공식적",hanja:"公式的",id:6814,freq_deg:3488},{english:"Christianity",hangul:"기독교",hanja:"基督敎",id:6815,freq_deg:3490},{english:"a weakness, flaw, shortcoming, drawback",hangul:"단점",hanja:"短點",id:6816,freq_deg:3495},{english:"list, inventory",hangul:"목록",hanja:"目錄",id:6817,freq_deg:3497},{english:"introspection, self-examination",hangul:"반성하다",hanja:"反省-",id:6818,freq_deg:3499},{english:"nickname, alias",hangul:"별명",hanja:"別名",id:6819,freq_deg:3500},{english:"to possess, hold, own",hangul:"소유하다",hanja:"所有-",id:6820,freq_deg:3503},{english:"cancer",hangul:"암",hanja:"癌",id:6821,freq_deg:3508},{english:"clamor, uproar; scolding, telling off",hangul:"야단",hanja:"惹端",id:6822,freq_deg:3509},{english:"connection, linking",hangul:"연결",hanja:"連結",id:6823,freq_deg:3512},{english:"relation, connection, concerned with",hangul:"연관",hanja:"聯關",id:6824,freq_deg:3513},{english:"to pardon, to forgive, absolve",hangul:"용서하다",hanja:"容恕-",id:6825,freq_deg:3514},{english:"the army",hangul:"육군",hanja:"陸軍",id:6826,freq_deg:3516},{english:"restaurant",hangul:"음식점",hanja:"飮食店",id:6827,freq_deg:3517},{english:"to consult, confer with, discuss",hangul:"의논하다",hanja:"議論-",id:6828,freq_deg:3518},{english:"portions/servings (counter)",hangul:"인분",hanja:"人分",id:6829,freq_deg:3519},{english:"to be chief, principal, leading",hangul:"주요하다",hanja:"主要-",id:6830,freq_deg:3520},{english:"rice porridge",hangul:"죽",hanja:"粥",id:6831,freq_deg:4950},{english:"a snack, pastries, candy, cookie",hangul:"과자",hanja:"菓子",id:6832,freq_deg:3532},{english:"college, university",hangul:"대학교",hanja:"大學校",id:6833,freq_deg:3542},{english:"door",hangul:"방문",hanja:"房門",id:6834,freq_deg:3549},{english:"get sick",hangul:"병들다",hanja:"病-",id:6835,freq_deg:3550},{english:"relativity",hangul:"상대성",hanja:"相對性",id:6836,freq_deg:3553},{english:"survey, questionnaire",hangul:"설문",hanja:"設問",id:6837,freq_deg:3554},{english:"novelist",hangul:"소설가",hanja:"小說家",id:6838,freq_deg:3555},{english:"peacefully",hangul:"안녕히",hanja:"安寧-",id:6839,freq_deg:3557},{english:"to pay attention to, bear in mind, be heedful of",hangul:"유의하다",hanja:"留意-",id:6840,freq_deg:3561},{english:"Confucianism",hangul:"유학",hanja:"儒學",id:6841,freq_deg:3562},{english:"to be understood",hangul:"이해되다",hanja:"理解-",id:6842,freq_deg:3563},{english:"reduction, lowering",hangul:"인하",hanja:"引下",id:6843,freq_deg:3564},{english:"compile, draw up, prepare, fill in/out",hangul:"작성",hanja:"作成",id:6844,freq_deg:3565},{english:"an exhibition, show, display",hangul:"전시회",hanja:"展示會",id:6845,freq_deg:3568},{english:"to call",hangul:"전화하다",hanja:"電話-",id:6846,freq_deg:3569},{english:"political science",hangul:"정치학",hanja:"政治學",id:6847,freq_deg:3571},{english:"systematic, organizational",hangul:"체계적",hanja:"體系的",id:6848,freq_deg:3575},{english:"go to work",hangul:"출근",hanja:"出勤",id:6849,freq_deg:3576},{english:"to vomit",hangul:"토하다",hanja:"吐-",id:6850,freq_deg:3580},{english:"words, lyrics",hangul:"가사",hanja:"歌詞",id:6851,freq_deg:3583},{english:"member, subscriber, policyholder",hangul:"가입자",hanja:"加入者",id:6852,freq_deg:3584},{english:"consequentially, resultingly",hangul:"결과적",hanja:"結果的",id:6853,freq_deg:3587},{english:"narcotics, drugs",hangul:"마약",hanja:"痲藥",id:6854,freq_deg:3596},{english:"wealth, riches",hangul:"부",hanja:"富",id:6855,freq_deg:4343},{english:"passive, half-hearted",hangul:"소극적",hanja:"消極的",id:6856,freq_deg:3603},{english:"use, good",hangul:"소용",hanja:"所用",id:6857,freq_deg:3604},{english:"towel, washcloth",hangul:"수건",hanja:"手巾",id:6858,freq_deg:3606},{english:"a brief instant, a moment",hangul:"순식간",hanja:"瞬息間",id:6859,freq_deg:3607},{english:"make an attempt, give sth a try",hangul:"시도",hanja:"試圖",id:6860,freq_deg:3608},{english:"a collection of poems",hangul:"시집",hanja:"詩集",id:6861,freq_deg:3609},{english:"weakness, a weak point, a vulnerable point",hangul:"약점",hanja:"弱點",id:6862,freq_deg:3611},{english:"suit",hangul:"양복",hanja:"洋服",id:6863,freq_deg:3612},{english:"a woman, a girl",hangul:"여",hanja:"女",id:6864,freq_deg:3615},{english:"age, years of age",hangul:"연령",hanja:"年齡",id:6865,freq_deg:3616},{english:"curriculum vitae, a resume",hangul:"이력서",hanja:"履歷書",id:6866,freq_deg:3620},{english:"anniversary",hangul:"주년",hanja:"周年",id:6867,freq_deg:3624},{english:"important, grave",hangul:"중대하다",hanja:"重大-",id:6868,freq_deg:3626},{english:"hub, capital, central (of)",hangul:"중심지",hanja:"中心地",id:6869,freq_deg:3627},{english:"concentrated",hangul:"집중적",hanja:"集中的",id:6870,freq_deg:3628},{english:"an invitation",hangul:"초청",hanja:"招請",id:6871,freq_deg:3630},{english:"publishing house, publisher, a publishing company",hangul:"출판사",hanja:"出版社",id:6872,freq_deg:3631},{english:"manners, customs, morals",hangul:"풍속",hanja:"風俗",id:6873,freq_deg:3635},{english:"more, still more",hangul:"한층",hanja:"-層",id:6874,freq_deg:3638},{english:"interfere, meddle, butt in on, intrude",hangul:"간섭",hanja:"干涉",id:6875,freq_deg:3641},{english:"thirst",hangul:"갈증",hanja:"渴症",id:6876,freq_deg:3642},{english:"origin",hangul:"기원",hanja:"起源",id:6877,freq_deg:3646},{english:"a war, revolt, panic, fuss",hangul:"난리",hanja:"亂離",id:6878,freq_deg:3648},{english:"brother and sister",hangul:"남매",hanja:"男妹",id:6879,freq_deg:3649},{english:"care about, be bothered by",hangul:"상관",hanja:"相關",id:6880,freq_deg:3657},{english:"to be explained",hangul:"설명되다",hanja:"說明-",id:6881,freq_deg:3658},{english:"a generation,age,epoch",hangul:"세",hanja:"世",id:6882,freq_deg:3660},{english:"appetizers for alcohol",hangul:"안주",hanja:"按酒",id:6883,freq_deg:3663},{english:"heat, hot air; excitement, fever",hangul:"열기",hanja:"熱氣",id:6884,freq_deg:3665},{english:"to console, cheer sb up",hangul:"위로하다",hanja:"慰勞-",id:6885,freq_deg:3667},{english:"metro, subway",hangul:"전철",hanja:"電鐵",id:6886,freq_deg:3672},{english:"call, telephone conversation",hangul:"통화",hanja:"通話",id:6887,freq_deg:3777},{english:"be peculiar, special, unique, eccentric",hangul:"특이하다",hanja:"特異-",id:6888,freq_deg:3678},{english:"inevitable, necessity, necessary",hangul:"필연적",hanja:"必然的",id:6889,freq_deg:3679},{english:"fake, forgery, imitation, counterfeit",hangul:"가짜",hanja:"假-",id:6890,freq_deg:3682},{english:"intensity, strength",hangul:"강도",hanja:"强度",id:6891,freq_deg:3839},{english:"fast, quickly, in a hurry",hangul:"급히",hanja:"急-",id:6892,freq_deg:3685},{english:"persuade, convince",hangul:"설득하다",hanja:"說得-",id:6893,freq_deg:3695},{english:"bread",hangul:"식빵",hanja:"食-",id:6894,freq_deg:3698},{english:"the driver",hangul:"운전자",hanja:"運轉者",id:6895,freq_deg:3702},{english:"glass window",hangul:"유리창",hanja:"琉璃窓",id:6896,freq_deg:3703},{english:"collectively, as a group",hangul:"집단적",hanja:"集團的",id:6897,freq_deg:3707},{english:"difference",hangul:"차이점",hanja:"差異點",id:6898,freq_deg:3708},{english:"a bachelor, a single man",hangul:"총각",hanja:"總角",id:6899,freq_deg:3711},{english:"typhoon",hangul:"태풍",hanja:"颱風",id:6900,freq_deg:3713},{english:"strongly, firmly, resolutely",hangul:"강력히",hanja:"强力-",id:6901,freq_deg:3719},{english:"the teaching profession",hangul:"교직",hanja:"敎職",id:6902,freq_deg:3725},{english:"to be precious",hangul:"귀중하다",hanja:"貴重-",id:6903,freq_deg:3727},{english:"technician",hangul:"기사",hanja:"技士",id:6904,freq_deg:3730},{english:"a hostel; residence hall",hangul:"기숙사",hanja:"寄宿舍",id:6905,freq_deg:3731},{english:"independence",hangul:"단독",hanja:"單獨",id:6906,freq_deg:3736},{english:"a walk, stroll",hangul:"산책",hanja:"散策",id:6907,freq_deg:3747},{english:"animation, life",hangul:"생기",hanja:"生氣",id:6908,freq_deg:3748},{english:"books, publications",hangul:"서적",hanja:"書籍",id:6909,freq_deg:3749},{english:"test-taker, examinee",hangul:"수험생",hanja:"受驗生",id:6910,freq_deg:3751},{english:"the new generation",hangul:"신세대",hanja:"新世代",id:6911,freq_deg:3753},{english:"researcher",hangul:"연구원",hanja:"硏究員",id:6912,freq_deg:3759},{english:"date, have a relationship with",hangul:"연애",hanja:"戀愛",id:6913,freq_deg:3760},{english:"long weekend, holiday",hangul:"연휴",hanja:"連休",id:6914,freq_deg:3761},{english:"Monday",hangul:"월요일",hanja:"月曜日",id:6915,freq_deg:3764},{english:"unexpectedly, surprisingly",hangul:"의외로",hanja:"意外-",id:6916,freq_deg:3766},{english:"a maternal aunt",hangul:"이모",hanja:"姨母",id:6917,freq_deg:3767},{english:"steel",hangul:"철",hanja:"鐵",id:6918,freq_deg:5357},{english:"seek employment, get a job",hangul:"취직",hanja:"就職",id:6919,freq_deg:3775},{english:"an assembly hall",hangul:"회관",hanja:"會館",id:6920,freq_deg:3780},{english:"auditorium",hangul:"공연장",hanja:"公演場",id:6921,freq_deg:3782},{english:"of late or  recently",hangul:"근래",hanja:"近來",id:6922,freq_deg:3784},{english:"to be kind, affectionate, warm-hearted",hangul:"다정하다",hanja:"多情-",id:6923,freq_deg:3791},{english:"to work hard, overdo; impractical",hangul:"무리하다",hanja:"無理-",id:6924,freq_deg:3796},{english:"upper class",hangul:"상류",hanja:"上流",id:6925,freq_deg:3802},{english:"to be clear, distinct",hangul:"선명하다",hanja:"鮮明-",id:6926,freq_deg:3804},{english:"to prefer",hangul:"선호하다",hanja:"選好-",id:6927,freq_deg:3805},{english:"successfully",hangul:"성공적",hanja:"成功的",id:6928,freq_deg:3806},{english:"small scale",hangul:"소규모",hanja:"小規模",id:6929,freq_deg:3807},{english:"frequently, often",hangul:"수시로",hanja:"隨時-",id:6930,freq_deg:3808},{english:"visual field",hangul:"시야",hanja:"視野",id:6931,freq_deg:3809},{english:"famous, well-known, renowned",hangul:"유명",hanja:"有名",id:6932,freq_deg:3816},{english:"type, category, class",hangul:"유형",hanja:"類型",id:6933,freq_deg:3817},{english:"daily, usual",hangul:"일상적",hanja:"日常的",id:6934,freq_deg:3819},{english:"to major in sth",hangul:"전공하다",hanja:"專攻-",id:6935,freq_deg:3821},{english:"sequence, order, front and rear",hangul:"전후",hanja:"前後",id:6936,freq_deg:3822},{english:"normal, usual",hangul:"정상적",hanja:"正常的",id:6937,freq_deg:3824},{english:"qualitative",hangul:"질적",hanja:"質的",id:6938,freq_deg:3825},{english:"season",hangul:"철",hanja:"계절",id:6939,freq_deg:5357},{english:"shocking",hangul:"충격적",hanja:"衝擊的",id:6940,freq_deg:3829},{english:"tooth",hangul:"치아",hanja:"齒牙",id:6941,freq_deg:3830},{english:"explanation, commentary",hangul:"해설",hanja:"解說",id:6942,freq_deg:3833},{english:"black and white; right and wrong",hangul:"흑백",hanja:"黑白",id:6943,freq_deg:3835},{english:"sacrifice",hangul:"희생",hanja:"犧牲",id:6944,freq_deg:3836},{english:"robber, burglar",hangul:"강도",hanja:"强盜",id:6945,freq_deg:3839},{english:"expense, cost, charge",hangul:"경비",hanja:"經費",id:6946,freq_deg:3840},{english:"economic power",hangul:"경제력",hanja:"經濟力",id:6947,freq_deg:3841},{english:"prohibit, ban, forbid",hangul:"금하다",hanja:"禁-",id:6948,freq_deg:3842},{english:"to farm",hangul:"농사짓다",hanja:"農事-",id:6949,freq_deg:3847},{english:"person in charge",hangul:"담당자",hanja:"擔當者",id:6950,freq_deg:3849},{english:"an answer, response, reply",hangul:"답변",hanja:"答辯",id:6951,freq_deg:3850},{english:"be ready for, provision, preparation",hangul:"대비",hanja:"對備",id:6952,freq_deg:3851},{english:"why on earth?, what the hell?",hangul:"대체",hanja:"大體",id:6953,freq_deg:3852},{english:"downtown, city center",hangul:"도심",hanja:"都心",id:6954,freq_deg:3854},{english:"unmarried",hangul:"미혼",hanja:"未婚",id:6955,freq_deg:3864},{english:"broadcasting company",hangul:"방송사",hanja:"放送社",id:6956,freq_deg:3866},{english:"a written resignation",hangul:"사표",hanja:"辭表",id:6957,freq_deg:3868},{english:"a live broadcast",hangul:"생방송",hanja:"生放送",id:6958,freq_deg:3870},{english:"carelessly, roughly, indifferently, negligently",hangul:"소홀히",hanja:"疏忽-",id:6959,freq_deg:3872},{english:"twins",hangul:"쌍둥이",hanja:"雙-",id:6960,freq_deg:3874},{english:"below zero",hangul:"영하",hanja:"零下",id:6961,freq_deg:3877},{english:"foreign language",hangul:"외국어",hanja:"外國語",id:6962,freq_deg:3880},{english:"to be in fashion, to be popular, to catch on, to break out",hangul:"유행하다",hanja:"流行-",id:6963,freq_deg:3882},{english:"midnight",hangul:"자정",hanja:"子正",id:6964,freq_deg:3886},{english:"middle school student",hangul:"중학생",hanja:"中學生",id:6965,freq_deg:3888},{english:"selection, picking out of news articles (by a reporter)",hangul:"취재",hanja:"取材",id:6966,freq_deg:3893},{english:"debate, panel discussion, forum",hangul:"토론회",hanja:"討論會",id:6967,freq_deg:3895},{english:"have a drink",hangul:"한잔",hanja:"-盞",id:6968,freq_deg:3896},{english:"a pocket",hangul:"호주머니",hanja:"胡-",id:6969,freq_deg:3897},{english:"a county or district",hangul:"군",hanja:"郡",id:6970,freq_deg:3902},{english:"a calendar",hangul:"달력",hanja:"-曆",id:6971,freq_deg:3905},{english:"ceramics, porcelain, earthenware",hangul:"도자기",hanja:"陶瓷器",id:6972,freq_deg:3909},{english:"change, alteration",hangul:"변경",hanja:"變更",id:6973,freq_deg:3911},{english:"an uncle",hangul:"삼촌",hanja:"三寸",id:6974,freq_deg:3914},{english:"plenty, a lot of, a considerable number",hangul:"상당수",hanja:"相當數",id:6975,freq_deg:3915},{english:"picnic",hangul:"소풍",hanja:"逍風",id:6976,freq_deg:3916},{english:"newspaper",hangul:"신문지",hanja:"新聞紙",id:6977,freq_deg:3922},{english:"to yield, make a concession",hangul:"양보하다",hanja:"讓步-",id:6978,freq_deg:3924},{english:"a dragon",hangul:"용",hanja:"龍",id:6979,freq_deg:3926},{english:"human nature",hangul:"인간성",hanja:"人間性",id:6980,freq_deg:3929},{english:"memorable, impressive",hangul:"인상적",hanja:"印象的",id:6981,freq_deg:3930},{english:"residing in Korea",hangul:"주한",hanja:"駐韓",id:6982,freq_deg:3935},{english:"middle age",hangul:"중년",hanja:"中年",id:6983,freq_deg:3936},{english:"formality",hangul:"형식적",hanja:"形式的",id:6984,freq_deg:3944},{english:"expressway, freeway",hangul:"고속도로",hanja:"高速道路",id:6985,freq_deg:3950},{english:"notebook",hangul:"공책",hanja:"空冊",id:6986,freq_deg:3951},{english:"contribution",hangul:"기여",hanja:"寄與",id:6987,freq_deg:3954},{english:"taste, preference, liking",hangul:"기호",hanja:"記號",id:6988,freq_deg:3955},{english:"the interior and exterior ",hangul:"내외",hanja:"內外",id:6989,freq_deg:3958},{english:"to supplement and make complete, to complement sth",hangul:"보완하다",hanja:"補完-",id:6990,freq_deg:3972},{english:"all-time, in history",hangul:"사상",hanja:"史上",id:6991,freq_deg:3976},{english:"adolescence, puberty",hangul:"사춘기",hanja:"思春期",id:6992,freq_deg:3977},{english:"the first,upper half",hangul:"상반기",hanja:"上半期",id:6993,freq_deg:3978},{english:"a bookstore",hangul:"서점",hanja:"書店",id:6994,freq_deg:3979},{english:"collection",hangul:"수집",hanja:"蒐集",id:6995,freq_deg:3982},{english:"to be amazing, wonderful; to be novel",hangul:"신기하다",hanja:"新奇-",id:6996,freq_deg:3984},{english:"startup, found, establish",hangul:"신설",hanja:"新設",id:6997,freq_deg:3986},{english:"actual feeling",hangul:"실감",hanja:"實感",id:6998,freq_deg:3987},{english:"a sock",hangul:"양말",hanja:"洋襪",id:6999,freq_deg:3992},{english:"go out",hangul:"외출",hanja:"外出",id:7000,freq_deg:3995},{english:"for personal/family use",hangul:"자가용",hanja:"自家用",id:7001,freq_deg:4000},{english:"inspection, examination",hangul:"점검",hanja:"點檢",id:7002,freq_deg:4002},{english:"an early stage, period",hangul:"조기",hanja:"早期",id:7003,freq_deg:4004},{english:"a bell",hangul:"종",hanja:"鐘",id:7004,freq_deg:4006},{english:"the sound of a bell",hangul:"종소리",hanja:"鐘-",id:7005,freq_deg:4007},{english:"the second 10 days in a month",hangul:"중순",hanja:"中旬",id:7006,freq_deg:4008},{english:"a straight line",hangul:"직선",hanja:"直線",id:7007,freq_deg:4010},{english:"to experience, to undergo",hangul:"체험하다",hanja:"體驗-",id:7008,freq_deg:4013},{english:"to invite",hangul:"초대하다",hanja:"招待-",id:7009,freq_deg:4014},{english:"a gun",hangul:"총",hanja:"銃",id:7010,freq_deg:4015},{english:"to praise, compliment, comment",hangul:"칭찬하다",hanja:"稱讚-",id:7011,freq_deg:4016},{english:"doubt, skepticism",hangul:"회의",hanja:"懷疑",id:7012,freq_deg:4024},{english:"a street light",hangul:"가로등",hanja:"街路燈",id:7013,freq_deg:4025},{english:"feelings",hangul:"감",hanja:"感",id:7014,freq_deg:4971},{english:"individual, each person",hangul:"개개인",hanja:"個個人",id:7015,freq_deg:4027},{english:"gold",hangul:"금",hanja:"金",id:7016,freq_deg:5303},{english:"rapidly, suddenly",hangul:"급격히",hanja:"急激-",id:7017,freq_deg:4031},{english:"ability, capacity, skill",hangul:"기능",hanja:"技能",id:7018,freq_deg:4032},{english:"breathtaking, perfect, wonderful, amazing, super, fantastic",hangul:"기막히다",hanja:"氣-",id:7019,freq_deg:4033},{english:"logical, reasonable",hangul:"논리적",hanja:"論理的",id:7020,freq_deg:4037},{english:"standing by, waiting in the wings, prepared",hangul:"대기하다",hanja:"待機-",id:7021,freq_deg:4039},{english:"treatment",hangul:"대접",hanja:"待接",id:7022,freq_deg:4040},{english:"opposite side, the other side",hangul:"맞은편",hanja:"-便",id:7023,freq_deg:4042},{english:"cotton",hangul:"면",hanja:"綿",id:7024,freq_deg:4044},{english:"number of nights (counter)",hangul:"박",hanja:"泊",id:7025,freq_deg:4045},{english:"wrapping cloth",hangul:"보자기",hanja:"褓-",id:7026,freq_deg:4048},{english:"regardless of, no matter that",hangul:"상관없이",hanja:"相關-",id:7027,freq_deg:4053},{english:"diarrhea",hangul:"설사",hanja:"設使",id:7028,freq_deg:4056},{english:"intensify, grew worse",hangul:"심해지다",hanja:"甚-",id:7029,freq_deg:4058},{english:"to become weak, weaken",hangul:"약해지다",hanja:"弱-",id:7030,freq_deg:4062},{english:"a hotel, an inn",hangul:"여관",hanja:"旅館",id:7031,freq_deg:4065},{english:"to practice, exercise",hangul:"연습하다",hanja:"練習-",id:7032,freq_deg:4067},{english:"produce, direct (a play or musical)",hangul:"연출하다",hanja:"演出-",id:7033,freq_deg:4068},{english:"intentionally, deliberately",hangul:"의도적",hanja:"意圖的",id:7034,freq_deg:4073},{english:"an expectant mother, a pregnant woman",hangul:"임신부",hanja:"妊娠婦",id:7035,freq_deg:4075},{english:"long-term",hangul:"장기적",hanja:"長期的",id:7036,freq_deg:4076},{english:"a tradition, a legend",hangul:"전설",hanja:"傳說",id:7037,freq_deg:4078},{english:"clause,paragraph",hangul:"절",hanja:"節",id:7038,freq_deg:4079},{english:"a shot, an injection",hangul:"주사",hanja:"注射",id:7039,freq_deg:4083},{english:"guess, assumption, conjecture",hangul:"짐작",hanja:"斟酌",id:7040,freq_deg:4085},{english:"to go to work",hangul:"출근하다",hanja:"出勤-",id:7041,freq_deg:4089},{english:"to cancel, call off, take back, retract",hangul:"취소하다",hanja:"取消-",id:7042,freq_deg:4090},{english:"employment, finding a job",hangul:"취업",hanja:"就業",id:7043,freq_deg:4091},{english:"layer, paint, coat",hangul:"칠하다",hanja:"漆-",id:7044,freq_deg:4092},{english:"a criticism",hangul:"평",hanja:"評",id:7045,freq_deg:4095},{english:"a sign, signal",hangul:"표시",hanja:"標示",id:7046,freq_deg:4098},{english:"the second half of the year",hangul:"하반기",hanja:"下半期",id:7047,freq_deg:4099},{english:"limit, restrict",hangul:"한하다",hanja:"限-",id:7048,freq_deg:4101},{english:"answer, solution",hangul:"해답",hanja:"解答",id:7049,freq_deg:4102},{english:"solution, settlement, resolve, relieve, alleviate",hangul:"해소하다",hanja:"解消-",id:7050,freq_deg:4103},{english:"allow, let, approve, consent, agree to",hangul:"허락하다",hanja:"許諾-",id:7051,freq_deg:4104},{english:"establish, settle",hangul:"확립하다",hanja:"確立-",id:7052,freq_deg:4105},{english:"sensitivity, sensibility",hangul:"감수성",hanja:"感受性",id:7053,freq_deg:4110},{english:"the opposite/other side",hangul:"건너편",hanja:"-便",id:7054,freq_deg:4112},{english:"view, scene, scenery",hangul:"경치",hanja:"景致",id:7055,freq_deg:4113},{english:"rapidly, swiftly",hangul:"급속히",hanja:"急速-",id:7056,freq_deg:4114},{english:"surge, sudden rapid increase",hangul:"급증하다",hanja:"急增-",id:7057,freq_deg:4115},{english:"an interview, face-to-face talk",hangul:"면담",hanja:"面談",id:7058,freq_deg:4125},{english:"collection",hangul:"모집",hanja:"募集",id:7059,freq_deg:4126},{english:"pronunciation",hangul:"발음",hanja:"發音",id:7060,freq_deg:4131},{english:"bag",hangul:"봉지",hanja:"封紙",id:7061,freq_deg:4134},{english:"emergency",hangul:"비상",hanja:"非常",id:7062,freq_deg:4136},{english:"businessman",hangul:"사업자",hanja:"事業者",id:7063,freq_deg:4139},{english:"oppenent, rival, competitor, adversary, antagonist",hangul:"상대편",hanja:"相對便",id:7064,freq_deg:4140},{english:"desire, wish, hope",hangul:"소망",hanja:"所望",id:7065,freq_deg:4142},{english:"passively",hangul:"수동적",hanja:"受動的",id:7066,freq_deg:4143},{english:"a glass (for alcohol)",hangul:"술잔",hanja:"-盞",id:7067,freq_deg:4144},{english:"ratings",hangul:"시청률",hanja:"視聽率",id:7068,freq_deg:4147},{english:"newspaper company",hangul:"신문사",hanja:"新聞社",id:7069,freq_deg:4148},{english:"a woman soldier",hangul:"여군",hanja:"女軍",id:7070,freq_deg:4149},{english:"lover, boyfriend, girlfriend, sweetheart, couple",hangul:"연인",hanja:"戀人",id:7071,freq_deg:4150},{english:"preliminary round, qualifying round",hangul:"예선",hanja:"豫選",id:7072,freq_deg:4153},{english:"a circle",hangul:"원",hanja:"圓",id:7073,freq_deg:4645},{english:"a ginko tree",hangul:"은행나무",hanja:"銀杏-",id:7074,freq_deg:4156},{english:"pride",hangul:"자부심",hanja:"自負心",id:7075,freq_deg:4158},{english:"in the future, someday",hangul:"장차",hanja:"將次",id:7076,freq_deg:4159},{english:"that side,direction",hangul:"저편",hanja:"-便",id:7077,freq_deg:4161},{english:"psychiatry",hangul:"정신과",hanja:"精神科",id:7078,freq_deg:4162},{english:"institutional, systematic",hangul:"제도적",hanja:"制度的",id:7079,freq_deg:4163},{english:"emphasize, regard sth as important, to be crucial",hangul:"중요시하다",hanja:"重要視-",id:7080,freq_deg:4169},{english:"branch store",hangul:"지점",hanja:"支店",id:7081,freq_deg:4170},{english:"the exchange rate",hangul:"환율",hanja:"換率",id:7082,freq_deg:4176},{english:"rainfall, precipitaion",hangul:"강수량",hanja:"降水量",id:7083,freq_deg:4179},{english:"a ward/district office",hangul:"구청",hanja:"區廳",id:7084,freq_deg:4181},{english:"\"domestic and foreign\"",hangul:"국내외",hanja:"國內外",id:7085,freq_deg:4182},{english:"to pray",hangul:"기도하다",hanja:"祈禱-",id:7086,freq_deg:4184},{english:"pre-existing, established",hangul:"기성",hanja:"旣成",id:7087},{english:"male student",hangul:"남학생",hanja:"男學生",id:7088,freq_deg:4188},{english:"farming",hangul:"농사일",hanja:"農事-",id:7089,freq_deg:4189},{english:"a farm, plantation",hangul:"농장",hanja:"農場",id:7090,freq_deg:4190},{english:"so-and-so, a certain Mr. X (used to not directly identify sby)",hangul:"모",hanja:"某",id:7091,freq_deg:4194},{english:"raw, uncooked; living",hangul:"생",hanja:"生",id:7092,freq_deg:4201},{english:"the Bible",hangul:"성경",hanja:"聖經",id:7093,freq_deg:4203},{english:"to take (time), to cost",hangul:"소요되다",hanja:"所要-",id:7094,freq_deg:4204},{english:"momentary, in a flash, for an instant",hangul:"순간적",hanja:"瞬間的",id:7095,freq_deg:4206},{english:"to marry, to take a husband",hangul:"시집가다",hanja:"媤-",id:7096,freq_deg:4207},{english:"city hall",hangul:"시청",hanja:"市廳",id:7097,freq_deg:4208},{english:"entertainment",hangul:"오락",hanja:"娛樂",id:7098,freq_deg:4214},{english:"human relations",hangul:"인간관계",hanja:"人間關係",id:7099,freq_deg:4219},{english:"for a long period",hangul:"장기간",hanja:"長期間",id:7100,freq_deg:4220},{english:"the battle line",hangul:"전선",hanja:"戰線",id:7101,freq_deg:4222},{english:"make a suggestion",hangul:"제의하다",hanja:"提議-",id:7102,freq_deg:4224},{english:"a traffic lane",hangul:"차선",hanja:"車線",id:7103,freq_deg:4229},{english:"to mistake a for b, illusion, delusion, to be having illucinations",hangul:"착각하다",hanja:"錯覺-",id:7104,freq_deg:4230},{english:"a portrait, a picture",hangul:"초상화",hanja:"肖像畵",id:7105,freq_deg:4231},{english:"a business trip",hangul:"출장",hanja:"出張",id:7106,freq_deg:4232},{english:"get off work, leaving the office, return home from work",hangul:"퇴근",hanja:"退勤",id:7107,freq_deg:4234},{english:"distinct, unique characteristic",hangul:"특수성",hanja:"特殊性",id:7108,freq_deg:4235},{english:"an aircraft",hangul:"항공기",hanja:"航空機",id:7109,freq_deg:4236},{english:"briskly, actively",hangul:"활발히",hanja:"活潑-",id:7110,freq_deg:4237},{english:"conversation, talk",hangul:"회화",hanja:"繪畵",id:7111,freq_deg:4238},{english:"to be interesting, amusing",hangul:"흥미롭다",hanja:"興味-",id:7112,freq_deg:4239},{english:"determination, resolve",hangul:"각오",hanja:"覺悟",id:7113,freq_deg:4241},{english:"to be opened to the public",hangul:"개방되다",hanja:"開放-",id:7114,freq_deg:4242},{english:"economics",hangul:"경제학",hanja:"經濟學",id:7115,freq_deg:4245},{english:"concern, interest",hangul:"관심사",hanja:"關心事",id:7116,freq_deg:4247},{english:"national history",hangul:"국사",hanja:"國史",id:7117,freq_deg:4249},{english:"returning to one's home country",hangul:"귀국",hanja:"歸國",id:7118,freq_deg:4251},{english:"meanwhile, meantime",hangul:"그간",hanja:"-間",id:7119,freq_deg:4252},{english:"playwright, playwriter",hangul:"극작가",hanja:"劇作家",id:7120,freq_deg:4254},{english:"flag, ensign, pennant",hangul:"기",hanja:"旗",id:7121},{english:"miracle",hangul:"기적",hanja:"奇跡",id:7122,freq_deg:4257},{english:"one's way of talking",hangul:"말투",hanja:"-套",id:7123,freq_deg:4262},{english:"directive, command",hangul:"명령어",hanja:"命令語",id:7124,freq_deg:4263},{english:"a bathhouse",hangul:"목욕탕",hanja:"沐浴湯",id:7125,freq_deg:4264},{english:"metamorphosis, transformation",hangul:"변신",hanja:"變身",id:7126,freq_deg:4267},{english:"father",hangul:"부친",hanja:"父親",id:7127,freq_deg:4268},{english:"office work",hangul:"사무",hanja:"事務",id:7128,freq_deg:4272},{english:"unimportant, trifling, insignificant",hangul:"사소하다",hanja:"些少-",id:7129,freq_deg:4273},{english:"refreshing, exhilirating, brisk",hangul:"상쾌하다",hanja:"爽快-",id:7130,freq_deg:4275},{english:"family name, surname, last name",hangul:"성",hanja:"姓",id:7131,freq_deg:4276},{english:"order, ranking",hangul:"순위",hanja:"順位",id:7132,freq_deg:4278},{english:"to eat a meal",hangul:"식사하다",hanja:"食事-",id:7133,freq_deg:4279},{english:"pair, couple",hangul:"쌍",hanja:"雙",id:7134,freq_deg:4280},{english:"historically; historical point of view",hangul:"역사상",hanja:"歷史上",id:7135,freq_deg:4284},{english:"musical performance, recital",hangul:"연주",hanja:"演奏",id:7136,freq_deg:4285},{english:"a post office",hangul:"우체국",hanja:"郵遞局",id:7137,freq_deg:4287},{english:"on land, on the ground",hangul:"육상",hanja:"陸上",id:7138,freq_deg:4289},{english:"drinking (alcohol)",hangul:"음주",hanja:"飮酒",id:7139,freq_deg:4290},{english:"parting, separation",hangul:"이별",hanja:"離別",id:7140,freq_deg:4291},{english:"preson of ability/talent",hangul:"인재",hanja:"人材",id:7141,freq_deg:4292},{english:"a human race",hangul:"인종",hanja:"人種",id:7142,freq_deg:4293},{english:"temporary, transitory",hangul:"일시적",hanja:"一時的",id:7143,freq_deg:4294},{english:"specialized",hangul:"전문적",hanja:"專門的",id:7144,freq_deg:4296},{english:"relay, transmission",hangul:"중계방송",hanja:"中繼放送",id:7145,freq_deg:4301},{english:"supply, pay",hangul:"지급",hanja:"支給",id:7146,freq_deg:4303},{english:"car/train window",hangul:"차창",hanja:"車窓",id:7147,freq_deg:4305},{english:"to invite",hangul:"초청하다",hanja:"招請-",id:7148,freq_deg:4306},{english:"point of departure",hangul:"출발점",hanja:"出發點",id:7149,freq_deg:4307},{english:"to escape, get away from",hangul:"탈출하다",hanja:"脫出-",id:7150,freq_deg:4312},{english:"permission, consent, assent, approval",hangul:"허락",hanja:"許諾",id:7151,freq_deg:4314},{english:"prohibition of smoking",hangul:"금연",hanja:"禁煙",id:7152,freq_deg:4322},{english:"older generation",hangul:"기성세대",hanja:"旣成世代",id:7153,freq_deg:4323},{english:"description, depiction",hangul:"기술하다",hanja:"記述-",id:7154,freq_deg:4324},{english:"north and south",hangul:"남북",hanja:"南北",id:7155,freq_deg:4328},{english:"accept, consent, convince, persuade oneself",hangul:"납득하다",hanja:"納得-",id:7156,freq_deg:4329},{english:"a grade or class",hangul:"단",hanja:"段",id:7157,freq_deg:4330},{english:"creative, ingenious, original",hangul:"독창적",hanja:"獨創的",id:7158,freq_deg:4332},{english:"perfect score",hangul:"만점",hanja:"滿點",id:7159,freq_deg:4333},{english:"every month",hangul:"매달",hanja:"每-",id:7160,freq_deg:4334},{english:"conservatism",hangul:"보수",hanja:"保守",id:7161,freq_deg:4587},{english:"security",hangul:"보안",hanja:"保安",id:7162,freq_deg:4341},{english:"department, ministry",hangul:"부",hanja:"部",id:7163,freq_deg:4343},{english:"Madam",hangul:"사모님",hanja:"師母-",id:7164,freq_deg:4347},{english:"three",hangul:"삼",hanja:"三",id:7165,freq_deg:4348},{english:"different, novel",hangul:"색다르다",hanja:"色-",id:7166,freq_deg:4350},{english:"time, days",hangul:"시일",hanja:"時日",id:7167,freq_deg:4354},{english:"quick, rapid, speedy",hangul:"신속하다",hanja:"迅速-",id:7168,freq_deg:4356},{english:"new product",hangul:"신제품",hanja:"新製品",id:7169,freq_deg:4357},{english:"to travel",hangul:"여행하다",hanja:"旅行-",id:7170,freq_deg:4361},{english:"warn, give notice",hangul:"예고하다",hanja:"豫告-",id:7171,freq_deg:4362},{english:"soft, gentle, delicate",hangul:"은은하다",hanja:"隱隱-",id:7172,freq_deg:4365},{english:"great, remarkable",hangul:"일대",hanja:"一大",id:7173,freq_deg:4368},{english:"input",hangul:"입력",hanja:"入力",id:7174,freq_deg:4369},{english:"natural phenomena",hangul:"자연현상",hanja:"自然現象",id:7175,freq_deg:4370},{english:"stop, station, bus-stop",hangul:"정류장",hanja:"停留場",id:7176,freq_deg:4371},{english:"important, crucial, significant",hangul:"중요",hanja:"重要",id:7177,freq_deg:4376},{english:"newest, latest",hangul:"최신",hanja:"最新",id:7178,freq_deg:4378},{english:"cancellation",hangul:"취소",hanja:"取消",id:7179,freq_deg:4380},{english:"harmful, injurious, detrimental",hangul:"해롭다",hanja:"害-",id:7180,freq_deg:4384},{english:"the front door",hangul:"현관문",hanja:"玄關門",id:7181,freq_deg:4385},{english:"intensify",hangul:"활발해지다",hanja:"活潑-",id:7182,freq_deg:4386},{english:"sacrifice",hangul:"희생하다",hanja:"犧牲-",id:7183,freq_deg:4388},{english:"to become possible",hangul:"가능해지다",hanja:"可能-",id:7184,freq_deg:4389},{english:"red pepper paste",hangul:"고추장",hanja:"-醬",id:7185,freq_deg:4391},{english:"golf course",hangul:"골프장",hanja:"-場",id:7186,freq_deg:4392},{english:"in vain, uselessly",hangul:"공연히",hanja:"空然-",id:7187,freq_deg:4393},{english:"former days, the past",hangul:"그전",hanja:"-前",id:7188,freq_deg:4398},{english:"safe, valut",hangul:"금고",hanja:"金庫",id:7189,freq_deg:4399},{english:"actively",hangul:"능동적",hanja:"能動的",id:7190,freq_deg:4403},{english:"for the present, for now, for a while",hangul:"당분간",hanja:"當分間",id:7191,freq_deg:4405},{english:"the back side of a mountain",hangul:"뒷산",hanja:"-山",id:7192,freq_deg:4407},{english:"a beautiful girl",hangul:"미인",hanja:"美人",id:7193,freq_deg:4413},{english:"ring",hangul:"반지",hanja:"半指",id:7194,freq_deg:4416},{english:"model, example",hangul:"본",hanja:"本",id:7195,freq_deg:4420},{english:"inequality",hangul:"불평등하다",hanja:"不平等-",id:7196,freq_deg:4423},{english:"the heart of a mountain",hangul:"산속",hanja:"山-",id:7197,freq_deg:4427},{english:"Westerner",hangul:"서양인",hanja:"西洋人",id:7198,freq_deg:4429},{english:"one's belongings/possessions",hangul:"소지품",hanja:"所持品",id:7199,freq_deg:4430},{english:"vinegar",hangul:"식초",hanja:"食醋",id:7200,freq_deg:4435},{english:"younger sister",hangul:"여동생",hanja:"女同生",id:7201,freq_deg:4442},{english:"association, reminiscent of, remind",hangul:"연상하다",hanja:"聯想-",id:7202,freq_deg:4443},{english:"interests",hangul:"이해",hanja:"利害",id:7203,freq_deg:4451},{english:"submarine",hangul:"잠수함",hanja:"潛水艦",id:7204,freq_deg:4454},{english:"scholarship",hangul:"장학금",hanja:"奬學金",id:7205,freq_deg:4456},{english:"lunchtime",hangul:"점심시간",hanja:"點心時間",id:7206,freq_deg:4459},{english:"intellectual, brainy",hangul:"지적",hanja:"知的",id:7207,freq_deg:4461},{english:"emcee, master of ceremonies",hangul:"진행자",hanja:"進行者",id:7208,freq_deg:4463},{english:"sense of responsibility",hangul:"책임감",hanja:"責任感",id:7209,freq_deg:4466},{english:"body temperature",hangul:"체온",hanja:"體溫",id:7210,freq_deg:4467},{english:"sushi",hangul:"초밥",hanja:"醋-",id:7211,freq_deg:4468},{english:"door, gate",hangul:"출입문",hanja:"出入門",id:7212,freq_deg:4470},{english:"pass through",hangul:"통과",hanja:"通過",id:7213,freq_deg:4471},{english:"a wheeled snack bar on the street",hangul:"포장마차",hanja:"布帳馬車",id:7214,freq_deg:4472},{english:"airport, airline",hangul:"항공",hanja:"航空",id:7215,freq_deg:4479},{english:"train line number",hangul:"호선",hanja:"號線",id:7216,freq_deg:4480},{english:"toilet paper",hangul:"휴지",hanja:"休紙",id:7217,freq_deg:4482},{english:"high speed",hangul:"고속",hanja:"高速",id:7218,freq_deg:4484},{english:"rescue a person",hangul:"구하다",hanja:"救-",id:7219,freq_deg:4487},{english:"next month",hangul:"내달",hanja:"來-",id:7220,freq_deg:4488},{english:"potent; spiteful; firm",hangul:"독하다",hanja:"毒-",id:7221,freq_deg:4493},{english:"list of names, roll, directory",hangul:"명단",hanja:"名單",id:7222,freq_deg:4495},{english:"meaningless, nonsensical",hangul:"무의미하다",hanja:"無意味-",id:7223,freq_deg:4496},{english:"passage, paragraph",hangul:"문구",hanja:"文句",id:7224,freq_deg:4497},{english:"under, below; less than",hangul:"미만",hanja:"未滿",id:7225,freq_deg:4499},{english:"morale, fighting spirit",hangul:"사기",hanja:"士氣",id:7226,freq_deg:4502},{english:"office job",hangul:"사무직",hanja:"事務職",id:7227,freq_deg:4504},{english:"temperament, character",hangul:"소질",hanja:"素質",id:7228,freq_deg:4505},{english:"dietary life",hangul:"식생활",hanja:"食生活",id:7229,freq_deg:4508},{english:"traffic signal",hangul:"신호등",hanja:"信號燈",id:7230,freq_deg:4509},{english:"honeymoon",hangul:"신혼여행",hanja:"新婚旅行",id:7231,freq_deg:4510},{english:"a laboratory",hangul:"연구실",hanja:"硏究室",id:7232,freq_deg:4513},{english:"hospitalization",hangul:"입원",hanja:"入院",id:7233,freq_deg:4517},{english:"company, group, organization",hangul:"조",hanja:"組",id:7234,freq_deg:4523},{english:"a graduate",hangul:"졸업생",hanja:"卒業生",id:7235,freq_deg:4524},{english:"to be ashamed",hangul:"창피하다",hanja:"猖披-",id:7236,freq_deg:4526},{english:"Taekwondo",hangul:"태권도",hanja:"跆拳道",id:7237,freq_deg:4529},{english:"combine, unite, join, harmonize with, be in accord with",hangul:"합하다",hanja:"合-",id:7238,freq_deg:4532},{english:"private tutor",hangul:"가정교사",hanja:"家庭敎師",id:7239,freq_deg:4535},{english:"commonly",hangul:"공통적",hanja:"共通的",id:7240,freq_deg:4537},{english:"educator, teacher",hangul:"교육자",hanja:"敎育者",id:7241,freq_deg:4538},{english:"teaching material, insruction material, textbook",hangul:"교재",hanja:"敎材",id:7242,freq_deg:4539},{english:"a man",hangul:"남",hanja:"男",id:7243,freq_deg:4977},{english:"reception, treatment",hangul:"대접하다",hanja:"待接-",id:7244,freq_deg:4546},{english:"hibiscus, rose of Sharon",hangul:"무궁화",hanja:"無窮花",id:7245,freq_deg:4547},{english:"room's floor",hangul:"방바닥",hanja:"房-",id:7246,freq_deg:4549},{english:"social life",hangul:"사회생활",hanja:"社會生活",id:7247,freq_deg:4552},{english:"several years",hangul:"수년",hanja:"數年",id:7248,freq_deg:4554},{english:"psychological",hangul:"심리적",hanja:"心理的",id:7249,freq_deg:4558},{english:"postponement, deferment",hangul:"연기",hanja:"延期",id:7250,freq_deg:4559},{english:"consolation, solace",hangul:"위로",hanja:"慰勞",id:7251,freq_deg:4560},{english:"a user; visitor",hangul:"이용자",hanja:"利用者",id:7252,freq_deg:4561},{english:"to input (data into the computer)",hangul:"입력하다",hanja:"入力-",id:7253,freq_deg:4562},{english:"a qualification certificate",hangul:"자격증",hanja:"資格證",id:7254,freq_deg:4563},{english:"medical examination and treatment",hangul:"진료",hanja:"診療",id:7255,freq_deg:4564},{english:"next to a window, the window's edge",hangul:"창가",hanja:"窓-",id:7256,freq_deg:4565},{english:"be impatient, irritated",hangul:"초조하다",hanja:"焦燥-",id:7257,freq_deg:4566},{english:"to drink a glass of alchohol",hangul:"한잔하다",hanja:"­盞-",id:7258,freq_deg:4568},{english:"to pass an exam",hangul:"합격하다",hanja:"合格-",id:7259,freq_deg:4570},{english:"paper used for applying makeup",hangul:"화장지",hanja:"化粧紙",id:7260,freq_deg:4571},{english:"a song",hangul:"가요",hanja:"歌謠",id:7261,freq_deg:4573},{english:"free ",hangul:"공짜",hanja:"空-",id:7262,freq_deg:4575},{english:"direction",hangul:"방면",hanja:"方面",id:7263,freq_deg:4584},{english:"legal",hangul:"법적",hanja:"法的",id:7264,freq_deg:4585},{english:"mend, repair, fix",hangul:"보수",hanja:"補修",id:7265,freq_deg:4587},{english:"social science",hangul:"사회학",hanja:"社會學",id:7266,freq_deg:4593},{english:"sexual",hangul:"성적",hanja:"性的",id:7267,freq_deg:4594},{english:"hand-washing",hangul:"세수",hanja:"洗手",id:7268,freq_deg:4595},{english:"to be naive, pure",hangul:"순진하다",hanja:"純眞-",id:7269,freq_deg:4596},{english:"travel agency",hangul:"여행사",hanja:"旅行社",id:7270,freq_deg:4600},{english:"exchange student",hangul:"유학생",hanja:"留學生",id:7271,freq_deg:4603},{english:"silver",hangul:"은",hanja:"銀",id:7272,freq_deg:4604},{english:"a handicapped person",hangul:"장애인",hanja:"障碍人",id:7273,freq_deg:4607},{english:"a recycled product",hangul:"재활용품",hanja:"再活用品",id:7274,freq_deg:4608},{english:"direct opposition, the exact reverse",hangul:"정반대",hanja:"正反對",id:7275,freq_deg:4612},{english:"unit, point, credit, grade",hangul:"학점",hanja:"學點",id:7276,freq_deg:4616},{english:"to be free, not busy",hangul:"한가하다",hanja:"閑暇-",id:7277,freq_deg:4617},{english:"pass an examination",hangul:"합격",hanja:"合格",id:7278,freq_deg:4618},{english:"indirect, roundabout",hangul:"간접적",hanja:"間接的",id:7279,freq_deg:4620},{english:"a prayer",hangul:"기도",hanja:"祈禱",id:7280,freq_deg:4626},{english:"approximately, crude, broad, rough, generally",hangul:"대강",hanja:"大綱",id:7281,freq_deg:4630},{english:"to become independent",hangul:"독립하다",hanja:"獨立-",id:7282,freq_deg:4631},{english:"outside the door",hangul:"문밖",hanja:"門-",id:7283,freq_deg:4632},{english:"to be imperfect",hangul:"불완전하다",hanja:"不完全-",id:7284,freq_deg:4635},{english:"dissatisfaction",hangul:"불평",hanja:"不平",id:7285,freq_deg:4636},{english:"living environment",hangul:"생활환경",hanja:"生活環境",id:7286,freq_deg:4638},{english:"historical studies",hangul:"역사학",hanja:"歷史學",id:7287,freq_deg:4641},{english:"chef, cook",hangul:"요리사",hanja:"料理師",id:7288,freq_deg:4644},{english:"an application form, a written request",hangul:"원서",hanja:"願書",id:7289,freq_deg:4646},{english:"a month",hangul:"월",hanja:"月",id:7290,freq_deg:4647},{english:"theoretical",hangul:"이론적",hanja:"理論的",id:7291,freq_deg:4648},{english:"to be pregnant",hangul:"임신하다",hanja:"妊娠-",id:7292,freq_deg:4650},{english:"to enter a hospital",hangul:"입원하다",hanja:"入院-",id:7293,freq_deg:4651},{english:"a funeral",hangul:"장례",hanja:"葬禮",id:7294,freq_deg:4656},{english:"so far, till now",hangul:"지금껏",hanja:"只今-",id:7295,freq_deg:4658},{english:"persons present",hangul:"참석자",hanja:"參席者",id:7296,freq_deg:4661},{english:"a window",hangul:"창구",hanja:"窓口",id:7297,freq_deg:4662},{english:"the lowest, the minimum/lowest price",hangul:"최저",hanja:"最低",id:7298,freq_deg:4663},{english:"necessary, indispensable",hangul:"필수",hanja:"必須",id:7299,freq_deg:4666},{english:"the number of times, the frequency",hangul:"횟수",hanja:"回數",id:7300,freq_deg:4669},{english:"possibility",hangul:"가능",hanja:"可能",id:7301,freq_deg:4671},{english:"an egg",hangul:"계란",hanja:"鷄卵",id:7302,freq_deg:4673},{english:"a school gate",hangul:"교문",hanja:"校門",id:7303,freq_deg:4674},{english:"feeling of tension",hangul:"긴장감",hanja:"緊張感",id:7304,freq_deg:4676},{english:"every week",hangul:"매주",hanja:"每週",id:7305,freq_deg:4680},{english:"north",hangul:"북",hanja:"北",id:7306,freq_deg:4683},{english:"disadvantage, drawback",hangul:"불이익",hanja:"不利益",id:7307,freq_deg:4684},{english:"to be unnecessary",hangul:"불필요하다",hanja:"不必要-",id:7308,freq_deg:4685},{english:"obstetrics and gynecology",hangul:"산부인과",hanja:"産婦人科",id:7309,freq_deg:4686},{english:"pursuit of knowledge",hangul:"수학",hanja:"修學",id:7310,freq_deg:4691},{english:"to worry, be anxious about",hangul:"염려하다",hanja:"念慮-",id:7311,freq_deg:4701},{english:"an uncle on one's mother's side",hangul:"외삼촌",hanja:"外三寸",id:7312,freq_deg:4703},{english:"lease",hangul:"전세",hanja:"傳貰",id:7313,freq_deg:4710},{english:"an invitation",hangul:"초대",hanja:"招待",id:7314,freq_deg:5029},{english:"number of emails/written letters (counter)",hangul:"통",hanja:"通",id:7315,freq_deg:4716},{english:"severance pay, pension",hangul:"퇴직금",hanja:"退職金",id:7316,freq_deg:4717},{english:"one's 60th anniversary",hangul:"환갑",hanja:"還甲",id:7317,freq_deg:4718},{english:"simplicity, convenience",hangul:"간편하다",hanja:"簡便-",id:7318,freq_deg:4720},{english:"sensational",hangul:"감동적",hanja:"感動的",id:7319,freq_deg:4721},{english:"tourist area",hangul:"관광지",hanja:"觀光地",id:7320,freq_deg:4723},{english:"school uniform",hangul:"교복",hanja:"校服",id:7321,freq_deg:4724},{english:"a Korean living abroad",hangul:"교포",hanja:"僑胞",id:7322,freq_deg:4725},{english:"to return home",hangul:"귀가하다",hanja:"歸家-",id:7323,freq_deg:4726},{english:"just, full",hangul:"만",hanja:"滿",id:7324,freq_deg:4985},{english:"apathy, indifference",hangul:"무관심",hanja:"無關心",id:7325,freq_deg:4734},{english:"be busy, crowded",hangul:"분주하다",hanja:"奔走-",id:7326,freq_deg:4739},{english:"plastic bag",hangul:"비닐봉지",hanja:"-封紙",id:7327,freq_deg:4740},{english:"seriously, with care",hangul:"소중히",hanja:"所重-",id:7328,freq_deg:4746},{english:"a faucet, tap",hangul:"수도꼭지",hanja:"水道-",id:7329,freq_deg:4748},{english:"rudeness, impolite",hangul:"실례",hanja:"失禮",id:7330,freq_deg:4749},{english:"hello/goodbye",hangul:"안녕",hanja:"安寧",id:7331,freq_deg:4751},{english:"tender, soft, mild",hangul:"연하다",hanja:"軟-",id:7332,freq_deg:4756},{english:"physically, corporeal, of the flesh",hangul:"육체적",hanja:"肉體的",id:7333,freq_deg:4759},{english:"the lunar calendar",hangul:"음력",hanja:"陰曆",id:7334,freq_deg:4760},{english:"disposable",hangul:"일회용",hanja:"一回用",id:7335,freq_deg:4762},{english:"specialty job",hangul:"전문직",hanja:"專門職",id:7336,freq_deg:4765},{english:"telephone receiver",hangul:"전화기",hanja:"電話機",id:7337,freq_deg:4766},{english:"last week",hangul:"지난주",hanja:"-週",id:7338,freq_deg:4768},{english:"one's second eldest son",hangul:"차남",hanja:"次男",id:7339,freq_deg:4772},{english:"marking, grading, scoring",hangul:"채점",hanja:"採點",id:7340,freq_deg:4773},{english:"a typewriter",hangul:"타자기",hanja:"打字機",id:7341,freq_deg:4776},{english:"easily, comfortably",hangul:"편히",hanja:"便-",id:7342,freq_deg:4778},{english:"midnight",hangul:"한밤중",hanja:"-中",id:7343,freq_deg:4781},{english:"filial piety, to be devoted to one's parents",hangul:"효도",hanja:"孝道",id:7344,freq_deg:4782},{english:"nurse",hangul:"간호사",hanja:"看護師",id:7345,freq_deg:4784},{english:"high school student",hangul:"고등학생",hanja:"高等學生",id:7346,freq_deg:4786},{english:"returning home",hangul:"귀가",hanja:"歸家",id:7347,freq_deg:4788},{english:"university professor",hangul:"대학교수",hanja:"大學敎授",id:7348,freq_deg:4795},{english:"an airfield",hangul:"비행장",hanja:"飛行場",id:7349,freq_deg:4804},{english:"a bottle of alcohol",hangul:"술병",hanja:"-甁",id:7350,freq_deg:4807},{english:"a postcard",hangul:"엽서",hanja:"葉書",id:7351,freq_deg:4810},{english:"weekday",hangul:"요일",hanja:"曜日",id:7352,freq_deg:4812},{english:"the driver",hangul:"운전기사",hanja:"運轉技士",id:7353,freq_deg:4815},{english:"riskiness, jeopardy",hangul:"위험성",hanja:"危險性",id:7354,freq_deg:4816},{english:"one",hangul:"일",hanja:"一",id:7355,freq_deg:4818},{english:"while in school, attending school",hangul:"재학",hanja:"在學",id:7356,freq_deg:4820},{english:"fixed, regular, periodical",hangul:"정기적",hanja:"定期的",id:7357,freq_deg:4823},{english:"religious, spiritual",hangul:"종교적",hanja:"宗敎的",id:7358,freq_deg:4824},{english:"subjective",hangul:"주관적",hanja:"主觀的",id:7359,freq_deg:4825},{english:"a worker",hangul:"직장인",hanja:"職場人",id:7360,freq_deg:4826},{english:"sincerely, truly",hangul:"진심",hanja:"眞心",id:7361,freq_deg:4827},{english:"bookbag",hangul:"책가방",hanja:"冊-",id:7362,freq_deg:4831},{english:"toothpaste",hangul:"치약",hanja:"齒藥",id:7363,freq_deg:4833},{english:"department (college, university)",hangul:"학과",hanja:"學科",id:7364,freq_deg:4835},{english:"emphasis, stress",hangul:"강조",hanja:"强調",id:7365,freq_deg:4837},{english:"bulletin board",hangul:"게시판",hanja:"揭示板",id:7366,freq_deg:4838},{english:"to share something in common",hangul:"공통점",hanja:"共通點",id:7367,freq_deg:4839},{english:"extracurricular work",hangul:"과외",hanja:"課外",id:7368,freq_deg:4840},{english:"inside the school",hangul:"교내",hanja:"校內",id:7369,freq_deg:4841},{english:"ward or  district",hangul:"구",hanja:"區",id:7370,freq_deg:5403},{english:"internal",hangul:"내적",hanja:"內的",id:7371,freq_deg:4845},{english:"answer, reply (letter/email)",hangul:"답장",hanja:"答狀",id:7372,freq_deg:4848},{english:"nothing; lacking",hangul:"무",hanja:"無",id:7373,freq_deg:4851},{english:"a particular thing",hangul:"별일",hanja:"別-",id:7374,freq_deg:4856},{english:"Buddhism",hangul:"불법",hanja:"佛法",id:7375,freq_deg:4859},{english:"businessman",hangul:"사업가",hanja:"事業家",id:7376,freq_deg:4861},{english:"application, application form",hangul:"신청서",hanja:"申請書",id:7377,freq_deg:4868},{english:"garbage can",hangul:"쓰레기통",hanja:"-桶",id:7378,freq_deg:4869},{english:"a sheep, ram",hangul:"양",hanja:"羊",id:7379,freq_deg:4873},{english:"be unchanged, the same as before",hangul:"여전하다",hanja:"如前-",id:7380,freq_deg:4874},{english:"the southeastern part of Korea",hangul:"영남",hanja:"嶺南",id:7381,freq_deg:4875},{english:"the stomach",hangul:"위",hanja:"胃",id:7382,freq_deg:4879},{english:"weather",hangul:"일기",hanja:"日氣",id:7383,freq_deg:4880},{english:"last time, the other day",hangul:"저번",hanja:"這番",id:7384,freq_deg:4883},{english:"an exhibition hall",hangul:"전시장",hanja:"展示場",id:7385,freq_deg:4884},{english:"correct answer",hangul:"정답",hanja:"正答",id:7386,freq_deg:4886},{english:"be discharged from the military",hangul:"제대하다",hanja:"除隊-",id:7387,freq_deg:4888},{english:"instantly, impromptu",hangul:"즉석",hanja:"卽席",id:7388,freq_deg:4890},{english:"gradually",hangul:"차차",hanja:"次次",id:7389,freq_deg:4892},{english:"case, box, pack",hangul:"갑",hanja:"匣",id:7390,freq_deg:4902},{english:"be frightened or  scared",hangul:"겁나다",hanja:"怯-",id:7391,freq_deg:4905},{english:"gold medal",hangul:"금메달",hanja:"金-",id:7392,freq_deg:4908},{english:"a fairy tale",hangul:"동화책",hanja:"童話冊",id:7393,freq_deg:4914},{english:"call/appeal for",hangul:"모집하다",hanja:"募集-",id:7394,freq_deg:4915},{english:"chestnut color, maroon",hangul:"밤색",hanja:"-色",id:7395,freq_deg:4917},{english:"sex distinction",hangul:"성별",hanja:"性別",id:7396,freq_deg:4922},{english:"laundry",hangul:"세탁",hanja:"洗濯",id:7397,freq_deg:4923},{english:"a rumor gets started",hangul:"소문나다",hanja:"所聞-",id:7398,freq_deg:4924},{english:"to be useless",hangul:"소용없다",hanja:"所用-",id:7399,freq_deg:4925},{english:"upset, distressed, annoyed",hangul:"속상하다",hanja:"-傷-",id:7400,freq_deg:4926},{english:"a handkerchief",hangul:"손수건",hanja:"-手巾",id:7401,freq_deg:4927},{english:"tap water",hangul:"수돗물",hanja:"水道-",id:7402,freq_deg:4929},{english:"tens of thousands",hangul:"수만",hanja:"數萬",id:7403,freq_deg:4930},{english:"an imported product",hangul:"수입품",hanja:"輸入品",id:7404,freq_deg:4932},{english:"dishes, tableware",hangul:"식기",hanja:"食器",id:7405,freq_deg:4934},{english:"a plan, proposal, suggestion",hangul:"안",hanja:"案",id:7406,freq_deg:4936},{english:"safety, welfare",hangul:"안부",hanja:"安否",id:7407,freq_deg:4937},{english:"foreign wine/liquors",hangul:"양주",hanja:"洋酒",id:7408,freq_deg:4938},{english:"movie actor",hangul:"영화배우",hanja:"映畵俳優",id:7409,freq_deg:4940},{english:"pardon, forgiveness",hangul:"용서",hanja:"容恕",id:7410,freq_deg:4942},{english:"to move (between houses or apartments)",hangul:"이사하다",hanja:"移徙-",id:7411,freq_deg:4944},{english:"first place, first rate/class/grade",hangul:"일등",hanja:"一等",id:7412,freq_deg:4945},{english:"labor pains, travail",hangul:"진통",hanja:"陣痛",id:7413,freq_deg:4954},{english:"attendance, participation",hangul:"참석",hanja:"參席",id:7414,freq_deg:4956},{english:"the highest grade/class",hangul:"최고급",hanja:"最高級",id:7415,freq_deg:4958},{english:"the best, the finest",hangul:"최상",hanja:"最上",id:7416,freq_deg:4959},{english:"the worst",hangul:"최악",hanja:"最惡",id:7417,freq_deg:4960},{english:"leave a country",hangul:"출국",hanja:"出國",id:7418,freq_deg:4961},{english:"to get close, to get friendly",hangul:"친해지다",hanja:"親-",id:7419,freq_deg:4962},{english:"Korean",hangul:"한국적",hanja:"韓國的",id:7420,freq_deg:4966},{english:"a roadside tree",hangul:"가로수",hanja:"街路樹",id:7421,freq_deg:4969},{english:"snack",hangul:"간식",hanja:"間食",id:7422,freq_deg:4970},{english:"to be high-class",hangul:"고급스럽다",hanja:"高級-",id:7423,freq_deg:4973},{english:"a royal princess",hangul:"공주",hanja:"公主",id:7424,freq_deg:4975},{english:"south",hangul:"남",hanja:"南",id:7425,freq_deg:4977},{english:"yellow",hangul:"노란색",hanja:"-色",id:7426,freq_deg:4979},{english:"to record",hangul:"녹음하다",hanja:"錄音-",id:7427,freq_deg:4980},{english:"10000",hangul:"만",hanja:"萬",id:7428,freq_deg:4985},{english:"dancer",hangul:"무용가",hanja:"舞踊家",id:7429,freq_deg:4989},{english:"a monument",hangul:"비",hanja:"碑",id:7430,freq_deg:4997},{english:"the four seasons",hangul:"사계절",hanja:"四季節",id:7431,freq_deg:4998},{english:"to apologize",hangul:"사과하다",hanja:"謝過-",id:7432,freq_deg:4999},{english:"prize money",hangul:"상금",hanja:"賞金",id:7433,freq_deg:5001},{english:"appetite, desire",hangul:"식욕",hanja:"食慾",id:7434,freq_deg:5003},{english:"lettuce",hangul:"양상추",hanja:"洋-",id:7435,freq_deg:5006},{english:"female college student",hangul:"여대생",hanja:"女大生",id:7436,freq_deg:5007},{english:"put off, postpone",hangul:"연기하다",hanja:"延期-",id:7437,freq_deg:5008},{english:"one's mother's maiden home",hangul:"외갓집",hanja:"外家-",id:7438,freq_deg:5010},{english:"a maternal grandmother",hangul:"외할머니",hanja:"外-",id:7439,freq_deg:5011},{english:"competent, able, talented",hangul:"유능하다",hanja:"有能-",id:7440,freq_deg:5012},{english:"historical site",hangul:"유적지",hanja:"遺跡地",id:7441,freq_deg:5013},{english:"a musician",hangul:"음악가",hanja:"音樂家",id:7442,freq_deg:5014},{english:"beneficial",hangul:"이롭다",hanja:"利-",id:7443,freq_deg:5016},{english:"ginseng",hangul:"인삼",hanja:"人蔘",id:7444,freq_deg:5018},{english:"look, personal appearance",hangul:"인상",hanja:"人相",id:7445,freq_deg:5019},{english:"enter/join a company",hangul:"입사",hanja:"入社",id:7446,freq_deg:5020},{english:"recycling",hangul:"재활용",hanja:"再活用",id:7447,freq_deg:5022},{english:"anniversary of a person's death",hangul:"제삿날",hanja:"祭祀-",id:7448,freq_deg:5024},{english:"to refer, consult",hangul:"참고하다",hanja:"參考-",id:7449,freq_deg:5026},{english:"a teacup",hangul:"찻잔",hanja:"茶盞",id:7450,freq_deg:5027},{english:"philosophical",hangul:"철학적",hanja:"哲學的",id:7451,freq_deg:5028},{english:"first, founder",hangul:"초대",hanja:"初代",id:7452,freq_deg:5029},{english:"a toothbrush",hangul:"칫솔",hanja:"齒-",id:7453,freq_deg:5031},{english:"grape(s)",hangul:"포도",hanja:"葡萄",id:7454,freq_deg:5036},{english:"academic background, formal schooling",hangul:"학력",hanja:"學歷",id:7455,freq_deg:5038},{english:"crosswalk",hangul:"횡단보도",hanja:"橫斷步道",id:7456,freq_deg:5042},{english:"dry, arid",hangul:"건조하다",hanja:"乾燥-",id:7457,freq_deg:5045},{english:"the husband of one's paternal aunt",hangul:"고모부",hanja:"姑母夫",id:7458,freq_deg:5047},{english:"public payphone",hangul:"공중전화",hanja:"公衆電話",id:7459,freq_deg:5048},{english:"the state examination",hangul:"과거",hanja:"科擧",id:7460,freq_deg:5050},{english:"national, state",hangul:"국가적",hanja:"國家的",id:7461,freq_deg:5051},{english:"suburbs",hangul:"근교",hanja:"近郊",id:7462,freq_deg:5054},{english:"fundamental, basic",hangul:"기초적",hanja:"基礎的",id:7463,freq_deg:5055},{english:"recording",hangul:"녹음",hanja:"錄音",id:7464,freq_deg:5056},{english:"variety",hangul:"다양성",hanja:"多樣性",id:7465,freq_deg:5057},{english:"midnight",hangul:"밤중",hanja:"-中",id:7466,freq_deg:5061},{english:"conservative",hangul:"보수적",hanja:"保守的",id:7467,freq_deg:5065},{english:"be uncertain",hangul:"불확실하다",hanja:"不確實-",id:7468,freq_deg:5067},{english:"chairperson, host, MC, emcee",hangul:"사회자",hanja:"司會者",id:7469,freq_deg:5070},{english:"rice cake steemed over pine needles",hangul:"송편",hanja:"松-",id:7470,freq_deg:5076},{english:"newlyweds",hangul:"신혼부부",hanja:"新婚夫婦",id:7471,freq_deg:5080},{english:"erotic, sexual, racy, risque",hangul:"야하다",hanja:"冶-",id:7472,freq_deg:5083},{english:"all day long, the whole day",hangul:"온종일",hanja:"-終日",id:7473,freq_deg:5087},{english:"to take first place",hangul:"우승하다",hanja:"優勝-",id:7474,freq_deg:5090},{english:"words of greeting",hangul:"인사말",hanja:"人事-",id:7475,freq_deg:5093},{english:"vending machine",hangul:"자판기",hanja:"自販機",id:7476,freq_deg:5094},{english:"a man's mother in law",hangul:"장모님",hanja:"丈母-",id:7477,freq_deg:5095},{english:"commute",hangul:"출퇴근",hanja:"出退勤",id:7478,freq_deg:5102},{english:"a dentist",hangul:"치과",hanja:"齒科",id:7479,freq_deg:5103},{english:"to go home from work",hangul:"퇴근하다",hanja:"退勤-",id:7480,freq_deg:5106},{english:"sign, mark, indicate",hangul:"표시하다",hanja:"標示-",id:7481,freq_deg:5107},{english:"below, underneath",hangul:"하",hanja:"下",id:7482,freq_deg:5109},{english:"get angry",hangul:"화나다",hanja:"火-",id:7483,freq_deg:5112},{english:"to serve one's parents",hangul:"효도하다",hanja:"孝道-",id:7484,freq_deg:5113},{english:"the opposite room",hangul:"건넌방",hanja:"-房",id:7485,freq_deg:5117},{english:"public institution",hangul:"공기",hanja:"空器",id:7486,freq_deg:5119},{english:"wonderful, great, marvelous, awesome",hangul:"굉장하다",hanja:"宏壯-",id:7487,freq_deg:5120},{english:"businessman, entrepreneur",hangul:"기업인",hanja:"企業人",id:7488,freq_deg:5122},{english:"younger brother",hangul:"남동생",hanja:"男-",id:7489,freq_deg:5126},{english:"Andong city",hangul:"안동",hanja:"安東",id:7490,freq_deg:5136},{english:"the opposite side",hangul:"반대편",hanja:"反對便",id:7491,freq_deg:5139},{english:"rich man's house",hangul:"부잣집",hanja:"富者-",id:7492,freq_deg:5144},{english:"to become clear",hangul:"분명해지다",hanja:"分明-",id:7493,freq_deg:5145},{english:"camera",hangul:"사진기",hanja:"寫眞機",id:7494,freq_deg:5146},{english:"mountain path/road",hangul:"산길",hanja:"山-",id:7495,freq_deg:5147},{english:"vocational training",hangul:"수업",hanja:"修業",id:7496,freq_deg:5152},{english:"outside the city, suburbs",hangul:"시외",hanja:"市外",id:7497,freq_deg:5155},{english:"to get serious",hangul:"심각해지다",hanja:"深刻-",id:7498,freq_deg:5156},{english:"medicinal water, mineral water",hangul:"약수",hanja:"藥水",id:7499,freq_deg:5161},{english:"medicine, medical supplies",hangul:"약품",hanja:"藥品",id:7500,freq_deg:5162},{english:"cabbage",hangul:"양배추",hanja:"洋-",id:7501,freq_deg:5163},{english:"yield, concession, compromise",hangul:"양보",hanja:"讓步",id:7502,freq_deg:5164},{english:"on both sides",hangul:"양옆",hanja:"兩-",id:7503,freq_deg:5165},{english:"female high school student",hangul:"여고생",hanja:"女高生",id:7504,freq_deg:5170},{english:"queen",hangul:"여왕",hanja:"女王",id:7505,freq_deg:5171},{english:"to be put off, postponed",hangul:"연기되다",hanja:"延期-",id:7506,freq_deg:5172},{english:"sneakers, tennis shoes, running shoes, cleats",hangul:"운동화",hanja:"運動靴",id:7507,freq_deg:5176},{english:"disposable product",hangul:"일회용품",hanja:"一回用品",id:7508,freq_deg:5179},{english:"lunchtime",hangul:"점심때",hanja:"點心-",id:7509,freq_deg:5183},{english:"a week",hangul:"주일",hanja:"週日",id:7510,freq_deg:5184},{english:"elementary school",hangul:"초등학교",hanja:"初等學校",id:7511,freq_deg:5190},{english:"novice, newbie, beginner",hangul:"초보",hanja:"初步",id:7512,freq_deg:5191},{english:"early summer",hangul:"초여름",hanja:"初-",id:7513,freq_deg:5192},{english:"early in the evening",hangul:"초저녁",hanja:"初-",id:7514,freq_deg:5193},{english:"fatigue, exhaustion",hangul:"피곤",hanja:"疲困",id:7515,freq_deg:5196},{english:"tuition",hangul:"학비",hanja:"學費",id:7516,freq_deg:5197},{english:"damage, injury",hangul:"해",hanja:"害",id:7517,freq_deg:5198},{english:"overseas travel",hangul:"해외여행",hanja:"海外旅行",id:7518,freq_deg:5199},{english:"a devoted son",hangul:"효자",hanja:"孝子",id:7519,freq_deg:5200},{english:"a riverside",hangul:"강변",hanja:"江邊",id:7520,freq_deg:5202},{english:"to give a public performance, to put on a play",hangul:"공연되다",hanja:"公演-",id:7521,freq_deg:5203},{english:"a legal holiday",hangul:"공휴일",hanja:"公休日",id:7522,freq_deg:5204},{english:"school period",hangul:"교시",hanja:"校時",id:7523,freq_deg:5206},{english:"gangster",hangul:"깡패",hanja:"-牌",id:7524,freq_deg:5210},{english:"diversify",hangul:"다양해지다",hanja:"多樣-",id:7525,freq_deg:5213},{english:"mass transportation",hangul:"대중교통",hanja:"大衆交通",id:7526,freq_deg:5214},{english:"everlasting, eternal; hurrah!",hangul:"만세",hanja:"萬歲",id:7527,freq_deg:5218},{english:"cartoonist",hangul:"만화가",hanja:"漫畵家",id:7528,freq_deg:5219},{english:"business card",hangul:"명함",hanja:"名銜",id:7529,freq_deg:5223},{english:"street address",hangul:"번지",hanja:"番地",id:7530,freq_deg:5228},{english:"deep-red, crimson",hangul:"빨간색",hanja:"-色",id:7531,freq_deg:5230},{english:"private",hangul:"사립",hanja:"私立",id:7532,freq_deg:5231},{english:"private life",hangul:"사생활",hanja:"私生活",id:7533,freq_deg:5232},{english:"the standard of living",hangul:"생활수준",hanja:"生活水準",id:7534,freq_deg:5236},{english:"master's (degree)",hangul:"석사",hanja:"碩士",id:7535,freq_deg:5238},{english:"be gentle, meek, docile",hangul:"순하다",hanja:"順-",id:7536,freq_deg:5243},{english:"one's husband's family/house",hangul:"시댁",hanja:"媤宅",id:7537,freq_deg:5244},{english:"parents-in-law, one's husband's parents",hangul:"시부모",hanja:"媤父母",id:7538,freq_deg:5245},{english:"physical",hangul:"신체적",hanja:"身體的",id:7539,freq_deg:5246},{english:"to make a mistake",hangul:"실수하다",hanja:"失手-",id:7540,freq_deg:5247},{english:"some, somewhat; some time, a while",hangul:"얼마간",hanja:"-間",id:7541,freq_deg:5250},{english:"foreign brand/import",hangul:"외제",hanja:"外製",id:7542,freq_deg:5252},{english:"to go out",hangul:"외출하다",hanja:"外出-",id:7543,freq_deg:5253},{english:"swear, cuss, insult; abuse",hangul:"욕하다",hanja:"辱-",id:7544,freq_deg:5254},{english:"vinyl record",hangul:"음반",hanja:"音盤",id:7545,freq_deg:5256},{english:"consultation, discussion, conference",hangul:"의논",hanja:"議論",id:7546,freq_deg:5257},{english:"two",hangul:"이",hanja:"二",id:7547,freq_deg:5258},{english:"barber shop",hangul:"이발소",hanja:"理髮所",id:7548,freq_deg:5260},{english:"natural",hangul:"자연적",hanja:"自然的",id:7549,freq_deg:5262},{english:"a funeral",hangul:"장례식",hanja:"葬禮式",id:7550,freq_deg:5263},{english:"luck, fortune",hangul:"재수",hanja:"財數",id:7551,freq_deg:5264},{english:"the year before last",hangul:"재작년",hanja:"再昨年",id:7552,freq_deg:5265},{english:"electric light bulb",hangul:"전구",hanja:"電球",id:7553,freq_deg:5267},{english:"specialty store",hangul:"전문점",hanja:"專門店",id:7554,freq_deg:5268},{english:"traditional culture; cultural heritage",hangul:"전통문화",hanja:"傳統文化",id:7555,freq_deg:5269},{english:"honorific speech",hangul:"존댓말",hanja:"尊待-",id:7556,freq_deg:5271},{english:"kettle, teakettle",hangul:"주전자",hanja:"酒煎子",id:7557,freq_deg:5272},{english:"newbie, beginner, neophyte",hangul:"초보자",hanja:"初步者",id:7558,freq_deg:5275},{english:"written invitation",hangul:"초청장",hanja:"招請狀",id:7559,freq_deg:5276},{english:"unfashionable, unsophisticated",hangul:"촌스럽다",hanja:"村-",id:7560,freq_deg:5277},{english:"debator, disputant, discussant",hangul:"토론자",hanja:"討論者",id:7561,freq_deg:5282},{english:"normally",hangul:"평상시",hanja:"平常時",id:7562,freq_deg:5286},{english:"student",hangul:"학교생활",hanja:"學校生活",id:7563,freq_deg:5288},{english:"seafood",hangul:"해물",hanja:"海物",id:7564,freq_deg:5290},{english:"shape, form",hangul:"형",hanja:"型",id:7565,freq_deg:5291},{english:"get frightened, scared",hangul:"혼나다",hanja:"魂-",id:7566,freq_deg:5292},{english:"emotional",hangul:"감정적",hanja:"感情的",id:7567,freq_deg:5294},{english:"north of the river",hangul:"강북",hanja:"江北",id:7568,freq_deg:5295},{english:"inspection or  viewing",hangul:"관람",hanja:"觀覽",id:7569,freq_deg:5299},{english:"tuition",hangul:"교육비",hanja:"敎育費",id:7570,freq_deg:5301},{english:"national",hangul:"국립",hanja:"國立",id:7571,freq_deg:5302},{english:"a heated room",hangul:"난방",hanja:"暖房",id:7572,freq_deg:5308},{english:"contents",hangul:"내용물",hanja:"內容物",id:7573,freq_deg:5309},{english:"tree-planting",hangul:"녹화",hanja:"錄畵",id:7574,freq_deg:5310},{english:"every time",hangul:"매번",hanja:"每番",id:7575,freq_deg:5313},{english:"be indifferent to",hangul:"무관심하다",hanja:"無關心-",id:7576,freq_deg:5315},{english:"be safe, peaceful",hangul:"무사하다",hanja:"無事-",id:7577,freq_deg:5316},{english:"volleyball",hangul:"배구",hanja:"排球",id:7578,freq_deg:5318},{english:"necessities for daily life",hangul:"생활용품",hanja:"生活用品",id:7579,freq_deg:5324},{english:"a fan",hangul:"선풍기",hanja:"扇風機",id:7580,freq_deg:5325},{english:"female employee",hangul:"여직원",hanja:"女職員",id:7581,freq_deg:5336},{english:"the room next door",hangul:"옆방",hanja:"-房",id:7582,freq_deg:5338},{english:"the opposite sex",hangul:"이성",hanja:"異性",id:7583,freq_deg:5345},{english:"to join a company",hangul:"입사하다",hanja:"入社-",id:7584,freq_deg:5348},{english:"intelligence,intellect, raw intelligence",hangul:"지능",hanja:"知能",id:7585,freq_deg:5355},{english:"blue jeans",hangul:"청바지",hanja:"靑-",id:7586,freq_deg:5358},{english:"to be added",hangul:"추가되다",hanja:"追加-",id:7587,freq_deg:5359},{english:"treatment",hangul:"치료법",hanja:"治療法",id:7588,freq_deg:5360},{english:"in a special class",hangul:"특급",hanja:"特級",id:7589,freq_deg:5366},{english:"a weekday",hangul:"평일",hanja:"平日",id:7590,freq_deg:5367},{english:"a lifetime",hangul:"한평생",hanja:"-平生",id:7591,freq_deg:5370},{english:"beach",hangul:"해수욕장",hanja:"海水浴場",id:7592,freq_deg:5371},{english:"room number",hangul:"호실",hanja:"號室",id:7593,freq_deg:5374},{english:"waste paper basket",hangul:"휴지통",hanja:"休紙桶",id:7594,freq_deg:5375},{english:"to give a lecture",hangul:"강의하다",hanja:"講義-",id:7595,freq_deg:5379},{english:"perform",hangul:"공연하다",hanja:"公演-",id:7596,freq_deg:5381},{english:"a Jeju orange",hangul:"귤",hanja:"橘",id:7597,freq_deg:5382},{english:"internal medicine",hangul:"내과",hanja:"內科",id:7598,freq_deg:5383},{english:"cost of living",hangul:"생활비",hanja:"生活費",id:7599,freq_deg:5391},{english:"ski resort",hangul:"스키장",hanja:"-場",id:7600,freq_deg:5392},{english:"of the times",hangul:"시대적",hanja:"時代的",id:7601,freq_deg:5393},{english:"the front gate",hangul:"앞문",hanja:"-門",id:7602,freq_deg:5395},{english:"bookstore",hangul:"책방",hanja:"冊房",id:7603,freq_deg:5397},{english:"to add sth, to supplement",hangul:"추가하다",hanja:"追加-",id:7604,freq_deg:5398},{english:"blackboard",hangul:"칠판",hanja:"漆板",id:7605,freq_deg:5399},{english:"modern",hangul:"현대적",hanja:"現代的",id:7606,freq_deg:5402},{english:"9",hangul:"구",hanja:"九",id:7607,freq_deg:5403},{english:"movie theater",hangul:"영화관",hanja:"映畵館",id:7608,freq_deg:5409},{english:"a man's mother-in-law",hangul:"장모",hanja:"丈母",id:7609,freq_deg:5411},{english:"underground road",hangul:"지하도",hanja:"地下道",id:7610,freq_deg:5414},{english:"an ancient palace",hangul:"고궁",hanja:"古宮",id:7611,freq_deg:5416},{english:"bus for the freeway",hangul:"고속버스",hanja:"高速-",id:7612,freq_deg:5417},{english:"popular",hangul:"대중적",hanja:"大衆的",id:7613,freq_deg:5419},{english:"talk down, informal speach",hangul:"반말",hanja:"半-",id:7614,freq_deg:5421},{english:"pink color",hangul:"분홍색",hanja:"粉紅色",id:7615,freq_deg:5422},{english:"four, the fourth",hangul:"사",hanja:"四",id:7616,freq_deg:5423},{english:"granddaughter",hangul:"손녀",hanja:"孫女",id:7617,freq_deg:5425},{english:"swimming pool",hangul:"수영장",hanja:"水泳場",id:7618,freq_deg:5426},{english:"lower floor",hangul:"아래층",hanja:"-層",id:7619,freq_deg:5427},{english:"Japanese",hangul:"일본어",hanja:"日本語",id:7620,freq_deg:5428},{english:"gloves",hangul:"장갑",hanja:"掌匣",id:7621,freq_deg:5431},{english:"the first third of a month",hangul:"초순",hanja:"初旬",id:7622,freq_deg:5432},{english:"to leave the hospital",hangul:"퇴원하다",hanja:"退院-",id:7623,freq_deg:5433},{english:"the final third of the month",hangul:"하순",hanja:"下旬",id:7624,freq_deg:5434},{english:"married",hangul:"기혼",hanja:"旣婚",id:7625,freq_deg:5436},{english:"a seal, stamp",hangul:"대장",hanja:"圖章",id:7626,freq_deg:5437},{english:"chicken soup",hangul:"삼계탕",hanja:"蔘鷄湯",id:7627,freq_deg:5439},{english:"a birthday",hangul:"생신",hanja:"生辰",id:7628,freq_deg:5440},{english:"inner-city bus",hangul:"시내버스",hanja:"市內-",id:7629,freq_deg:5442},{english:"a postage stamp",hangul:"우표",hanja:"郵票",id:7630,freq_deg:5445},{english:"to be discharged from a hospital",hangul:"퇴원",hanja:"退院",id:7631,freq_deg:5448},{english:"blue",hangul:"파란색",hanja:"-色",id:7632,freq_deg:5449},{english:"cold noodle soup",hangul:"냉면",hanja:"冷麵",id:7633,freq_deg:5452},{english:"autumn colors, fall foliage",hangul:"단풍",hanja:"丹楓",id:7634,freq_deg:5453},{english:"German",hangul:"독일어",hanja:"獨逸語",id:7635,freq_deg:5454},{english:"a man's father in law, the wife's father",hangul:"장인",hanja:"丈人",id:7636,freq_deg:5463},{english:"give a gift",hangul:"선물하다",hanja:"膳物-",id:7637,freq_deg:5467},{english:"a maternal grandfather",hangul:"외할아버지",hanja:"外-",id:7638,freq_deg:5469},{english:"to cook (food)",hangul:"요리하다",hanja:"料理-",id:7639,freq_deg:5470},{english:"entering a country",hangul:"입국",hanja:"入國",id:7640,freq_deg:5471},{english:"parking",hangul:"주차",hanja:"駐車",id:7641,freq_deg:5472},{english:"gymnasium",hangul:"체육관",hanja:"體育館",id:7642,freq_deg:5473},{english:"at the least, the minimum",hangul:"최소",hanja:"最小",id:7643,freq_deg:5474},{english:"seven",hangul:"칠",hanja:"七",id:7644,freq_deg:5475},{english:"tea, black tea",hangul:"홍차",hanja:"紅茶",id:7645,freq_deg:5478},{english:"national",hangul:"국민적",hanja:"國民的",id:7646,freq_deg:5479},{english:"international airline",hangul:"국제선",hanja:"國際線",id:7647,freq_deg:5480},{english:"one hundred",hangul:"백",hanja:"百",id:7648,freq_deg:5482},{english:"40",hangul:"사십",hanja:"四十",id:7649,freq_deg:5483},{english:"ophthalmology",hangul:"안과",hanja:"眼科",id:7650,freq_deg:5484},{english:"contact information",hangul:"연락처",hanja:"連絡處",id:7651,freq_deg:5485},{english:"age, years of age",hangul:"연세",hanja:"年歲",id:7652,freq_deg:5486},{english:"a ceremony hall",hangul:"예식장",hanja:"禮式場",id:7653,freq_deg:5487},{english:"monthly rent",hangul:"월세",hanja:"月貰",id:7654,freq_deg:5488},{english:"the upper floor",hangul:"위층",hanja:"-層",id:7655,freq_deg:5489},{english:"ginseng tea",hangul:"인삼차",hanja:"人蔘茶",id:7656,freq_deg:5490},{english:"checkup, physical examination, investigation",hangul:"진찰",hanja:"診察",id:7657,freq_deg:5491},{english:"green",hangul:"초록색",hanja:"草綠色",id:7658,freq_deg:5492},{english:"eight",hangul:"팔",hanja:"八",id:7659,freq_deg:5495},{english:"green tea",hangul:"녹차",hanja:"綠茶",id:7660,freq_deg:5498},{english:"influenza",hangul:"독감",hanja:"毒感",id:7661,freq_deg:5499},{english:"Chinese dumplings",hangul:"만두",hanja:"饅頭",id:7662,freq_deg:5500},{english:"pronounce",hangul:"발음하다",hanja:"發音-",id:7663,freq_deg:5501},{english:"purple",hangul:"보라색",hanja:"-色",id:7664,freq_deg:5502},{english:"to be impolite",hangul:"실례하다",hanja:"失禮-",id:7665,freq_deg:5505},{english:"light green",hangul:"연두색",hanja:"軟豆色",id:7666,freq_deg:5508},{english:"Korean under-floor heating system",hangul:"온돌",hanja:"溫突",id:7667,freq_deg:5509},{english:"the number six",hangul:"육",hanja:"六",id:7668,freq_deg:5510},{english:"entry into a country",hangul:"출입국",hanja:"出入國",id:7669,freq_deg:5512},{english:"domestic airline",hangul:"국내선",hanja:"國內線",id:7670,freq_deg:5517},{english:"30",hangul:"삼십",hanja:"三十",id:7671,freq_deg:5519},{english:"your (his) esteemed name",hangul:"성함",hanja:"姓銜",id:7672,freq_deg:5520},{english:"laundromat",hangul:"세탁소",hanja:"洗濯所",id:7673,freq_deg:5521},{english:"inter-city bus",hangul:"시외버스",hanja:"市外-",id:7674,freq_deg:5522},{english:"baseball field",hangul:"야구장",hanja:"野球場",id:7675,freq_deg:5523},{english:"fifty",hangul:"오십",hanja:"五十",id:7676,freq_deg:5524},{english:"sportswear, exercise clothes",hangul:"운동복",hanja:"運動服",id:7677,freq_deg:5525},{english:"to park (a car)",hangul:"주차하다",hanja:"駐車-",id:7678,freq_deg:5528},{english:"Chinese",hangul:"중국어",hanja:"中國語",id:7679,freq_deg:5529},{english:"a vacuum cleaner",hangul:"청소기",hanja:"淸掃機",id:7680,freq_deg:5530},{english:"seventy",hangul:"칠십",hanja:"七十",id:7681,freq_deg:5531},{english:"pencil case",hangul:"필통",hanja:"筆筒",id:7682,freq_deg:5532},{english:"student identification",hangul:"학생증",hanja:"學生證",id:7683,freq_deg:5533},{english:"the wife of one's older brother",hangul:"형수",hanja:"兄嫂",id:7684,freq_deg:5534},{english:"Kyungsan province",hangul:"경상도",hanja:"慶尙道",id:7685,freq_deg:5535},{english:"tourist bus",hangul:"관광버스",hanja:"觀光-",id:7686,freq_deg:5537},{english:"a cold or unheated room",hangul:"냉방",hanja:"冷房",id:7687,freq_deg:5539},{english:"an eye disease",hangul:"눈병",hanja:"-病",id:7688,freq_deg:5540},{english:"sugar",hangul:"사탕",hanja:"沙糖",id:7689,freq_deg:5543},{english:"colored pencil",hangul:"색연필",hanja:"色鉛筆",id:7690,freq_deg:5544},{english:"pediatrics",hangul:"소아과",hanja:"小兒科",id:7691,freq_deg:5545},{english:"the solar calendar",hangul:"양력",hanja:"陽曆",id:7692,freq_deg:5546},{english:"five",hangul:"오",hanja:"五",id:7693,freq_deg:5548},{english:"soccer field",hangul:"축구장",hanja:"蹴球場",id:7694,freq_deg:5550},{english:"Korean food",hangul:"한식",hanja:"韓食",id:7695,freq_deg:5552},{english:"Sejong the Great (invented Hangul, the modern Korean script)",hangul:"세종대왕",hanja:"世宗大王",id:7696,freq_deg:5553},{english:"copy machine, photocopier",hangul:"복사기",hanja:"複寫機",id:7697,freq_deg:5556},{english:"beef soup with rice",hangul:"설렁탕",hanja:"-湯",id:7698,freq_deg:5558},{english:"Jongno",hangul:"종로",hanja:"鍾路",id:7699,freq_deg:5559},{english:"the Silla Dynasty",hangul:"신라",hanja:"新羅",id:7700,freq_deg:5560},{english:"10",hangul:"십",hanja:"十",id:7701,freq_deg:5561},{english:"thousand",hangul:"천",hanja:"千",id:7702,freq_deg:5563},{english:"black",hangul:"까만색",hanja:"-色",id:7703,freq_deg:5566},{english:"the year after next year",hangul:"내후년",hanja:"來後年",id:7704,freq_deg:5567},{english:"one's husband's father",hangul:"시아버지",hanja:"媤-",id:7705,freq_deg:5569},{english:"grocery store",hangul:"식품점",hanja:"食品店",id:7706,freq_deg:5570},{english:"fiancee",hangul:"약혼녀",hanja:"約婚女",id:7707,freq_deg:5571},{english:"above zero",hangul:"영상",hanja:"零上",id:7708,freq_deg:5573},{english:"reservation, advance purchase",hangul:"예매하다",hanja:"豫買-",id:7709,freq_deg:5574},{english:"preparation of lessons",hangul:"예습",hanja:"豫習",id:7710,freq_deg:5575},{english:"to review, prepare lessons, rehearse",hangul:"예습하다",hanja:"豫習-",id:7711,freq_deg:5576},{english:"sixty",hangul:"육십",hanja:"六十",id:7712,freq_deg:5577},{english:"80",hangul:"팔십",hanja:"八十",id:7713,freq_deg:5580},{english:"chalk",hangul:"분필",hanja:"粉筆",id:7714,freq_deg:5582},{english:"a fiance, an engaged person",hangul:"약혼자",hanja:"約婚者",id:7715,freq_deg:5583},{english:"raising, farming, culture",hangul:"양식",hanja:"洋食",id:7716,freq_deg:5584},{english:"one hundred million",hangul:"억",hanja:"億",id:7717,freq_deg:5585},{english:"surgery",hangul:"외과",hanja:"外科",id:7718,freq_deg:5587},{english:"bakery",hangul:"제과점",hanja:"製菓店",id:7719,freq_deg:5588},{english:"Chinese food",hangul:"중식",hanja:"中食",id:7720,freq_deg:5589},{english:"convenience store",hangul:"편의점",hanja:"便宜店",id:7721,freq_deg:5591},{english:"beef-rib soup",hangul:"갈비탕",hanja:"-湯",id:7722,freq_deg:5592},{english:"a large sum of money",hangul:"검정색",hanja:"-色",id:7723,freq_deg:5593},{english:"beauty salon",hangul:"미용실",hanja:"美容室",id:7724,freq_deg:5594},{english:"twenty",hangul:"이십",hanja:"二十",id:7725,freq_deg:5596},{english:"area around Daejon city",hangul:"충청도",hanja:"忠淸道",id:7726,freq_deg:5597},{english:"Sorak mountain",hangul:"설악산",hanja:"雪嶽山",id:7727,freq_deg:5598},{english:"the Joseon Dynasty",hangul:"조선",hanja:"朝鮮",id:7728,freq_deg:5599},{english:"Incheon International Airport",hangul:"인천공항",hanja:"仁川空港",id:7729,freq_deg:5601},{english:"Daejon city",hangul:"대전",hanja:"大田",id:7730,freq_deg:5603},{english:"root, foundation, basis",hangul:"근본",hanja:"根本",id:7731,freq_deg:5607},{english:"Tokyo",hangul:"도쿄(동경)",hanja:"東京",id:7732,freq_deg:5609},{english:"to indicate, point out",hangul:"지적하다",hanja:"指摘-",id:7733,freq_deg:5614},{english:"England",hangul:"영국",hanja:"英國",id:7734,freq_deg:5615},{english:"90",hangul:"구십",hanja:"九十",id:7735,freq_deg:5619},{english:"Incheon city",hangul:"인천",hanja:"仁川",id:7736,freq_deg:5622},{english:"Japanese food",hangul:"일식",hanja:"日食",id:7737,freq_deg:5624},{english:"an elementary school student",hangul:"초등학생",hanja:"初等學生",id:7738,freq_deg:5627},{english:"white",hangul:"하얀색",hanja:"-色",id:7739,freq_deg:5628},{english:"South America",hangul:"남미",hanja:"南美",id:7740,freq_deg:5629},{english:"Diamond mountain",hangul:"금강산",hanja:"金剛山",id:7741,freq_deg:5630},{english:"junju",hangul:"전주",hanja:"全州",id:7742,freq_deg:5631},{english:"southwestern region of South Korea",hangul:"전라도",hanja:"全羅道",id:7743,freq_deg:5632},{english:"North Korea",hangul:"북한",hanja:"北韓",id:7744,freq_deg:5633},{english:"Busan",hangul:"부산",hanja:"釜山",id:7745,freq_deg:5634},{english:"United States of America",hangul:"미국",hanja:"美國",id:7746,freq_deg:5635},{english:"Baekdoo mountain",hangul:"백두산",hanja:"白頭山",id:7747,freq_deg:5636},{english:"historical Korean government",hangul:"백제",hanja:"百濟",id:7748,freq_deg:5637},{english:"Beijing",hangul:"북경",hanja:"北京",id:7749},{english:"region surrounding Seoul",hangul:"강원도",hanja:"江原道",id:7750,freq_deg:5642},{english:"region surrounding Seoul",hangul:"경기도",hanja:"京畿道",id:7751,freq_deg:5643},{english:"region surrounding Seoul",hangul:"경복궁",hanja:"景福宮",id:7752,freq_deg:5644},{english:"region surrounding Seoul",hangul:"경주",hanja:"慶州",id:7753,freq_deg:5645},{english:"region surrounding Seoul",hangul:"고구려",hanja:"高句麗",id:7754,freq_deg:5646},{english:"region surrounding Seoul",hangul:"고려",hanja:"高麗",id:7755,freq_deg:5647},{english:"region surrounding Seoul",hangul:"광주",hanja:"光州",id:7756,freq_deg:5648},{english:"Gimpo airport",hangul:"김포공항",hanja:"金浦空港",id:7757,freq_deg:5649},{english:"Ulsan",hangul:"울산",hanja:"蔚山",id:7758,freq_deg:5650},{english:"Honam district",hangul:"호남",hanja:"湖南",id:7759,freq_deg:5651},{english:"Jiri mountain",hangul:"지리산",hanja:"智異山",id:7760,freq_deg:5654},{english:"Jeju island",hangul:"제주도",hanja:"濟州島",id:7761,freq_deg:5655},{english:"Seoul Station",hangul:"서울역",hanja:"-驛",id:7762,freq_deg:5657},{english:"Seoul's old south gate",hangul:"남대문",hanja:"南大門",id:7763,freq_deg:5658},{english:"Han river",hangul:"한강",hanja:"漢江",id:7764,freq_deg:5659},{english:"Halla mountain",hangul:"한라산",hanja:"漢拏山",id:7765,freq_deg:5660},{english:"the Korean peninsula",hangul:"한반도",hanja:"韓半島",id:7766,freq_deg:5661},{english:"capital of North Korea",hangul:"평양",hanja:"平壤",id:7767,freq_deg:5662},{english:"Namdaemoon shopping center",hangul:"남대문시장",hanja:"南大門市場",id:7768,freq_deg:5665},{english:"Nam mountain",hangul:"남산",hanja:"南山",id:7769,freq_deg:5666}];

const defs = DEFS;
const words = WORDS;

const findWordById = (query) => words.find(obj => obj.id.toString() === query);
const findWordsByHanjaStarting = (query) => query !== ""
    ? words.filter(obj => obj.hanja.startsWith(query))
    : [];
const findWordsByHanjaEnding = (query) => query !== ""
    ? words.filter(obj => obj.hanja.endsWith(query))
    : [];
const findWordsByHanja = (query) => query !== ""
    ? words.filter(obj => obj.hanja.includes(query))
    : [];
const findWordsByHangul = (query) => query !== ""
    ? words.filter(obj => obj.hangul.startsWith(query))
    : [];
const findWordsByEnglish = (query) => Number.isInteger(parseInt(query))
    ? words.filter(obj => obj.english.toLowerCase().includes(query))
    : query.length > 1
        ? words.filter(obj => obj.english.toLowerCase().startsWith(query))
        : [];
const pickOfTheDay = () => words[Math.floor(Date.now() / 86400000) % words.length];

const findHanjaDefinitionByHanja = (query) => query !== ""
    ? defs.find(obj => obj.hanja === query)
    : {};
const pickOfTheDay$1 = () => defs[Math.floor(Date.now() / 86400000) % defs.length];

let HomePage = class HomePage extends MobxLitElement {
    constructor() {
        super(...arguments);
        this.todayWord = pickOfTheDay();
        this.todayHanja = pickOfTheDay$1();
    }
    handleSeeMore() {
        Router.go(`/word/${this.todayWord.id}`);
    }
    static get styles() {
        return [selfCenter, fcSecondary, headingFont, frost, css `
      :host {
        display: flex;
        flex-direction: column;
        place-content: center;
        margin-top: 30px;
      }
      word-card {
        background-image: url('/assets/images/fan.svg');
        background-position: right -75px bottom -100px;
        background-repeat: no-repeat;
        background-size: contain;
        --frequencyMeterColor: var(--primary);
      }
      hanja-card, word-card {
        max-width: 100vw;
        border-left: solid 7px var(--secondary);
        margin-bottom: var(--padding);
        background-color: var(--bgColorContrasted);
      }
     
      
      .seemore {
        --buttonPadding: 5px var(--padding);
        --buttonBorderStyle: solid 2px;
        --buttonFocusOutline: var(--secondary);
        --buttonRadius: var(--radius);
        --buttonBC: var(--primary);
        --buttonFC: var(--color);
        margin-left: auto;
      }
    `];
    }
    render() {
        const { todayWord: randoms, todayHanja: randomHanja, handleSeeMore } = this;
        return html `
      <word-card class="frost" .word=${randoms}>
        <span slot="title" class="self-center fc-secondary heading-font">${translate('WORD_CARD.WORD_OF_THE_DAY')}</span>
        <bkj-button 
          @click=${handleSeeMore} 
          slot="action"
          class="seemore">${translate('WORD_CARD.SEE_MORE')}</bkj-button>
      </word-card>
      <hanja-card class="frost" .definition=${randomHanja} home></hanja-card>
    `;
    }
};
HomePage = __decorate([
    customElement('home-page'),
    Helmet
], HomePage);

let SearchPage = class SearchPage extends MobxLitElement {
    get queryResults() {
        const { queryShape: shape, query } = state;
        const routines = [
            { shape: 'en', searchFilter: findWordsByEnglish },
            { shape: 'ko', searchFilter: findWordsByHangul },
            { shape: 'cn', searchFilter: findWordsByHanja },
        ];
        if (shape !== false) {
            const res = routines.find(routine => routine.shape === shape);
            return res.searchFilter(query);
        }
        else
            return [];
    }
    static get styles() {
        return css `
      :host {
        max-height: max-content;
        display: flex;
        overflow: hidden;
      }
    `;
    }
    render() {
        const { queryResults } = this;
        return html `
      ${queryResults.length === 0
            ? html `<search-history></search-history>`
            : html `<words-list .items=${queryResults}>
              </words-list>`}
    `;
    }
};
SearchPage = __decorate([
    customElement('search-page'),
    Helmet
], SearchPage);

let WordPage = class WordPage extends MobxLitElement {
    connectedCallback() {
        super.connectedCallback();
        this._word = paramsId();
    }
    firstUpdated() {
        this.style.setProperty('--hanjaSize', adaptiveFontSize(deleteDash(this.Word.hanja)));
        state.setHanjaToFilterOn(this.Hanjas[0]);
    }
    handleClick(e) {
        const button = e.currentTarget;
        const hanja = button.firstElementChild.textContent;
        Router.go(`/hanja/${hanja}`);
    }
    get Word() {
        return findWordById(this._word);
    }
    get Hanjas() {
        return deleteDash(this.Word.hanja).split('');
    }
    get Items() {
        const { filter } = state;
        const routines = [
            { type: 'all', searchFilter: findWordsByHanja },
            { type: 'start', searchFilter: findWordsByHanjaStarting },
            { type: 'end', searchFilter: findWordsByHanjaEnding },
        ];
        const { searchFilter } = routines.find(routine => routine.type === filter);
        return searchFilter(state.hanjaToFilterOn);
    }
    static get styles() {
        return [dropShadow, flex, rowWrap, marginRight, maxW, contentStart, subFont, fcSecondary, hanFont, selfCenter, css `
    :host {
        display: flex;
        flex-direction: column;
        place-content: center;
        margin-top: 10px;
      }
      word-card {
        /* max-width: 450px; */
        background-color: var(--bgColorContrasted);
        --frequencyMeterColor: var(--primary);
        --displayHangul: none;
        --centerHanja: 0 auto;
        --titleOpacity: filter(1);
      }
      .detail {
        border-top: 1px solid;
      }
      .detail pre {
        font-size: .5em;
        font-weight: 600;
      }
      bkj-button > span {
        font-size: 1.9em !important;
      }
      .inset-hanja {
        box-shadow: var(--bgColor) 2px 2px 3px inset;
        --buttonH: 30px;
        --buttonW: 30px;
        --buttonRadius: var(--radius);
        --buttonHoverBC: var(--color);
        --buttonFC: var(--secondary);
        --buttonFocusOutline: transparent;

      }
    `];
    }
    render() {
        const { Word, Hanjas, Items, handleClick } = this;
        return html `
      <word-card .word=${Word} id=${Word.id}>
        <span slot="title" class="fit-w han-font fc-secondary self-center drop-shadow">${Word.hangul}</span>
        <section class="detail flex content-start row-wrap" slot="action">
          <pre class="sub-font max-w fc-secondary">${translate('WORD_CARD.SEE_HANJA_DETAILS')}</pre>
          ${Hanjas.map(hanja => html `<bkj-button flat class="inset-hanja mr5" @click=${handleClick}><span class="han-font">${hanja}</span></bkj-button>`)}
        </section>
      </word-card>
      <words-list .items=${Items} ?showTitle=${true}></words-list>
      <filtering-menu .hanjas=${Hanjas}></filtering-menu>
    `;
    }
};
WordPage = __decorate([
    customElement('word-page'),
    Helmet
], WordPage);

let HanjaPage = class HanjaPage extends MobxLitElement {
    connectedCallback() {
        super.connectedCallback();
        this._hanja = decodeURI(paramsId());
    }
    firstUpdated() {
        state.setHanjaToFilterOn(this.HanjaDefinition.hanja);
    }
    get HanjaDefinition() {
        return findHanjaDefinitionByHanja(this._hanja);
    }
    get Hanjas() {
        return [this.HanjaDefinition.hanja];
    }
    get Items() {
        const { filter } = state;
        const routines = [
            { type: 'all', searchFilter: findWordsByHanja },
            { type: 'start', searchFilter: findWordsByHanjaStarting },
            { type: 'end', searchFilter: findWordsByHanjaEnding },
        ];
        const { searchFilter } = routines.find(routine => routine.type === filter);
        return searchFilter(state.hanjaToFilterOn);
    }
    static get styles() {
        return css `
      :host {
        display: flex;
        flex-direction: column;
        place-content: center;
        margin-top: 10px;
      }
      hanja-card {
        min-height: 200px;
        background-color: var(--bgColorContrasted);
      }
    `;
    }
    render() {
        const { HanjaDefinition, Items, Hanjas } = this;
        return html `
      <hanja-card .definition=${HanjaDefinition}></hanja-card>
      <words-list .items=${Items} ?showTitle=${true}></words-list>
      <filtering-menu .hanjas=${Hanjas}></filtering-menu>
    `;
    }
};
__decorate([
    query('#hanja')
], HanjaPage.prototype, "$hanja", void 0);
HanjaPage = __decorate([
    customElement('hanja-page'),
    Helmet
], HanjaPage);

let AboutPage = class AboutPage extends MobxLitElement {
    static get styles() {
        return [flex, headingFont, css `
      :host {
        margin-top: var(--padding);
        display: flex
      }
      h2 {
        margin: 0;
        margin-bottom: 15px;  
      }
      article {
        background-color: var(--bgColorContrasted);
        padding: var(--padding);
        border-radius: var(--radius);
      }
      section p {
        font-size: 1rem;
      }
      section a {
        text-decoration: none;
        color: var(--secondary)
      }
    `];
    }
    render() {
        return html `
      <article class="flex">
        <section>
          <h2 class="heading-font">${translate('ABOUT.SECTION1.TITLE')}</h2>
          <p>${translate('ABOUT.SECTION1.CONTENT.P1')}</p>
          <p>${translateUnsafeHTML('ABOUT.SECTION1.CONTENT.P2_')}${translate('ABOUT.SECTION1.CONTENT._P2')}</p>
          <p>${translateUnsafeHTML('ABOUT.SECTION1.CONTENT.P3')}</p>
        </section>
      </article>
    `;
    }
};
AboutPage = __decorate([
    customElement('about-page'),
    Helmet
], AboutPage);

const provider = new firebase$1.auth.GoogleAuthProvider();
let LoginPage = class LoginPage extends MobxLitElement {
    connectedCallback() {
        const _super = Object.create(null, {
            connectedCallback: { get: () => super.connectedCallback }
        });
        return __awaiter(this, void 0, void 0, function* () {
            _super.connectedCallback.call(this);
            yield auth.onAuthStateChanged((user) => __awaiter(this, void 0, void 0, function* () {
                if (user) {
                    state.setUser(user);
                    const photoURL = yield toDataURL(user.photoURL);
                    if (!globalThis.localStorage.getItem('usr_avatar'))
                        globalThis.localStorage.setItem('usr_avatar', photoURL.toString());
                    Router.go('/');
                }
            }));
        });
    }
    handleLogin() {
        const email = this.$email.value;
        const password = this.$password.value;
        auth.signInWithEmailAndPassword(email, password)
            .then(_ => Router.go("/"))
            .catch((error) => {
            var errorCode = error.code;
            var errorMessage = error.message;
        });
    }
    handleGoogleLogin() {
        auth.signInWithPopup(provider);
    }
    static get styles() {
        return [flex, flexCol, contentCenter, maxW, opacity8, contentAround, css `
      :host {
        margin-top: var(--padding);
        display: flex
      }
      article {
        background-color: var(--bgColorContrasted);
        padding: var(--padding);
        border-radius: var(--radius);
      }
      form {
        width: 250px
      }
      form > * {
        margin: calc(var(--padding)/2) 0;
      }
      form > #action  {
        place-items: center
      }
      form > #action > * {
        margin: calc(var(--padding)/2) 0;
      }
      .info {
        font-size: .8rem;
      }
      bkj-field {
        --fieldFont: var(--regularFont);
        --labelFont: var(--headingFont);
        --labelColor: var(--color);
        --inputColor: var(--primary);
        --inputBC: var(--bgColor);
        --fieldFocusOutline: var(--secondary);
      }
      bkj-button {
        --buttonBC: var(--primary);
        --buttonFocusOutline: var(--secondary);
        --buttonHoverFC: var(--secondary);
        --buttonFC: var(--color);
      }
      bkj-button[flat] {
        --buttonFocusOutline: transparent;
        --buttonHoverFC: var(--primary);
        --buttonHoverBC: var(--secondary);
        --buttonFC: var(--color);
      }
    `];
    }
    render() {
        return html `
      <article class="flex content-center max-w">
        <form class="flex-col">
          <bkj-field type="email" label=${translate("LOGIN.EMAIL")}></bkj-field>
          <bkj-field type="password" label=${translate("LOGIN.PASSWORD")}></bkj-field>
          <section id="action" class="flex-col content-center">
            <section class='flex content-around max-w'>
              <bkj-button @click=${this.handleLogin}>${translate("LOGIN.LOGIN")}</bkj-button>
              <bkj-button flat @click=${() => Router.go("/signin")}>${translate("LOGIN.SIGNIN")}</bkj-button>
            </section>
            <div class="info opa-8">${translate("LOGIN.OR_USE_PROVIDER")}</div>
           <section class='flex'>
              <bkj-button @click=${this.handleGoogleLogin}><bkj-icon slot="icon" provider="local" name="google"></bkj-icon></bkj-button>
           </section>
          </section>
        </form>
      </article>
    `;
    }
};
__decorate([
    query("bkj-field[type='email']")
], LoginPage.prototype, "$email", void 0);
__decorate([
    query("bkj-field[type='password']")
], LoginPage.prototype, "$password", void 0);
LoginPage = __decorate([
    customElement('login-page'),
    Helmet
], LoginPage);

const provider$1 = new firebase$1.auth.GoogleAuthProvider();
let SigninPage = class SigninPage extends MobxLitElement {
    connectedCallback() {
        const _super = Object.create(null, {
            connectedCallback: { get: () => super.connectedCallback }
        });
        return __awaiter(this, void 0, void 0, function* () {
            _super.connectedCallback.call(this);
        });
    }
    handleSignIn() {
        const email = this.$email.value;
        const password = this.$password.value;
        auth.createUserWithEmailAndPassword(email, password)
            .then(_ => {
            auth.signInWithEmailAndPassword(email, password)
                .then(_ => {
                auth.onAuthStateChanged(user => {
                    if (user) {
                        const user = auth.currentUser;
                        user.updateProfile({
                            displayName: user.email,
                            photoURL: 'https://firebasestorage.googleapis.com/v0/b/memoja-1d38e.appspot.com/o/kimchi.png?alt=media&token=20e259af-9ff4-47da-8252-c41ff82c63f5'
                        }).then(function () {
                            Router.go("/");
                        });
                    }
                });
            });
        });
    }
    static get styles() {
        return [flex, flexCol, contentCenter, maxW, opacity8, contentAround, css `
      :host {
        margin-top: var(--padding);
        display: flex
      }
      article {
        background-color: var(--bgColorContrasted);
        padding: var(--padding);
        border-radius: var(--radius);
      }
      form {
        width: 250px
      }
      form > * {
        margin: calc(var(--padding)/2) 0;
      }
      form > #action  {
        place-items: center
      }
      form > #action > * {
        margin: calc(var(--padding)/2) 0;
      }
      .info {
        font-size: .8rem;
      }
      bkj-field {
        --fieldFont: var(--regularFont);
        --labelFont: var(--headingFont);
        --labelColor: var(--color);
        --inputColor: var(--primary);
        --inputBC: var(--bgColor);
        --fieldFocusOutline: var(--secondary);
      }
      bkj-button {
        --buttonBC: var(--primary);
        --buttonFocusOutline: var(--secondary);
        --buttonHoverFC: var(--secondary);
        --buttonFC: var(--color);
      }
      bkj-button[flat] {
        --buttonFocusOutline: transparent;
        --buttonHoverFC: var(--primary);
        --buttonHoverBC: var(--secondary);
        --buttonFC: var(--color);
      }
    `];
    }
    render() {
        return html `
      <article class="flex content-center max-w">
        <form class="flex-col">
          <bkj-field type="email" label=${translate("LOGIN.EMAIL")}></bkj-field>
          <bkj-field type="password" label=${translate("LOGIN.PASSWORD")}></bkj-field>
          <section id="action" class="flex-col content-center">
            <section class='flex content-around max-w'>
              <bkj-button @click=${this.handleSignIn}>${translate("LOGIN.SIGNIN")} !</bkj-button>
            </section>
          </section>
        </form>
      </article>
    `;
    }
};
__decorate([
    query("bkj-field[type='email']")
], SigninPage.prototype, "$email", void 0);
__decorate([
    query("bkj-field[type='password']")
], SigninPage.prototype, "$password", void 0);
SigninPage = __decorate([
    customElement('signin-page'),
    Helmet
], SigninPage);

let FavouritesPage = class FavouritesPage extends MobxLitElement {
    get favouritesList() {
        return [...state.favourites].map(id => findWordById(id));
    }
    static get styles() {
        return [flex, headingFont, css `
      :host {
        max-height: max-content;
        display: flex;
        overflow: hidden;
      }
      article {
        background-color: var(--bgColorContrasted);
        padding: var(--padding);
        border-radius: var(--radius);
      }
    `];
    }
    render() {
        return html `
      <words-list .items=${this.favouritesList}></words-list>
    `;
    }
};
FavouritesPage = __decorate([
    customElement('favourites-page'),
    Helmet
], FavouritesPage);

let ProfilePage = class ProfilePage extends MobxLitElement {
    static get styles() {
        return [flex, headingFont, css `
      :host {
        max-height: max-content;
        display: flex;
        overflow: hidden;
      }
      article {
        background-color: var(--bgColorContrasted);
        padding: var(--padding);
        border-radius: var(--radius);
      }
    `];
    }
    render() {
        return html `
      
    `;
    }
};
ProfilePage = __decorate([
    customElement('profile-page'),
    Helmet
], ProfilePage);

const footer = document.querySelector('footer');
const outlet = document.getElementById('outlet');
const router = new Router(outlet);
router.setRoutes([{
        path: '/',
        children: [
            { path: '', component: 'home-page', action: () => { state.setPage('home'); footer.classList.remove("hidden"); } },
            { path: '/search', component: 'search-page', action: () => { state.setPage('search'); /* footer.classList.add("hidden") */ } },
            { path: '/about', component: 'about-page', action: () => { state.setPage('about'); } },
            { path: '/word/:id', component: 'word-page', action: () => { state.setPage('word'); } },
            { path: '/hanja/:id', component: 'hanja-page', action: () => { state.setPage('hanja'); } },
            { path: '/login', component: 'login-page', action: () => { state.setPage('login'); } },
            { path: '/signin', component: 'signin-page', action: () => { state.setPage('signin'); } },
            { path: '/favourites', component: 'favourites-page', action: () => { state.setPage('favourites'); } },
            { path: '/profile', component: 'profile-page', action: () => { state.setPage('profile'); } },
        ]
    }]);
function putOnYourHelmet(name) {
    const base = "📗 Memoja |";
    document.title = `${base} ${name}`;
}
addEventListener('helmet', (e) => {
    e.stopImmediatePropagation();
    switch (e.detail) {
        case 'Home':
            putOnYourHelmet('Home');
            break;
        case 'Search':
            putOnYourHelmet('Search');
            break;
        case 'About':
            putOnYourHelmet('About');
            break;
        case 'Word':
            putOnYourHelmet('Word');
            break;
        case 'Hanja':
            putOnYourHelmet('Hanja');
            break;
        case 'Login':
            putOnYourHelmet('Login');
            break;
        case 'Signin':
            putOnYourHelmet('Signin');
            break;
        case 'Favourites':
            putOnYourHelmet('Favourites');
            break;
        case 'Profile':
            putOnYourHelmet('Profile');
            break;
    }
});

globalThis.bkj = { iconProvider: { local: '/assets/images/' } };

/*!
 * Hanzi Writer v2.3.0
 * https://chanind.github.io/hanzi-writer
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["HanziWriter"] = factory();
	else
		root["HanziWriter"] = factory();
})(typeof self !== 'undefined' ? self : undefined, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 9);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {
/* WEBPACK VAR INJECTION */(function(global) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function emptyFunc() {}

var performanceNow = global.performance && function () {
  return global.performance.now();
} || function () {
  return Date.now();
};
var requestAnimationFrame = global.requestAnimationFrame || function (callback) {
  return setTimeout(function () {
    return callback(performanceNow());
  }, 1000 / 60);
};
var cancelAnimationFrame = global.cancelAnimationFrame || clearTimeout;

// Object.assign polyfill, because IE :/
var _assign = function _assign(target) {
  var overrideTarget = Object(target);

  for (var _len = arguments.length, overrides = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    overrides[_key - 1] = arguments[_key];
  }

  overrides.forEach(function (override) {
    if (override != null) {
      for (var key in override) {
        if (Object.prototype.hasOwnProperty.call(override, key)) {
          overrideTarget[key] = override[key];
        }
      }
    }
  });
  return overrideTarget;
};

var assign = Object.assign || _assign;

var arrLast = function arrLast(arr) {
  return arr[arr.length - 1];
};

function copyAndMergeDeep(base, override) {
  var output = assign({}, base);
  for (var key in override) {
    // eslint-disable-line guard-for-in
    // skipping hasOwnProperty check for performance reasons - we shouldn't be passing any objects
    // in here that aren't plain objects anyway and this is a hot code path
    var baseVal = base[key];
    var overrideVal = override[key];
    if (baseVal === overrideVal) continue; // eslint-disable-line no-continue
    if (baseVal && overrideVal && (typeof baseVal === 'undefined' ? 'undefined' : _typeof(baseVal)) === 'object' && (typeof overrideVal === 'undefined' ? 'undefined' : _typeof(overrideVal)) === 'object' && !Array.isArray(overrideVal)) {
      output[key] = copyAndMergeDeep(baseVal, overrideVal);
    } else {
      output[key] = overrideVal;
    }
  }
  return output;
}

function inflate(scope, obj) {
  var parts = scope.split('.');
  var final = {};
  var current = final;
  for (var i = 0; i < parts.length; i++) {
    var cap = i === parts.length - 1 ? obj : {};
    current[parts[i]] = cap;
    current = cap;
  }
  return final;
}

function callIfExists(callback, arg) {
  if (callback) callback(arg);
  return arg;
}

var count = 0;
function counter() {
  count++;
  return count;
}

function average(arr) {
  var sum = arr.reduce(function (acc, val) {
    return val + acc;
  }, 0);
  return sum / arr.length;
}

function timeout() {
  var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

  return new Promise(function (resolve, reject) {
    setTimeout(resolve, duration);
  });
}

function colorStringToVals(colorString) {
  var normalizedColor = colorString.toUpperCase().trim();
  // based on https://stackoverflow.com/a/21648508
  if (/^#([A-F0-9]{3}){1,2}$/.test(normalizedColor)) {
    var hexParts = normalizedColor.substring(1).split('');
    if (hexParts.length === 3) {
      hexParts = [hexParts[0], hexParts[0], hexParts[1], hexParts[1], hexParts[2], hexParts[2]];
    }
    var hexStr = '' + hexParts.join('');
    return {
      r: parseInt(hexStr.slice(0, 2), 16),
      g: parseInt(hexStr.slice(2, 4), 16),
      b: parseInt(hexStr.slice(4, 6), 16),
      a: 1
    };
  }
  var rgbMatch = normalizedColor.match(/^RGBA?\((\d+)\s*,\s*(\d+)\s*,\s*(\d+)(?:\s*,\s*(\d*\.?\d+))?\)$/);
  if (rgbMatch) {
    return {
      r: parseInt(rgbMatch[1], 10),
      g: parseInt(rgbMatch[2], 10),
      b: parseInt(rgbMatch[3], 10),
      a: parseFloat(rgbMatch[4] || 1, 10)
    };
  }
  throw new Error('Invalid color: ' + colorString);
}

var trim = function trim(string) {
  return string.replace(/^\s+/, '').replace(/\s+$/, '');
};

// return a new array-like object with int keys where each key is item
// ex: objRepeat({x: 8}, 3) === {0: {x: 8}, 1: {x: 8}, 2: {x: 8}}
var objRepeat = function objRepeat(item, times) {
  var obj = {};
  for (var i = 0; i < times; i++) {
    obj[i] = item;
  }
  return obj;
};

var ua = global.navigator && global.navigator.userAgent || '';
var isMsBrowser = ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;

module.exports = {
  _assign: _assign,
  arrLast: arrLast,
  assign: assign,
  average: average,
  callIfExists: callIfExists,
  cancelAnimationFrame: cancelAnimationFrame,
  colorStringToVals: colorStringToVals,
  copyAndMergeDeep: copyAndMergeDeep,
  counter: counter,
  emptyFunc: emptyFunc,
  inflate: inflate,
  objRepeat: objRepeat,
  performanceNow: performanceNow,
  requestAnimationFrame: requestAnimationFrame,
  timeout: timeout,
  trim: trim,
  isMsBrowser: isMsBrowser
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)));

/***/ }),
/* 1 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {


var _require = __webpack_require__(0),
    average = _require.average,
    arrLast = _require.arrLast;

var subtract = function subtract(p1, p2) {
  return { x: p1.x - p2.x, y: p1.y - p2.y };
};
var magnitude = function magnitude(point) {
  return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));
};
var distance = function distance(point1, point2) {
  return magnitude(subtract(point1, point2));
};
var equals = function equals(point1, point2) {
  return point1.x === point2.x && point1.y === point2.y;
};
var round = function round(point) {
  var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

  var multiplier = precision * 10;
  return {
    x: Math.round(multiplier * point.x) / multiplier,
    y: Math.round(multiplier * point.y) / multiplier
  };
};

var length = function length(points) {
  var lastPoint = points[0];
  var pointsSansFirst = points.slice(1);
  return pointsSansFirst.reduce(function (acc, point) {
    var dist = distance(point, lastPoint);
    lastPoint = point;
    return acc + dist;
  }, 0);
};

var cosineSimilarity = function cosineSimilarity(point1, point2) {
  var rawDotProduct = point1.x * point2.x + point1.y * point2.y;
  return rawDotProduct / magnitude(point1) / magnitude(point2);
};

// return a new point, p3, which is on the same line as p1 and p2, but distance away
// from p2. p1, p2, p3 will always lie on the line in that order
var _extendPointOnLine = function _extendPointOnLine(p1, p2, dist) {
  var vect = subtract(p2, p1);
  var norm = dist / magnitude(vect);
  return { x: p2.x + norm * vect.x, y: p2.y + norm * vect.y };
};

// based on http://www.kr.tuwien.ac.at/staff/eiter/et-archive/cdtr9464.pdf
var frechetDist = function frechetDist(curve1, curve2) {
  var results = [];
  for (var i = 0; i < curve1.length; i++) {
    results.push([]);
    for (var j = 0; j < curve2.length; j++) {
      results[i].push(-1);
    }
  }

  var recursiveCalc = function recursiveCalc(i, j) {
    if (results[i][j] > -1) return results[i][j];
    if (i === 0 && j === 0) {
      results[i][j] = distance(curve1[0], curve2[0]);
    } else if (i > 0 && j === 0) {
      results[i][j] = Math.max(recursiveCalc(i - 1, 0), distance(curve1[i], curve2[0]));
    } else if (i === 0 && j > 0) {
      results[i][j] = Math.max(recursiveCalc(0, j - 1), distance(curve1[0], curve2[j]));
    } else if (i > 0 && j > 0) {
      results[i][j] = Math.max(Math.min(recursiveCalc(i - 1, j), recursiveCalc(i - 1, j - 1), recursiveCalc(i, j - 1)), distance(curve1[i], curve2[j]));
    } else {
      results[i][j] = Infinity;
    }
    return results[i][j];
  };

  return recursiveCalc(curve1.length - 1, curve2.length - 1);
};

// break up long segments in the curve into smaller segments of len maxLen or smaller
var subdivideCurve = function subdivideCurve(curve) {
  var maxLen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.05;

  var newCurve = curve.slice(0, 1);
  curve.slice(1).forEach(function (point) {
    var prevPoint = newCurve[newCurve.length - 1];
    var segLen = distance(point, prevPoint);
    if (segLen > maxLen) {
      var numNewPoints = Math.ceil(segLen / maxLen);
      var newSegLen = segLen / numNewPoints;
      for (var i = 0; i < numNewPoints; i++) {
        newCurve.push(_extendPointOnLine(point, prevPoint, -1 * newSegLen * (i + 1)));
      }
    } else {
      newCurve.push(point);
    }
  });
  return newCurve;
};

// redraw the curve using numPoints equally spaced out along the length of the curve
var outlineCurve = function outlineCurve(curve) {
  var numPoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;

  var curveLen = length(curve);
  var segmentLen = curveLen / (numPoints - 1);
  var outlinePoints = [curve[0]];
  var endPoint = arrLast(curve);
  var remainingCurvePoints = curve.slice(1);
  for (var i = 0; i < numPoints - 2; i++) {
    var lastPoint = arrLast(outlinePoints);
    var remainingDist = segmentLen;
    var outlinePointFound = false;
    while (!outlinePointFound) {
      var nextPointDist = distance(lastPoint, remainingCurvePoints[0]);
      if (nextPointDist < remainingDist) {
        remainingDist -= nextPointDist;
        lastPoint = remainingCurvePoints.shift();
      } else {
        var nextPoint = _extendPointOnLine(lastPoint, remainingCurvePoints[0], remainingDist - nextPointDist);
        outlinePoints.push(nextPoint);
        outlinePointFound = true;
      }
    }
  }
  outlinePoints.push(endPoint);
  return outlinePoints;
};

// translate and scale from https://en.wikipedia.org/wiki/Procrustes_analysis
var normalizeCurve = function normalizeCurve(curve) {
  var outlinedCurve = outlineCurve(curve);
  var meanX = average(outlinedCurve.map(function (point) {
    return point.x;
  }));
  var meanY = average(outlinedCurve.map(function (point) {
    return point.y;
  }));
  var mean = { x: meanX, y: meanY };
  var translatedCurve = outlinedCurve.map(function (point) {
    return subtract(point, mean);
  });
  var scale = Math.sqrt(average([Math.pow(translatedCurve[0].x, 2) + Math.pow(translatedCurve[0].y, 2), Math.pow(arrLast(translatedCurve).x, 2) + Math.pow(arrLast(translatedCurve).y, 2)]));
  var scaledCurve = translatedCurve.map(function (point) {
    return { x: point.x / scale, y: point.y / scale };
  });
  return subdivideCurve(scaledCurve);
};

// rotate around the origin
var rotate = function rotate(curve, theta) {
  return curve.map(function (point) {
    return {
      x: Math.cos(theta) * point.x - Math.sin(theta) * point.y,
      y: Math.sin(theta) * point.x + Math.cos(theta) * point.y
    };
  });
};

// remove intermediate points that are on the same line as the points to either side
var _filterParallelPoints = function _filterParallelPoints(points) {
  if (points.length < 3) return points;
  var filteredPoints = [points[0], points[1]];
  points.slice(2).forEach(function (point, i) {
    var numFilteredPoints = filteredPoints.length;
    var curVect = subtract(point, filteredPoints[numFilteredPoints - 1]);
    var prevVect = subtract(filteredPoints[numFilteredPoints - 1], filteredPoints[numFilteredPoints - 2]);
    // this is the z coord of the cross-product. If this is 0 then they're parallel
    var isParallel = curVect.y * prevVect.x - curVect.x * prevVect.y === 0;
    if (isParallel) {
      filteredPoints.pop();
    }
    filteredPoints.push(point);
  });
  return filteredPoints;
};

function getPathString(points) {
  var close = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var start = round(points[0]);
  var remainingPoints = points.slice(1);
  var pathString = 'M ' + start.x + ' ' + start.y;
  remainingPoints.forEach(function (point) {
    var roundedPoint = round(point);
    pathString += ' L ' + roundedPoint.x + ' ' + roundedPoint.y;
  });
  if (close) pathString += 'Z';
  return pathString;
}

// take points on a path and move their start point backwards by distance
var extendStart = function extendStart(points, dist) {
  var filteredPoints = _filterParallelPoints(points);
  if (filteredPoints.length < 2) return filteredPoints;
  var p1 = filteredPoints[1];
  var p2 = filteredPoints[0];
  var newStart = _extendPointOnLine(p1, p2, dist);
  var extendedPoints = filteredPoints.slice(1);
  extendedPoints.unshift(newStart);
  return extendedPoints;
};

module.exports = {
  round: round,
  equals: equals,
  distance: distance,
  getPathString: getPathString,
  frechetDist: frechetDist,
  length: length,
  rotate: rotate,
  subtract: subtract,
  extendStart: extendStart,
  cosineSimilarity: cosineSimilarity,
  outlineCurve: outlineCurve,
  _extendPointOnLine: _extendPointOnLine,
  _filterParallelPoints: _filterParallelPoints,
  subdivideCurve: subdivideCurve,
  normalizeCurve: normalizeCurve
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {
/* WEBPACK VAR INJECTION */(function(global) {

function createElm(elmType) {
  return global.document.createElementNS('http://www.w3.org/2000/svg', elmType);
}

function attr(elm, name, value) {
  elm.setAttributeNS(null, name, value);
}

function attrs(elm, attrsMap) {
  Object.keys(attrsMap).forEach(function (attrName) {
    return attr(elm, attrName, attrsMap[attrName]);
  });
}

// inspired by https://talk.observablehq.com/t/hanzi-writer-renders-incorrectly-inside-an-observable-notebook-on-a-mobile-browser/1898
function urlIdRef(id) {
  var prefix = '';
  if (global.location && global.location.href) {
    prefix = global.location.href.replace(/#[^#]*$/, '');
  }
  return 'url(' + prefix + '#' + id + ')';
}

function removeElm(elm) {
  if (elm) elm.parentNode.removeChild(elm);
}

module.exports = { createElm: createElm, attrs: attrs, attr: attr, removeElm: removeElm, urlIdRef: urlIdRef };
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)));

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {


function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Mutation = __webpack_require__(5);

var _require = __webpack_require__(0),
    objRepeat = _require.objRepeat;

var showStrokes = function showStrokes(charName, character, duration) {
  return [new Mutation('character.' + charName + '.strokes', objRepeat({ opacity: 1, displayPortion: 1 }, character.strokes.length), { duration: duration, force: true })];
};

var showCharacter = function showCharacter(charName, character, duration) {
  return [new Mutation('character.' + charName, {
    opacity: 1,
    strokes: objRepeat({ opacity: 1, displayPortion: 1 }, character.strokes.length)
  }, { duration: duration, force: true })];
};

var hideCharacter = function hideCharacter(charName, character, duration) {
  return [new Mutation('character.' + charName + '.opacity', 0, { duration: duration, force: true })].concat(showStrokes(charName, character, 0));
};

var updateColor = function updateColor(colorName, colorVal, duration) {
  return [new Mutation('options.' + colorName, colorVal, { duration: duration })];
};

var highlightStroke = function highlightStroke(stroke, color, speed) {
  var strokeNum = stroke.strokeNum;
  var duration = (stroke.getLength() + 600) / (3 * speed);
  return [new Mutation('character.highlight.strokeColor', color), new Mutation('character.highlight', {
    opacity: 1,
    strokes: _defineProperty({}, strokeNum, {
      displayPortion: 0,
      opacity: 0
    })
  }), new Mutation('character.highlight.strokes.' + strokeNum, {
    displayPortion: 1,
    opacity: 1
  }, { duration: duration }), new Mutation('character.highlight.strokes.' + strokeNum + '.opacity', 0, { duration: duration })];
};

var animateStroke = function animateStroke(charName, stroke, speed) {
  var strokeNum = stroke.strokeNum;
  var duration = (stroke.getLength() + 600) / (3 * speed);
  return [new Mutation('character.' + charName, {
    opacity: 1,
    strokes: _defineProperty({}, strokeNum, {
      displayPortion: 0,
      opacity: 1
    })
  }), new Mutation('character.' + charName + '.strokes.' + strokeNum + '.displayPortion', 1, { duration: duration })];
};

var animateSingleStroke = function animateSingleStroke(charName, character, strokeNum, speed) {
  var mutationStateFunc = function mutationStateFunc(state) {
    var curCharState = state.character[charName];
    var mutationState = {
      opacity: 1,
      strokes: {}
    };
    for (var i = 0; i < character.strokes.length; i++) {
      mutationState.strokes[i] = {
        opacity: curCharState.opacity * curCharState.strokes[i].opacity
      };
    }
    return mutationState;
  };
  return [new Mutation('character.' + charName, mutationStateFunc)].concat(animateStroke(charName, character.strokes[strokeNum], speed));
};

var showStroke = function showStroke(charName, strokeNum, duration) {
  return [new Mutation('character.' + charName + '.strokes.' + strokeNum, {
    displayPortion: 1,
    opacity: 1
  }, { duration: duration, force: true })];
};

var animateCharacter = function animateCharacter(charName, character, fadeDuration, speed, delayBetweenStrokes) {
  var mutations = hideCharacter(charName, character, fadeDuration);
  mutations = mutations.concat(showStrokes(charName, character, 0));
  mutations.push(new Mutation('character.' + charName, {
    opacity: 1,
    strokes: objRepeat({ opacity: 0 }, character.strokes.length)
  }, { force: true }));
  character.strokes.forEach(function (stroke, i) {
    if (i > 0) mutations.push(new Mutation.Delay(delayBetweenStrokes));
    mutations = mutations.concat(animateStroke(charName, stroke, speed));
  });
  return mutations;
};

var animateCharacterLoop = function animateCharacterLoop(charName, character, fadeDuration, speed, delayBetweenStrokes, delayBetweenLoops) {
  var mutations = animateCharacter(charName, character, fadeDuration, speed, delayBetweenStrokes);
  mutations.push(new Mutation.Delay(delayBetweenLoops));
  return mutations;
};

module.exports = {
  showStrokes: showStrokes,
  showCharacter: showCharacter,
  hideCharacter: hideCharacter,
  highlightStroke: highlightStroke,
  animateCharacter: animateCharacter,
  animateCharacterLoop: animateCharacterLoop,
  animateStroke: animateStroke,
  animateSingleStroke: animateSingleStroke,
  showStroke: showStroke,
  updateColor: updateColor
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {


var _require = __webpack_require__(0),
    inflate = _require.inflate,
    performanceNow = _require.performanceNow,
    requestAnimationFrame = _require.requestAnimationFrame,
    cancelAnimationFrame = _require.cancelAnimationFrame;

// ------ Mutation class --------

var getPartialValues = function getPartialValues(startValues, endValues, progress) {
  var target = {};
  for (var key in endValues) {
    // eslint-disable-line guard-for-in
    // skipping hasOwnProperty check for performance reasons - we shouldn't be passing any objects
    // in here that aren't plain objects anyway and this is a hot code path
    var endValue = endValues[key];
    var startValue = startValues[key];
    if (endValue >= 0) {
      target[key] = progress * (endValue - startValue) + startValue;
    } else {
      target[key] = getPartialValues(startValue, endValue, progress);
    }
  }
  return target;
};

var isAlreadyAtEnd = function isAlreadyAtEnd(startValues, endValues) {
  for (var key in endValues) {
    if (endValues.hasOwnProperty(key)) {
      var endValue = endValues[key];
      var startValue = startValues[key];
      if (endValue >= 0) {
        if (endValue !== startValue) return false;
      } else if (!isAlreadyAtEnd(startValue, endValue)) {
        return false;
      }
    }
  }
  return true;
};

// from https://github.com/maxwellito/vivus
var ease = function ease(x) {
  return -Math.cos(x * Math.PI) / 2 + 0.5;
};

function Mutation(scope, valuesOrCallable) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  this.scope = scope;
  this._valuesOrCallable = valuesOrCallable;
  this._duration = options.duration || 0;
  this._force = options.force;
  this._pausedDuration = 0;
  this._tickBound = this._tick.bind(this);
  this._startPauseTime = null;
}

Mutation.prototype.run = function (renderState) {
  var _this = this;

  if (!this._values) this._inflateValues(renderState);
  if (this._duration === 0) renderState.updateState(this._values);
  if (this._duration === 0 || isAlreadyAtEnd(renderState.state, this._values)) {
    return Promise.resolve();
  }
  this._renderState = renderState;
  this._startState = renderState.state;
  this._startTime = performanceNow();
  this._frameHandle = requestAnimationFrame(this._tickBound);
  return new Promise(function (resolve) {
    _this._resolve = resolve;
  });
};

Mutation.prototype.pause = function () {
  if (this._startPauseTime !== null) return;
  if (this._frameHandle) cancelAnimationFrame(this._frameHandle);
  this._startPauseTime = performanceNow();
};

Mutation.prototype.resume = function () {
  if (this._startPauseTime === null) return;
  this._frameHandle = requestAnimationFrame(this._tickBound);
  this._pausedDuration += performanceNow() - this._startPauseTime;
  this._startPauseTime = null;
};

Mutation.prototype._tick = function (timing) {
  if (this._startPauseTime !== null) return;
  var progress = Math.min(1, (timing - this._startTime - this._pausedDuration) / this._duration);
  if (progress === 1) {
    this._renderState.updateState(this._values);
    this._frameHandle = null;
    this.cancel(this._renderState);
  } else {
    var easedProgress = ease(progress);
    this._renderState.updateState(getPartialValues(this._startState, this._values, easedProgress));
    this._frameHandle = requestAnimationFrame(this._tickBound);
  }
};

Mutation.prototype._inflateValues = function (renderState) {
  var values = this._valuesOrCallable;
  if (typeof this._valuesOrCallable === 'function') {
    values = this._valuesOrCallable(renderState.state);
  }
  this._values = inflate(this.scope, values);
};

Mutation.prototype.cancel = function (renderState) {
  if (this._resolve) this._resolve();
  this._resolve = null;
  if (this._frameHandle) cancelAnimationFrame(this._frameHandle);
  this._frameHandle = null;
  if (this._force) {
    if (!this._values) this._inflateValues(renderState);
    renderState.updateState(this._values);
  }
};

// ------ Mutation.Delay Class --------

function Delay(duration) {
  this._duration = duration;
  this._startTime = null;
  this._paused = false;
}

Delay.prototype.pause = function () {
  if (this._paused) return;
  // to pause, clear the timeout and rewrite this._duration with whatever time is remaining
  var elapsedDelay = performanceNow() - this._startTime;
  this._duration = Math.max(0, this._duration - elapsedDelay);
  clearTimeout(this._timeout);
  this._paused = true;
};

Delay.prototype.resume = function () {
  var _this2 = this;

  if (!this._paused) return;
  this._startTime = performanceNow();
  this._timeout = setTimeout(function () {
    return _this2.cancel();
  }, this._duration);
  this._paused = false;
};

Delay.prototype.run = function () {
  var _this3 = this;

  var timeoutPromise = new Promise(function (resolve) {
    _this3._resolve = resolve;
  });
  this._startTime = performanceNow();
  this._timeout = setTimeout(function () {
    return _this3.cancel();
  }, this._duration);
  return timeoutPromise;
};

Delay.prototype.cancel = function () {
  clearTimeout(this._timeout);
  if (this._resolve) this._resolve();
  this._resolve = false;
};

Mutation.Delay = Delay;

// -------------------------------------


module.exports = Mutation;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {


function StrokeRendererBase() {}

StrokeRendererBase.prototype._getStrokeDashoffset = function (displayPortion) {
  return this._pathLength * 0.999 * (1 - displayPortion);
};

StrokeRendererBase.prototype._getColor = function (_ref) {
  var strokeColor = _ref.strokeColor,
      radicalColor = _ref.radicalColor;

  return radicalColor && this._stroke.isInRadical ? radicalColor : strokeColor;
};

module.exports = StrokeRendererBase;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {
/* WEBPACK VAR INJECTION */(function(global) {

function RenderTargetBase() {}

RenderTargetBase.prototype.addPointerStartListener = function (callback) {
  var _this = this;

  this.node.addEventListener('mousedown', function (evt) {
    callback(_this._eventify(evt, _this._getMousePoint));
  });
  this.node.addEventListener('touchstart', function (evt) {
    callback(_this._eventify(evt, _this._getTouchPoint));
  });
};

RenderTargetBase.prototype.addPointerMoveListener = function (callback) {
  var _this2 = this;

  this.node.addEventListener('mousemove', function (evt) {
    callback(_this2._eventify(evt, _this2._getMousePoint));
  });
  this.node.addEventListener('touchmove', function (evt) {
    callback(_this2._eventify(evt, _this2._getTouchPoint));
  });
};

RenderTargetBase.prototype.addPointerEndListener = function (callback) {
  // TODO: find a way to not need global listeners
  global.document.addEventListener('mouseup', callback);
  global.document.addEventListener('touchend', callback);
};

RenderTargetBase.prototype.getBoundingClientRect = function () {
  return this.node.getBoundingClientRect();
};

RenderTargetBase.prototype._eventify = function (evt, pointFunc) {
  var _this3 = this;

  return {
    getPoint: function getPoint() {
      return pointFunc.call(_this3, evt);
    },
    preventDefault: function preventDefault() {
      return evt.preventDefault();
    }
  };
};

RenderTargetBase.prototype._getMousePoint = function (evt) {
  var box = this.getBoundingClientRect();
  var x = evt.clientX - box.left;
  var y = evt.clientY - box.top;
  return { x: x, y: y };
};

RenderTargetBase.prototype._getTouchPoint = function (evt) {
  var box = this.getBoundingClientRect();
  var x = evt.touches[0].clientX - box.left;
  var y = evt.touches[0].clientY - box.top;
  return { x: x, y: y };
};

module.exports = RenderTargetBase;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)));

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {


function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

var drawPath = function drawPath(ctx, points) {
  ctx.beginPath();
  var start = points[0];
  var remainingPoints = points.slice(1);
  ctx.moveTo(start.x, start.y);
  remainingPoints.forEach(function (point) {
    ctx.lineTo(point.x, point.y);
  });
  ctx.stroke();
};

// break a path string into a series of canvas path commands
// only works with the subset of SVG paths used by MakeMeAHanzi data
var pathStringToCanvas = function pathStringToCanvas(pathString) {
  var pathParts = pathString.split(/(^|\s+)(?=[A-Z])/).filter(function (part) {
    return part !== ' ';
  });
  var commands = [function (ctx) {
    return ctx.beginPath();
  }];
  pathParts.forEach(function (part) {
    var _part$split = part.split(/\s+/),
        _part$split2 = _toArray(_part$split),
        cmd = _part$split2[0],
        rawParams = _part$split2.slice(1);

    var params = rawParams.map(function (param) {
      return parseFloat(param);
    });
    if (cmd === 'M') {
      commands.push(function (ctx) {
        return ctx.moveTo.apply(ctx, params);
      });
    } else if (cmd === 'L') {
      commands.push(function (ctx) {
        return ctx.lineTo.apply(ctx, params);
      });
    } else if (cmd === 'C') {
      commands.push(function (ctx) {
        return ctx.bezierCurveTo.apply(ctx, params);
      });
    } else if (cmd === 'Q') {
      commands.push(function (ctx) {
        return ctx.quadraticCurveTo.apply(ctx, params);
      });
    } else ;
  });
  return function (ctx) {
    return commands.forEach(function (cmd) {
      return cmd(ctx);
    });
  };
};

module.exports = { drawPath: drawPath, pathStringToCanvas: pathStringToCanvas };

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {


var RenderState = __webpack_require__(10);
var parseCharData = __webpack_require__(11);
var Positioner = __webpack_require__(14);
var Quiz = __webpack_require__(15);
var svgRenderer = __webpack_require__(19);
var canvasRenderer = __webpack_require__(25);
var defaultCharDataLoader = __webpack_require__(31);
var LoadingManager = __webpack_require__(32);
var characterActions = __webpack_require__(4);

var _require = __webpack_require__(0),
    assign = _require.assign,
    callIfExists = _require.callIfExists,
    trim = _require.trim,
    colorStringToVals = _require.colorStringToVals;

var defaultOptions = {
  charDataLoader: defaultCharDataLoader,
  onLoadCharDataError: null,
  onLoadCharDataSuccess: null,
  showOutline: true,
  showCharacter: true,
  renderer: 'svg',

  // positioning options

  width: null,
  height: null,
  padding: 20,

  // animation options

  strokeAnimationSpeed: 1,
  strokeFadeDuration: 400,
  strokeHighlightDuration: 200,
  strokeHighlightSpeed: 2,
  delayBetweenStrokes: 1000,
  delayBetweenLoops: 2000,

  // colors

  strokeColor: '#555',
  radicalColor: null,
  highlightColor: '#AAF',
  outlineColor: '#DDD',
  drawingColor: '#333',

  // quiz options

  leniency: 1,
  showHintAfterMisses: 3,
  highlightOnComplete: true,
  highlightCompleteColor: null,

  // undocumented obscure options

  drawingFadeDuration: 300,
  drawingWidth: 4,
  strokeWidth: 2,
  outlineWidth: 2,
  rendererOverride: {}
};

function HanziWriter() {
  if (arguments.length > 0) {
    var character = void 0;
    var options = {};
    var element = arguments.length <= 0 ? undefined : arguments[0];
    if (arguments.length > 1) {
      if (typeof (arguments.length <= 1 ? undefined : arguments[1]) === 'string') {
        // eslint-disable-next-line
        console.warn('Using new HanziWriter() to set a character is deprecated. Use HanziWriter.create() instead');
        character = arguments.length <= 1 ? undefined : arguments[1];
        options = (arguments.length <= 2 ? undefined : arguments[2]) || {};
      } else {
        options = arguments.length <= 1 ? undefined : arguments[1];
      }
    }
    this._init(element, options);
    if (character) {
      this.setCharacter(character);
    }
  }
}

// ------ public API ------ //

HanziWriter.prototype.showCharacter = function () {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._options.showCharacter = true;
  return this._withData(function () {
    return _this._renderState.run(characterActions.showCharacter('main', _this._character, typeof options.duration === 'number' ? options.duration : _this._options.strokeFadeDuration)).then(function (res) {
      return callIfExists(options.onComplete, res);
    });
  });
};
HanziWriter.prototype.hideCharacter = function () {
  var _this2 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._options.showCharacter = false;
  return this._withData(function () {
    return _this2._renderState.run(characterActions.hideCharacter('main', _this2._character, typeof options.duration === 'number' ? options.duration : _this2._options.strokeFadeDuration)).then(function (res) {
      return callIfExists(options.onComplete, res);
    });
  });
};
HanziWriter.prototype.animateCharacter = function () {
  var _this3 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.cancelQuiz();
  return this._withData(function () {
    return _this3._renderState.run(characterActions.animateCharacter('main', _this3._character, _this3._options.strokeFadeDuration, _this3._options.strokeAnimationSpeed, _this3._options.delayBetweenStrokes)).then(function (res) {
      return callIfExists(options.onComplete, res);
    });
  });
};
HanziWriter.prototype.animateStroke = function (strokeNum) {
  var _this4 = this;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  this.cancelQuiz();
  return this._withData(function () {
    return _this4._renderState.run(characterActions.animateSingleStroke('main', _this4._character, strokeNum, _this4._options.strokeAnimationSpeed)).then(function (res) {
      return callIfExists(options.onComplete, res);
    });
  });
};
HanziWriter.prototype.highlightStroke = function (strokeNum) {
  var _this5 = this;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return this._withData(function () {
    return _this5._renderState.run(characterActions.highlightStroke(_this5._character.strokes[strokeNum], _this5._options.highlightColor, _this5._options.strokeHighlightSpeed)).then(function (res) {
      return callIfExists(options.onComplete, res);
    });
  });
};
HanziWriter.prototype.loopCharacterAnimation = function () {
  var _this6 = this;

  this.cancelQuiz();
  return this._withData(function () {
    return _this6._renderState.run(characterActions.animateCharacterLoop('main', _this6._character, _this6._options.strokeFadeDuration, _this6._options.strokeAnimationSpeed, _this6._options.delayBetweenStrokes, _this6._options.delayBetweenLoops), { loop: true });
  });
};

HanziWriter.prototype.pauseAnimation = function () {
  var _this7 = this;

  return this._withData(function () {
    return _this7._renderState.pauseAll();
  });
};

HanziWriter.prototype.resumeAnimation = function () {
  var _this8 = this;

  return this._withData(function () {
    return _this8._renderState.resumeAll();
  });
};

HanziWriter.prototype.showOutline = function () {
  var _this9 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._options.showOutline = true;
  return this._withData(function () {
    return _this9._renderState.run(characterActions.showCharacter('outline', _this9._character, typeof options.duration === 'number' ? options.duration : _this9._options.strokeFadeDuration)).then(function (res) {
      return callIfExists(options.onComplete, res);
    });
  });
};

HanziWriter.prototype.hideOutline = function () {
  var _this10 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._options.showOutline = false;
  return this._withData(function () {
    return _this10._renderState.run(characterActions.hideCharacter('outline', _this10._character, typeof options.duration === 'number' ? options.duration : _this10._options.strokeFadeDuration)).then(function (res) {
      return callIfExists(options.onComplete, res);
    });
  });
};

HanziWriter.prototype.updateColor = function (colorName, colorVal) {
  var _this11 = this;

  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  return this._withData(function () {
    var duration = typeof options.duration === 'number' ? options.duration : _this11._options.strokeFadeDuration;
    var fixedColorVal = colorVal;
    // If we're removing radical color, tween it to the stroke color
    if (colorName === 'radicalColor' && !colorVal) {
      fixedColorVal = _this11._options.strokeColor;
    }
    var mappedColor = colorStringToVals(fixedColorVal);
    _this11._options[colorName] = colorVal;
    var mutation = characterActions.updateColor(colorName, mappedColor, duration);
    // make sure to set radicalColor back to null after the transition finishes if val == null
    if (colorName === 'radicalColor' && !colorVal) {
      mutation = mutation.concat(characterActions.updateColor(colorName, null, 0));
    }
    return _this11._renderState.run(mutation).then(function (res) {
      return callIfExists(options.onComplete, res);
    });
  });
};

HanziWriter.prototype.quiz = function () {
  var _this12 = this;

  var quizOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._withData(function () {
    _this12.cancelQuiz();
    _this12._quiz = new Quiz(_this12._character, _this12._renderState, _this12._positioner);
    _this12._quiz.startQuiz(assign({}, _this12._options, quizOptions));
  });
};

HanziWriter.prototype.cancelQuiz = function () {
  if (this._quiz) {
    this._quiz.cancel();
    this._quiz = null;
  }
};

HanziWriter.prototype.setCharacter = function (char) {
  var _this13 = this;

  this.cancelQuiz();
  this._char = char;
  if (this._hanziWriterRenderer) this._hanziWriterRenderer.destroy();
  if (this._renderState) this._renderState.cancelAll();
  this._hanziWriterRenderer = null;
  this._withDataPromise = this._loadingManager.loadCharData(char).then(function (pathStrings) {
    if (_this13._loadingManager.loadingFailed) return;

    _this13._character = parseCharData(char, pathStrings);
    _this13._positioner = new Positioner(_this13._options);
    var hanziWriterRenderer = new _this13._renderer.HanziWriterRenderer(_this13._character, _this13._positioner);
    _this13._hanziWriterRenderer = hanziWriterRenderer;
    _this13._renderState = new RenderState(_this13._character, _this13._options, function (nextState) {
      hanziWriterRenderer.render(nextState);
    });
    _this13._hanziWriterRenderer.mount(_this13.target);
    _this13._hanziWriterRenderer.render(_this13._renderState.state);
  });
  return this._withDataPromise;
};

// ------------- //

HanziWriter.prototype._init = function (element, options) {
  var renderer = options.renderer === 'canvas' ? canvasRenderer : svgRenderer;
  var rendererOverride = options.rendererOverride || {};
  this._renderer = {
    HanziWriterRenderer: rendererOverride.HanziWriterRenderer || renderer.HanziWriterRenderer,
    createRenderTarget: rendererOverride.createRenderTarget || renderer.createRenderTarget
  };
  // wechat miniprogram component needs direct access to the render target, so this is public
  this.target = this._renderer.createRenderTarget(element, options.width, options.height);
  this._options = this._assignOptions(options);
  this._loadingManager = new LoadingManager(this._options);
  this._setupListeners();
  this._quiz = null;
  return this;
};

HanziWriter.prototype._assignOptions = function (options) {
  var mergedOptions = assign({}, defaultOptions, options);

  // backfill strokeAnimationSpeed if deprecated strokeAnimationDuration is provided instead
  if (options.strokeAnimationDuration && !options.strokeAnimationSpeed) {
    mergedOptions.strokeAnimationSpeed = 500 / mergedOptions.strokeAnimationDuration;
  }
  if (options.strokeHighlightDuration && !options.strokeHighlightSpeed) {
    mergedOptions.strokeHighlightSpeed = 500 / mergedOptions.strokeHighlightDuration;
  }

  if (!options.highlightCompleteColor) {
    mergedOptions.highlightCompleteColor = mergedOptions.highlightColor;
  }

  return this._fillWidthAndHeight(mergedOptions);
};

// returns a new options object with width and height filled in if missing
HanziWriter.prototype._fillWidthAndHeight = function (options) {
  var filledOpts = assign({}, options);
  if (filledOpts.width && !filledOpts.height) {
    filledOpts.height = filledOpts.width;
  } else if (filledOpts.height && !filledOpts.width) {
    filledOpts.width = filledOpts.height;
  } else if (!filledOpts.width && !filledOpts.height) {
    var _target$getBoundingCl = this.target.getBoundingClientRect(),
        width = _target$getBoundingCl.width,
        height = _target$getBoundingCl.height;

    var minDim = Math.min(width, height);
    filledOpts.width = minDim;
    filledOpts.height = minDim;
  }
  return filledOpts;
};

HanziWriter.prototype._withData = function (func) {
  var _this14 = this;

  // if this._loadingManager.loadingFailed, then loading failed before this method was called
  if (this._loadingManager.loadingFailed) {
    throw Error('Failed to load character data. Call setCharacter and try again.');
  }
  return this._withDataPromise.then(function () {
    if (!_this14._loadingManager.loadingFailed) {
      return func();
    }
  });
};

HanziWriter.prototype._setupListeners = function () {
  var _this15 = this;

  this.target.addPointerStartListener(function (evt) {
    if (!_this15._quiz) return;
    evt.preventDefault();
    _this15._forwardToQuiz('startUserStroke', evt.getPoint());
  });
  this.target.addPointerMoveListener(function (evt) {
    if (!_this15._quiz) return;
    evt.preventDefault();
    _this15._forwardToQuiz('continueUserStroke', evt.getPoint());
  });
  this.target.addPointerEndListener(function () {
    return _this15._forwardToQuiz('endUserStroke');
  });
};

HanziWriter.prototype._forwardToQuiz = function (method) {
  var _quiz;

  if (!this._quiz) return;

  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  (_quiz = this._quiz)[method].apply(_quiz, args);
};

// --- Static Public API --- //

HanziWriter.create = function (element, character) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var writer = new HanziWriter(element, options);
  writer.setCharacter(character);
  return writer;
};

var lastLoadingManager = null;
var lastLoadingOptions = null;

HanziWriter.loadCharacterData = function (character) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var loadingManager = void 0;
  if (lastLoadingManager && lastLoadingOptions === options) {
    loadingManager = lastLoadingManager;
  } else {
    loadingManager = new LoadingManager(assign({}, defaultOptions, options));
  }
  lastLoadingManager = loadingManager;
  lastLoadingOptions = options;
  return loadingManager.loadCharData(character);
};

HanziWriter.getScalingTransform = function (width, height) {
  var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

  var positioner = new Positioner({ width: width, height: height, padding: padding });
  return {
    x: positioner.xOffset,
    y: positioner.yOffset,
    scale: positioner.scale,
    transform: trim('\n      translate(' + positioner.xOffset + ', ' + (positioner.height - positioner.yOffset) + ')\n      scale(' + positioner.scale + ', ' + -1 * positioner.scale + ')\n    ').replace(/\s+/g, ' ')
  };
};

module.exports = HanziWriter;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {


var _require = __webpack_require__(0),
    copyAndMergeDeep = _require.copyAndMergeDeep,
    colorStringToVals = _require.colorStringToVals;

function RenderState(character, options, onStateChange) {
  this._onStateChange = onStateChange;
  this._mutationChains = [];
  this.state = {
    options: {
      drawingFadeDuration: options.drawingFadeDuration,
      drawingWidth: options.drawingWidth,
      drawingColor: colorStringToVals(options.drawingColor),
      strokeColor: colorStringToVals(options.strokeColor),
      outlineColor: colorStringToVals(options.outlineColor),
      radicalColor: colorStringToVals(options.radicalColor || options.strokeColor),
      highlightColor: colorStringToVals(options.highlightColor)
    },
    character: {
      main: {
        opacity: options.showCharacter ? 1 : 0,
        strokes: {}
      },
      outline: {
        opacity: options.showOutline ? 1 : 0,
        strokes: {}
      },
      highlight: {
        opacity: 1,
        strokes: {}
      }
    },
    userStrokes: null
  };
  for (var i = 0; i < character.strokes.length; i++) {
    this.state.character.main.strokes[i] = {
      opacity: 1,
      displayPortion: 1
    };
    this.state.character.outline.strokes[i] = {
      opacity: 1,
      displayPortion: 1
    };
    this.state.character.highlight.strokes[i] = {
      opacity: 0,
      displayPortion: 1
    };
  }
}

RenderState.prototype.updateState = function (stateChanges) {
  var nextState = copyAndMergeDeep(this.state, stateChanges);
  this._onStateChange(nextState, this.state);
  this.state = nextState;
};

RenderState.prototype.run = function (mutations) {
  var _this = this;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var scopes = mutations.map(function (mut) {
    return mut.scope;
  }).filter(function (x) {
    return x;
  });
  this.cancelMutations(scopes);
  return new Promise(function (resolve) {
    var mutationChain = {
      _isActive: true,
      _index: 0,
      _resolve: resolve,
      _mutations: mutations,
      _loop: options.loop,
      _scopes: scopes
    };
    _this._mutationChains.push(mutationChain);
    _this._run(mutationChain);
  });
};

RenderState.prototype._run = function (mutationChain) {
  var _this2 = this;

  if (!mutationChain._isActive) return;
  var mutations = mutationChain._mutations;
  if (mutationChain._index >= mutations.length) {
    if (mutationChain._loop) {
      mutationChain._index = 0; // eslint-disable-line no-param-reassign
    } else {
      mutationChain._isActive = false; // eslint-disable-line no-param-reassign
      this._mutationChains = this._mutationChains.filter(function (chain) {
        return chain !== mutationChain;
      });
      // The chain is done - resolve the promise to signal it finished successfully
      mutationChain._resolve({ canceled: false });
      return;
    }
  }

  var activeMutation = mutationChain._mutations[mutationChain._index];
  activeMutation.run(this).then(function () {
    if (mutationChain._isActive) {
      mutationChain._index++; // eslint-disable-line no-param-reassign
      _this2._run(mutationChain);
    }
  });
};

RenderState.prototype._getActiveMutations = function () {
  return this._mutationChains.map(function (chain) {
    return chain._mutations[chain._index];
  });
};

RenderState.prototype.pauseAll = function () {
  this._getActiveMutations().forEach(function (mutation) {
    return mutation.pause();
  });
};

RenderState.prototype.resumeAll = function () {
  this._getActiveMutations().forEach(function (mutation) {
    return mutation.resume();
  });
};

RenderState.prototype.cancelMutations = function (scopes) {
  var _this3 = this;

  this._mutationChains.forEach(function (chain) {
    chain._scopes.forEach(function (chainScope) {
      scopes.forEach(function (scope) {
        if (chainScope.indexOf(scope) >= 0 || scope.indexOf(chainScope) >= 0) {
          _this3._cancelMutationChain(chain);
        }
      });
    });
  });
};

RenderState.prototype.cancelAll = function () {
  this.cancelMutations(['']);
};

RenderState.prototype._cancelMutationChain = function (mutationChain) {
  mutationChain._isActive = false; // eslint-disable-line no-param-reassign
  for (var i = mutationChain._index; i < mutationChain._mutations.length; i++) {
    mutationChain._mutations[i].cancel(this);
  }
  if (mutationChain._resolve) {
    mutationChain._resolve({ canceled: true });
  }
  this._mutationChains = this._mutationChains.filter(function (chain) {
    return chain !== mutationChain;
  });
};

module.exports = RenderState;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {


var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var Stroke = __webpack_require__(12);
var Character = __webpack_require__(13);

var generateStrokes = function generateStrokes(charJson) {
  var isInRadical = function isInRadical(strokeNum) {
    return charJson.radStrokes && charJson.radStrokes.indexOf(strokeNum) >= 0;
  };

  return charJson.strokes.map(function (path, index) {
    var points = charJson.medians[index].map(function (pointData) {
      var _pointData = _slicedToArray(pointData, 2),
          x = _pointData[0],
          y = _pointData[1];

      return { x: x, y: y };
    });
    return new Stroke(path, points, index, isInRadical(index));
  });
};

var parseCharData = function parseCharData(symbol, charJson) {
  var strokes = generateStrokes(charJson);
  return new Character(symbol, strokes);
};

module.exports = parseCharData;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {


var _require = __webpack_require__(2),
    subtract = _require.subtract,
    distance = _require.distance,
    length = _require.length;

function Stroke(path, points, strokeNum) {
  var isInRadical = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  this.path = path;
  this.points = points;
  this.strokeNum = strokeNum;
  this.isInRadical = isInRadical;
}

Stroke.prototype.getStartingPoint = function () {
  return this.points[0];
};

Stroke.prototype.getEndingPoint = function () {
  return this.points[this.points.length - 1];
};

Stroke.prototype.getLength = function () {
  return length(this.points);
};

Stroke.prototype.getVectors = function () {
  var lastPoint = this.points[0];
  var pointsSansFirst = this.points.slice(1);
  return pointsSansFirst.map(function (point) {
    var vector = subtract(point, lastPoint);
    lastPoint = point;
    return vector;
  });
};

Stroke.prototype.getDistance = function (point) {
  var distances = this.points.map(function (strokePoint) {
    return distance(strokePoint, point);
  });
  return Math.min.apply(Math, distances);
};

Stroke.prototype.getAverageDistance = function (points) {
  var _this = this;

  var totalDist = points.reduce(function (acc, point) {
    return acc + _this.getDistance(point);
  }, 0);
  return totalDist / points.length;
};

module.exports = Stroke;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {


function Character(symbol, strokes) {
  this.symbol = symbol;
  this.strokes = strokes;
}

module.exports = Character;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {


// All makemeahanzi characters have the same bounding box
var CHARACTER_BOUNDS = [{ x: 0, y: -124 }, { x: 1024, y: 900 }];

function Positioner(options) {
  this._options = options;
  this.width = options.width;
  this.height = options.height;
  this._calculateScaleAndOffset();
}

Positioner.prototype.convertExternalPoint = function (point) {
  var x = (point.x - this.xOffset) / this.scale;
  var y = (this.height - this.yOffset - point.y) / this.scale;
  return { x: x, y: y };
};

Positioner.prototype._calculateScaleAndOffset = function () {
  var bounds = CHARACTER_BOUNDS;
  var preScaledWidth = bounds[1].x - bounds[0].x;
  var preScaledHeight = bounds[1].y - bounds[0].y;
  var effectiveWidth = this.width - 2 * this._options.padding;
  var effectiveHeight = this.height - 2 * this._options.padding;
  var scaleX = effectiveWidth / preScaledWidth;
  var scaleY = effectiveHeight / preScaledHeight;

  this.scale = Math.min(scaleX, scaleY);

  var xCenteringBuffer = this._options.padding + (effectiveWidth - this.scale * preScaledWidth) / 2;
  var yCenteringBuffer = this._options.padding + (effectiveHeight - this.scale * preScaledHeight) / 2;

  this.xOffset = -1 * bounds[0].x * this.scale + xCenteringBuffer;
  this.yOffset = -1 * bounds[0].y * this.scale + yCenteringBuffer;
};

module.exports = Positioner;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {


var strokeMatches = __webpack_require__(16);
var UserStroke = __webpack_require__(17);

var _require = __webpack_require__(0),
    callIfExists = _require.callIfExists,
    counter = _require.counter;

var quizActions = __webpack_require__(18);
var geometry = __webpack_require__(2);
var characterActions = __webpack_require__(4);

var getDrawnPath = function getDrawnPath(userStroke) {
  return {
    pathString: geometry.getPathString(userStroke.externalPoints),
    points: userStroke.points.map(function (point) {
      return geometry.round(point);
    })
  };
};

function Quiz(character, renderState, positioner) {
  this._character = character;
  this._renderState = renderState;
  this._isActive = false;
  this._positioner = positioner;
}

Quiz.prototype.startQuiz = function (options) {
  this._isActive = true;
  this._options = options;
  this._currentStrokeIndex = 0;
  this._numRecentMistakes = 0;
  this._totalMistakes = 0;
  this._renderState.run(quizActions.startQuiz(this._character, options.strokeFadeDuration));
};

Quiz.prototype.startUserStroke = function (externalPoint) {
  var point = this._positioner.convertExternalPoint(externalPoint);
  if (!this._isActive) return null;
  if (this._userStroke) return this.endUserStroke();
  var strokeId = counter();
  this._userStroke = new UserStroke(strokeId, point, externalPoint);
  this._renderState.run(quizActions.startUserStroke(strokeId, point));
};

Quiz.prototype.continueUserStroke = function (externalPoint) {
  if (!this._userStroke) return;
  var point = this._positioner.convertExternalPoint(externalPoint);
  this._userStroke.appendPoint(point, externalPoint);
  var nextPoints = this._userStroke.points.slice(0);
  this._renderState.run(quizActions.updateUserStroke(this._userStroke.id, nextPoints));
};

Quiz.prototype.endUserStroke = function () {
  if (!this._userStroke) return;

  this._renderState.run(quizActions.removeUserStroke(this._userStroke.id, this._options.drawingFadeDuration));
  // skip single-point strokes
  if (this._userStroke.points.length === 1) {
    this._userStroke = null;
    return;
  }

  var currentStroke = this._getCurrentStroke();
  var isOutlineVisible = this._renderState.state.character.outline.opacity > 0;
  var isMatch = strokeMatches(this._userStroke, this._character, this._currentStrokeIndex, {
    isOutlineVisible: isOutlineVisible,
    leniency: this._options.leniency
  });

  if (isMatch) {
    this._handleSuccess();
  } else {
    this._handleFailure();
    if (this._numRecentMistakes >= this._options.showHintAfterMisses && this._options.showHintAfterMisses !== false) {
      this._renderState.run(quizActions.highlightStroke(currentStroke, this._options.highlightColor, this._options.strokeHighlightSpeed));
    }
  }
  this._userStroke = null;
};

Quiz.prototype.cancel = function () {
  this._isActive = false;
  if (this._userStroke) {
    this._renderState.run(quizActions.removeUserStroke(this._userStroke.id, this._options.drawingFadeDuration));
  }
};

Quiz.prototype._handleSuccess = function () {
  callIfExists(this._options.onCorrectStroke, {
    character: this._character.symbol,
    strokeNum: this._currentStrokeIndex,
    mistakesOnStroke: this._numRecentMistakes,
    totalMistakes: this._totalMistakes,
    strokesRemaining: this._character.strokes.length - this._currentStrokeIndex - 1,
    drawnPath: getDrawnPath(this._userStroke)
  });
  var animation = characterActions.showStroke('main', this._currentStrokeIndex, this._options.strokeFadeDuration);
  this._currentStrokeIndex += 1;
  this._numRecentMistakes = 0;

  if (this._currentStrokeIndex === this._character.strokes.length) {
    this._isActive = false;
    callIfExists(this._options.onComplete, {
      character: this._character.symbol,
      totalMistakes: this._totalMistakes
    });
    if (this._options.highlightOnComplete) {
      animation = animation.concat(quizActions.highlightCompleteChar(this._character, this._options.highlightCompleteColor, this._options.strokeHighlightDuration * 2));
    }
  }
  this._renderState.run(animation);
};

Quiz.prototype._handleFailure = function () {
  this._numRecentMistakes += 1;
  this._totalMistakes += 1;
  callIfExists(this._options.onMistake, {
    character: this._character.symbol,
    strokeNum: this._currentStrokeIndex,
    mistakesOnStroke: this._numRecentMistakes,
    totalMistakes: this._totalMistakes,
    strokesRemaining: this._character.strokes.length - this._currentStrokeIndex,
    drawnPath: getDrawnPath(this._userStroke)
  });
};

Quiz.prototype._getCurrentStroke = function () {
  return this._character.strokes[this._currentStrokeIndex];
};

module.exports = Quiz;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {


var _require = __webpack_require__(0),
    average = _require.average,
    assign = _require.assign;

var _require2 = __webpack_require__(2),
    cosineSimilarity = _require2.cosineSimilarity,
    equals = _require2.equals,
    frechetDist = _require2.frechetDist,
    distance = _require2.distance,
    subtract = _require2.subtract,
    normalizeCurve = _require2.normalizeCurve,
    rotate = _require2.rotate,
    length = _require2.length;

var AVG_DIST_THRESHOLD = 350; // bigger = more lenient
var COSINE_SIMILARITY_THRESHOLD = 0; // -1 to 1, smaller = more lenient
var START_AND_END_DIST_THRESHOLD = 250; // bigger = more lenient
var FRECHET_THRESHOLD = 0.40; // bigger = more lenient
var MIN_LEN_THRESHOLD = 0.35; // smaller = more lenient

var startAndEndMatches = function startAndEndMatches(points, closestStroke, leniency) {
  var startingDist = distance(closestStroke.getStartingPoint(), points[0]);
  var endingDist = distance(closestStroke.getEndingPoint(), points[points.length - 1]);
  return startingDist <= START_AND_END_DIST_THRESHOLD * leniency && endingDist <= START_AND_END_DIST_THRESHOLD * leniency;
};

// returns a list of the direction of all segments in the line connecting the points
var getEdgeVectors = function getEdgeVectors(points) {
  var vectors = [];
  var lastPoint = points[0];
  points.slice(1).forEach(function (point) {
    vectors.push(subtract(point, lastPoint));
    lastPoint = point;
  });
  return vectors;
};

var directionMatches = function directionMatches(points, stroke) {
  var edgeVectors = getEdgeVectors(points);
  var strokeVectors = stroke.getVectors();
  var similarities = edgeVectors.map(function (edgeVector) {
    var strokeSimilarities = strokeVectors.map(function (strokeVector) {
      return cosineSimilarity(strokeVector, edgeVector);
    });
    return Math.max.apply(Math, strokeSimilarities);
  });
  var avgSimilarity = average(similarities);
  return avgSimilarity > COSINE_SIMILARITY_THRESHOLD;
};

var lengthMatches = function lengthMatches(points, stroke, leniency) {
  return leniency * (length(points) + 25) / (stroke.getLength() + 25) >= MIN_LEN_THRESHOLD;
};

var stripDuplicates = function stripDuplicates(points) {
  if (points.length < 2) return points;
  var dedupedPoints = [points[0]];
  points.slice(1).forEach(function (point) {
    if (!equals(point, dedupedPoints[dedupedPoints.length - 1])) {
      dedupedPoints.push(point);
    }
  });
  return dedupedPoints;
};

var SHAPE_FIT_ROTATIONS = [Math.PI / 16, Math.PI / 32, 0, -1 * Math.PI / 32, -1 * Math.PI / 16];

var shapeFit = function shapeFit(curve1, curve2, leniency) {
  var normCurve1 = normalizeCurve(curve1);
  var normCurve2 = normalizeCurve(curve2);
  var minDist = Infinity;
  SHAPE_FIT_ROTATIONS.forEach(function (theta) {
    var dist = frechetDist(normCurve1, rotate(normCurve2, theta));
    if (dist < minDist) {
      minDist = dist;
    }
  });
  return minDist <= FRECHET_THRESHOLD * leniency;
};

var getMatchData = function getMatchData(points, stroke, options) {
  var _options$leniency = options.leniency,
      leniency = _options$leniency === undefined ? 1 : _options$leniency,
      _options$isOutlineVis = options.isOutlineVisible,
      isOutlineVisible = _options$isOutlineVis === undefined ? false : _options$isOutlineVis;

  var avgDist = stroke.getAverageDistance(points);
  var distMod = isOutlineVisible || stroke.strokeNum > 0 ? 0.5 : 1;
  var withinDistThresh = avgDist <= AVG_DIST_THRESHOLD * distMod * leniency;
  // short circuit for faster matching
  if (!withinDistThresh) {
    return { isMatch: false, avgDist: avgDist };
  }
  var startAndEndMatch = startAndEndMatches(points, stroke, leniency);
  var directionMatch = directionMatches(points, stroke);
  var shapeMatch = shapeFit(points, stroke.points, leniency);
  var lengthMatch = lengthMatches(points, stroke, leniency);
  return {
    isMatch: withinDistThresh && startAndEndMatch && directionMatch && shapeMatch && lengthMatch,
    avgDist: avgDist
  };
};

var strokeMatches = function strokeMatches(userStroke, character, strokeNum) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

  var points = stripDuplicates(userStroke.points);
  if (points.length < 2) return null;

  var strokeMatchData = getMatchData(points, character.strokes[strokeNum], options);
  if (!strokeMatchData.isMatch) return false;

  // if there is a better match among strokes the user hasn't drawn yet, the user probably drew the wrong stroke
  var laterStrokes = character.strokes.slice(strokeNum + 1);
  var closestMatchDist = strokeMatchData.avgDist;
  for (var i = 0; i < laterStrokes.length; i++) {
    var laterMatchData = getMatchData(points, laterStrokes[i], options);
    if (laterMatchData.isMatch && laterMatchData.avgDist < closestMatchDist) {
      closestMatchDist = laterMatchData.avgDist;
    }
  }
  // if there's a better match, rather that returning false automatically, try reducing leniency instead
  // if leniency is already really high we can allow some similar strokes to pass
  if (closestMatchDist < strokeMatchData.avgDist) {
    // adjust leniency between 0.3 and 0.6 depending on how much of a better match the new match is
    var leniencyAdjustment = 0.6 * (closestMatchDist + strokeMatchData.avgDist) / (2 * strokeMatchData.avgDist);
    var newLeniency = (options.leniency || 1) * leniencyAdjustment;
    var adjustedOptions = assign({}, options, { leniency: newLeniency });
    var adjustedStrokeMatchData = getMatchData(points, character.strokes[strokeNum], adjustedOptions);
    return adjustedStrokeMatchData.isMatch;
  }
  return true;
};

module.exports = strokeMatches;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {


function UserStroke(id, startingPoint, startingExternalPoint) {
  this.id = id;
  this.points = [startingPoint];
  this.externalPoints = [startingExternalPoint];
}

UserStroke.prototype.appendPoint = function (point, externalPoint) {
  this.points.push(point);
  this.externalPoints.push(externalPoint);
};

module.exports = UserStroke;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {


var Mutation = __webpack_require__(5);
var characterActions = __webpack_require__(4);

var _require = __webpack_require__(0),
    objRepeat = _require.objRepeat;

var startQuiz = function startQuiz(character, fadeDuration) {
  return characterActions.hideCharacter('main', character, fadeDuration).concat([new Mutation('character.highlight', {
    opacity: 1,
    strokes: objRepeat({ opacity: 0 }, character.strokes.length)
  }, { force: true }), new Mutation('character.main', {
    opacity: 1,
    strokes: objRepeat({ opacity: 0 }, character.strokes.length)
  }, { force: true })]);
};

var startUserStroke = function startUserStroke(id, point) {
  return [new Mutation('quiz.activeUserStrokeId', id, { force: true }), new Mutation('userStrokes.' + id, {
    points: [point],
    opacity: 1
  }, { force: true })];
};

var updateUserStroke = function updateUserStroke(userStrokeId, points) {
  return [new Mutation('userStrokes.' + userStrokeId + '.points', points, { force: true })];
};

var removeUserStroke = function removeUserStroke(userStrokeId, duration) {
  return [new Mutation('userStrokes.' + userStrokeId + '.opacity', 0, { duration: duration }), new Mutation('userStrokes.' + userStrokeId, null, { force: true })];
};

var highlightCompleteChar = function highlightCompleteChar(character, color, duration) {
  return [new Mutation('character.highlight.strokeColor', color)].concat(characterActions.hideCharacter('highlight', character)).concat(characterActions.showCharacter('highlight', character, duration / 2)).concat(characterActions.hideCharacter('highlight', character, duration / 2));
};

module.exports = {
  highlightCompleteChar: highlightCompleteChar,
  highlightStroke: characterActions.highlightStroke,
  startQuiz: startQuiz,
  startUserStroke: startUserStroke,
  updateUserStroke: updateUserStroke,
  removeUserStroke: removeUserStroke
};

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {


var HanziWriterRenderer = __webpack_require__(20);
var RenderTarget = __webpack_require__(24);

module.exports = {
  HanziWriterRenderer: HanziWriterRenderer,
  createRenderTarget: RenderTarget.init
};

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {


var CharacterRenderer = __webpack_require__(21);
var UserStrokeRenderer = __webpack_require__(23);

var _require = __webpack_require__(0),
    assign = _require.assign;

var svg = __webpack_require__(3);

function HanziWriterRenderer(character, positioner) {
  this._character = character;
  this._positioner = positioner;
  this._mainCharRenderer = new CharacterRenderer(character);
  this._outlineCharRenderer = new CharacterRenderer(character);
  this._highlightCharRenderer = new CharacterRenderer(character);
  this._userStrokeRenderers = {};
}

HanziWriterRenderer.prototype.mount = function (target) {
  var positionedTarget = target.createSubRenderTarget();
  var group = positionedTarget.svg;
  svg.attr(group, 'transform', '\n    translate(' + this._positioner.xOffset + ', ' + (this._positioner.height - this._positioner.yOffset) + ')\n    scale(' + this._positioner.scale + ', ' + -1 * this._positioner.scale + ')\n  ');
  this._outlineCharRenderer.mount(positionedTarget);
  this._mainCharRenderer.mount(positionedTarget);
  this._highlightCharRenderer.mount(positionedTarget);
  this._positionedTarget = positionedTarget;
};

HanziWriterRenderer.prototype.render = function (props) {
  var _this = this;

  this._outlineCharRenderer.render({
    opacity: props.character.outline.opacity,
    strokes: props.character.outline.strokes,
    strokeColor: props.options.outlineColor
  });
  this._mainCharRenderer.render({
    opacity: props.character.main.opacity,
    strokes: props.character.main.strokes,
    strokeColor: props.options.strokeColor,
    radicalColor: props.options.radicalColor
  });
  this._highlightCharRenderer.render({
    opacity: props.character.highlight.opacity,
    strokes: props.character.highlight.strokes,
    strokeColor: props.options.highlightColor
  });

  var userStrokes = props.userStrokes || {};
  Object.keys(this._userStrokeRenderers).forEach(function (userStrokeId) {
    if (!userStrokes[userStrokeId]) {
      _this._userStrokeRenderers[userStrokeId].destroy();
      delete _this._userStrokeRenderers[userStrokeId];
    }
  });

  Object.keys(userStrokes).forEach(function (userStrokeId) {
    if (!userStrokes[userStrokeId]) return;
    var userStrokeProps = assign({
      strokeWidth: props.options.drawingWidth,
      strokeColor: props.options.drawingColor
    }, userStrokes[userStrokeId]);
    var strokeRenderer = _this._userStrokeRenderers[userStrokeId];
    if (!strokeRenderer) {
      strokeRenderer = new UserStrokeRenderer();
      strokeRenderer.mount(_this._positionedTarget);
      _this._userStrokeRenderers[userStrokeId] = strokeRenderer;
    }
    strokeRenderer.render(userStrokeProps);
  });
};

HanziWriterRenderer.prototype.destroy = function () {
  svg.removeElm(this._positionedTarget.svg);
  this._positionedTarget.defs.innerHTML = '';
};

module.exports = HanziWriterRenderer;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {


var _require = __webpack_require__(0),
    isMsBrowser = _require.isMsBrowser;

var StrokeRenderer = __webpack_require__(22);

function CharacterRenderer(character) {
  this._oldProps = {};
  this._strokeRenderers = character.strokes.map(function (stroke) {
    return new StrokeRenderer(stroke);
  });
}

CharacterRenderer.prototype.mount = function (target) {
  var subTarget = target.createSubRenderTarget();
  this._group = subTarget.svg;
  this._strokeRenderers.forEach(function (strokeRenderer, i) {
    strokeRenderer.mount(subTarget);
  });
};

CharacterRenderer.prototype.render = function (props) {
  if (props === this._oldProps) return;
  if (props.opacity !== this._oldProps.opacity) {
    this._group.style.opacity = props.opacity;
    // MS browsers seem to have a bug where if SVG is set to display:none, it sometimes breaks.
    // More info: https://github.com/chanind/hanzi-writer/issues/164
    // this is just a perf improvement, so disable for MS browsers
    if (!isMsBrowser) {
      if (props.opacity === 0) {
        this._group.style.display = 'none';
      } else if (this._oldProps.opacity === 0) {
        this._group.style.removeProperty('display');
      }
    }
  }
  var colorsChanged = !this._oldProps || props.strokeColor !== this._oldProps.strokeColor || props.radicalColor !== this._oldProps.radicalColor;
  if (colorsChanged || props.strokes !== this._oldProps.strokes) {
    for (var i = 0; i < this._strokeRenderers.length; i++) {
      if (!colorsChanged && this._oldProps.strokes && props.strokes[i] === this._oldProps.strokes[i]) continue;
      this._strokeRenderers[i].render({
        strokeColor: props.strokeColor,
        radicalColor: props.radicalColor,
        opacity: props.strokes[i].opacity,
        displayPortion: props.strokes[i].displayPortion
      });
    }
  }
  this._oldProps = props;
};

module.exports = CharacterRenderer;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {


var _require = __webpack_require__(0),
    counter = _require.counter;

var svg = __webpack_require__(3);

var _require2 = __webpack_require__(2),
    extendStart = _require2.extendStart,
    getPathString = _require2.getPathString;

var StrokeRendererBase = __webpack_require__(6);

var STROKE_WIDTH = 200;

// this is a stroke composed of several stroke parts
function StrokeRenderer(stroke) {
  this._oldProps = {};
  this._stroke = stroke;
  this._pathLength = stroke.getLength() + STROKE_WIDTH / 2;
}
StrokeRenderer.prototype = Object.create(StrokeRendererBase.prototype);

StrokeRenderer.prototype.mount = function (target) {
  this._animationPath = svg.createElm('path');
  this._clip = svg.createElm('clipPath');
  this._strokePath = svg.createElm('path');
  var maskId = 'mask-' + counter();
  svg.attr(this._clip, 'id', maskId);

  svg.attr(this._strokePath, 'd', this._stroke.path);
  this._animationPath.style.opacity = 0;
  svg.attr(this._animationPath, 'clip-path', svg.urlIdRef(maskId));

  var extendedMaskPoints = extendStart(this._stroke.points, STROKE_WIDTH / 2);
  svg.attr(this._animationPath, 'd', getPathString(extendedMaskPoints));
  svg.attrs(this._animationPath, {
    stroke: '#FFFFFF',
    'stroke-width': STROKE_WIDTH,
    fill: 'none',
    'stroke-linecap': 'round',
    'stroke-linejoin': 'miter',
    'stroke-dasharray': this._pathLength + ',' + this._pathLength
  });

  this._clip.appendChild(this._strokePath);
  target.defs.appendChild(this._clip);
  target.svg.appendChild(this._animationPath);
  return this;
};

StrokeRenderer.prototype.render = function (props) {
  if (props === this._oldProps) return;
  if (props.displayPortion !== this._oldProps.displayPortion) {
    this._animationPath.style.strokeDashoffset = this._getStrokeDashoffset(props.displayPortion);
  }

  var color = this._getColor(props);
  if (color !== this._getColor(this._oldProps)) {
    var r = color.r,
        g = color.g,
        b = color.b,
        a = color.a;

    svg.attrs(this._animationPath, { stroke: 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')' });
  }

  if (props.opacity !== this._oldProps.opacity) {
    this._animationPath.style.opacity = props.opacity;
  }
  this._oldProps = props;
};

module.exports = StrokeRenderer;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {


var svg = __webpack_require__(3);

var _require = __webpack_require__(2),
    getPathString = _require.getPathString;

function UserStrokeRenderer() {
  this._oldProps = {};
}

UserStrokeRenderer.prototype.mount = function (target) {
  this._path = svg.createElm('path');
  target.svg.appendChild(this._path);
};

UserStrokeRenderer.prototype.render = function (props) {
  if (props === this._oldProps) return;
  if (props.strokeColor !== this._oldProps.strokeColor || props.strokeWidth !== this._oldProps.strokeWidth) {
    var _props$strokeColor = props.strokeColor,
        r = _props$strokeColor.r,
        g = _props$strokeColor.g,
        b = _props$strokeColor.b,
        a = _props$strokeColor.a;

    svg.attrs(this._path, {
      fill: 'none',
      stroke: 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')',
      'stroke-width': props.strokeWidth,
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round'
    });
  }
  if (props.opacity !== this._oldProps.opacity) {
    svg.attr(this._path, 'opacity', props.opacity);
  }
  if (props.points !== this._oldProps.points) {
    svg.attr(this._path, 'd', getPathString(props.points));
  }
  this._oldProps = props;
};

UserStrokeRenderer.prototype.destroy = function () {
  svg.removeElm(this._path);
};

module.exports = UserStrokeRenderer;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {
/* WEBPACK VAR INJECTION */(function(global) {

var _require = __webpack_require__(3),
    createElm = _require.createElm,
    attrs = _require.attrs;

var RenderTargetBase = __webpack_require__(7);

function RenderTarget(svg, defs) {
  this.svg = svg;
  this.defs = defs;
  this.node = svg;

  if (this.node.createSVGPoint) {
    this._pt = this.node.createSVGPoint();
  }
}
RenderTarget.prototype = Object.create(RenderTargetBase.prototype);

RenderTarget.prototype.createSubRenderTarget = function () {
  var group = createElm('g');
  this.svg.appendChild(group);
  return new RenderTarget(group, this.defs);
};

RenderTarget.prototype._getMousePoint = function (evt) {
  if (this._pt) {
    this._pt.x = evt.clientX;
    this._pt.y = evt.clientY;
    var localPt = this._pt.matrixTransform(this.node.getScreenCTM().inverse());
    return { x: localPt.x, y: localPt.y };
  }
  return RenderTargetBase.prototype._getMousePoint.call(this, evt);
};

RenderTarget.prototype._getTouchPoint = function (evt) {
  if (this._pt) {
    this._pt.x = evt.touches[0].clientX;
    this._pt.y = evt.touches[0].clientY;
    var localPt = this._pt.matrixTransform(this.node.getScreenCTM().inverse());
    return { x: localPt.x, y: localPt.y };
  }
  return RenderTargetBase.prototype._getTouchPoint.call(this, evt);
};

RenderTarget.init = function (elmOrId) {
  var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '100%';
  var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '100%';

  var svg = void 0;
  var elm = elmOrId;
  if (typeof elmOrId === 'string') {
    elm = global.document.getElementById(elmOrId);
  }
  if (!elm) {
    throw new Error('HanziWriter target element not found: ' + elmOrId);
  }
  var nodeType = elm.nodeName.toUpperCase();
  if (nodeType === 'SVG' || nodeType === 'G') {
    svg = elm;
  } else {
    svg = createElm('svg');
    elm.appendChild(svg);
  }
  attrs(svg, { width: width, height: height });
  var defs = createElm('defs');
  svg.appendChild(defs);
  return new RenderTarget(svg, defs);
};

module.exports = RenderTarget;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)));

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {


var HanziWriterRenderer = __webpack_require__(26);
var RenderTarget = __webpack_require__(30);

module.exports = {
  HanziWriterRenderer: HanziWriterRenderer,
  createRenderTarget: RenderTarget.init
};

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {


var CharacterRenderer = __webpack_require__(27);
var renderUserStroke = __webpack_require__(29);

var _require = __webpack_require__(0),
    assign = _require.assign;

function HanziWriterRenderer(character, positioner) {
  this._character = character;
  this._positioner = positioner;
  this._mainCharRenderer = new CharacterRenderer(character);
  this._outlineCharRenderer = new CharacterRenderer(character);
  this._highlightCharRenderer = new CharacterRenderer(character);
}

HanziWriterRenderer.prototype.mount = function (target) {
  this._target = target;
};

HanziWriterRenderer.prototype._animationFrame = function (func) {
  var ctx = this._target.getContext();
  ctx.clearRect(0, 0, this._positioner.width, this._positioner.height);

  ctx.save();
  ctx.translate(this._positioner.xOffset, this._positioner.height - this._positioner.yOffset);
  ctx.transform(1, 0, 0, -1, 0, 0);
  ctx.scale(this._positioner.scale, this._positioner.scale);
  func(ctx);
  ctx.restore();
  if (ctx.draw) ctx.draw();
};

HanziWriterRenderer.prototype.render = function (props) {
  var _this = this;

  this._animationFrame(function (ctx) {
    _this._outlineCharRenderer.render(ctx, {
      opacity: props.character.outline.opacity,
      strokes: props.character.outline.strokes,
      strokeColor: props.options.outlineColor
    });
    _this._mainCharRenderer.render(ctx, {
      opacity: props.character.main.opacity,
      strokes: props.character.main.strokes,
      strokeColor: props.options.strokeColor,
      radicalColor: props.options.radicalColor
    });
    _this._highlightCharRenderer.render(ctx, {
      opacity: props.character.highlight.opacity,
      strokes: props.character.highlight.strokes,
      strokeColor: props.options.highlightColor
    });

    var userStrokes = props.userStrokes || {};
    Object.keys(userStrokes).forEach(function (userStrokeId) {
      if (userStrokes[userStrokeId]) {
        var userStrokeProps = assign({
          strokeWidth: props.options.drawingWidth,
          strokeColor: props.options.drawingColor
        }, userStrokes[userStrokeId]);
        renderUserStroke(ctx, userStrokeProps);
      }
    });
  });
};

HanziWriterRenderer.prototype.destroy = function () {};

module.exports = HanziWriterRenderer;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {


var StrokeRenderer = __webpack_require__(28);

function CharacterRenderer(character) {
  this._strokeRenderers = character.strokes.map(function (stroke) {
    return new StrokeRenderer(stroke);
  });
}

CharacterRenderer.prototype.render = function (ctx, props) {
  if (props.opacity < 0.05) return;
  for (var i = 0; i < this._strokeRenderers.length; i++) {
    this._strokeRenderers[i].render(ctx, {
      strokeColor: props.strokeColor,
      radicalColor: props.radicalColor,
      opacity: props.strokes[i].opacity * props.opacity,
      displayPortion: props.strokes[i].displayPortion
    });
  }
};

module.exports = CharacterRenderer;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {
/* WEBPACK VAR INJECTION */(function(global) {

var _require = __webpack_require__(2),
    extendStart = _require.extendStart;

var _require2 = __webpack_require__(8),
    drawPath = _require2.drawPath,
    pathStringToCanvas = _require2.pathStringToCanvas;

var StrokeRendererBase = __webpack_require__(6);

var STROKE_WIDTH = 200;

// this is a stroke composed of several stroke parts
function StrokeRenderer(stroke) {
  var usePath2D = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  this._stroke = stroke;
  this._pathLength = stroke.getLength() + STROKE_WIDTH / 2;
  if (usePath2D && global.Path2D) {
    this._path2D = new global.Path2D(this._stroke.path);
  } else {
    this._pathCmd = pathStringToCanvas(this._stroke.path);
  }
  this._extendedMaskPoints = extendStart(this._stroke.points, STROKE_WIDTH / 2);
}
StrokeRenderer.prototype = Object.create(StrokeRendererBase.prototype);

StrokeRenderer.prototype.render = function (ctx, props) {
  if (props.opacity < 0.05) return;

  ctx.save();
  if (this._path2D) {
    ctx.clip(this._path2D);
  } else {
    this._pathCmd(ctx);
    // wechat bugs out if the clip path isn't stroked or filled
    ctx.globalAlpha = 0;
    ctx.stroke();
    ctx.clip();
  }

  var _getColor = this._getColor(props),
      r = _getColor.r,
      g = _getColor.g,
      b = _getColor.b,
      a = _getColor.a;

  var color = a === 1 ? 'rgb(' + r + ',' + g + ',' + b + ')' : 'rgb(' + r + ',' + g + ',' + b + ',' + a + ')';
  var dashOffset = this._getStrokeDashoffset(props.displayPortion);
  ctx.globalAlpha = props.opacity;
  ctx.strokeStyle = color;
  ctx.fillStyle = color;
  ctx.lineWidth = STROKE_WIDTH;
  ctx.lineCap = 'round';
  ctx.lineJoin = 'round';
  // wechat sets dashOffset as a second param here. Should be harmless for browsers to add here too
  ctx.setLineDash([this._pathLength, this._pathLength], dashOffset);
  ctx.lineDashOffset = dashOffset;
  drawPath(ctx, this._extendedMaskPoints);

  ctx.restore();
};

module.exports = StrokeRenderer;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)));

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {


var _require = __webpack_require__(8),
    drawPath = _require.drawPath;

module.exports = function (ctx, props) {
  if (props.opacity < 0.05) return;
  var _props$strokeColor = props.strokeColor,
      r = _props$strokeColor.r,
      g = _props$strokeColor.g,
      b = _props$strokeColor.b,
      a = _props$strokeColor.a;


  ctx.save();
  ctx.globalAlpha = props.opacity;
  ctx.lineWidth = props.strokeWidth;
  ctx.strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
  ctx.lineCap = 'round';
  ctx.lineJoin = 'round';
  drawPath(ctx, props.points);
  ctx.restore();
};

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {
/* WEBPACK VAR INJECTION */(function(global) {

var RenderTargetBase = __webpack_require__(7);

function RenderTarget(canvas) {
  this.node = canvas;
}
RenderTarget.prototype = Object.create(RenderTargetBase.prototype);

RenderTarget.prototype.getContext = function () {
  return this.node.getContext('2d');
};

RenderTarget.init = function (elmOrId) {
  var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '100%';
  var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '100%';

  var canvas = void 0;
  var elm = elmOrId;
  if (typeof elmOrId === 'string') {
    elm = global.document.getElementById(elmOrId);
  }
  if (!elm) {
    throw new Error('HanziWriter target element not found: ' + elmOrId);
  }
  var nodeType = elm.nodeName.toUpperCase();
  if (nodeType === 'CANVAS') {
    canvas = elm;
  } else {
    canvas = global.document.createElement('canvas');
    elm.appendChild(canvas);
  }
  canvas.setAttribute('width', width);
  canvas.setAttribute('height', height);
  return new RenderTarget(canvas);
};

module.exports = RenderTarget;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)));

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {
/* WEBPACK VAR INJECTION */(function(global) {

var VERSION = '2.0';
var getCharDataUrl = function getCharDataUrl(char) {
  return 'https://cdn.jsdelivr.net/npm/hanzi-writer-data@' + VERSION + '/' + char + '.json';
};

module.exports = function (char, onLoad, onError) {
  // load char data from hanziwriter cdn (currently hosted on jsdelivr)
  var xhr = new global.XMLHttpRequest();
  if (xhr.overrideMimeType) {
    // IE 9 and 10 don't seem to support this...
    xhr.overrideMimeType('application/json');
  }
  xhr.open('GET', getCharDataUrl(char), true);
  xhr.onerror = function (event) {
    onError(xhr, event);
  };
  xhr.onreadystatechange = function () {
    // TODO: error handling
    if (xhr.readyState !== 4) return;

    if (xhr.status === 200) {
      onLoad(JSON.parse(xhr.responseText));
    } else if (xhr.status !== 0 && onError) {
      onError(xhr);
    }
  };
  xhr.send(null);
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)));

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {


var _require = __webpack_require__(0),
    callIfExists = _require.callIfExists;

function LoadingManager(options) {
  this._loadCounter = 0;
  this._options = options;
  this._isLoading = false;

  // use this to attribute to determine if there was a problem with loading
  this.loadingFailed = false;
}

LoadingManager.prototype._debouncedLoad = function (char, count) {
  var _this = this;

  // these wrappers ignore all responses except the most recent.
  var wrappedResolve = function wrappedResolve(data) {
    if (count === _this._loadCounter) _this._resolve(data);
  };
  var wrappedReject = function wrappedReject(reason) {
    if (count === _this._loadCounter) _this._reject(reason);
  };

  var returnedData = this._options.charDataLoader(char, wrappedResolve, wrappedReject);
  if (returnedData) wrappedResolve(returnedData);
};

LoadingManager.prototype._setupLoadingPromise = function () {
  var _this2 = this;

  return new Promise(function (resolve, reject) {
    _this2._resolve = resolve;
    _this2._reject = reject;
  }).then(function (data) {
    _this2._isLoading = false;
    callIfExists(_this2._options.onLoadCharDataSuccess, data);
    return data;
  }, function (reason) {
    _this2._isLoading = false;
    _this2.loadingFailed = true;
    callIfExists(_this2._options.onLoadCharDataError, reason);
    // If error callback wasn't provided, throw an error so the developer will be aware something went wrong
    if (!_this2._options.onLoadCharDataError) {
      if (reason instanceof Error) throw reason;
      var err = new Error('Failed to load char data for ' + _this2._loadingChar);
      err.reason = reason;
      throw err;
    }
  });
};

LoadingManager.prototype.loadCharData = function (char) {
  this._loadingChar = char;
  var promise = this._setupLoadingPromise();
  this.loadingFailed = false;
  this._isLoading = true;
  this._loadCounter++;
  this._debouncedLoad(char, this._loadCounter);
  return promise;
};

module.exports = LoadingManager;

/***/ })
/******/ ]);
});

const formattedUserLocal = formattedLocalCode(globalThis.navigator.language);
registerTranslateConfig({
    loader: lang => {
        switch (lang) {
            case 'en':
            case 'fr':
            case 'ja':
            case 'ko':
                return fetch(`/assets/i18n/${lang}.json`).then(res => res.json());
            default:
                return fetch(`/assets/i18n/en.json`).then(res => res.json());
        }
    }
});
if (getLang) {
    use(getLang);
    state.setLang(getLang);
}
else {
    use(formattedUserLocal);
    setLang(formattedUserLocal);
    state.setLang(formattedLocalCode);
}
initDarkmode(mode => mode === 'true'
    ? state.setMode('darkmode')
    : state.setMode('lightmode'));
